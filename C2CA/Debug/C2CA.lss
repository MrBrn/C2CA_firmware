
C2CA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008c  00800100  00004e1e  00004eb2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004e1e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003d0  0080018c  0080018c  00004f3e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004f3e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004f9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00004fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004bb0  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000476  00000000  00000000  00009c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000029b6  00000000  00000000  0000a082  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002fc  00000000  00000000  0000ca38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00010742  00000000  00000000  0000cd34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004a54  00000000  00000000  0001d476  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000710  00000000  00000000  00021eca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000063c  00000000  00000000  000225da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	59 c0       	rjmp	.+178    	; 0xb4 <__ctors_end>
       2:	00 00       	nop
       4:	74 c0       	rjmp	.+232    	; 0xee <__bad_interrupt>
       6:	00 00       	nop
       8:	72 c0       	rjmp	.+228    	; 0xee <__bad_interrupt>
       a:	00 00       	nop
       c:	70 c0       	rjmp	.+224    	; 0xee <__bad_interrupt>
       e:	00 00       	nop
      10:	6e c0       	rjmp	.+220    	; 0xee <__bad_interrupt>
      12:	00 00       	nop
      14:	6c c0       	rjmp	.+216    	; 0xee <__bad_interrupt>
      16:	00 00       	nop
      18:	6a c0       	rjmp	.+212    	; 0xee <__bad_interrupt>
      1a:	00 00       	nop
      1c:	4f c6       	rjmp	.+3230   	; 0xcbc <__vector_7>
      1e:	00 00       	nop
      20:	66 c0       	rjmp	.+204    	; 0xee <__bad_interrupt>
      22:	00 00       	nop
      24:	64 c0       	rjmp	.+200    	; 0xee <__bad_interrupt>
      26:	00 00       	nop
      28:	62 c0       	rjmp	.+196    	; 0xee <__bad_interrupt>
      2a:	00 00       	nop
      2c:	e5 c3       	rjmp	.+1994   	; 0x7f8 <__vector_11>
      2e:	00 00       	nop
      30:	5e c0       	rjmp	.+188    	; 0xee <__bad_interrupt>
      32:	00 00       	nop
      34:	5c c0       	rjmp	.+184    	; 0xee <__bad_interrupt>
      36:	00 00       	nop
      38:	41 c3       	rjmp	.+1666   	; 0x6bc <__vector_14>
      3a:	00 00       	nop
      3c:	58 c0       	rjmp	.+176    	; 0xee <__bad_interrupt>
      3e:	00 00       	nop
      40:	56 c0       	rjmp	.+172    	; 0xee <__bad_interrupt>
      42:	00 00       	nop
      44:	54 c0       	rjmp	.+168    	; 0xee <__bad_interrupt>
      46:	00 00       	nop
      48:	05 c3       	rjmp	.+1546   	; 0x654 <__vector_18>
      4a:	00 00       	nop
      4c:	c3 c2       	rjmp	.+1414   	; 0x5d4 <__vector_19>
      4e:	00 00       	nop
      50:	4e c0       	rjmp	.+156    	; 0xee <__bad_interrupt>
      52:	00 00       	nop
      54:	4c c0       	rjmp	.+152    	; 0xee <__bad_interrupt>
      56:	00 00       	nop
      58:	4a c0       	rjmp	.+148    	; 0xee <__bad_interrupt>
      5a:	00 00       	nop
      5c:	48 c0       	rjmp	.+144    	; 0xee <__bad_interrupt>
      5e:	00 00       	nop
      60:	46 c0       	rjmp	.+140    	; 0xee <__bad_interrupt>
      62:	00 00       	nop
      64:	44 c0       	rjmp	.+136    	; 0xee <__bad_interrupt>
      66:	00 00       	nop
      68:	1d 04       	cpc	r1, r13
      6a:	6f 04       	cpc	r6, r15
      6c:	e2 04       	cpc	r14, r2
      6e:	18 05       	cpc	r17, r8
      70:	49 05       	cpc	r20, r9
      72:	5c 05       	cpc	r21, r12
      74:	92 05       	cpc	r25, r2
      76:	c2 05       	cpc	r28, r2

00000078 <__trampolines_end>:
      78:	4e 41       	sbci	r20, 0x1E	; 30
      7a:	4e 49       	sbci	r20, 0x9E	; 158

0000007b <pstr_inity>:
      7b:	49 4e 49 54 59                                      INITY

00000080 <pstr_inf>:
      80:	49 4e 46                                            INF

00000083 <pwr_m10>:
      83:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      93:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000009b <pwr_p10>:
      9b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      ab:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	11 e0       	ldi	r17, 0x01	; 1
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	ee e1       	ldi	r30, 0x1E	; 30
      c8:	fe e4       	ldi	r31, 0x4E	; 78
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	ac 38       	cpi	r26, 0x8C	; 140
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	25 e0       	ldi	r18, 0x05	; 5
      d8:	ac e8       	ldi	r26, 0x8C	; 140
      da:	b1 e0       	ldi	r27, 0x01	; 1
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	ac 35       	cpi	r26, 0x5C	; 92
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
      e6:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <main>
      ea:	0c 94 0d 27 	jmp	0x4e1a	; 0x4e1a <_exit>

000000ee <__bad_interrupt>:
      ee:	88 cf       	rjmp	.-240    	; 0x0 <__vectors>

000000f0 <uart_init>:
 * This function will initialize the UART baud rate registers with the correct
 * values using the AVR libc setbaud utility. In addition set the UART to
 * 8-bit, 1 stop and no parity.
 */
static void uart_init(void)
{
      f0:	cf 93       	push	r28
      f2:	df 93       	push	r29
      f4:	cd b7       	in	r28, 0x3d	; 61
      f6:	de b7       	in	r29, 0x3e	; 62
      f8:	69 97       	sbiw	r28, 0x19	; 25
      fa:	0f b6       	in	r0, 0x3f	; 63
      fc:	f8 94       	cli
      fe:	de bf       	out	0x3e, r29	; 62
     100:	0f be       	out	0x3f, r0	; 63
     102:	cd bf       	out	0x3d, r28	; 61
#if defined UBRR0H
	// get the values from the setbaud tool
	UBRR0H = UBRRH_VALUE;
     104:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBRRL_VALUE;
     108:	82 e2       	ldi	r24, 0x22	; 34
     10a:	80 93 c4 00 	sts	0x00C4, r24
#else
#error "Device is not supported by the driver"
#endif

#if USE_2X
	UCSR0A |= (1 << U2X0);
     10e:	e0 ec       	ldi	r30, 0xC0	; 192
     110:	f0 e0       	ldi	r31, 0x00	; 0
     112:	80 81       	ld	r24, Z
     114:	82 60       	ori	r24, 0x02	; 2
     116:	80 83       	st	Z, r24
#endif

	// enable RX and TX and set interrupts on rx complete
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
     118:	88 e9       	ldi	r24, 0x98	; 152
     11a:	80 93 c1 00 	sts	0x00C1, r24

	// 8-bit, 1 stop bit, no parity, asynchronous UART
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00) | (0 << USBS0) |
     11e:	86 e0       	ldi	r24, 0x06	; 6
     120:	80 93 c2 00 	sts	0x00C2, r24
 * \retval struct ring_buffer a struct containing the ring buffer
 */
static inline struct ring_buffer ring_buffer_init(uint8_t *buffer, uint8_t size)
{
	struct ring_buffer ring;
	ring.write_offset = 0;
     124:	1d 8a       	std	Y+21, r1	; 0x15
	ring.read_offset = 0;
     126:	1e 8a       	std	Y+22, r1	; 0x16
	ring.size = size;
     128:	8f ef       	ldi	r24, 0xFF	; 255
     12a:	8f 8b       	std	Y+23, r24	; 0x17
	ring.buffer = buffer;
     12c:	2c e2       	ldi	r18, 0x2C	; 44
     12e:	33 e0       	ldi	r19, 0x03	; 3
     130:	39 8f       	std	Y+25, r19	; 0x19
     132:	28 8f       	std	Y+24, r18	; 0x18
	return ring;
     134:	95 e0       	ldi	r25, 0x05	; 5
     136:	fe 01       	movw	r30, r28
     138:	75 96       	adiw	r30, 0x15	; 21
     13a:	de 01       	movw	r26, r28
     13c:	1b 96       	adiw	r26, 0x0b	; 11
     13e:	01 90       	ld	r0, Z+
     140:	0d 92       	st	X+, r0
     142:	9a 95       	dec	r25
     144:	e1 f7       	brne	.-8      	; 0x13e <uart_init+0x4e>
     146:	95 e0       	ldi	r25, 0x05	; 5
     148:	fe 01       	movw	r30, r28
     14a:	3b 96       	adiw	r30, 0x0b	; 11
     14c:	de 01       	movw	r26, r28
     14e:	50 96       	adiw	r26, 0x10	; 16
     150:	01 90       	ld	r0, Z+
     152:	0d 92       	st	X+, r0
     154:	9a 95       	dec	r25
     156:	e1 f7       	brne	.-8      	; 0x150 <uart_init+0x60>
			(0 << UPM01) | (0 << UPM00) | (0 << UMSEL01) |
			(0 << UMSEL00);

	// initialize the in and out buffer for the UART
	ring_buffer_out = ring_buffer_init(out_buffer, BUFFER_SIZE);
     158:	95 e0       	ldi	r25, 0x05	; 5
     15a:	fe 01       	movw	r30, r28
     15c:	70 96       	adiw	r30, 0x10	; 16
     15e:	a5 e5       	ldi	r26, 0x55	; 85
     160:	b5 e0       	ldi	r27, 0x05	; 5
     162:	01 90       	ld	r0, Z+
     164:	0d 92       	st	X+, r0
     166:	9a 95       	dec	r25
     168:	e1 f7       	brne	.-8      	; 0x162 <uart_init+0x72>
 * \retval struct ring_buffer a struct containing the ring buffer
 */
static inline struct ring_buffer ring_buffer_init(uint8_t *buffer, uint8_t size)
{
	struct ring_buffer ring;
	ring.write_offset = 0;
     16a:	1d 8a       	std	Y+21, r1	; 0x15
	ring.read_offset = 0;
     16c:	1e 8a       	std	Y+22, r1	; 0x16
	ring.size = size;
     16e:	8f 8b       	std	Y+23, r24	; 0x17
	ring.buffer = buffer;
     170:	8b e2       	ldi	r24, 0x2B	; 43
     172:	94 e0       	ldi	r25, 0x04	; 4
     174:	99 8f       	std	Y+25, r25	; 0x19
     176:	88 8f       	std	Y+24, r24	; 0x18
	return ring;
     178:	85 e0       	ldi	r24, 0x05	; 5
     17a:	fe 01       	movw	r30, r28
     17c:	75 96       	adiw	r30, 0x15	; 21
     17e:	de 01       	movw	r26, r28
     180:	11 96       	adiw	r26, 0x01	; 1
     182:	01 90       	ld	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	8a 95       	dec	r24
     188:	e1 f7       	brne	.-8      	; 0x182 <uart_init+0x92>
     18a:	85 e0       	ldi	r24, 0x05	; 5
     18c:	fe 01       	movw	r30, r28
     18e:	31 96       	adiw	r30, 0x01	; 1
     190:	de 01       	movw	r26, r28
     192:	16 96       	adiw	r26, 0x06	; 6
     194:	01 90       	ld	r0, Z+
     196:	0d 92       	st	X+, r0
     198:	8a 95       	dec	r24
     19a:	e1 f7       	brne	.-8      	; 0x194 <uart_init+0xa4>
	ring_buffer_in = ring_buffer_init(in_buffer, BUFFER_SIZE);
     19c:	85 e0       	ldi	r24, 0x05	; 5
     19e:	fe 01       	movw	r30, r28
     1a0:	36 96       	adiw	r30, 0x06	; 6
     1a2:	a2 e3       	ldi	r26, 0x32	; 50
     1a4:	b5 e0       	ldi	r27, 0x05	; 5
     1a6:	01 90       	ld	r0, Z+
     1a8:	0d 92       	st	X+, r0
     1aa:	8a 95       	dec	r24
     1ac:	e1 f7       	brne	.-8      	; 0x1a6 <uart_init+0xb6>
}
     1ae:	69 96       	adiw	r28, 0x19	; 25
     1b0:	0f b6       	in	r0, 0x3f	; 63
     1b2:	f8 94       	cli
     1b4:	de bf       	out	0x3e, r29	; 62
     1b6:	0f be       	out	0x3f, r0	; 63
     1b8:	cd bf       	out	0x3d, r28	; 61
     1ba:	df 91       	pop	r29
     1bc:	cf 91       	pop	r28
     1be:	08 95       	ret

000001c0 <MaxRTDinit>:
*************************************************/
static inline void MaxRTDinit( unsigned char dataWrite, unsigned char ch)
{
	unsigned char dummy;

	switch (ch)
     1c0:	62 30       	cpi	r22, 0x02	; 2
     1c2:	59 f0       	breq	.+22     	; 0x1da <MaxRTDinit+0x1a>
     1c4:	18 f4       	brcc	.+6      	; 0x1cc <MaxRTDinit+0xc>
     1c6:	61 30       	cpi	r22, 0x01	; 1
     1c8:	31 f0       	breq	.+12     	; 0x1d6 <MaxRTDinit+0x16>
     1ca:	0c c0       	rjmp	.+24     	; 0x1e4 <MaxRTDinit+0x24>
     1cc:	63 30       	cpi	r22, 0x03	; 3
     1ce:	39 f0       	breq	.+14     	; 0x1de <MaxRTDinit+0x1e>
     1d0:	64 30       	cpi	r22, 0x04	; 4
     1d2:	39 f0       	breq	.+14     	; 0x1e2 <MaxRTDinit+0x22>
     1d4:	07 c0       	rjmp	.+14     	; 0x1e4 <MaxRTDinit+0x24>
	{
		case 1:
		PORTD &= 0b11101111;	// Set CS1 low
     1d6:	5c 98       	cbi	0x0b, 4	; 11
		break;
     1d8:	05 c0       	rjmp	.+10     	; 0x1e4 <MaxRTDinit+0x24>
		
		case 2:
		PORTD &= 0b11011111;	// Set CS2 low
     1da:	5d 98       	cbi	0x0b, 5	; 11
		break;
     1dc:	03 c0       	rjmp	.+6      	; 0x1e4 <MaxRTDinit+0x24>
		
		case 3:
		PORTD &= 0b10111111;	// Set CS3 low
     1de:	5e 98       	cbi	0x0b, 6	; 11
		break;
     1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <MaxRTDinit+0x24>
		
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
     1e2:	5f 98       	cbi	0x0b, 7	; 11
		break;
	}
	SPDR = 0x80;				// Configuration
     1e4:	90 e8       	ldi	r25, 0x80	; 128
     1e6:	9e bd       	out	0x2e, r25	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     1e8:	0d b4       	in	r0, 0x2d	; 45
     1ea:	07 fe       	sbrs	r0, 7
     1ec:	fd cf       	rjmp	.-6      	; 0x1e8 <MaxRTDinit+0x28>
	dummy = SPDR;				//just for clearing SPIF
     1ee:	9e b5       	in	r25, 0x2e	; 46
	SPDR = dataWrite;
     1f0:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     1f2:	0d b4       	in	r0, 0x2d	; 45
     1f4:	07 fe       	sbrs	r0, 7
     1f6:	fd cf       	rjmp	.-6      	; 0x1f2 <MaxRTDinit+0x32>
	dummy = SPDR;
     1f8:	8e b5       	in	r24, 0x2e	; 46
	
	PORTD |= 0b11110000;		// Set all CS High
     1fa:	8b b1       	in	r24, 0x0b	; 11
     1fc:	80 6f       	ori	r24, 0xF0	; 240
     1fe:	8b b9       	out	0x0b, r24	; 11
     200:	08 95       	ret

00000202 <GenCrc16>:
		idx ++;
	}
}

static inline int GenCrc16(char c[], int nByte)	// CRC-CCITT (XModem)
{
     202:	cf 93       	push	r28
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
     204:	16 16       	cp	r1, r22
     206:	17 06       	cpc	r1, r23
     208:	3c f5       	brge	.+78     	; 0x258 <GenCrc16+0x56>
     20a:	fc 01       	movw	r30, r24
     20c:	68 0f       	add	r22, r24
     20e:	79 1f       	adc	r23, r25
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	90 e0       	ldi	r25, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
     214:	b8 e0       	ldi	r27, 0x08	; 8
     216:	a0 e0       	ldi	r26, 0x00	; 0
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
     218:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
     21a:	29 2f       	mov	r18, r25
     21c:	33 27       	eor	r19, r19
     21e:	27 fd       	sbrc	r18, 7
     220:	3a 95       	dec	r19
     222:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
     224:	32 2f       	mov	r19, r18
     226:	22 27       	eor	r18, r18
     228:	4b 2f       	mov	r20, r27
     22a:	5a 2f       	mov	r21, r26
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
     22c:	33 23       	and	r19, r19
     22e:	3c f4       	brge	.+14     	; 0x23e <GenCrc16+0x3c>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
     230:	22 0f       	add	r18, r18
     232:	33 1f       	adc	r19, r19
     234:	c1 e2       	ldi	r28, 0x21	; 33
     236:	2c 27       	eor	r18, r28
     238:	c0 e1       	ldi	r28, 0x10	; 16
     23a:	3c 27       	eor	r19, r28
     23c:	02 c0       	rjmp	.+4      	; 0x242 <GenCrc16+0x40>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
     23e:	22 0f       	add	r18, r18
     240:	33 1f       	adc	r19, r19
     242:	41 50       	subi	r20, 0x01	; 1
     244:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
     246:	91 f7       	brne	.-28     	; 0x22c <GenCrc16+0x2a>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
     248:	98 2f       	mov	r25, r24
     24a:	88 27       	eor	r24, r24
     24c:	82 27       	eor	r24, r18
     24e:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
     250:	e6 17       	cp	r30, r22
     252:	f7 07       	cpc	r31, r23
     254:	09 f7       	brne	.-62     	; 0x218 <GenCrc16+0x16>
     256:	02 c0       	rjmp	.+4      	; 0x25c <GenCrc16+0x5a>
{
	int Polynominal = 0x1021;
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	90 e0       	ldi	r25, 0x00	; 0
		}
		CRC = (int)((CRC << 8) ^ Remainder);
		index++;
	}
	return CRC;
}
     25c:	cf 91       	pop	r28
     25e:	08 95       	ret

00000260 <ParamParse>:
		printStatus("VSerror");
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
     260:	0f 93       	push	r16
     262:	1f 93       	push	r17
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
     268:	8c 01       	movw	r16, r24
     26a:	eb 01       	movw	r28, r22
	int s_len = strnlen(stringToParse, rx_size) - 5;
     26c:	6e e1       	ldi	r22, 0x1E	; 30
     26e:	70 e0       	ldi	r23, 0x00	; 0
     270:	0e 94 84 24 	call	0x4908	; 0x4908 <strnlen>
     274:	05 97       	sbiw	r24, 0x05	; 5
     276:	ac 01       	movw	r20, r24
     278:	de 01       	movw	r26, r28
     27a:	9e 01       	movw	r18, r28
     27c:	2c 5e       	subi	r18, 0xEC	; 236
     27e:	3f 4f       	sbci	r19, 0xFF	; 255
     280:	fe 01       	movw	r30, r28
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
     282:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
     284:	e2 17       	cp	r30, r18
     286:	f3 07       	cpc	r31, r19
     288:	e1 f7       	brne	.-8      	; 0x282 <ParamParse+0x22>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
     28a:	4b 30       	cpi	r20, 0x0B	; 11
     28c:	51 05       	cpc	r21, r1
     28e:	4c f0       	brlt	.+18     	; 0x2a2 <ParamParse+0x42>
     290:	f8 01       	movw	r30, r16
     292:	3a 96       	adiw	r30, 0x0a	; 10
     294:	08 0f       	add	r16, r24
     296:	19 1f       	adc	r17, r25
	{
		param[idx] = stringToParse[i];
     298:	91 91       	ld	r25, Z+
     29a:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
     29c:	e0 17       	cp	r30, r16
     29e:	f1 07       	cpc	r31, r17
     2a0:	d9 f7       	brne	.-10     	; 0x298 <ParamParse+0x38>
	{
		param[idx] = stringToParse[i];
		idx ++;
	}
}
     2a2:	df 91       	pop	r29
     2a4:	cf 91       	pop	r28
     2a6:	1f 91       	pop	r17
     2a8:	0f 91       	pop	r16
     2aa:	08 95       	ret

000002ac <CrcCompare>:
	}
	return CRC;
}

static inline bool CrcCompare(char *crc_in, char *crc_calc)
{
     2ac:	0f 93       	push	r16
     2ae:	1f 93       	push	r17
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	ec 01       	movw	r28, r24
     2b6:	8b 01       	movw	r16, r22
	strupr(crc_in);
     2b8:	0e 94 8f 24 	call	0x491e	; 0x491e <strupr>
	strupr(crc_calc);
     2bc:	c8 01       	movw	r24, r16
     2be:	0e 94 8f 24 	call	0x491e	; 0x491e <strupr>
	
	if(crc_in[0] == '0' && crc_in[1] == '0' && crc_in[2] == '0')
     2c2:	88 81       	ld	r24, Y
     2c4:	80 33       	cpi	r24, 0x30	; 48
     2c6:	19 f5       	brne	.+70     	; 0x30e <CrcCompare+0x62>
     2c8:	89 81       	ldd	r24, Y+1	; 0x01
     2ca:	80 33       	cpi	r24, 0x30	; 48
     2cc:	09 f0       	breq	.+2      	; 0x2d0 <CrcCompare+0x24>
     2ce:	41 c0       	rjmp	.+130    	; 0x352 <CrcCompare+0xa6>
     2d0:	8a 81       	ldd	r24, Y+2	; 0x02
     2d2:	80 33       	cpi	r24, 0x30	; 48
     2d4:	b9 f5       	brne	.+110    	; 0x344 <CrcCompare+0x98>
	{
			if(crc_in[3] == crc_calc[0])
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	2b 81       	ldd	r18, Y+3	; 0x03
     2da:	f8 01       	movw	r30, r16
     2dc:	90 81       	ld	r25, Z
     2de:	29 17       	cp	r18, r25
     2e0:	e9 f1       	breq	.+122    	; 0x35c <CrcCompare+0xb0>
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	3b c0       	rjmp	.+118    	; 0x35c <CrcCompare+0xb0>
			}
	}

	if(crc_in[0] == '0' && crc_in[1] == '0')
	{
		if((crc_in[2] == crc_calc[0]) && (crc_in[3] == crc_calc[1]))
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	2b 81       	ldd	r18, Y+3	; 0x03
     2ea:	f8 01       	movw	r30, r16
     2ec:	91 81       	ldd	r25, Z+1	; 0x01
     2ee:	29 17       	cp	r18, r25
     2f0:	a9 f1       	breq	.+106    	; 0x35c <CrcCompare+0xb0>
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	33 c0       	rjmp	.+102    	; 0x35c <CrcCompare+0xb0>
		}
	}
	
	if(crc_in[0] == '0')
	{
		if((crc_in[1] == crc_calc[0]) && (crc_in[2] == crc_calc[1]) &&
     2f6:	9a 81       	ldd	r25, Y+2	; 0x02
     2f8:	f8 01       	movw	r30, r16
     2fa:	81 81       	ldd	r24, Z+1	; 0x01
     2fc:	98 13       	cpse	r25, r24
     2fe:	1a c0       	rjmp	.+52     	; 0x334 <CrcCompare+0x88>
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	2b 81       	ldd	r18, Y+3	; 0x03
     304:	92 81       	ldd	r25, Z+2	; 0x02
     306:	29 17       	cp	r18, r25
     308:	49 f1       	breq	.+82     	; 0x35c <CrcCompare+0xb0>
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	27 c0       	rjmp	.+78     	; 0x35c <CrcCompare+0xb0>
			return false;
		}
	}	
	else
	{
		if((crc_in[0] == crc_calc[0]) && (crc_in[1] == crc_calc[1]) &&
     30e:	f8 01       	movw	r30, r16
     310:	90 81       	ld	r25, Z
     312:	89 13       	cpse	r24, r25
     314:	11 c0       	rjmp	.+34     	; 0x338 <CrcCompare+0x8c>
     316:	99 81       	ldd	r25, Y+1	; 0x01
     318:	81 81       	ldd	r24, Z+1	; 0x01
     31a:	98 13       	cpse	r25, r24
     31c:	0f c0       	rjmp	.+30     	; 0x33c <CrcCompare+0x90>
     31e:	9a 81       	ldd	r25, Y+2	; 0x02
     320:	82 81       	ldd	r24, Z+2	; 0x02
     322:	98 13       	cpse	r25, r24
     324:	0d c0       	rjmp	.+26     	; 0x340 <CrcCompare+0x94>
			(crc_in[2] == crc_calc[2]) && (crc_in[3] == crc_calc[3]))
     326:	81 e0       	ldi	r24, 0x01	; 1
     328:	2b 81       	ldd	r18, Y+3	; 0x03
     32a:	93 81       	ldd	r25, Z+3	; 0x03
     32c:	29 17       	cp	r18, r25
     32e:	b1 f0       	breq	.+44     	; 0x35c <CrcCompare+0xb0>
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	14 c0       	rjmp	.+40     	; 0x35c <CrcCompare+0xb0>
		{
			return true;
		}
		else
		{
			return false;
     334:	80 e0       	ldi	r24, 0x00	; 0
     336:	12 c0       	rjmp	.+36     	; 0x35c <CrcCompare+0xb0>
			{
				return true;
			}
			else
			{
				return false;
     338:	80 e0       	ldi	r24, 0x00	; 0
     33a:	10 c0       	rjmp	.+32     	; 0x35c <CrcCompare+0xb0>
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	0e c0       	rjmp	.+28     	; 0x35c <CrcCompare+0xb0>
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	0c c0       	rjmp	.+24     	; 0x35c <CrcCompare+0xb0>
			}
	}

	if(crc_in[0] == '0' && crc_in[1] == '0')
	{
		if((crc_in[2] == crc_calc[0]) && (crc_in[3] == crc_calc[1]))
     344:	9a 81       	ldd	r25, Y+2	; 0x02
     346:	f8 01       	movw	r30, r16
     348:	80 81       	ld	r24, Z
     34a:	98 17       	cp	r25, r24
     34c:	61 f2       	breq	.-104    	; 0x2e6 <CrcCompare+0x3a>
		{
			return true;
		}
		else
		{
			return false;
     34e:	80 e0       	ldi	r24, 0x00	; 0
     350:	05 c0       	rjmp	.+10     	; 0x35c <CrcCompare+0xb0>
		}
	}
	
	if(crc_in[0] == '0')
	{
		if((crc_in[1] == crc_calc[0]) && (crc_in[2] == crc_calc[1]) &&
     352:	f8 01       	movw	r30, r16
     354:	90 81       	ld	r25, Z
     356:	89 17       	cp	r24, r25
     358:	71 f2       	breq	.-100    	; 0x2f6 <CrcCompare+0x4a>
		{
			return true;
		}
		else
		{
			return false;
     35a:	80 e0       	ldi	r24, 0x00	; 0
			else
			{
				return false;
			}
	}
}
     35c:	df 91       	pop	r29
     35e:	cf 91       	pop	r28
     360:	1f 91       	pop	r17
     362:	0f 91       	pop	r16
     364:	08 95       	ret

00000366 <printStatus>:
	
	PORTD |= 0b11110000;		// Set all CS High
}

static inline void printStatus (char msg_string[])	// Send string on UART
{
     366:	cf 92       	push	r12
     368:	df 92       	push	r13
     36a:	ef 92       	push	r14
     36c:	ff 92       	push	r15
     36e:	0f 93       	push	r16
     370:	1f 93       	push	r17
     372:	cf 93       	push	r28
     374:	df 93       	push	r29
     376:	cd b7       	in	r28, 0x3d	; 61
     378:	de b7       	in	r29, 0x3e	; 62
     37a:	a8 97       	sbiw	r28, 0x28	; 40
     37c:	0f b6       	in	r0, 0x3f	; 63
     37e:	f8 94       	cli
     380:	de bf       	out	0x3e, r29	; 62
     382:	0f be       	out	0x3f, r0	; 63
     384:	cd bf       	out	0x3d, r28	; 61
     386:	fc 01       	movw	r30, r24
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
     388:	81 e2       	ldi	r24, 0x21	; 33
     38a:	89 83       	std	Y+1, r24	; 0x01
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
     38c:	a7 e3       	ldi	r26, 0x37	; 55
     38e:	b5 e0       	ldi	r27, 0x05	; 5
     390:	11 96       	adiw	r26, 0x01	; 1
     392:	8c 91       	ld	r24, X
     394:	11 97       	sbiw	r26, 0x01	; 1
     396:	8a 83       	std	Y+2, r24	; 0x02
     398:	12 96       	adiw	r26, 0x02	; 2
     39a:	8c 91       	ld	r24, X
     39c:	12 97       	sbiw	r26, 0x02	; 2
     39e:	8b 83       	std	Y+3, r24	; 0x03
     3a0:	13 96       	adiw	r26, 0x03	; 3
     3a2:	8c 91       	ld	r24, X
     3a4:	8c 83       	std	Y+4, r24	; 0x04
     3a6:	cf 01       	movw	r24, r30
     3a8:	ae 01       	movw	r20, r28
     3aa:	4b 5f       	subi	r20, 0xFB	; 251
     3ac:	5f 4f       	sbci	r21, 0xFF	; 255
     3ae:	00 e0       	ldi	r16, 0x00	; 0
     3b0:	10 e0       	ldi	r17, 0x00	; 0
     3b2:	08 c0       	rjmp	.+16     	; 0x3c4 <printStatus+0x5e>
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
     3b4:	dc 01       	movw	r26, r24
     3b6:	2d 91       	ld	r18, X+
     3b8:	cd 01       	movw	r24, r26
     3ba:	da 01       	movw	r26, r20
     3bc:	2d 93       	st	X+, r18
     3be:	ad 01       	movw	r20, r26
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
     3c0:	0f 5f       	subi	r16, 0xFF	; 255
     3c2:	1f 4f       	sbci	r17, 0xFF	; 255
     3c4:	df 01       	movw	r26, r30
     3c6:	0d 90       	ld	r0, X+
     3c8:	00 20       	and	r0, r0
     3ca:	e9 f7       	brne	.-6      	; 0x3c6 <printStatus+0x60>
     3cc:	9d 01       	movw	r18, r26
     3ce:	2e 1b       	sub	r18, r30
     3d0:	3f 0b       	sbc	r19, r31
     3d2:	2e 5f       	subi	r18, 0xFE	; 254
     3d4:	3f 4f       	sbci	r19, 0xFF	; 255
     3d6:	02 17       	cp	r16, r18
     3d8:	13 07       	cpc	r17, r19
     3da:	60 f3       	brcs	.-40     	; 0x3b4 <printStatus+0x4e>
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
     3dc:	78 01       	movw	r14, r16
     3de:	bf ef       	ldi	r27, 0xFF	; 255
     3e0:	eb 1a       	sub	r14, r27
     3e2:	fb 0a       	sbc	r15, r27
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
     3e4:	1e 14       	cp	r1, r14
     3e6:	1f 04       	cpc	r1, r15
     3e8:	0c f0       	brlt	.+2      	; 0x3ec <printStatus+0x86>
     3ea:	d7 c0       	rjmp	.+430    	; 0x59a <printStatus+0x234>
     3ec:	fe 01       	movw	r30, r28
     3ee:	31 96       	adiw	r30, 0x01	; 1
     3f0:	a7 01       	movw	r20, r14
     3f2:	4e 0f       	add	r20, r30
     3f4:	5f 1f       	adc	r21, r31
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	90 e0       	ldi	r25, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
     3fa:	b8 e0       	ldi	r27, 0x08	; 8
     3fc:	d1 2c       	mov	r13, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
     3fe:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
     400:	29 2f       	mov	r18, r25
     402:	33 27       	eor	r19, r19
     404:	27 fd       	sbrc	r18, 7
     406:	3a 95       	dec	r19
     408:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
     40a:	32 2f       	mov	r19, r18
     40c:	22 27       	eor	r18, r18
     40e:	6b 2f       	mov	r22, r27
     410:	7d 2d       	mov	r23, r13
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
     412:	33 23       	and	r19, r19
     414:	3c f4       	brge	.+14     	; 0x424 <printStatus+0xbe>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
     416:	22 0f       	add	r18, r18
     418:	33 1f       	adc	r19, r19
     41a:	a1 e2       	ldi	r26, 0x21	; 33
     41c:	2a 27       	eor	r18, r26
     41e:	a0 e1       	ldi	r26, 0x10	; 16
     420:	3a 27       	eor	r19, r26
     422:	02 c0       	rjmp	.+4      	; 0x428 <printStatus+0xc2>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
     424:	22 0f       	add	r18, r18
     426:	33 1f       	adc	r19, r19
     428:	61 50       	subi	r22, 0x01	; 1
     42a:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
     42c:	91 f7       	brne	.-28     	; 0x412 <printStatus+0xac>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
     42e:	98 2f       	mov	r25, r24
     430:	88 27       	eor	r24, r24
     432:	82 27       	eor	r24, r18
     434:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
     436:	e4 17       	cp	r30, r20
     438:	f5 07       	cpc	r31, r21
     43a:	09 f7       	brne	.-62     	; 0x3fe <printStatus+0x98>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
     43c:	6c 01       	movw	r12, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     43e:	40 e1       	ldi	r20, 0x10	; 16
     440:	6d e2       	ldi	r22, 0x2D	; 45
     442:	75 e0       	ldi	r23, 0x05	; 5
     444:	0e 94 99 24 	call	0x4932	; 0x4932 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
     448:	8d e2       	ldi	r24, 0x2D	; 45
     44a:	95 e0       	ldi	r25, 0x05	; 5
     44c:	0e 94 8f 24 	call	0x491e	; 0x491e <strupr>
	if(crcXmodem < 0x10)
     450:	b0 e1       	ldi	r27, 0x10	; 16
     452:	cb 16       	cp	r12, r27
     454:	d1 04       	cpc	r13, r1
     456:	98 f4       	brcc	.+38     	; 0x47e <printStatus+0x118>
	{
		tx_string[cnt+4] = crc[0];
     458:	80 91 2d 05 	lds	r24, 0x052D
     45c:	fe 01       	movw	r30, r28
     45e:	e0 0f       	add	r30, r16
     460:	f1 1f       	adc	r31, r17
     462:	85 83       	std	Z+5, r24	; 0x05
		tx_string[cnt+3] = '0';
     464:	80 e3       	ldi	r24, 0x30	; 48
     466:	fe 01       	movw	r30, r28
     468:	e0 0f       	add	r30, r16
     46a:	f1 1f       	adc	r31, r17
     46c:	84 83       	std	Z+4, r24	; 0x04
		tx_string[cnt+2] = '0';
     46e:	fe 01       	movw	r30, r28
     470:	e0 0f       	add	r30, r16
     472:	f1 1f       	adc	r31, r17
     474:	83 83       	std	Z+3, r24	; 0x03
		tx_string[cnt+1] = '0';
     476:	fe 01       	movw	r30, r28
     478:	ee 0d       	add	r30, r14
     47a:	ff 1d       	adc	r31, r15
     47c:	81 83       	std	Z+1, r24	; 0x01
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
     47e:	c6 01       	movw	r24, r12
     480:	40 97       	sbiw	r24, 0x10	; 16
     482:	80 3f       	cpi	r24, 0xF0	; 240
     484:	91 05       	cpc	r25, r1
     486:	b8 f4       	brcc	.+46     	; 0x4b6 <printStatus+0x150>
	{
		tx_string[cnt+4] = crc[1];
     488:	ad e2       	ldi	r26, 0x2D	; 45
     48a:	b5 e0       	ldi	r27, 0x05	; 5
     48c:	11 96       	adiw	r26, 0x01	; 1
     48e:	8c 91       	ld	r24, X
     490:	11 97       	sbiw	r26, 0x01	; 1
     492:	fe 01       	movw	r30, r28
     494:	e0 0f       	add	r30, r16
     496:	f1 1f       	adc	r31, r17
     498:	85 83       	std	Z+5, r24	; 0x05
		tx_string[cnt+3] = crc[0];
     49a:	8c 91       	ld	r24, X
     49c:	fe 01       	movw	r30, r28
     49e:	e0 0f       	add	r30, r16
     4a0:	f1 1f       	adc	r31, r17
     4a2:	84 83       	std	Z+4, r24	; 0x04
		tx_string[cnt+2] = '0';
     4a4:	80 e3       	ldi	r24, 0x30	; 48
     4a6:	fe 01       	movw	r30, r28
     4a8:	e0 0f       	add	r30, r16
     4aa:	f1 1f       	adc	r31, r17
     4ac:	83 83       	std	Z+3, r24	; 0x03
		tx_string[cnt+1] = '0';		
     4ae:	fe 01       	movw	r30, r28
     4b0:	ee 0d       	add	r30, r14
     4b2:	ff 1d       	adc	r31, r15
     4b4:	81 83       	std	Z+1, r24	; 0x01
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
     4b6:	c6 01       	movw	r24, r12
     4b8:	9a 95       	dec	r25
     4ba:	81 15       	cp	r24, r1
     4bc:	9f 40       	sbci	r25, 0x0F	; 15
     4be:	b8 f4       	brcc	.+46     	; 0x4ee <printStatus+0x188>
	{
		tx_string[cnt+4] = crc[2];
     4c0:	ed e2       	ldi	r30, 0x2D	; 45
     4c2:	f5 e0       	ldi	r31, 0x05	; 5
     4c4:	82 81       	ldd	r24, Z+2	; 0x02
     4c6:	de 01       	movw	r26, r28
     4c8:	a0 0f       	add	r26, r16
     4ca:	b1 1f       	adc	r27, r17
     4cc:	15 96       	adiw	r26, 0x05	; 5
     4ce:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[1];
     4d0:	81 81       	ldd	r24, Z+1	; 0x01
     4d2:	de 01       	movw	r26, r28
     4d4:	a0 0f       	add	r26, r16
     4d6:	b1 1f       	adc	r27, r17
     4d8:	14 96       	adiw	r26, 0x04	; 4
     4da:	8c 93       	st	X, r24
     4dc:	14 97       	sbiw	r26, 0x04	; 4
		tx_string[cnt+2] = crc[0];
     4de:	80 81       	ld	r24, Z
     4e0:	fd 01       	movw	r30, r26
     4e2:	83 83       	std	Z+3, r24	; 0x03
		tx_string[cnt+1] = '0';		
     4e4:	80 e3       	ldi	r24, 0x30	; 48
     4e6:	fe 01       	movw	r30, r28
     4e8:	ee 0d       	add	r30, r14
     4ea:	ff 1d       	adc	r31, r15
     4ec:	81 83       	std	Z+1, r24	; 0x01
	}
	if(crcXmodem >= 0x1000)
     4ee:	c1 14       	cp	r12, r1
     4f0:	80 e1       	ldi	r24, 0x10	; 16
     4f2:	d8 06       	cpc	r13, r24
     4f4:	c0 f0       	brcs	.+48     	; 0x526 <printStatus+0x1c0>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
     4f6:	de 01       	movw	r26, r28
     4f8:	ae 0d       	add	r26, r14
     4fa:	bf 1d       	adc	r27, r15
     4fc:	ed e2       	ldi	r30, 0x2D	; 45
     4fe:	f5 e0       	ldi	r31, 0x05	; 5
     500:	80 81       	ld	r24, Z
     502:	11 96       	adiw	r26, 0x01	; 1
     504:	8c 93       	st	X, r24
		tx_string[cnt+2] = crc[1];
     506:	81 81       	ldd	r24, Z+1	; 0x01
     508:	de 01       	movw	r26, r28
     50a:	a0 0f       	add	r26, r16
     50c:	b1 1f       	adc	r27, r17
     50e:	13 96       	adiw	r26, 0x03	; 3
     510:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[2];
     512:	82 81       	ldd	r24, Z+2	; 0x02
     514:	de 01       	movw	r26, r28
     516:	a0 0f       	add	r26, r16
     518:	b1 1f       	adc	r27, r17
     51a:	14 96       	adiw	r26, 0x04	; 4
     51c:	8c 93       	st	X, r24
     51e:	14 97       	sbiw	r26, 0x04	; 4
		tx_string[cnt+4] = crc[3];
     520:	83 81       	ldd	r24, Z+3	; 0x03
     522:	fd 01       	movw	r30, r26
     524:	85 83       	std	Z+5, r24	; 0x05
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
     526:	c8 01       	movw	r24, r16
     528:	05 96       	adiw	r24, 0x05	; 5
     52a:	fe 01       	movw	r30, r28
     52c:	e8 0f       	add	r30, r24
     52e:	f9 1f       	adc	r31, r25
     530:	2d e0       	ldi	r18, 0x0D	; 13
     532:	21 83       	std	Z+1, r18	; 0x01
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
     534:	99 23       	and	r25, r25
     536:	0c f4       	brge	.+2      	; 0x53a <printStatus+0x1d4>
     538:	3e c0       	rjmp	.+124    	; 0x5b6 <printStatus+0x250>
     53a:	ae 01       	movw	r20, r28
     53c:	4f 5f       	subi	r20, 0xFF	; 255
     53e:	5f 4f       	sbci	r21, 0xFF	; 255
     540:	0a 5f       	subi	r16, 0xFA	; 250
     542:	1f 4f       	sbci	r17, 0xFF	; 255
     544:	04 0f       	add	r16, r20
     546:	15 1f       	adc	r17, r21
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
     548:	e5 e5       	ldi	r30, 0x55	; 85
     54a:	f5 e0       	ldi	r31, 0x05	; 5
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
     54c:	61 ec       	ldi	r22, 0xC1	; 193
     54e:	70 e0       	ldi	r23, 0x00	; 0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     550:	30 e0       	ldi	r19, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
     552:	da 01       	movw	r26, r20
     554:	8d 91       	ld	r24, X+
     556:	ad 01       	movw	r20, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
     558:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
     55a:	21 81       	ldd	r18, Z+1	; 0x01
     55c:	90 81       	ld	r25, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
     55e:	29 13       	cpse	r18, r25
     560:	04 c0       	rjmp	.+8      	; 0x56a <printStatus+0x204>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
     562:	db 01       	movw	r26, r22
     564:	9c 91       	ld	r25, X
     566:	90 62       	ori	r25, 0x20	; 32
     568:	9c 93       	st	X, r25
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
     56a:	90 81       	ld	r25, Z
     56c:	a3 81       	ldd	r26, Z+3	; 0x03
     56e:	b4 81       	ldd	r27, Z+4	; 0x04
     570:	a9 0f       	add	r26, r25
     572:	b1 1d       	adc	r27, r1
     574:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
     576:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     578:	a2 2f       	mov	r26, r18
     57a:	b0 e0       	ldi	r27, 0x00	; 0
     57c:	82 81       	ldd	r24, Z+2	; 0x02
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	01 97       	sbiw	r24, 0x01	; 1
     582:	a8 17       	cp	r26, r24
     584:	b9 07       	cpc	r27, r25
     586:	11 f0       	breq	.+4      	; 0x58c <printStatus+0x226>
     588:	2f 5f       	subi	r18, 0xFF	; 255
     58a:	01 c0       	rjmp	.+2      	; 0x58e <printStatus+0x228>
     58c:	23 2f       	mov	r18, r19
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
     58e:	20 83       	st	Z, r18
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
     590:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
     592:	40 17       	cp	r20, r16
     594:	51 07       	cpc	r21, r17
     596:	e9 f6       	brne	.-70     	; 0x552 <printStatus+0x1ec>
     598:	0e c0       	rjmp	.+28     	; 0x5b6 <printStatus+0x250>
     59a:	40 e1       	ldi	r20, 0x10	; 16
     59c:	6d e2       	ldi	r22, 0x2D	; 45
     59e:	75 e0       	ldi	r23, 0x05	; 5
     5a0:	80 e0       	ldi	r24, 0x00	; 0
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	0e 94 99 24 	call	0x4932	; 0x4932 <__itoa_ncheck>
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
     5a8:	8d e2       	ldi	r24, 0x2D	; 45
     5aa:	95 e0       	ldi	r25, 0x05	; 5
     5ac:	0e 94 8f 24 	call	0x491e	; 0x491e <strupr>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
     5b0:	c1 2c       	mov	r12, r1
     5b2:	d1 2c       	mov	r13, r1
     5b4:	51 cf       	rjmp	.-350    	; 0x458 <printStatus+0xf2>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
	}	
}
     5b6:	a8 96       	adiw	r28, 0x28	; 40
     5b8:	0f b6       	in	r0, 0x3f	; 63
     5ba:	f8 94       	cli
     5bc:	de bf       	out	0x3e, r29	; 62
     5be:	0f be       	out	0x3f, r0	; 63
     5c0:	cd bf       	out	0x3d, r28	; 61
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	1f 91       	pop	r17
     5c8:	0f 91       	pop	r16
     5ca:	ff 90       	pop	r15
     5cc:	ef 90       	pop	r14
     5ce:	df 90       	pop	r13
     5d0:	cf 90       	pop	r12
     5d2:	08 95       	ret

000005d4 <__vector_19>:
 *
 * This handler is called each time the UART data register is available for
 * sending data.
 */
ISR(UART0_DATA_EMPTY_IRQ)
{
     5d4:	1f 92       	push	r1
     5d6:	0f 92       	push	r0
     5d8:	0f b6       	in	r0, 0x3f	; 63
     5da:	0f 92       	push	r0
     5dc:	11 24       	eor	r1, r1
     5de:	2f 93       	push	r18
     5e0:	3f 93       	push	r19
     5e2:	4f 93       	push	r20
     5e4:	5f 93       	push	r21
     5e6:	8f 93       	push	r24
     5e8:	9f 93       	push	r25
     5ea:	af 93       	push	r26
     5ec:	bf 93       	push	r27
     5ee:	ef 93       	push	r30
     5f0:	ff 93       	push	r31
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
     5f2:	e5 e5       	ldi	r30, 0x55	; 85
     5f4:	f5 e0       	ldi	r31, 0x05	; 5
     5f6:	91 81       	ldd	r25, Z+1	; 0x01
     5f8:	80 81       	ld	r24, Z
	// if there is data in the ring buffer, fetch it and send it
	if (!ring_buffer_is_empty(&ring_buffer_out))
     5fa:	98 17       	cp	r25, r24
     5fc:	b9 f0       	breq	.+46     	; 0x62c <__vector_19+0x58>
 * \returns next data byte in buffer
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
     5fe:	81 81       	ldd	r24, Z+1	; 0x01
     600:	a3 81       	ldd	r26, Z+3	; 0x03
     602:	b4 81       	ldd	r27, Z+4	; 0x04
     604:	a8 0f       	add	r26, r24
     606:	b1 1d       	adc	r27, r1
     608:	3c 91       	ld	r19, X
 *
 * \returns the next read offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_read(const struct ring_buffer *ring)
{
	return get_next(ring->read_offset, ring->size);
     60a:	21 81       	ldd	r18, Z+1	; 0x01
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     60c:	42 2f       	mov	r20, r18
     60e:	50 e0       	ldi	r21, 0x00	; 0
     610:	82 81       	ldd	r24, Z+2	; 0x02
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	01 97       	sbiw	r24, 0x01	; 1
     616:	48 17       	cp	r20, r24
     618:	59 07       	cpc	r21, r25
     61a:	11 f0       	breq	.+4      	; 0x620 <__vector_19+0x4c>
     61c:	2f 5f       	subi	r18, 0xFF	; 255
     61e:	01 c0       	rjmp	.+2      	; 0x622 <__vector_19+0x4e>
     620:	20 e0       	ldi	r18, 0x00	; 0
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
	ring->read_offset = ring_buffer_get_next_read(ring);
     622:	20 93 56 05 	sts	0x0556, r18
	{
		UDR0 = ring_buffer_get(&ring_buffer_out);
     626:	30 93 c6 00 	sts	0x00C6, r19
     62a:	05 c0       	rjmp	.+10     	; 0x636 <__vector_19+0x62>
	}
	else 
	{
		// no more data to send, turn off data ready interrupt
		UCSR0B &= ~(1 << UDRIE0);
     62c:	e1 ec       	ldi	r30, 0xC1	; 193
     62e:	f0 e0       	ldi	r31, 0x00	; 0
     630:	80 81       	ld	r24, Z
     632:	8f 7d       	andi	r24, 0xDF	; 223
     634:	80 83       	st	Z, r24
	}
}
     636:	ff 91       	pop	r31
     638:	ef 91       	pop	r30
     63a:	bf 91       	pop	r27
     63c:	af 91       	pop	r26
     63e:	9f 91       	pop	r25
     640:	8f 91       	pop	r24
     642:	5f 91       	pop	r21
     644:	4f 91       	pop	r20
     646:	3f 91       	pop	r19
     648:	2f 91       	pop	r18
     64a:	0f 90       	pop	r0
     64c:	0f be       	out	0x3f, r0	; 63
     64e:	0f 90       	pop	r0
     650:	1f 90       	pop	r1
     652:	18 95       	reti

00000654 <__vector_18>:
 * \brief Data RX interrupt handler
 *
 * This is the handler for UART receive data
 */
ISR(UART0_RX_IRQ)
{
     654:	1f 92       	push	r1
     656:	0f 92       	push	r0
     658:	0f b6       	in	r0, 0x3f	; 63
     65a:	0f 92       	push	r0
     65c:	11 24       	eor	r1, r1
     65e:	2f 93       	push	r18
     660:	4f 93       	push	r20
     662:	5f 93       	push	r21
     664:	8f 93       	push	r24
     666:	9f 93       	push	r25
     668:	af 93       	push	r26
     66a:	bf 93       	push	r27
     66c:	ef 93       	push	r30
     66e:	ff 93       	push	r31
	ring_buffer_put(&ring_buffer_in, UDR0);
     670:	80 91 c6 00 	lds	r24, 0x00C6
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
     674:	e2 e3       	ldi	r30, 0x32	; 50
     676:	f5 e0       	ldi	r31, 0x05	; 5
     678:	90 81       	ld	r25, Z
     67a:	a3 81       	ldd	r26, Z+3	; 0x03
     67c:	b4 81       	ldd	r27, Z+4	; 0x04
     67e:	a9 0f       	add	r26, r25
     680:	b1 1d       	adc	r27, r1
     682:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
     684:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     686:	42 2f       	mov	r20, r18
     688:	50 e0       	ldi	r21, 0x00	; 0
     68a:	82 81       	ldd	r24, Z+2	; 0x02
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	01 97       	sbiw	r24, 0x01	; 1
     690:	48 17       	cp	r20, r24
     692:	59 07       	cpc	r21, r25
     694:	11 f0       	breq	.+4      	; 0x69a <__vector_18+0x46>
     696:	2f 5f       	subi	r18, 0xFF	; 255
     698:	01 c0       	rjmp	.+2      	; 0x69c <__vector_18+0x48>
     69a:	20 e0       	ldi	r18, 0x00	; 0
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
     69c:	20 93 32 05 	sts	0x0532, r18
}
     6a0:	ff 91       	pop	r31
     6a2:	ef 91       	pop	r30
     6a4:	bf 91       	pop	r27
     6a6:	af 91       	pop	r26
     6a8:	9f 91       	pop	r25
     6aa:	8f 91       	pop	r24
     6ac:	5f 91       	pop	r21
     6ae:	4f 91       	pop	r20
     6b0:	2f 91       	pop	r18
     6b2:	0f 90       	pop	r0
     6b4:	0f be       	out	0x3f, r0	; 63
     6b6:	0f 90       	pop	r0
     6b8:	1f 90       	pop	r1
     6ba:	18 95       	reti

000006bc <__vector_14>:
	
	sei();
}

ISR(TIMER0_COMPA_vect)	// Heater PWM output Irq
{
     6bc:	1f 92       	push	r1
     6be:	0f 92       	push	r0
     6c0:	0f b6       	in	r0, 0x3f	; 63
     6c2:	0f 92       	push	r0
     6c4:	11 24       	eor	r1, r1
     6c6:	2f 93       	push	r18
     6c8:	3f 93       	push	r19
     6ca:	8f 93       	push	r24
     6cc:	9f 93       	push	r25
     6ce:	ef 93       	push	r30
     6d0:	ff 93       	push	r31
	ch0.pwmCnt++;
     6d2:	e2 e2       	ldi	r30, 0x22	; 34
     6d4:	f3 e0       	ldi	r31, 0x03	; 3
     6d6:	80 81       	ld	r24, Z
     6d8:	91 81       	ldd	r25, Z+1	; 0x01
     6da:	01 96       	adiw	r24, 0x01	; 1
     6dc:	91 83       	std	Z+1, r25	; 0x01
     6de:	80 83       	st	Z, r24
	if(ch0.pwmCnt < ch0.pwm )
     6e0:	20 81       	ld	r18, Z
     6e2:	31 81       	ldd	r19, Z+1	; 0x01
     6e4:	80 91 24 03 	lds	r24, 0x0324
     6e8:	90 91 25 03 	lds	r25, 0x0325
     6ec:	28 17       	cp	r18, r24
     6ee:	39 07       	cpc	r19, r25
     6f0:	34 f4       	brge	.+12     	; 0x6fe <__vector_14+0x42>
static inline void SetHeaterOutputON(uint8_t ch)
{
	switch (ch)
	{
		case 0:
			if(ch0.heaterEnable)
     6f2:	80 91 26 03 	lds	r24, 0x0326
     6f6:	88 23       	and	r24, r24
     6f8:	19 f0       	breq	.+6      	; 0x700 <__vector_14+0x44>
			{
				PORTC |= 0b00000001;
     6fa:	40 9a       	sbi	0x08, 0	; 8
     6fc:	01 c0       	rjmp	.+2      	; 0x700 <__vector_14+0x44>
	{
		SetHeaterOutputON(0);
	}
	else
	{
		PORTC &= 0b11111110;
     6fe:	40 98       	cbi	0x08, 0	; 8
	}
	if(ch0.pwmCnt >= 100)
     700:	80 91 22 03 	lds	r24, 0x0322
     704:	90 91 23 03 	lds	r25, 0x0323
     708:	84 36       	cpi	r24, 0x64	; 100
     70a:	91 05       	cpc	r25, r1
     70c:	24 f0       	brlt	.+8      	; 0x716 <__vector_14+0x5a>
	{
		ch0.pwmCnt = 0;
     70e:	10 92 23 03 	sts	0x0323, r1
     712:	10 92 22 03 	sts	0x0322, r1
	}
	
	ch1.pwmCnt++;
     716:	ef eb       	ldi	r30, 0xBF	; 191
     718:	f2 e0       	ldi	r31, 0x02	; 2
     71a:	80 81       	ld	r24, Z
     71c:	91 81       	ldd	r25, Z+1	; 0x01
     71e:	01 96       	adiw	r24, 0x01	; 1
     720:	91 83       	std	Z+1, r25	; 0x01
     722:	80 83       	st	Z, r24
	if(ch1.pwmCnt < ch1.pwm )
     724:	20 81       	ld	r18, Z
     726:	31 81       	ldd	r19, Z+1	; 0x01
     728:	80 91 c1 02 	lds	r24, 0x02C1
     72c:	90 91 c2 02 	lds	r25, 0x02C2
     730:	28 17       	cp	r18, r24
     732:	39 07       	cpc	r19, r25
     734:	34 f4       	brge	.+12     	; 0x742 <__vector_14+0x86>
				PORTC |= 0b00000001;
			}
			break;
	
		case 1:
			if(ch1.heaterEnable)
     736:	80 91 c3 02 	lds	r24, 0x02C3
     73a:	88 23       	and	r24, r24
     73c:	19 f0       	breq	.+6      	; 0x744 <__vector_14+0x88>
			{
				PORTC |= 0b00000010;	
     73e:	41 9a       	sbi	0x08, 1	; 8
     740:	01 c0       	rjmp	.+2      	; 0x744 <__vector_14+0x88>
	{
		SetHeaterOutputON(1);
	}
	else
	{
		PORTC &= 0b11111101;
     742:	41 98       	cbi	0x08, 1	; 8
	}
	if(ch1.pwmCnt >= 100)
     744:	80 91 bf 02 	lds	r24, 0x02BF
     748:	90 91 c0 02 	lds	r25, 0x02C0
     74c:	84 36       	cpi	r24, 0x64	; 100
     74e:	91 05       	cpc	r25, r1
     750:	24 f0       	brlt	.+8      	; 0x75a <__vector_14+0x9e>
	{
		ch1.pwmCnt = 0;
     752:	10 92 c0 02 	sts	0x02C0, r1
     756:	10 92 bf 02 	sts	0x02BF, r1
	}
	
	ch2.pwmCnt++;
     75a:	ec e5       	ldi	r30, 0x5C	; 92
     75c:	f2 e0       	ldi	r31, 0x02	; 2
     75e:	80 81       	ld	r24, Z
     760:	91 81       	ldd	r25, Z+1	; 0x01
     762:	01 96       	adiw	r24, 0x01	; 1
     764:	91 83       	std	Z+1, r25	; 0x01
     766:	80 83       	st	Z, r24
	if(ch2.pwmCnt < ch2.pwm )
     768:	20 81       	ld	r18, Z
     76a:	31 81       	ldd	r19, Z+1	; 0x01
     76c:	80 91 5e 02 	lds	r24, 0x025E
     770:	90 91 5f 02 	lds	r25, 0x025F
     774:	28 17       	cp	r18, r24
     776:	39 07       	cpc	r19, r25
     778:	34 f4       	brge	.+12     	; 0x786 <__vector_14+0xca>
				PORTC |= 0b00000010;	
			}
			break;

		case 2:
			if(ch2.heaterEnable)
     77a:	80 91 60 02 	lds	r24, 0x0260
     77e:	88 23       	and	r24, r24
     780:	19 f0       	breq	.+6      	; 0x788 <__vector_14+0xcc>
			{
				PORTC |= 0b00000100;
     782:	42 9a       	sbi	0x08, 2	; 8
     784:	01 c0       	rjmp	.+2      	; 0x788 <__vector_14+0xcc>
	{
		SetHeaterOutputON(2);
	}
	else
	{
		PORTC &= 0b11111011;
     786:	42 98       	cbi	0x08, 2	; 8
	}
	if(ch2.pwmCnt >= 100)
     788:	80 91 5c 02 	lds	r24, 0x025C
     78c:	90 91 5d 02 	lds	r25, 0x025D
     790:	84 36       	cpi	r24, 0x64	; 100
     792:	91 05       	cpc	r25, r1
     794:	24 f0       	brlt	.+8      	; 0x79e <__vector_14+0xe2>
	{
		ch2.pwmCnt = 0;
     796:	10 92 5d 02 	sts	0x025D, r1
     79a:	10 92 5c 02 	sts	0x025C, r1
	}
	
	ch3.pwmCnt++;
     79e:	e9 ef       	ldi	r30, 0xF9	; 249
     7a0:	f1 e0       	ldi	r31, 0x01	; 1
     7a2:	80 81       	ld	r24, Z
     7a4:	91 81       	ldd	r25, Z+1	; 0x01
     7a6:	01 96       	adiw	r24, 0x01	; 1
     7a8:	91 83       	std	Z+1, r25	; 0x01
     7aa:	80 83       	st	Z, r24
	if(ch3.pwmCnt < ch3.pwm )
     7ac:	20 81       	ld	r18, Z
     7ae:	31 81       	ldd	r19, Z+1	; 0x01
     7b0:	80 91 fb 01 	lds	r24, 0x01FB
     7b4:	90 91 fc 01 	lds	r25, 0x01FC
     7b8:	28 17       	cp	r18, r24
     7ba:	39 07       	cpc	r19, r25
     7bc:	34 f4       	brge	.+12     	; 0x7ca <__vector_14+0x10e>
				PORTC |= 0b00000100;
			}
			break;

		case 3:
			if(ch3.heaterEnable)
     7be:	80 91 fd 01 	lds	r24, 0x01FD
     7c2:	88 23       	and	r24, r24
     7c4:	19 f0       	breq	.+6      	; 0x7cc <__vector_14+0x110>
			{
				PORTC |= 0b00001000;	
     7c6:	43 9a       	sbi	0x08, 3	; 8
     7c8:	01 c0       	rjmp	.+2      	; 0x7cc <__vector_14+0x110>
	{
		SetHeaterOutputON(3);
	}
	else
	{
		PORTC &= 0b11110111;
     7ca:	43 98       	cbi	0x08, 3	; 8
	}
	if(ch3.pwmCnt >= 100)
     7cc:	80 91 f9 01 	lds	r24, 0x01F9
     7d0:	90 91 fa 01 	lds	r25, 0x01FA
     7d4:	84 36       	cpi	r24, 0x64	; 100
     7d6:	91 05       	cpc	r25, r1
     7d8:	24 f0       	brlt	.+8      	; 0x7e2 <__vector_14+0x126>
	{
		ch3.pwmCnt = 0;
     7da:	10 92 fa 01 	sts	0x01FA, r1
     7de:	10 92 f9 01 	sts	0x01F9, r1
	}

}
     7e2:	ff 91       	pop	r31
     7e4:	ef 91       	pop	r30
     7e6:	9f 91       	pop	r25
     7e8:	8f 91       	pop	r24
     7ea:	3f 91       	pop	r19
     7ec:	2f 91       	pop	r18
     7ee:	0f 90       	pop	r0
     7f0:	0f be       	out	0x3f, r0	; 63
     7f2:	0f 90       	pop	r0
     7f4:	1f 90       	pop	r1
     7f6:	18 95       	reti

000007f8 <__vector_11>:

ISR(TIMER1_COMPA_vect)	// Step motor output Irq
{
     7f8:	1f 92       	push	r1
     7fa:	0f 92       	push	r0
     7fc:	0f b6       	in	r0, 0x3f	; 63
     7fe:	0f 92       	push	r0
     800:	11 24       	eor	r1, r1
     802:	2f 93       	push	r18
     804:	3f 93       	push	r19
     806:	4f 93       	push	r20
     808:	5f 93       	push	r21
     80a:	6f 93       	push	r22
     80c:	7f 93       	push	r23
     80e:	8f 93       	push	r24
     810:	9f 93       	push	r25
     812:	af 93       	push	r26
     814:	bf 93       	push	r27
     816:	ef 93       	push	r30
     818:	ff 93       	push	r31
	switch(ramp)
     81a:	e0 91 92 01 	lds	r30, 0x0192
     81e:	8e 2f       	mov	r24, r30
     820:	ee 0f       	add	r30, r30
     822:	99 0b       	sbc	r25, r25
     824:	aa 0b       	sbc	r26, r26
     826:	bb 0b       	sbc	r27, r27
     828:	88 30       	cpi	r24, 0x08	; 8
     82a:	91 05       	cpc	r25, r1
     82c:	08 f0       	brcs	.+2      	; 0x830 <__vector_11+0x38>
     82e:	bc c1       	rjmp	.+888    	; 0xba8 <__stack+0x2a9>
     830:	fc 01       	movw	r30, r24
     832:	ec 5c       	subi	r30, 0xCC	; 204
     834:	ff 4f       	sbci	r31, 0xFF	; 255
     836:	0c 94 19 24 	jmp	0x4832	; 0x4832 <__tablejump2__>
	{
		case up:
			speedRampInc++;
     83a:	80 91 8e 01 	lds	r24, 0x018E
     83e:	90 91 8f 01 	lds	r25, 0x018F
     842:	01 96       	adiw	r24, 0x01	; 1
     844:	90 93 8f 01 	sts	0x018F, r25
     848:	80 93 8e 01 	sts	0x018E, r24
			if (speedRampInc > rampAdvance)
     84c:	80 91 8e 01 	lds	r24, 0x018E
     850:	90 91 8f 01 	lds	r25, 0x018F
     854:	81 35       	cpi	r24, 0x51	; 81
     856:	91 05       	cpc	r25, r1
     858:	0c f4       	brge	.+2      	; 0x85c <__vector_11+0x64>
     85a:	a6 c1       	rjmp	.+844    	; 0xba8 <__stack+0x2a9>
			{
				speedRampInc = 0;
     85c:	10 92 8f 01 	sts	0x018F, r1
     860:	10 92 8e 01 	sts	0x018E, r1
				if (speedRampPos < speedRampSize)
     864:	20 91 90 01 	lds	r18, 0x0190
     868:	30 91 91 01 	lds	r19, 0x0191
     86c:	80 91 8c 01 	lds	r24, 0x018C
     870:	90 91 8d 01 	lds	r25, 0x018D
     874:	28 17       	cp	r18, r24
     876:	39 07       	cpc	r19, r25
     878:	2c f5       	brge	.+74     	; 0x8c4 <__vector_11+0xcc>
				{
					ICR1 = speedRamp[speedRampPos] * motorSpeed;
     87a:	e0 91 90 01 	lds	r30, 0x0190
     87e:	f0 91 91 01 	lds	r31, 0x0191
     882:	40 91 00 01 	lds	r20, 0x0100
     886:	50 91 01 01 	lds	r21, 0x0101
     88a:	ee 0f       	add	r30, r30
     88c:	ff 1f       	adc	r31, r31
     88e:	e6 5b       	subi	r30, 0xB6	; 182
     890:	fe 4f       	sbci	r31, 0xFE	; 254
     892:	20 81       	ld	r18, Z
     894:	31 81       	ldd	r19, Z+1	; 0x01
     896:	42 9f       	mul	r20, r18
     898:	c0 01       	movw	r24, r0
     89a:	43 9f       	mul	r20, r19
     89c:	90 0d       	add	r25, r0
     89e:	52 9f       	mul	r21, r18
     8a0:	90 0d       	add	r25, r0
     8a2:	11 24       	eor	r1, r1
     8a4:	e6 e8       	ldi	r30, 0x86	; 134
     8a6:	f0 e0       	ldi	r31, 0x00	; 0
     8a8:	91 83       	std	Z+1, r25	; 0x01
     8aa:	80 83       	st	Z, r24
					int dummy = ICR1;
     8ac:	80 81       	ld	r24, Z
     8ae:	91 81       	ldd	r25, Z+1	; 0x01
					speedRampPos ++;
     8b0:	80 91 90 01 	lds	r24, 0x0190
     8b4:	90 91 91 01 	lds	r25, 0x0191
     8b8:	01 96       	adiw	r24, 0x01	; 1
     8ba:	90 93 91 01 	sts	0x0191, r25
     8be:	80 93 90 01 	sts	0x0190, r24
     8c2:	72 c1       	rjmp	.+740    	; 0xba8 <__stack+0x2a9>
				}
				else
				{
					ramp = down;
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	80 93 92 01 	sts	0x0192, r24
					speedRampPos --;
     8ca:	80 91 90 01 	lds	r24, 0x0190
     8ce:	90 91 91 01 	lds	r25, 0x0191
     8d2:	01 97       	sbiw	r24, 0x01	; 1
     8d4:	90 93 91 01 	sts	0x0191, r25
     8d8:	80 93 90 01 	sts	0x0190, r24
     8dc:	65 c1       	rjmp	.+714    	; 0xba8 <__stack+0x2a9>
				}
			}
		break;
				
		case down:
			if (labs(targetMotorPos - motorPos) < (long)(rampAdvance * speedRampSize))
     8de:	80 91 93 01 	lds	r24, 0x0193
     8e2:	90 91 94 01 	lds	r25, 0x0194
     8e6:	a0 91 95 01 	lds	r26, 0x0195
     8ea:	b0 91 96 01 	lds	r27, 0x0196
     8ee:	40 91 97 01 	lds	r20, 0x0197
     8f2:	50 91 98 01 	lds	r21, 0x0198
     8f6:	60 91 99 01 	lds	r22, 0x0199
     8fa:	70 91 9a 01 	lds	r23, 0x019A
     8fe:	20 91 8c 01 	lds	r18, 0x018C
     902:	30 91 8d 01 	lds	r19, 0x018D
     906:	84 1b       	sub	r24, r20
     908:	95 0b       	sbc	r25, r21
     90a:	a6 0b       	sbc	r26, r22
     90c:	b7 0b       	sbc	r27, r23
     90e:	ac 01       	movw	r20, r24
     910:	bd 01       	movw	r22, r26
     912:	3a f4       	brpl	.+14     	; 0x922 <__stack+0x23>
     914:	44 27       	eor	r20, r20
     916:	55 27       	eor	r21, r21
     918:	ba 01       	movw	r22, r20
     91a:	48 1b       	sub	r20, r24
     91c:	59 0b       	sbc	r21, r25
     91e:	6a 0b       	sbc	r22, r26
     920:	7b 0b       	sbc	r23, r27
     922:	e0 e5       	ldi	r30, 0x50	; 80
     924:	e2 9f       	mul	r30, r18
     926:	c0 01       	movw	r24, r0
     928:	e3 9f       	mul	r30, r19
     92a:	90 0d       	add	r25, r0
     92c:	11 24       	eor	r1, r1
     92e:	09 2e       	mov	r0, r25
     930:	00 0c       	add	r0, r0
     932:	aa 0b       	sbc	r26, r26
     934:	bb 0b       	sbc	r27, r27
     936:	48 17       	cp	r20, r24
     938:	59 07       	cpc	r21, r25
     93a:	6a 07       	cpc	r22, r26
     93c:	7b 07       	cpc	r23, r27
     93e:	0c f0       	brlt	.+2      	; 0x942 <__stack+0x43>
     940:	33 c1       	rjmp	.+614    	; 0xba8 <__stack+0x2a9>
			{
				speedRampInc++;
     942:	80 91 8e 01 	lds	r24, 0x018E
     946:	90 91 8f 01 	lds	r25, 0x018F
     94a:	01 96       	adiw	r24, 0x01	; 1
     94c:	90 93 8f 01 	sts	0x018F, r25
     950:	80 93 8e 01 	sts	0x018E, r24
				if (speedRampInc > rampAdvance)
     954:	80 91 8e 01 	lds	r24, 0x018E
     958:	90 91 8f 01 	lds	r25, 0x018F
     95c:	81 35       	cpi	r24, 0x51	; 81
     95e:	91 05       	cpc	r25, r1
     960:	0c f4       	brge	.+2      	; 0x964 <__stack+0x65>
     962:	22 c1       	rjmp	.+580    	; 0xba8 <__stack+0x2a9>
				{
					speedRampInc = 0;
     964:	10 92 8f 01 	sts	0x018F, r1
     968:	10 92 8e 01 	sts	0x018E, r1
					if (speedRampPos > -1)
     96c:	80 91 90 01 	lds	r24, 0x0190
     970:	90 91 91 01 	lds	r25, 0x0191
     974:	99 23       	and	r25, r25
     976:	0c f4       	brge	.+2      	; 0x97a <__stack+0x7b>
     978:	17 c1       	rjmp	.+558    	; 0xba8 <__stack+0x2a9>
					{
						ICR1 = speedRamp[speedRampPos] * motorSpeed;
     97a:	e0 91 90 01 	lds	r30, 0x0190
     97e:	f0 91 91 01 	lds	r31, 0x0191
     982:	40 91 00 01 	lds	r20, 0x0100
     986:	50 91 01 01 	lds	r21, 0x0101
     98a:	ee 0f       	add	r30, r30
     98c:	ff 1f       	adc	r31, r31
     98e:	e6 5b       	subi	r30, 0xB6	; 182
     990:	fe 4f       	sbci	r31, 0xFE	; 254
     992:	20 81       	ld	r18, Z
     994:	31 81       	ldd	r19, Z+1	; 0x01
     996:	42 9f       	mul	r20, r18
     998:	c0 01       	movw	r24, r0
     99a:	43 9f       	mul	r20, r19
     99c:	90 0d       	add	r25, r0
     99e:	52 9f       	mul	r21, r18
     9a0:	90 0d       	add	r25, r0
     9a2:	11 24       	eor	r1, r1
     9a4:	e6 e8       	ldi	r30, 0x86	; 134
     9a6:	f0 e0       	ldi	r31, 0x00	; 0
     9a8:	91 83       	std	Z+1, r25	; 0x01
     9aa:	80 83       	st	Z, r24
						int dummy = ICR1;
     9ac:	80 81       	ld	r24, Z
     9ae:	91 81       	ldd	r25, Z+1	; 0x01
						speedRampPos --;
     9b0:	80 91 90 01 	lds	r24, 0x0190
     9b4:	90 91 91 01 	lds	r25, 0x0191
     9b8:	01 97       	sbiw	r24, 0x01	; 1
     9ba:	90 93 91 01 	sts	0x0191, r25
     9be:	80 93 90 01 	sts	0x0190, r24
     9c2:	f2 c0       	rjmp	.+484    	; 0xba8 <__stack+0x2a9>
				}
			}
		break;
		
		case homingCW:
			if((PINB & 0x01) == 0)
     9c4:	18 99       	sbic	0x03, 0	; 3
     9c6:	20 c0       	rjmp	.+64     	; 0xa08 <__stack+0x109>
			{
				ICR1 = closeHomingSpeed;
     9c8:	e6 e8       	ldi	r30, 0x86	; 134
     9ca:	f0 e0       	ldi	r31, 0x00	; 0
     9cc:	88 ee       	ldi	r24, 0xE8	; 232
     9ce:	93 e0       	ldi	r25, 0x03	; 3
     9d0:	91 83       	std	Z+1, r25	; 0x01
     9d2:	80 83       	st	Z, r24
				int dummy = ICR1;
     9d4:	80 81       	ld	r24, Z
     9d6:	91 81       	ldd	r25, Z+1	; 0x01
				targetMotorPos = motorPos - 300;
     9d8:	80 91 97 01 	lds	r24, 0x0197
     9dc:	90 91 98 01 	lds	r25, 0x0198
     9e0:	a0 91 99 01 	lds	r26, 0x0199
     9e4:	b0 91 9a 01 	lds	r27, 0x019A
     9e8:	8c 52       	subi	r24, 0x2C	; 44
     9ea:	91 40       	sbci	r25, 0x01	; 1
     9ec:	a1 09       	sbc	r26, r1
     9ee:	b1 09       	sbc	r27, r1
     9f0:	80 93 93 01 	sts	0x0193, r24
     9f4:	90 93 94 01 	sts	0x0194, r25
     9f8:	a0 93 95 01 	sts	0x0195, r26
     9fc:	b0 93 96 01 	sts	0x0196, r27
				ramp = backFromHomingCW;
     a00:	83 e0       	ldi	r24, 0x03	; 3
     a02:	80 93 92 01 	sts	0x0192, r24
     a06:	d0 c0       	rjmp	.+416    	; 0xba8 <__stack+0x2a9>
			}
			else
			{
				targetMotorPos += 2;
     a08:	80 91 93 01 	lds	r24, 0x0193
     a0c:	90 91 94 01 	lds	r25, 0x0194
     a10:	a0 91 95 01 	lds	r26, 0x0195
     a14:	b0 91 96 01 	lds	r27, 0x0196
     a18:	02 96       	adiw	r24, 0x02	; 2
     a1a:	a1 1d       	adc	r26, r1
     a1c:	b1 1d       	adc	r27, r1
     a1e:	80 93 93 01 	sts	0x0193, r24
     a22:	90 93 94 01 	sts	0x0194, r25
     a26:	a0 93 95 01 	sts	0x0195, r26
     a2a:	b0 93 96 01 	sts	0x0196, r27
     a2e:	bc c0       	rjmp	.+376    	; 0xba8 <__stack+0x2a9>
			}
		break;
		
		case backFromHomingCW:
			if (motorPos - targetMotorPos == 2)
     a30:	80 91 97 01 	lds	r24, 0x0197
     a34:	90 91 98 01 	lds	r25, 0x0198
     a38:	a0 91 99 01 	lds	r26, 0x0199
     a3c:	b0 91 9a 01 	lds	r27, 0x019A
     a40:	40 91 93 01 	lds	r20, 0x0193
     a44:	50 91 94 01 	lds	r21, 0x0194
     a48:	60 91 95 01 	lds	r22, 0x0195
     a4c:	70 91 96 01 	lds	r23, 0x0196
     a50:	84 1b       	sub	r24, r20
     a52:	95 0b       	sbc	r25, r21
     a54:	a6 0b       	sbc	r26, r22
     a56:	b7 0b       	sbc	r27, r23
     a58:	02 97       	sbiw	r24, 0x02	; 2
     a5a:	a1 05       	cpc	r26, r1
     a5c:	b1 05       	cpc	r27, r1
     a5e:	09 f0       	breq	.+2      	; 0xa62 <__stack+0x163>
     a60:	a3 c0       	rjmp	.+326    	; 0xba8 <__stack+0x2a9>
			{
				ramp = finalHomingCW;
     a62:	84 e0       	ldi	r24, 0x04	; 4
     a64:	80 93 92 01 	sts	0x0192, r24
				targetMotorPos = motorPos + 400;
     a68:	80 91 97 01 	lds	r24, 0x0197
     a6c:	90 91 98 01 	lds	r25, 0x0198
     a70:	a0 91 99 01 	lds	r26, 0x0199
     a74:	b0 91 9a 01 	lds	r27, 0x019A
     a78:	80 57       	subi	r24, 0x70	; 112
     a7a:	9e 4f       	sbci	r25, 0xFE	; 254
     a7c:	af 4f       	sbci	r26, 0xFF	; 255
     a7e:	bf 4f       	sbci	r27, 0xFF	; 255
     a80:	80 93 93 01 	sts	0x0193, r24
     a84:	90 93 94 01 	sts	0x0194, r25
     a88:	a0 93 95 01 	sts	0x0195, r26
     a8c:	b0 93 96 01 	sts	0x0196, r27
     a90:	8b c0       	rjmp	.+278    	; 0xba8 <__stack+0x2a9>
			}		
		break;
		
		case finalHomingCW:
			if((PINB & 0x01) == 0)
     a92:	18 99       	sbic	0x03, 0	; 3
     a94:	89 c0       	rjmp	.+274    	; 0xba8 <__stack+0x2a9>
			{
				motorPos = 0;
     a96:	10 92 97 01 	sts	0x0197, r1
     a9a:	10 92 98 01 	sts	0x0198, r1
     a9e:	10 92 99 01 	sts	0x0199, r1
     aa2:	10 92 9a 01 	sts	0x019A, r1
				targetMotorPos = 0;
     aa6:	10 92 93 01 	sts	0x0193, r1
     aaa:	10 92 94 01 	sts	0x0194, r1
     aae:	10 92 95 01 	sts	0x0195, r1
     ab2:	10 92 96 01 	sts	0x0196, r1
     ab6:	78 c0       	rjmp	.+240    	; 0xba8 <__stack+0x2a9>
			}
		break;
		
		case homingCCW:
		if((PINB & 0x01) == 0)
     ab8:	18 99       	sbic	0x03, 0	; 3
     aba:	20 c0       	rjmp	.+64     	; 0xafc <__stack+0x1fd>
		{
			ICR1 = closeHomingSpeed;
     abc:	e6 e8       	ldi	r30, 0x86	; 134
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	88 ee       	ldi	r24, 0xE8	; 232
     ac2:	93 e0       	ldi	r25, 0x03	; 3
     ac4:	91 83       	std	Z+1, r25	; 0x01
     ac6:	80 83       	st	Z, r24
			int dummy = ICR1;
     ac8:	80 81       	ld	r24, Z
     aca:	91 81       	ldd	r25, Z+1	; 0x01
			targetMotorPos = motorPos + 300;
     acc:	80 91 97 01 	lds	r24, 0x0197
     ad0:	90 91 98 01 	lds	r25, 0x0198
     ad4:	a0 91 99 01 	lds	r26, 0x0199
     ad8:	b0 91 9a 01 	lds	r27, 0x019A
     adc:	84 5d       	subi	r24, 0xD4	; 212
     ade:	9e 4f       	sbci	r25, 0xFE	; 254
     ae0:	af 4f       	sbci	r26, 0xFF	; 255
     ae2:	bf 4f       	sbci	r27, 0xFF	; 255
     ae4:	80 93 93 01 	sts	0x0193, r24
     ae8:	90 93 94 01 	sts	0x0194, r25
     aec:	a0 93 95 01 	sts	0x0195, r26
     af0:	b0 93 96 01 	sts	0x0196, r27
			ramp = backFromHomingCCW;
     af4:	86 e0       	ldi	r24, 0x06	; 6
     af6:	80 93 92 01 	sts	0x0192, r24
     afa:	56 c0       	rjmp	.+172    	; 0xba8 <__stack+0x2a9>
		}
		else
		{
			targetMotorPos -= 2;
     afc:	80 91 93 01 	lds	r24, 0x0193
     b00:	90 91 94 01 	lds	r25, 0x0194
     b04:	a0 91 95 01 	lds	r26, 0x0195
     b08:	b0 91 96 01 	lds	r27, 0x0196
     b0c:	02 97       	sbiw	r24, 0x02	; 2
     b0e:	a1 09       	sbc	r26, r1
     b10:	b1 09       	sbc	r27, r1
     b12:	80 93 93 01 	sts	0x0193, r24
     b16:	90 93 94 01 	sts	0x0194, r25
     b1a:	a0 93 95 01 	sts	0x0195, r26
     b1e:	b0 93 96 01 	sts	0x0196, r27
     b22:	42 c0       	rjmp	.+132    	; 0xba8 <__stack+0x2a9>
		}
		break;
		
		case backFromHomingCCW:
		if (targetMotorPos - motorPos == 2)
     b24:	80 91 93 01 	lds	r24, 0x0193
     b28:	90 91 94 01 	lds	r25, 0x0194
     b2c:	a0 91 95 01 	lds	r26, 0x0195
     b30:	b0 91 96 01 	lds	r27, 0x0196
     b34:	40 91 97 01 	lds	r20, 0x0197
     b38:	50 91 98 01 	lds	r21, 0x0198
     b3c:	60 91 99 01 	lds	r22, 0x0199
     b40:	70 91 9a 01 	lds	r23, 0x019A
     b44:	84 1b       	sub	r24, r20
     b46:	95 0b       	sbc	r25, r21
     b48:	a6 0b       	sbc	r26, r22
     b4a:	b7 0b       	sbc	r27, r23
     b4c:	02 97       	sbiw	r24, 0x02	; 2
     b4e:	a1 05       	cpc	r26, r1
     b50:	b1 05       	cpc	r27, r1
     b52:	51 f5       	brne	.+84     	; 0xba8 <__stack+0x2a9>
		{
			ramp = finalHomingCCW;
     b54:	87 e0       	ldi	r24, 0x07	; 7
     b56:	80 93 92 01 	sts	0x0192, r24
			targetMotorPos = motorPos - 400;
     b5a:	80 91 97 01 	lds	r24, 0x0197
     b5e:	90 91 98 01 	lds	r25, 0x0198
     b62:	a0 91 99 01 	lds	r26, 0x0199
     b66:	b0 91 9a 01 	lds	r27, 0x019A
     b6a:	80 59       	subi	r24, 0x90	; 144
     b6c:	91 40       	sbci	r25, 0x01	; 1
     b6e:	a1 09       	sbc	r26, r1
     b70:	b1 09       	sbc	r27, r1
     b72:	80 93 93 01 	sts	0x0193, r24
     b76:	90 93 94 01 	sts	0x0194, r25
     b7a:	a0 93 95 01 	sts	0x0195, r26
     b7e:	b0 93 96 01 	sts	0x0196, r27
     b82:	12 c0       	rjmp	.+36     	; 0xba8 <__stack+0x2a9>
		}
		break;
		
		case finalHomingCCW:
		if((PINB & 0x01) == 0)
     b84:	18 99       	sbic	0x03, 0	; 3
     b86:	10 c0       	rjmp	.+32     	; 0xba8 <__stack+0x2a9>
		{
			motorPos = 0;
     b88:	10 92 97 01 	sts	0x0197, r1
     b8c:	10 92 98 01 	sts	0x0198, r1
     b90:	10 92 99 01 	sts	0x0199, r1
     b94:	10 92 9a 01 	sts	0x019A, r1
			targetMotorPos = 0;
     b98:	10 92 93 01 	sts	0x0193, r1
     b9c:	10 92 94 01 	sts	0x0194, r1
     ba0:	10 92 95 01 	sts	0x0195, r1
     ba4:	10 92 96 01 	sts	0x0196, r1
		}
		break;		
	}
	
	if (motorPos < targetMotorPos)
     ba8:	40 91 97 01 	lds	r20, 0x0197
     bac:	50 91 98 01 	lds	r21, 0x0198
     bb0:	60 91 99 01 	lds	r22, 0x0199
     bb4:	70 91 9a 01 	lds	r23, 0x019A
     bb8:	80 91 93 01 	lds	r24, 0x0193
     bbc:	90 91 94 01 	lds	r25, 0x0194
     bc0:	a0 91 95 01 	lds	r26, 0x0195
     bc4:	b0 91 96 01 	lds	r27, 0x0196
     bc8:	48 17       	cp	r20, r24
     bca:	59 07       	cpc	r21, r25
     bcc:	6a 07       	cpc	r22, r26
     bce:	7b 07       	cpc	r23, r27
     bd0:	c4 f4       	brge	.+48     	; 0xc02 <__stack+0x303>
	{
		PORTB |= 0b00000100;
     bd2:	2a 9a       	sbi	0x05, 2	; 5
		PORTB ^= 0b00000010;
     bd4:	95 b1       	in	r25, 0x05	; 5
     bd6:	82 e0       	ldi	r24, 0x02	; 2
     bd8:	89 27       	eor	r24, r25
     bda:	85 b9       	out	0x05, r24	; 5
		motorPos ++;
     bdc:	80 91 97 01 	lds	r24, 0x0197
     be0:	90 91 98 01 	lds	r25, 0x0198
     be4:	a0 91 99 01 	lds	r26, 0x0199
     be8:	b0 91 9a 01 	lds	r27, 0x019A
     bec:	01 96       	adiw	r24, 0x01	; 1
     bee:	a1 1d       	adc	r26, r1
     bf0:	b1 1d       	adc	r27, r1
     bf2:	80 93 97 01 	sts	0x0197, r24
     bf6:	90 93 98 01 	sts	0x0198, r25
     bfa:	a0 93 99 01 	sts	0x0199, r26
     bfe:	b0 93 9a 01 	sts	0x019A, r27
	}
	if (motorPos > targetMotorPos)
     c02:	40 91 97 01 	lds	r20, 0x0197
     c06:	50 91 98 01 	lds	r21, 0x0198
     c0a:	60 91 99 01 	lds	r22, 0x0199
     c0e:	70 91 9a 01 	lds	r23, 0x019A
     c12:	80 91 93 01 	lds	r24, 0x0193
     c16:	90 91 94 01 	lds	r25, 0x0194
     c1a:	a0 91 95 01 	lds	r26, 0x0195
     c1e:	b0 91 96 01 	lds	r27, 0x0196
     c22:	84 17       	cp	r24, r20
     c24:	95 07       	cpc	r25, r21
     c26:	a6 07       	cpc	r26, r22
     c28:	b7 07       	cpc	r27, r23
     c2a:	c4 f4       	brge	.+48     	; 0xc5c <__stack+0x35d>
	{
		PORTB &= 0b11111011;
     c2c:	2a 98       	cbi	0x05, 2	; 5
		PORTB ^= 0b00000010;
     c2e:	95 b1       	in	r25, 0x05	; 5
     c30:	82 e0       	ldi	r24, 0x02	; 2
     c32:	89 27       	eor	r24, r25
     c34:	85 b9       	out	0x05, r24	; 5
		motorPos --;
     c36:	80 91 97 01 	lds	r24, 0x0197
     c3a:	90 91 98 01 	lds	r25, 0x0198
     c3e:	a0 91 99 01 	lds	r26, 0x0199
     c42:	b0 91 9a 01 	lds	r27, 0x019A
     c46:	01 97       	sbiw	r24, 0x01	; 1
     c48:	a1 09       	sbc	r26, r1
     c4a:	b1 09       	sbc	r27, r1
     c4c:	80 93 97 01 	sts	0x0197, r24
     c50:	90 93 98 01 	sts	0x0198, r25
     c54:	a0 93 99 01 	sts	0x0199, r26
     c58:	b0 93 9a 01 	sts	0x019A, r27
	}

	if (motorPos == targetMotorPos)
     c5c:	40 91 97 01 	lds	r20, 0x0197
     c60:	50 91 98 01 	lds	r21, 0x0198
     c64:	60 91 99 01 	lds	r22, 0x0199
     c68:	70 91 9a 01 	lds	r23, 0x019A
     c6c:	80 91 93 01 	lds	r24, 0x0193
     c70:	90 91 94 01 	lds	r25, 0x0194
     c74:	a0 91 95 01 	lds	r26, 0x0195
     c78:	b0 91 96 01 	lds	r27, 0x0196
     c7c:	48 17       	cp	r20, r24
     c7e:	59 07       	cpc	r21, r25
     c80:	6a 07       	cpc	r22, r26
     c82:	7b 07       	cpc	r23, r27
     c84:	51 f4       	brne	.+20     	; 0xc9a <__stack+0x39b>
	{
		PORTB &= 0b11111101;
     c86:	29 98       	cbi	0x05, 1	; 5
		TIMSK1 -= _BV(OCIE1A);		// Disable IRQ when motor has reached target pos.
     c88:	ef e6       	ldi	r30, 0x6F	; 111
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	82 50       	subi	r24, 0x02	; 2
     c90:	80 83       	st	Z, r24
		speedRampPos = 0;
     c92:	10 92 91 01 	sts	0x0191, r1
     c96:	10 92 90 01 	sts	0x0190, r1
	}
}
     c9a:	ff 91       	pop	r31
     c9c:	ef 91       	pop	r30
     c9e:	bf 91       	pop	r27
     ca0:	af 91       	pop	r26
     ca2:	9f 91       	pop	r25
     ca4:	8f 91       	pop	r24
     ca6:	7f 91       	pop	r23
     ca8:	6f 91       	pop	r22
     caa:	5f 91       	pop	r21
     cac:	4f 91       	pop	r20
     cae:	3f 91       	pop	r19
     cb0:	2f 91       	pop	r18
     cb2:	0f 90       	pop	r0
     cb4:	0f be       	out	0x3f, r0	; 63
     cb6:	0f 90       	pop	r0
     cb8:	1f 90       	pop	r1
     cba:	18 95       	reti

00000cbc <__vector_7>:

ISR(TIMER2_COMPA_vect)	// PID Controller Irq
{
     cbc:	1f 92       	push	r1
     cbe:	0f 92       	push	r0
     cc0:	0f b6       	in	r0, 0x3f	; 63
     cc2:	0f 92       	push	r0
     cc4:	11 24       	eor	r1, r1
     cc6:	cf 92       	push	r12
     cc8:	df 92       	push	r13
     cca:	ef 92       	push	r14
     ccc:	ff 92       	push	r15
     cce:	0f 93       	push	r16
     cd0:	1f 93       	push	r17
     cd2:	2f 93       	push	r18
     cd4:	3f 93       	push	r19
     cd6:	4f 93       	push	r20
     cd8:	5f 93       	push	r21
     cda:	6f 93       	push	r22
     cdc:	7f 93       	push	r23
     cde:	8f 93       	push	r24
     ce0:	9f 93       	push	r25
     ce2:	af 93       	push	r26
     ce4:	bf 93       	push	r27
     ce6:	cf 93       	push	r28
     ce8:	df 93       	push	r29
     cea:	ef 93       	push	r30
     cec:	ff 93       	push	r31
	sei();	// Enable nested interrupt
     cee:	78 94       	sei
	PORTD |= statusLed;
     cf0:	5b 9a       	sbi	0x0b, 3	; 11
static inline unsigned char SPIread( unsigned char byteword, unsigned char ch)
{
	switch (ch)
	{
		case 1:
		PORTD &= 0b11101111;	// Set CS1 low
     cf2:	5c 98       	cbi	0x0b, 4	; 11
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     cf8:	0d b4       	in	r0, 0x2d	; 45
     cfa:	07 fe       	sbrs	r0, 7
     cfc:	fd cf       	rjmp	.-6      	; 0xcf8 <__vector_7+0x3c>
	byteword=SPDR;				//just for clearing SPIF
     cfe:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
     d00:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     d02:	0d b4       	in	r0, 0x2d	; 45
     d04:	07 fe       	sbrs	r0, 7
     d06:	fd cf       	rjmp	.-6      	; 0xd02 <__vector_7+0x46>
	byteword=SPDR;
     d08:	9e b5       	in	r25, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
     d0a:	8b b1       	in	r24, 0x0b	; 11
     d0c:	80 6f       	ori	r24, 0xF0	; 240
     d0e:	8b b9       	out	0x0b, r24	; 11
static inline unsigned char SPIread( unsigned char byteword, unsigned char ch)
{
	switch (ch)
	{
		case 1:
		PORTD &= 0b11101111;	// Set CS1 low
     d10:	5c 98       	cbi	0x0b, 4	; 11
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
     d12:	82 e0       	ldi	r24, 0x02	; 2
     d14:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     d16:	0d b4       	in	r0, 0x2d	; 45
     d18:	07 fe       	sbrs	r0, 7
     d1a:	fd cf       	rjmp	.-6      	; 0xd16 <__vector_7+0x5a>
	byteword=SPDR;				//just for clearing SPIF
     d1c:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
     d1e:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     d20:	0d b4       	in	r0, 0x2d	; 45
     d22:	07 fe       	sbrs	r0, 7
     d24:	fd cf       	rjmp	.-6      	; 0xd20 <__vector_7+0x64>
	byteword=SPDR;
     d26:	6e b5       	in	r22, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
     d28:	8b b1       	in	r24, 0x0b	; 11
     d2a:	80 6f       	ori	r24, 0xF0	; 240
     d2c:	8b b9       	out	0x0b, r24	; 11
	uint8_t u8_msb = 0;
	uint8_t u8_lsb = 0;
	
	u8_msb = SPIread(0x01, ch);
	u8_lsb = SPIread(0x02, ch);
	adc_code = (((u8_msb << 8) | u8_lsb) >> 1);
     d2e:	70 e0       	ldi	r23, 0x00	; 0
     d30:	79 2b       	or	r23, r25
     d32:	75 95       	asr	r23
     d34:	67 95       	ror	r22
	return ((float)adc_code / 32.0 - 256.0);
     d36:	07 2e       	mov	r0, r23
     d38:	00 0c       	add	r0, r0
     d3a:	88 0b       	sbc	r24, r24
     d3c:	99 0b       	sbc	r25, r25
     d3e:	0e 94 b9 22 	call	0x4572	; 0x4572 <__floatsisf>
     d42:	20 e0       	ldi	r18, 0x00	; 0
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	40 e0       	ldi	r20, 0x00	; 0
     d48:	5d e3       	ldi	r21, 0x3D	; 61
     d4a:	0e 94 6d 23 	call	0x46da	; 0x46da <__mulsf3>
     d4e:	20 e0       	ldi	r18, 0x00	; 0
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	40 e8       	ldi	r20, 0x80	; 128
     d54:	53 e4       	ldi	r21, 0x43	; 67
     d56:	0e 94 1d 22 	call	0x443a	; 0x443a <__subsf3>
	PORTD &= 0b11110111;						// Turn off LED on PCB (Irq call freq: 16MHz / 1024 / 255 = 61.3 Hz )
}

static inline void PIDctrl(channel *ch, int tempSensor)
{
	ch->TempSensor = ReadTempSensor(tempSensor);
     d5a:	e4 ec       	ldi	r30, 0xC4	; 196
     d5c:	f2 e0       	ldi	r31, 0x02	; 2
     d5e:	64 83       	std	Z+4, r22	; 0x04
     d60:	75 83       	std	Z+5, r23	; 0x05
     d62:	86 83       	std	Z+6, r24	; 0x06
     d64:	97 83       	std	Z+7, r25	; 0x07
	if(ch->TempSensor > (float)maxAllowedTemp)								// Max temperature limit
     d66:	64 81       	ldd	r22, Z+4	; 0x04
     d68:	75 81       	ldd	r23, Z+5	; 0x05
     d6a:	86 81       	ldd	r24, Z+6	; 0x06
     d6c:	97 81       	ldd	r25, Z+7	; 0x07
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	40 ef       	ldi	r20, 0xF0	; 240
     d74:	52 e4       	ldi	r21, 0x42	; 66
     d76:	0e 94 69 23 	call	0x46d2	; 0x46d2 <__gesf2>
     d7a:	18 16       	cp	r1, r24
     d7c:	2c f4       	brge	.+10     	; 0xd88 <__vector_7+0xcc>
	{
		ch->heaterEnable = false;
     d7e:	10 92 26 03 	sts	0x0326, r1
		PORTC &= allHeaterOff;
     d82:	88 b1       	in	r24, 0x08	; 8
     d84:	80 7f       	andi	r24, 0xF0	; 240
     d86:	88 b9       	out	0x08, r24	; 8
	}

	ch->TempError[CtrlErrorIdx] = ch->TempSetPoint - ch->TempSensor;		// Control error
     d88:	00 91 27 03 	lds	r16, 0x0327
     d8c:	10 91 28 03 	lds	r17, 0x0328
     d90:	c4 ec       	ldi	r28, 0xC4	; 196
     d92:	d2 e0       	ldi	r29, 0x02	; 2
     d94:	68 81       	ld	r22, Y
     d96:	79 81       	ldd	r23, Y+1	; 0x01
     d98:	8a 81       	ldd	r24, Y+2	; 0x02
     d9a:	9b 81       	ldd	r25, Y+3	; 0x03
     d9c:	2c 81       	ldd	r18, Y+4	; 0x04
     d9e:	3d 81       	ldd	r19, Y+5	; 0x05
     da0:	4e 81       	ldd	r20, Y+6	; 0x06
     da2:	5f 81       	ldd	r21, Y+7	; 0x07
     da4:	0e 94 1d 22 	call	0x443a	; 0x443a <__subsf3>
     da8:	00 0f       	add	r16, r16
     daa:	11 1f       	adc	r17, r17
     dac:	00 0f       	add	r16, r16
     dae:	11 1f       	adc	r17, r17
     db0:	f8 01       	movw	r30, r16
     db2:	e4 51       	subi	r30, 0x14	; 20
     db4:	fd 4f       	sbci	r31, 0xFD	; 253
     db6:	60 83       	st	Z, r22
     db8:	71 83       	std	Z+1, r23	; 0x01
     dba:	82 83       	std	Z+2, r24	; 0x02
     dbc:	93 83       	std	Z+3, r25	; 0x03
	
	ch->P_err = ch->TempError[CtrlErrorIdx] * ch->Pgain;					// P error
     dbe:	e0 91 27 03 	lds	r30, 0x0327
     dc2:	f0 91 28 03 	lds	r31, 0x0328
     dc6:	ee 0f       	add	r30, r30
     dc8:	ff 1f       	adc	r31, r31
     dca:	ee 0f       	add	r30, r30
     dcc:	ff 1f       	adc	r31, r31
     dce:	e4 51       	subi	r30, 0x14	; 20
     dd0:	fd 4f       	sbci	r31, 0xFD	; 253
     dd2:	60 81       	ld	r22, Z
     dd4:	71 81       	ldd	r23, Z+1	; 0x01
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	2c 8d       	ldd	r18, Y+28	; 0x1c
     ddc:	3d 8d       	ldd	r19, Y+29	; 0x1d
     dde:	4e 8d       	ldd	r20, Y+30	; 0x1e
     de0:	5f 8d       	ldd	r21, Y+31	; 0x1f
     de2:	0e 94 6d 23 	call	0x46da	; 0x46da <__mulsf3>
     de6:	68 87       	std	Y+8, r22	; 0x08
     de8:	79 87       	std	Y+9, r23	; 0x09
     dea:	8a 87       	std	Y+10, r24	; 0x0a
     dec:	9b 87       	std	Y+11, r25	; 0x0b
	ch->I_err = ch->I_err + (ch->TempError[CtrlErrorIdx] * ch->Igain);		// I error
     dee:	cc 84       	ldd	r12, Y+12	; 0x0c
     df0:	dd 84       	ldd	r13, Y+13	; 0x0d
     df2:	ee 84       	ldd	r14, Y+14	; 0x0e
     df4:	ff 84       	ldd	r15, Y+15	; 0x0f
     df6:	e0 91 27 03 	lds	r30, 0x0327
     dfa:	f0 91 28 03 	lds	r31, 0x0328
     dfe:	ee 0f       	add	r30, r30
     e00:	ff 1f       	adc	r31, r31
     e02:	ee 0f       	add	r30, r30
     e04:	ff 1f       	adc	r31, r31
     e06:	e4 51       	subi	r30, 0x14	; 20
     e08:	fd 4f       	sbci	r31, 0xFD	; 253
     e0a:	60 81       	ld	r22, Z
     e0c:	71 81       	ldd	r23, Z+1	; 0x01
     e0e:	82 81       	ldd	r24, Z+2	; 0x02
     e10:	93 81       	ldd	r25, Z+3	; 0x03
     e12:	28 a1       	ldd	r18, Y+32	; 0x20
     e14:	39 a1       	ldd	r19, Y+33	; 0x21
     e16:	4a a1       	ldd	r20, Y+34	; 0x22
     e18:	5b a1       	ldd	r21, Y+35	; 0x23
     e1a:	0e 94 6d 23 	call	0x46da	; 0x46da <__mulsf3>
     e1e:	9b 01       	movw	r18, r22
     e20:	ac 01       	movw	r20, r24
     e22:	c7 01       	movw	r24, r14
     e24:	b6 01       	movw	r22, r12
     e26:	0e 94 1e 22 	call	0x443c	; 0x443c <__addsf3>
     e2a:	6c 87       	std	Y+12, r22	; 0x0c
     e2c:	7d 87       	std	Y+13, r23	; 0x0d
     e2e:	8e 87       	std	Y+14, r24	; 0x0e
     e30:	9f 87       	std	Y+15, r25	; 0x0f
	if(ch->I_err > integralErrorLimit)
     e32:	6c 85       	ldd	r22, Y+12	; 0x0c
     e34:	7d 85       	ldd	r23, Y+13	; 0x0d
     e36:	8e 85       	ldd	r24, Y+14	; 0x0e
     e38:	9f 85       	ldd	r25, Y+15	; 0x0f
     e3a:	20 e0       	ldi	r18, 0x00	; 0
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	40 e2       	ldi	r20, 0x20	; 32
     e40:	51 e4       	ldi	r21, 0x41	; 65
     e42:	0e 94 69 23 	call	0x46d2	; 0x46d2 <__gesf2>
     e46:	18 16       	cp	r1, r24
     e48:	64 f4       	brge	.+24     	; 0xe62 <__vector_7+0x1a6>
	{
		ch->I_err = integralErrorLimit;
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	a0 e2       	ldi	r26, 0x20	; 32
     e50:	b1 e4       	ldi	r27, 0x41	; 65
     e52:	80 93 d0 02 	sts	0x02D0, r24
     e56:	90 93 d1 02 	sts	0x02D1, r25
     e5a:	a0 93 d2 02 	sts	0x02D2, r26
     e5e:	b0 93 d3 02 	sts	0x02D3, r27
	}
	if(ch->I_err < -integralErrorLimit)
     e62:	60 91 d0 02 	lds	r22, 0x02D0
     e66:	70 91 d1 02 	lds	r23, 0x02D1
     e6a:	80 91 d2 02 	lds	r24, 0x02D2
     e6e:	90 91 d3 02 	lds	r25, 0x02D3
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	40 e2       	ldi	r20, 0x20	; 32
     e78:	51 ec       	ldi	r21, 0xC1	; 193
     e7a:	0e 94 82 22 	call	0x4504	; 0x4504 <__cmpsf2>
     e7e:	88 23       	and	r24, r24
     e80:	64 f4       	brge	.+24     	; 0xe9a <__vector_7+0x1de>
	{
		ch->I_err = -integralErrorLimit;
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	a0 e2       	ldi	r26, 0x20	; 32
     e88:	b1 ec       	ldi	r27, 0xC1	; 193
     e8a:	80 93 d0 02 	sts	0x02D0, r24
     e8e:	90 93 d1 02 	sts	0x02D1, r25
     e92:	a0 93 d2 02 	sts	0x02D2, r26
     e96:	b0 93 d3 02 	sts	0x02D3, r27
	}
	
	ch->D_err = (ch->TempError[CtrlErrorIdx] - ch->TempError[CtrlErrorHistIdx]) * ch->Dgain; // D error
     e9a:	e0 91 27 03 	lds	r30, 0x0327
     e9e:	f0 91 28 03 	lds	r31, 0x0328
     ea2:	c4 ec       	ldi	r28, 0xC4	; 196
     ea4:	d2 e0       	ldi	r29, 0x02	; 2
     ea6:	ee 0f       	add	r30, r30
     ea8:	ff 1f       	adc	r31, r31
     eaa:	ee 0f       	add	r30, r30
     eac:	ff 1f       	adc	r31, r31
     eae:	e4 51       	subi	r30, 0x14	; 20
     eb0:	fd 4f       	sbci	r31, 0xFD	; 253
     eb2:	60 81       	ld	r22, Z
     eb4:	71 81       	ldd	r23, Z+1	; 0x01
     eb6:	82 81       	ldd	r24, Z+2	; 0x02
     eb8:	93 81       	ldd	r25, Z+3	; 0x03
     eba:	e0 91 02 01 	lds	r30, 0x0102
     ebe:	f0 91 03 01 	lds	r31, 0x0103
     ec2:	ee 0f       	add	r30, r30
     ec4:	ff 1f       	adc	r31, r31
     ec6:	ee 0f       	add	r30, r30
     ec8:	ff 1f       	adc	r31, r31
     eca:	e4 51       	subi	r30, 0x14	; 20
     ecc:	fd 4f       	sbci	r31, 0xFD	; 253
     ece:	20 81       	ld	r18, Z
     ed0:	31 81       	ldd	r19, Z+1	; 0x01
     ed2:	42 81       	ldd	r20, Z+2	; 0x02
     ed4:	53 81       	ldd	r21, Z+3	; 0x03
     ed6:	cc a0       	ldd	r12, Y+36	; 0x24
     ed8:	dd a0       	ldd	r13, Y+37	; 0x25
     eda:	ee a0       	ldd	r14, Y+38	; 0x26
     edc:	ff a0       	ldd	r15, Y+39	; 0x27
     ede:	0e 94 1d 22 	call	0x443a	; 0x443a <__subsf3>
     ee2:	a7 01       	movw	r20, r14
     ee4:	96 01       	movw	r18, r12
     ee6:	0e 94 6d 23 	call	0x46da	; 0x46da <__mulsf3>
     eea:	68 8b       	std	Y+16, r22	; 0x10
     eec:	79 8b       	std	Y+17, r23	; 0x11
     eee:	8a 8b       	std	Y+18, r24	; 0x12
     ef0:	9b 8b       	std	Y+19, r25	; 0x13
	
	ch->Control_PID = ch->P_err + ch->I_err + ch->D_err;
     ef2:	68 85       	ldd	r22, Y+8	; 0x08
     ef4:	79 85       	ldd	r23, Y+9	; 0x09
     ef6:	8a 85       	ldd	r24, Y+10	; 0x0a
     ef8:	9b 85       	ldd	r25, Y+11	; 0x0b
     efa:	2c 85       	ldd	r18, Y+12	; 0x0c
     efc:	3d 85       	ldd	r19, Y+13	; 0x0d
     efe:	4e 85       	ldd	r20, Y+14	; 0x0e
     f00:	5f 85       	ldd	r21, Y+15	; 0x0f
     f02:	c8 88       	ldd	r12, Y+16	; 0x10
     f04:	d9 88       	ldd	r13, Y+17	; 0x11
     f06:	ea 88       	ldd	r14, Y+18	; 0x12
     f08:	fb 88       	ldd	r15, Y+19	; 0x13
     f0a:	0e 94 1e 22 	call	0x443c	; 0x443c <__addsf3>
     f0e:	a7 01       	movw	r20, r14
     f10:	96 01       	movw	r18, r12
     f12:	0e 94 1e 22 	call	0x443c	; 0x443c <__addsf3>
     f16:	68 8f       	std	Y+24, r22	; 0x18
     f18:	79 8f       	std	Y+25, r23	; 0x19
     f1a:	8a 8f       	std	Y+26, r24	; 0x1a
     f1c:	9b 8f       	std	Y+27, r25	; 0x1b
	ch->Control = ch->Control_PID; // + ch->TempSetPoint * (float)0.21 - 5;
     f1e:	88 8d       	ldd	r24, Y+24	; 0x18
     f20:	99 8d       	ldd	r25, Y+25	; 0x19
     f22:	aa 8d       	ldd	r26, Y+26	; 0x1a
     f24:	bb 8d       	ldd	r27, Y+27	; 0x1b
     f26:	8c 8b       	std	Y+20, r24	; 0x14
     f28:	9d 8b       	std	Y+21, r25	; 0x15
     f2a:	ae 8b       	std	Y+22, r26	; 0x16
     f2c:	bf 8b       	std	Y+23, r27	; 0x17
	ch->pwm = (round(ch->Control));
     f2e:	6c 89       	ldd	r22, Y+20	; 0x14
     f30:	7d 89       	ldd	r23, Y+21	; 0x15
     f32:	8e 89       	ldd	r24, Y+22	; 0x16
     f34:	9f 89       	ldd	r25, Y+23	; 0x17
     f36:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <round>
     f3a:	0e 94 86 22 	call	0x450c	; 0x450c <__fixsfsi>
     f3e:	70 93 25 03 	sts	0x0325, r23
     f42:	60 93 24 03 	sts	0x0324, r22
	
	if(fabs(ch->TempError[CtrlErrorIdx]) > integralErrorActiveWindow)
     f46:	e0 91 27 03 	lds	r30, 0x0327
     f4a:	f0 91 28 03 	lds	r31, 0x0328
     f4e:	ee 0f       	add	r30, r30
     f50:	ff 1f       	adc	r31, r31
     f52:	ee 0f       	add	r30, r30
     f54:	ff 1f       	adc	r31, r31
     f56:	e4 51       	subi	r30, 0x14	; 20
     f58:	fd 4f       	sbci	r31, 0xFD	; 253
     f5a:	80 81       	ld	r24, Z
     f5c:	91 81       	ldd	r25, Z+1	; 0x01
     f5e:	a2 81       	ldd	r26, Z+2	; 0x02
     f60:	b3 81       	ldd	r27, Z+3	; 0x03
     f62:	bc 01       	movw	r22, r24
     f64:	cd 01       	movw	r24, r26
     f66:	9f 77       	andi	r25, 0x7F	; 127
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	40 ea       	ldi	r20, 0xA0	; 160
     f6e:	50 e4       	ldi	r21, 0x40	; 64
     f70:	0e 94 69 23 	call	0x46d2	; 0x46d2 <__gesf2>
     f74:	18 16       	cp	r1, r24
     f76:	44 f4       	brge	.+16     	; 0xf88 <__vector_7+0x2cc>
	{
		ch->I_err = 0;														// Avoid integral wind-up
     f78:	10 92 d0 02 	sts	0x02D0, r1
     f7c:	10 92 d1 02 	sts	0x02D1, r1
     f80:	10 92 d2 02 	sts	0x02D2, r1
     f84:	10 92 d3 02 	sts	0x02D3, r1
	}
	
	if(fabs(ch->TempError[CtrlErrorIdx]) <= ch->tempErrorWin)				// Temperature settle window
     f88:	e0 91 27 03 	lds	r30, 0x0327
     f8c:	f0 91 28 03 	lds	r31, 0x0328
     f90:	ee 0f       	add	r30, r30
     f92:	ff 1f       	adc	r31, r31
     f94:	ee 0f       	add	r30, r30
     f96:	ff 1f       	adc	r31, r31
     f98:	e4 51       	subi	r30, 0x14	; 20
     f9a:	fd 4f       	sbci	r31, 0xFD	; 253
     f9c:	80 81       	ld	r24, Z
     f9e:	91 81       	ldd	r25, Z+1	; 0x01
     fa0:	a2 81       	ldd	r26, Z+2	; 0x02
     fa2:	b3 81       	ldd	r27, Z+3	; 0x03
     fa4:	20 91 18 03 	lds	r18, 0x0318
     fa8:	30 91 19 03 	lds	r19, 0x0319
     fac:	40 91 1a 03 	lds	r20, 0x031A
     fb0:	50 91 1b 03 	lds	r21, 0x031B
     fb4:	bc 01       	movw	r22, r24
     fb6:	cd 01       	movw	r24, r26
     fb8:	9f 77       	andi	r25, 0x7F	; 127
     fba:	0e 94 82 22 	call	0x4504	; 0x4504 <__cmpsf2>
     fbe:	18 16       	cp	r1, r24
     fc0:	14 f1       	brlt	.+68     	; 0x1006 <__vector_7+0x34a>
	{
		ch->tempSettleCnt ++;
     fc2:	ec e1       	ldi	r30, 0x1C	; 28
     fc4:	f3 e0       	ldi	r31, 0x03	; 3
     fc6:	80 81       	ld	r24, Z
     fc8:	91 81       	ldd	r25, Z+1	; 0x01
     fca:	01 96       	adiw	r24, 0x01	; 1
     fcc:	91 83       	std	Z+1, r25	; 0x01
     fce:	80 83       	st	Z, r24
		if(ch->tempSettleCnt >= (int)(ch->tempSettleTime * 61))
     fd0:	20 81       	ld	r18, Z
     fd2:	31 81       	ldd	r19, Z+1	; 0x01
     fd4:	40 91 1e 03 	lds	r20, 0x031E
     fd8:	50 91 1f 03 	lds	r21, 0x031F
     fdc:	6d e3       	ldi	r22, 0x3D	; 61
     fde:	64 9f       	mul	r22, r20
     fe0:	c0 01       	movw	r24, r0
     fe2:	65 9f       	mul	r22, r21
     fe4:	90 0d       	add	r25, r0
     fe6:	11 24       	eor	r1, r1
     fe8:	28 17       	cp	r18, r24
     fea:	39 07       	cpc	r19, r25
     fec:	a4 f0       	brlt	.+40     	; 0x1016 <__vector_7+0x35a>
		{
			ch->tempStable = 1;
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	90 93 21 03 	sts	0x0321, r25
     ff6:	80 93 20 03 	sts	0x0320, r24
			ch->tempSettleCnt --;
     ffa:	80 81       	ld	r24, Z
     ffc:	91 81       	ldd	r25, Z+1	; 0x01
     ffe:	01 97       	sbiw	r24, 0x01	; 1
    1000:	91 83       	std	Z+1, r25	; 0x01
    1002:	80 83       	st	Z, r24
    1004:	08 c0       	rjmp	.+16     	; 0x1016 <__vector_7+0x35a>
		}			
	}
	else
	{
		ch->tempSettleCnt = 0;
    1006:	10 92 1d 03 	sts	0x031D, r1
    100a:	10 92 1c 03 	sts	0x031C, r1
		ch->tempStable = 0;
    100e:	10 92 21 03 	sts	0x0321, r1
    1012:	10 92 20 03 	sts	0x0320, r1
		case 1:
		PORTD &= 0b11101111;	// Set CS1 low
		break;
		
		case 2:
		PORTD &= 0b11011111;	// Set CS2 low
    1016:	5d 98       	cbi	0x0b, 5	; 11
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    101c:	0d b4       	in	r0, 0x2d	; 45
    101e:	07 fe       	sbrs	r0, 7
    1020:	fd cf       	rjmp	.-6      	; 0x101c <__vector_7+0x360>
	byteword=SPDR;				//just for clearing SPIF
    1022:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
    1024:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    1026:	0d b4       	in	r0, 0x2d	; 45
    1028:	07 fe       	sbrs	r0, 7
    102a:	fd cf       	rjmp	.-6      	; 0x1026 <__vector_7+0x36a>
	byteword=SPDR;
    102c:	9e b5       	in	r25, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
    102e:	8b b1       	in	r24, 0x0b	; 11
    1030:	80 6f       	ori	r24, 0xF0	; 240
    1032:	8b b9       	out	0x0b, r24	; 11
		case 1:
		PORTD &= 0b11101111;	// Set CS1 low
		break;
		
		case 2:
		PORTD &= 0b11011111;	// Set CS2 low
    1034:	5d 98       	cbi	0x0b, 5	; 11
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
    1036:	82 e0       	ldi	r24, 0x02	; 2
    1038:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    103a:	0d b4       	in	r0, 0x2d	; 45
    103c:	07 fe       	sbrs	r0, 7
    103e:	fd cf       	rjmp	.-6      	; 0x103a <__vector_7+0x37e>
	byteword=SPDR;				//just for clearing SPIF
    1040:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
    1042:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    1044:	0d b4       	in	r0, 0x2d	; 45
    1046:	07 fe       	sbrs	r0, 7
    1048:	fd cf       	rjmp	.-6      	; 0x1044 <__vector_7+0x388>
	byteword=SPDR;
    104a:	6e b5       	in	r22, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
    104c:	8b b1       	in	r24, 0x0b	; 11
    104e:	80 6f       	ori	r24, 0xF0	; 240
    1050:	8b b9       	out	0x0b, r24	; 11
	uint8_t u8_msb = 0;
	uint8_t u8_lsb = 0;
	
	u8_msb = SPIread(0x01, ch);
	u8_lsb = SPIread(0x02, ch);
	adc_code = (((u8_msb << 8) | u8_lsb) >> 1);
    1052:	70 e0       	ldi	r23, 0x00	; 0
    1054:	79 2b       	or	r23, r25
    1056:	75 95       	asr	r23
    1058:	67 95       	ror	r22
	return ((float)adc_code / 32.0 - 256.0);
    105a:	07 2e       	mov	r0, r23
    105c:	00 0c       	add	r0, r0
    105e:	88 0b       	sbc	r24, r24
    1060:	99 0b       	sbc	r25, r25
    1062:	0e 94 b9 22 	call	0x4572	; 0x4572 <__floatsisf>
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	40 e0       	ldi	r20, 0x00	; 0
    106c:	5d e3       	ldi	r21, 0x3D	; 61
    106e:	0e 94 6d 23 	call	0x46da	; 0x46da <__mulsf3>
    1072:	20 e0       	ldi	r18, 0x00	; 0
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	40 e8       	ldi	r20, 0x80	; 128
    1078:	53 e4       	ldi	r21, 0x43	; 67
    107a:	0e 94 1d 22 	call	0x443a	; 0x443a <__subsf3>
	PORTD &= 0b11110111;						// Turn off LED on PCB (Irq call freq: 16MHz / 1024 / 255 = 61.3 Hz )
}

static inline void PIDctrl(channel *ch, int tempSensor)
{
	ch->TempSensor = ReadTempSensor(tempSensor);
    107e:	e1 e6       	ldi	r30, 0x61	; 97
    1080:	f2 e0       	ldi	r31, 0x02	; 2
    1082:	64 83       	std	Z+4, r22	; 0x04
    1084:	75 83       	std	Z+5, r23	; 0x05
    1086:	86 83       	std	Z+6, r24	; 0x06
    1088:	97 83       	std	Z+7, r25	; 0x07
	if(ch->TempSensor > (float)maxAllowedTemp)								// Max temperature limit
    108a:	64 81       	ldd	r22, Z+4	; 0x04
    108c:	75 81       	ldd	r23, Z+5	; 0x05
    108e:	86 81       	ldd	r24, Z+6	; 0x06
    1090:	97 81       	ldd	r25, Z+7	; 0x07
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	40 ef       	ldi	r20, 0xF0	; 240
    1098:	52 e4       	ldi	r21, 0x42	; 66
    109a:	0e 94 69 23 	call	0x46d2	; 0x46d2 <__gesf2>
    109e:	18 16       	cp	r1, r24
    10a0:	2c f4       	brge	.+10     	; 0x10ac <__vector_7+0x3f0>
	{
		ch->heaterEnable = false;
    10a2:	10 92 c3 02 	sts	0x02C3, r1
		PORTC &= allHeaterOff;
    10a6:	88 b1       	in	r24, 0x08	; 8
    10a8:	80 7f       	andi	r24, 0xF0	; 240
    10aa:	88 b9       	out	0x08, r24	; 8
	}

	ch->TempError[CtrlErrorIdx] = ch->TempSetPoint - ch->TempSensor;		// Control error
    10ac:	00 91 27 03 	lds	r16, 0x0327
    10b0:	10 91 28 03 	lds	r17, 0x0328
    10b4:	c1 e6       	ldi	r28, 0x61	; 97
    10b6:	d2 e0       	ldi	r29, 0x02	; 2
    10b8:	68 81       	ld	r22, Y
    10ba:	79 81       	ldd	r23, Y+1	; 0x01
    10bc:	8a 81       	ldd	r24, Y+2	; 0x02
    10be:	9b 81       	ldd	r25, Y+3	; 0x03
    10c0:	2c 81       	ldd	r18, Y+4	; 0x04
    10c2:	3d 81       	ldd	r19, Y+5	; 0x05
    10c4:	4e 81       	ldd	r20, Y+6	; 0x06
    10c6:	5f 81       	ldd	r21, Y+7	; 0x07
    10c8:	0e 94 1d 22 	call	0x443a	; 0x443a <__subsf3>
    10cc:	00 0f       	add	r16, r16
    10ce:	11 1f       	adc	r17, r17
    10d0:	00 0f       	add	r16, r16
    10d2:	11 1f       	adc	r17, r17
    10d4:	f8 01       	movw	r30, r16
    10d6:	e7 57       	subi	r30, 0x77	; 119
    10d8:	fd 4f       	sbci	r31, 0xFD	; 253
    10da:	60 83       	st	Z, r22
    10dc:	71 83       	std	Z+1, r23	; 0x01
    10de:	82 83       	std	Z+2, r24	; 0x02
    10e0:	93 83       	std	Z+3, r25	; 0x03
	
	ch->P_err = ch->TempError[CtrlErrorIdx] * ch->Pgain;					// P error
    10e2:	e0 91 27 03 	lds	r30, 0x0327
    10e6:	f0 91 28 03 	lds	r31, 0x0328
    10ea:	ee 0f       	add	r30, r30
    10ec:	ff 1f       	adc	r31, r31
    10ee:	ee 0f       	add	r30, r30
    10f0:	ff 1f       	adc	r31, r31
    10f2:	e7 57       	subi	r30, 0x77	; 119
    10f4:	fd 4f       	sbci	r31, 0xFD	; 253
    10f6:	60 81       	ld	r22, Z
    10f8:	71 81       	ldd	r23, Z+1	; 0x01
    10fa:	82 81       	ldd	r24, Z+2	; 0x02
    10fc:	93 81       	ldd	r25, Z+3	; 0x03
    10fe:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1100:	3d 8d       	ldd	r19, Y+29	; 0x1d
    1102:	4e 8d       	ldd	r20, Y+30	; 0x1e
    1104:	5f 8d       	ldd	r21, Y+31	; 0x1f
    1106:	0e 94 6d 23 	call	0x46da	; 0x46da <__mulsf3>
    110a:	68 87       	std	Y+8, r22	; 0x08
    110c:	79 87       	std	Y+9, r23	; 0x09
    110e:	8a 87       	std	Y+10, r24	; 0x0a
    1110:	9b 87       	std	Y+11, r25	; 0x0b
	ch->I_err = ch->I_err + (ch->TempError[CtrlErrorIdx] * ch->Igain);		// I error
    1112:	cc 84       	ldd	r12, Y+12	; 0x0c
    1114:	dd 84       	ldd	r13, Y+13	; 0x0d
    1116:	ee 84       	ldd	r14, Y+14	; 0x0e
    1118:	ff 84       	ldd	r15, Y+15	; 0x0f
    111a:	e0 91 27 03 	lds	r30, 0x0327
    111e:	f0 91 28 03 	lds	r31, 0x0328
    1122:	ee 0f       	add	r30, r30
    1124:	ff 1f       	adc	r31, r31
    1126:	ee 0f       	add	r30, r30
    1128:	ff 1f       	adc	r31, r31
    112a:	e7 57       	subi	r30, 0x77	; 119
    112c:	fd 4f       	sbci	r31, 0xFD	; 253
    112e:	60 81       	ld	r22, Z
    1130:	71 81       	ldd	r23, Z+1	; 0x01
    1132:	82 81       	ldd	r24, Z+2	; 0x02
    1134:	93 81       	ldd	r25, Z+3	; 0x03
    1136:	28 a1       	ldd	r18, Y+32	; 0x20
    1138:	39 a1       	ldd	r19, Y+33	; 0x21
    113a:	4a a1       	ldd	r20, Y+34	; 0x22
    113c:	5b a1       	ldd	r21, Y+35	; 0x23
    113e:	0e 94 6d 23 	call	0x46da	; 0x46da <__mulsf3>
    1142:	9b 01       	movw	r18, r22
    1144:	ac 01       	movw	r20, r24
    1146:	c7 01       	movw	r24, r14
    1148:	b6 01       	movw	r22, r12
    114a:	0e 94 1e 22 	call	0x443c	; 0x443c <__addsf3>
    114e:	6c 87       	std	Y+12, r22	; 0x0c
    1150:	7d 87       	std	Y+13, r23	; 0x0d
    1152:	8e 87       	std	Y+14, r24	; 0x0e
    1154:	9f 87       	std	Y+15, r25	; 0x0f
	if(ch->I_err > integralErrorLimit)
    1156:	6c 85       	ldd	r22, Y+12	; 0x0c
    1158:	7d 85       	ldd	r23, Y+13	; 0x0d
    115a:	8e 85       	ldd	r24, Y+14	; 0x0e
    115c:	9f 85       	ldd	r25, Y+15	; 0x0f
    115e:	20 e0       	ldi	r18, 0x00	; 0
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	40 e2       	ldi	r20, 0x20	; 32
    1164:	51 e4       	ldi	r21, 0x41	; 65
    1166:	0e 94 69 23 	call	0x46d2	; 0x46d2 <__gesf2>
    116a:	18 16       	cp	r1, r24
    116c:	64 f4       	brge	.+24     	; 0x1186 <__vector_7+0x4ca>
	{
		ch->I_err = integralErrorLimit;
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	a0 e2       	ldi	r26, 0x20	; 32
    1174:	b1 e4       	ldi	r27, 0x41	; 65
    1176:	80 93 6d 02 	sts	0x026D, r24
    117a:	90 93 6e 02 	sts	0x026E, r25
    117e:	a0 93 6f 02 	sts	0x026F, r26
    1182:	b0 93 70 02 	sts	0x0270, r27
	}
	if(ch->I_err < -integralErrorLimit)
    1186:	60 91 6d 02 	lds	r22, 0x026D
    118a:	70 91 6e 02 	lds	r23, 0x026E
    118e:	80 91 6f 02 	lds	r24, 0x026F
    1192:	90 91 70 02 	lds	r25, 0x0270
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	40 e2       	ldi	r20, 0x20	; 32
    119c:	51 ec       	ldi	r21, 0xC1	; 193
    119e:	0e 94 82 22 	call	0x4504	; 0x4504 <__cmpsf2>
    11a2:	88 23       	and	r24, r24
    11a4:	64 f4       	brge	.+24     	; 0x11be <__vector_7+0x502>
	{
		ch->I_err = -integralErrorLimit;
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	a0 e2       	ldi	r26, 0x20	; 32
    11ac:	b1 ec       	ldi	r27, 0xC1	; 193
    11ae:	80 93 6d 02 	sts	0x026D, r24
    11b2:	90 93 6e 02 	sts	0x026E, r25
    11b6:	a0 93 6f 02 	sts	0x026F, r26
    11ba:	b0 93 70 02 	sts	0x0270, r27
	}
	
	ch->D_err = (ch->TempError[CtrlErrorIdx] - ch->TempError[CtrlErrorHistIdx]) * ch->Dgain; // D error
    11be:	e0 91 27 03 	lds	r30, 0x0327
    11c2:	f0 91 28 03 	lds	r31, 0x0328
    11c6:	c1 e6       	ldi	r28, 0x61	; 97
    11c8:	d2 e0       	ldi	r29, 0x02	; 2
    11ca:	ee 0f       	add	r30, r30
    11cc:	ff 1f       	adc	r31, r31
    11ce:	ee 0f       	add	r30, r30
    11d0:	ff 1f       	adc	r31, r31
    11d2:	e7 57       	subi	r30, 0x77	; 119
    11d4:	fd 4f       	sbci	r31, 0xFD	; 253
    11d6:	60 81       	ld	r22, Z
    11d8:	71 81       	ldd	r23, Z+1	; 0x01
    11da:	82 81       	ldd	r24, Z+2	; 0x02
    11dc:	93 81       	ldd	r25, Z+3	; 0x03
    11de:	e0 91 02 01 	lds	r30, 0x0102
    11e2:	f0 91 03 01 	lds	r31, 0x0103
    11e6:	ee 0f       	add	r30, r30
    11e8:	ff 1f       	adc	r31, r31
    11ea:	ee 0f       	add	r30, r30
    11ec:	ff 1f       	adc	r31, r31
    11ee:	e7 57       	subi	r30, 0x77	; 119
    11f0:	fd 4f       	sbci	r31, 0xFD	; 253
    11f2:	20 81       	ld	r18, Z
    11f4:	31 81       	ldd	r19, Z+1	; 0x01
    11f6:	42 81       	ldd	r20, Z+2	; 0x02
    11f8:	53 81       	ldd	r21, Z+3	; 0x03
    11fa:	cc a0       	ldd	r12, Y+36	; 0x24
    11fc:	dd a0       	ldd	r13, Y+37	; 0x25
    11fe:	ee a0       	ldd	r14, Y+38	; 0x26
    1200:	ff a0       	ldd	r15, Y+39	; 0x27
    1202:	0e 94 1d 22 	call	0x443a	; 0x443a <__subsf3>
    1206:	a7 01       	movw	r20, r14
    1208:	96 01       	movw	r18, r12
    120a:	0e 94 6d 23 	call	0x46da	; 0x46da <__mulsf3>
    120e:	68 8b       	std	Y+16, r22	; 0x10
    1210:	79 8b       	std	Y+17, r23	; 0x11
    1212:	8a 8b       	std	Y+18, r24	; 0x12
    1214:	9b 8b       	std	Y+19, r25	; 0x13
	
	ch->Control_PID = ch->P_err + ch->I_err + ch->D_err;
    1216:	68 85       	ldd	r22, Y+8	; 0x08
    1218:	79 85       	ldd	r23, Y+9	; 0x09
    121a:	8a 85       	ldd	r24, Y+10	; 0x0a
    121c:	9b 85       	ldd	r25, Y+11	; 0x0b
    121e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1220:	3d 85       	ldd	r19, Y+13	; 0x0d
    1222:	4e 85       	ldd	r20, Y+14	; 0x0e
    1224:	5f 85       	ldd	r21, Y+15	; 0x0f
    1226:	c8 88       	ldd	r12, Y+16	; 0x10
    1228:	d9 88       	ldd	r13, Y+17	; 0x11
    122a:	ea 88       	ldd	r14, Y+18	; 0x12
    122c:	fb 88       	ldd	r15, Y+19	; 0x13
    122e:	0e 94 1e 22 	call	0x443c	; 0x443c <__addsf3>
    1232:	a7 01       	movw	r20, r14
    1234:	96 01       	movw	r18, r12
    1236:	0e 94 1e 22 	call	0x443c	; 0x443c <__addsf3>
    123a:	68 8f       	std	Y+24, r22	; 0x18
    123c:	79 8f       	std	Y+25, r23	; 0x19
    123e:	8a 8f       	std	Y+26, r24	; 0x1a
    1240:	9b 8f       	std	Y+27, r25	; 0x1b
	ch->Control = ch->Control_PID; // + ch->TempSetPoint * (float)0.21 - 5;
    1242:	88 8d       	ldd	r24, Y+24	; 0x18
    1244:	99 8d       	ldd	r25, Y+25	; 0x19
    1246:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1248:	bb 8d       	ldd	r27, Y+27	; 0x1b
    124a:	8c 8b       	std	Y+20, r24	; 0x14
    124c:	9d 8b       	std	Y+21, r25	; 0x15
    124e:	ae 8b       	std	Y+22, r26	; 0x16
    1250:	bf 8b       	std	Y+23, r27	; 0x17
	ch->pwm = (round(ch->Control));
    1252:	6c 89       	ldd	r22, Y+20	; 0x14
    1254:	7d 89       	ldd	r23, Y+21	; 0x15
    1256:	8e 89       	ldd	r24, Y+22	; 0x16
    1258:	9f 89       	ldd	r25, Y+23	; 0x17
    125a:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <round>
    125e:	0e 94 86 22 	call	0x450c	; 0x450c <__fixsfsi>
    1262:	70 93 c2 02 	sts	0x02C2, r23
    1266:	60 93 c1 02 	sts	0x02C1, r22
	
	if(fabs(ch->TempError[CtrlErrorIdx]) > integralErrorActiveWindow)
    126a:	e0 91 27 03 	lds	r30, 0x0327
    126e:	f0 91 28 03 	lds	r31, 0x0328
    1272:	ee 0f       	add	r30, r30
    1274:	ff 1f       	adc	r31, r31
    1276:	ee 0f       	add	r30, r30
    1278:	ff 1f       	adc	r31, r31
    127a:	e7 57       	subi	r30, 0x77	; 119
    127c:	fd 4f       	sbci	r31, 0xFD	; 253
    127e:	80 81       	ld	r24, Z
    1280:	91 81       	ldd	r25, Z+1	; 0x01
    1282:	a2 81       	ldd	r26, Z+2	; 0x02
    1284:	b3 81       	ldd	r27, Z+3	; 0x03
    1286:	bc 01       	movw	r22, r24
    1288:	cd 01       	movw	r24, r26
    128a:	9f 77       	andi	r25, 0x7F	; 127
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	40 ea       	ldi	r20, 0xA0	; 160
    1292:	50 e4       	ldi	r21, 0x40	; 64
    1294:	0e 94 69 23 	call	0x46d2	; 0x46d2 <__gesf2>
    1298:	18 16       	cp	r1, r24
    129a:	44 f4       	brge	.+16     	; 0x12ac <__vector_7+0x5f0>
	{
		ch->I_err = 0;														// Avoid integral wind-up
    129c:	10 92 6d 02 	sts	0x026D, r1
    12a0:	10 92 6e 02 	sts	0x026E, r1
    12a4:	10 92 6f 02 	sts	0x026F, r1
    12a8:	10 92 70 02 	sts	0x0270, r1
	}
	
	if(fabs(ch->TempError[CtrlErrorIdx]) <= ch->tempErrorWin)				// Temperature settle window
    12ac:	e0 91 27 03 	lds	r30, 0x0327
    12b0:	f0 91 28 03 	lds	r31, 0x0328
    12b4:	ee 0f       	add	r30, r30
    12b6:	ff 1f       	adc	r31, r31
    12b8:	ee 0f       	add	r30, r30
    12ba:	ff 1f       	adc	r31, r31
    12bc:	e7 57       	subi	r30, 0x77	; 119
    12be:	fd 4f       	sbci	r31, 0xFD	; 253
    12c0:	80 81       	ld	r24, Z
    12c2:	91 81       	ldd	r25, Z+1	; 0x01
    12c4:	a2 81       	ldd	r26, Z+2	; 0x02
    12c6:	b3 81       	ldd	r27, Z+3	; 0x03
    12c8:	20 91 b5 02 	lds	r18, 0x02B5
    12cc:	30 91 b6 02 	lds	r19, 0x02B6
    12d0:	40 91 b7 02 	lds	r20, 0x02B7
    12d4:	50 91 b8 02 	lds	r21, 0x02B8
    12d8:	bc 01       	movw	r22, r24
    12da:	cd 01       	movw	r24, r26
    12dc:	9f 77       	andi	r25, 0x7F	; 127
    12de:	0e 94 82 22 	call	0x4504	; 0x4504 <__cmpsf2>
    12e2:	18 16       	cp	r1, r24
    12e4:	14 f1       	brlt	.+68     	; 0x132a <__vector_7+0x66e>
	{
		ch->tempSettleCnt ++;
    12e6:	e9 eb       	ldi	r30, 0xB9	; 185
    12e8:	f2 e0       	ldi	r31, 0x02	; 2
    12ea:	80 81       	ld	r24, Z
    12ec:	91 81       	ldd	r25, Z+1	; 0x01
    12ee:	01 96       	adiw	r24, 0x01	; 1
    12f0:	91 83       	std	Z+1, r25	; 0x01
    12f2:	80 83       	st	Z, r24
		if(ch->tempSettleCnt >= (int)(ch->tempSettleTime * 61))
    12f4:	20 81       	ld	r18, Z
    12f6:	31 81       	ldd	r19, Z+1	; 0x01
    12f8:	40 91 bb 02 	lds	r20, 0x02BB
    12fc:	50 91 bc 02 	lds	r21, 0x02BC
    1300:	6d e3       	ldi	r22, 0x3D	; 61
    1302:	64 9f       	mul	r22, r20
    1304:	c0 01       	movw	r24, r0
    1306:	65 9f       	mul	r22, r21
    1308:	90 0d       	add	r25, r0
    130a:	11 24       	eor	r1, r1
    130c:	28 17       	cp	r18, r24
    130e:	39 07       	cpc	r19, r25
    1310:	a4 f0       	brlt	.+40     	; 0x133a <__vector_7+0x67e>
		{
			ch->tempStable = 1;
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	90 93 be 02 	sts	0x02BE, r25
    131a:	80 93 bd 02 	sts	0x02BD, r24
			ch->tempSettleCnt --;
    131e:	80 81       	ld	r24, Z
    1320:	91 81       	ldd	r25, Z+1	; 0x01
    1322:	01 97       	sbiw	r24, 0x01	; 1
    1324:	91 83       	std	Z+1, r25	; 0x01
    1326:	80 83       	st	Z, r24
    1328:	08 c0       	rjmp	.+16     	; 0x133a <__vector_7+0x67e>
		}			
	}
	else
	{
		ch->tempSettleCnt = 0;
    132a:	10 92 ba 02 	sts	0x02BA, r1
    132e:	10 92 b9 02 	sts	0x02B9, r1
		ch->tempStable = 0;
    1332:	10 92 be 02 	sts	0x02BE, r1
    1336:	10 92 bd 02 	sts	0x02BD, r1
		case 2:
		PORTD &= 0b11011111;	// Set CS2 low
		break;
				
		case 3:
		PORTD &= 0b10111111;	// Set CS3 low
    133a:	5e 98       	cbi	0x0b, 6	; 11
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    1340:	0d b4       	in	r0, 0x2d	; 45
    1342:	07 fe       	sbrs	r0, 7
    1344:	fd cf       	rjmp	.-6      	; 0x1340 <__vector_7+0x684>
	byteword=SPDR;				//just for clearing SPIF
    1346:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
    1348:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    134a:	0d b4       	in	r0, 0x2d	; 45
    134c:	07 fe       	sbrs	r0, 7
    134e:	fd cf       	rjmp	.-6      	; 0x134a <__vector_7+0x68e>
	byteword=SPDR;
    1350:	9e b5       	in	r25, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
    1352:	8b b1       	in	r24, 0x0b	; 11
    1354:	80 6f       	ori	r24, 0xF0	; 240
    1356:	8b b9       	out	0x0b, r24	; 11
		case 2:
		PORTD &= 0b11011111;	// Set CS2 low
		break;
				
		case 3:
		PORTD &= 0b10111111;	// Set CS3 low
    1358:	5e 98       	cbi	0x0b, 6	; 11
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
    135a:	82 e0       	ldi	r24, 0x02	; 2
    135c:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    135e:	0d b4       	in	r0, 0x2d	; 45
    1360:	07 fe       	sbrs	r0, 7
    1362:	fd cf       	rjmp	.-6      	; 0x135e <__vector_7+0x6a2>
	byteword=SPDR;				//just for clearing SPIF
    1364:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
    1366:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    1368:	0d b4       	in	r0, 0x2d	; 45
    136a:	07 fe       	sbrs	r0, 7
    136c:	fd cf       	rjmp	.-6      	; 0x1368 <__vector_7+0x6ac>
	byteword=SPDR;
    136e:	6e b5       	in	r22, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
    1370:	8b b1       	in	r24, 0x0b	; 11
    1372:	80 6f       	ori	r24, 0xF0	; 240
    1374:	8b b9       	out	0x0b, r24	; 11
	uint8_t u8_msb = 0;
	uint8_t u8_lsb = 0;
	
	u8_msb = SPIread(0x01, ch);
	u8_lsb = SPIread(0x02, ch);
	adc_code = (((u8_msb << 8) | u8_lsb) >> 1);
    1376:	70 e0       	ldi	r23, 0x00	; 0
    1378:	79 2b       	or	r23, r25
    137a:	75 95       	asr	r23
    137c:	67 95       	ror	r22
	return ((float)adc_code / 32.0 - 256.0);
    137e:	07 2e       	mov	r0, r23
    1380:	00 0c       	add	r0, r0
    1382:	88 0b       	sbc	r24, r24
    1384:	99 0b       	sbc	r25, r25
    1386:	0e 94 b9 22 	call	0x4572	; 0x4572 <__floatsisf>
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	40 e0       	ldi	r20, 0x00	; 0
    1390:	5d e3       	ldi	r21, 0x3D	; 61
    1392:	0e 94 6d 23 	call	0x46da	; 0x46da <__mulsf3>
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	40 e8       	ldi	r20, 0x80	; 128
    139c:	53 e4       	ldi	r21, 0x43	; 67
    139e:	0e 94 1d 22 	call	0x443a	; 0x443a <__subsf3>
	PORTD &= 0b11110111;						// Turn off LED on PCB (Irq call freq: 16MHz / 1024 / 255 = 61.3 Hz )
}

static inline void PIDctrl(channel *ch, int tempSensor)
{
	ch->TempSensor = ReadTempSensor(tempSensor);
    13a2:	ee ef       	ldi	r30, 0xFE	; 254
    13a4:	f1 e0       	ldi	r31, 0x01	; 1
    13a6:	64 83       	std	Z+4, r22	; 0x04
    13a8:	75 83       	std	Z+5, r23	; 0x05
    13aa:	86 83       	std	Z+6, r24	; 0x06
    13ac:	97 83       	std	Z+7, r25	; 0x07
	if(ch->TempSensor > (float)maxAllowedTemp)								// Max temperature limit
    13ae:	64 81       	ldd	r22, Z+4	; 0x04
    13b0:	75 81       	ldd	r23, Z+5	; 0x05
    13b2:	86 81       	ldd	r24, Z+6	; 0x06
    13b4:	97 81       	ldd	r25, Z+7	; 0x07
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	40 ef       	ldi	r20, 0xF0	; 240
    13bc:	52 e4       	ldi	r21, 0x42	; 66
    13be:	0e 94 69 23 	call	0x46d2	; 0x46d2 <__gesf2>
    13c2:	18 16       	cp	r1, r24
    13c4:	2c f4       	brge	.+10     	; 0x13d0 <__vector_7+0x714>
	{
		ch->heaterEnable = false;
    13c6:	10 92 60 02 	sts	0x0260, r1
		PORTC &= allHeaterOff;
    13ca:	88 b1       	in	r24, 0x08	; 8
    13cc:	80 7f       	andi	r24, 0xF0	; 240
    13ce:	88 b9       	out	0x08, r24	; 8
	}

	ch->TempError[CtrlErrorIdx] = ch->TempSetPoint - ch->TempSensor;		// Control error
    13d0:	00 91 27 03 	lds	r16, 0x0327
    13d4:	10 91 28 03 	lds	r17, 0x0328
    13d8:	ce ef       	ldi	r28, 0xFE	; 254
    13da:	d1 e0       	ldi	r29, 0x01	; 1
    13dc:	68 81       	ld	r22, Y
    13de:	79 81       	ldd	r23, Y+1	; 0x01
    13e0:	8a 81       	ldd	r24, Y+2	; 0x02
    13e2:	9b 81       	ldd	r25, Y+3	; 0x03
    13e4:	2c 81       	ldd	r18, Y+4	; 0x04
    13e6:	3d 81       	ldd	r19, Y+5	; 0x05
    13e8:	4e 81       	ldd	r20, Y+6	; 0x06
    13ea:	5f 81       	ldd	r21, Y+7	; 0x07
    13ec:	0e 94 1d 22 	call	0x443a	; 0x443a <__subsf3>
    13f0:	00 0f       	add	r16, r16
    13f2:	11 1f       	adc	r17, r17
    13f4:	00 0f       	add	r16, r16
    13f6:	11 1f       	adc	r17, r17
    13f8:	f8 01       	movw	r30, r16
    13fa:	ea 5d       	subi	r30, 0xDA	; 218
    13fc:	fd 4f       	sbci	r31, 0xFD	; 253
    13fe:	60 83       	st	Z, r22
    1400:	71 83       	std	Z+1, r23	; 0x01
    1402:	82 83       	std	Z+2, r24	; 0x02
    1404:	93 83       	std	Z+3, r25	; 0x03
	
	ch->P_err = ch->TempError[CtrlErrorIdx] * ch->Pgain;					// P error
    1406:	e0 91 27 03 	lds	r30, 0x0327
    140a:	f0 91 28 03 	lds	r31, 0x0328
    140e:	ee 0f       	add	r30, r30
    1410:	ff 1f       	adc	r31, r31
    1412:	ee 0f       	add	r30, r30
    1414:	ff 1f       	adc	r31, r31
    1416:	ea 5d       	subi	r30, 0xDA	; 218
    1418:	fd 4f       	sbci	r31, 0xFD	; 253
    141a:	60 81       	ld	r22, Z
    141c:	71 81       	ldd	r23, Z+1	; 0x01
    141e:	82 81       	ldd	r24, Z+2	; 0x02
    1420:	93 81       	ldd	r25, Z+3	; 0x03
    1422:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1424:	3d 8d       	ldd	r19, Y+29	; 0x1d
    1426:	4e 8d       	ldd	r20, Y+30	; 0x1e
    1428:	5f 8d       	ldd	r21, Y+31	; 0x1f
    142a:	0e 94 6d 23 	call	0x46da	; 0x46da <__mulsf3>
    142e:	68 87       	std	Y+8, r22	; 0x08
    1430:	79 87       	std	Y+9, r23	; 0x09
    1432:	8a 87       	std	Y+10, r24	; 0x0a
    1434:	9b 87       	std	Y+11, r25	; 0x0b
	ch->I_err = ch->I_err + (ch->TempError[CtrlErrorIdx] * ch->Igain);		// I error
    1436:	cc 84       	ldd	r12, Y+12	; 0x0c
    1438:	dd 84       	ldd	r13, Y+13	; 0x0d
    143a:	ee 84       	ldd	r14, Y+14	; 0x0e
    143c:	ff 84       	ldd	r15, Y+15	; 0x0f
    143e:	e0 91 27 03 	lds	r30, 0x0327
    1442:	f0 91 28 03 	lds	r31, 0x0328
    1446:	ee 0f       	add	r30, r30
    1448:	ff 1f       	adc	r31, r31
    144a:	ee 0f       	add	r30, r30
    144c:	ff 1f       	adc	r31, r31
    144e:	ea 5d       	subi	r30, 0xDA	; 218
    1450:	fd 4f       	sbci	r31, 0xFD	; 253
    1452:	60 81       	ld	r22, Z
    1454:	71 81       	ldd	r23, Z+1	; 0x01
    1456:	82 81       	ldd	r24, Z+2	; 0x02
    1458:	93 81       	ldd	r25, Z+3	; 0x03
    145a:	28 a1       	ldd	r18, Y+32	; 0x20
    145c:	39 a1       	ldd	r19, Y+33	; 0x21
    145e:	4a a1       	ldd	r20, Y+34	; 0x22
    1460:	5b a1       	ldd	r21, Y+35	; 0x23
    1462:	0e 94 6d 23 	call	0x46da	; 0x46da <__mulsf3>
    1466:	9b 01       	movw	r18, r22
    1468:	ac 01       	movw	r20, r24
    146a:	c7 01       	movw	r24, r14
    146c:	b6 01       	movw	r22, r12
    146e:	0e 94 1e 22 	call	0x443c	; 0x443c <__addsf3>
    1472:	6c 87       	std	Y+12, r22	; 0x0c
    1474:	7d 87       	std	Y+13, r23	; 0x0d
    1476:	8e 87       	std	Y+14, r24	; 0x0e
    1478:	9f 87       	std	Y+15, r25	; 0x0f
	if(ch->I_err > integralErrorLimit)
    147a:	6c 85       	ldd	r22, Y+12	; 0x0c
    147c:	7d 85       	ldd	r23, Y+13	; 0x0d
    147e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1480:	9f 85       	ldd	r25, Y+15	; 0x0f
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	40 e2       	ldi	r20, 0x20	; 32
    1488:	51 e4       	ldi	r21, 0x41	; 65
    148a:	0e 94 69 23 	call	0x46d2	; 0x46d2 <__gesf2>
    148e:	18 16       	cp	r1, r24
    1490:	64 f4       	brge	.+24     	; 0x14aa <__vector_7+0x7ee>
	{
		ch->I_err = integralErrorLimit;
    1492:	80 e0       	ldi	r24, 0x00	; 0
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	a0 e2       	ldi	r26, 0x20	; 32
    1498:	b1 e4       	ldi	r27, 0x41	; 65
    149a:	80 93 0a 02 	sts	0x020A, r24
    149e:	90 93 0b 02 	sts	0x020B, r25
    14a2:	a0 93 0c 02 	sts	0x020C, r26
    14a6:	b0 93 0d 02 	sts	0x020D, r27
	}
	if(ch->I_err < -integralErrorLimit)
    14aa:	60 91 0a 02 	lds	r22, 0x020A
    14ae:	70 91 0b 02 	lds	r23, 0x020B
    14b2:	80 91 0c 02 	lds	r24, 0x020C
    14b6:	90 91 0d 02 	lds	r25, 0x020D
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	40 e2       	ldi	r20, 0x20	; 32
    14c0:	51 ec       	ldi	r21, 0xC1	; 193
    14c2:	0e 94 82 22 	call	0x4504	; 0x4504 <__cmpsf2>
    14c6:	88 23       	and	r24, r24
    14c8:	64 f4       	brge	.+24     	; 0x14e2 <__vector_7+0x826>
	{
		ch->I_err = -integralErrorLimit;
    14ca:	80 e0       	ldi	r24, 0x00	; 0
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	a0 e2       	ldi	r26, 0x20	; 32
    14d0:	b1 ec       	ldi	r27, 0xC1	; 193
    14d2:	80 93 0a 02 	sts	0x020A, r24
    14d6:	90 93 0b 02 	sts	0x020B, r25
    14da:	a0 93 0c 02 	sts	0x020C, r26
    14de:	b0 93 0d 02 	sts	0x020D, r27
	}
	
	ch->D_err = (ch->TempError[CtrlErrorIdx] - ch->TempError[CtrlErrorHistIdx]) * ch->Dgain; // D error
    14e2:	e0 91 27 03 	lds	r30, 0x0327
    14e6:	f0 91 28 03 	lds	r31, 0x0328
    14ea:	ce ef       	ldi	r28, 0xFE	; 254
    14ec:	d1 e0       	ldi	r29, 0x01	; 1
    14ee:	ee 0f       	add	r30, r30
    14f0:	ff 1f       	adc	r31, r31
    14f2:	ee 0f       	add	r30, r30
    14f4:	ff 1f       	adc	r31, r31
    14f6:	ea 5d       	subi	r30, 0xDA	; 218
    14f8:	fd 4f       	sbci	r31, 0xFD	; 253
    14fa:	60 81       	ld	r22, Z
    14fc:	71 81       	ldd	r23, Z+1	; 0x01
    14fe:	82 81       	ldd	r24, Z+2	; 0x02
    1500:	93 81       	ldd	r25, Z+3	; 0x03
    1502:	e0 91 02 01 	lds	r30, 0x0102
    1506:	f0 91 03 01 	lds	r31, 0x0103
    150a:	ee 0f       	add	r30, r30
    150c:	ff 1f       	adc	r31, r31
    150e:	ee 0f       	add	r30, r30
    1510:	ff 1f       	adc	r31, r31
    1512:	ea 5d       	subi	r30, 0xDA	; 218
    1514:	fd 4f       	sbci	r31, 0xFD	; 253
    1516:	20 81       	ld	r18, Z
    1518:	31 81       	ldd	r19, Z+1	; 0x01
    151a:	42 81       	ldd	r20, Z+2	; 0x02
    151c:	53 81       	ldd	r21, Z+3	; 0x03
    151e:	cc a0       	ldd	r12, Y+36	; 0x24
    1520:	dd a0       	ldd	r13, Y+37	; 0x25
    1522:	ee a0       	ldd	r14, Y+38	; 0x26
    1524:	ff a0       	ldd	r15, Y+39	; 0x27
    1526:	0e 94 1d 22 	call	0x443a	; 0x443a <__subsf3>
    152a:	a7 01       	movw	r20, r14
    152c:	96 01       	movw	r18, r12
    152e:	0e 94 6d 23 	call	0x46da	; 0x46da <__mulsf3>
    1532:	68 8b       	std	Y+16, r22	; 0x10
    1534:	79 8b       	std	Y+17, r23	; 0x11
    1536:	8a 8b       	std	Y+18, r24	; 0x12
    1538:	9b 8b       	std	Y+19, r25	; 0x13
	
	ch->Control_PID = ch->P_err + ch->I_err + ch->D_err;
    153a:	68 85       	ldd	r22, Y+8	; 0x08
    153c:	79 85       	ldd	r23, Y+9	; 0x09
    153e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1540:	9b 85       	ldd	r25, Y+11	; 0x0b
    1542:	2c 85       	ldd	r18, Y+12	; 0x0c
    1544:	3d 85       	ldd	r19, Y+13	; 0x0d
    1546:	4e 85       	ldd	r20, Y+14	; 0x0e
    1548:	5f 85       	ldd	r21, Y+15	; 0x0f
    154a:	c8 88       	ldd	r12, Y+16	; 0x10
    154c:	d9 88       	ldd	r13, Y+17	; 0x11
    154e:	ea 88       	ldd	r14, Y+18	; 0x12
    1550:	fb 88       	ldd	r15, Y+19	; 0x13
    1552:	0e 94 1e 22 	call	0x443c	; 0x443c <__addsf3>
    1556:	a7 01       	movw	r20, r14
    1558:	96 01       	movw	r18, r12
    155a:	0e 94 1e 22 	call	0x443c	; 0x443c <__addsf3>
    155e:	68 8f       	std	Y+24, r22	; 0x18
    1560:	79 8f       	std	Y+25, r23	; 0x19
    1562:	8a 8f       	std	Y+26, r24	; 0x1a
    1564:	9b 8f       	std	Y+27, r25	; 0x1b
	ch->Control = ch->Control_PID; // + ch->TempSetPoint * (float)0.21 - 5;
    1566:	88 8d       	ldd	r24, Y+24	; 0x18
    1568:	99 8d       	ldd	r25, Y+25	; 0x19
    156a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    156c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    156e:	8c 8b       	std	Y+20, r24	; 0x14
    1570:	9d 8b       	std	Y+21, r25	; 0x15
    1572:	ae 8b       	std	Y+22, r26	; 0x16
    1574:	bf 8b       	std	Y+23, r27	; 0x17
	ch->pwm = (round(ch->Control));
    1576:	6c 89       	ldd	r22, Y+20	; 0x14
    1578:	7d 89       	ldd	r23, Y+21	; 0x15
    157a:	8e 89       	ldd	r24, Y+22	; 0x16
    157c:	9f 89       	ldd	r25, Y+23	; 0x17
    157e:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <round>
    1582:	0e 94 86 22 	call	0x450c	; 0x450c <__fixsfsi>
    1586:	70 93 5f 02 	sts	0x025F, r23
    158a:	60 93 5e 02 	sts	0x025E, r22
	
	if(fabs(ch->TempError[CtrlErrorIdx]) > integralErrorActiveWindow)
    158e:	e0 91 27 03 	lds	r30, 0x0327
    1592:	f0 91 28 03 	lds	r31, 0x0328
    1596:	ee 0f       	add	r30, r30
    1598:	ff 1f       	adc	r31, r31
    159a:	ee 0f       	add	r30, r30
    159c:	ff 1f       	adc	r31, r31
    159e:	ea 5d       	subi	r30, 0xDA	; 218
    15a0:	fd 4f       	sbci	r31, 0xFD	; 253
    15a2:	80 81       	ld	r24, Z
    15a4:	91 81       	ldd	r25, Z+1	; 0x01
    15a6:	a2 81       	ldd	r26, Z+2	; 0x02
    15a8:	b3 81       	ldd	r27, Z+3	; 0x03
    15aa:	bc 01       	movw	r22, r24
    15ac:	cd 01       	movw	r24, r26
    15ae:	9f 77       	andi	r25, 0x7F	; 127
    15b0:	20 e0       	ldi	r18, 0x00	; 0
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	40 ea       	ldi	r20, 0xA0	; 160
    15b6:	50 e4       	ldi	r21, 0x40	; 64
    15b8:	0e 94 69 23 	call	0x46d2	; 0x46d2 <__gesf2>
    15bc:	18 16       	cp	r1, r24
    15be:	44 f4       	brge	.+16     	; 0x15d0 <__vector_7+0x914>
	{
		ch->I_err = 0;														// Avoid integral wind-up
    15c0:	10 92 0a 02 	sts	0x020A, r1
    15c4:	10 92 0b 02 	sts	0x020B, r1
    15c8:	10 92 0c 02 	sts	0x020C, r1
    15cc:	10 92 0d 02 	sts	0x020D, r1
	}
	
	if(fabs(ch->TempError[CtrlErrorIdx]) <= ch->tempErrorWin)				// Temperature settle window
    15d0:	e0 91 27 03 	lds	r30, 0x0327
    15d4:	f0 91 28 03 	lds	r31, 0x0328
    15d8:	ee 0f       	add	r30, r30
    15da:	ff 1f       	adc	r31, r31
    15dc:	ee 0f       	add	r30, r30
    15de:	ff 1f       	adc	r31, r31
    15e0:	ea 5d       	subi	r30, 0xDA	; 218
    15e2:	fd 4f       	sbci	r31, 0xFD	; 253
    15e4:	80 81       	ld	r24, Z
    15e6:	91 81       	ldd	r25, Z+1	; 0x01
    15e8:	a2 81       	ldd	r26, Z+2	; 0x02
    15ea:	b3 81       	ldd	r27, Z+3	; 0x03
    15ec:	20 91 52 02 	lds	r18, 0x0252
    15f0:	30 91 53 02 	lds	r19, 0x0253
    15f4:	40 91 54 02 	lds	r20, 0x0254
    15f8:	50 91 55 02 	lds	r21, 0x0255
    15fc:	bc 01       	movw	r22, r24
    15fe:	cd 01       	movw	r24, r26
    1600:	9f 77       	andi	r25, 0x7F	; 127
    1602:	0e 94 82 22 	call	0x4504	; 0x4504 <__cmpsf2>
    1606:	18 16       	cp	r1, r24
    1608:	14 f1       	brlt	.+68     	; 0x164e <__vector_7+0x992>
	{
		ch->tempSettleCnt ++;
    160a:	e6 e5       	ldi	r30, 0x56	; 86
    160c:	f2 e0       	ldi	r31, 0x02	; 2
    160e:	80 81       	ld	r24, Z
    1610:	91 81       	ldd	r25, Z+1	; 0x01
    1612:	01 96       	adiw	r24, 0x01	; 1
    1614:	91 83       	std	Z+1, r25	; 0x01
    1616:	80 83       	st	Z, r24
		if(ch->tempSettleCnt >= (int)(ch->tempSettleTime * 61))
    1618:	20 81       	ld	r18, Z
    161a:	31 81       	ldd	r19, Z+1	; 0x01
    161c:	40 91 58 02 	lds	r20, 0x0258
    1620:	50 91 59 02 	lds	r21, 0x0259
    1624:	6d e3       	ldi	r22, 0x3D	; 61
    1626:	64 9f       	mul	r22, r20
    1628:	c0 01       	movw	r24, r0
    162a:	65 9f       	mul	r22, r21
    162c:	90 0d       	add	r25, r0
    162e:	11 24       	eor	r1, r1
    1630:	28 17       	cp	r18, r24
    1632:	39 07       	cpc	r19, r25
    1634:	a4 f0       	brlt	.+40     	; 0x165e <__vector_7+0x9a2>
		{
			ch->tempStable = 1;
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	90 93 5b 02 	sts	0x025B, r25
    163e:	80 93 5a 02 	sts	0x025A, r24
			ch->tempSettleCnt --;
    1642:	80 81       	ld	r24, Z
    1644:	91 81       	ldd	r25, Z+1	; 0x01
    1646:	01 97       	sbiw	r24, 0x01	; 1
    1648:	91 83       	std	Z+1, r25	; 0x01
    164a:	80 83       	st	Z, r24
    164c:	08 c0       	rjmp	.+16     	; 0x165e <__vector_7+0x9a2>
		}			
	}
	else
	{
		ch->tempSettleCnt = 0;
    164e:	10 92 57 02 	sts	0x0257, r1
    1652:	10 92 56 02 	sts	0x0256, r1
		ch->tempStable = 0;
    1656:	10 92 5b 02 	sts	0x025B, r1
    165a:	10 92 5a 02 	sts	0x025A, r1
		case 3:
		PORTD &= 0b10111111;	// Set CS3 low
		break;
						
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
    165e:	5f 98       	cbi	0x0b, 7	; 11
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    1664:	0d b4       	in	r0, 0x2d	; 45
    1666:	07 fe       	sbrs	r0, 7
    1668:	fd cf       	rjmp	.-6      	; 0x1664 <__vector_7+0x9a8>
	byteword=SPDR;				//just for clearing SPIF
    166a:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
    166c:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    166e:	0d b4       	in	r0, 0x2d	; 45
    1670:	07 fe       	sbrs	r0, 7
    1672:	fd cf       	rjmp	.-6      	; 0x166e <__vector_7+0x9b2>
	byteword=SPDR;
    1674:	9e b5       	in	r25, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
    1676:	8b b1       	in	r24, 0x0b	; 11
    1678:	80 6f       	ori	r24, 0xF0	; 240
    167a:	8b b9       	out	0x0b, r24	; 11
		case 3:
		PORTD &= 0b10111111;	// Set CS3 low
		break;
						
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
    167c:	5f 98       	cbi	0x0b, 7	; 11
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
    167e:	82 e0       	ldi	r24, 0x02	; 2
    1680:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    1682:	0d b4       	in	r0, 0x2d	; 45
    1684:	07 fe       	sbrs	r0, 7
    1686:	fd cf       	rjmp	.-6      	; 0x1682 <__vector_7+0x9c6>
	byteword=SPDR;				//just for clearing SPIF
    1688:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
    168a:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    168c:	0d b4       	in	r0, 0x2d	; 45
    168e:	07 fe       	sbrs	r0, 7
    1690:	fd cf       	rjmp	.-6      	; 0x168c <__vector_7+0x9d0>
	byteword=SPDR;
    1692:	6e b5       	in	r22, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
    1694:	8b b1       	in	r24, 0x0b	; 11
    1696:	80 6f       	ori	r24, 0xF0	; 240
    1698:	8b b9       	out	0x0b, r24	; 11
	uint8_t u8_msb = 0;
	uint8_t u8_lsb = 0;
	
	u8_msb = SPIread(0x01, ch);
	u8_lsb = SPIread(0x02, ch);
	adc_code = (((u8_msb << 8) | u8_lsb) >> 1);
    169a:	70 e0       	ldi	r23, 0x00	; 0
    169c:	79 2b       	or	r23, r25
    169e:	75 95       	asr	r23
    16a0:	67 95       	ror	r22
	return ((float)adc_code / 32.0 - 256.0);
    16a2:	07 2e       	mov	r0, r23
    16a4:	00 0c       	add	r0, r0
    16a6:	88 0b       	sbc	r24, r24
    16a8:	99 0b       	sbc	r25, r25
    16aa:	0e 94 b9 22 	call	0x4572	; 0x4572 <__floatsisf>
    16ae:	20 e0       	ldi	r18, 0x00	; 0
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	40 e0       	ldi	r20, 0x00	; 0
    16b4:	5d e3       	ldi	r21, 0x3D	; 61
    16b6:	0e 94 6d 23 	call	0x46da	; 0x46da <__mulsf3>
    16ba:	20 e0       	ldi	r18, 0x00	; 0
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	40 e8       	ldi	r20, 0x80	; 128
    16c0:	53 e4       	ldi	r21, 0x43	; 67
    16c2:	0e 94 1d 22 	call	0x443a	; 0x443a <__subsf3>
	PORTD &= 0b11110111;						// Turn off LED on PCB (Irq call freq: 16MHz / 1024 / 255 = 61.3 Hz )
}

static inline void PIDctrl(channel *ch, int tempSensor)
{
	ch->TempSensor = ReadTempSensor(tempSensor);
    16c6:	eb e9       	ldi	r30, 0x9B	; 155
    16c8:	f1 e0       	ldi	r31, 0x01	; 1
    16ca:	64 83       	std	Z+4, r22	; 0x04
    16cc:	75 83       	std	Z+5, r23	; 0x05
    16ce:	86 83       	std	Z+6, r24	; 0x06
    16d0:	97 83       	std	Z+7, r25	; 0x07
	if(ch->TempSensor > (float)maxAllowedTemp)								// Max temperature limit
    16d2:	64 81       	ldd	r22, Z+4	; 0x04
    16d4:	75 81       	ldd	r23, Z+5	; 0x05
    16d6:	86 81       	ldd	r24, Z+6	; 0x06
    16d8:	97 81       	ldd	r25, Z+7	; 0x07
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	40 ef       	ldi	r20, 0xF0	; 240
    16e0:	52 e4       	ldi	r21, 0x42	; 66
    16e2:	0e 94 69 23 	call	0x46d2	; 0x46d2 <__gesf2>
    16e6:	18 16       	cp	r1, r24
    16e8:	2c f4       	brge	.+10     	; 0x16f4 <__vector_7+0xa38>
	{
		ch->heaterEnable = false;
    16ea:	10 92 fd 01 	sts	0x01FD, r1
		PORTC &= allHeaterOff;
    16ee:	88 b1       	in	r24, 0x08	; 8
    16f0:	80 7f       	andi	r24, 0xF0	; 240
    16f2:	88 b9       	out	0x08, r24	; 8
	}

	ch->TempError[CtrlErrorIdx] = ch->TempSetPoint - ch->TempSensor;		// Control error
    16f4:	00 91 27 03 	lds	r16, 0x0327
    16f8:	10 91 28 03 	lds	r17, 0x0328
    16fc:	cb e9       	ldi	r28, 0x9B	; 155
    16fe:	d1 e0       	ldi	r29, 0x01	; 1
    1700:	68 81       	ld	r22, Y
    1702:	79 81       	ldd	r23, Y+1	; 0x01
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	9b 81       	ldd	r25, Y+3	; 0x03
    1708:	2c 81       	ldd	r18, Y+4	; 0x04
    170a:	3d 81       	ldd	r19, Y+5	; 0x05
    170c:	4e 81       	ldd	r20, Y+6	; 0x06
    170e:	5f 81       	ldd	r21, Y+7	; 0x07
    1710:	0e 94 1d 22 	call	0x443a	; 0x443a <__subsf3>
    1714:	00 0f       	add	r16, r16
    1716:	11 1f       	adc	r17, r17
    1718:	00 0f       	add	r16, r16
    171a:	11 1f       	adc	r17, r17
    171c:	f8 01       	movw	r30, r16
    171e:	ed 53       	subi	r30, 0x3D	; 61
    1720:	fe 4f       	sbci	r31, 0xFE	; 254
    1722:	60 83       	st	Z, r22
    1724:	71 83       	std	Z+1, r23	; 0x01
    1726:	82 83       	std	Z+2, r24	; 0x02
    1728:	93 83       	std	Z+3, r25	; 0x03
	
	ch->P_err = ch->TempError[CtrlErrorIdx] * ch->Pgain;					// P error
    172a:	e0 91 27 03 	lds	r30, 0x0327
    172e:	f0 91 28 03 	lds	r31, 0x0328
    1732:	ee 0f       	add	r30, r30
    1734:	ff 1f       	adc	r31, r31
    1736:	ee 0f       	add	r30, r30
    1738:	ff 1f       	adc	r31, r31
    173a:	ed 53       	subi	r30, 0x3D	; 61
    173c:	fe 4f       	sbci	r31, 0xFE	; 254
    173e:	60 81       	ld	r22, Z
    1740:	71 81       	ldd	r23, Z+1	; 0x01
    1742:	82 81       	ldd	r24, Z+2	; 0x02
    1744:	93 81       	ldd	r25, Z+3	; 0x03
    1746:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1748:	3d 8d       	ldd	r19, Y+29	; 0x1d
    174a:	4e 8d       	ldd	r20, Y+30	; 0x1e
    174c:	5f 8d       	ldd	r21, Y+31	; 0x1f
    174e:	0e 94 6d 23 	call	0x46da	; 0x46da <__mulsf3>
    1752:	68 87       	std	Y+8, r22	; 0x08
    1754:	79 87       	std	Y+9, r23	; 0x09
    1756:	8a 87       	std	Y+10, r24	; 0x0a
    1758:	9b 87       	std	Y+11, r25	; 0x0b
	ch->I_err = ch->I_err + (ch->TempError[CtrlErrorIdx] * ch->Igain);		// I error
    175a:	cc 84       	ldd	r12, Y+12	; 0x0c
    175c:	dd 84       	ldd	r13, Y+13	; 0x0d
    175e:	ee 84       	ldd	r14, Y+14	; 0x0e
    1760:	ff 84       	ldd	r15, Y+15	; 0x0f
    1762:	e0 91 27 03 	lds	r30, 0x0327
    1766:	f0 91 28 03 	lds	r31, 0x0328
    176a:	ee 0f       	add	r30, r30
    176c:	ff 1f       	adc	r31, r31
    176e:	ee 0f       	add	r30, r30
    1770:	ff 1f       	adc	r31, r31
    1772:	ed 53       	subi	r30, 0x3D	; 61
    1774:	fe 4f       	sbci	r31, 0xFE	; 254
    1776:	60 81       	ld	r22, Z
    1778:	71 81       	ldd	r23, Z+1	; 0x01
    177a:	82 81       	ldd	r24, Z+2	; 0x02
    177c:	93 81       	ldd	r25, Z+3	; 0x03
    177e:	28 a1       	ldd	r18, Y+32	; 0x20
    1780:	39 a1       	ldd	r19, Y+33	; 0x21
    1782:	4a a1       	ldd	r20, Y+34	; 0x22
    1784:	5b a1       	ldd	r21, Y+35	; 0x23
    1786:	0e 94 6d 23 	call	0x46da	; 0x46da <__mulsf3>
    178a:	9b 01       	movw	r18, r22
    178c:	ac 01       	movw	r20, r24
    178e:	c7 01       	movw	r24, r14
    1790:	b6 01       	movw	r22, r12
    1792:	0e 94 1e 22 	call	0x443c	; 0x443c <__addsf3>
    1796:	6c 87       	std	Y+12, r22	; 0x0c
    1798:	7d 87       	std	Y+13, r23	; 0x0d
    179a:	8e 87       	std	Y+14, r24	; 0x0e
    179c:	9f 87       	std	Y+15, r25	; 0x0f
	if(ch->I_err > integralErrorLimit)
    179e:	6c 85       	ldd	r22, Y+12	; 0x0c
    17a0:	7d 85       	ldd	r23, Y+13	; 0x0d
    17a2:	8e 85       	ldd	r24, Y+14	; 0x0e
    17a4:	9f 85       	ldd	r25, Y+15	; 0x0f
    17a6:	20 e0       	ldi	r18, 0x00	; 0
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	40 e2       	ldi	r20, 0x20	; 32
    17ac:	51 e4       	ldi	r21, 0x41	; 65
    17ae:	0e 94 69 23 	call	0x46d2	; 0x46d2 <__gesf2>
    17b2:	18 16       	cp	r1, r24
    17b4:	64 f4       	brge	.+24     	; 0x17ce <__vector_7+0xb12>
	{
		ch->I_err = integralErrorLimit;
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	a0 e2       	ldi	r26, 0x20	; 32
    17bc:	b1 e4       	ldi	r27, 0x41	; 65
    17be:	80 93 a7 01 	sts	0x01A7, r24
    17c2:	90 93 a8 01 	sts	0x01A8, r25
    17c6:	a0 93 a9 01 	sts	0x01A9, r26
    17ca:	b0 93 aa 01 	sts	0x01AA, r27
	}
	if(ch->I_err < -integralErrorLimit)
    17ce:	60 91 a7 01 	lds	r22, 0x01A7
    17d2:	70 91 a8 01 	lds	r23, 0x01A8
    17d6:	80 91 a9 01 	lds	r24, 0x01A9
    17da:	90 91 aa 01 	lds	r25, 0x01AA
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	40 e2       	ldi	r20, 0x20	; 32
    17e4:	51 ec       	ldi	r21, 0xC1	; 193
    17e6:	0e 94 82 22 	call	0x4504	; 0x4504 <__cmpsf2>
    17ea:	88 23       	and	r24, r24
    17ec:	64 f4       	brge	.+24     	; 0x1806 <__vector_7+0xb4a>
	{
		ch->I_err = -integralErrorLimit;
    17ee:	80 e0       	ldi	r24, 0x00	; 0
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	a0 e2       	ldi	r26, 0x20	; 32
    17f4:	b1 ec       	ldi	r27, 0xC1	; 193
    17f6:	80 93 a7 01 	sts	0x01A7, r24
    17fa:	90 93 a8 01 	sts	0x01A8, r25
    17fe:	a0 93 a9 01 	sts	0x01A9, r26
    1802:	b0 93 aa 01 	sts	0x01AA, r27
	}
	
	ch->D_err = (ch->TempError[CtrlErrorIdx] - ch->TempError[CtrlErrorHistIdx]) * ch->Dgain; // D error
    1806:	e0 91 27 03 	lds	r30, 0x0327
    180a:	f0 91 28 03 	lds	r31, 0x0328
    180e:	cb e9       	ldi	r28, 0x9B	; 155
    1810:	d1 e0       	ldi	r29, 0x01	; 1
    1812:	ee 0f       	add	r30, r30
    1814:	ff 1f       	adc	r31, r31
    1816:	ee 0f       	add	r30, r30
    1818:	ff 1f       	adc	r31, r31
    181a:	ed 53       	subi	r30, 0x3D	; 61
    181c:	fe 4f       	sbci	r31, 0xFE	; 254
    181e:	60 81       	ld	r22, Z
    1820:	71 81       	ldd	r23, Z+1	; 0x01
    1822:	82 81       	ldd	r24, Z+2	; 0x02
    1824:	93 81       	ldd	r25, Z+3	; 0x03
    1826:	e0 91 02 01 	lds	r30, 0x0102
    182a:	f0 91 03 01 	lds	r31, 0x0103
    182e:	ee 0f       	add	r30, r30
    1830:	ff 1f       	adc	r31, r31
    1832:	ee 0f       	add	r30, r30
    1834:	ff 1f       	adc	r31, r31
    1836:	ed 53       	subi	r30, 0x3D	; 61
    1838:	fe 4f       	sbci	r31, 0xFE	; 254
    183a:	20 81       	ld	r18, Z
    183c:	31 81       	ldd	r19, Z+1	; 0x01
    183e:	42 81       	ldd	r20, Z+2	; 0x02
    1840:	53 81       	ldd	r21, Z+3	; 0x03
    1842:	cc a0       	ldd	r12, Y+36	; 0x24
    1844:	dd a0       	ldd	r13, Y+37	; 0x25
    1846:	ee a0       	ldd	r14, Y+38	; 0x26
    1848:	ff a0       	ldd	r15, Y+39	; 0x27
    184a:	0e 94 1d 22 	call	0x443a	; 0x443a <__subsf3>
    184e:	a7 01       	movw	r20, r14
    1850:	96 01       	movw	r18, r12
    1852:	0e 94 6d 23 	call	0x46da	; 0x46da <__mulsf3>
    1856:	68 8b       	std	Y+16, r22	; 0x10
    1858:	79 8b       	std	Y+17, r23	; 0x11
    185a:	8a 8b       	std	Y+18, r24	; 0x12
    185c:	9b 8b       	std	Y+19, r25	; 0x13
	
	ch->Control_PID = ch->P_err + ch->I_err + ch->D_err;
    185e:	68 85       	ldd	r22, Y+8	; 0x08
    1860:	79 85       	ldd	r23, Y+9	; 0x09
    1862:	8a 85       	ldd	r24, Y+10	; 0x0a
    1864:	9b 85       	ldd	r25, Y+11	; 0x0b
    1866:	2c 85       	ldd	r18, Y+12	; 0x0c
    1868:	3d 85       	ldd	r19, Y+13	; 0x0d
    186a:	4e 85       	ldd	r20, Y+14	; 0x0e
    186c:	5f 85       	ldd	r21, Y+15	; 0x0f
    186e:	c8 88       	ldd	r12, Y+16	; 0x10
    1870:	d9 88       	ldd	r13, Y+17	; 0x11
    1872:	ea 88       	ldd	r14, Y+18	; 0x12
    1874:	fb 88       	ldd	r15, Y+19	; 0x13
    1876:	0e 94 1e 22 	call	0x443c	; 0x443c <__addsf3>
    187a:	a7 01       	movw	r20, r14
    187c:	96 01       	movw	r18, r12
    187e:	0e 94 1e 22 	call	0x443c	; 0x443c <__addsf3>
    1882:	68 8f       	std	Y+24, r22	; 0x18
    1884:	79 8f       	std	Y+25, r23	; 0x19
    1886:	8a 8f       	std	Y+26, r24	; 0x1a
    1888:	9b 8f       	std	Y+27, r25	; 0x1b
	ch->Control = ch->Control_PID; // + ch->TempSetPoint * (float)0.21 - 5;
    188a:	88 8d       	ldd	r24, Y+24	; 0x18
    188c:	99 8d       	ldd	r25, Y+25	; 0x19
    188e:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1890:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1892:	8c 8b       	std	Y+20, r24	; 0x14
    1894:	9d 8b       	std	Y+21, r25	; 0x15
    1896:	ae 8b       	std	Y+22, r26	; 0x16
    1898:	bf 8b       	std	Y+23, r27	; 0x17
	ch->pwm = (round(ch->Control));
    189a:	6c 89       	ldd	r22, Y+20	; 0x14
    189c:	7d 89       	ldd	r23, Y+21	; 0x15
    189e:	8e 89       	ldd	r24, Y+22	; 0x16
    18a0:	9f 89       	ldd	r25, Y+23	; 0x17
    18a2:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <round>
    18a6:	0e 94 86 22 	call	0x450c	; 0x450c <__fixsfsi>
    18aa:	70 93 fc 01 	sts	0x01FC, r23
    18ae:	60 93 fb 01 	sts	0x01FB, r22
	
	if(fabs(ch->TempError[CtrlErrorIdx]) > integralErrorActiveWindow)
    18b2:	e0 91 27 03 	lds	r30, 0x0327
    18b6:	f0 91 28 03 	lds	r31, 0x0328
    18ba:	ee 0f       	add	r30, r30
    18bc:	ff 1f       	adc	r31, r31
    18be:	ee 0f       	add	r30, r30
    18c0:	ff 1f       	adc	r31, r31
    18c2:	ed 53       	subi	r30, 0x3D	; 61
    18c4:	fe 4f       	sbci	r31, 0xFE	; 254
    18c6:	80 81       	ld	r24, Z
    18c8:	91 81       	ldd	r25, Z+1	; 0x01
    18ca:	a2 81       	ldd	r26, Z+2	; 0x02
    18cc:	b3 81       	ldd	r27, Z+3	; 0x03
    18ce:	bc 01       	movw	r22, r24
    18d0:	cd 01       	movw	r24, r26
    18d2:	9f 77       	andi	r25, 0x7F	; 127
    18d4:	20 e0       	ldi	r18, 0x00	; 0
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	40 ea       	ldi	r20, 0xA0	; 160
    18da:	50 e4       	ldi	r21, 0x40	; 64
    18dc:	0e 94 69 23 	call	0x46d2	; 0x46d2 <__gesf2>
    18e0:	18 16       	cp	r1, r24
    18e2:	44 f4       	brge	.+16     	; 0x18f4 <__vector_7+0xc38>
	{
		ch->I_err = 0;														// Avoid integral wind-up
    18e4:	10 92 a7 01 	sts	0x01A7, r1
    18e8:	10 92 a8 01 	sts	0x01A8, r1
    18ec:	10 92 a9 01 	sts	0x01A9, r1
    18f0:	10 92 aa 01 	sts	0x01AA, r1
	}
	
	if(fabs(ch->TempError[CtrlErrorIdx]) <= ch->tempErrorWin)				// Temperature settle window
    18f4:	e0 91 27 03 	lds	r30, 0x0327
    18f8:	f0 91 28 03 	lds	r31, 0x0328
    18fc:	ee 0f       	add	r30, r30
    18fe:	ff 1f       	adc	r31, r31
    1900:	ee 0f       	add	r30, r30
    1902:	ff 1f       	adc	r31, r31
    1904:	ed 53       	subi	r30, 0x3D	; 61
    1906:	fe 4f       	sbci	r31, 0xFE	; 254
    1908:	80 81       	ld	r24, Z
    190a:	91 81       	ldd	r25, Z+1	; 0x01
    190c:	a2 81       	ldd	r26, Z+2	; 0x02
    190e:	b3 81       	ldd	r27, Z+3	; 0x03
    1910:	20 91 ef 01 	lds	r18, 0x01EF
    1914:	30 91 f0 01 	lds	r19, 0x01F0
    1918:	40 91 f1 01 	lds	r20, 0x01F1
    191c:	50 91 f2 01 	lds	r21, 0x01F2
    1920:	bc 01       	movw	r22, r24
    1922:	cd 01       	movw	r24, r26
    1924:	9f 77       	andi	r25, 0x7F	; 127
    1926:	0e 94 82 22 	call	0x4504	; 0x4504 <__cmpsf2>
    192a:	18 16       	cp	r1, r24
    192c:	14 f1       	brlt	.+68     	; 0x1972 <__vector_7+0xcb6>
	{
		ch->tempSettleCnt ++;
    192e:	e3 ef       	ldi	r30, 0xF3	; 243
    1930:	f1 e0       	ldi	r31, 0x01	; 1
    1932:	80 81       	ld	r24, Z
    1934:	91 81       	ldd	r25, Z+1	; 0x01
    1936:	01 96       	adiw	r24, 0x01	; 1
    1938:	91 83       	std	Z+1, r25	; 0x01
    193a:	80 83       	st	Z, r24
		if(ch->tempSettleCnt >= (int)(ch->tempSettleTime * 61))
    193c:	20 81       	ld	r18, Z
    193e:	31 81       	ldd	r19, Z+1	; 0x01
    1940:	40 91 f5 01 	lds	r20, 0x01F5
    1944:	50 91 f6 01 	lds	r21, 0x01F6
    1948:	6d e3       	ldi	r22, 0x3D	; 61
    194a:	64 9f       	mul	r22, r20
    194c:	c0 01       	movw	r24, r0
    194e:	65 9f       	mul	r22, r21
    1950:	90 0d       	add	r25, r0
    1952:	11 24       	eor	r1, r1
    1954:	28 17       	cp	r18, r24
    1956:	39 07       	cpc	r19, r25
    1958:	a4 f0       	brlt	.+40     	; 0x1982 <__vector_7+0xcc6>
		{
			ch->tempStable = 1;
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	90 93 f8 01 	sts	0x01F8, r25
    1962:	80 93 f7 01 	sts	0x01F7, r24
			ch->tempSettleCnt --;
    1966:	80 81       	ld	r24, Z
    1968:	91 81       	ldd	r25, Z+1	; 0x01
    196a:	01 97       	sbiw	r24, 0x01	; 1
    196c:	91 83       	std	Z+1, r25	; 0x01
    196e:	80 83       	st	Z, r24
    1970:	08 c0       	rjmp	.+16     	; 0x1982 <__vector_7+0xcc6>
		}			
	}
	else
	{
		ch->tempSettleCnt = 0;
    1972:	10 92 f4 01 	sts	0x01F4, r1
    1976:	10 92 f3 01 	sts	0x01F3, r1
		ch->tempStable = 0;
    197a:	10 92 f8 01 	sts	0x01F8, r1
    197e:	10 92 f7 01 	sts	0x01F7, r1
	PIDctrl(&ch0, 1);
	PIDctrl(&ch1, 2);
	PIDctrl(&ch2, 3);
	PIDctrl(&ch3, 4);

	CtrlErrorIdx ++;							// Control error ring buffer index
    1982:	80 91 27 03 	lds	r24, 0x0327
    1986:	90 91 28 03 	lds	r25, 0x0328
    198a:	01 96       	adiw	r24, 0x01	; 1
    198c:	90 93 28 03 	sts	0x0328, r25
    1990:	80 93 27 03 	sts	0x0327, r24
	if(CtrlErrorIdx > errorHistory)
    1994:	80 91 27 03 	lds	r24, 0x0327
    1998:	90 91 28 03 	lds	r25, 0x0328
    199c:	0b 97       	sbiw	r24, 0x0b	; 11
    199e:	24 f0       	brlt	.+8      	; 0x19a8 <__vector_7+0xcec>
	{
		CtrlErrorIdx = 0;
    19a0:	10 92 28 03 	sts	0x0328, r1
    19a4:	10 92 27 03 	sts	0x0327, r1
	}
	CtrlErrorHistIdx = CtrlErrorIdx + 1;
    19a8:	80 91 27 03 	lds	r24, 0x0327
    19ac:	90 91 28 03 	lds	r25, 0x0328
    19b0:	01 96       	adiw	r24, 0x01	; 1
    19b2:	90 93 03 01 	sts	0x0103, r25
    19b6:	80 93 02 01 	sts	0x0102, r24
	if(CtrlErrorHistIdx > errorHistory)
    19ba:	80 91 02 01 	lds	r24, 0x0102
    19be:	90 91 03 01 	lds	r25, 0x0103
    19c2:	0b 97       	sbiw	r24, 0x0b	; 11
    19c4:	24 f0       	brlt	.+8      	; 0x19ce <__vector_7+0xd12>
	{
		CtrlErrorHistIdx = 0;
    19c6:	10 92 03 01 	sts	0x0103, r1
    19ca:	10 92 02 01 	sts	0x0102, r1
	}		

	PORTD &= 0b11110111;						// Turn off LED on PCB (Irq call freq: 16MHz / 1024 / 255 = 61.3 Hz )
    19ce:	5b 98       	cbi	0x0b, 3	; 11
}
    19d0:	ff 91       	pop	r31
    19d2:	ef 91       	pop	r30
    19d4:	df 91       	pop	r29
    19d6:	cf 91       	pop	r28
    19d8:	bf 91       	pop	r27
    19da:	af 91       	pop	r26
    19dc:	9f 91       	pop	r25
    19de:	8f 91       	pop	r24
    19e0:	7f 91       	pop	r23
    19e2:	6f 91       	pop	r22
    19e4:	5f 91       	pop	r21
    19e6:	4f 91       	pop	r20
    19e8:	3f 91       	pop	r19
    19ea:	2f 91       	pop	r18
    19ec:	1f 91       	pop	r17
    19ee:	0f 91       	pop	r16
    19f0:	ff 90       	pop	r15
    19f2:	ef 90       	pop	r14
    19f4:	df 90       	pop	r13
    19f6:	cf 90       	pop	r12
    19f8:	0f 90       	pop	r0
    19fa:	0f be       	out	0x3f, r0	; 63
    19fc:	0f 90       	pop	r0
    19fe:	1f 90       	pop	r1
    1a00:	18 95       	reti

00001a02 <ftoa>:
	printStatus("IntiRead: ");
	printStatus(data);
}

void ftoa(float num, char *str)
{
    1a02:	8f 92       	push	r8
    1a04:	9f 92       	push	r9
    1a06:	af 92       	push	r10
    1a08:	bf 92       	push	r11
    1a0a:	cf 92       	push	r12
    1a0c:	df 92       	push	r13
    1a0e:	ef 92       	push	r14
    1a10:	ff 92       	push	r15
    1a12:	0f 93       	push	r16
    1a14:	1f 93       	push	r17
    1a16:	cf 93       	push	r28
    1a18:	df 93       	push	r29
    1a1a:	cd b7       	in	r28, 0x3d	; 61
    1a1c:	de b7       	in	r29, 0x3e	; 62
    1a1e:	64 97       	sbiw	r28, 0x14	; 20
    1a20:	0f b6       	in	r0, 0x3f	; 63
    1a22:	f8 94       	cli
    1a24:	de bf       	out	0x3e, r29	; 62
    1a26:	0f be       	out	0x3f, r0	; 63
    1a28:	cd bf       	out	0x3d, r28	; 61
    1a2a:	4b 01       	movw	r8, r22
    1a2c:	5c 01       	movw	r10, r24
    1a2e:	8a 01       	movw	r16, r20
	int intpart = num;
    1a30:	0e 94 86 22 	call	0x450c	; 0x450c <__fixsfsi>
    1a34:	6b 01       	movw	r12, r22
    1a36:	7c 01       	movw	r14, r24
	int i;
	float decimal_part;
	char decimal[20];
	int PRECISION = 3;						// Decimal precision

	memset(str, 0x0, 20);
    1a38:	84 e1       	ldi	r24, 0x14	; 20
    1a3a:	f8 01       	movw	r30, r16
    1a3c:	11 92       	st	Z+, r1
    1a3e:	8a 95       	dec	r24
    1a40:	e9 f7       	brne	.-6      	; 0x1a3c <ftoa+0x3a>
    1a42:	4a e0       	ldi	r20, 0x0A	; 10
    1a44:	b8 01       	movw	r22, r16
    1a46:	c6 01       	movw	r24, r12
    1a48:	0e 94 99 24 	call	0x4932	; 0x4932 <__itoa_ncheck>
	itoa(num, str, 10);

	strcat(str, ".");
    1a4c:	f8 01       	movw	r30, r16
    1a4e:	01 90       	ld	r0, Z+
    1a50:	00 20       	and	r0, r0
    1a52:	e9 f7       	brne	.-6      	; 0x1a4e <ftoa+0x4c>
    1a54:	31 97       	sbiw	r30, 0x01	; 1
    1a56:	8e e2       	ldi	r24, 0x2E	; 46
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	91 83       	std	Z+1, r25	; 0x01
    1a5c:	80 83       	st	Z, r24

	decimal_part = num - intpart;
    1a5e:	b6 01       	movw	r22, r12
    1a60:	dd 0c       	add	r13, r13
    1a62:	88 0b       	sbc	r24, r24
    1a64:	99 0b       	sbc	r25, r25
    1a66:	0e 94 b9 22 	call	0x4572	; 0x4572 <__floatsisf>
    1a6a:	9b 01       	movw	r18, r22
    1a6c:	ac 01       	movw	r20, r24
    1a6e:	c5 01       	movw	r24, r10
    1a70:	b4 01       	movw	r22, r8
    1a72:	0e 94 1d 22 	call	0x443a	; 0x443a <__subsf3>
	intdecimal = decimal_part * 1000;		// If decimal precision is 3 then 1000, 2 -> 100, 1 -> 10 ...;
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	4a e7       	ldi	r20, 0x7A	; 122
    1a7c:	54 e4       	ldi	r21, 0x44	; 68
    1a7e:	0e 94 6d 23 	call	0x46da	; 0x46da <__mulsf3>
    1a82:	0e 94 86 22 	call	0x450c	; 0x450c <__fixsfsi>
    1a86:	9b 01       	movw	r18, r22
    1a88:	77 23       	and	r23, r23
    1a8a:	24 f4       	brge	.+8      	; 0x1a94 <ftoa+0x92>
    1a8c:	22 27       	eor	r18, r18
    1a8e:	33 27       	eor	r19, r19
    1a90:	26 1b       	sub	r18, r22
    1a92:	37 0b       	sbc	r19, r23
    1a94:	4a e0       	ldi	r20, 0x0A	; 10
    1a96:	be 01       	movw	r22, r28
    1a98:	6f 5f       	subi	r22, 0xFF	; 255
    1a9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a9c:	c9 01       	movw	r24, r18
    1a9e:	0e 94 99 24 	call	0x4932	; 0x4932 <__itoa_ncheck>
	if(intdecimal < 0)
	{
		intdecimal = -intdecimal;
	}
	itoa(intdecimal, decimal, 10);
	for(i =0;i < (PRECISION - strlen(decimal));i++)
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	de 01       	movw	r26, r28
    1aa8:	11 96       	adiw	r26, 0x01	; 1
    1aaa:	23 e0       	ldi	r18, 0x03	; 3
    1aac:	30 e0       	ldi	r19, 0x00	; 0
	{
		strcat(str, "0");
    1aae:	40 e3       	ldi	r20, 0x30	; 48
    1ab0:	50 e0       	ldi	r21, 0x00	; 0
	if(intdecimal < 0)
	{
		intdecimal = -intdecimal;
	}
	itoa(intdecimal, decimal, 10);
	for(i =0;i < (PRECISION - strlen(decimal));i++)
    1ab2:	08 c0       	rjmp	.+16     	; 0x1ac4 <ftoa+0xc2>
	{
		strcat(str, "0");
    1ab4:	f8 01       	movw	r30, r16
    1ab6:	01 90       	ld	r0, Z+
    1ab8:	00 20       	and	r0, r0
    1aba:	e9 f7       	brne	.-6      	; 0x1ab6 <ftoa+0xb4>
    1abc:	31 97       	sbiw	r30, 0x01	; 1
    1abe:	51 83       	std	Z+1, r21	; 0x01
    1ac0:	40 83       	st	Z, r20
	if(intdecimal < 0)
	{
		intdecimal = -intdecimal;
	}
	itoa(intdecimal, decimal, 10);
	for(i =0;i < (PRECISION - strlen(decimal));i++)
    1ac2:	01 96       	adiw	r24, 0x01	; 1
    1ac4:	fd 01       	movw	r30, r26
    1ac6:	01 90       	ld	r0, Z+
    1ac8:	00 20       	and	r0, r0
    1aca:	e9 f7       	brne	.-6      	; 0x1ac6 <ftoa+0xc4>
    1acc:	31 97       	sbiw	r30, 0x01	; 1
    1ace:	ea 1b       	sub	r30, r26
    1ad0:	fb 0b       	sbc	r31, r27
    1ad2:	b9 01       	movw	r22, r18
    1ad4:	6e 1b       	sub	r22, r30
    1ad6:	7f 0b       	sbc	r23, r31
    1ad8:	86 17       	cp	r24, r22
    1ada:	97 07       	cpc	r25, r23
    1adc:	58 f3       	brcs	.-42     	; 0x1ab4 <ftoa+0xb2>
	{
		strcat(str, "0");
	}
	strcat(str, decimal);
    1ade:	be 01       	movw	r22, r28
    1ae0:	6f 5f       	subi	r22, 0xFF	; 255
    1ae2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae4:	c8 01       	movw	r24, r16
    1ae6:	0e 94 65 24 	call	0x48ca	; 0x48ca <strcat>
}
    1aea:	64 96       	adiw	r28, 0x14	; 20
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	f8 94       	cli
    1af0:	de bf       	out	0x3e, r29	; 62
    1af2:	0f be       	out	0x3f, r0	; 63
    1af4:	cd bf       	out	0x3d, r28	; 61
    1af6:	df 91       	pop	r29
    1af8:	cf 91       	pop	r28
    1afa:	1f 91       	pop	r17
    1afc:	0f 91       	pop	r16
    1afe:	ff 90       	pop	r15
    1b00:	ef 90       	pop	r14
    1b02:	df 90       	pop	r13
    1b04:	cf 90       	pop	r12
    1b06:	bf 90       	pop	r11
    1b08:	af 90       	pop	r10
    1b0a:	9f 90       	pop	r9
    1b0c:	8f 90       	pop	r8
    1b0e:	08 95       	ret

00001b10 <main>:
	eeprom_write_float( (float*)eepromAdr_TempErrWin3, ch3.tempErrorWin );
	eeprom_write_word(	(uint16_t*)eepromAdr_TSettleTime3, ch3.tempSettleTime );	
}

int main (void)
  {
    1b10:	cf 93       	push	r28
    1b12:	df 93       	push	r29
    1b14:	cd b7       	in	r28, 0x3d	; 61
    1b16:	de b7       	in	r29, 0x3e	; 62
    1b18:	c0 56       	subi	r28, 0x60	; 96
    1b1a:	d1 09       	sbc	r29, r1
    1b1c:	0f b6       	in	r0, 0x3f	; 63
    1b1e:	f8 94       	cli
    1b20:	de bf       	out	0x3e, r29	; 62
    1b22:	0f be       	out	0x3f, r0	; 63
    1b24:	cd bf       	out	0x3d, r28	; 61
	char requestID[4];
	char s_string[20] = "C2CA SA ADP 1.0";
    1b26:	80 e1       	ldi	r24, 0x10	; 16
    1b28:	e4 e0       	ldi	r30, 0x04	; 4
    1b2a:	f1 e0       	ldi	r31, 0x01	; 1
    1b2c:	de 01       	movw	r26, r28
    1b2e:	15 96       	adiw	r26, 0x05	; 5
    1b30:	01 90       	ld	r0, Z+
    1b32:	0d 92       	st	X+, r0
    1b34:	8a 95       	dec	r24
    1b36:	e1 f7       	brne	.-8      	; 0x1b30 <main+0x20>
    1b38:	1d 8a       	std	Y+21, r1	; 0x15
    1b3a:	1e 8a       	std	Y+22, r1	; 0x16
    1b3c:	1f 8a       	std	Y+23, r1	; 0x17
    1b3e:	18 8e       	std	Y+24, r1	; 0x18
	char *pos;
	char inCrC_string[5];
	int i;
	int var;
	
	cli();
    1b40:	f8 94       	cli
	uart_init();
    1b42:	0e 94 78 00 	call	0xf0	; 0xf0 <uart_init>
	sei();
    1b46:	78 94       	sei
/************************************************
SPI INITIALISATION
*************************************************/
static inline void SPIinit(void)
{
	SPI_DDR &= 0b11101111;							// PB4 = Input = MISO
    1b48:	24 98       	cbi	0x04, 4	; 4
	SPI_DDR = (1<<PORTB3)|(1<<PORTB5|(1<<PORTB2));	// Set MOSI, SCK and SS as output
    1b4a:	8c e2       	ldi	r24, 0x2C	; 44
    1b4c:	84 b9       	out	0x04, r24	; 4
	
	
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0)|(1<<CPHA)|(1<<CPOL); // Enable SPI, Master, set clock rate fck/16
    1b4e:	8d e5       	ldi	r24, 0x5D	; 93
    1b50:	8c bd       	out	0x2c, r24	; 44
	cli();
	uart_init();
	sei();
	SPIinit();

	ch0.pwm = 1;
    1b52:	0f 2e       	mov	r0, r31
    1b54:	f4 ec       	ldi	r31, 0xC4	; 196
    1b56:	af 2e       	mov	r10, r31
    1b58:	f2 e0       	ldi	r31, 0x02	; 2
    1b5a:	bf 2e       	mov	r11, r31
    1b5c:	f0 2d       	mov	r31, r0
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	90 93 25 03 	sts	0x0325, r25
    1b66:	80 93 24 03 	sts	0x0324, r24
	ch1.pwm = 1;
    1b6a:	0f 2e       	mov	r0, r31
    1b6c:	f1 e6       	ldi	r31, 0x61	; 97
    1b6e:	cf 2e       	mov	r12, r31
    1b70:	f2 e0       	ldi	r31, 0x02	; 2
    1b72:	df 2e       	mov	r13, r31
    1b74:	f0 2d       	mov	r31, r0
    1b76:	90 93 c2 02 	sts	0x02C2, r25
    1b7a:	80 93 c1 02 	sts	0x02C1, r24
	ch2.pwm = 1;
    1b7e:	0f 2e       	mov	r0, r31
    1b80:	fe ef       	ldi	r31, 0xFE	; 254
    1b82:	ef 2e       	mov	r14, r31
    1b84:	f1 e0       	ldi	r31, 0x01	; 1
    1b86:	ff 2e       	mov	r15, r31
    1b88:	f0 2d       	mov	r31, r0
    1b8a:	90 93 5f 02 	sts	0x025F, r25
    1b8e:	80 93 5e 02 	sts	0x025E, r24
	ch3.pwm = 1;
    1b92:	0b e9       	ldi	r16, 0x9B	; 155
    1b94:	11 e0       	ldi	r17, 0x01	; 1
    1b96:	90 93 fc 01 	sts	0x01FC, r25
    1b9a:	80 93 fb 01 	sts	0x01FB, r24

	DDRD = 0b11111000;			// 1 = output 0 = input
    1b9e:	88 ef       	ldi	r24, 0xF8	; 248
    1ba0:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0b00001111;
    1ba2:	8f e0       	ldi	r24, 0x0F	; 15
    1ba4:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1<<PORTB1);		// Set stepper Dir to output
    1ba6:	21 9a       	sbi	0x04, 1	; 4
	//DDRB -= _BV(PORTB0);		// Set home switch to input
	
	PORTD |=(1<<PORTD7)|(1<<PORTD6)|(1<<PORTD5)|(1<<PORTD4);	// Set initially all CS high
    1ba8:	8b b1       	in	r24, 0x0b	; 11
    1baa:	80 6f       	ori	r24, 0xF0	; 240
    1bac:	8b b9       	out	0x0b, r24	; 11
	return step;
}

static inline void ReadParmEEPROM()
{
	ch0.TempSetPoint = eeprom_read_float((float*)eepromAdr_TempSetPoint0);
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <eeprom_read_dword>
    1bb6:	d5 01       	movw	r26, r10
    1bb8:	6d 93       	st	X+, r22
    1bba:	7d 93       	st	X+, r23
    1bbc:	8d 93       	st	X+, r24
    1bbe:	9c 93       	st	X, r25
    1bc0:	13 97       	sbiw	r26, 0x03	; 3
	ch0.Pgain = eeprom_read_float((float*)eepromAdr_PgainCh0);
    1bc2:	84 e0       	ldi	r24, 0x04	; 4
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <eeprom_read_dword>
    1bca:	f5 01       	movw	r30, r10
    1bcc:	64 8f       	std	Z+28, r22	; 0x1c
    1bce:	75 8f       	std	Z+29, r23	; 0x1d
    1bd0:	86 8f       	std	Z+30, r24	; 0x1e
    1bd2:	97 8f       	std	Z+31, r25	; 0x1f
	ch0.Igain = eeprom_read_float((float*)eepromAdr_IgainCh0);
    1bd4:	88 e0       	ldi	r24, 0x08	; 8
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <eeprom_read_dword>
    1bdc:	d5 01       	movw	r26, r10
    1bde:	90 96       	adiw	r26, 0x20	; 32
    1be0:	6d 93       	st	X+, r22
    1be2:	7d 93       	st	X+, r23
    1be4:	8d 93       	st	X+, r24
    1be6:	9c 93       	st	X, r25
    1be8:	93 97       	sbiw	r26, 0x23	; 35
	ch0.Dgain = eeprom_read_float((float*)eepromAdr_DgainCh0);
    1bea:	8c e0       	ldi	r24, 0x0C	; 12
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <eeprom_read_dword>
    1bf2:	f5 01       	movw	r30, r10
    1bf4:	64 a3       	std	Z+36, r22	; 0x24
    1bf6:	75 a3       	std	Z+37, r23	; 0x25
    1bf8:	86 a3       	std	Z+38, r24	; 0x26
    1bfa:	97 a3       	std	Z+39, r25	; 0x27
	ch0.tempErrorWin = eeprom_read_float((float*)eepromAdr_TempErrWin0);
    1bfc:	80 e1       	ldi	r24, 0x10	; 16
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <eeprom_read_dword>
    1c04:	60 93 18 03 	sts	0x0318, r22
    1c08:	70 93 19 03 	sts	0x0319, r23
    1c0c:	80 93 1a 03 	sts	0x031A, r24
    1c10:	90 93 1b 03 	sts	0x031B, r25
	ch0.tempSettleTime = eeprom_read_word((uint16_t*)eepromAdr_TSettleTime0);
    1c14:	84 e1       	ldi	r24, 0x14	; 20
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	0e 94 92 26 	call	0x4d24	; 0x4d24 <eeprom_read_word>
    1c1c:	90 93 1f 03 	sts	0x031F, r25
    1c20:	80 93 1e 03 	sts	0x031E, r24
	
	ch1.TempSetPoint = eeprom_read_float((float*)eepromAdr_TempSetPoint1);
    1c24:	88 e1       	ldi	r24, 0x18	; 24
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <eeprom_read_dword>
    1c2c:	d6 01       	movw	r26, r12
    1c2e:	6d 93       	st	X+, r22
    1c30:	7d 93       	st	X+, r23
    1c32:	8d 93       	st	X+, r24
    1c34:	9c 93       	st	X, r25
    1c36:	13 97       	sbiw	r26, 0x03	; 3
	ch1.Pgain = eeprom_read_float((float*)eepromAdr_PgainCh1);
    1c38:	8c e1       	ldi	r24, 0x1C	; 28
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <eeprom_read_dword>
    1c40:	f6 01       	movw	r30, r12
    1c42:	64 8f       	std	Z+28, r22	; 0x1c
    1c44:	75 8f       	std	Z+29, r23	; 0x1d
    1c46:	86 8f       	std	Z+30, r24	; 0x1e
    1c48:	97 8f       	std	Z+31, r25	; 0x1f
	ch1.Igain = eeprom_read_float((float*)eepromAdr_IgainCh1);
    1c4a:	80 e2       	ldi	r24, 0x20	; 32
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <eeprom_read_dword>
    1c52:	d6 01       	movw	r26, r12
    1c54:	90 96       	adiw	r26, 0x20	; 32
    1c56:	6d 93       	st	X+, r22
    1c58:	7d 93       	st	X+, r23
    1c5a:	8d 93       	st	X+, r24
    1c5c:	9c 93       	st	X, r25
    1c5e:	93 97       	sbiw	r26, 0x23	; 35
	ch1.Dgain = eeprom_read_float((float*)eepromAdr_DgainCh1);
    1c60:	84 e2       	ldi	r24, 0x24	; 36
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <eeprom_read_dword>
    1c68:	f6 01       	movw	r30, r12
    1c6a:	64 a3       	std	Z+36, r22	; 0x24
    1c6c:	75 a3       	std	Z+37, r23	; 0x25
    1c6e:	86 a3       	std	Z+38, r24	; 0x26
    1c70:	97 a3       	std	Z+39, r25	; 0x27
	ch1.tempErrorWin = eeprom_read_float((float*)eepromAdr_TempErrWin1);
    1c72:	88 e2       	ldi	r24, 0x28	; 40
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <eeprom_read_dword>
    1c7a:	60 93 b5 02 	sts	0x02B5, r22
    1c7e:	70 93 b6 02 	sts	0x02B6, r23
    1c82:	80 93 b7 02 	sts	0x02B7, r24
    1c86:	90 93 b8 02 	sts	0x02B8, r25
	ch1.tempSettleTime = eeprom_read_word((uint16_t*)eepromAdr_TSettleTime1);	
    1c8a:	8c e2       	ldi	r24, 0x2C	; 44
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	0e 94 92 26 	call	0x4d24	; 0x4d24 <eeprom_read_word>
    1c92:	90 93 bc 02 	sts	0x02BC, r25
    1c96:	80 93 bb 02 	sts	0x02BB, r24
	
	ch2.TempSetPoint = eeprom_read_float((float*)eepromAdr_TempSetPoint2);
    1c9a:	80 e3       	ldi	r24, 0x30	; 48
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <eeprom_read_dword>
    1ca2:	d7 01       	movw	r26, r14
    1ca4:	6d 93       	st	X+, r22
    1ca6:	7d 93       	st	X+, r23
    1ca8:	8d 93       	st	X+, r24
    1caa:	9c 93       	st	X, r25
    1cac:	13 97       	sbiw	r26, 0x03	; 3
	ch2.Pgain = eeprom_read_float((float*)eepromAdr_PgainCh2);
    1cae:	84 e3       	ldi	r24, 0x34	; 52
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <eeprom_read_dword>
    1cb6:	f7 01       	movw	r30, r14
    1cb8:	64 8f       	std	Z+28, r22	; 0x1c
    1cba:	75 8f       	std	Z+29, r23	; 0x1d
    1cbc:	86 8f       	std	Z+30, r24	; 0x1e
    1cbe:	97 8f       	std	Z+31, r25	; 0x1f
	ch2.Igain = eeprom_read_float((float*)eepromAdr_IgainCh2);
    1cc0:	88 e3       	ldi	r24, 0x38	; 56
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <eeprom_read_dword>
    1cc8:	d7 01       	movw	r26, r14
    1cca:	90 96       	adiw	r26, 0x20	; 32
    1ccc:	6d 93       	st	X+, r22
    1cce:	7d 93       	st	X+, r23
    1cd0:	8d 93       	st	X+, r24
    1cd2:	9c 93       	st	X, r25
    1cd4:	93 97       	sbiw	r26, 0x23	; 35
	ch2.Dgain = eeprom_read_float((float*)eepromAdr_DgainCh2);
    1cd6:	8c e3       	ldi	r24, 0x3C	; 60
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <eeprom_read_dword>
    1cde:	f7 01       	movw	r30, r14
    1ce0:	64 a3       	std	Z+36, r22	; 0x24
    1ce2:	75 a3       	std	Z+37, r23	; 0x25
    1ce4:	86 a3       	std	Z+38, r24	; 0x26
    1ce6:	97 a3       	std	Z+39, r25	; 0x27
	ch2.tempErrorWin = eeprom_read_float((float*)eepromAdr_TempErrWin2);
    1ce8:	80 e4       	ldi	r24, 0x40	; 64
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <eeprom_read_dword>
    1cf0:	60 93 52 02 	sts	0x0252, r22
    1cf4:	70 93 53 02 	sts	0x0253, r23
    1cf8:	80 93 54 02 	sts	0x0254, r24
    1cfc:	90 93 55 02 	sts	0x0255, r25
	ch2.tempSettleTime = eeprom_read_word((uint16_t*)eepromAdr_TSettleTime2);	
    1d00:	84 e4       	ldi	r24, 0x44	; 68
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	0e 94 92 26 	call	0x4d24	; 0x4d24 <eeprom_read_word>
    1d08:	90 93 59 02 	sts	0x0259, r25
    1d0c:	80 93 58 02 	sts	0x0258, r24
	
	ch3.TempSetPoint = eeprom_read_float((float*)eepromAdr_TempSetPoint3);
    1d10:	88 e4       	ldi	r24, 0x48	; 72
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <eeprom_read_dword>
    1d18:	d8 01       	movw	r26, r16
    1d1a:	6d 93       	st	X+, r22
    1d1c:	7d 93       	st	X+, r23
    1d1e:	8d 93       	st	X+, r24
    1d20:	9c 93       	st	X, r25
    1d22:	13 97       	sbiw	r26, 0x03	; 3
	ch3.Pgain = eeprom_read_float((float*)eepromAdr_PgainCh3);
    1d24:	8c e4       	ldi	r24, 0x4C	; 76
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <eeprom_read_dword>
    1d2c:	f8 01       	movw	r30, r16
    1d2e:	64 8f       	std	Z+28, r22	; 0x1c
    1d30:	75 8f       	std	Z+29, r23	; 0x1d
    1d32:	86 8f       	std	Z+30, r24	; 0x1e
    1d34:	97 8f       	std	Z+31, r25	; 0x1f
	ch3.Igain = eeprom_read_float((float*)eepromAdr_IgainCh3);
    1d36:	80 e5       	ldi	r24, 0x50	; 80
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <eeprom_read_dword>
    1d3e:	d8 01       	movw	r26, r16
    1d40:	90 96       	adiw	r26, 0x20	; 32
    1d42:	6d 93       	st	X+, r22
    1d44:	7d 93       	st	X+, r23
    1d46:	8d 93       	st	X+, r24
    1d48:	9c 93       	st	X, r25
    1d4a:	93 97       	sbiw	r26, 0x23	; 35
	ch3.Dgain = eeprom_read_float((float*)eepromAdr_DgainCh3);			
    1d4c:	84 e5       	ldi	r24, 0x54	; 84
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <eeprom_read_dword>
    1d54:	f8 01       	movw	r30, r16
    1d56:	64 a3       	std	Z+36, r22	; 0x24
    1d58:	75 a3       	std	Z+37, r23	; 0x25
    1d5a:	86 a3       	std	Z+38, r24	; 0x26
    1d5c:	97 a3       	std	Z+39, r25	; 0x27
	ch3.tempErrorWin = eeprom_read_float((float*)eepromAdr_TempErrWin3);
    1d5e:	88 e5       	ldi	r24, 0x58	; 88
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <eeprom_read_dword>
    1d66:	60 93 ef 01 	sts	0x01EF, r22
    1d6a:	70 93 f0 01 	sts	0x01F0, r23
    1d6e:	80 93 f1 01 	sts	0x01F1, r24
    1d72:	90 93 f2 01 	sts	0x01F2, r25
	ch3.tempSettleTime = eeprom_read_word((uint16_t*)eepromAdr_TSettleTime3);	
    1d76:	8c e5       	ldi	r24, 0x5C	; 92
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	0e 94 92 26 	call	0x4d24	; 0x4d24 <eeprom_read_word>
    1d7e:	90 93 f6 01 	sts	0x01F6, r25
    1d82:	80 93 f5 01 	sts	0x01F5, r24
	printStatus(data);
}

static inline void MAX31865initAuto(uint8_t ch)
{
	MaxRTDinit(0xC3, ch);
    1d86:	61 e0       	ldi	r22, 0x01	; 1
    1d88:	83 ec       	ldi	r24, 0xC3	; 195
    1d8a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <MaxRTDinit>
    1d8e:	62 e0       	ldi	r22, 0x02	; 2
    1d90:	83 ec       	ldi	r24, 0xC3	; 195
    1d92:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <MaxRTDinit>
    1d96:	63 e0       	ldi	r22, 0x03	; 3
    1d98:	83 ec       	ldi	r24, 0xC3	; 195
    1d9a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <MaxRTDinit>
    1d9e:	64 e0       	ldi	r22, 0x04	; 4
    1da0:	83 ec       	ldi	r24, 0xC3	; 195
    1da2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <MaxRTDinit>
}

static inline void TimerInit(void)
{
	// Timer0 Heater PWM output
	TIMSK0 = _BV(OCIE0A);				// Enable Interrupt TimerCounter0 Compare Match A (TIMER0_COMPA_vect)
    1da6:	82 e0       	ldi	r24, 0x02	; 2
    1da8:	80 93 6e 00 	sts	0x006E, r24
	TCCR0A = _BV(WGM01);				// Mode = CTC (Clear Timer on Compare)
    1dac:	84 bd       	out	0x24, r24	; 36
	TCCR0B = _BV(CS02) | _BV(CS00);		// 16MHz/1024, 0.000064 seconds per tick
    1dae:	95 e0       	ldi	r25, 0x05	; 5
    1db0:	95 bd       	out	0x25, r25	; 37
	OCR0A = 16;							// TIMER0_COMPA_vect will be triggered each 0.000064 x 16 = 0.001024 s (976.5 Hz)
    1db2:	90 e1       	ldi	r25, 0x10	; 16
    1db4:	97 bd       	out	0x27, r25	; 39
	
	// Timer 1 Step motor output
	TIMSK1 = _BV(OCIE1A);				// Enable Interrupt TimerCounter1-16Bit Compare Match A (TIMER1_COMPA_vect)
    1db6:	80 93 6f 00 	sts	0x006F, r24
	TCCR1B = _BV(WGM12) | _BV(WGM13) | _BV(CS11);// | _BV(CS10); // Mode = CTC (Clear Timer on Compare), 16MHz/1024, 0.000064 seconds per tick
    1dba:	9a e1       	ldi	r25, 0x1A	; 26
    1dbc:	90 93 81 00 	sts	0x0081, r25
	ICR1 = 300;							// TIMER1_COMPA_vecr will be called every timer reach the 16-bit value int ICR1
    1dc0:	e6 e8       	ldi	r30, 0x86	; 134
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	2c e2       	ldi	r18, 0x2C	; 44
    1dc6:	31 e0       	ldi	r19, 0x01	; 1
    1dc8:	31 83       	std	Z+1, r19	; 0x01
    1dca:	20 83       	st	Z, r18
	int dummy = ICR1;
    1dcc:	20 81       	ld	r18, Z
    1dce:	31 81       	ldd	r19, Z+1	; 0x01
	
	// Timer2 PID controller	
	TIMSK2 = _BV(OCIE2A);				// Enable Interrupt TimerCounter2 Compare Match A (TIMER2_COMPA_vect)
    1dd0:	80 93 70 00 	sts	0x0070, r24
	TCCR2A = _BV(WGM21);				// Mode = CTC (Clear Timer on Compare)
    1dd4:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B = _BV(CS22) | _BV(CS21) | _BV(CS20);		// 16MHz/1024, 0.000064 seconds per tick
    1dd8:	87 e0       	ldi	r24, 0x07	; 7
    1dda:	80 93 b1 00 	sts	0x00B1, r24
	OCR2A = 255;						// TIMER2_COMPA_vect will be triggered each 0.000064 x 255 = 0.01632 s (61.3 Hz)
    1dde:	8f ef       	ldi	r24, 0xFF	; 255
    1de0:	80 93 b3 00 	sts	0x00B3, r24
	
	sei();
    1de4:	78 94       	sei
	*	PC:		#12A?VR104
	*	ATMega:	!12A70.0006DCA
	***********************************************************/
	while(1)
	{
		memset(rx_string, 0x00, rx_size);			// Purge rx_string
    1de6:	0f 2e       	mov	r0, r31
    1de8:	f7 e3       	ldi	r31, 0x37	; 55
    1dea:	4f 2e       	mov	r4, r31
    1dec:	f5 e0       	ldi	r31, 0x05	; 5
    1dee:	5f 2e       	mov	r5, r31
    1df0:	f0 2d       	mov	r31, r0
 * \returns next data byte in buffer
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
    1df2:	02 e3       	ldi	r16, 0x32	; 50
    1df4:	15 e0       	ldi	r17, 0x05	; 5
    1df6:	0f 2e       	mov	r0, r31
    1df8:	f5 e5       	ldi	r31, 0x55	; 85
    1dfa:	2f 2e       	mov	r2, r31
    1dfc:	f5 e0       	ldi	r31, 0x05	; 5
    1dfe:	3f 2e       	mov	r3, r31
    1e00:	f0 2d       	mov	r31, r0
		}
		break;		
		
		// *** Channel 2 ***		
		case 300:	// Send sensor 2 temperature
		ftoa(ch2.TempSensor, tx_string);
    1e02:	5e 01       	movw	r10, r28
    1e04:	f6 e4       	ldi	r31, 0x46	; 70
    1e06:	af 0e       	add	r10, r31
    1e08:	b1 1c       	adc	r11, r1
	*	PC:		#12A?VR104
	*	ATMega:	!12A70.0006DCA
	***********************************************************/
	while(1)
	{
		memset(rx_string, 0x00, rx_size);			// Purge rx_string
    1e0a:	6f 96       	adiw	r28, 0x1f	; 31
    1e0c:	4f ae       	std	Y+63, r4	; 0x3f
    1e0e:	6f 97       	sbiw	r28, 0x1f	; 31
    1e10:	a0 96       	adiw	r28, 0x20	; 32
    1e12:	5f ae       	std	Y+63, r5	; 0x3f
    1e14:	a0 97       	sbiw	r28, 0x20	; 32
    1e16:	a1 96       	adiw	r28, 0x21	; 33
    1e18:	4f ae       	std	Y+63, r4	; 0x3f
    1e1a:	a1 97       	sbiw	r28, 0x21	; 33
    1e1c:	65 2c       	mov	r6, r5
		}
		break;		
		
		// *** Channel 2 ***		
		case 300:	// Send sensor 2 temperature
		ftoa(ch2.TempSensor, tx_string);
    1e1e:	db 2c       	mov	r13, r11
    1e20:	6c 96       	adiw	r28, 0x1c	; 28
    1e22:	5f ae       	std	Y+63, r5	; 0x3f
    1e24:	4e ae       	std	Y+62, r4	; 0x3e
    1e26:	6c 97       	sbiw	r28, 0x1c	; 28
    1e28:	6e 96       	adiw	r28, 0x1e	; 30
    1e2a:	bf ae       	std	Y+63, r11	; 0x3f
    1e2c:	ae ae       	std	Y+62, r10	; 0x3e
    1e2e:	6e 97       	sbiw	r28, 0x1e	; 30
    1e30:	ba 2c       	mov	r11, r10
    1e32:	5d 2c       	mov	r5, r13
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    1e34:	6f 96       	adiw	r28, 0x1f	; 31
    1e36:	7f ac       	ldd	r7, Y+63	; 0x3f
    1e38:	6f 97       	sbiw	r28, 0x1f	; 31
    1e3a:	a0 96       	adiw	r28, 0x20	; 32
    1e3c:	af ac       	ldd	r10, Y+63	; 0x3f
    1e3e:	a0 97       	sbiw	r28, 0x20	; 32
	*	PC:		#12A?VR104
	*	ATMega:	!12A70.0006DCA
	***********************************************************/
	while(1)
	{
		memset(rx_string, 0x00, rx_size);			// Purge rx_string
    1e40:	0f 2e       	mov	r0, r31
    1e42:	fe e1       	ldi	r31, 0x1E	; 30
    1e44:	ef 2e       	mov	r14, r31
    1e46:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    1e48:	f1 2c       	mov	r15, r1
    1e4a:	6c 96       	adiw	r28, 0x1c	; 28
    1e4c:	ae ad       	ldd	r26, Y+62	; 0x3e
    1e4e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1e50:	6c 97       	sbiw	r28, 0x1c	; 28
    1e52:	ee 2d       	mov	r30, r14
    1e54:	1d 92       	st	X+, r1
    1e56:	ea 95       	dec	r30
    1e58:	e9 f7       	brne	.-6      	; 0x1e54 <main+0x344>
 * \returns next data byte in buffer
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
    1e5a:	d8 01       	movw	r26, r16
    1e5c:	13 96       	adiw	r26, 0x03	; 3
    1e5e:	6d 91       	ld	r22, X+
    1e60:	7c 91       	ld	r23, X
    1e62:	14 97       	sbiw	r26, 0x04	; 4
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    1e64:	12 96       	adiw	r26, 0x02	; 2
    1e66:	4c 91       	ld	r20, X
    1e68:	50 e0       	ldi	r21, 0x00	; 0
    1e6a:	41 50       	subi	r20, 0x01	; 1
    1e6c:	51 09       	sbc	r21, r1
    1e6e:	a1 96       	adiw	r28, 0x21	; 33
    1e70:	ef ad       	ldd	r30, Y+63	; 0x3f
    1e72:	a1 97       	sbiw	r28, 0x21	; 33
    1e74:	f6 2d       	mov	r31, r6
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    1e76:	d8 01       	movw	r26, r16
    1e78:	11 96       	adiw	r26, 0x01	; 1
    1e7a:	8c 91       	ld	r24, X
    1e7c:	11 97       	sbiw	r26, 0x01	; 1
    1e7e:	9c 91       	ld	r25, X

		for(i = 0; i < rx_size; i++)
		{
			while(!uart_char_waiting());
    1e80:	98 17       	cp	r25, r24
    1e82:	c9 f3       	breq	.-14     	; 0x1e76 <main+0x366>
 * \returns next data byte in buffer
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
    1e84:	11 96       	adiw	r26, 0x01	; 1
    1e86:	8c 91       	ld	r24, X
    1e88:	db 01       	movw	r26, r22
    1e8a:	a8 0f       	add	r26, r24
    1e8c:	b1 1d       	adc	r27, r1
    1e8e:	9c 91       	ld	r25, X
 *
 * \returns the next read offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_read(const struct ring_buffer *ring)
{
	return get_next(ring->read_offset, ring->size);
    1e90:	d8 01       	movw	r26, r16
    1e92:	11 96       	adiw	r26, 0x01	; 1
    1e94:	8c 91       	ld	r24, X
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    1e96:	28 2f       	mov	r18, r24
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	24 17       	cp	r18, r20
    1e9c:	35 07       	cpc	r19, r21
    1e9e:	11 f0       	breq	.+4      	; 0x1ea4 <main+0x394>
    1ea0:	8f 5f       	subi	r24, 0xFF	; 255
    1ea2:	01 c0       	rjmp	.+2      	; 0x1ea6 <main+0x396>
    1ea4:	8f 2d       	mov	r24, r15
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
	ring->read_offset = ring_buffer_get_next_read(ring);
    1ea6:	d8 01       	movw	r26, r16
    1ea8:	11 96       	adiw	r26, 0x01	; 1
    1eaa:	8c 93       	st	X, r24
			rx_string[i] = uart_getchar();			// Collect the message
    1eac:	91 93       	st	Z+, r25
			if(rx_string[i] == 0x0D)				// Terminate acquisition if <CR> received
    1eae:	9d 30       	cpi	r25, 0x0D	; 13
    1eb0:	19 f0       	breq	.+6      	; 0x1eb8 <main+0x3a8>
	***********************************************************/
	while(1)
	{
		memset(rx_string, 0x00, rx_size);			// Purge rx_string

		for(i = 0; i < rx_size; i++)
    1eb2:	e2 15       	cp	r30, r2
    1eb4:	f3 05       	cpc	r31, r3
    1eb6:	f9 f6       	brne	.-66     	; 0x1e76 <main+0x366>
			{
				break;
			}	
		}

		if(rx_string[0] == '#')
    1eb8:	6c 96       	adiw	r28, 0x1c	; 28
    1eba:	ee ad       	ldd	r30, Y+62	; 0x3e
    1ebc:	ff ad       	ldd	r31, Y+63	; 0x3f
    1ebe:	6c 97       	sbiw	r28, 0x1c	; 28
    1ec0:	80 81       	ld	r24, Z
    1ec2:	83 32       	cpi	r24, 0x23	; 35
    1ec4:	11 f6       	brne	.-124    	; 0x1e4a <main+0x33a>
		{
			pos = NULL;
			pos = strchr(rx_string, '?');
    1ec6:	6f e3       	ldi	r22, 0x3F	; 63
    1ec8:	70 e0       	ldi	r23, 0x00	; 0
    1eca:	87 2d       	mov	r24, r7
    1ecc:	9a 2d       	mov	r25, r10
    1ece:	0e 94 70 24 	call	0x48e0	; 0x48e0 <strchr>
    1ed2:	7c 01       	movw	r14, r24
			if(pos != NULL)							
    1ed4:	00 97       	sbiw	r24, 0x00	; 0
    1ed6:	09 f4       	brne	.+2      	; 0x1eda <main+0x3ca>
    1ed8:	8e c6       	rjmp	.+3356   	; 0x2bf6 <main+0x10e6>
			{
				requestCmd[0] = *(pos + 1);			// Parse request command	
    1eda:	e9 e2       	ldi	r30, 0x29	; 41
    1edc:	f3 e0       	ldi	r31, 0x03	; 3
    1ede:	dc 01       	movw	r26, r24
    1ee0:	11 96       	adiw	r26, 0x01	; 1
    1ee2:	8c 91       	ld	r24, X
    1ee4:	11 97       	sbiw	r26, 0x01	; 1
    1ee6:	80 83       	st	Z, r24
				requestCmd[1] = *(pos + 2);
    1ee8:	12 96       	adiw	r26, 0x02	; 2
    1eea:	8c 91       	ld	r24, X
    1eec:	81 83       	std	Z+1, r24	; 0x01

				if(strcmp(requestCmd, "IF") == 0)
    1eee:	68 e1       	ldi	r22, 0x18	; 24
    1ef0:	71 e0       	ldi	r23, 0x01	; 1
    1ef2:	cf 01       	movw	r24, r30
    1ef4:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <strcmp>
    1ef8:	89 2b       	or	r24, r25
    1efa:	b9 f5       	brne	.+110    	; 0x1f6a <main+0x45a>
				{
					crc[0] = *(pos + 3);			// Parse incoming crc
    1efc:	ed e2       	ldi	r30, 0x2D	; 45
    1efe:	f5 e0       	ldi	r31, 0x05	; 5
    1f00:	d7 01       	movw	r26, r14
    1f02:	13 96       	adiw	r26, 0x03	; 3
    1f04:	8c 91       	ld	r24, X
    1f06:	13 97       	sbiw	r26, 0x03	; 3
    1f08:	80 83       	st	Z, r24
					crc[1] = *(pos + 4);
    1f0a:	14 96       	adiw	r26, 0x04	; 4
    1f0c:	8c 91       	ld	r24, X
    1f0e:	14 97       	sbiw	r26, 0x04	; 4
    1f10:	81 83       	std	Z+1, r24	; 0x01
					crc[2] = *(pos + 5);
    1f12:	15 96       	adiw	r26, 0x05	; 5
    1f14:	8c 91       	ld	r24, X
    1f16:	15 97       	sbiw	r26, 0x05	; 5
    1f18:	82 83       	std	Z+2, r24	; 0x02
					crc[3] = *(pos + 6);
    1f1a:	16 96       	adiw	r26, 0x06	; 6
    1f1c:	8c 91       	ld	r24, X
    1f1e:	83 83       	std	Z+3, r24	; 0x03

					itoa(GenCrc16(rx_string, (int)strnlen(rx_string, rx_size)-5), inCrC_string, 16);
    1f20:	6e e1       	ldi	r22, 0x1E	; 30
    1f22:	70 e0       	ldi	r23, 0x00	; 0
    1f24:	87 2d       	mov	r24, r7
    1f26:	9a 2d       	mov	r25, r10
    1f28:	0e 94 84 24 	call	0x4908	; 0x4908 <strnlen>
    1f2c:	bc 01       	movw	r22, r24
    1f2e:	65 50       	subi	r22, 0x05	; 5
    1f30:	71 09       	sbc	r23, r1
    1f32:	87 2d       	mov	r24, r7
    1f34:	9a 2d       	mov	r25, r10
    1f36:	0e 94 01 01 	call	0x202	; 0x202 <GenCrc16>
    1f3a:	40 e1       	ldi	r20, 0x10	; 16
    1f3c:	be 01       	movw	r22, r28
    1f3e:	67 5e       	subi	r22, 0xE7	; 231
    1f40:	7f 4f       	sbci	r23, 0xFF	; 255
    1f42:	0e 94 99 24 	call	0x4932	; 0x4932 <__itoa_ncheck>
					if(CrcCompare(crc, inCrC_string) == true)
    1f46:	be 01       	movw	r22, r28
    1f48:	67 5e       	subi	r22, 0xE7	; 231
    1f4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f4c:	8d e2       	ldi	r24, 0x2D	; 45
    1f4e:	95 e0       	ldi	r25, 0x05	; 5
    1f50:	0e 94 56 01 	call	0x2ac	; 0x2ac <CrcCompare>
    1f54:	88 23       	and	r24, r24
    1f56:	29 f0       	breq	.+10     	; 0x1f62 <main+0x452>
					{
						printStatus(s_string);	
    1f58:	ce 01       	movw	r24, r28
    1f5a:	05 96       	adiw	r24, 0x05	; 5
    1f5c:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    1f60:	04 c0       	rjmp	.+8      	; 0x1f6a <main+0x45a>
					}
					else
					{
						printStatus("CRC error");
    1f62:	8b e1       	ldi	r24, 0x1B	; 27
    1f64:	91 e0       	ldi	r25, 0x01	; 1
    1f66:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
						//printStatus(rx_string);
					}
				}
					
				if(strcmp(requestCmd, "VR") == 0)
    1f6a:	65 e2       	ldi	r22, 0x25	; 37
    1f6c:	71 e0       	ldi	r23, 0x01	; 1
    1f6e:	89 e2       	ldi	r24, 0x29	; 41
    1f70:	93 e0       	ldi	r25, 0x03	; 3
    1f72:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <strcmp>
    1f76:	89 2b       	or	r24, r25
    1f78:	09 f0       	breq	.+2      	; 0x1f7c <main+0x46c>
    1f7a:	3d c6       	rjmp	.+3194   	; 0x2bf6 <main+0x10e6>
				{
					requestID[0] = *(pos + 3);		// Parse request ID
    1f7c:	f7 01       	movw	r30, r14
    1f7e:	83 81       	ldd	r24, Z+3	; 0x03
    1f80:	89 83       	std	Y+1, r24	; 0x01
					requestID[1] = *(pos + 4);
    1f82:	84 81       	ldd	r24, Z+4	; 0x04
    1f84:	8a 83       	std	Y+2, r24	; 0x02
					requestID[2] = *(pos + 5);
    1f86:	85 81       	ldd	r24, Z+5	; 0x05
    1f88:	8b 83       	std	Y+3, r24	; 0x03
					crc[0] = *(pos + 6);			// Parse incoming crc
    1f8a:	ed e2       	ldi	r30, 0x2D	; 45
    1f8c:	f5 e0       	ldi	r31, 0x05	; 5
    1f8e:	d7 01       	movw	r26, r14
    1f90:	16 96       	adiw	r26, 0x06	; 6
    1f92:	8c 91       	ld	r24, X
    1f94:	16 97       	sbiw	r26, 0x06	; 6
    1f96:	80 83       	st	Z, r24
					crc[1] = *(pos + 7);
    1f98:	17 96       	adiw	r26, 0x07	; 7
    1f9a:	8c 91       	ld	r24, X
    1f9c:	17 97       	sbiw	r26, 0x07	; 7
    1f9e:	81 83       	std	Z+1, r24	; 0x01
					crc[2] = *(pos + 8);
    1fa0:	18 96       	adiw	r26, 0x08	; 8
    1fa2:	8c 91       	ld	r24, X
    1fa4:	18 97       	sbiw	r26, 0x08	; 8
    1fa6:	82 83       	std	Z+2, r24	; 0x02
					crc[3] = *(pos + 9);
    1fa8:	19 96       	adiw	r26, 0x09	; 9
    1faa:	8c 91       	ld	r24, X
    1fac:	83 83       	std	Z+3, r24	; 0x03
					
					itoa(GenCrc16(rx_string, (int)strnlen(rx_string, rx_size)-5), inCrC_string, 16);
    1fae:	6e e1       	ldi	r22, 0x1E	; 30
    1fb0:	70 e0       	ldi	r23, 0x00	; 0
    1fb2:	87 2d       	mov	r24, r7
    1fb4:	9a 2d       	mov	r25, r10
    1fb6:	0e 94 84 24 	call	0x4908	; 0x4908 <strnlen>
    1fba:	bc 01       	movw	r22, r24
    1fbc:	65 50       	subi	r22, 0x05	; 5
    1fbe:	71 09       	sbc	r23, r1
    1fc0:	87 2d       	mov	r24, r7
    1fc2:	9a 2d       	mov	r25, r10
    1fc4:	0e 94 01 01 	call	0x202	; 0x202 <GenCrc16>
    1fc8:	40 e1       	ldi	r20, 0x10	; 16
    1fca:	be 01       	movw	r22, r28
    1fcc:	67 5e       	subi	r22, 0xE7	; 231
    1fce:	7f 4f       	sbci	r23, 0xFF	; 255
    1fd0:	0e 94 99 24 	call	0x4932	; 0x4932 <__itoa_ncheck>
					if(CrcCompare(crc, inCrC_string) == true)
    1fd4:	be 01       	movw	r22, r28
    1fd6:	67 5e       	subi	r22, 0xE7	; 231
    1fd8:	7f 4f       	sbci	r23, 0xFF	; 255
    1fda:	8d e2       	ldi	r24, 0x2D	; 45
    1fdc:	95 e0       	ldi	r25, 0x05	; 5
    1fde:	0e 94 56 01 	call	0x2ac	; 0x2ac <CrcCompare>
    1fe2:	88 23       	and	r24, r24
    1fe4:	09 f4       	brne	.+2      	; 0x1fe8 <main+0x4d8>
    1fe6:	03 c6       	rjmp	.+3078   	; 0x2bee <main+0x10de>
					{					
						var = atol(requestID);
    1fe8:	ce 01       	movw	r24, r28
    1fea:	01 96       	adiw	r24, 0x01	; 1
    1fec:	0e 94 3f 24 	call	0x487e	; 0x487e <atol>

static inline void SendParameter(int id)
{
	char tx_string[20];

	switch(id)
    1ff0:	6c 32       	cpi	r22, 0x2C	; 44
    1ff2:	b1 e0       	ldi	r27, 0x01	; 1
    1ff4:	7b 07       	cpc	r23, r27
    1ff6:	09 f4       	brne	.+2      	; 0x1ffa <main+0x4ea>
    1ff8:	6a c4       	rjmp	.+2260   	; 0x28ce <main+0xdbe>
    1ffa:	0c f0       	brlt	.+2      	; 0x1ffe <main+0x4ee>
    1ffc:	67 c0       	rjmp	.+206    	; 0x20cc <main+0x5bc>
    1ffe:	6e 36       	cpi	r22, 0x6E	; 110
    2000:	71 05       	cpc	r23, r1
    2002:	09 f4       	brne	.+2      	; 0x2006 <main+0x4f6>
    2004:	90 c2       	rjmp	.+1312   	; 0x2526 <main+0xa16>
    2006:	7c f5       	brge	.+94     	; 0x2066 <main+0x556>
    2008:	68 36       	cpi	r22, 0x68	; 104
    200a:	71 05       	cpc	r23, r1
    200c:	09 f4       	brne	.+2      	; 0x2010 <main+0x500>
    200e:	18 c1       	rjmp	.+560    	; 0x2240 <main+0x730>
    2010:	9c f4       	brge	.+38     	; 0x2038 <main+0x528>
    2012:	65 36       	cpi	r22, 0x65	; 101
    2014:	71 05       	cpc	r23, r1
    2016:	09 f4       	brne	.+2      	; 0x201a <main+0x50a>
    2018:	e3 c0       	rjmp	.+454    	; 0x21e0 <main+0x6d0>
    201a:	2c f4       	brge	.+10     	; 0x2026 <main+0x516>
    201c:	64 36       	cpi	r22, 0x64	; 100
    201e:	71 05       	cpc	r23, r1
    2020:	09 f4       	brne	.+2      	; 0x2024 <main+0x514>
    2022:	ce c0       	rjmp	.+412    	; 0x21c0 <main+0x6b0>
    2024:	df c5       	rjmp	.+3006   	; 0x2be4 <main+0x10d4>
    2026:	66 36       	cpi	r22, 0x66	; 102
    2028:	71 05       	cpc	r23, r1
    202a:	09 f4       	brne	.+2      	; 0x202e <main+0x51e>
    202c:	e9 c0       	rjmp	.+466    	; 0x2200 <main+0x6f0>
    202e:	67 36       	cpi	r22, 0x67	; 103
    2030:	71 05       	cpc	r23, r1
    2032:	09 f4       	brne	.+2      	; 0x2036 <main+0x526>
    2034:	f5 c0       	rjmp	.+490    	; 0x2220 <main+0x710>
    2036:	d6 c5       	rjmp	.+2988   	; 0x2be4 <main+0x10d4>
    2038:	6b 36       	cpi	r22, 0x6B	; 107
    203a:	71 05       	cpc	r23, r1
    203c:	09 f4       	brne	.+2      	; 0x2040 <main+0x530>
    203e:	45 c2       	rjmp	.+1162   	; 0x24ca <main+0x9ba>
    2040:	4c f4       	brge	.+18     	; 0x2054 <main+0x544>
    2042:	69 36       	cpi	r22, 0x69	; 105
    2044:	71 05       	cpc	r23, r1
    2046:	09 f4       	brne	.+2      	; 0x204a <main+0x53a>
    2048:	0b c1       	rjmp	.+534    	; 0x2260 <main+0x750>
    204a:	6a 36       	cpi	r22, 0x6A	; 106
    204c:	71 05       	cpc	r23, r1
    204e:	09 f4       	brne	.+2      	; 0x2052 <main+0x542>
    2050:	17 c1       	rjmp	.+558    	; 0x2280 <main+0x770>
    2052:	c8 c5       	rjmp	.+2960   	; 0x2be4 <main+0x10d4>
    2054:	6c 36       	cpi	r22, 0x6C	; 108
    2056:	71 05       	cpc	r23, r1
    2058:	09 f4       	brne	.+2      	; 0x205c <main+0x54c>
    205a:	47 c2       	rjmp	.+1166   	; 0x24ea <main+0x9da>
    205c:	6d 36       	cpi	r22, 0x6D	; 109
    205e:	71 05       	cpc	r23, r1
    2060:	09 f4       	brne	.+2      	; 0x2064 <main+0x554>
    2062:	53 c2       	rjmp	.+1190   	; 0x250a <main+0x9fa>
    2064:	bf c5       	rjmp	.+2942   	; 0x2be4 <main+0x10d4>
    2066:	6d 3c       	cpi	r22, 0xCD	; 205
    2068:	71 05       	cpc	r23, r1
    206a:	09 f4       	brne	.+2      	; 0x206e <main+0x55e>
    206c:	bf c2       	rjmp	.+1406   	; 0x25ec <main+0xadc>
    206e:	bc f4       	brge	.+46     	; 0x209e <main+0x58e>
    2070:	6a 3c       	cpi	r22, 0xCA	; 202
    2072:	71 05       	cpc	r23, r1
    2074:	09 f4       	brne	.+2      	; 0x2078 <main+0x568>
    2076:	8a c2       	rjmp	.+1300   	; 0x258c <main+0xa7c>
    2078:	4c f4       	brge	.+18     	; 0x208c <main+0x57c>
    207a:	68 3c       	cpi	r22, 0xC8	; 200
    207c:	71 05       	cpc	r23, r1
    207e:	09 f4       	brne	.+2      	; 0x2082 <main+0x572>
    2080:	65 c2       	rjmp	.+1226   	; 0x254c <main+0xa3c>
    2082:	69 3c       	cpi	r22, 0xC9	; 201
    2084:	71 05       	cpc	r23, r1
    2086:	09 f4       	brne	.+2      	; 0x208a <main+0x57a>
    2088:	71 c2       	rjmp	.+1250   	; 0x256c <main+0xa5c>
    208a:	ac c5       	rjmp	.+2904   	; 0x2be4 <main+0x10d4>
    208c:	6b 3c       	cpi	r22, 0xCB	; 203
    208e:	71 05       	cpc	r23, r1
    2090:	09 f4       	brne	.+2      	; 0x2094 <main+0x584>
    2092:	8c c2       	rjmp	.+1304   	; 0x25ac <main+0xa9c>
    2094:	6c 3c       	cpi	r22, 0xCC	; 204
    2096:	71 05       	cpc	r23, r1
    2098:	09 f4       	brne	.+2      	; 0x209c <main+0x58c>
    209a:	98 c2       	rjmp	.+1328   	; 0x25cc <main+0xabc>
    209c:	a3 c5       	rjmp	.+2886   	; 0x2be4 <main+0x10d4>
    209e:	60 3d       	cpi	r22, 0xD0	; 208
    20a0:	71 05       	cpc	r23, r1
    20a2:	09 f4       	brne	.+2      	; 0x20a6 <main+0x596>
    20a4:	e3 c3       	rjmp	.+1990   	; 0x286c <main+0xd5c>
    20a6:	4c f4       	brge	.+18     	; 0x20ba <main+0x5aa>
    20a8:	6e 3c       	cpi	r22, 0xCE	; 206
    20aa:	71 05       	cpc	r23, r1
    20ac:	09 f4       	brne	.+2      	; 0x20b0 <main+0x5a0>
    20ae:	ae c2       	rjmp	.+1372   	; 0x260c <main+0xafc>
    20b0:	6f 3c       	cpi	r22, 0xCF	; 207
    20b2:	71 05       	cpc	r23, r1
    20b4:	09 f4       	brne	.+2      	; 0x20b8 <main+0x5a8>
    20b6:	ba c2       	rjmp	.+1396   	; 0x262c <main+0xb1c>
    20b8:	95 c5       	rjmp	.+2858   	; 0x2be4 <main+0x10d4>
    20ba:	61 3d       	cpi	r22, 0xD1	; 209
    20bc:	71 05       	cpc	r23, r1
    20be:	09 f4       	brne	.+2      	; 0x20c2 <main+0x5b2>
    20c0:	e5 c3       	rjmp	.+1994   	; 0x288c <main+0xd7c>
    20c2:	62 3d       	cpi	r22, 0xD2	; 210
    20c4:	71 05       	cpc	r23, r1
    20c6:	09 f4       	brne	.+2      	; 0x20ca <main+0x5ba>
    20c8:	ef c3       	rjmp	.+2014   	; 0x28a8 <main+0xd98>
    20ca:	8c c5       	rjmp	.+2840   	; 0x2be4 <main+0x10d4>
    20cc:	61 39       	cpi	r22, 0x91	; 145
    20ce:	f1 e0       	ldi	r31, 0x01	; 1
    20d0:	7f 07       	cpc	r23, r31
    20d2:	09 f4       	brne	.+2      	; 0x20d6 <main+0x5c6>
    20d4:	be c4       	rjmp	.+2428   	; 0x2a52 <main+0xf42>
    20d6:	d4 f5       	brge	.+116    	; 0x214c <main+0x63c>
    20d8:	62 33       	cpi	r22, 0x32	; 50
    20da:	31 e0       	ldi	r19, 0x01	; 1
    20dc:	73 07       	cpc	r23, r19
    20de:	09 f4       	brne	.+2      	; 0x20e2 <main+0x5d2>
    20e0:	56 c4       	rjmp	.+2220   	; 0x298e <main+0xe7e>
    20e2:	d4 f4       	brge	.+52     	; 0x2118 <main+0x608>
    20e4:	6f 32       	cpi	r22, 0x2F	; 47
    20e6:	b1 e0       	ldi	r27, 0x01	; 1
    20e8:	7b 07       	cpc	r23, r27
    20ea:	09 f4       	brne	.+2      	; 0x20ee <main+0x5de>
    20ec:	20 c4       	rjmp	.+2112   	; 0x292e <main+0xe1e>
    20ee:	54 f4       	brge	.+20     	; 0x2104 <main+0x5f4>
    20f0:	6d 32       	cpi	r22, 0x2D	; 45
    20f2:	f1 e0       	ldi	r31, 0x01	; 1
    20f4:	7f 07       	cpc	r23, r31
    20f6:	09 f4       	brne	.+2      	; 0x20fa <main+0x5ea>
    20f8:	fa c3       	rjmp	.+2036   	; 0x28ee <main+0xdde>
    20fa:	6e 32       	cpi	r22, 0x2E	; 46
    20fc:	71 40       	sbci	r23, 0x01	; 1
    20fe:	09 f4       	brne	.+2      	; 0x2102 <main+0x5f2>
    2100:	06 c4       	rjmp	.+2060   	; 0x290e <main+0xdfe>
    2102:	70 c5       	rjmp	.+2784   	; 0x2be4 <main+0x10d4>
    2104:	60 33       	cpi	r22, 0x30	; 48
    2106:	31 e0       	ldi	r19, 0x01	; 1
    2108:	73 07       	cpc	r23, r19
    210a:	09 f4       	brne	.+2      	; 0x210e <main+0x5fe>
    210c:	20 c4       	rjmp	.+2112   	; 0x294e <main+0xe3e>
    210e:	61 33       	cpi	r22, 0x31	; 49
    2110:	71 40       	sbci	r23, 0x01	; 1
    2112:	09 f4       	brne	.+2      	; 0x2116 <main+0x606>
    2114:	2c c4       	rjmp	.+2136   	; 0x296e <main+0xe5e>
    2116:	66 c5       	rjmp	.+2764   	; 0x2be4 <main+0x10d4>
    2118:	65 33       	cpi	r22, 0x35	; 53
    211a:	b1 e0       	ldi	r27, 0x01	; 1
    211c:	7b 07       	cpc	r23, r27
    211e:	09 f4       	brne	.+2      	; 0x2122 <main+0x612>
    2120:	66 c4       	rjmp	.+2252   	; 0x29ee <main+0xede>
    2122:	54 f4       	brge	.+20     	; 0x2138 <main+0x628>
    2124:	63 33       	cpi	r22, 0x33	; 51
    2126:	f1 e0       	ldi	r31, 0x01	; 1
    2128:	7f 07       	cpc	r23, r31
    212a:	09 f4       	brne	.+2      	; 0x212e <main+0x61e>
    212c:	40 c4       	rjmp	.+2176   	; 0x29ae <main+0xe9e>
    212e:	64 33       	cpi	r22, 0x34	; 52
    2130:	71 40       	sbci	r23, 0x01	; 1
    2132:	09 f4       	brne	.+2      	; 0x2136 <main+0x626>
    2134:	4c c4       	rjmp	.+2200   	; 0x29ce <main+0xebe>
    2136:	56 c5       	rjmp	.+2732   	; 0x2be4 <main+0x10d4>
    2138:	66 33       	cpi	r22, 0x36	; 54
    213a:	31 e0       	ldi	r19, 0x01	; 1
    213c:	73 07       	cpc	r23, r19
    213e:	09 f4       	brne	.+2      	; 0x2142 <main+0x632>
    2140:	64 c4       	rjmp	.+2248   	; 0x2a0a <main+0xefa>
    2142:	60 39       	cpi	r22, 0x90	; 144
    2144:	71 40       	sbci	r23, 0x01	; 1
    2146:	09 f4       	brne	.+2      	; 0x214a <main+0x63a>
    2148:	73 c4       	rjmp	.+2278   	; 0x2a30 <main+0xf20>
    214a:	4c c5       	rjmp	.+2712   	; 0x2be4 <main+0x10d4>
    214c:	67 39       	cpi	r22, 0x97	; 151
    214e:	b1 e0       	ldi	r27, 0x01	; 1
    2150:	7b 07       	cpc	r23, r27
    2152:	09 f4       	brne	.+2      	; 0x2156 <main+0x646>
    2154:	e4 c4       	rjmp	.+2504   	; 0x2b1e <main+0x100e>
    2156:	d4 f4       	brge	.+52     	; 0x218c <main+0x67c>
    2158:	64 39       	cpi	r22, 0x94	; 148
    215a:	f1 e0       	ldi	r31, 0x01	; 1
    215c:	7f 07       	cpc	r23, r31
    215e:	09 f4       	brne	.+2      	; 0x2162 <main+0x652>
    2160:	ab c4       	rjmp	.+2390   	; 0x2ab8 <main+0xfa8>
    2162:	54 f4       	brge	.+20     	; 0x2178 <main+0x668>
    2164:	62 39       	cpi	r22, 0x92	; 146
    2166:	31 e0       	ldi	r19, 0x01	; 1
    2168:	73 07       	cpc	r23, r19
    216a:	09 f4       	brne	.+2      	; 0x216e <main+0x65e>
    216c:	83 c4       	rjmp	.+2310   	; 0x2a74 <main+0xf64>
    216e:	63 39       	cpi	r22, 0x93	; 147
    2170:	71 40       	sbci	r23, 0x01	; 1
    2172:	09 f4       	brne	.+2      	; 0x2176 <main+0x666>
    2174:	90 c4       	rjmp	.+2336   	; 0x2a96 <main+0xf86>
    2176:	36 c5       	rjmp	.+2668   	; 0x2be4 <main+0x10d4>
    2178:	65 39       	cpi	r22, 0x95	; 149
    217a:	b1 e0       	ldi	r27, 0x01	; 1
    217c:	7b 07       	cpc	r23, r27
    217e:	09 f4       	brne	.+2      	; 0x2182 <main+0x672>
    2180:	ac c4       	rjmp	.+2392   	; 0x2ada <main+0xfca>
    2182:	66 39       	cpi	r22, 0x96	; 150
    2184:	71 40       	sbci	r23, 0x01	; 1
    2186:	09 f4       	brne	.+2      	; 0x218a <main+0x67a>
    2188:	b9 c4       	rjmp	.+2418   	; 0x2afc <main+0xfec>
    218a:	2c c5       	rjmp	.+2648   	; 0x2be4 <main+0x10d4>
    218c:	6a 39       	cpi	r22, 0x9A	; 154
    218e:	f1 e0       	ldi	r31, 0x01	; 1
    2190:	7f 07       	cpc	r23, r31
    2192:	09 f4       	brne	.+2      	; 0x2196 <main+0x686>
    2194:	f4 c4       	rjmp	.+2536   	; 0x2b7e <main+0x106e>
    2196:	54 f4       	brge	.+20     	; 0x21ac <main+0x69c>
    2198:	68 39       	cpi	r22, 0x98	; 152
    219a:	31 e0       	ldi	r19, 0x01	; 1
    219c:	73 07       	cpc	r23, r19
    219e:	09 f4       	brne	.+2      	; 0x21a2 <main+0x692>
    21a0:	cf c4       	rjmp	.+2462   	; 0x2b40 <main+0x1030>
    21a2:	69 39       	cpi	r22, 0x99	; 153
    21a4:	71 40       	sbci	r23, 0x01	; 1
    21a6:	09 f4       	brne	.+2      	; 0x21aa <main+0x69a>
    21a8:	dc c4       	rjmp	.+2488   	; 0x2b62 <main+0x1052>
    21aa:	1c c5       	rjmp	.+2616   	; 0x2be4 <main+0x10d4>
    21ac:	69 35       	cpi	r22, 0x59	; 89
    21ae:	b2 e0       	ldi	r27, 0x02	; 2
    21b0:	7b 07       	cpc	r23, r27
    21b2:	09 f4       	brne	.+2      	; 0x21b6 <main+0x6a6>
    21b4:	f7 c4       	rjmp	.+2542   	; 0x2ba4 <main+0x1094>
    21b6:	6a 35       	cpi	r22, 0x5A	; 90
    21b8:	72 40       	sbci	r23, 0x02	; 2
    21ba:	09 f4       	brne	.+2      	; 0x21be <main+0x6ae>
    21bc:	05 c5       	rjmp	.+2570   	; 0x2bc8 <main+0x10b8>
    21be:	12 c5       	rjmp	.+2596   	; 0x2be4 <main+0x10d4>
	{
		// *** Channel 0 ***
		case 100:	// Send sensor 1 temperature		
		ftoa(ch0.TempSensor, tx_string);
    21c0:	60 91 c8 02 	lds	r22, 0x02C8
    21c4:	70 91 c9 02 	lds	r23, 0x02C9
    21c8:	80 91 ca 02 	lds	r24, 0x02CA
    21cc:	90 91 cb 02 	lds	r25, 0x02CB
    21d0:	4b 2d       	mov	r20, r11
    21d2:	55 2d       	mov	r21, r5
    21d4:	16 dc       	rcall	.-2004   	; 0x1a02 <ftoa>
		printStatus(tx_string);
    21d6:	8b 2d       	mov	r24, r11
    21d8:	95 2d       	mov	r25, r5
    21da:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    21de:	0b c5       	rjmp	.+2582   	; 0x2bf6 <main+0x10e6>
		break;
		
		case 101:	// Send P part of PID-controller 1
		ftoa(ch0.P_err, tx_string);
    21e0:	60 91 cc 02 	lds	r22, 0x02CC
    21e4:	70 91 cd 02 	lds	r23, 0x02CD
    21e8:	80 91 ce 02 	lds	r24, 0x02CE
    21ec:	90 91 cf 02 	lds	r25, 0x02CF
    21f0:	4b 2d       	mov	r20, r11
    21f2:	55 2d       	mov	r21, r5
    21f4:	06 dc       	rcall	.-2036   	; 0x1a02 <ftoa>
		printStatus(tx_string);
    21f6:	8b 2d       	mov	r24, r11
    21f8:	95 2d       	mov	r25, r5
    21fa:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    21fe:	fb c4       	rjmp	.+2550   	; 0x2bf6 <main+0x10e6>
		break;
		
		case 102:	// Send I part of PID-controller 1
		ftoa(ch0.I_err, tx_string);
    2200:	60 91 d0 02 	lds	r22, 0x02D0
    2204:	70 91 d1 02 	lds	r23, 0x02D1
    2208:	80 91 d2 02 	lds	r24, 0x02D2
    220c:	90 91 d3 02 	lds	r25, 0x02D3
    2210:	4b 2d       	mov	r20, r11
    2212:	55 2d       	mov	r21, r5
    2214:	f6 db       	rcall	.-2068   	; 0x1a02 <ftoa>
		printStatus(tx_string);
    2216:	8b 2d       	mov	r24, r11
    2218:	95 2d       	mov	r25, r5
    221a:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    221e:	eb c4       	rjmp	.+2518   	; 0x2bf6 <main+0x10e6>
		break;
				
		case 103:	// Send D part of PID-controller 1
		ftoa(ch0.D_err, tx_string);
    2220:	60 91 d4 02 	lds	r22, 0x02D4
    2224:	70 91 d5 02 	lds	r23, 0x02D5
    2228:	80 91 d6 02 	lds	r24, 0x02D6
    222c:	90 91 d7 02 	lds	r25, 0x02D7
    2230:	4b 2d       	mov	r20, r11
    2232:	55 2d       	mov	r21, r5
    2234:	e6 db       	rcall	.-2100   	; 0x1a02 <ftoa>
		printStatus(tx_string);
    2236:	8b 2d       	mov	r24, r11
    2238:	95 2d       	mov	r25, r5
    223a:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    223e:	db c4       	rjmp	.+2486   	; 0x2bf6 <main+0x10e6>
		break;
		
		case 104:	// Send ch0.TempSetPoint
		ftoa(ch0.TempSetPoint, tx_string);
    2240:	60 91 c4 02 	lds	r22, 0x02C4
    2244:	70 91 c5 02 	lds	r23, 0x02C5
    2248:	80 91 c6 02 	lds	r24, 0x02C6
    224c:	90 91 c7 02 	lds	r25, 0x02C7
    2250:	4b 2d       	mov	r20, r11
    2252:	55 2d       	mov	r21, r5
    2254:	d6 db       	rcall	.-2132   	; 0x1a02 <ftoa>
		printStatus(tx_string);
    2256:	8b 2d       	mov	r24, r11
    2258:	95 2d       	mov	r25, r5
    225a:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    225e:	cb c4       	rjmp	.+2454   	; 0x2bf6 <main+0x10e6>
		break;
		
		case 105:	// Send Pgain ch0
		ftoa(ch0.Pgain, tx_string);
    2260:	60 91 e0 02 	lds	r22, 0x02E0
    2264:	70 91 e1 02 	lds	r23, 0x02E1
    2268:	80 91 e2 02 	lds	r24, 0x02E2
    226c:	90 91 e3 02 	lds	r25, 0x02E3
    2270:	4b 2d       	mov	r20, r11
    2272:	55 2d       	mov	r21, r5
    2274:	c6 db       	rcall	.-2164   	; 0x1a02 <ftoa>
		printStatus(tx_string);
    2276:	8b 2d       	mov	r24, r11
    2278:	95 2d       	mov	r25, r5
    227a:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    227e:	bb c4       	rjmp	.+2422   	; 0x2bf6 <main+0x10e6>
		break;								
		
		case 106:	// Send Igain ch0
		ftoa(ch0.Igain, tx_string);
    2280:	60 91 e4 02 	lds	r22, 0x02E4
    2284:	70 91 e5 02 	lds	r23, 0x02E5
    2288:	80 91 e6 02 	lds	r24, 0x02E6
    228c:	90 91 e7 02 	lds	r25, 0x02E7
    2290:	4b 2d       	mov	r20, r11
    2292:	55 2d       	mov	r21, r5
    2294:	b6 db       	rcall	.-2196   	; 0x1a02 <ftoa>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    2296:	81 e2       	ldi	r24, 0x21	; 33
    2298:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    229a:	6c 96       	adiw	r28, 0x1c	; 28
    229c:	ae ad       	ldd	r26, Y+62	; 0x3e
    229e:	bf ad       	ldd	r27, Y+63	; 0x3f
    22a0:	6c 97       	sbiw	r28, 0x1c	; 28
    22a2:	11 96       	adiw	r26, 0x01	; 1
    22a4:	8c 91       	ld	r24, X
    22a6:	11 97       	sbiw	r26, 0x01	; 1
    22a8:	8f 8f       	std	Y+31, r24	; 0x1f
    22aa:	12 96       	adiw	r26, 0x02	; 2
    22ac:	8c 91       	ld	r24, X
    22ae:	12 97       	sbiw	r26, 0x02	; 2
    22b0:	88 a3       	std	Y+32, r24	; 0x20
    22b2:	13 96       	adiw	r26, 0x03	; 3
    22b4:	8c 91       	ld	r24, X
    22b6:	89 a3       	std	Y+33, r24	; 0x21
    22b8:	eb 2d       	mov	r30, r11
    22ba:	f5 2d       	mov	r31, r5
    22bc:	de 01       	movw	r26, r28
    22be:	92 96       	adiw	r26, 0x22	; 34
    22c0:	e1 2c       	mov	r14, r1
    22c2:	f1 2c       	mov	r15, r1
    22c4:	af 01       	movw	r20, r30
    22c6:	07 c0       	rjmp	.+14     	; 0x22d6 <main+0x7c6>
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    22c8:	fa 01       	movw	r30, r20
    22ca:	81 91       	ld	r24, Z+
    22cc:	af 01       	movw	r20, r30
    22ce:	8d 93       	st	X+, r24
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    22d0:	ff ef       	ldi	r31, 0xFF	; 255
    22d2:	ef 1a       	sub	r14, r31
    22d4:	ff 0a       	sbc	r15, r31
    22d6:	6e 96       	adiw	r28, 0x1e	; 30
    22d8:	ee ad       	ldd	r30, Y+62	; 0x3e
    22da:	ff ad       	ldd	r31, Y+63	; 0x3f
    22dc:	6e 97       	sbiw	r28, 0x1e	; 30
    22de:	01 90       	ld	r0, Z+
    22e0:	00 20       	and	r0, r0
    22e2:	e9 f7       	brne	.-6      	; 0x22de <main+0x7ce>
    22e4:	cf 01       	movw	r24, r30
    22e6:	6e 96       	adiw	r28, 0x1e	; 30
    22e8:	2e ad       	ldd	r18, Y+62	; 0x3e
    22ea:	3f ad       	ldd	r19, Y+63	; 0x3f
    22ec:	6e 97       	sbiw	r28, 0x1e	; 30
    22ee:	82 1b       	sub	r24, r18
    22f0:	93 0b       	sbc	r25, r19
    22f2:	02 96       	adiw	r24, 0x02	; 2
    22f4:	e8 16       	cp	r14, r24
    22f6:	f9 06       	cpc	r15, r25
    22f8:	38 f3       	brcs	.-50     	; 0x22c8 <main+0x7b8>
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    22fa:	67 01       	movw	r12, r14
    22fc:	3f ef       	ldi	r19, 0xFF	; 255
    22fe:	c3 1a       	sub	r12, r19
    2300:	d3 0a       	sbc	r13, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    2302:	1c 14       	cp	r1, r12
    2304:	1d 04       	cpc	r1, r13
    2306:	14 f0       	brlt	.+4      	; 0x230c <main+0x7fc>
    2308:	0c 94 03 22 	jmp	0x4406	; 0x4406 <main+0x28f6>
    230c:	fe 01       	movw	r30, r28
    230e:	7e 96       	adiw	r30, 0x1e	; 30
    2310:	b6 01       	movw	r22, r12
    2312:	6e 0f       	add	r22, r30
    2314:	7f 1f       	adc	r23, r31
    2316:	80 e0       	ldi	r24, 0x00	; 0
    2318:	90 e0       	ldi	r25, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    231a:	b8 e0       	ldi	r27, 0x08	; 8
    231c:	91 2c       	mov	r9, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    231e:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    2320:	29 2f       	mov	r18, r25
    2322:	33 27       	eor	r19, r19
    2324:	27 fd       	sbrc	r18, 7
    2326:	3a 95       	dec	r19
    2328:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    232a:	32 2f       	mov	r19, r18
    232c:	22 27       	eor	r18, r18
    232e:	4b 2f       	mov	r20, r27
    2330:	59 2d       	mov	r21, r9
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    2332:	33 23       	and	r19, r19
    2334:	3c f4       	brge	.+14     	; 0x2344 <main+0x834>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    2336:	22 0f       	add	r18, r18
    2338:	33 1f       	adc	r19, r19
    233a:	a1 e2       	ldi	r26, 0x21	; 33
    233c:	2a 27       	eor	r18, r26
    233e:	a0 e1       	ldi	r26, 0x10	; 16
    2340:	3a 27       	eor	r19, r26
    2342:	02 c0       	rjmp	.+4      	; 0x2348 <main+0x838>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    2344:	22 0f       	add	r18, r18
    2346:	33 1f       	adc	r19, r19
    2348:	41 50       	subi	r20, 0x01	; 1
    234a:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    234c:	91 f7       	brne	.-28     	; 0x2332 <main+0x822>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    234e:	98 2f       	mov	r25, r24
    2350:	88 27       	eor	r24, r24
    2352:	82 27       	eor	r24, r18
    2354:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    2356:	e6 17       	cp	r30, r22
    2358:	f7 07       	cpc	r31, r23
    235a:	09 f7       	brne	.-62     	; 0x231e <main+0x80e>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    235c:	4c 01       	movw	r8, r24
    235e:	40 e1       	ldi	r20, 0x10	; 16
    2360:	6d e2       	ldi	r22, 0x2D	; 45
    2362:	75 e0       	ldi	r23, 0x05	; 5
    2364:	0e 94 99 24 	call	0x4932	; 0x4932 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    2368:	8d e2       	ldi	r24, 0x2D	; 45
    236a:	95 e0       	ldi	r25, 0x05	; 5
    236c:	0e 94 8f 24 	call	0x491e	; 0x491e <strupr>
	if(crcXmodem < 0x10)
    2370:	b0 e1       	ldi	r27, 0x10	; 16
    2372:	8b 16       	cp	r8, r27
    2374:	91 04       	cpc	r9, r1
    2376:	98 f4       	brcc	.+38     	; 0x239e <main+0x88e>
	{
		tx_string[cnt+4] = crc[0];
    2378:	80 91 2d 05 	lds	r24, 0x052D
    237c:	fe 01       	movw	r30, r28
    237e:	ee 0d       	add	r30, r14
    2380:	ff 1d       	adc	r31, r15
    2382:	82 a3       	std	Z+34, r24	; 0x22
		tx_string[cnt+3] = '0';
    2384:	80 e3       	ldi	r24, 0x30	; 48
    2386:	fe 01       	movw	r30, r28
    2388:	ee 0d       	add	r30, r14
    238a:	ff 1d       	adc	r31, r15
    238c:	81 a3       	std	Z+33, r24	; 0x21
		tx_string[cnt+2] = '0';
    238e:	fe 01       	movw	r30, r28
    2390:	ee 0d       	add	r30, r14
    2392:	ff 1d       	adc	r31, r15
    2394:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';
    2396:	fe 01       	movw	r30, r28
    2398:	ec 0d       	add	r30, r12
    239a:	fd 1d       	adc	r31, r13
    239c:	86 8f       	std	Z+30, r24	; 0x1e
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    239e:	c4 01       	movw	r24, r8
    23a0:	40 97       	sbiw	r24, 0x10	; 16
    23a2:	80 3f       	cpi	r24, 0xF0	; 240
    23a4:	91 05       	cpc	r25, r1
    23a6:	b8 f4       	brcc	.+46     	; 0x23d6 <main+0x8c6>
	{
		tx_string[cnt+4] = crc[1];
    23a8:	ad e2       	ldi	r26, 0x2D	; 45
    23aa:	b5 e0       	ldi	r27, 0x05	; 5
    23ac:	11 96       	adiw	r26, 0x01	; 1
    23ae:	8c 91       	ld	r24, X
    23b0:	11 97       	sbiw	r26, 0x01	; 1
    23b2:	fe 01       	movw	r30, r28
    23b4:	ee 0d       	add	r30, r14
    23b6:	ff 1d       	adc	r31, r15
    23b8:	82 a3       	std	Z+34, r24	; 0x22
		tx_string[cnt+3] = crc[0];
    23ba:	8c 91       	ld	r24, X
    23bc:	fe 01       	movw	r30, r28
    23be:	ee 0d       	add	r30, r14
    23c0:	ff 1d       	adc	r31, r15
    23c2:	81 a3       	std	Z+33, r24	; 0x21
		tx_string[cnt+2] = '0';
    23c4:	80 e3       	ldi	r24, 0x30	; 48
    23c6:	fe 01       	movw	r30, r28
    23c8:	ee 0d       	add	r30, r14
    23ca:	ff 1d       	adc	r31, r15
    23cc:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';		
    23ce:	fe 01       	movw	r30, r28
    23d0:	ec 0d       	add	r30, r12
    23d2:	fd 1d       	adc	r31, r13
    23d4:	86 8f       	std	Z+30, r24	; 0x1e
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    23d6:	c4 01       	movw	r24, r8
    23d8:	9a 95       	dec	r25
    23da:	81 15       	cp	r24, r1
    23dc:	9f 40       	sbci	r25, 0x0F	; 15
    23de:	b8 f4       	brcc	.+46     	; 0x240e <main+0x8fe>
	{
		tx_string[cnt+4] = crc[2];
    23e0:	ed e2       	ldi	r30, 0x2D	; 45
    23e2:	f5 e0       	ldi	r31, 0x05	; 5
    23e4:	82 81       	ldd	r24, Z+2	; 0x02
    23e6:	de 01       	movw	r26, r28
    23e8:	ae 0d       	add	r26, r14
    23ea:	bf 1d       	adc	r27, r15
    23ec:	92 96       	adiw	r26, 0x22	; 34
    23ee:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[1];
    23f0:	81 81       	ldd	r24, Z+1	; 0x01
    23f2:	de 01       	movw	r26, r28
    23f4:	ae 0d       	add	r26, r14
    23f6:	bf 1d       	adc	r27, r15
    23f8:	91 96       	adiw	r26, 0x21	; 33
    23fa:	8c 93       	st	X, r24
    23fc:	91 97       	sbiw	r26, 0x21	; 33
		tx_string[cnt+2] = crc[0];
    23fe:	80 81       	ld	r24, Z
    2400:	fd 01       	movw	r30, r26
    2402:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';		
    2404:	80 e3       	ldi	r24, 0x30	; 48
    2406:	fe 01       	movw	r30, r28
    2408:	ec 0d       	add	r30, r12
    240a:	fd 1d       	adc	r31, r13
    240c:	86 8f       	std	Z+30, r24	; 0x1e
	}
	if(crcXmodem >= 0x1000)
    240e:	81 14       	cp	r8, r1
    2410:	f0 e1       	ldi	r31, 0x10	; 16
    2412:	9f 06       	cpc	r9, r31
    2414:	c0 f0       	brcs	.+48     	; 0x2446 <main+0x936>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    2416:	de 01       	movw	r26, r28
    2418:	ac 0d       	add	r26, r12
    241a:	bd 1d       	adc	r27, r13
    241c:	ed e2       	ldi	r30, 0x2D	; 45
    241e:	f5 e0       	ldi	r31, 0x05	; 5
    2420:	80 81       	ld	r24, Z
    2422:	5e 96       	adiw	r26, 0x1e	; 30
    2424:	8c 93       	st	X, r24
		tx_string[cnt+2] = crc[1];
    2426:	81 81       	ldd	r24, Z+1	; 0x01
    2428:	de 01       	movw	r26, r28
    242a:	ae 0d       	add	r26, r14
    242c:	bf 1d       	adc	r27, r15
    242e:	90 96       	adiw	r26, 0x20	; 32
    2430:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[2];
    2432:	82 81       	ldd	r24, Z+2	; 0x02
    2434:	de 01       	movw	r26, r28
    2436:	ae 0d       	add	r26, r14
    2438:	bf 1d       	adc	r27, r15
    243a:	91 96       	adiw	r26, 0x21	; 33
    243c:	8c 93       	st	X, r24
    243e:	91 97       	sbiw	r26, 0x21	; 33
		tx_string[cnt+4] = crc[3];
    2440:	83 81       	ldd	r24, Z+3	; 0x03
    2442:	fd 01       	movw	r30, r26
    2444:	82 a3       	std	Z+34, r24	; 0x22
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    2446:	c7 01       	movw	r24, r14
    2448:	05 96       	adiw	r24, 0x05	; 5
    244a:	fe 01       	movw	r30, r28
    244c:	e8 0f       	add	r30, r24
    244e:	f9 1f       	adc	r31, r25
    2450:	2d e0       	ldi	r18, 0x0D	; 13
    2452:	26 8f       	std	Z+30, r18	; 0x1e
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    2454:	99 23       	and	r25, r25
    2456:	0c f4       	brge	.+2      	; 0x245a <main+0x94a>
    2458:	ce c3       	rjmp	.+1948   	; 0x2bf6 <main+0x10e6>
    245a:	fe 01       	movw	r30, r28
    245c:	7e 96       	adiw	r30, 0x1e	; 30
    245e:	a7 01       	movw	r20, r14
    2460:	4a 5f       	subi	r20, 0xFA	; 250
    2462:	5f 4f       	sbci	r21, 0xFF	; 255
    2464:	4e 0f       	add	r20, r30
    2466:	5f 1f       	adc	r21, r31
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    2468:	90 e0       	ldi	r25, 0x00	; 0
	{
		uart_putchar(tx_string[i]);
    246a:	21 91       	ld	r18, Z+
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    246c:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    246e:	30 91 56 05 	lds	r19, 0x0556
    2472:	a5 e5       	ldi	r26, 0x55	; 85
    2474:	b5 e0       	ldi	r27, 0x05	; 5
    2476:	8c 91       	ld	r24, X
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    2478:	38 13       	cpse	r19, r24
    247a:	05 c0       	rjmp	.+10     	; 0x2486 <main+0x976>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    247c:	a1 ec       	ldi	r26, 0xC1	; 193
    247e:	b0 e0       	ldi	r27, 0x00	; 0
    2480:	8c 91       	ld	r24, X
    2482:	80 62       	ori	r24, 0x20	; 32
    2484:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    2486:	a5 e5       	ldi	r26, 0x55	; 85
    2488:	b5 e0       	ldi	r27, 0x05	; 5
    248a:	8c 91       	ld	r24, X
    248c:	a0 91 58 05 	lds	r26, 0x0558
    2490:	b0 91 59 05 	lds	r27, 0x0559
    2494:	a8 0f       	add	r26, r24
    2496:	b1 1d       	adc	r27, r1
    2498:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    249a:	a5 e5       	ldi	r26, 0x55	; 85
    249c:	b5 e0       	ldi	r27, 0x05	; 5
    249e:	8c 91       	ld	r24, X
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    24a0:	68 2f       	mov	r22, r24
    24a2:	70 e0       	ldi	r23, 0x00	; 0
    24a4:	20 91 57 05 	lds	r18, 0x0557
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	21 50       	subi	r18, 0x01	; 1
    24ac:	31 09       	sbc	r19, r1
    24ae:	62 17       	cp	r22, r18
    24b0:	73 07       	cpc	r23, r19
    24b2:	11 f0       	breq	.+4      	; 0x24b8 <main+0x9a8>
    24b4:	8f 5f       	subi	r24, 0xFF	; 255
    24b6:	01 c0       	rjmp	.+2      	; 0x24ba <main+0x9aa>
    24b8:	89 2f       	mov	r24, r25
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    24ba:	a5 e5       	ldi	r26, 0x55	; 85
    24bc:	b5 e0       	ldi	r27, 0x05	; 5
    24be:	8c 93       	st	X, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    24c0:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    24c2:	e4 17       	cp	r30, r20
    24c4:	f5 07       	cpc	r31, r21
    24c6:	89 f6       	brne	.-94     	; 0x246a <main+0x95a>
    24c8:	96 c3       	rjmp	.+1836   	; 0x2bf6 <main+0x10e6>
		ftoa(ch0.Igain, tx_string);
		printStatus(tx_string);
		break;
		
		case 107:	// Send Dgain ch0
		ftoa(ch0.Dgain, tx_string);
    24ca:	60 91 e8 02 	lds	r22, 0x02E8
    24ce:	70 91 e9 02 	lds	r23, 0x02E9
    24d2:	80 91 ea 02 	lds	r24, 0x02EA
    24d6:	90 91 eb 02 	lds	r25, 0x02EB
    24da:	4b 2d       	mov	r20, r11
    24dc:	55 2d       	mov	r21, r5
    24de:	91 da       	rcall	.-2782   	; 0x1a02 <ftoa>
		printStatus(tx_string);
    24e0:	8b 2d       	mov	r24, r11
    24e2:	95 2d       	mov	r25, r5
    24e4:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    24e8:	86 c3       	rjmp	.+1804   	; 0x2bf6 <main+0x10e6>
		break;
		
		case 108:	// Send TemperatureWindow
		ftoa(ch0.tempErrorWin, tx_string);
    24ea:	60 91 18 03 	lds	r22, 0x0318
    24ee:	70 91 19 03 	lds	r23, 0x0319
    24f2:	80 91 1a 03 	lds	r24, 0x031A
    24f6:	90 91 1b 03 	lds	r25, 0x031B
    24fa:	4b 2d       	mov	r20, r11
    24fc:	55 2d       	mov	r21, r5
    24fe:	81 da       	rcall	.-2814   	; 0x1a02 <ftoa>
		printStatus(tx_string);
    2500:	8b 2d       	mov	r24, r11
    2502:	95 2d       	mov	r25, r5
    2504:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    2508:	76 c3       	rjmp	.+1772   	; 0x2bf6 <main+0x10e6>
		break;
		
		case 109:	// Send SettleTimeTemperature
		itoa(ch0.tempSettleTime, tx_string, 10);
    250a:	80 91 1e 03 	lds	r24, 0x031E
    250e:	90 91 1f 03 	lds	r25, 0x031F
    2512:	4a e0       	ldi	r20, 0x0A	; 10
    2514:	6b 2d       	mov	r22, r11
    2516:	75 2d       	mov	r23, r5
    2518:	0e 94 99 24 	call	0x4932	; 0x4932 <__itoa_ncheck>
		printStatus(tx_string);
    251c:	8b 2d       	mov	r24, r11
    251e:	95 2d       	mov	r25, r5
    2520:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    2524:	68 c3       	rjmp	.+1744   	; 0x2bf6 <main+0x10e6>
		break;
		
		case 110:	// Send Temperature stable status
		switch(ch0.tempStable)
    2526:	80 91 20 03 	lds	r24, 0x0320
    252a:	90 91 21 03 	lds	r25, 0x0321
    252e:	00 97       	sbiw	r24, 0x00	; 0
    2530:	19 f0       	breq	.+6      	; 0x2538 <main+0xa28>
    2532:	01 97       	sbiw	r24, 0x01	; 1
    2534:	31 f0       	breq	.+12     	; 0x2542 <main+0xa32>
    2536:	5f c3       	rjmp	.+1726   	; 0x2bf6 <main+0x10e6>
		{
			case 0:
			printStatus("0");
    2538:	88 e2       	ldi	r24, 0x28	; 40
    253a:	91 e0       	ldi	r25, 0x01	; 1
    253c:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    2540:	5a c3       	rjmp	.+1716   	; 0x2bf6 <main+0x10e6>
			break;
				
			case 1:
			printStatus("1");
    2542:	8a e2       	ldi	r24, 0x2A	; 42
    2544:	91 e0       	ldi	r25, 0x01	; 1
    2546:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    254a:	55 c3       	rjmp	.+1706   	; 0x2bf6 <main+0x10e6>
		}
		break;
		
		// *** Channel 1 ***
		case 200:	// Send sensor 1 temperature
		ftoa(ch1.TempSensor, tx_string);
    254c:	60 91 65 02 	lds	r22, 0x0265
    2550:	70 91 66 02 	lds	r23, 0x0266
    2554:	80 91 67 02 	lds	r24, 0x0267
    2558:	90 91 68 02 	lds	r25, 0x0268
    255c:	4b 2d       	mov	r20, r11
    255e:	55 2d       	mov	r21, r5
    2560:	50 da       	rcall	.-2912   	; 0x1a02 <ftoa>
		printStatus(tx_string);
    2562:	8b 2d       	mov	r24, r11
    2564:	95 2d       	mov	r25, r5
    2566:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    256a:	45 c3       	rjmp	.+1674   	; 0x2bf6 <main+0x10e6>
		break;
		
		case 201:	// Send P part of PID-controller 1
		ftoa(ch1.P_err, tx_string);
    256c:	60 91 69 02 	lds	r22, 0x0269
    2570:	70 91 6a 02 	lds	r23, 0x026A
    2574:	80 91 6b 02 	lds	r24, 0x026B
    2578:	90 91 6c 02 	lds	r25, 0x026C
    257c:	4b 2d       	mov	r20, r11
    257e:	55 2d       	mov	r21, r5
    2580:	40 da       	rcall	.-2944   	; 0x1a02 <ftoa>
		printStatus(tx_string);
    2582:	8b 2d       	mov	r24, r11
    2584:	95 2d       	mov	r25, r5
    2586:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    258a:	35 c3       	rjmp	.+1642   	; 0x2bf6 <main+0x10e6>
		break;
		
		case 202:	// Send I part of PID-controller 1
		ftoa(ch1.I_err, tx_string);
    258c:	60 91 6d 02 	lds	r22, 0x026D
    2590:	70 91 6e 02 	lds	r23, 0x026E
    2594:	80 91 6f 02 	lds	r24, 0x026F
    2598:	90 91 70 02 	lds	r25, 0x0270
    259c:	4b 2d       	mov	r20, r11
    259e:	55 2d       	mov	r21, r5
    25a0:	30 da       	rcall	.-2976   	; 0x1a02 <ftoa>
		printStatus(tx_string);
    25a2:	8b 2d       	mov	r24, r11
    25a4:	95 2d       	mov	r25, r5
    25a6:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    25aa:	25 c3       	rjmp	.+1610   	; 0x2bf6 <main+0x10e6>
		break;
				
		case 203:	// Send D part of PID-controller 1
		ftoa(ch1.D_err, tx_string);
    25ac:	60 91 71 02 	lds	r22, 0x0271
    25b0:	70 91 72 02 	lds	r23, 0x0272
    25b4:	80 91 73 02 	lds	r24, 0x0273
    25b8:	90 91 74 02 	lds	r25, 0x0274
    25bc:	4b 2d       	mov	r20, r11
    25be:	55 2d       	mov	r21, r5
    25c0:	20 da       	rcall	.-3008   	; 0x1a02 <ftoa>
		printStatus(tx_string);
    25c2:	8b 2d       	mov	r24, r11
    25c4:	95 2d       	mov	r25, r5
    25c6:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    25ca:	15 c3       	rjmp	.+1578   	; 0x2bf6 <main+0x10e6>
		break;
		
		case 204:	// Send ch1.TempSetPoint
		ftoa(ch1.TempSetPoint, tx_string);
    25cc:	60 91 61 02 	lds	r22, 0x0261
    25d0:	70 91 62 02 	lds	r23, 0x0262
    25d4:	80 91 63 02 	lds	r24, 0x0263
    25d8:	90 91 64 02 	lds	r25, 0x0264
    25dc:	4b 2d       	mov	r20, r11
    25de:	55 2d       	mov	r21, r5
    25e0:	10 da       	rcall	.-3040   	; 0x1a02 <ftoa>
		printStatus(tx_string);
    25e2:	8b 2d       	mov	r24, r11
    25e4:	95 2d       	mov	r25, r5
    25e6:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    25ea:	05 c3       	rjmp	.+1546   	; 0x2bf6 <main+0x10e6>
		break;
		
		case 205:	// Send Pgain ch1
		ftoa(ch1.Pgain, tx_string);
    25ec:	60 91 7d 02 	lds	r22, 0x027D
    25f0:	70 91 7e 02 	lds	r23, 0x027E
    25f4:	80 91 7f 02 	lds	r24, 0x027F
    25f8:	90 91 80 02 	lds	r25, 0x0280
    25fc:	4b 2d       	mov	r20, r11
    25fe:	55 2d       	mov	r21, r5
    2600:	00 da       	rcall	.-3072   	; 0x1a02 <ftoa>
		printStatus(tx_string);
    2602:	8b 2d       	mov	r24, r11
    2604:	95 2d       	mov	r25, r5
    2606:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    260a:	f5 c2       	rjmp	.+1514   	; 0x2bf6 <main+0x10e6>
		break;
		
		case 206:	// Send Igain ch1
		ftoa(ch1.Igain, tx_string);
    260c:	60 91 81 02 	lds	r22, 0x0281
    2610:	70 91 82 02 	lds	r23, 0x0282
    2614:	80 91 83 02 	lds	r24, 0x0283
    2618:	90 91 84 02 	lds	r25, 0x0284
    261c:	4b 2d       	mov	r20, r11
    261e:	55 2d       	mov	r21, r5
    2620:	f0 d9       	rcall	.-3104   	; 0x1a02 <ftoa>
		printStatus(tx_string);
    2622:	8b 2d       	mov	r24, r11
    2624:	95 2d       	mov	r25, r5
    2626:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    262a:	e5 c2       	rjmp	.+1482   	; 0x2bf6 <main+0x10e6>
		break;
		
		case 207:	// Send Dgain ch1
		ftoa(ch1.Dgain, tx_string);
    262c:	60 91 85 02 	lds	r22, 0x0285
    2630:	70 91 86 02 	lds	r23, 0x0286
    2634:	80 91 87 02 	lds	r24, 0x0287
    2638:	90 91 88 02 	lds	r25, 0x0288
    263c:	4b 2d       	mov	r20, r11
    263e:	55 2d       	mov	r21, r5
    2640:	e0 d9       	rcall	.-3136   	; 0x1a02 <ftoa>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    2642:	81 e2       	ldi	r24, 0x21	; 33
    2644:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    2646:	6c 96       	adiw	r28, 0x1c	; 28
    2648:	ee ad       	ldd	r30, Y+62	; 0x3e
    264a:	ff ad       	ldd	r31, Y+63	; 0x3f
    264c:	6c 97       	sbiw	r28, 0x1c	; 28
    264e:	81 81       	ldd	r24, Z+1	; 0x01
    2650:	8f 8f       	std	Y+31, r24	; 0x1f
    2652:	82 81       	ldd	r24, Z+2	; 0x02
    2654:	88 a3       	std	Y+32, r24	; 0x20
    2656:	83 81       	ldd	r24, Z+3	; 0x03
    2658:	89 a3       	std	Y+33, r24	; 0x21
    265a:	eb 2d       	mov	r30, r11
    265c:	f5 2d       	mov	r31, r5
    265e:	de 01       	movw	r26, r28
    2660:	92 96       	adiw	r26, 0x22	; 34
    2662:	e1 2c       	mov	r14, r1
    2664:	f1 2c       	mov	r15, r1
    2666:	af 01       	movw	r20, r30
    2668:	07 c0       	rjmp	.+14     	; 0x2678 <main+0xb68>
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    266a:	fa 01       	movw	r30, r20
    266c:	81 91       	ld	r24, Z+
    266e:	af 01       	movw	r20, r30
    2670:	8d 93       	st	X+, r24
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    2672:	ff ef       	ldi	r31, 0xFF	; 255
    2674:	ef 1a       	sub	r14, r31
    2676:	ff 0a       	sbc	r15, r31
    2678:	6e 96       	adiw	r28, 0x1e	; 30
    267a:	ee ad       	ldd	r30, Y+62	; 0x3e
    267c:	ff ad       	ldd	r31, Y+63	; 0x3f
    267e:	6e 97       	sbiw	r28, 0x1e	; 30
    2680:	01 90       	ld	r0, Z+
    2682:	00 20       	and	r0, r0
    2684:	e9 f7       	brne	.-6      	; 0x2680 <main+0xb70>
    2686:	cf 01       	movw	r24, r30
    2688:	6e 96       	adiw	r28, 0x1e	; 30
    268a:	2e ad       	ldd	r18, Y+62	; 0x3e
    268c:	3f ad       	ldd	r19, Y+63	; 0x3f
    268e:	6e 97       	sbiw	r28, 0x1e	; 30
    2690:	82 1b       	sub	r24, r18
    2692:	93 0b       	sbc	r25, r19
    2694:	02 96       	adiw	r24, 0x02	; 2
    2696:	e8 16       	cp	r14, r24
    2698:	f9 06       	cpc	r15, r25
    269a:	38 f3       	brcs	.-50     	; 0x266a <main+0xb5a>
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    269c:	67 01       	movw	r12, r14
    269e:	3f ef       	ldi	r19, 0xFF	; 255
    26a0:	c3 1a       	sub	r12, r19
    26a2:	d3 0a       	sbc	r13, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    26a4:	1c 14       	cp	r1, r12
    26a6:	1d 04       	cpc	r1, r13
    26a8:	14 f0       	brlt	.+4      	; 0x26ae <main+0xb9e>
    26aa:	0c 94 10 22 	jmp	0x4420	; 0x4420 <main+0x2910>
    26ae:	fe 01       	movw	r30, r28
    26b0:	7e 96       	adiw	r30, 0x1e	; 30
    26b2:	b6 01       	movw	r22, r12
    26b4:	6e 0f       	add	r22, r30
    26b6:	7f 1f       	adc	r23, r31
    26b8:	80 e0       	ldi	r24, 0x00	; 0
    26ba:	90 e0       	ldi	r25, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    26bc:	b8 e0       	ldi	r27, 0x08	; 8
    26be:	91 2c       	mov	r9, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    26c0:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    26c2:	29 2f       	mov	r18, r25
    26c4:	33 27       	eor	r19, r19
    26c6:	27 fd       	sbrc	r18, 7
    26c8:	3a 95       	dec	r19
    26ca:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    26cc:	32 2f       	mov	r19, r18
    26ce:	22 27       	eor	r18, r18
    26d0:	4b 2f       	mov	r20, r27
    26d2:	59 2d       	mov	r21, r9
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    26d4:	33 23       	and	r19, r19
    26d6:	3c f4       	brge	.+14     	; 0x26e6 <main+0xbd6>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    26d8:	22 0f       	add	r18, r18
    26da:	33 1f       	adc	r19, r19
    26dc:	a1 e2       	ldi	r26, 0x21	; 33
    26de:	2a 27       	eor	r18, r26
    26e0:	a0 e1       	ldi	r26, 0x10	; 16
    26e2:	3a 27       	eor	r19, r26
    26e4:	02 c0       	rjmp	.+4      	; 0x26ea <main+0xbda>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    26e6:	22 0f       	add	r18, r18
    26e8:	33 1f       	adc	r19, r19
    26ea:	41 50       	subi	r20, 0x01	; 1
    26ec:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    26ee:	91 f7       	brne	.-28     	; 0x26d4 <main+0xbc4>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    26f0:	98 2f       	mov	r25, r24
    26f2:	88 27       	eor	r24, r24
    26f4:	82 27       	eor	r24, r18
    26f6:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    26f8:	e6 17       	cp	r30, r22
    26fa:	f7 07       	cpc	r31, r23
    26fc:	09 f7       	brne	.-62     	; 0x26c0 <main+0xbb0>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    26fe:	4c 01       	movw	r8, r24
    2700:	40 e1       	ldi	r20, 0x10	; 16
    2702:	6d e2       	ldi	r22, 0x2D	; 45
    2704:	75 e0       	ldi	r23, 0x05	; 5
    2706:	0e 94 99 24 	call	0x4932	; 0x4932 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    270a:	8d e2       	ldi	r24, 0x2D	; 45
    270c:	95 e0       	ldi	r25, 0x05	; 5
    270e:	0e 94 8f 24 	call	0x491e	; 0x491e <strupr>
	if(crcXmodem < 0x10)
    2712:	b0 e1       	ldi	r27, 0x10	; 16
    2714:	8b 16       	cp	r8, r27
    2716:	91 04       	cpc	r9, r1
    2718:	98 f4       	brcc	.+38     	; 0x2740 <main+0xc30>
	{
		tx_string[cnt+4] = crc[0];
    271a:	80 91 2d 05 	lds	r24, 0x052D
    271e:	fe 01       	movw	r30, r28
    2720:	ee 0d       	add	r30, r14
    2722:	ff 1d       	adc	r31, r15
    2724:	82 a3       	std	Z+34, r24	; 0x22
		tx_string[cnt+3] = '0';
    2726:	80 e3       	ldi	r24, 0x30	; 48
    2728:	fe 01       	movw	r30, r28
    272a:	ee 0d       	add	r30, r14
    272c:	ff 1d       	adc	r31, r15
    272e:	81 a3       	std	Z+33, r24	; 0x21
		tx_string[cnt+2] = '0';
    2730:	fe 01       	movw	r30, r28
    2732:	ee 0d       	add	r30, r14
    2734:	ff 1d       	adc	r31, r15
    2736:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';
    2738:	fe 01       	movw	r30, r28
    273a:	ec 0d       	add	r30, r12
    273c:	fd 1d       	adc	r31, r13
    273e:	86 8f       	std	Z+30, r24	; 0x1e
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    2740:	c4 01       	movw	r24, r8
    2742:	40 97       	sbiw	r24, 0x10	; 16
    2744:	80 3f       	cpi	r24, 0xF0	; 240
    2746:	91 05       	cpc	r25, r1
    2748:	b8 f4       	brcc	.+46     	; 0x2778 <main+0xc68>
	{
		tx_string[cnt+4] = crc[1];
    274a:	ad e2       	ldi	r26, 0x2D	; 45
    274c:	b5 e0       	ldi	r27, 0x05	; 5
    274e:	11 96       	adiw	r26, 0x01	; 1
    2750:	8c 91       	ld	r24, X
    2752:	11 97       	sbiw	r26, 0x01	; 1
    2754:	fe 01       	movw	r30, r28
    2756:	ee 0d       	add	r30, r14
    2758:	ff 1d       	adc	r31, r15
    275a:	82 a3       	std	Z+34, r24	; 0x22
		tx_string[cnt+3] = crc[0];
    275c:	8c 91       	ld	r24, X
    275e:	fe 01       	movw	r30, r28
    2760:	ee 0d       	add	r30, r14
    2762:	ff 1d       	adc	r31, r15
    2764:	81 a3       	std	Z+33, r24	; 0x21
		tx_string[cnt+2] = '0';
    2766:	80 e3       	ldi	r24, 0x30	; 48
    2768:	fe 01       	movw	r30, r28
    276a:	ee 0d       	add	r30, r14
    276c:	ff 1d       	adc	r31, r15
    276e:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';		
    2770:	fe 01       	movw	r30, r28
    2772:	ec 0d       	add	r30, r12
    2774:	fd 1d       	adc	r31, r13
    2776:	86 8f       	std	Z+30, r24	; 0x1e
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    2778:	c4 01       	movw	r24, r8
    277a:	9a 95       	dec	r25
    277c:	81 15       	cp	r24, r1
    277e:	9f 40       	sbci	r25, 0x0F	; 15
    2780:	b8 f4       	brcc	.+46     	; 0x27b0 <main+0xca0>
	{
		tx_string[cnt+4] = crc[2];
    2782:	ed e2       	ldi	r30, 0x2D	; 45
    2784:	f5 e0       	ldi	r31, 0x05	; 5
    2786:	82 81       	ldd	r24, Z+2	; 0x02
    2788:	de 01       	movw	r26, r28
    278a:	ae 0d       	add	r26, r14
    278c:	bf 1d       	adc	r27, r15
    278e:	92 96       	adiw	r26, 0x22	; 34
    2790:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[1];
    2792:	81 81       	ldd	r24, Z+1	; 0x01
    2794:	de 01       	movw	r26, r28
    2796:	ae 0d       	add	r26, r14
    2798:	bf 1d       	adc	r27, r15
    279a:	91 96       	adiw	r26, 0x21	; 33
    279c:	8c 93       	st	X, r24
    279e:	91 97       	sbiw	r26, 0x21	; 33
		tx_string[cnt+2] = crc[0];
    27a0:	80 81       	ld	r24, Z
    27a2:	fd 01       	movw	r30, r26
    27a4:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';		
    27a6:	80 e3       	ldi	r24, 0x30	; 48
    27a8:	fe 01       	movw	r30, r28
    27aa:	ec 0d       	add	r30, r12
    27ac:	fd 1d       	adc	r31, r13
    27ae:	86 8f       	std	Z+30, r24	; 0x1e
	}
	if(crcXmodem >= 0x1000)
    27b0:	81 14       	cp	r8, r1
    27b2:	f0 e1       	ldi	r31, 0x10	; 16
    27b4:	9f 06       	cpc	r9, r31
    27b6:	c0 f0       	brcs	.+48     	; 0x27e8 <main+0xcd8>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    27b8:	de 01       	movw	r26, r28
    27ba:	ac 0d       	add	r26, r12
    27bc:	bd 1d       	adc	r27, r13
    27be:	ed e2       	ldi	r30, 0x2D	; 45
    27c0:	f5 e0       	ldi	r31, 0x05	; 5
    27c2:	80 81       	ld	r24, Z
    27c4:	5e 96       	adiw	r26, 0x1e	; 30
    27c6:	8c 93       	st	X, r24
		tx_string[cnt+2] = crc[1];
    27c8:	81 81       	ldd	r24, Z+1	; 0x01
    27ca:	de 01       	movw	r26, r28
    27cc:	ae 0d       	add	r26, r14
    27ce:	bf 1d       	adc	r27, r15
    27d0:	90 96       	adiw	r26, 0x20	; 32
    27d2:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[2];
    27d4:	82 81       	ldd	r24, Z+2	; 0x02
    27d6:	de 01       	movw	r26, r28
    27d8:	ae 0d       	add	r26, r14
    27da:	bf 1d       	adc	r27, r15
    27dc:	91 96       	adiw	r26, 0x21	; 33
    27de:	8c 93       	st	X, r24
    27e0:	91 97       	sbiw	r26, 0x21	; 33
		tx_string[cnt+4] = crc[3];
    27e2:	83 81       	ldd	r24, Z+3	; 0x03
    27e4:	fd 01       	movw	r30, r26
    27e6:	82 a3       	std	Z+34, r24	; 0x22
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    27e8:	c7 01       	movw	r24, r14
    27ea:	05 96       	adiw	r24, 0x05	; 5
    27ec:	fe 01       	movw	r30, r28
    27ee:	e8 0f       	add	r30, r24
    27f0:	f9 1f       	adc	r31, r25
    27f2:	2d e0       	ldi	r18, 0x0D	; 13
    27f4:	26 8f       	std	Z+30, r18	; 0x1e
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    27f6:	99 23       	and	r25, r25
    27f8:	0c f4       	brge	.+2      	; 0x27fc <main+0xcec>
    27fa:	fd c1       	rjmp	.+1018   	; 0x2bf6 <main+0x10e6>
    27fc:	fe 01       	movw	r30, r28
    27fe:	7e 96       	adiw	r30, 0x1e	; 30
    2800:	a7 01       	movw	r20, r14
    2802:	4a 5f       	subi	r20, 0xFA	; 250
    2804:	5f 4f       	sbci	r21, 0xFF	; 255
    2806:	4e 0f       	add	r20, r30
    2808:	5f 1f       	adc	r21, r31
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    280a:	90 e0       	ldi	r25, 0x00	; 0
	{
		uart_putchar(tx_string[i]);
    280c:	21 91       	ld	r18, Z+
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    280e:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    2810:	30 91 56 05 	lds	r19, 0x0556
    2814:	a5 e5       	ldi	r26, 0x55	; 85
    2816:	b5 e0       	ldi	r27, 0x05	; 5
    2818:	8c 91       	ld	r24, X
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    281a:	38 13       	cpse	r19, r24
    281c:	05 c0       	rjmp	.+10     	; 0x2828 <main+0xd18>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    281e:	a1 ec       	ldi	r26, 0xC1	; 193
    2820:	b0 e0       	ldi	r27, 0x00	; 0
    2822:	8c 91       	ld	r24, X
    2824:	80 62       	ori	r24, 0x20	; 32
    2826:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    2828:	a5 e5       	ldi	r26, 0x55	; 85
    282a:	b5 e0       	ldi	r27, 0x05	; 5
    282c:	8c 91       	ld	r24, X
    282e:	a0 91 58 05 	lds	r26, 0x0558
    2832:	b0 91 59 05 	lds	r27, 0x0559
    2836:	a8 0f       	add	r26, r24
    2838:	b1 1d       	adc	r27, r1
    283a:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    283c:	a5 e5       	ldi	r26, 0x55	; 85
    283e:	b5 e0       	ldi	r27, 0x05	; 5
    2840:	8c 91       	ld	r24, X
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    2842:	68 2f       	mov	r22, r24
    2844:	70 e0       	ldi	r23, 0x00	; 0
    2846:	20 91 57 05 	lds	r18, 0x0557
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	21 50       	subi	r18, 0x01	; 1
    284e:	31 09       	sbc	r19, r1
    2850:	62 17       	cp	r22, r18
    2852:	73 07       	cpc	r23, r19
    2854:	11 f0       	breq	.+4      	; 0x285a <main+0xd4a>
    2856:	8f 5f       	subi	r24, 0xFF	; 255
    2858:	01 c0       	rjmp	.+2      	; 0x285c <main+0xd4c>
    285a:	89 2f       	mov	r24, r25
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    285c:	a5 e5       	ldi	r26, 0x55	; 85
    285e:	b5 e0       	ldi	r27, 0x05	; 5
    2860:	8c 93       	st	X, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    2862:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    2864:	e4 17       	cp	r30, r20
    2866:	f5 07       	cpc	r31, r21
    2868:	89 f6       	brne	.-94     	; 0x280c <main+0xcfc>
    286a:	c5 c1       	rjmp	.+906    	; 0x2bf6 <main+0x10e6>
		ftoa(ch1.Dgain, tx_string);
		printStatus(tx_string);
		break;
		
		case 208:	// Send TemperatureWindow
		ftoa(ch1.tempErrorWin, tx_string);
    286c:	60 91 b5 02 	lds	r22, 0x02B5
    2870:	70 91 b6 02 	lds	r23, 0x02B6
    2874:	80 91 b7 02 	lds	r24, 0x02B7
    2878:	90 91 b8 02 	lds	r25, 0x02B8
    287c:	4b 2d       	mov	r20, r11
    287e:	55 2d       	mov	r21, r5
    2880:	c0 d8       	rcall	.-3712   	; 0x1a02 <ftoa>
		printStatus(tx_string);
    2882:	8b 2d       	mov	r24, r11
    2884:	95 2d       	mov	r25, r5
    2886:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    288a:	b5 c1       	rjmp	.+874    	; 0x2bf6 <main+0x10e6>
		break;
		
		case 209:	// Send SettleTimeTemperature
		itoa(ch1.tempSettleTime, tx_string, 10);
    288c:	80 91 bb 02 	lds	r24, 0x02BB
    2890:	90 91 bc 02 	lds	r25, 0x02BC
    2894:	4a e0       	ldi	r20, 0x0A	; 10
    2896:	6b 2d       	mov	r22, r11
    2898:	75 2d       	mov	r23, r5
    289a:	0e 94 99 24 	call	0x4932	; 0x4932 <__itoa_ncheck>
		printStatus(tx_string);
    289e:	8b 2d       	mov	r24, r11
    28a0:	95 2d       	mov	r25, r5
    28a2:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    28a6:	a7 c1       	rjmp	.+846    	; 0x2bf6 <main+0x10e6>
		break;
		
		case 210:	// Send Temperature stable status
		switch(ch1.tempStable)
    28a8:	80 91 bd 02 	lds	r24, 0x02BD
    28ac:	90 91 be 02 	lds	r25, 0x02BE
    28b0:	00 97       	sbiw	r24, 0x00	; 0
    28b2:	19 f0       	breq	.+6      	; 0x28ba <main+0xdaa>
    28b4:	01 97       	sbiw	r24, 0x01	; 1
    28b6:	31 f0       	breq	.+12     	; 0x28c4 <main+0xdb4>
    28b8:	9e c1       	rjmp	.+828    	; 0x2bf6 <main+0x10e6>
		{
			case 0:
			printStatus("0");
    28ba:	88 e2       	ldi	r24, 0x28	; 40
    28bc:	91 e0       	ldi	r25, 0x01	; 1
    28be:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    28c2:	99 c1       	rjmp	.+818    	; 0x2bf6 <main+0x10e6>
			break;
			
			case 1:
			printStatus("1");
    28c4:	8a e2       	ldi	r24, 0x2A	; 42
    28c6:	91 e0       	ldi	r25, 0x01	; 1
    28c8:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    28cc:	94 c1       	rjmp	.+808    	; 0x2bf6 <main+0x10e6>
		}
		break;		
		
		// *** Channel 2 ***		
		case 300:	// Send sensor 2 temperature
		ftoa(ch2.TempSensor, tx_string);
    28ce:	60 91 02 02 	lds	r22, 0x0202
    28d2:	70 91 03 02 	lds	r23, 0x0203
    28d6:	80 91 04 02 	lds	r24, 0x0204
    28da:	90 91 05 02 	lds	r25, 0x0205
    28de:	4b 2d       	mov	r20, r11
    28e0:	55 2d       	mov	r21, r5
    28e2:	8f d8       	rcall	.-3810   	; 0x1a02 <ftoa>
		printStatus(tx_string);
    28e4:	8b 2d       	mov	r24, r11
    28e6:	95 2d       	mov	r25, r5
    28e8:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    28ec:	84 c1       	rjmp	.+776    	; 0x2bf6 <main+0x10e6>
		break;
		
		case 301:	// Send P part of PID-controller 2
		ftoa(ch2.P_err, tx_string);
    28ee:	60 91 06 02 	lds	r22, 0x0206
    28f2:	70 91 07 02 	lds	r23, 0x0207
    28f6:	80 91 08 02 	lds	r24, 0x0208
    28fa:	90 91 09 02 	lds	r25, 0x0209
    28fe:	4b 2d       	mov	r20, r11
    2900:	55 2d       	mov	r21, r5
    2902:	7f d8       	rcall	.-3842   	; 0x1a02 <ftoa>
		printStatus(tx_string);
    2904:	8b 2d       	mov	r24, r11
    2906:	95 2d       	mov	r25, r5
    2908:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    290c:	74 c1       	rjmp	.+744    	; 0x2bf6 <main+0x10e6>
		break;
		
		case 302:	// Send I part of PID-controller 2
		ftoa(ch2.I_err, tx_string);
    290e:	60 91 0a 02 	lds	r22, 0x020A
    2912:	70 91 0b 02 	lds	r23, 0x020B
    2916:	80 91 0c 02 	lds	r24, 0x020C
    291a:	90 91 0d 02 	lds	r25, 0x020D
    291e:	4b 2d       	mov	r20, r11
    2920:	55 2d       	mov	r21, r5
    2922:	6f d8       	rcall	.-3874   	; 0x1a02 <ftoa>
		printStatus(tx_string);
    2924:	8b 2d       	mov	r24, r11
    2926:	95 2d       	mov	r25, r5
    2928:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    292c:	64 c1       	rjmp	.+712    	; 0x2bf6 <main+0x10e6>
		break;
		
		case 303:	// Send D part of PID-controller 2
		ftoa(ch2.D_err, tx_string);
    292e:	60 91 0e 02 	lds	r22, 0x020E
    2932:	70 91 0f 02 	lds	r23, 0x020F
    2936:	80 91 10 02 	lds	r24, 0x0210
    293a:	90 91 11 02 	lds	r25, 0x0211
    293e:	4b 2d       	mov	r20, r11
    2940:	55 2d       	mov	r21, r5
    2942:	5f d8       	rcall	.-3906   	; 0x1a02 <ftoa>
		printStatus(tx_string);
    2944:	8b 2d       	mov	r24, r11
    2946:	95 2d       	mov	r25, r5
    2948:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    294c:	54 c1       	rjmp	.+680    	; 0x2bf6 <main+0x10e6>
		break;
		
		case 304:	// Send ch2.TempSetPoint
		ftoa(ch2.TempSetPoint, tx_string);
    294e:	60 91 fe 01 	lds	r22, 0x01FE
    2952:	70 91 ff 01 	lds	r23, 0x01FF
    2956:	80 91 00 02 	lds	r24, 0x0200
    295a:	90 91 01 02 	lds	r25, 0x0201
    295e:	4b 2d       	mov	r20, r11
    2960:	55 2d       	mov	r21, r5
    2962:	4f d8       	rcall	.-3938   	; 0x1a02 <ftoa>
		printStatus(tx_string);
    2964:	8b 2d       	mov	r24, r11
    2966:	95 2d       	mov	r25, r5
    2968:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    296c:	44 c1       	rjmp	.+648    	; 0x2bf6 <main+0x10e6>
		break;
		
		case 305:	// Send Pgain ch2
		ftoa(ch2.Pgain, tx_string);
    296e:	60 91 1a 02 	lds	r22, 0x021A
    2972:	70 91 1b 02 	lds	r23, 0x021B
    2976:	80 91 1c 02 	lds	r24, 0x021C
    297a:	90 91 1d 02 	lds	r25, 0x021D
    297e:	4b 2d       	mov	r20, r11
    2980:	55 2d       	mov	r21, r5
    2982:	3f d8       	rcall	.-3970   	; 0x1a02 <ftoa>
		printStatus(tx_string);
    2984:	8b 2d       	mov	r24, r11
    2986:	95 2d       	mov	r25, r5
    2988:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    298c:	34 c1       	rjmp	.+616    	; 0x2bf6 <main+0x10e6>
		break;
		
		case 306:	// Send Igain ch2
		ftoa(ch2.Igain, tx_string);
    298e:	60 91 1e 02 	lds	r22, 0x021E
    2992:	70 91 1f 02 	lds	r23, 0x021F
    2996:	80 91 20 02 	lds	r24, 0x0220
    299a:	90 91 21 02 	lds	r25, 0x0221
    299e:	4b 2d       	mov	r20, r11
    29a0:	55 2d       	mov	r21, r5
    29a2:	2f d8       	rcall	.-4002   	; 0x1a02 <ftoa>
		printStatus(tx_string);
    29a4:	8b 2d       	mov	r24, r11
    29a6:	95 2d       	mov	r25, r5
    29a8:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    29ac:	24 c1       	rjmp	.+584    	; 0x2bf6 <main+0x10e6>
		break;
		
		case 307:	// Send Dgain ch2
		ftoa(ch2.Dgain, tx_string);
    29ae:	60 91 22 02 	lds	r22, 0x0222
    29b2:	70 91 23 02 	lds	r23, 0x0223
    29b6:	80 91 24 02 	lds	r24, 0x0224
    29ba:	90 91 25 02 	lds	r25, 0x0225
    29be:	4b 2d       	mov	r20, r11
    29c0:	55 2d       	mov	r21, r5
    29c2:	1f d8       	rcall	.-4034   	; 0x1a02 <ftoa>
		printStatus(tx_string);
    29c4:	8b 2d       	mov	r24, r11
    29c6:	95 2d       	mov	r25, r5
    29c8:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    29cc:	14 c1       	rjmp	.+552    	; 0x2bf6 <main+0x10e6>
		break;
		
		case 308:	// Send TemperatureWindow
		ftoa(ch2.tempErrorWin, tx_string);
    29ce:	60 91 52 02 	lds	r22, 0x0252
    29d2:	70 91 53 02 	lds	r23, 0x0253
    29d6:	80 91 54 02 	lds	r24, 0x0254
    29da:	90 91 55 02 	lds	r25, 0x0255
    29de:	4b 2d       	mov	r20, r11
    29e0:	55 2d       	mov	r21, r5
    29e2:	0f d8       	rcall	.-4066   	; 0x1a02 <ftoa>
		printStatus(tx_string);
    29e4:	8b 2d       	mov	r24, r11
    29e6:	95 2d       	mov	r25, r5
    29e8:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    29ec:	04 c1       	rjmp	.+520    	; 0x2bf6 <main+0x10e6>
		break;
		
		case 309:	// Send SettleTimeTemperature
		itoa(ch2.tempSettleTime, tx_string, 10);
    29ee:	80 91 58 02 	lds	r24, 0x0258
    29f2:	90 91 59 02 	lds	r25, 0x0259
    29f6:	4a e0       	ldi	r20, 0x0A	; 10
    29f8:	6b 2d       	mov	r22, r11
    29fa:	75 2d       	mov	r23, r5
    29fc:	0e 94 99 24 	call	0x4932	; 0x4932 <__itoa_ncheck>
		printStatus(tx_string);
    2a00:	8b 2d       	mov	r24, r11
    2a02:	95 2d       	mov	r25, r5
    2a04:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    2a08:	f6 c0       	rjmp	.+492    	; 0x2bf6 <main+0x10e6>
		break;
		
		case 310:	// Send Temperature stable status
		switch(ch2.tempStable)
    2a0a:	80 91 5a 02 	lds	r24, 0x025A
    2a0e:	90 91 5b 02 	lds	r25, 0x025B
    2a12:	00 97       	sbiw	r24, 0x00	; 0
    2a14:	19 f0       	breq	.+6      	; 0x2a1c <main+0xf0c>
    2a16:	01 97       	sbiw	r24, 0x01	; 1
    2a18:	31 f0       	breq	.+12     	; 0x2a26 <main+0xf16>
    2a1a:	ed c0       	rjmp	.+474    	; 0x2bf6 <main+0x10e6>
		{
			case 0:
			printStatus("0");
    2a1c:	88 e2       	ldi	r24, 0x28	; 40
    2a1e:	91 e0       	ldi	r25, 0x01	; 1
    2a20:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    2a24:	e8 c0       	rjmp	.+464    	; 0x2bf6 <main+0x10e6>
			break;
			
			case 1:
			printStatus("1");
    2a26:	8a e2       	ldi	r24, 0x2A	; 42
    2a28:	91 e0       	ldi	r25, 0x01	; 1
    2a2a:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    2a2e:	e3 c0       	rjmp	.+454    	; 0x2bf6 <main+0x10e6>
		}
		break;		
		
		// *** Channel 3 ***
		case 400:	// Send sensor 3 temperature
		ftoa(ch3.TempSensor, tx_string);
    2a30:	60 91 9f 01 	lds	r22, 0x019F
    2a34:	70 91 a0 01 	lds	r23, 0x01A0
    2a38:	80 91 a1 01 	lds	r24, 0x01A1
    2a3c:	90 91 a2 01 	lds	r25, 0x01A2
    2a40:	4b 2d       	mov	r20, r11
    2a42:	55 2d       	mov	r21, r5
    2a44:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <ftoa>
		printStatus(tx_string);
    2a48:	8b 2d       	mov	r24, r11
    2a4a:	95 2d       	mov	r25, r5
    2a4c:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    2a50:	d2 c0       	rjmp	.+420    	; 0x2bf6 <main+0x10e6>
		break;
		
		case 401:	// Send P part of PID-controller 3
		ftoa(ch3.P_err, tx_string);
    2a52:	60 91 a3 01 	lds	r22, 0x01A3
    2a56:	70 91 a4 01 	lds	r23, 0x01A4
    2a5a:	80 91 a5 01 	lds	r24, 0x01A5
    2a5e:	90 91 a6 01 	lds	r25, 0x01A6
    2a62:	4b 2d       	mov	r20, r11
    2a64:	55 2d       	mov	r21, r5
    2a66:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <ftoa>
		printStatus(tx_string);
    2a6a:	8b 2d       	mov	r24, r11
    2a6c:	95 2d       	mov	r25, r5
    2a6e:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    2a72:	c1 c0       	rjmp	.+386    	; 0x2bf6 <main+0x10e6>
		break;
		
		case 402:	// Send I part of PID-controller 3
		ftoa(ch3.I_err, tx_string);
    2a74:	60 91 a7 01 	lds	r22, 0x01A7
    2a78:	70 91 a8 01 	lds	r23, 0x01A8
    2a7c:	80 91 a9 01 	lds	r24, 0x01A9
    2a80:	90 91 aa 01 	lds	r25, 0x01AA
    2a84:	4b 2d       	mov	r20, r11
    2a86:	55 2d       	mov	r21, r5
    2a88:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <ftoa>
		printStatus(tx_string);
    2a8c:	8b 2d       	mov	r24, r11
    2a8e:	95 2d       	mov	r25, r5
    2a90:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    2a94:	b0 c0       	rjmp	.+352    	; 0x2bf6 <main+0x10e6>
		break;
		
		case 403:	// Send D part of PID-controller 3
		ftoa(ch3.D_err, tx_string);
    2a96:	60 91 ab 01 	lds	r22, 0x01AB
    2a9a:	70 91 ac 01 	lds	r23, 0x01AC
    2a9e:	80 91 ad 01 	lds	r24, 0x01AD
    2aa2:	90 91 ae 01 	lds	r25, 0x01AE
    2aa6:	4b 2d       	mov	r20, r11
    2aa8:	55 2d       	mov	r21, r5
    2aaa:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <ftoa>
		printStatus(tx_string);
    2aae:	8b 2d       	mov	r24, r11
    2ab0:	95 2d       	mov	r25, r5
    2ab2:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    2ab6:	9f c0       	rjmp	.+318    	; 0x2bf6 <main+0x10e6>
		break;
		
		case 404:	// Send ch3.TempSetPoint
		ftoa(ch3.TempSetPoint, tx_string);
    2ab8:	60 91 9b 01 	lds	r22, 0x019B
    2abc:	70 91 9c 01 	lds	r23, 0x019C
    2ac0:	80 91 9d 01 	lds	r24, 0x019D
    2ac4:	90 91 9e 01 	lds	r25, 0x019E
    2ac8:	4b 2d       	mov	r20, r11
    2aca:	55 2d       	mov	r21, r5
    2acc:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <ftoa>
		printStatus(tx_string);
    2ad0:	8b 2d       	mov	r24, r11
    2ad2:	95 2d       	mov	r25, r5
    2ad4:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    2ad8:	8e c0       	rjmp	.+284    	; 0x2bf6 <main+0x10e6>
		break;
		
		case 405:	// Send Pgain ch3
		ftoa(ch3.Pgain, tx_string);
    2ada:	60 91 b7 01 	lds	r22, 0x01B7
    2ade:	70 91 b8 01 	lds	r23, 0x01B8
    2ae2:	80 91 b9 01 	lds	r24, 0x01B9
    2ae6:	90 91 ba 01 	lds	r25, 0x01BA
    2aea:	4b 2d       	mov	r20, r11
    2aec:	55 2d       	mov	r21, r5
    2aee:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <ftoa>
		printStatus(tx_string);
    2af2:	8b 2d       	mov	r24, r11
    2af4:	95 2d       	mov	r25, r5
    2af6:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    2afa:	7d c0       	rjmp	.+250    	; 0x2bf6 <main+0x10e6>
		break;
		
		case 406:	// Send Igain ch3
		ftoa(ch3.Igain, tx_string);
    2afc:	60 91 bb 01 	lds	r22, 0x01BB
    2b00:	70 91 bc 01 	lds	r23, 0x01BC
    2b04:	80 91 bd 01 	lds	r24, 0x01BD
    2b08:	90 91 be 01 	lds	r25, 0x01BE
    2b0c:	4b 2d       	mov	r20, r11
    2b0e:	55 2d       	mov	r21, r5
    2b10:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <ftoa>
		printStatus(tx_string);
    2b14:	8b 2d       	mov	r24, r11
    2b16:	95 2d       	mov	r25, r5
    2b18:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    2b1c:	6c c0       	rjmp	.+216    	; 0x2bf6 <main+0x10e6>
		break;
		
		case 407:	// Send Dgain ch3
		ftoa(ch3.Dgain, tx_string);
    2b1e:	60 91 bf 01 	lds	r22, 0x01BF
    2b22:	70 91 c0 01 	lds	r23, 0x01C0
    2b26:	80 91 c1 01 	lds	r24, 0x01C1
    2b2a:	90 91 c2 01 	lds	r25, 0x01C2
    2b2e:	4b 2d       	mov	r20, r11
    2b30:	55 2d       	mov	r21, r5
    2b32:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <ftoa>
		printStatus(tx_string);
    2b36:	8b 2d       	mov	r24, r11
    2b38:	95 2d       	mov	r25, r5
    2b3a:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    2b3e:	5b c0       	rjmp	.+182    	; 0x2bf6 <main+0x10e6>
		break;	
		
		case 408:	// Send TemperatureWindow
		ftoa(ch3.tempErrorWin, tx_string);
    2b40:	60 91 ef 01 	lds	r22, 0x01EF
    2b44:	70 91 f0 01 	lds	r23, 0x01F0
    2b48:	80 91 f1 01 	lds	r24, 0x01F1
    2b4c:	90 91 f2 01 	lds	r25, 0x01F2
    2b50:	4b 2d       	mov	r20, r11
    2b52:	55 2d       	mov	r21, r5
    2b54:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <ftoa>
		printStatus(tx_string);
    2b58:	8b 2d       	mov	r24, r11
    2b5a:	95 2d       	mov	r25, r5
    2b5c:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    2b60:	4a c0       	rjmp	.+148    	; 0x2bf6 <main+0x10e6>
		break;
		
		case 409:	// Send SettleTimeTemperature
		itoa(ch3.tempSettleTime, tx_string, 10);
    2b62:	80 91 f5 01 	lds	r24, 0x01F5
    2b66:	90 91 f6 01 	lds	r25, 0x01F6
    2b6a:	4a e0       	ldi	r20, 0x0A	; 10
    2b6c:	6b 2d       	mov	r22, r11
    2b6e:	75 2d       	mov	r23, r5
    2b70:	0e 94 99 24 	call	0x4932	; 0x4932 <__itoa_ncheck>
		printStatus(tx_string);
    2b74:	8b 2d       	mov	r24, r11
    2b76:	95 2d       	mov	r25, r5
    2b78:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    2b7c:	3c c0       	rjmp	.+120    	; 0x2bf6 <main+0x10e6>
		break;
		
		case 410:	// Send Temperature stable status
		switch(ch3.tempStable)
    2b7e:	80 91 f7 01 	lds	r24, 0x01F7
    2b82:	90 91 f8 01 	lds	r25, 0x01F8
    2b86:	00 97       	sbiw	r24, 0x00	; 0
    2b88:	19 f0       	breq	.+6      	; 0x2b90 <main+0x1080>
    2b8a:	01 97       	sbiw	r24, 0x01	; 1
    2b8c:	31 f0       	breq	.+12     	; 0x2b9a <main+0x108a>
    2b8e:	33 c0       	rjmp	.+102    	; 0x2bf6 <main+0x10e6>
		{
			case 0:
			printStatus("0");
    2b90:	88 e2       	ldi	r24, 0x28	; 40
    2b92:	91 e0       	ldi	r25, 0x01	; 1
    2b94:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    2b98:	2e c0       	rjmp	.+92     	; 0x2bf6 <main+0x10e6>
			break;
			
			case 1:
			printStatus("1");
    2b9a:	8a e2       	ldi	r24, 0x2A	; 42
    2b9c:	91 e0       	ldi	r25, 0x01	; 1
    2b9e:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    2ba2:	29 c0       	rjmp	.+82     	; 0x2bf6 <main+0x10e6>
			break;
		}
		break;
		
		case 601:	// Send motor position		
		ltoa(motorPos, tx_string, 10);
    2ba4:	60 91 97 01 	lds	r22, 0x0197
    2ba8:	70 91 98 01 	lds	r23, 0x0198
    2bac:	80 91 99 01 	lds	r24, 0x0199
    2bb0:	90 91 9a 01 	lds	r25, 0x019A
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
    2bb4:	2a e0       	ldi	r18, 0x0A	; 10
    2bb6:	4b 2d       	mov	r20, r11
    2bb8:	55 2d       	mov	r21, r5
    2bba:	0e 94 a3 24 	call	0x4946	; 0x4946 <__ltoa_ncheck>
		printStatus(tx_string);
    2bbe:	8b 2d       	mov	r24, r11
    2bc0:	95 2d       	mov	r25, r5
    2bc2:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    2bc6:	17 c0       	rjmp	.+46     	; 0x2bf6 <main+0x10e6>
		break;
		
		case 602:	// Send current motor speed
		itoa(motorSpeed, tx_string, 10);
    2bc8:	80 91 00 01 	lds	r24, 0x0100
    2bcc:	90 91 01 01 	lds	r25, 0x0101
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    2bd0:	4a e0       	ldi	r20, 0x0A	; 10
    2bd2:	6b 2d       	mov	r22, r11
    2bd4:	75 2d       	mov	r23, r5
    2bd6:	0e 94 99 24 	call	0x4932	; 0x4932 <__itoa_ncheck>
		printStatus(tx_string);
    2bda:	8b 2d       	mov	r24, r11
    2bdc:	95 2d       	mov	r25, r5
    2bde:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    2be2:	09 c0       	rjmp	.+18     	; 0x2bf6 <main+0x10e6>
		break;
		
		default:
		printStatus("VRerror");
    2be4:	8c e2       	ldi	r24, 0x2C	; 44
    2be6:	91 e0       	ldi	r25, 0x01	; 1
    2be8:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    2bec:	04 c0       	rjmp	.+8      	; 0x2bf6 <main+0x10e6>
						var = atol(requestID);
						SendParameter(var);
					}
					else
					{
						printStatus("CRC error");
    2bee:	8b e1       	ldi	r24, 0x1B	; 27
    2bf0:	91 e0       	ldi	r25, 0x01	; 1
    2bf2:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
					}
				}
			}	
			
			pos = NULL;
			pos = strchr(rx_string, '&');
    2bf6:	66 e2       	ldi	r22, 0x26	; 38
    2bf8:	70 e0       	ldi	r23, 0x00	; 0
    2bfa:	87 2d       	mov	r24, r7
    2bfc:	9a 2d       	mov	r25, r10
    2bfe:	0e 94 70 24 	call	0x48e0	; 0x48e0 <strchr>
			if(pos != NULL)
    2c02:	00 97       	sbiw	r24, 0x00	; 0
    2c04:	09 f4       	brne	.+2      	; 0x2c08 <main+0x10f8>
    2c06:	1c c9       	rjmp	.-3528   	; 0x1e40 <main+0x330>
    2c08:	fc 01       	movw	r30, r24
			{
				setCmd[0] = *(pos + 1);					// Parse set command
    2c0a:	aa e2       	ldi	r26, 0x2A	; 42
    2c0c:	b5 e0       	ldi	r27, 0x05	; 5
    2c0e:	81 81       	ldd	r24, Z+1	; 0x01
    2c10:	8c 93       	st	X, r24
				setCmd[1] = *(pos + 2);
    2c12:	82 81       	ldd	r24, Z+2	; 0x02
    2c14:	11 96       	adiw	r26, 0x01	; 1
    2c16:	8c 93       	st	X, r24
    2c18:	11 97       	sbiw	r26, 0x01	; 1
				requestID[0] = *(pos + 3);				// Parse request ID
    2c1a:	83 81       	ldd	r24, Z+3	; 0x03
    2c1c:	89 83       	std	Y+1, r24	; 0x01
				requestID[1] = *(pos + 4);
    2c1e:	84 81       	ldd	r24, Z+4	; 0x04
    2c20:	8a 83       	std	Y+2, r24	; 0x02
				requestID[2] = *(pos + 5);				
    2c22:	85 81       	ldd	r24, Z+5	; 0x05
    2c24:	8b 83       	std	Y+3, r24	; 0x03
				
				if(strcmp(setCmd, "VS") == 0)
    2c26:	64 e3       	ldi	r22, 0x34	; 52
    2c28:	71 e0       	ldi	r23, 0x01	; 1
    2c2a:	cd 01       	movw	r24, r26
    2c2c:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <strcmp>
    2c30:	89 2b       	or	r24, r25
    2c32:	09 f0       	breq	.+2      	; 0x2c36 <main+0x1126>
    2c34:	ff c8       	rjmp	.-3586   	; 0x1e34 <main+0x324>
    2c36:	6c 96       	adiw	r28, 0x1c	; 28
    2c38:	4e ac       	ldd	r4, Y+62	; 0x3e
    2c3a:	5f ac       	ldd	r5, Y+63	; 0x3f
    2c3c:	6c 97       	sbiw	r28, 0x1c	; 28
    2c3e:	6e 96       	adiw	r28, 0x1e	; 30
    2c40:	ae ac       	ldd	r10, Y+62	; 0x3e
    2c42:	bf ac       	ldd	r11, Y+63	; 0x3f
    2c44:	6e 97       	sbiw	r28, 0x1e	; 30
				{
					pos = strchr(rx_string, 0x0D);		// Find end of message
    2c46:	6d e0       	ldi	r22, 0x0D	; 13
    2c48:	70 e0       	ldi	r23, 0x00	; 0
    2c4a:	c2 01       	movw	r24, r4
    2c4c:	0e 94 70 24 	call	0x48e0	; 0x48e0 <strchr>
					crc[0] = *(pos - 4);				// Parse incoming crc
    2c50:	ed e2       	ldi	r30, 0x2D	; 45
    2c52:	f5 e0       	ldi	r31, 0x05	; 5
    2c54:	dc 01       	movw	r26, r24
    2c56:	14 97       	sbiw	r26, 0x04	; 4
    2c58:	2c 91       	ld	r18, X
    2c5a:	20 83       	st	Z, r18
					crc[1] = *(pos - 3);
    2c5c:	11 96       	adiw	r26, 0x01	; 1
    2c5e:	2c 91       	ld	r18, X
    2c60:	21 83       	std	Z+1, r18	; 0x01
					crc[2] = *(pos - 2);
    2c62:	11 96       	adiw	r26, 0x01	; 1
    2c64:	2c 91       	ld	r18, X
    2c66:	22 83       	std	Z+2, r18	; 0x02
					crc[3] = *(pos - 1);
    2c68:	11 96       	adiw	r26, 0x01	; 1
    2c6a:	8c 91       	ld	r24, X
    2c6c:	83 83       	std	Z+3, r24	; 0x03
					
					itoa(GenCrc16(rx_string, (int)strnlen(rx_string, rx_size)-5), inCrC_string, 16);
    2c6e:	6e e1       	ldi	r22, 0x1E	; 30
    2c70:	70 e0       	ldi	r23, 0x00	; 0
    2c72:	c2 01       	movw	r24, r4
    2c74:	0e 94 84 24 	call	0x4908	; 0x4908 <strnlen>
    2c78:	bc 01       	movw	r22, r24
    2c7a:	65 50       	subi	r22, 0x05	; 5
    2c7c:	71 09       	sbc	r23, r1
    2c7e:	c2 01       	movw	r24, r4
    2c80:	0e 94 01 01 	call	0x202	; 0x202 <GenCrc16>
    2c84:	40 e1       	ldi	r20, 0x10	; 16
    2c86:	be 01       	movw	r22, r28
    2c88:	67 5e       	subi	r22, 0xE7	; 231
    2c8a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c8c:	0e 94 99 24 	call	0x4932	; 0x4932 <__itoa_ncheck>
					if(CrcCompare(crc, inCrC_string) == true)
    2c90:	be 01       	movw	r22, r28
    2c92:	67 5e       	subi	r22, 0xE7	; 231
    2c94:	7f 4f       	sbci	r23, 0xFF	; 255
    2c96:	8d e2       	ldi	r24, 0x2D	; 45
    2c98:	95 e0       	ldi	r25, 0x05	; 5
    2c9a:	0e 94 56 01 	call	0x2ac	; 0x2ac <CrcCompare>
    2c9e:	88 23       	and	r24, r24
    2ca0:	11 f4       	brne	.+4      	; 0x2ca6 <main+0x1196>
    2ca2:	0c 94 fd 21 	jmp	0x43fa	; 0x43fa <main+0x28ea>
					{
						var = atol(requestID);
						SetParameter(atol(requestID));
    2ca6:	ce 01       	movw	r24, r28
    2ca8:	01 96       	adiw	r24, 0x01	; 1
    2caa:	0e 94 3f 24 	call	0x487e	; 0x487e <atol>

static inline void SetParameter(int id)
{
	char param[param_size];
	
	switch(id)
    2cae:	6f 35       	cpi	r22, 0x5F	; 95
    2cb0:	b1 e0       	ldi	r27, 0x01	; 1
    2cb2:	7b 07       	cpc	r23, r27
    2cb4:	09 f4       	brne	.+2      	; 0x2cb8 <main+0x11a8>
    2cb6:	03 c3       	rjmp	.+1542   	; 0x32be <main+0x17ae>
    2cb8:	dc f5       	brge	.+118    	; 0x2d30 <main+0x1220>
    2cba:	6a 3f       	cpi	r22, 0xFA	; 250
    2cbc:	71 05       	cpc	r23, r1
    2cbe:	09 f4       	brne	.+2      	; 0x2cc2 <main+0x11b2>
    2cc0:	3c c2       	rjmp	.+1144   	; 0x313a <main+0x162a>
    2cc2:	ec f4       	brge	.+58     	; 0x2cfe <main+0x11ee>
    2cc4:	69 39       	cpi	r22, 0x99	; 153
    2cc6:	71 05       	cpc	r23, r1
    2cc8:	09 f4       	brne	.+2      	; 0x2ccc <main+0x11bc>
    2cca:	b1 c1       	rjmp	.+866    	; 0x302e <main+0x151e>
    2ccc:	64 f4       	brge	.+24     	; 0x2ce6 <main+0x11d6>
    2cce:	67 39       	cpi	r22, 0x97	; 151
    2cd0:	71 05       	cpc	r23, r1
    2cd2:	09 f4       	brne	.+2      	; 0x2cd6 <main+0x11c6>
    2cd4:	50 c1       	rjmp	.+672    	; 0x2f76 <main+0x1466>
    2cd6:	0c f0       	brlt	.+2      	; 0x2cda <main+0x11ca>
    2cd8:	7c c1       	rjmp	.+760    	; 0x2fd2 <main+0x14c2>
    2cda:	66 39       	cpi	r22, 0x96	; 150
    2cdc:	71 05       	cpc	r23, r1
    2cde:	09 f4       	brne	.+2      	; 0x2ce2 <main+0x11d2>
    2ce0:	72 c0       	rjmp	.+228    	; 0x2dc6 <main+0x12b6>
    2ce2:	0c 94 f7 21 	jmp	0x43ee	; 0x43ee <main+0x28de>
    2ce6:	6b 39       	cpi	r22, 0x9B	; 155
    2ce8:	71 05       	cpc	r23, r1
    2cea:	09 f4       	brne	.+2      	; 0x2cee <main+0x11de>
    2cec:	e7 c1       	rjmp	.+974    	; 0x30bc <main+0x15ac>
    2cee:	0c f4       	brge	.+2      	; 0x2cf2 <main+0x11e2>
    2cf0:	cc c1       	rjmp	.+920    	; 0x308a <main+0x157a>
    2cf2:	6c 39       	cpi	r22, 0x9C	; 156
    2cf4:	71 05       	cpc	r23, r1
    2cf6:	09 f4       	brne	.+2      	; 0x2cfa <main+0x11ea>
    2cf8:	0f c2       	rjmp	.+1054   	; 0x3118 <main+0x1608>
    2cfa:	0c 94 f7 21 	jmp	0x43ee	; 0x43ee <main+0x28de>
    2cfe:	6e 3f       	cpi	r22, 0xFE	; 254
    2d00:	71 05       	cpc	r23, r1
    2d02:	09 f4       	brne	.+2      	; 0x2d06 <main+0x11f6>
    2d04:	87 c2       	rjmp	.+1294   	; 0x3214 <main+0x1704>
    2d06:	3c f4       	brge	.+14     	; 0x2d16 <main+0x1206>
    2d08:	6c 3f       	cpi	r22, 0xFC	; 252
    2d0a:	71 05       	cpc	r23, r1
    2d0c:	09 f4       	brne	.+2      	; 0x2d10 <main+0x1200>
    2d0e:	3f c2       	rjmp	.+1150   	; 0x318e <main+0x167e>
    2d10:	0c f4       	brge	.+2      	; 0x2d14 <main+0x1204>
    2d12:	28 c2       	rjmp	.+1104   	; 0x3164 <main+0x1654>
    2d14:	51 c2       	rjmp	.+1186   	; 0x31b8 <main+0x16a8>
    2d16:	61 15       	cp	r22, r1
    2d18:	f1 e0       	ldi	r31, 0x01	; 1
    2d1a:	7f 07       	cpc	r23, r31
    2d1c:	09 f4       	brne	.+2      	; 0x2d20 <main+0x1210>
    2d1e:	a9 c2       	rjmp	.+1362   	; 0x3272 <main+0x1762>
    2d20:	0c f4       	brge	.+2      	; 0x2d24 <main+0x1214>
    2d22:	92 c2       	rjmp	.+1316   	; 0x3248 <main+0x1738>
    2d24:	6e 35       	cpi	r22, 0x5E	; 94
    2d26:	71 40       	sbci	r23, 0x01	; 1
    2d28:	09 f4       	brne	.+2      	; 0x2d2c <main+0x121c>
    2d2a:	b4 c2       	rjmp	.+1384   	; 0x3294 <main+0x1784>
    2d2c:	0c 94 f7 21 	jmp	0x43ee	; 0x43ee <main+0x28de>
    2d30:	64 3c       	cpi	r22, 0xC4	; 196
    2d32:	a1 e0       	ldi	r26, 0x01	; 1
    2d34:	7a 07       	cpc	r23, r26
    2d36:	09 f4       	brne	.+2      	; 0x2d3a <main+0x122a>
    2d38:	46 c4       	rjmp	.+2188   	; 0x35c6 <main+0x1ab6>
    2d3a:	dc f4       	brge	.+54     	; 0x2d72 <main+0x1262>
    2d3c:	63 36       	cpi	r22, 0x63	; 99
    2d3e:	e1 e0       	ldi	r30, 0x01	; 1
    2d40:	7e 07       	cpc	r23, r30
    2d42:	09 f4       	brne	.+2      	; 0x2d46 <main+0x1236>
    2d44:	14 c3       	rjmp	.+1576   	; 0x336e <main+0x185e>
    2d46:	44 f4       	brge	.+16     	; 0x2d58 <main+0x1248>
    2d48:	61 36       	cpi	r22, 0x61	; 97
    2d4a:	21 e0       	ldi	r18, 0x01	; 1
    2d4c:	72 07       	cpc	r23, r18
    2d4e:	09 f4       	brne	.+2      	; 0x2d52 <main+0x1242>
    2d50:	e0 c2       	rjmp	.+1472   	; 0x3312 <main+0x1802>
    2d52:	0c f4       	brge	.+2      	; 0x2d56 <main+0x1246>
    2d54:	c9 c2       	rjmp	.+1426   	; 0x32e8 <main+0x17d8>
    2d56:	f2 c2       	rjmp	.+1508   	; 0x333c <main+0x182c>
    2d58:	62 3c       	cpi	r22, 0xC2	; 194
    2d5a:	a1 e0       	ldi	r26, 0x01	; 1
    2d5c:	7a 07       	cpc	r23, r26
    2d5e:	09 f4       	brne	.+2      	; 0x2d62 <main+0x1252>
    2d60:	45 c3       	rjmp	.+1674   	; 0x33ec <main+0x18dc>
    2d62:	0c f0       	brlt	.+2      	; 0x2d66 <main+0x1256>
    2d64:	58 c3       	rjmp	.+1712   	; 0x3416 <main+0x1906>
    2d66:	64 36       	cpi	r22, 0x64	; 100
    2d68:	71 40       	sbci	r23, 0x01	; 1
    2d6a:	09 f4       	brne	.+2      	; 0x2d6e <main+0x125e>
    2d6c:	2e c3       	rjmp	.+1628   	; 0x33ca <main+0x18ba>
    2d6e:	0c 94 f7 21 	jmp	0x43ee	; 0x43ee <main+0x28de>
    2d72:	68 3c       	cpi	r22, 0xC8	; 200
    2d74:	f1 e0       	ldi	r31, 0x01	; 1
    2d76:	7f 07       	cpc	r23, r31
    2d78:	11 f4       	brne	.+4      	; 0x2d7e <main+0x126e>
    2d7a:	0c 94 c0 1e 	jmp	0x3d80	; 0x3d80 <main+0x2270>
    2d7e:	44 f4       	brge	.+16     	; 0x2d90 <main+0x1280>
    2d80:	66 3c       	cpi	r22, 0xC6	; 198
    2d82:	31 e0       	ldi	r19, 0x01	; 1
    2d84:	73 07       	cpc	r23, r19
    2d86:	09 f4       	brne	.+2      	; 0x2d8a <main+0x127a>
    2d88:	c4 c5       	rjmp	.+2952   	; 0x3912 <main+0x1e02>
    2d8a:	0c f4       	brge	.+2      	; 0x2d8e <main+0x127e>
    2d8c:	ef c4       	rjmp	.+2526   	; 0x376c <main+0x1c5c>
    2d8e:	29 c7       	rjmp	.+3666   	; 0x3be2 <main+0x20d2>
    2d90:	68 35       	cpi	r22, 0x58	; 88
    2d92:	b2 e0       	ldi	r27, 0x02	; 2
    2d94:	7b 07       	cpc	r23, r27
    2d96:	11 f4       	brne	.+4      	; 0x2d9c <main+0x128c>
    2d98:	0c 94 24 21 	jmp	0x4248	; 0x4248 <main+0x2738>
    2d9c:	3c f4       	brge	.+14     	; 0x2dac <main+0x129c>
    2d9e:	64 3f       	cpi	r22, 0xF4	; 244
    2da0:	71 40       	sbci	r23, 0x01	; 1
    2da2:	11 f4       	brne	.+4      	; 0x2da8 <main+0x1298>
    2da4:	0c 94 8b 1f 	jmp	0x3f16	; 0x3f16 <main+0x2406>
    2da8:	0c 94 f7 21 	jmp	0x43ee	; 0x43ee <main+0x28de>
    2dac:	69 35       	cpi	r22, 0x59	; 89
    2dae:	22 e0       	ldi	r18, 0x02	; 2
    2db0:	72 07       	cpc	r23, r18
    2db2:	11 f4       	brne	.+4      	; 0x2db8 <main+0x12a8>
    2db4:	0c 94 63 21 	jmp	0x42c6	; 0x42c6 <main+0x27b6>
    2db8:	6a 35       	cpi	r22, 0x5A	; 90
    2dba:	72 40       	sbci	r23, 0x02	; 2
    2dbc:	11 f4       	brne	.+4      	; 0x2dc2 <main+0x12b2>
    2dbe:	0c 94 8b 21 	jmp	0x4316	; 0x4316 <main+0x2806>
    2dc2:	0c 94 f7 21 	jmp	0x43ee	; 0x43ee <main+0x28de>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    2dc6:	6e e1       	ldi	r22, 0x1E	; 30
    2dc8:	70 e0       	ldi	r23, 0x00	; 0
    2dca:	c2 01       	movw	r24, r4
    2dcc:	0e 94 84 24 	call	0x4908	; 0x4908 <strnlen>
    2dd0:	05 97       	sbiw	r24, 0x05	; 5
    2dd2:	9c 01       	movw	r18, r24
    2dd4:	d5 01       	movw	r26, r10
    2dd6:	a5 01       	movw	r20, r10
    2dd8:	4c 5e       	subi	r20, 0xEC	; 236
    2dda:	5f 4f       	sbci	r21, 0xFF	; 255
    2ddc:	f5 01       	movw	r30, r10
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    2dde:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    2de0:	e4 17       	cp	r30, r20
    2de2:	f5 07       	cpc	r31, r21
    2de4:	e1 f7       	brne	.-8      	; 0x2dde <main+0x12ce>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    2de6:	2b 30       	cpi	r18, 0x0B	; 11
    2de8:	31 05       	cpc	r19, r1
    2dea:	54 f0       	brlt	.+20     	; 0x2e00 <main+0x12f0>
    2dec:	e1 e4       	ldi	r30, 0x41	; 65
    2dee:	f5 e0       	ldi	r31, 0x05	; 5
    2df0:	89 5c       	subi	r24, 0xC9	; 201
    2df2:	9a 4f       	sbci	r25, 0xFA	; 250
    2df4:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    2df6:	91 91       	ld	r25, Z+
    2df8:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    2dfa:	e2 17       	cp	r30, r18
    2dfc:	f3 07       	cpc	r31, r19
    2dfe:	d9 f7       	brne	.-10     	; 0x2df6 <main+0x12e6>
	switch(id)
	{
		// *** Channel 0 ***
		case 150:	// ch0.TempSetPoint
		ParamParse(rx_string, param);
		ch0.TempSetPoint = atof(param);
    2e00:	c5 01       	movw	r24, r10
    2e02:	0e 94 1f 24 	call	0x483e	; 0x483e <atof>
    2e06:	60 93 c4 02 	sts	0x02C4, r22
    2e0a:	70 93 c5 02 	sts	0x02C5, r23
    2e0e:	80 93 c6 02 	sts	0x02C6, r24
    2e12:	90 93 c7 02 	sts	0x02C7, r25
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    2e16:	81 e2       	ldi	r24, 0x21	; 33
    2e18:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    2e1a:	d2 01       	movw	r26, r4
    2e1c:	11 96       	adiw	r26, 0x01	; 1
    2e1e:	8c 91       	ld	r24, X
    2e20:	11 97       	sbiw	r26, 0x01	; 1
    2e22:	8f 8f       	std	Y+31, r24	; 0x1f
    2e24:	12 96       	adiw	r26, 0x02	; 2
    2e26:	8c 91       	ld	r24, X
    2e28:	12 97       	sbiw	r26, 0x02	; 2
    2e2a:	88 a3       	std	Y+32, r24	; 0x20
    2e2c:	13 96       	adiw	r26, 0x03	; 3
    2e2e:	8c 91       	ld	r24, X
    2e30:	89 a3       	std	Y+33, r24	; 0x21
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    2e32:	1a a2       	std	Y+34, r1	; 0x22
    2e34:	1b a2       	std	Y+35, r1	; 0x23
    2e36:	1c a2       	std	Y+36, r1	; 0x24
    2e38:	7e 01       	movw	r14, r28
    2e3a:	be e1       	ldi	r27, 0x1E	; 30
    2e3c:	eb 0e       	add	r14, r27
    2e3e:	f1 1c       	adc	r15, r1
    2e40:	be 01       	movw	r22, r28
    2e42:	6e 5d       	subi	r22, 0xDE	; 222
    2e44:	7f 4f       	sbci	r23, 0xFF	; 255
    2e46:	f7 01       	movw	r30, r14
    2e48:	80 e0       	ldi	r24, 0x00	; 0
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    2e4c:	b8 e0       	ldi	r27, 0x08	; 8
    2e4e:	d1 2c       	mov	r13, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    2e50:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    2e52:	29 2f       	mov	r18, r25
    2e54:	33 27       	eor	r19, r19
    2e56:	27 fd       	sbrc	r18, 7
    2e58:	3a 95       	dec	r19
    2e5a:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    2e5c:	32 2f       	mov	r19, r18
    2e5e:	22 27       	eor	r18, r18
    2e60:	4b 2f       	mov	r20, r27
    2e62:	5d 2d       	mov	r21, r13
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    2e64:	33 23       	and	r19, r19
    2e66:	3c f4       	brge	.+14     	; 0x2e76 <main+0x1366>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    2e68:	22 0f       	add	r18, r18
    2e6a:	33 1f       	adc	r19, r19
    2e6c:	a1 e2       	ldi	r26, 0x21	; 33
    2e6e:	2a 27       	eor	r18, r26
    2e70:	a0 e1       	ldi	r26, 0x10	; 16
    2e72:	3a 27       	eor	r19, r26
    2e74:	02 c0       	rjmp	.+4      	; 0x2e7a <main+0x136a>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    2e76:	22 0f       	add	r18, r18
    2e78:	33 1f       	adc	r19, r19
    2e7a:	41 50       	subi	r20, 0x01	; 1
    2e7c:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    2e7e:	91 f7       	brne	.-28     	; 0x2e64 <main+0x1354>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    2e80:	98 2f       	mov	r25, r24
    2e82:	88 27       	eor	r24, r24
    2e84:	82 27       	eor	r24, r18
    2e86:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    2e88:	e6 17       	cp	r30, r22
    2e8a:	f7 07       	cpc	r31, r23
    2e8c:	09 f7       	brne	.-62     	; 0x2e50 <main+0x1340>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    2e8e:	6c 01       	movw	r12, r24
    2e90:	40 e1       	ldi	r20, 0x10	; 16
    2e92:	6d e2       	ldi	r22, 0x2D	; 45
    2e94:	75 e0       	ldi	r23, 0x05	; 5
    2e96:	0e 94 99 24 	call	0x4932	; 0x4932 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    2e9a:	8d e2       	ldi	r24, 0x2D	; 45
    2e9c:	95 e0       	ldi	r25, 0x05	; 5
    2e9e:	0e 94 8f 24 	call	0x491e	; 0x491e <strupr>
	if(crcXmodem < 0x10)
    2ea2:	b0 e1       	ldi	r27, 0x10	; 16
    2ea4:	cb 16       	cp	r12, r27
    2ea6:	d1 04       	cpc	r13, r1
    2ea8:	38 f4       	brcc	.+14     	; 0x2eb8 <main+0x13a8>
	{
		tx_string[cnt+4] = crc[0];
    2eaa:	80 91 2d 05 	lds	r24, 0x052D
    2eae:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = '0';
    2eb0:	80 e3       	ldi	r24, 0x30	; 48
    2eb2:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = '0';
    2eb4:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';
    2eb6:	8a a3       	std	Y+34, r24	; 0x22
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    2eb8:	c6 01       	movw	r24, r12
    2eba:	40 97       	sbiw	r24, 0x10	; 16
    2ebc:	80 3f       	cpi	r24, 0xF0	; 240
    2ebe:	91 05       	cpc	r25, r1
    2ec0:	48 f4       	brcc	.+18     	; 0x2ed4 <main+0x13c4>
	{
		tx_string[cnt+4] = crc[1];
    2ec2:	ed e2       	ldi	r30, 0x2D	; 45
    2ec4:	f5 e0       	ldi	r31, 0x05	; 5
    2ec6:	81 81       	ldd	r24, Z+1	; 0x01
    2ec8:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[0];
    2eca:	80 81       	ld	r24, Z
    2ecc:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = '0';
    2ece:	80 e3       	ldi	r24, 0x30	; 48
    2ed0:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';		
    2ed2:	8a a3       	std	Y+34, r24	; 0x22
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    2ed4:	c6 01       	movw	r24, r12
    2ed6:	9a 95       	dec	r25
    2ed8:	81 15       	cp	r24, r1
    2eda:	9f 40       	sbci	r25, 0x0F	; 15
    2edc:	50 f4       	brcc	.+20     	; 0x2ef2 <main+0x13e2>
	{
		tx_string[cnt+4] = crc[2];
    2ede:	ed e2       	ldi	r30, 0x2D	; 45
    2ee0:	f5 e0       	ldi	r31, 0x05	; 5
    2ee2:	82 81       	ldd	r24, Z+2	; 0x02
    2ee4:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[1];
    2ee6:	81 81       	ldd	r24, Z+1	; 0x01
    2ee8:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = crc[0];
    2eea:	80 81       	ld	r24, Z
    2eec:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';		
    2eee:	80 e3       	ldi	r24, 0x30	; 48
    2ef0:	8a a3       	std	Y+34, r24	; 0x22
	}
	if(crcXmodem >= 0x1000)
    2ef2:	c1 14       	cp	r12, r1
    2ef4:	f0 e1       	ldi	r31, 0x10	; 16
    2ef6:	df 06       	cpc	r13, r31
    2ef8:	50 f0       	brcs	.+20     	; 0x2f0e <main+0x13fe>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    2efa:	ed e2       	ldi	r30, 0x2D	; 45
    2efc:	f5 e0       	ldi	r31, 0x05	; 5
    2efe:	80 81       	ld	r24, Z
    2f00:	8a a3       	std	Y+34, r24	; 0x22
		tx_string[cnt+2] = crc[1];
    2f02:	81 81       	ldd	r24, Z+1	; 0x01
    2f04:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+3] = crc[2];
    2f06:	82 81       	ldd	r24, Z+2	; 0x02
    2f08:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+4] = crc[3];
    2f0a:	83 81       	ldd	r24, Z+3	; 0x03
    2f0c:	8d a3       	std	Y+37, r24	; 0x25
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    2f0e:	8d e0       	ldi	r24, 0x0D	; 13
    2f10:	8e a3       	std	Y+38, r24	; 0x26
    2f12:	9e 01       	movw	r18, r28
    2f14:	29 5d       	subi	r18, 0xD9	; 217
    2f16:	3f 4f       	sbci	r19, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    2f18:	e5 e5       	ldi	r30, 0x55	; 85
    2f1a:	f5 e0       	ldi	r31, 0x05	; 5
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    2f1c:	0f 2e       	mov	r0, r31
    2f1e:	f1 ec       	ldi	r31, 0xC1	; 193
    2f20:	8f 2e       	mov	r8, r31
    2f22:	91 2c       	mov	r9, r1
    2f24:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    2f26:	70 e0       	ldi	r23, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    2f28:	d7 01       	movw	r26, r14
    2f2a:	4d 91       	ld	r20, X+
    2f2c:	7d 01       	movw	r14, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    2f2e:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    2f30:	91 81       	ldd	r25, Z+1	; 0x01
    2f32:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    2f34:	98 13       	cpse	r25, r24
    2f36:	04 c0       	rjmp	.+8      	; 0x2f40 <main+0x1430>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    2f38:	d4 01       	movw	r26, r8
    2f3a:	8c 91       	ld	r24, X
    2f3c:	80 62       	ori	r24, 0x20	; 32
    2f3e:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    2f40:	50 81       	ld	r21, Z
    2f42:	83 81       	ldd	r24, Z+3	; 0x03
    2f44:	94 81       	ldd	r25, Z+4	; 0x04
    2f46:	85 0f       	add	r24, r21
    2f48:	91 1d       	adc	r25, r1
    2f4a:	dc 01       	movw	r26, r24
    2f4c:	4c 93       	st	X, r20
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    2f4e:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    2f50:	c8 2e       	mov	r12, r24
    2f52:	d1 2c       	mov	r13, r1
    2f54:	42 81       	ldd	r20, Z+2	; 0x02
    2f56:	50 e0       	ldi	r21, 0x00	; 0
    2f58:	41 50       	subi	r20, 0x01	; 1
    2f5a:	51 09       	sbc	r21, r1
    2f5c:	c4 16       	cp	r12, r20
    2f5e:	d5 06       	cpc	r13, r21
    2f60:	11 f0       	breq	.+4      	; 0x2f66 <main+0x1456>
    2f62:	8f 5f       	subi	r24, 0xFF	; 255
    2f64:	01 c0       	rjmp	.+2      	; 0x2f68 <main+0x1458>
    2f66:	87 2f       	mov	r24, r23
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    2f68:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    2f6a:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    2f6c:	e2 16       	cp	r14, r18
    2f6e:	f3 06       	cpc	r15, r19
    2f70:	d9 f6       	brne	.-74     	; 0x2f28 <main+0x1418>
    2f72:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <main+0x30e>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    2f76:	6e e1       	ldi	r22, 0x1E	; 30
    2f78:	70 e0       	ldi	r23, 0x00	; 0
    2f7a:	c2 01       	movw	r24, r4
    2f7c:	0e 94 84 24 	call	0x4908	; 0x4908 <strnlen>
    2f80:	05 97       	sbiw	r24, 0x05	; 5
    2f82:	9c 01       	movw	r18, r24
    2f84:	d5 01       	movw	r26, r10
    2f86:	a5 01       	movw	r20, r10
    2f88:	4c 5e       	subi	r20, 0xEC	; 236
    2f8a:	5f 4f       	sbci	r21, 0xFF	; 255
    2f8c:	f5 01       	movw	r30, r10
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    2f8e:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    2f90:	e4 17       	cp	r30, r20
    2f92:	f5 07       	cpc	r31, r21
    2f94:	e1 f7       	brne	.-8      	; 0x2f8e <main+0x147e>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    2f96:	2b 30       	cpi	r18, 0x0B	; 11
    2f98:	31 05       	cpc	r19, r1
    2f9a:	54 f0       	brlt	.+20     	; 0x2fb0 <main+0x14a0>
    2f9c:	e1 e4       	ldi	r30, 0x41	; 65
    2f9e:	f5 e0       	ldi	r31, 0x05	; 5
    2fa0:	89 5c       	subi	r24, 0xC9	; 201
    2fa2:	9a 4f       	sbci	r25, 0xFA	; 250
    2fa4:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    2fa6:	91 91       	ld	r25, Z+
    2fa8:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    2faa:	e2 17       	cp	r30, r18
    2fac:	f3 07       	cpc	r31, r19
    2fae:	d9 f7       	brne	.-10     	; 0x2fa6 <main+0x1496>
		printStatus("");
		break;
		
		case 151:	// SetPgainCh0
		ParamParse(rx_string, param);
		ch0.Pgain = atof(param);
    2fb0:	c5 01       	movw	r24, r10
    2fb2:	0e 94 1f 24 	call	0x483e	; 0x483e <atof>
    2fb6:	60 93 e0 02 	sts	0x02E0, r22
    2fba:	70 93 e1 02 	sts	0x02E1, r23
    2fbe:	80 93 e2 02 	sts	0x02E2, r24
    2fc2:	90 93 e3 02 	sts	0x02E3, r25
		printStatus("");
    2fc6:	89 e2       	ldi	r24, 0x29	; 41
    2fc8:	91 e0       	ldi	r25, 0x01	; 1
    2fca:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    2fce:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <main+0x30e>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    2fd2:	6e e1       	ldi	r22, 0x1E	; 30
    2fd4:	70 e0       	ldi	r23, 0x00	; 0
    2fd6:	c2 01       	movw	r24, r4
    2fd8:	0e 94 84 24 	call	0x4908	; 0x4908 <strnlen>
    2fdc:	05 97       	sbiw	r24, 0x05	; 5
    2fde:	9c 01       	movw	r18, r24
    2fe0:	d5 01       	movw	r26, r10
    2fe2:	a5 01       	movw	r20, r10
    2fe4:	4c 5e       	subi	r20, 0xEC	; 236
    2fe6:	5f 4f       	sbci	r21, 0xFF	; 255
    2fe8:	f5 01       	movw	r30, r10
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    2fea:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    2fec:	e4 17       	cp	r30, r20
    2fee:	f5 07       	cpc	r31, r21
    2ff0:	e1 f7       	brne	.-8      	; 0x2fea <main+0x14da>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    2ff2:	2b 30       	cpi	r18, 0x0B	; 11
    2ff4:	31 05       	cpc	r19, r1
    2ff6:	54 f0       	brlt	.+20     	; 0x300c <main+0x14fc>
    2ff8:	e1 e4       	ldi	r30, 0x41	; 65
    2ffa:	f5 e0       	ldi	r31, 0x05	; 5
    2ffc:	89 5c       	subi	r24, 0xC9	; 201
    2ffe:	9a 4f       	sbci	r25, 0xFA	; 250
    3000:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    3002:	91 91       	ld	r25, Z+
    3004:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    3006:	e2 17       	cp	r30, r18
    3008:	f3 07       	cpc	r31, r19
    300a:	d9 f7       	brne	.-10     	; 0x3002 <main+0x14f2>
		printStatus("");
		break;
		
		case 152:	// SetIgainCh0
		ParamParse(rx_string, param);
		ch0.Igain = atof(param);
    300c:	c5 01       	movw	r24, r10
    300e:	0e 94 1f 24 	call	0x483e	; 0x483e <atof>
    3012:	60 93 e4 02 	sts	0x02E4, r22
    3016:	70 93 e5 02 	sts	0x02E5, r23
    301a:	80 93 e6 02 	sts	0x02E6, r24
    301e:	90 93 e7 02 	sts	0x02E7, r25
		printStatus("");
    3022:	89 e2       	ldi	r24, 0x29	; 41
    3024:	91 e0       	ldi	r25, 0x01	; 1
    3026:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    302a:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <main+0x30e>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    302e:	6e e1       	ldi	r22, 0x1E	; 30
    3030:	70 e0       	ldi	r23, 0x00	; 0
    3032:	c2 01       	movw	r24, r4
    3034:	0e 94 84 24 	call	0x4908	; 0x4908 <strnlen>
    3038:	05 97       	sbiw	r24, 0x05	; 5
    303a:	9c 01       	movw	r18, r24
    303c:	d5 01       	movw	r26, r10
    303e:	a5 01       	movw	r20, r10
    3040:	4c 5e       	subi	r20, 0xEC	; 236
    3042:	5f 4f       	sbci	r21, 0xFF	; 255
    3044:	f5 01       	movw	r30, r10
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    3046:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    3048:	e4 17       	cp	r30, r20
    304a:	f5 07       	cpc	r31, r21
    304c:	e1 f7       	brne	.-8      	; 0x3046 <main+0x1536>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    304e:	2b 30       	cpi	r18, 0x0B	; 11
    3050:	31 05       	cpc	r19, r1
    3052:	54 f0       	brlt	.+20     	; 0x3068 <main+0x1558>
    3054:	e1 e4       	ldi	r30, 0x41	; 65
    3056:	f5 e0       	ldi	r31, 0x05	; 5
    3058:	89 5c       	subi	r24, 0xC9	; 201
    305a:	9a 4f       	sbci	r25, 0xFA	; 250
    305c:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    305e:	91 91       	ld	r25, Z+
    3060:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    3062:	e2 17       	cp	r30, r18
    3064:	f3 07       	cpc	r31, r19
    3066:	d9 f7       	brne	.-10     	; 0x305e <main+0x154e>
		printStatus("");
		break;
		
		case 153:	// Setch0.Dgain
		ParamParse(rx_string, param);
		ch0.Dgain = atof(param);
    3068:	c5 01       	movw	r24, r10
    306a:	0e 94 1f 24 	call	0x483e	; 0x483e <atof>
    306e:	60 93 e8 02 	sts	0x02E8, r22
    3072:	70 93 e9 02 	sts	0x02E9, r23
    3076:	80 93 ea 02 	sts	0x02EA, r24
    307a:	90 93 eb 02 	sts	0x02EB, r25
		printStatus("");
    307e:	89 e2       	ldi	r24, 0x29	; 41
    3080:	91 e0       	ldi	r25, 0x01	; 1
    3082:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    3086:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <main+0x30e>
		break;	
		
		case 154:	// Set heater on/off ch0
		if(rx_string[10] == '1')
    308a:	f2 01       	movw	r30, r4
    308c:	82 85       	ldd	r24, Z+10	; 0x0a
    308e:	81 33       	cpi	r24, 0x31	; 49
    3090:	49 f4       	brne	.+18     	; 0x30a4 <main+0x1594>
		{
			ch0.heaterEnable = true;
    3092:	81 e0       	ldi	r24, 0x01	; 1
    3094:	80 93 26 03 	sts	0x0326, r24
			printStatus("ON");
    3098:	87 e3       	ldi	r24, 0x37	; 55
    309a:	91 e0       	ldi	r25, 0x01	; 1
    309c:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    30a0:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <main+0x30e>
		}
		else if(rx_string[10] == '0')
    30a4:	80 33       	cpi	r24, 0x30	; 48
    30a6:	11 f0       	breq	.+4      	; 0x30ac <main+0x159c>
    30a8:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <main+0x30e>
		{
			ch0.heaterEnable = false;
    30ac:	10 92 26 03 	sts	0x0326, r1
			printStatus("OFF");
    30b0:	8a e3       	ldi	r24, 0x3A	; 58
    30b2:	91 e0       	ldi	r25, 0x01	; 1
    30b4:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    30b8:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <main+0x30e>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    30bc:	6e e1       	ldi	r22, 0x1E	; 30
    30be:	70 e0       	ldi	r23, 0x00	; 0
    30c0:	c2 01       	movw	r24, r4
    30c2:	0e 94 84 24 	call	0x4908	; 0x4908 <strnlen>
    30c6:	05 97       	sbiw	r24, 0x05	; 5
    30c8:	9c 01       	movw	r18, r24
    30ca:	d5 01       	movw	r26, r10
    30cc:	a5 01       	movw	r20, r10
    30ce:	4c 5e       	subi	r20, 0xEC	; 236
    30d0:	5f 4f       	sbci	r21, 0xFF	; 255
    30d2:	f5 01       	movw	r30, r10
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    30d4:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    30d6:	e4 17       	cp	r30, r20
    30d8:	f5 07       	cpc	r31, r21
    30da:	e1 f7       	brne	.-8      	; 0x30d4 <main+0x15c4>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    30dc:	2b 30       	cpi	r18, 0x0B	; 11
    30de:	31 05       	cpc	r19, r1
    30e0:	54 f0       	brlt	.+20     	; 0x30f6 <main+0x15e6>
    30e2:	e1 e4       	ldi	r30, 0x41	; 65
    30e4:	f5 e0       	ldi	r31, 0x05	; 5
    30e6:	89 5c       	subi	r24, 0xC9	; 201
    30e8:	9a 4f       	sbci	r25, 0xFA	; 250
    30ea:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    30ec:	91 91       	ld	r25, Z+
    30ee:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    30f0:	e2 17       	cp	r30, r18
    30f2:	f3 07       	cpc	r31, r19
    30f4:	d9 f7       	brne	.-10     	; 0x30ec <main+0x15dc>
		}
		break;
		
		case 155:	// Set Temperature error window
		ParamParse(rx_string, param);
		ch0.tempErrorWin = atof(param);
    30f6:	c5 01       	movw	r24, r10
    30f8:	0e 94 1f 24 	call	0x483e	; 0x483e <atof>
    30fc:	60 93 18 03 	sts	0x0318, r22
    3100:	70 93 19 03 	sts	0x0319, r23
    3104:	80 93 1a 03 	sts	0x031A, r24
    3108:	90 93 1b 03 	sts	0x031B, r25
		printStatus("");
    310c:	89 e2       	ldi	r24, 0x29	; 41
    310e:	91 e0       	ldi	r25, 0x01	; 1
    3110:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    3114:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <main+0x30e>
		break;

		case 156:	// Set Temperature Settle time
		ParamParse(rx_string, param);
    3118:	b5 01       	movw	r22, r10
    311a:	c2 01       	movw	r24, r4
    311c:	0e 94 30 01 	call	0x260	; 0x260 <ParamParse>
		ch0.tempSettleTime = atoi(param);
    3120:	c5 01       	movw	r24, r10
    3122:	0e 94 22 24 	call	0x4844	; 0x4844 <atoi>
    3126:	90 93 1f 03 	sts	0x031F, r25
    312a:	80 93 1e 03 	sts	0x031E, r24
		printStatus("");
    312e:	89 e2       	ldi	r24, 0x29	; 41
    3130:	91 e0       	ldi	r25, 0x01	; 1
    3132:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    3136:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <main+0x30e>
		break;
		
		// *** Channel 1 ***
		case 250:	// ch1.TempSetPoint
		ParamParse(rx_string, param);
    313a:	b5 01       	movw	r22, r10
    313c:	c2 01       	movw	r24, r4
    313e:	0e 94 30 01 	call	0x260	; 0x260 <ParamParse>
		ch1.TempSetPoint = atof(param);
    3142:	c5 01       	movw	r24, r10
    3144:	0e 94 1f 24 	call	0x483e	; 0x483e <atof>
    3148:	60 93 61 02 	sts	0x0261, r22
    314c:	70 93 62 02 	sts	0x0262, r23
    3150:	80 93 63 02 	sts	0x0263, r24
    3154:	90 93 64 02 	sts	0x0264, r25
		printStatus("");
    3158:	89 e2       	ldi	r24, 0x29	; 41
    315a:	91 e0       	ldi	r25, 0x01	; 1
    315c:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    3160:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <main+0x30e>
		break;
		
		case 251:	// SetPgainCh1
		ParamParse(rx_string, param);
    3164:	b5 01       	movw	r22, r10
    3166:	c2 01       	movw	r24, r4
    3168:	0e 94 30 01 	call	0x260	; 0x260 <ParamParse>
		ch1.Pgain = atof(param);
    316c:	c5 01       	movw	r24, r10
    316e:	0e 94 1f 24 	call	0x483e	; 0x483e <atof>
    3172:	60 93 7d 02 	sts	0x027D, r22
    3176:	70 93 7e 02 	sts	0x027E, r23
    317a:	80 93 7f 02 	sts	0x027F, r24
    317e:	90 93 80 02 	sts	0x0280, r25
		printStatus("");
    3182:	89 e2       	ldi	r24, 0x29	; 41
    3184:	91 e0       	ldi	r25, 0x01	; 1
    3186:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    318a:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <main+0x30e>
		break;
		
		case 252:	// SetIgainCh1
		ParamParse(rx_string, param);
    318e:	b5 01       	movw	r22, r10
    3190:	c2 01       	movw	r24, r4
    3192:	0e 94 30 01 	call	0x260	; 0x260 <ParamParse>
		ch1.Igain = atof(param);
    3196:	c5 01       	movw	r24, r10
    3198:	0e 94 1f 24 	call	0x483e	; 0x483e <atof>
    319c:	60 93 81 02 	sts	0x0281, r22
    31a0:	70 93 82 02 	sts	0x0282, r23
    31a4:	80 93 83 02 	sts	0x0283, r24
    31a8:	90 93 84 02 	sts	0x0284, r25
		printStatus("");
    31ac:	89 e2       	ldi	r24, 0x29	; 41
    31ae:	91 e0       	ldi	r25, 0x01	; 1
    31b0:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    31b4:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <main+0x30e>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    31b8:	6e e1       	ldi	r22, 0x1E	; 30
    31ba:	70 e0       	ldi	r23, 0x00	; 0
    31bc:	c2 01       	movw	r24, r4
    31be:	0e 94 84 24 	call	0x4908	; 0x4908 <strnlen>
    31c2:	05 97       	sbiw	r24, 0x05	; 5
    31c4:	9c 01       	movw	r18, r24
    31c6:	d5 01       	movw	r26, r10
    31c8:	a5 01       	movw	r20, r10
    31ca:	4c 5e       	subi	r20, 0xEC	; 236
    31cc:	5f 4f       	sbci	r21, 0xFF	; 255
    31ce:	f5 01       	movw	r30, r10
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    31d0:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    31d2:	e4 17       	cp	r30, r20
    31d4:	f5 07       	cpc	r31, r21
    31d6:	e1 f7       	brne	.-8      	; 0x31d0 <main+0x16c0>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    31d8:	2b 30       	cpi	r18, 0x0B	; 11
    31da:	31 05       	cpc	r19, r1
    31dc:	54 f0       	brlt	.+20     	; 0x31f2 <main+0x16e2>
    31de:	e1 e4       	ldi	r30, 0x41	; 65
    31e0:	f5 e0       	ldi	r31, 0x05	; 5
    31e2:	89 5c       	subi	r24, 0xC9	; 201
    31e4:	9a 4f       	sbci	r25, 0xFA	; 250
    31e6:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    31e8:	91 91       	ld	r25, Z+
    31ea:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    31ec:	e2 17       	cp	r30, r18
    31ee:	f3 07       	cpc	r31, r19
    31f0:	d9 f7       	brne	.-10     	; 0x31e8 <main+0x16d8>
		printStatus("");
		break;
		
		case 253:	// Setch1.Dgain
		ParamParse(rx_string, param);
		ch1.Dgain = atof(param);
    31f2:	c5 01       	movw	r24, r10
    31f4:	0e 94 1f 24 	call	0x483e	; 0x483e <atof>
    31f8:	60 93 85 02 	sts	0x0285, r22
    31fc:	70 93 86 02 	sts	0x0286, r23
    3200:	80 93 87 02 	sts	0x0287, r24
    3204:	90 93 88 02 	sts	0x0288, r25
		printStatus("");
    3208:	89 e2       	ldi	r24, 0x29	; 41
    320a:	91 e0       	ldi	r25, 0x01	; 1
    320c:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    3210:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <main+0x30e>
		break;
		
		case 254:	// Set heater on/off ch1
		if(rx_string[10] == '1')
    3214:	d2 01       	movw	r26, r4
    3216:	1a 96       	adiw	r26, 0x0a	; 10
    3218:	8c 91       	ld	r24, X
    321a:	81 33       	cpi	r24, 0x31	; 49
    321c:	49 f4       	brne	.+18     	; 0x3230 <main+0x1720>
		{
			ch1.heaterEnable = true;
    321e:	81 e0       	ldi	r24, 0x01	; 1
    3220:	80 93 c3 02 	sts	0x02C3, r24
			printStatus("ON");
    3224:	87 e3       	ldi	r24, 0x37	; 55
    3226:	91 e0       	ldi	r25, 0x01	; 1
    3228:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    322c:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <main+0x30e>
		}
		else if(rx_string[10] == '0')
    3230:	80 33       	cpi	r24, 0x30	; 48
    3232:	11 f0       	breq	.+4      	; 0x3238 <main+0x1728>
    3234:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <main+0x30e>
		{
			ch1.heaterEnable = false;
    3238:	10 92 c3 02 	sts	0x02C3, r1
			printStatus("OFF");
    323c:	8a e3       	ldi	r24, 0x3A	; 58
    323e:	91 e0       	ldi	r25, 0x01	; 1
    3240:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    3244:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <main+0x30e>
		}
		break;
		
		case 255:	// Set Temperature error window
		ParamParse(rx_string, param);
    3248:	b5 01       	movw	r22, r10
    324a:	c2 01       	movw	r24, r4
    324c:	0e 94 30 01 	call	0x260	; 0x260 <ParamParse>
		ch1.tempErrorWin = atof(param);
    3250:	c5 01       	movw	r24, r10
    3252:	0e 94 1f 24 	call	0x483e	; 0x483e <atof>
    3256:	60 93 b5 02 	sts	0x02B5, r22
    325a:	70 93 b6 02 	sts	0x02B6, r23
    325e:	80 93 b7 02 	sts	0x02B7, r24
    3262:	90 93 b8 02 	sts	0x02B8, r25
		printStatus("");
    3266:	89 e2       	ldi	r24, 0x29	; 41
    3268:	91 e0       	ldi	r25, 0x01	; 1
    326a:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    326e:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <main+0x30e>
		break;

		case 256:	// Set Temperature Settle time
		ParamParse(rx_string, param);
    3272:	b5 01       	movw	r22, r10
    3274:	c2 01       	movw	r24, r4
    3276:	0e 94 30 01 	call	0x260	; 0x260 <ParamParse>
		ch1.tempSettleTime = atoi(param);
    327a:	c5 01       	movw	r24, r10
    327c:	0e 94 22 24 	call	0x4844	; 0x4844 <atoi>
    3280:	90 93 bc 02 	sts	0x02BC, r25
    3284:	80 93 bb 02 	sts	0x02BB, r24
		printStatus("");
    3288:	89 e2       	ldi	r24, 0x29	; 41
    328a:	91 e0       	ldi	r25, 0x01	; 1
    328c:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    3290:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <main+0x30e>
		break;		
		
		// *** Channel 2 ***
		case 350:	// ch2.TempSetPoint
		ParamParse(rx_string, param);
    3294:	b5 01       	movw	r22, r10
    3296:	c2 01       	movw	r24, r4
    3298:	0e 94 30 01 	call	0x260	; 0x260 <ParamParse>
		ch2.TempSetPoint = atof(param);
    329c:	c5 01       	movw	r24, r10
    329e:	0e 94 1f 24 	call	0x483e	; 0x483e <atof>
    32a2:	60 93 fe 01 	sts	0x01FE, r22
    32a6:	70 93 ff 01 	sts	0x01FF, r23
    32aa:	80 93 00 02 	sts	0x0200, r24
    32ae:	90 93 01 02 	sts	0x0201, r25
		printStatus("");
    32b2:	89 e2       	ldi	r24, 0x29	; 41
    32b4:	91 e0       	ldi	r25, 0x01	; 1
    32b6:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    32ba:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <main+0x30e>
		break;
		
		case 351:	// SetPgainCh2
		ParamParse(rx_string, param);
    32be:	b5 01       	movw	r22, r10
    32c0:	c2 01       	movw	r24, r4
    32c2:	0e 94 30 01 	call	0x260	; 0x260 <ParamParse>
		ch2.Pgain = atof(param);
    32c6:	c5 01       	movw	r24, r10
    32c8:	0e 94 1f 24 	call	0x483e	; 0x483e <atof>
    32cc:	60 93 1a 02 	sts	0x021A, r22
    32d0:	70 93 1b 02 	sts	0x021B, r23
    32d4:	80 93 1c 02 	sts	0x021C, r24
    32d8:	90 93 1d 02 	sts	0x021D, r25
		printStatus("");
    32dc:	89 e2       	ldi	r24, 0x29	; 41
    32de:	91 e0       	ldi	r25, 0x01	; 1
    32e0:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    32e4:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <main+0x30e>
		break;
		
		case 352:	// SetIgainCh2
		ParamParse(rx_string, param);
    32e8:	b5 01       	movw	r22, r10
    32ea:	c2 01       	movw	r24, r4
    32ec:	0e 94 30 01 	call	0x260	; 0x260 <ParamParse>
		ch2.Igain = atof(param);
    32f0:	c5 01       	movw	r24, r10
    32f2:	0e 94 1f 24 	call	0x483e	; 0x483e <atof>
    32f6:	60 93 1e 02 	sts	0x021E, r22
    32fa:	70 93 1f 02 	sts	0x021F, r23
    32fe:	80 93 20 02 	sts	0x0220, r24
    3302:	90 93 21 02 	sts	0x0221, r25
		printStatus("");
    3306:	89 e2       	ldi	r24, 0x29	; 41
    3308:	91 e0       	ldi	r25, 0x01	; 1
    330a:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    330e:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <main+0x30e>
		break;
		
		case 353:	// Setch2.Dgain
		ParamParse(rx_string, param);
    3312:	b5 01       	movw	r22, r10
    3314:	c2 01       	movw	r24, r4
    3316:	0e 94 30 01 	call	0x260	; 0x260 <ParamParse>
		ch2.Dgain = atof(param);
    331a:	c5 01       	movw	r24, r10
    331c:	0e 94 1f 24 	call	0x483e	; 0x483e <atof>
    3320:	60 93 22 02 	sts	0x0222, r22
    3324:	70 93 23 02 	sts	0x0223, r23
    3328:	80 93 24 02 	sts	0x0224, r24
    332c:	90 93 25 02 	sts	0x0225, r25
		printStatus("");
    3330:	89 e2       	ldi	r24, 0x29	; 41
    3332:	91 e0       	ldi	r25, 0x01	; 1
    3334:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    3338:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <main+0x30e>
		break;
		
		case 354:	// Set heater on/off ch2
		if(rx_string[10] == '1')
    333c:	f2 01       	movw	r30, r4
    333e:	82 85       	ldd	r24, Z+10	; 0x0a
    3340:	81 33       	cpi	r24, 0x31	; 49
    3342:	49 f4       	brne	.+18     	; 0x3356 <main+0x1846>
		{
			ch2.heaterEnable = true;
    3344:	81 e0       	ldi	r24, 0x01	; 1
    3346:	80 93 60 02 	sts	0x0260, r24
			printStatus("ON");
    334a:	87 e3       	ldi	r24, 0x37	; 55
    334c:	91 e0       	ldi	r25, 0x01	; 1
    334e:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    3352:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <main+0x30e>
		}
		else if(rx_string[10] == '0')
    3356:	80 33       	cpi	r24, 0x30	; 48
    3358:	11 f0       	breq	.+4      	; 0x335e <main+0x184e>
    335a:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <main+0x30e>
		{
			ch2.heaterEnable = false;
    335e:	10 92 60 02 	sts	0x0260, r1
			printStatus("OFF");
    3362:	8a e3       	ldi	r24, 0x3A	; 58
    3364:	91 e0       	ldi	r25, 0x01	; 1
    3366:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    336a:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <main+0x30e>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    336e:	6e e1       	ldi	r22, 0x1E	; 30
    3370:	70 e0       	ldi	r23, 0x00	; 0
    3372:	c2 01       	movw	r24, r4
    3374:	0e 94 84 24 	call	0x4908	; 0x4908 <strnlen>
    3378:	05 97       	sbiw	r24, 0x05	; 5
    337a:	9c 01       	movw	r18, r24
    337c:	d5 01       	movw	r26, r10
    337e:	a5 01       	movw	r20, r10
    3380:	4c 5e       	subi	r20, 0xEC	; 236
    3382:	5f 4f       	sbci	r21, 0xFF	; 255
    3384:	f5 01       	movw	r30, r10
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    3386:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    3388:	e4 17       	cp	r30, r20
    338a:	f5 07       	cpc	r31, r21
    338c:	e1 f7       	brne	.-8      	; 0x3386 <main+0x1876>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    338e:	2b 30       	cpi	r18, 0x0B	; 11
    3390:	31 05       	cpc	r19, r1
    3392:	54 f0       	brlt	.+20     	; 0x33a8 <main+0x1898>
    3394:	e1 e4       	ldi	r30, 0x41	; 65
    3396:	f5 e0       	ldi	r31, 0x05	; 5
    3398:	89 5c       	subi	r24, 0xC9	; 201
    339a:	9a 4f       	sbci	r25, 0xFA	; 250
    339c:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    339e:	91 91       	ld	r25, Z+
    33a0:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    33a2:	e2 17       	cp	r30, r18
    33a4:	f3 07       	cpc	r31, r19
    33a6:	d9 f7       	brne	.-10     	; 0x339e <main+0x188e>
		}
		break;
		
		case 355:	// Set Temperature error window
		ParamParse(rx_string, param);
		ch2.tempErrorWin = atof(param);
    33a8:	c5 01       	movw	r24, r10
    33aa:	0e 94 1f 24 	call	0x483e	; 0x483e <atof>
    33ae:	60 93 52 02 	sts	0x0252, r22
    33b2:	70 93 53 02 	sts	0x0253, r23
    33b6:	80 93 54 02 	sts	0x0254, r24
    33ba:	90 93 55 02 	sts	0x0255, r25
		printStatus("");
    33be:	89 e2       	ldi	r24, 0x29	; 41
    33c0:	91 e0       	ldi	r25, 0x01	; 1
    33c2:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    33c6:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <main+0x30e>
		break;

		case 356:	// Set Temperature Settle time
		ParamParse(rx_string, param);
    33ca:	b5 01       	movw	r22, r10
    33cc:	c2 01       	movw	r24, r4
    33ce:	0e 94 30 01 	call	0x260	; 0x260 <ParamParse>
		ch2.tempSettleTime = atoi(param);
    33d2:	c5 01       	movw	r24, r10
    33d4:	0e 94 22 24 	call	0x4844	; 0x4844 <atoi>
    33d8:	90 93 59 02 	sts	0x0259, r25
    33dc:	80 93 58 02 	sts	0x0258, r24
		printStatus("");
    33e0:	89 e2       	ldi	r24, 0x29	; 41
    33e2:	91 e0       	ldi	r25, 0x01	; 1
    33e4:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    33e8:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <main+0x30e>
		break;		
		
		// *** Channel 4 ***
		case 450:	// ch3.TempSetPoint
		ParamParse(rx_string, param);
    33ec:	b5 01       	movw	r22, r10
    33ee:	c2 01       	movw	r24, r4
    33f0:	0e 94 30 01 	call	0x260	; 0x260 <ParamParse>
		ch3.TempSetPoint = atof(param);
    33f4:	c5 01       	movw	r24, r10
    33f6:	0e 94 1f 24 	call	0x483e	; 0x483e <atof>
    33fa:	60 93 9b 01 	sts	0x019B, r22
    33fe:	70 93 9c 01 	sts	0x019C, r23
    3402:	80 93 9d 01 	sts	0x019D, r24
    3406:	90 93 9e 01 	sts	0x019E, r25
		printStatus("");
    340a:	89 e2       	ldi	r24, 0x29	; 41
    340c:	91 e0       	ldi	r25, 0x01	; 1
    340e:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    3412:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <main+0x30e>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    3416:	6e e1       	ldi	r22, 0x1E	; 30
    3418:	70 e0       	ldi	r23, 0x00	; 0
    341a:	c2 01       	movw	r24, r4
    341c:	0e 94 84 24 	call	0x4908	; 0x4908 <strnlen>
    3420:	05 97       	sbiw	r24, 0x05	; 5
    3422:	9c 01       	movw	r18, r24
    3424:	d5 01       	movw	r26, r10
    3426:	a5 01       	movw	r20, r10
    3428:	4c 5e       	subi	r20, 0xEC	; 236
    342a:	5f 4f       	sbci	r21, 0xFF	; 255
    342c:	f5 01       	movw	r30, r10
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    342e:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    3430:	e4 17       	cp	r30, r20
    3432:	f5 07       	cpc	r31, r21
    3434:	e1 f7       	brne	.-8      	; 0x342e <main+0x191e>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    3436:	2b 30       	cpi	r18, 0x0B	; 11
    3438:	31 05       	cpc	r19, r1
    343a:	54 f0       	brlt	.+20     	; 0x3450 <main+0x1940>
    343c:	e1 e4       	ldi	r30, 0x41	; 65
    343e:	f5 e0       	ldi	r31, 0x05	; 5
    3440:	89 5c       	subi	r24, 0xC9	; 201
    3442:	9a 4f       	sbci	r25, 0xFA	; 250
    3444:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    3446:	91 91       	ld	r25, Z+
    3448:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    344a:	e2 17       	cp	r30, r18
    344c:	f3 07       	cpc	r31, r19
    344e:	d9 f7       	brne	.-10     	; 0x3446 <main+0x1936>
		printStatus("");
		break;
		
		case 451:	// SetPgainCh3
		ParamParse(rx_string, param);
		ch3.Pgain = atof(param);
    3450:	c5 01       	movw	r24, r10
    3452:	0e 94 1f 24 	call	0x483e	; 0x483e <atof>
    3456:	60 93 b7 01 	sts	0x01B7, r22
    345a:	70 93 b8 01 	sts	0x01B8, r23
    345e:	80 93 b9 01 	sts	0x01B9, r24
    3462:	90 93 ba 01 	sts	0x01BA, r25
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    3466:	81 e2       	ldi	r24, 0x21	; 33
    3468:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    346a:	d2 01       	movw	r26, r4
    346c:	11 96       	adiw	r26, 0x01	; 1
    346e:	8c 91       	ld	r24, X
    3470:	11 97       	sbiw	r26, 0x01	; 1
    3472:	8f 8f       	std	Y+31, r24	; 0x1f
    3474:	12 96       	adiw	r26, 0x02	; 2
    3476:	8c 91       	ld	r24, X
    3478:	12 97       	sbiw	r26, 0x02	; 2
    347a:	88 a3       	std	Y+32, r24	; 0x20
    347c:	13 96       	adiw	r26, 0x03	; 3
    347e:	8c 91       	ld	r24, X
    3480:	89 a3       	std	Y+33, r24	; 0x21
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    3482:	1a a2       	std	Y+34, r1	; 0x22
    3484:	1b a2       	std	Y+35, r1	; 0x23
    3486:	1c a2       	std	Y+36, r1	; 0x24
    3488:	7e 01       	movw	r14, r28
    348a:	be e1       	ldi	r27, 0x1E	; 30
    348c:	eb 0e       	add	r14, r27
    348e:	f1 1c       	adc	r15, r1
    3490:	be 01       	movw	r22, r28
    3492:	6e 5d       	subi	r22, 0xDE	; 222
    3494:	7f 4f       	sbci	r23, 0xFF	; 255
    3496:	f7 01       	movw	r30, r14
    3498:	80 e0       	ldi	r24, 0x00	; 0
    349a:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    349c:	b8 e0       	ldi	r27, 0x08	; 8
    349e:	d1 2c       	mov	r13, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    34a0:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    34a2:	29 2f       	mov	r18, r25
    34a4:	33 27       	eor	r19, r19
    34a6:	27 fd       	sbrc	r18, 7
    34a8:	3a 95       	dec	r19
    34aa:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    34ac:	32 2f       	mov	r19, r18
    34ae:	22 27       	eor	r18, r18
    34b0:	4b 2f       	mov	r20, r27
    34b2:	5d 2d       	mov	r21, r13
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    34b4:	33 23       	and	r19, r19
    34b6:	3c f4       	brge	.+14     	; 0x34c6 <main+0x19b6>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    34b8:	22 0f       	add	r18, r18
    34ba:	33 1f       	adc	r19, r19
    34bc:	a1 e2       	ldi	r26, 0x21	; 33
    34be:	2a 27       	eor	r18, r26
    34c0:	a0 e1       	ldi	r26, 0x10	; 16
    34c2:	3a 27       	eor	r19, r26
    34c4:	02 c0       	rjmp	.+4      	; 0x34ca <main+0x19ba>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    34c6:	22 0f       	add	r18, r18
    34c8:	33 1f       	adc	r19, r19
    34ca:	41 50       	subi	r20, 0x01	; 1
    34cc:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    34ce:	91 f7       	brne	.-28     	; 0x34b4 <main+0x19a4>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    34d0:	98 2f       	mov	r25, r24
    34d2:	88 27       	eor	r24, r24
    34d4:	82 27       	eor	r24, r18
    34d6:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    34d8:	e6 17       	cp	r30, r22
    34da:	f7 07       	cpc	r31, r23
    34dc:	09 f7       	brne	.-62     	; 0x34a0 <main+0x1990>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    34de:	6c 01       	movw	r12, r24
    34e0:	40 e1       	ldi	r20, 0x10	; 16
    34e2:	6d e2       	ldi	r22, 0x2D	; 45
    34e4:	75 e0       	ldi	r23, 0x05	; 5
    34e6:	0e 94 99 24 	call	0x4932	; 0x4932 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    34ea:	8d e2       	ldi	r24, 0x2D	; 45
    34ec:	95 e0       	ldi	r25, 0x05	; 5
    34ee:	0e 94 8f 24 	call	0x491e	; 0x491e <strupr>
	if(crcXmodem < 0x10)
    34f2:	b0 e1       	ldi	r27, 0x10	; 16
    34f4:	cb 16       	cp	r12, r27
    34f6:	d1 04       	cpc	r13, r1
    34f8:	38 f4       	brcc	.+14     	; 0x3508 <main+0x19f8>
	{
		tx_string[cnt+4] = crc[0];
    34fa:	80 91 2d 05 	lds	r24, 0x052D
    34fe:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = '0';
    3500:	80 e3       	ldi	r24, 0x30	; 48
    3502:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = '0';
    3504:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';
    3506:	8a a3       	std	Y+34, r24	; 0x22
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    3508:	c6 01       	movw	r24, r12
    350a:	40 97       	sbiw	r24, 0x10	; 16
    350c:	80 3f       	cpi	r24, 0xF0	; 240
    350e:	91 05       	cpc	r25, r1
    3510:	48 f4       	brcc	.+18     	; 0x3524 <main+0x1a14>
	{
		tx_string[cnt+4] = crc[1];
    3512:	ed e2       	ldi	r30, 0x2D	; 45
    3514:	f5 e0       	ldi	r31, 0x05	; 5
    3516:	81 81       	ldd	r24, Z+1	; 0x01
    3518:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[0];
    351a:	80 81       	ld	r24, Z
    351c:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = '0';
    351e:	80 e3       	ldi	r24, 0x30	; 48
    3520:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';		
    3522:	8a a3       	std	Y+34, r24	; 0x22
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    3524:	c6 01       	movw	r24, r12
    3526:	9a 95       	dec	r25
    3528:	81 15       	cp	r24, r1
    352a:	9f 40       	sbci	r25, 0x0F	; 15
    352c:	50 f4       	brcc	.+20     	; 0x3542 <main+0x1a32>
	{
		tx_string[cnt+4] = crc[2];
    352e:	ed e2       	ldi	r30, 0x2D	; 45
    3530:	f5 e0       	ldi	r31, 0x05	; 5
    3532:	82 81       	ldd	r24, Z+2	; 0x02
    3534:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[1];
    3536:	81 81       	ldd	r24, Z+1	; 0x01
    3538:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = crc[0];
    353a:	80 81       	ld	r24, Z
    353c:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';		
    353e:	80 e3       	ldi	r24, 0x30	; 48
    3540:	8a a3       	std	Y+34, r24	; 0x22
	}
	if(crcXmodem >= 0x1000)
    3542:	c1 14       	cp	r12, r1
    3544:	f0 e1       	ldi	r31, 0x10	; 16
    3546:	df 06       	cpc	r13, r31
    3548:	50 f0       	brcs	.+20     	; 0x355e <main+0x1a4e>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    354a:	ed e2       	ldi	r30, 0x2D	; 45
    354c:	f5 e0       	ldi	r31, 0x05	; 5
    354e:	80 81       	ld	r24, Z
    3550:	8a a3       	std	Y+34, r24	; 0x22
		tx_string[cnt+2] = crc[1];
    3552:	81 81       	ldd	r24, Z+1	; 0x01
    3554:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+3] = crc[2];
    3556:	82 81       	ldd	r24, Z+2	; 0x02
    3558:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+4] = crc[3];
    355a:	83 81       	ldd	r24, Z+3	; 0x03
    355c:	8d a3       	std	Y+37, r24	; 0x25
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    355e:	8d e0       	ldi	r24, 0x0D	; 13
    3560:	8e a3       	std	Y+38, r24	; 0x26
    3562:	9e 01       	movw	r18, r28
    3564:	29 5d       	subi	r18, 0xD9	; 217
    3566:	3f 4f       	sbci	r19, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3568:	e5 e5       	ldi	r30, 0x55	; 85
    356a:	f5 e0       	ldi	r31, 0x05	; 5
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    356c:	0f 2e       	mov	r0, r31
    356e:	f1 ec       	ldi	r31, 0xC1	; 193
    3570:	8f 2e       	mov	r8, r31
    3572:	91 2c       	mov	r9, r1
    3574:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3576:	70 e0       	ldi	r23, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    3578:	d7 01       	movw	r26, r14
    357a:	4d 91       	ld	r20, X+
    357c:	7d 01       	movw	r14, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    357e:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3580:	91 81       	ldd	r25, Z+1	; 0x01
    3582:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    3584:	98 13       	cpse	r25, r24
    3586:	04 c0       	rjmp	.+8      	; 0x3590 <main+0x1a80>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3588:	d4 01       	movw	r26, r8
    358a:	8c 91       	ld	r24, X
    358c:	80 62       	ori	r24, 0x20	; 32
    358e:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    3590:	50 81       	ld	r21, Z
    3592:	83 81       	ldd	r24, Z+3	; 0x03
    3594:	94 81       	ldd	r25, Z+4	; 0x04
    3596:	85 0f       	add	r24, r21
    3598:	91 1d       	adc	r25, r1
    359a:	dc 01       	movw	r26, r24
    359c:	4c 93       	st	X, r20
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    359e:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    35a0:	c8 2e       	mov	r12, r24
    35a2:	d1 2c       	mov	r13, r1
    35a4:	42 81       	ldd	r20, Z+2	; 0x02
    35a6:	50 e0       	ldi	r21, 0x00	; 0
    35a8:	41 50       	subi	r20, 0x01	; 1
    35aa:	51 09       	sbc	r21, r1
    35ac:	c4 16       	cp	r12, r20
    35ae:	d5 06       	cpc	r13, r21
    35b0:	11 f0       	breq	.+4      	; 0x35b6 <main+0x1aa6>
    35b2:	8f 5f       	subi	r24, 0xFF	; 255
    35b4:	01 c0       	rjmp	.+2      	; 0x35b8 <main+0x1aa8>
    35b6:	87 2f       	mov	r24, r23
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    35b8:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    35ba:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    35bc:	e2 16       	cp	r14, r18
    35be:	f3 06       	cpc	r15, r19
    35c0:	d9 f6       	brne	.-74     	; 0x3578 <main+0x1a68>
    35c2:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <main+0x30e>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    35c6:	6e e1       	ldi	r22, 0x1E	; 30
    35c8:	70 e0       	ldi	r23, 0x00	; 0
    35ca:	c2 01       	movw	r24, r4
    35cc:	0e 94 84 24 	call	0x4908	; 0x4908 <strnlen>
    35d0:	05 97       	sbiw	r24, 0x05	; 5
    35d2:	9c 01       	movw	r18, r24
    35d4:	d5 01       	movw	r26, r10
    35d6:	a5 01       	movw	r20, r10
    35d8:	4c 5e       	subi	r20, 0xEC	; 236
    35da:	5f 4f       	sbci	r21, 0xFF	; 255
    35dc:	f5 01       	movw	r30, r10
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    35de:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    35e0:	e4 17       	cp	r30, r20
    35e2:	f5 07       	cpc	r31, r21
    35e4:	e1 f7       	brne	.-8      	; 0x35de <main+0x1ace>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    35e6:	2b 30       	cpi	r18, 0x0B	; 11
    35e8:	31 05       	cpc	r19, r1
    35ea:	54 f0       	brlt	.+20     	; 0x3600 <main+0x1af0>
    35ec:	e1 e4       	ldi	r30, 0x41	; 65
    35ee:	f5 e0       	ldi	r31, 0x05	; 5
    35f0:	89 5c       	subi	r24, 0xC9	; 201
    35f2:	9a 4f       	sbci	r25, 0xFA	; 250
    35f4:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    35f6:	91 91       	ld	r25, Z+
    35f8:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    35fa:	e2 17       	cp	r30, r18
    35fc:	f3 07       	cpc	r31, r19
    35fe:	d9 f7       	brne	.-10     	; 0x35f6 <main+0x1ae6>
		printStatus("");
		break;
		
		case 452:	// SetIgainCh3
		ParamParse(rx_string, param);
		ch3.Igain = atof(param);
    3600:	c5 01       	movw	r24, r10
    3602:	0e 94 1f 24 	call	0x483e	; 0x483e <atof>
    3606:	60 93 bb 01 	sts	0x01BB, r22
    360a:	70 93 bc 01 	sts	0x01BC, r23
    360e:	80 93 bd 01 	sts	0x01BD, r24
    3612:	90 93 be 01 	sts	0x01BE, r25
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    3616:	81 e2       	ldi	r24, 0x21	; 33
    3618:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    361a:	f2 01       	movw	r30, r4
    361c:	81 81       	ldd	r24, Z+1	; 0x01
    361e:	8f 8f       	std	Y+31, r24	; 0x1f
    3620:	82 81       	ldd	r24, Z+2	; 0x02
    3622:	88 a3       	std	Y+32, r24	; 0x20
    3624:	83 81       	ldd	r24, Z+3	; 0x03
    3626:	89 a3       	std	Y+33, r24	; 0x21
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    3628:	1a a2       	std	Y+34, r1	; 0x22
    362a:	1b a2       	std	Y+35, r1	; 0x23
    362c:	1c a2       	std	Y+36, r1	; 0x24
    362e:	7e 01       	movw	r14, r28
    3630:	fe e1       	ldi	r31, 0x1E	; 30
    3632:	ef 0e       	add	r14, r31
    3634:	f1 1c       	adc	r15, r1
    3636:	be 01       	movw	r22, r28
    3638:	6e 5d       	subi	r22, 0xDE	; 222
    363a:	7f 4f       	sbci	r23, 0xFF	; 255
    363c:	f7 01       	movw	r30, r14
    363e:	80 e0       	ldi	r24, 0x00	; 0
    3640:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    3642:	b8 e0       	ldi	r27, 0x08	; 8
    3644:	d1 2c       	mov	r13, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    3646:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    3648:	29 2f       	mov	r18, r25
    364a:	33 27       	eor	r19, r19
    364c:	27 fd       	sbrc	r18, 7
    364e:	3a 95       	dec	r19
    3650:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    3652:	32 2f       	mov	r19, r18
    3654:	22 27       	eor	r18, r18
    3656:	4b 2f       	mov	r20, r27
    3658:	5d 2d       	mov	r21, r13
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    365a:	33 23       	and	r19, r19
    365c:	3c f4       	brge	.+14     	; 0x366c <main+0x1b5c>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    365e:	22 0f       	add	r18, r18
    3660:	33 1f       	adc	r19, r19
    3662:	a1 e2       	ldi	r26, 0x21	; 33
    3664:	2a 27       	eor	r18, r26
    3666:	a0 e1       	ldi	r26, 0x10	; 16
    3668:	3a 27       	eor	r19, r26
    366a:	02 c0       	rjmp	.+4      	; 0x3670 <main+0x1b60>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    366c:	22 0f       	add	r18, r18
    366e:	33 1f       	adc	r19, r19
    3670:	41 50       	subi	r20, 0x01	; 1
    3672:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    3674:	91 f7       	brne	.-28     	; 0x365a <main+0x1b4a>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    3676:	98 2f       	mov	r25, r24
    3678:	88 27       	eor	r24, r24
    367a:	82 27       	eor	r24, r18
    367c:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    367e:	e6 17       	cp	r30, r22
    3680:	f7 07       	cpc	r31, r23
    3682:	09 f7       	brne	.-62     	; 0x3646 <main+0x1b36>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    3684:	6c 01       	movw	r12, r24
    3686:	40 e1       	ldi	r20, 0x10	; 16
    3688:	6d e2       	ldi	r22, 0x2D	; 45
    368a:	75 e0       	ldi	r23, 0x05	; 5
    368c:	0e 94 99 24 	call	0x4932	; 0x4932 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    3690:	8d e2       	ldi	r24, 0x2D	; 45
    3692:	95 e0       	ldi	r25, 0x05	; 5
    3694:	0e 94 8f 24 	call	0x491e	; 0x491e <strupr>
	if(crcXmodem < 0x10)
    3698:	b0 e1       	ldi	r27, 0x10	; 16
    369a:	cb 16       	cp	r12, r27
    369c:	d1 04       	cpc	r13, r1
    369e:	38 f4       	brcc	.+14     	; 0x36ae <main+0x1b9e>
	{
		tx_string[cnt+4] = crc[0];
    36a0:	80 91 2d 05 	lds	r24, 0x052D
    36a4:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = '0';
    36a6:	80 e3       	ldi	r24, 0x30	; 48
    36a8:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = '0';
    36aa:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';
    36ac:	8a a3       	std	Y+34, r24	; 0x22
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    36ae:	c6 01       	movw	r24, r12
    36b0:	40 97       	sbiw	r24, 0x10	; 16
    36b2:	80 3f       	cpi	r24, 0xF0	; 240
    36b4:	91 05       	cpc	r25, r1
    36b6:	48 f4       	brcc	.+18     	; 0x36ca <main+0x1bba>
	{
		tx_string[cnt+4] = crc[1];
    36b8:	ed e2       	ldi	r30, 0x2D	; 45
    36ba:	f5 e0       	ldi	r31, 0x05	; 5
    36bc:	81 81       	ldd	r24, Z+1	; 0x01
    36be:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[0];
    36c0:	80 81       	ld	r24, Z
    36c2:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = '0';
    36c4:	80 e3       	ldi	r24, 0x30	; 48
    36c6:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';		
    36c8:	8a a3       	std	Y+34, r24	; 0x22
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    36ca:	c6 01       	movw	r24, r12
    36cc:	9a 95       	dec	r25
    36ce:	81 15       	cp	r24, r1
    36d0:	9f 40       	sbci	r25, 0x0F	; 15
    36d2:	50 f4       	brcc	.+20     	; 0x36e8 <main+0x1bd8>
	{
		tx_string[cnt+4] = crc[2];
    36d4:	ed e2       	ldi	r30, 0x2D	; 45
    36d6:	f5 e0       	ldi	r31, 0x05	; 5
    36d8:	82 81       	ldd	r24, Z+2	; 0x02
    36da:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[1];
    36dc:	81 81       	ldd	r24, Z+1	; 0x01
    36de:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = crc[0];
    36e0:	80 81       	ld	r24, Z
    36e2:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';		
    36e4:	80 e3       	ldi	r24, 0x30	; 48
    36e6:	8a a3       	std	Y+34, r24	; 0x22
	}
	if(crcXmodem >= 0x1000)
    36e8:	c1 14       	cp	r12, r1
    36ea:	f0 e1       	ldi	r31, 0x10	; 16
    36ec:	df 06       	cpc	r13, r31
    36ee:	50 f0       	brcs	.+20     	; 0x3704 <main+0x1bf4>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    36f0:	ed e2       	ldi	r30, 0x2D	; 45
    36f2:	f5 e0       	ldi	r31, 0x05	; 5
    36f4:	80 81       	ld	r24, Z
    36f6:	8a a3       	std	Y+34, r24	; 0x22
		tx_string[cnt+2] = crc[1];
    36f8:	81 81       	ldd	r24, Z+1	; 0x01
    36fa:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+3] = crc[2];
    36fc:	82 81       	ldd	r24, Z+2	; 0x02
    36fe:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+4] = crc[3];
    3700:	83 81       	ldd	r24, Z+3	; 0x03
    3702:	8d a3       	std	Y+37, r24	; 0x25
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    3704:	8d e0       	ldi	r24, 0x0D	; 13
    3706:	8e a3       	std	Y+38, r24	; 0x26
    3708:	9e 01       	movw	r18, r28
    370a:	29 5d       	subi	r18, 0xD9	; 217
    370c:	3f 4f       	sbci	r19, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    370e:	e5 e5       	ldi	r30, 0x55	; 85
    3710:	f5 e0       	ldi	r31, 0x05	; 5
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3712:	0f 2e       	mov	r0, r31
    3714:	f1 ec       	ldi	r31, 0xC1	; 193
    3716:	8f 2e       	mov	r8, r31
    3718:	91 2c       	mov	r9, r1
    371a:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    371c:	70 e0       	ldi	r23, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    371e:	d7 01       	movw	r26, r14
    3720:	4d 91       	ld	r20, X+
    3722:	7d 01       	movw	r14, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    3724:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3726:	91 81       	ldd	r25, Z+1	; 0x01
    3728:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    372a:	98 13       	cpse	r25, r24
    372c:	04 c0       	rjmp	.+8      	; 0x3736 <main+0x1c26>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    372e:	d4 01       	movw	r26, r8
    3730:	8c 91       	ld	r24, X
    3732:	80 62       	ori	r24, 0x20	; 32
    3734:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    3736:	50 81       	ld	r21, Z
    3738:	83 81       	ldd	r24, Z+3	; 0x03
    373a:	94 81       	ldd	r25, Z+4	; 0x04
    373c:	85 0f       	add	r24, r21
    373e:	91 1d       	adc	r25, r1
    3740:	dc 01       	movw	r26, r24
    3742:	4c 93       	st	X, r20
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    3744:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3746:	c8 2e       	mov	r12, r24
    3748:	d1 2c       	mov	r13, r1
    374a:	42 81       	ldd	r20, Z+2	; 0x02
    374c:	50 e0       	ldi	r21, 0x00	; 0
    374e:	41 50       	subi	r20, 0x01	; 1
    3750:	51 09       	sbc	r21, r1
    3752:	c4 16       	cp	r12, r20
    3754:	d5 06       	cpc	r13, r21
    3756:	11 f0       	breq	.+4      	; 0x375c <main+0x1c4c>
    3758:	8f 5f       	subi	r24, 0xFF	; 255
    375a:	01 c0       	rjmp	.+2      	; 0x375e <main+0x1c4e>
    375c:	87 2f       	mov	r24, r23
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    375e:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    3760:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    3762:	e2 16       	cp	r14, r18
    3764:	f3 06       	cpc	r15, r19
    3766:	d9 f6       	brne	.-74     	; 0x371e <main+0x1c0e>
    3768:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <main+0x30e>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    376c:	6e e1       	ldi	r22, 0x1E	; 30
    376e:	70 e0       	ldi	r23, 0x00	; 0
    3770:	c2 01       	movw	r24, r4
    3772:	0e 94 84 24 	call	0x4908	; 0x4908 <strnlen>
    3776:	05 97       	sbiw	r24, 0x05	; 5
    3778:	9c 01       	movw	r18, r24
    377a:	d5 01       	movw	r26, r10
    377c:	a5 01       	movw	r20, r10
    377e:	4c 5e       	subi	r20, 0xEC	; 236
    3780:	5f 4f       	sbci	r21, 0xFF	; 255
    3782:	f5 01       	movw	r30, r10
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    3784:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    3786:	e4 17       	cp	r30, r20
    3788:	f5 07       	cpc	r31, r21
    378a:	e1 f7       	brne	.-8      	; 0x3784 <main+0x1c74>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    378c:	2b 30       	cpi	r18, 0x0B	; 11
    378e:	31 05       	cpc	r19, r1
    3790:	54 f0       	brlt	.+20     	; 0x37a6 <main+0x1c96>
    3792:	e1 e4       	ldi	r30, 0x41	; 65
    3794:	f5 e0       	ldi	r31, 0x05	; 5
    3796:	89 5c       	subi	r24, 0xC9	; 201
    3798:	9a 4f       	sbci	r25, 0xFA	; 250
    379a:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    379c:	91 91       	ld	r25, Z+
    379e:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    37a0:	e2 17       	cp	r30, r18
    37a2:	f3 07       	cpc	r31, r19
    37a4:	d9 f7       	brne	.-10     	; 0x379c <main+0x1c8c>
		printStatus("");
		break;
		
		case 453:	// Setch3.Dgain
		ParamParse(rx_string, param);
		ch3.Dgain = atof(param);
    37a6:	c5 01       	movw	r24, r10
    37a8:	0e 94 1f 24 	call	0x483e	; 0x483e <atof>
    37ac:	60 93 bf 01 	sts	0x01BF, r22
    37b0:	70 93 c0 01 	sts	0x01C0, r23
    37b4:	80 93 c1 01 	sts	0x01C1, r24
    37b8:	90 93 c2 01 	sts	0x01C2, r25
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    37bc:	81 e2       	ldi	r24, 0x21	; 33
    37be:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    37c0:	f2 01       	movw	r30, r4
    37c2:	81 81       	ldd	r24, Z+1	; 0x01
    37c4:	8f 8f       	std	Y+31, r24	; 0x1f
    37c6:	82 81       	ldd	r24, Z+2	; 0x02
    37c8:	88 a3       	std	Y+32, r24	; 0x20
    37ca:	83 81       	ldd	r24, Z+3	; 0x03
    37cc:	89 a3       	std	Y+33, r24	; 0x21
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    37ce:	1a a2       	std	Y+34, r1	; 0x22
    37d0:	1b a2       	std	Y+35, r1	; 0x23
    37d2:	1c a2       	std	Y+36, r1	; 0x24
    37d4:	7e 01       	movw	r14, r28
    37d6:	fe e1       	ldi	r31, 0x1E	; 30
    37d8:	ef 0e       	add	r14, r31
    37da:	f1 1c       	adc	r15, r1
    37dc:	be 01       	movw	r22, r28
    37de:	6e 5d       	subi	r22, 0xDE	; 222
    37e0:	7f 4f       	sbci	r23, 0xFF	; 255
    37e2:	f7 01       	movw	r30, r14
    37e4:	80 e0       	ldi	r24, 0x00	; 0
    37e6:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    37e8:	b8 e0       	ldi	r27, 0x08	; 8
    37ea:	d1 2c       	mov	r13, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    37ec:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    37ee:	29 2f       	mov	r18, r25
    37f0:	33 27       	eor	r19, r19
    37f2:	27 fd       	sbrc	r18, 7
    37f4:	3a 95       	dec	r19
    37f6:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    37f8:	32 2f       	mov	r19, r18
    37fa:	22 27       	eor	r18, r18
    37fc:	4b 2f       	mov	r20, r27
    37fe:	5d 2d       	mov	r21, r13
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    3800:	33 23       	and	r19, r19
    3802:	3c f4       	brge	.+14     	; 0x3812 <main+0x1d02>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    3804:	22 0f       	add	r18, r18
    3806:	33 1f       	adc	r19, r19
    3808:	a1 e2       	ldi	r26, 0x21	; 33
    380a:	2a 27       	eor	r18, r26
    380c:	a0 e1       	ldi	r26, 0x10	; 16
    380e:	3a 27       	eor	r19, r26
    3810:	02 c0       	rjmp	.+4      	; 0x3816 <main+0x1d06>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    3812:	22 0f       	add	r18, r18
    3814:	33 1f       	adc	r19, r19
    3816:	41 50       	subi	r20, 0x01	; 1
    3818:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    381a:	91 f7       	brne	.-28     	; 0x3800 <main+0x1cf0>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    381c:	98 2f       	mov	r25, r24
    381e:	88 27       	eor	r24, r24
    3820:	82 27       	eor	r24, r18
    3822:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    3824:	e6 17       	cp	r30, r22
    3826:	f7 07       	cpc	r31, r23
    3828:	09 f7       	brne	.-62     	; 0x37ec <main+0x1cdc>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    382a:	6c 01       	movw	r12, r24
    382c:	40 e1       	ldi	r20, 0x10	; 16
    382e:	6d e2       	ldi	r22, 0x2D	; 45
    3830:	75 e0       	ldi	r23, 0x05	; 5
    3832:	0e 94 99 24 	call	0x4932	; 0x4932 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    3836:	8d e2       	ldi	r24, 0x2D	; 45
    3838:	95 e0       	ldi	r25, 0x05	; 5
    383a:	0e 94 8f 24 	call	0x491e	; 0x491e <strupr>
	if(crcXmodem < 0x10)
    383e:	b0 e1       	ldi	r27, 0x10	; 16
    3840:	cb 16       	cp	r12, r27
    3842:	d1 04       	cpc	r13, r1
    3844:	38 f4       	brcc	.+14     	; 0x3854 <main+0x1d44>
	{
		tx_string[cnt+4] = crc[0];
    3846:	80 91 2d 05 	lds	r24, 0x052D
    384a:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = '0';
    384c:	80 e3       	ldi	r24, 0x30	; 48
    384e:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = '0';
    3850:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';
    3852:	8a a3       	std	Y+34, r24	; 0x22
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    3854:	c6 01       	movw	r24, r12
    3856:	40 97       	sbiw	r24, 0x10	; 16
    3858:	80 3f       	cpi	r24, 0xF0	; 240
    385a:	91 05       	cpc	r25, r1
    385c:	48 f4       	brcc	.+18     	; 0x3870 <main+0x1d60>
	{
		tx_string[cnt+4] = crc[1];
    385e:	ed e2       	ldi	r30, 0x2D	; 45
    3860:	f5 e0       	ldi	r31, 0x05	; 5
    3862:	81 81       	ldd	r24, Z+1	; 0x01
    3864:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[0];
    3866:	80 81       	ld	r24, Z
    3868:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = '0';
    386a:	80 e3       	ldi	r24, 0x30	; 48
    386c:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';		
    386e:	8a a3       	std	Y+34, r24	; 0x22
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    3870:	c6 01       	movw	r24, r12
    3872:	9a 95       	dec	r25
    3874:	81 15       	cp	r24, r1
    3876:	9f 40       	sbci	r25, 0x0F	; 15
    3878:	50 f4       	brcc	.+20     	; 0x388e <main+0x1d7e>
	{
		tx_string[cnt+4] = crc[2];
    387a:	ed e2       	ldi	r30, 0x2D	; 45
    387c:	f5 e0       	ldi	r31, 0x05	; 5
    387e:	82 81       	ldd	r24, Z+2	; 0x02
    3880:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[1];
    3882:	81 81       	ldd	r24, Z+1	; 0x01
    3884:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = crc[0];
    3886:	80 81       	ld	r24, Z
    3888:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';		
    388a:	80 e3       	ldi	r24, 0x30	; 48
    388c:	8a a3       	std	Y+34, r24	; 0x22
	}
	if(crcXmodem >= 0x1000)
    388e:	c1 14       	cp	r12, r1
    3890:	f0 e1       	ldi	r31, 0x10	; 16
    3892:	df 06       	cpc	r13, r31
    3894:	50 f0       	brcs	.+20     	; 0x38aa <main+0x1d9a>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    3896:	ed e2       	ldi	r30, 0x2D	; 45
    3898:	f5 e0       	ldi	r31, 0x05	; 5
    389a:	80 81       	ld	r24, Z
    389c:	8a a3       	std	Y+34, r24	; 0x22
		tx_string[cnt+2] = crc[1];
    389e:	81 81       	ldd	r24, Z+1	; 0x01
    38a0:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+3] = crc[2];
    38a2:	82 81       	ldd	r24, Z+2	; 0x02
    38a4:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+4] = crc[3];
    38a6:	83 81       	ldd	r24, Z+3	; 0x03
    38a8:	8d a3       	std	Y+37, r24	; 0x25
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    38aa:	8d e0       	ldi	r24, 0x0D	; 13
    38ac:	8e a3       	std	Y+38, r24	; 0x26
    38ae:	9e 01       	movw	r18, r28
    38b0:	29 5d       	subi	r18, 0xD9	; 217
    38b2:	3f 4f       	sbci	r19, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    38b4:	e5 e5       	ldi	r30, 0x55	; 85
    38b6:	f5 e0       	ldi	r31, 0x05	; 5
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    38b8:	0f 2e       	mov	r0, r31
    38ba:	f1 ec       	ldi	r31, 0xC1	; 193
    38bc:	8f 2e       	mov	r8, r31
    38be:	91 2c       	mov	r9, r1
    38c0:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    38c2:	70 e0       	ldi	r23, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    38c4:	d7 01       	movw	r26, r14
    38c6:	4d 91       	ld	r20, X+
    38c8:	7d 01       	movw	r14, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    38ca:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    38cc:	91 81       	ldd	r25, Z+1	; 0x01
    38ce:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    38d0:	98 13       	cpse	r25, r24
    38d2:	04 c0       	rjmp	.+8      	; 0x38dc <main+0x1dcc>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    38d4:	d4 01       	movw	r26, r8
    38d6:	8c 91       	ld	r24, X
    38d8:	80 62       	ori	r24, 0x20	; 32
    38da:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    38dc:	50 81       	ld	r21, Z
    38de:	83 81       	ldd	r24, Z+3	; 0x03
    38e0:	94 81       	ldd	r25, Z+4	; 0x04
    38e2:	85 0f       	add	r24, r21
    38e4:	91 1d       	adc	r25, r1
    38e6:	dc 01       	movw	r26, r24
    38e8:	4c 93       	st	X, r20
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    38ea:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    38ec:	c8 2e       	mov	r12, r24
    38ee:	d1 2c       	mov	r13, r1
    38f0:	42 81       	ldd	r20, Z+2	; 0x02
    38f2:	50 e0       	ldi	r21, 0x00	; 0
    38f4:	41 50       	subi	r20, 0x01	; 1
    38f6:	51 09       	sbc	r21, r1
    38f8:	c4 16       	cp	r12, r20
    38fa:	d5 06       	cpc	r13, r21
    38fc:	11 f0       	breq	.+4      	; 0x3902 <main+0x1df2>
    38fe:	8f 5f       	subi	r24, 0xFF	; 255
    3900:	01 c0       	rjmp	.+2      	; 0x3904 <main+0x1df4>
    3902:	87 2f       	mov	r24, r23
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    3904:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    3906:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    3908:	e2 16       	cp	r14, r18
    390a:	f3 06       	cpc	r15, r19
    390c:	d9 f6       	brne	.-74     	; 0x38c4 <main+0x1db4>
    390e:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <main+0x30e>
		ch3.Dgain = atof(param);
		printStatus("");
		break;
		
		case 454:	// Set heater on/off ch3
		if(rx_string[10] == '1')
    3912:	f2 01       	movw	r30, r4
    3914:	82 85       	ldd	r24, Z+10	; 0x0a
    3916:	81 33       	cpi	r24, 0x31	; 49
    3918:	09 f0       	breq	.+2      	; 0x391c <main+0x1e0c>
    391a:	af c0       	rjmp	.+350    	; 0x3a7a <main+0x1f6a>
		{
			ch3.heaterEnable = true;
    391c:	81 e0       	ldi	r24, 0x01	; 1
    391e:	80 93 fd 01 	sts	0x01FD, r24
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    3922:	81 e2       	ldi	r24, 0x21	; 33
    3924:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    3926:	81 81       	ldd	r24, Z+1	; 0x01
    3928:	8f 8f       	std	Y+31, r24	; 0x1f
    392a:	82 81       	ldd	r24, Z+2	; 0x02
    392c:	88 a3       	std	Y+32, r24	; 0x20
    392e:	83 81       	ldd	r24, Z+3	; 0x03
    3930:	89 a3       	std	Y+33, r24	; 0x21
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    3932:	8f e4       	ldi	r24, 0x4F	; 79
    3934:	8a a3       	std	Y+34, r24	; 0x22
    3936:	8e e4       	ldi	r24, 0x4E	; 78
    3938:	8b a3       	std	Y+35, r24	; 0x23
    393a:	1c a2       	std	Y+36, r1	; 0x24
    393c:	1d a2       	std	Y+37, r1	; 0x25
    393e:	1e a2       	std	Y+38, r1	; 0x26
    3940:	7e 01       	movw	r14, r28
    3942:	fe e1       	ldi	r31, 0x1E	; 30
    3944:	ef 0e       	add	r14, r31
    3946:	f1 1c       	adc	r15, r1
    3948:	be 01       	movw	r22, r28
    394a:	6c 5d       	subi	r22, 0xDC	; 220
    394c:	7f 4f       	sbci	r23, 0xFF	; 255
    394e:	f7 01       	movw	r30, r14
    3950:	80 e0       	ldi	r24, 0x00	; 0
    3952:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    3954:	b8 e0       	ldi	r27, 0x08	; 8
    3956:	d1 2c       	mov	r13, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    3958:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    395a:	29 2f       	mov	r18, r25
    395c:	33 27       	eor	r19, r19
    395e:	27 fd       	sbrc	r18, 7
    3960:	3a 95       	dec	r19
    3962:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    3964:	32 2f       	mov	r19, r18
    3966:	22 27       	eor	r18, r18
    3968:	4b 2f       	mov	r20, r27
    396a:	5d 2d       	mov	r21, r13
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    396c:	33 23       	and	r19, r19
    396e:	3c f4       	brge	.+14     	; 0x397e <main+0x1e6e>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    3970:	22 0f       	add	r18, r18
    3972:	33 1f       	adc	r19, r19
    3974:	a1 e2       	ldi	r26, 0x21	; 33
    3976:	2a 27       	eor	r18, r26
    3978:	a0 e1       	ldi	r26, 0x10	; 16
    397a:	3a 27       	eor	r19, r26
    397c:	02 c0       	rjmp	.+4      	; 0x3982 <main+0x1e72>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    397e:	22 0f       	add	r18, r18
    3980:	33 1f       	adc	r19, r19
    3982:	41 50       	subi	r20, 0x01	; 1
    3984:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    3986:	91 f7       	brne	.-28     	; 0x396c <main+0x1e5c>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    3988:	98 2f       	mov	r25, r24
    398a:	88 27       	eor	r24, r24
    398c:	82 27       	eor	r24, r18
    398e:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    3990:	e6 17       	cp	r30, r22
    3992:	f7 07       	cpc	r31, r23
    3994:	09 f7       	brne	.-62     	; 0x3958 <main+0x1e48>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    3996:	6c 01       	movw	r12, r24
    3998:	40 e1       	ldi	r20, 0x10	; 16
    399a:	6d e2       	ldi	r22, 0x2D	; 45
    399c:	75 e0       	ldi	r23, 0x05	; 5
    399e:	c9 d7       	rcall	.+3986   	; 0x4932 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    39a0:	8d e2       	ldi	r24, 0x2D	; 45
    39a2:	95 e0       	ldi	r25, 0x05	; 5
    39a4:	bc d7       	rcall	.+3960   	; 0x491e <strupr>
	if(crcXmodem < 0x10)
    39a6:	b0 e1       	ldi	r27, 0x10	; 16
    39a8:	cb 16       	cp	r12, r27
    39aa:	d1 04       	cpc	r13, r1
    39ac:	38 f4       	brcc	.+14     	; 0x39bc <main+0x1eac>
	{
		tx_string[cnt+4] = crc[0];
    39ae:	80 91 2d 05 	lds	r24, 0x052D
    39b2:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+3] = '0';
    39b4:	80 e3       	ldi	r24, 0x30	; 48
    39b6:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+2] = '0';
    39b8:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+1] = '0';
    39ba:	8c a3       	std	Y+36, r24	; 0x24
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    39bc:	c6 01       	movw	r24, r12
    39be:	40 97       	sbiw	r24, 0x10	; 16
    39c0:	80 3f       	cpi	r24, 0xF0	; 240
    39c2:	91 05       	cpc	r25, r1
    39c4:	48 f4       	brcc	.+18     	; 0x39d8 <main+0x1ec8>
	{
		tx_string[cnt+4] = crc[1];
    39c6:	ed e2       	ldi	r30, 0x2D	; 45
    39c8:	f5 e0       	ldi	r31, 0x05	; 5
    39ca:	81 81       	ldd	r24, Z+1	; 0x01
    39cc:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+3] = crc[0];
    39ce:	80 81       	ld	r24, Z
    39d0:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+2] = '0';
    39d2:	80 e3       	ldi	r24, 0x30	; 48
    39d4:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+1] = '0';		
    39d6:	8c a3       	std	Y+36, r24	; 0x24
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    39d8:	c6 01       	movw	r24, r12
    39da:	9a 95       	dec	r25
    39dc:	81 15       	cp	r24, r1
    39de:	9f 40       	sbci	r25, 0x0F	; 15
    39e0:	50 f4       	brcc	.+20     	; 0x39f6 <main+0x1ee6>
	{
		tx_string[cnt+4] = crc[2];
    39e2:	ed e2       	ldi	r30, 0x2D	; 45
    39e4:	f5 e0       	ldi	r31, 0x05	; 5
    39e6:	82 81       	ldd	r24, Z+2	; 0x02
    39e8:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+3] = crc[1];
    39ea:	81 81       	ldd	r24, Z+1	; 0x01
    39ec:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+2] = crc[0];
    39ee:	80 81       	ld	r24, Z
    39f0:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+1] = '0';		
    39f2:	80 e3       	ldi	r24, 0x30	; 48
    39f4:	8c a3       	std	Y+36, r24	; 0x24
	}
	if(crcXmodem >= 0x1000)
    39f6:	c1 14       	cp	r12, r1
    39f8:	f0 e1       	ldi	r31, 0x10	; 16
    39fa:	df 06       	cpc	r13, r31
    39fc:	50 f0       	brcs	.+20     	; 0x3a12 <main+0x1f02>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    39fe:	ed e2       	ldi	r30, 0x2D	; 45
    3a00:	f5 e0       	ldi	r31, 0x05	; 5
    3a02:	80 81       	ld	r24, Z
    3a04:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = crc[1];
    3a06:	81 81       	ldd	r24, Z+1	; 0x01
    3a08:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[2];
    3a0a:	82 81       	ldd	r24, Z+2	; 0x02
    3a0c:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+4] = crc[3];
    3a0e:	83 81       	ldd	r24, Z+3	; 0x03
    3a10:	8f a3       	std	Y+39, r24	; 0x27
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    3a12:	8d e0       	ldi	r24, 0x0D	; 13
    3a14:	88 a7       	std	Y+40, r24	; 0x28
    3a16:	9e 01       	movw	r18, r28
    3a18:	27 5d       	subi	r18, 0xD7	; 215
    3a1a:	3f 4f       	sbci	r19, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3a1c:	e5 e5       	ldi	r30, 0x55	; 85
    3a1e:	f5 e0       	ldi	r31, 0x05	; 5
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3a20:	0f 2e       	mov	r0, r31
    3a22:	f1 ec       	ldi	r31, 0xC1	; 193
    3a24:	8f 2e       	mov	r8, r31
    3a26:	91 2c       	mov	r9, r1
    3a28:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3a2a:	70 e0       	ldi	r23, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    3a2c:	d7 01       	movw	r26, r14
    3a2e:	4d 91       	ld	r20, X+
    3a30:	7d 01       	movw	r14, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    3a32:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3a34:	91 81       	ldd	r25, Z+1	; 0x01
    3a36:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    3a38:	98 13       	cpse	r25, r24
    3a3a:	04 c0       	rjmp	.+8      	; 0x3a44 <main+0x1f34>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3a3c:	d4 01       	movw	r26, r8
    3a3e:	8c 91       	ld	r24, X
    3a40:	80 62       	ori	r24, 0x20	; 32
    3a42:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    3a44:	50 81       	ld	r21, Z
    3a46:	83 81       	ldd	r24, Z+3	; 0x03
    3a48:	94 81       	ldd	r25, Z+4	; 0x04
    3a4a:	85 0f       	add	r24, r21
    3a4c:	91 1d       	adc	r25, r1
    3a4e:	dc 01       	movw	r26, r24
    3a50:	4c 93       	st	X, r20
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    3a52:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3a54:	c8 2e       	mov	r12, r24
    3a56:	d1 2c       	mov	r13, r1
    3a58:	42 81       	ldd	r20, Z+2	; 0x02
    3a5a:	50 e0       	ldi	r21, 0x00	; 0
    3a5c:	41 50       	subi	r20, 0x01	; 1
    3a5e:	51 09       	sbc	r21, r1
    3a60:	c4 16       	cp	r12, r20
    3a62:	d5 06       	cpc	r13, r21
    3a64:	11 f0       	breq	.+4      	; 0x3a6a <main+0x1f5a>
    3a66:	8f 5f       	subi	r24, 0xFF	; 255
    3a68:	01 c0       	rjmp	.+2      	; 0x3a6c <main+0x1f5c>
    3a6a:	87 2f       	mov	r24, r23
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    3a6c:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    3a6e:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    3a70:	e2 16       	cp	r14, r18
    3a72:	f3 06       	cpc	r15, r19
    3a74:	d9 f6       	brne	.-74     	; 0x3a2c <main+0x1f1c>
    3a76:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <main+0x30e>
		if(rx_string[10] == '1')
		{
			ch3.heaterEnable = true;
			printStatus("ON");
		}
		else if(rx_string[10] == '0')
    3a7a:	80 33       	cpi	r24, 0x30	; 48
    3a7c:	11 f0       	breq	.+4      	; 0x3a82 <main+0x1f72>
    3a7e:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <main+0x30e>
		{
			ch3.heaterEnable = false;
    3a82:	10 92 fd 01 	sts	0x01FD, r1
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    3a86:	81 e2       	ldi	r24, 0x21	; 33
    3a88:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    3a8a:	f2 01       	movw	r30, r4
    3a8c:	81 81       	ldd	r24, Z+1	; 0x01
    3a8e:	8f 8f       	std	Y+31, r24	; 0x1f
    3a90:	82 81       	ldd	r24, Z+2	; 0x02
    3a92:	88 a3       	std	Y+32, r24	; 0x20
    3a94:	83 81       	ldd	r24, Z+3	; 0x03
    3a96:	89 a3       	std	Y+33, r24	; 0x21
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    3a98:	8f e4       	ldi	r24, 0x4F	; 79
    3a9a:	8a a3       	std	Y+34, r24	; 0x22
    3a9c:	86 e4       	ldi	r24, 0x46	; 70
    3a9e:	8b a3       	std	Y+35, r24	; 0x23
    3aa0:	8c a3       	std	Y+36, r24	; 0x24
    3aa2:	1d a2       	std	Y+37, r1	; 0x25
    3aa4:	1e a2       	std	Y+38, r1	; 0x26
    3aa6:	1f a2       	std	Y+39, r1	; 0x27
    3aa8:	7e 01       	movw	r14, r28
    3aaa:	fe e1       	ldi	r31, 0x1E	; 30
    3aac:	ef 0e       	add	r14, r31
    3aae:	f1 1c       	adc	r15, r1
    3ab0:	be 01       	movw	r22, r28
    3ab2:	6b 5d       	subi	r22, 0xDB	; 219
    3ab4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ab6:	f7 01       	movw	r30, r14
    3ab8:	80 e0       	ldi	r24, 0x00	; 0
    3aba:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    3abc:	b8 e0       	ldi	r27, 0x08	; 8
    3abe:	d1 2c       	mov	r13, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    3ac0:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    3ac2:	29 2f       	mov	r18, r25
    3ac4:	33 27       	eor	r19, r19
    3ac6:	27 fd       	sbrc	r18, 7
    3ac8:	3a 95       	dec	r19
    3aca:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    3acc:	32 2f       	mov	r19, r18
    3ace:	22 27       	eor	r18, r18
    3ad0:	4b 2f       	mov	r20, r27
    3ad2:	5d 2d       	mov	r21, r13
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    3ad4:	33 23       	and	r19, r19
    3ad6:	3c f4       	brge	.+14     	; 0x3ae6 <main+0x1fd6>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    3ad8:	22 0f       	add	r18, r18
    3ada:	33 1f       	adc	r19, r19
    3adc:	a1 e2       	ldi	r26, 0x21	; 33
    3ade:	2a 27       	eor	r18, r26
    3ae0:	a0 e1       	ldi	r26, 0x10	; 16
    3ae2:	3a 27       	eor	r19, r26
    3ae4:	02 c0       	rjmp	.+4      	; 0x3aea <main+0x1fda>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    3ae6:	22 0f       	add	r18, r18
    3ae8:	33 1f       	adc	r19, r19
    3aea:	41 50       	subi	r20, 0x01	; 1
    3aec:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    3aee:	91 f7       	brne	.-28     	; 0x3ad4 <main+0x1fc4>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    3af0:	98 2f       	mov	r25, r24
    3af2:	88 27       	eor	r24, r24
    3af4:	82 27       	eor	r24, r18
    3af6:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    3af8:	e6 17       	cp	r30, r22
    3afa:	f7 07       	cpc	r31, r23
    3afc:	09 f7       	brne	.-62     	; 0x3ac0 <main+0x1fb0>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    3afe:	6c 01       	movw	r12, r24
    3b00:	40 e1       	ldi	r20, 0x10	; 16
    3b02:	6d e2       	ldi	r22, 0x2D	; 45
    3b04:	75 e0       	ldi	r23, 0x05	; 5
    3b06:	15 d7       	rcall	.+3626   	; 0x4932 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    3b08:	8d e2       	ldi	r24, 0x2D	; 45
    3b0a:	95 e0       	ldi	r25, 0x05	; 5
    3b0c:	08 d7       	rcall	.+3600   	; 0x491e <strupr>
	if(crcXmodem < 0x10)
    3b0e:	b0 e1       	ldi	r27, 0x10	; 16
    3b10:	cb 16       	cp	r12, r27
    3b12:	d1 04       	cpc	r13, r1
    3b14:	38 f4       	brcc	.+14     	; 0x3b24 <main+0x2014>
	{
		tx_string[cnt+4] = crc[0];
    3b16:	80 91 2d 05 	lds	r24, 0x052D
    3b1a:	88 a7       	std	Y+40, r24	; 0x28
		tx_string[cnt+3] = '0';
    3b1c:	80 e3       	ldi	r24, 0x30	; 48
    3b1e:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+2] = '0';
    3b20:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+1] = '0';
    3b22:	8d a3       	std	Y+37, r24	; 0x25
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    3b24:	c6 01       	movw	r24, r12
    3b26:	40 97       	sbiw	r24, 0x10	; 16
    3b28:	80 3f       	cpi	r24, 0xF0	; 240
    3b2a:	91 05       	cpc	r25, r1
    3b2c:	48 f4       	brcc	.+18     	; 0x3b40 <main+0x2030>
	{
		tx_string[cnt+4] = crc[1];
    3b2e:	ed e2       	ldi	r30, 0x2D	; 45
    3b30:	f5 e0       	ldi	r31, 0x05	; 5
    3b32:	81 81       	ldd	r24, Z+1	; 0x01
    3b34:	88 a7       	std	Y+40, r24	; 0x28
		tx_string[cnt+3] = crc[0];
    3b36:	80 81       	ld	r24, Z
    3b38:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+2] = '0';
    3b3a:	80 e3       	ldi	r24, 0x30	; 48
    3b3c:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+1] = '0';		
    3b3e:	8d a3       	std	Y+37, r24	; 0x25
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    3b40:	c6 01       	movw	r24, r12
    3b42:	9a 95       	dec	r25
    3b44:	81 15       	cp	r24, r1
    3b46:	9f 40       	sbci	r25, 0x0F	; 15
    3b48:	50 f4       	brcc	.+20     	; 0x3b5e <main+0x204e>
	{
		tx_string[cnt+4] = crc[2];
    3b4a:	ed e2       	ldi	r30, 0x2D	; 45
    3b4c:	f5 e0       	ldi	r31, 0x05	; 5
    3b4e:	82 81       	ldd	r24, Z+2	; 0x02
    3b50:	88 a7       	std	Y+40, r24	; 0x28
		tx_string[cnt+3] = crc[1];
    3b52:	81 81       	ldd	r24, Z+1	; 0x01
    3b54:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+2] = crc[0];
    3b56:	80 81       	ld	r24, Z
    3b58:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+1] = '0';		
    3b5a:	80 e3       	ldi	r24, 0x30	; 48
    3b5c:	8d a3       	std	Y+37, r24	; 0x25
	}
	if(crcXmodem >= 0x1000)
    3b5e:	c1 14       	cp	r12, r1
    3b60:	f0 e1       	ldi	r31, 0x10	; 16
    3b62:	df 06       	cpc	r13, r31
    3b64:	50 f0       	brcs	.+20     	; 0x3b7a <main+0x206a>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    3b66:	ed e2       	ldi	r30, 0x2D	; 45
    3b68:	f5 e0       	ldi	r31, 0x05	; 5
    3b6a:	80 81       	ld	r24, Z
    3b6c:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+2] = crc[1];
    3b6e:	81 81       	ldd	r24, Z+1	; 0x01
    3b70:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+3] = crc[2];
    3b72:	82 81       	ldd	r24, Z+2	; 0x02
    3b74:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+4] = crc[3];
    3b76:	83 81       	ldd	r24, Z+3	; 0x03
    3b78:	88 a7       	std	Y+40, r24	; 0x28
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    3b7a:	8d e0       	ldi	r24, 0x0D	; 13
    3b7c:	89 a7       	std	Y+41, r24	; 0x29
    3b7e:	9e 01       	movw	r18, r28
    3b80:	26 5d       	subi	r18, 0xD6	; 214
    3b82:	3f 4f       	sbci	r19, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3b84:	e5 e5       	ldi	r30, 0x55	; 85
    3b86:	f5 e0       	ldi	r31, 0x05	; 5
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3b88:	0f 2e       	mov	r0, r31
    3b8a:	f1 ec       	ldi	r31, 0xC1	; 193
    3b8c:	8f 2e       	mov	r8, r31
    3b8e:	91 2c       	mov	r9, r1
    3b90:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3b92:	70 e0       	ldi	r23, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    3b94:	d7 01       	movw	r26, r14
    3b96:	4d 91       	ld	r20, X+
    3b98:	7d 01       	movw	r14, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    3b9a:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3b9c:	91 81       	ldd	r25, Z+1	; 0x01
    3b9e:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    3ba0:	98 13       	cpse	r25, r24
    3ba2:	04 c0       	rjmp	.+8      	; 0x3bac <main+0x209c>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3ba4:	d4 01       	movw	r26, r8
    3ba6:	8c 91       	ld	r24, X
    3ba8:	80 62       	ori	r24, 0x20	; 32
    3baa:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    3bac:	50 81       	ld	r21, Z
    3bae:	83 81       	ldd	r24, Z+3	; 0x03
    3bb0:	94 81       	ldd	r25, Z+4	; 0x04
    3bb2:	85 0f       	add	r24, r21
    3bb4:	91 1d       	adc	r25, r1
    3bb6:	dc 01       	movw	r26, r24
    3bb8:	4c 93       	st	X, r20
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    3bba:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3bbc:	c8 2e       	mov	r12, r24
    3bbe:	d1 2c       	mov	r13, r1
    3bc0:	42 81       	ldd	r20, Z+2	; 0x02
    3bc2:	50 e0       	ldi	r21, 0x00	; 0
    3bc4:	41 50       	subi	r20, 0x01	; 1
    3bc6:	51 09       	sbc	r21, r1
    3bc8:	c4 16       	cp	r12, r20
    3bca:	d5 06       	cpc	r13, r21
    3bcc:	11 f0       	breq	.+4      	; 0x3bd2 <main+0x20c2>
    3bce:	8f 5f       	subi	r24, 0xFF	; 255
    3bd0:	01 c0       	rjmp	.+2      	; 0x3bd4 <main+0x20c4>
    3bd2:	87 2f       	mov	r24, r23
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    3bd4:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    3bd6:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    3bd8:	e2 16       	cp	r14, r18
    3bda:	f3 06       	cpc	r15, r19
    3bdc:	d9 f6       	brne	.-74     	; 0x3b94 <main+0x2084>
    3bde:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <main+0x30e>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    3be2:	6e e1       	ldi	r22, 0x1E	; 30
    3be4:	70 e0       	ldi	r23, 0x00	; 0
    3be6:	c2 01       	movw	r24, r4
    3be8:	8f d6       	rcall	.+3358   	; 0x4908 <strnlen>
    3bea:	05 97       	sbiw	r24, 0x05	; 5
    3bec:	9c 01       	movw	r18, r24
    3bee:	d5 01       	movw	r26, r10
    3bf0:	a5 01       	movw	r20, r10
    3bf2:	4c 5e       	subi	r20, 0xEC	; 236
    3bf4:	5f 4f       	sbci	r21, 0xFF	; 255
    3bf6:	f5 01       	movw	r30, r10
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    3bf8:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    3bfa:	e4 17       	cp	r30, r20
    3bfc:	f5 07       	cpc	r31, r21
    3bfe:	e1 f7       	brne	.-8      	; 0x3bf8 <main+0x20e8>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    3c00:	2b 30       	cpi	r18, 0x0B	; 11
    3c02:	31 05       	cpc	r19, r1
    3c04:	54 f0       	brlt	.+20     	; 0x3c1a <main+0x210a>
    3c06:	e1 e4       	ldi	r30, 0x41	; 65
    3c08:	f5 e0       	ldi	r31, 0x05	; 5
    3c0a:	89 5c       	subi	r24, 0xC9	; 201
    3c0c:	9a 4f       	sbci	r25, 0xFA	; 250
    3c0e:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    3c10:	91 91       	ld	r25, Z+
    3c12:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    3c14:	e2 17       	cp	r30, r18
    3c16:	f3 07       	cpc	r31, r19
    3c18:	d9 f7       	brne	.-10     	; 0x3c10 <main+0x2100>
		}
		break;						 
		
		case 455:	// Set Temperature error window
		ParamParse(rx_string, param);
		ch3.tempErrorWin = atof(param);
    3c1a:	c5 01       	movw	r24, r10
    3c1c:	10 d6       	rcall	.+3104   	; 0x483e <atof>
    3c1e:	60 93 ef 01 	sts	0x01EF, r22
    3c22:	70 93 f0 01 	sts	0x01F0, r23
    3c26:	80 93 f1 01 	sts	0x01F1, r24
    3c2a:	90 93 f2 01 	sts	0x01F2, r25
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    3c2e:	81 e2       	ldi	r24, 0x21	; 33
    3c30:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    3c32:	f2 01       	movw	r30, r4
    3c34:	81 81       	ldd	r24, Z+1	; 0x01
    3c36:	8f 8f       	std	Y+31, r24	; 0x1f
    3c38:	82 81       	ldd	r24, Z+2	; 0x02
    3c3a:	88 a3       	std	Y+32, r24	; 0x20
    3c3c:	83 81       	ldd	r24, Z+3	; 0x03
    3c3e:	89 a3       	std	Y+33, r24	; 0x21
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    3c40:	1a a2       	std	Y+34, r1	; 0x22
    3c42:	1b a2       	std	Y+35, r1	; 0x23
    3c44:	1c a2       	std	Y+36, r1	; 0x24
    3c46:	7e 01       	movw	r14, r28
    3c48:	fe e1       	ldi	r31, 0x1E	; 30
    3c4a:	ef 0e       	add	r14, r31
    3c4c:	f1 1c       	adc	r15, r1
    3c4e:	be 01       	movw	r22, r28
    3c50:	6e 5d       	subi	r22, 0xDE	; 222
    3c52:	7f 4f       	sbci	r23, 0xFF	; 255
    3c54:	f7 01       	movw	r30, r14
    3c56:	80 e0       	ldi	r24, 0x00	; 0
    3c58:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    3c5a:	b8 e0       	ldi	r27, 0x08	; 8
    3c5c:	d1 2c       	mov	r13, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    3c5e:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    3c60:	29 2f       	mov	r18, r25
    3c62:	33 27       	eor	r19, r19
    3c64:	27 fd       	sbrc	r18, 7
    3c66:	3a 95       	dec	r19
    3c68:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    3c6a:	32 2f       	mov	r19, r18
    3c6c:	22 27       	eor	r18, r18
    3c6e:	4b 2f       	mov	r20, r27
    3c70:	5d 2d       	mov	r21, r13
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    3c72:	33 23       	and	r19, r19
    3c74:	3c f4       	brge	.+14     	; 0x3c84 <main+0x2174>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    3c76:	22 0f       	add	r18, r18
    3c78:	33 1f       	adc	r19, r19
    3c7a:	a1 e2       	ldi	r26, 0x21	; 33
    3c7c:	2a 27       	eor	r18, r26
    3c7e:	a0 e1       	ldi	r26, 0x10	; 16
    3c80:	3a 27       	eor	r19, r26
    3c82:	02 c0       	rjmp	.+4      	; 0x3c88 <main+0x2178>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    3c84:	22 0f       	add	r18, r18
    3c86:	33 1f       	adc	r19, r19
    3c88:	41 50       	subi	r20, 0x01	; 1
    3c8a:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    3c8c:	91 f7       	brne	.-28     	; 0x3c72 <main+0x2162>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    3c8e:	98 2f       	mov	r25, r24
    3c90:	88 27       	eor	r24, r24
    3c92:	82 27       	eor	r24, r18
    3c94:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    3c96:	e6 17       	cp	r30, r22
    3c98:	f7 07       	cpc	r31, r23
    3c9a:	09 f7       	brne	.-62     	; 0x3c5e <main+0x214e>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    3c9c:	6c 01       	movw	r12, r24
    3c9e:	40 e1       	ldi	r20, 0x10	; 16
    3ca0:	6d e2       	ldi	r22, 0x2D	; 45
    3ca2:	75 e0       	ldi	r23, 0x05	; 5
    3ca4:	46 d6       	rcall	.+3212   	; 0x4932 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    3ca6:	8d e2       	ldi	r24, 0x2D	; 45
    3ca8:	95 e0       	ldi	r25, 0x05	; 5
    3caa:	39 d6       	rcall	.+3186   	; 0x491e <strupr>
	if(crcXmodem < 0x10)
    3cac:	b0 e1       	ldi	r27, 0x10	; 16
    3cae:	cb 16       	cp	r12, r27
    3cb0:	d1 04       	cpc	r13, r1
    3cb2:	38 f4       	brcc	.+14     	; 0x3cc2 <main+0x21b2>
	{
		tx_string[cnt+4] = crc[0];
    3cb4:	80 91 2d 05 	lds	r24, 0x052D
    3cb8:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = '0';
    3cba:	80 e3       	ldi	r24, 0x30	; 48
    3cbc:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = '0';
    3cbe:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';
    3cc0:	8a a3       	std	Y+34, r24	; 0x22
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    3cc2:	c6 01       	movw	r24, r12
    3cc4:	40 97       	sbiw	r24, 0x10	; 16
    3cc6:	80 3f       	cpi	r24, 0xF0	; 240
    3cc8:	91 05       	cpc	r25, r1
    3cca:	48 f4       	brcc	.+18     	; 0x3cde <main+0x21ce>
	{
		tx_string[cnt+4] = crc[1];
    3ccc:	ed e2       	ldi	r30, 0x2D	; 45
    3cce:	f5 e0       	ldi	r31, 0x05	; 5
    3cd0:	81 81       	ldd	r24, Z+1	; 0x01
    3cd2:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[0];
    3cd4:	80 81       	ld	r24, Z
    3cd6:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = '0';
    3cd8:	80 e3       	ldi	r24, 0x30	; 48
    3cda:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';		
    3cdc:	8a a3       	std	Y+34, r24	; 0x22
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    3cde:	c6 01       	movw	r24, r12
    3ce0:	9a 95       	dec	r25
    3ce2:	81 15       	cp	r24, r1
    3ce4:	9f 40       	sbci	r25, 0x0F	; 15
    3ce6:	50 f4       	brcc	.+20     	; 0x3cfc <main+0x21ec>
	{
		tx_string[cnt+4] = crc[2];
    3ce8:	ed e2       	ldi	r30, 0x2D	; 45
    3cea:	f5 e0       	ldi	r31, 0x05	; 5
    3cec:	82 81       	ldd	r24, Z+2	; 0x02
    3cee:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[1];
    3cf0:	81 81       	ldd	r24, Z+1	; 0x01
    3cf2:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = crc[0];
    3cf4:	80 81       	ld	r24, Z
    3cf6:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';		
    3cf8:	80 e3       	ldi	r24, 0x30	; 48
    3cfa:	8a a3       	std	Y+34, r24	; 0x22
	}
	if(crcXmodem >= 0x1000)
    3cfc:	c1 14       	cp	r12, r1
    3cfe:	f0 e1       	ldi	r31, 0x10	; 16
    3d00:	df 06       	cpc	r13, r31
    3d02:	50 f0       	brcs	.+20     	; 0x3d18 <main+0x2208>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    3d04:	ed e2       	ldi	r30, 0x2D	; 45
    3d06:	f5 e0       	ldi	r31, 0x05	; 5
    3d08:	80 81       	ld	r24, Z
    3d0a:	8a a3       	std	Y+34, r24	; 0x22
		tx_string[cnt+2] = crc[1];
    3d0c:	81 81       	ldd	r24, Z+1	; 0x01
    3d0e:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+3] = crc[2];
    3d10:	82 81       	ldd	r24, Z+2	; 0x02
    3d12:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+4] = crc[3];
    3d14:	83 81       	ldd	r24, Z+3	; 0x03
    3d16:	8d a3       	std	Y+37, r24	; 0x25
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    3d18:	8d e0       	ldi	r24, 0x0D	; 13
    3d1a:	8e a3       	std	Y+38, r24	; 0x26
    3d1c:	9e 01       	movw	r18, r28
    3d1e:	29 5d       	subi	r18, 0xD9	; 217
    3d20:	3f 4f       	sbci	r19, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3d22:	e5 e5       	ldi	r30, 0x55	; 85
    3d24:	f5 e0       	ldi	r31, 0x05	; 5
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3d26:	0f 2e       	mov	r0, r31
    3d28:	f1 ec       	ldi	r31, 0xC1	; 193
    3d2a:	8f 2e       	mov	r8, r31
    3d2c:	91 2c       	mov	r9, r1
    3d2e:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3d30:	70 e0       	ldi	r23, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    3d32:	d7 01       	movw	r26, r14
    3d34:	4d 91       	ld	r20, X+
    3d36:	7d 01       	movw	r14, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    3d38:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3d3a:	91 81       	ldd	r25, Z+1	; 0x01
    3d3c:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    3d3e:	98 13       	cpse	r25, r24
    3d40:	04 c0       	rjmp	.+8      	; 0x3d4a <main+0x223a>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3d42:	d4 01       	movw	r26, r8
    3d44:	8c 91       	ld	r24, X
    3d46:	80 62       	ori	r24, 0x20	; 32
    3d48:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    3d4a:	50 81       	ld	r21, Z
    3d4c:	83 81       	ldd	r24, Z+3	; 0x03
    3d4e:	94 81       	ldd	r25, Z+4	; 0x04
    3d50:	85 0f       	add	r24, r21
    3d52:	91 1d       	adc	r25, r1
    3d54:	dc 01       	movw	r26, r24
    3d56:	4c 93       	st	X, r20
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    3d58:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3d5a:	c8 2e       	mov	r12, r24
    3d5c:	d1 2c       	mov	r13, r1
    3d5e:	42 81       	ldd	r20, Z+2	; 0x02
    3d60:	50 e0       	ldi	r21, 0x00	; 0
    3d62:	41 50       	subi	r20, 0x01	; 1
    3d64:	51 09       	sbc	r21, r1
    3d66:	c4 16       	cp	r12, r20
    3d68:	d5 06       	cpc	r13, r21
    3d6a:	11 f0       	breq	.+4      	; 0x3d70 <main+0x2260>
    3d6c:	8f 5f       	subi	r24, 0xFF	; 255
    3d6e:	01 c0       	rjmp	.+2      	; 0x3d72 <main+0x2262>
    3d70:	87 2f       	mov	r24, r23
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    3d72:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    3d74:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    3d76:	e2 16       	cp	r14, r18
    3d78:	f3 06       	cpc	r15, r19
    3d7a:	d9 f6       	brne	.-74     	; 0x3d32 <main+0x2222>
    3d7c:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <main+0x30e>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    3d80:	6e e1       	ldi	r22, 0x1E	; 30
    3d82:	70 e0       	ldi	r23, 0x00	; 0
    3d84:	c2 01       	movw	r24, r4
    3d86:	c0 d5       	rcall	.+2944   	; 0x4908 <strnlen>
    3d88:	05 97       	sbiw	r24, 0x05	; 5
    3d8a:	9c 01       	movw	r18, r24
    3d8c:	d5 01       	movw	r26, r10
    3d8e:	a5 01       	movw	r20, r10
    3d90:	4c 5e       	subi	r20, 0xEC	; 236
    3d92:	5f 4f       	sbci	r21, 0xFF	; 255
    3d94:	f5 01       	movw	r30, r10
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    3d96:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    3d98:	e4 17       	cp	r30, r20
    3d9a:	f5 07       	cpc	r31, r21
    3d9c:	e1 f7       	brne	.-8      	; 0x3d96 <main+0x2286>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    3d9e:	2b 30       	cpi	r18, 0x0B	; 11
    3da0:	31 05       	cpc	r19, r1
    3da2:	54 f0       	brlt	.+20     	; 0x3db8 <main+0x22a8>
    3da4:	e1 e4       	ldi	r30, 0x41	; 65
    3da6:	f5 e0       	ldi	r31, 0x05	; 5
    3da8:	89 5c       	subi	r24, 0xC9	; 201
    3daa:	9a 4f       	sbci	r25, 0xFA	; 250
    3dac:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    3dae:	91 91       	ld	r25, Z+
    3db0:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    3db2:	e2 17       	cp	r30, r18
    3db4:	f3 07       	cpc	r31, r19
    3db6:	d9 f7       	brne	.-10     	; 0x3dae <main+0x229e>
		printStatus("");
		break;

		case 456:	// Set Temperature Settle time
		ParamParse(rx_string, param);
		ch3.tempSettleTime = atoi(param);
    3db8:	c5 01       	movw	r24, r10
    3dba:	44 d5       	rcall	.+2696   	; 0x4844 <atoi>
    3dbc:	90 93 f6 01 	sts	0x01F6, r25
    3dc0:	80 93 f5 01 	sts	0x01F5, r24
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    3dc4:	81 e2       	ldi	r24, 0x21	; 33
    3dc6:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    3dc8:	f2 01       	movw	r30, r4
    3dca:	81 81       	ldd	r24, Z+1	; 0x01
    3dcc:	8f 8f       	std	Y+31, r24	; 0x1f
    3dce:	82 81       	ldd	r24, Z+2	; 0x02
    3dd0:	88 a3       	std	Y+32, r24	; 0x20
    3dd2:	83 81       	ldd	r24, Z+3	; 0x03
    3dd4:	89 a3       	std	Y+33, r24	; 0x21
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    3dd6:	1a a2       	std	Y+34, r1	; 0x22
    3dd8:	1b a2       	std	Y+35, r1	; 0x23
    3dda:	1c a2       	std	Y+36, r1	; 0x24
    3ddc:	7e 01       	movw	r14, r28
    3dde:	fe e1       	ldi	r31, 0x1E	; 30
    3de0:	ef 0e       	add	r14, r31
    3de2:	f1 1c       	adc	r15, r1
    3de4:	be 01       	movw	r22, r28
    3de6:	6e 5d       	subi	r22, 0xDE	; 222
    3de8:	7f 4f       	sbci	r23, 0xFF	; 255
    3dea:	f7 01       	movw	r30, r14
    3dec:	80 e0       	ldi	r24, 0x00	; 0
    3dee:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    3df0:	b8 e0       	ldi	r27, 0x08	; 8
    3df2:	d1 2c       	mov	r13, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    3df4:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    3df6:	29 2f       	mov	r18, r25
    3df8:	33 27       	eor	r19, r19
    3dfa:	27 fd       	sbrc	r18, 7
    3dfc:	3a 95       	dec	r19
    3dfe:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    3e00:	32 2f       	mov	r19, r18
    3e02:	22 27       	eor	r18, r18
    3e04:	4b 2f       	mov	r20, r27
    3e06:	5d 2d       	mov	r21, r13
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    3e08:	33 23       	and	r19, r19
    3e0a:	3c f4       	brge	.+14     	; 0x3e1a <main+0x230a>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    3e0c:	22 0f       	add	r18, r18
    3e0e:	33 1f       	adc	r19, r19
    3e10:	a1 e2       	ldi	r26, 0x21	; 33
    3e12:	2a 27       	eor	r18, r26
    3e14:	a0 e1       	ldi	r26, 0x10	; 16
    3e16:	3a 27       	eor	r19, r26
    3e18:	02 c0       	rjmp	.+4      	; 0x3e1e <main+0x230e>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    3e1a:	22 0f       	add	r18, r18
    3e1c:	33 1f       	adc	r19, r19
    3e1e:	41 50       	subi	r20, 0x01	; 1
    3e20:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    3e22:	91 f7       	brne	.-28     	; 0x3e08 <main+0x22f8>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    3e24:	98 2f       	mov	r25, r24
    3e26:	88 27       	eor	r24, r24
    3e28:	82 27       	eor	r24, r18
    3e2a:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    3e2c:	e6 17       	cp	r30, r22
    3e2e:	f7 07       	cpc	r31, r23
    3e30:	09 f7       	brne	.-62     	; 0x3df4 <main+0x22e4>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    3e32:	6c 01       	movw	r12, r24
    3e34:	40 e1       	ldi	r20, 0x10	; 16
    3e36:	6d e2       	ldi	r22, 0x2D	; 45
    3e38:	75 e0       	ldi	r23, 0x05	; 5
    3e3a:	7b d5       	rcall	.+2806   	; 0x4932 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    3e3c:	8d e2       	ldi	r24, 0x2D	; 45
    3e3e:	95 e0       	ldi	r25, 0x05	; 5
    3e40:	6e d5       	rcall	.+2780   	; 0x491e <strupr>
	if(crcXmodem < 0x10)
    3e42:	b0 e1       	ldi	r27, 0x10	; 16
    3e44:	cb 16       	cp	r12, r27
    3e46:	d1 04       	cpc	r13, r1
    3e48:	38 f4       	brcc	.+14     	; 0x3e58 <main+0x2348>
	{
		tx_string[cnt+4] = crc[0];
    3e4a:	80 91 2d 05 	lds	r24, 0x052D
    3e4e:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = '0';
    3e50:	80 e3       	ldi	r24, 0x30	; 48
    3e52:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = '0';
    3e54:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';
    3e56:	8a a3       	std	Y+34, r24	; 0x22
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    3e58:	c6 01       	movw	r24, r12
    3e5a:	40 97       	sbiw	r24, 0x10	; 16
    3e5c:	80 3f       	cpi	r24, 0xF0	; 240
    3e5e:	91 05       	cpc	r25, r1
    3e60:	48 f4       	brcc	.+18     	; 0x3e74 <main+0x2364>
	{
		tx_string[cnt+4] = crc[1];
    3e62:	ed e2       	ldi	r30, 0x2D	; 45
    3e64:	f5 e0       	ldi	r31, 0x05	; 5
    3e66:	81 81       	ldd	r24, Z+1	; 0x01
    3e68:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[0];
    3e6a:	80 81       	ld	r24, Z
    3e6c:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = '0';
    3e6e:	80 e3       	ldi	r24, 0x30	; 48
    3e70:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';		
    3e72:	8a a3       	std	Y+34, r24	; 0x22
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    3e74:	c6 01       	movw	r24, r12
    3e76:	9a 95       	dec	r25
    3e78:	81 15       	cp	r24, r1
    3e7a:	9f 40       	sbci	r25, 0x0F	; 15
    3e7c:	50 f4       	brcc	.+20     	; 0x3e92 <main+0x2382>
	{
		tx_string[cnt+4] = crc[2];
    3e7e:	ed e2       	ldi	r30, 0x2D	; 45
    3e80:	f5 e0       	ldi	r31, 0x05	; 5
    3e82:	82 81       	ldd	r24, Z+2	; 0x02
    3e84:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[1];
    3e86:	81 81       	ldd	r24, Z+1	; 0x01
    3e88:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = crc[0];
    3e8a:	80 81       	ld	r24, Z
    3e8c:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';		
    3e8e:	80 e3       	ldi	r24, 0x30	; 48
    3e90:	8a a3       	std	Y+34, r24	; 0x22
	}
	if(crcXmodem >= 0x1000)
    3e92:	c1 14       	cp	r12, r1
    3e94:	f0 e1       	ldi	r31, 0x10	; 16
    3e96:	df 06       	cpc	r13, r31
    3e98:	50 f0       	brcs	.+20     	; 0x3eae <main+0x239e>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    3e9a:	ed e2       	ldi	r30, 0x2D	; 45
    3e9c:	f5 e0       	ldi	r31, 0x05	; 5
    3e9e:	80 81       	ld	r24, Z
    3ea0:	8a a3       	std	Y+34, r24	; 0x22
		tx_string[cnt+2] = crc[1];
    3ea2:	81 81       	ldd	r24, Z+1	; 0x01
    3ea4:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+3] = crc[2];
    3ea6:	82 81       	ldd	r24, Z+2	; 0x02
    3ea8:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+4] = crc[3];
    3eaa:	83 81       	ldd	r24, Z+3	; 0x03
    3eac:	8d a3       	std	Y+37, r24	; 0x25
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    3eae:	8d e0       	ldi	r24, 0x0D	; 13
    3eb0:	8e a3       	std	Y+38, r24	; 0x26
    3eb2:	9e 01       	movw	r18, r28
    3eb4:	29 5d       	subi	r18, 0xD9	; 217
    3eb6:	3f 4f       	sbci	r19, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3eb8:	e5 e5       	ldi	r30, 0x55	; 85
    3eba:	f5 e0       	ldi	r31, 0x05	; 5
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3ebc:	0f 2e       	mov	r0, r31
    3ebe:	f1 ec       	ldi	r31, 0xC1	; 193
    3ec0:	8f 2e       	mov	r8, r31
    3ec2:	91 2c       	mov	r9, r1
    3ec4:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3ec6:	70 e0       	ldi	r23, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    3ec8:	d7 01       	movw	r26, r14
    3eca:	4d 91       	ld	r20, X+
    3ecc:	7d 01       	movw	r14, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    3ece:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3ed0:	91 81       	ldd	r25, Z+1	; 0x01
    3ed2:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    3ed4:	98 13       	cpse	r25, r24
    3ed6:	04 c0       	rjmp	.+8      	; 0x3ee0 <main+0x23d0>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3ed8:	d4 01       	movw	r26, r8
    3eda:	8c 91       	ld	r24, X
    3edc:	80 62       	ori	r24, 0x20	; 32
    3ede:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    3ee0:	50 81       	ld	r21, Z
    3ee2:	83 81       	ldd	r24, Z+3	; 0x03
    3ee4:	94 81       	ldd	r25, Z+4	; 0x04
    3ee6:	85 0f       	add	r24, r21
    3ee8:	91 1d       	adc	r25, r1
    3eea:	dc 01       	movw	r26, r24
    3eec:	4c 93       	st	X, r20
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    3eee:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3ef0:	c8 2e       	mov	r12, r24
    3ef2:	d1 2c       	mov	r13, r1
    3ef4:	42 81       	ldd	r20, Z+2	; 0x02
    3ef6:	50 e0       	ldi	r21, 0x00	; 0
    3ef8:	41 50       	subi	r20, 0x01	; 1
    3efa:	51 09       	sbc	r21, r1
    3efc:	c4 16       	cp	r12, r20
    3efe:	d5 06       	cpc	r13, r21
    3f00:	11 f0       	breq	.+4      	; 0x3f06 <main+0x23f6>
    3f02:	8f 5f       	subi	r24, 0xFF	; 255
    3f04:	01 c0       	rjmp	.+2      	; 0x3f08 <main+0x23f8>
    3f06:	87 2f       	mov	r24, r23
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    3f08:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    3f0a:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    3f0c:	e2 16       	cp	r14, r18
    3f0e:	f3 06       	cpc	r15, r19
    3f10:	d9 f6       	brne	.-74     	; 0x3ec8 <main+0x23b8>
    3f12:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <main+0x30e>
	ch3.tempSettleTime = eeprom_read_word((uint16_t*)eepromAdr_TSettleTime3);	
}

static inline void WriteParamToEEPROM()
{
	eeprom_write_float( (float*)eepromAdr_TempSetPoint0, ch0.TempSetPoint );
    3f16:	0f 2e       	mov	r0, r31
    3f18:	f4 ec       	ldi	r31, 0xC4	; 196
    3f1a:	ef 2e       	mov	r14, r31
    3f1c:	f2 e0       	ldi	r31, 0x02	; 2
    3f1e:	ff 2e       	mov	r15, r31
    3f20:	f0 2d       	mov	r31, r0
    3f22:	f7 01       	movw	r30, r14
    3f24:	40 81       	ld	r20, Z
    3f26:	51 81       	ldd	r21, Z+1	; 0x01
    3f28:	62 81       	ldd	r22, Z+2	; 0x02
    3f2a:	73 81       	ldd	r23, Z+3	; 0x03
    3f2c:	80 e0       	ldi	r24, 0x00	; 0
    3f2e:	90 e0       	ldi	r25, 0x00	; 0
    3f30:	fe d6       	rcall	.+3580   	; 0x4d2e <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_PgainCh0, ch0.Pgain );
    3f32:	d7 01       	movw	r26, r14
    3f34:	5c 96       	adiw	r26, 0x1c	; 28
    3f36:	4d 91       	ld	r20, X+
    3f38:	5d 91       	ld	r21, X+
    3f3a:	6d 91       	ld	r22, X+
    3f3c:	7c 91       	ld	r23, X
    3f3e:	5f 97       	sbiw	r26, 0x1f	; 31
    3f40:	84 e0       	ldi	r24, 0x04	; 4
    3f42:	90 e0       	ldi	r25, 0x00	; 0
    3f44:	f4 d6       	rcall	.+3560   	; 0x4d2e <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_IgainCh0, ch0.Igain );
    3f46:	f7 01       	movw	r30, r14
    3f48:	40 a1       	ldd	r20, Z+32	; 0x20
    3f4a:	51 a1       	ldd	r21, Z+33	; 0x21
    3f4c:	62 a1       	ldd	r22, Z+34	; 0x22
    3f4e:	73 a1       	ldd	r23, Z+35	; 0x23
    3f50:	88 e0       	ldi	r24, 0x08	; 8
    3f52:	90 e0       	ldi	r25, 0x00	; 0
    3f54:	ec d6       	rcall	.+3544   	; 0x4d2e <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_DgainCh0, ch0.Dgain );
    3f56:	d7 01       	movw	r26, r14
    3f58:	94 96       	adiw	r26, 0x24	; 36
    3f5a:	4d 91       	ld	r20, X+
    3f5c:	5d 91       	ld	r21, X+
    3f5e:	6d 91       	ld	r22, X+
    3f60:	7c 91       	ld	r23, X
    3f62:	97 97       	sbiw	r26, 0x27	; 39
    3f64:	8c e0       	ldi	r24, 0x0C	; 12
    3f66:	90 e0       	ldi	r25, 0x00	; 0
    3f68:	e2 d6       	rcall	.+3524   	; 0x4d2e <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_TempErrWin0, ch0.tempErrorWin );
    3f6a:	40 91 18 03 	lds	r20, 0x0318
    3f6e:	50 91 19 03 	lds	r21, 0x0319
    3f72:	60 91 1a 03 	lds	r22, 0x031A
    3f76:	70 91 1b 03 	lds	r23, 0x031B
    3f7a:	80 e1       	ldi	r24, 0x10	; 16
    3f7c:	90 e0       	ldi	r25, 0x00	; 0
    3f7e:	d7 d6       	rcall	.+3502   	; 0x4d2e <eeprom_write_dword>
	eeprom_write_word(	(uint16_t*)eepromAdr_TSettleTime0, ch0.tempSettleTime );
    3f80:	60 91 1e 03 	lds	r22, 0x031E
    3f84:	70 91 1f 03 	lds	r23, 0x031F
    3f88:	84 e1       	ldi	r24, 0x14	; 20
    3f8a:	90 e0       	ldi	r25, 0x00	; 0
    3f8c:	d5 d6       	rcall	.+3498   	; 0x4d38 <eeprom_write_word>
	
	eeprom_write_float( (float*)eepromAdr_TempSetPoint1, ch1.TempSetPoint );
    3f8e:	0f 2e       	mov	r0, r31
    3f90:	f1 e6       	ldi	r31, 0x61	; 97
    3f92:	ef 2e       	mov	r14, r31
    3f94:	f2 e0       	ldi	r31, 0x02	; 2
    3f96:	ff 2e       	mov	r15, r31
    3f98:	f0 2d       	mov	r31, r0
    3f9a:	f7 01       	movw	r30, r14
    3f9c:	40 81       	ld	r20, Z
    3f9e:	51 81       	ldd	r21, Z+1	; 0x01
    3fa0:	62 81       	ldd	r22, Z+2	; 0x02
    3fa2:	73 81       	ldd	r23, Z+3	; 0x03
    3fa4:	88 e1       	ldi	r24, 0x18	; 24
    3fa6:	90 e0       	ldi	r25, 0x00	; 0
    3fa8:	c2 d6       	rcall	.+3460   	; 0x4d2e <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_PgainCh1, ch1.Pgain );
    3faa:	d7 01       	movw	r26, r14
    3fac:	5c 96       	adiw	r26, 0x1c	; 28
    3fae:	4d 91       	ld	r20, X+
    3fb0:	5d 91       	ld	r21, X+
    3fb2:	6d 91       	ld	r22, X+
    3fb4:	7c 91       	ld	r23, X
    3fb6:	5f 97       	sbiw	r26, 0x1f	; 31
    3fb8:	8c e1       	ldi	r24, 0x1C	; 28
    3fba:	90 e0       	ldi	r25, 0x00	; 0
    3fbc:	b8 d6       	rcall	.+3440   	; 0x4d2e <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_IgainCh1, ch1.Igain );
    3fbe:	f7 01       	movw	r30, r14
    3fc0:	40 a1       	ldd	r20, Z+32	; 0x20
    3fc2:	51 a1       	ldd	r21, Z+33	; 0x21
    3fc4:	62 a1       	ldd	r22, Z+34	; 0x22
    3fc6:	73 a1       	ldd	r23, Z+35	; 0x23
    3fc8:	80 e2       	ldi	r24, 0x20	; 32
    3fca:	90 e0       	ldi	r25, 0x00	; 0
    3fcc:	b0 d6       	rcall	.+3424   	; 0x4d2e <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_DgainCh1, ch1.Dgain );
    3fce:	d7 01       	movw	r26, r14
    3fd0:	94 96       	adiw	r26, 0x24	; 36
    3fd2:	4d 91       	ld	r20, X+
    3fd4:	5d 91       	ld	r21, X+
    3fd6:	6d 91       	ld	r22, X+
    3fd8:	7c 91       	ld	r23, X
    3fda:	97 97       	sbiw	r26, 0x27	; 39
    3fdc:	84 e2       	ldi	r24, 0x24	; 36
    3fde:	90 e0       	ldi	r25, 0x00	; 0
    3fe0:	a6 d6       	rcall	.+3404   	; 0x4d2e <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_TempErrWin1, ch1.tempErrorWin );
    3fe2:	40 91 b5 02 	lds	r20, 0x02B5
    3fe6:	50 91 b6 02 	lds	r21, 0x02B6
    3fea:	60 91 b7 02 	lds	r22, 0x02B7
    3fee:	70 91 b8 02 	lds	r23, 0x02B8
    3ff2:	88 e2       	ldi	r24, 0x28	; 40
    3ff4:	90 e0       	ldi	r25, 0x00	; 0
    3ff6:	9b d6       	rcall	.+3382   	; 0x4d2e <eeprom_write_dword>
	eeprom_write_word(	(uint16_t*)eepromAdr_TSettleTime1, ch1.tempSettleTime );	
    3ff8:	60 91 bb 02 	lds	r22, 0x02BB
    3ffc:	70 91 bc 02 	lds	r23, 0x02BC
    4000:	8c e2       	ldi	r24, 0x2C	; 44
    4002:	90 e0       	ldi	r25, 0x00	; 0
    4004:	99 d6       	rcall	.+3378   	; 0x4d38 <eeprom_write_word>
	
	eeprom_write_float( (float*)eepromAdr_TempSetPoint2, ch2.TempSetPoint );
    4006:	0f 2e       	mov	r0, r31
    4008:	fe ef       	ldi	r31, 0xFE	; 254
    400a:	ef 2e       	mov	r14, r31
    400c:	f1 e0       	ldi	r31, 0x01	; 1
    400e:	ff 2e       	mov	r15, r31
    4010:	f0 2d       	mov	r31, r0
    4012:	f7 01       	movw	r30, r14
    4014:	40 81       	ld	r20, Z
    4016:	51 81       	ldd	r21, Z+1	; 0x01
    4018:	62 81       	ldd	r22, Z+2	; 0x02
    401a:	73 81       	ldd	r23, Z+3	; 0x03
    401c:	80 e3       	ldi	r24, 0x30	; 48
    401e:	90 e0       	ldi	r25, 0x00	; 0
    4020:	86 d6       	rcall	.+3340   	; 0x4d2e <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_PgainCh2, ch2.Pgain );
    4022:	d7 01       	movw	r26, r14
    4024:	5c 96       	adiw	r26, 0x1c	; 28
    4026:	4d 91       	ld	r20, X+
    4028:	5d 91       	ld	r21, X+
    402a:	6d 91       	ld	r22, X+
    402c:	7c 91       	ld	r23, X
    402e:	5f 97       	sbiw	r26, 0x1f	; 31
    4030:	84 e3       	ldi	r24, 0x34	; 52
    4032:	90 e0       	ldi	r25, 0x00	; 0
    4034:	7c d6       	rcall	.+3320   	; 0x4d2e <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_IgainCh2, ch2.Igain );
    4036:	f7 01       	movw	r30, r14
    4038:	40 a1       	ldd	r20, Z+32	; 0x20
    403a:	51 a1       	ldd	r21, Z+33	; 0x21
    403c:	62 a1       	ldd	r22, Z+34	; 0x22
    403e:	73 a1       	ldd	r23, Z+35	; 0x23
    4040:	88 e3       	ldi	r24, 0x38	; 56
    4042:	90 e0       	ldi	r25, 0x00	; 0
    4044:	74 d6       	rcall	.+3304   	; 0x4d2e <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_DgainCh2, ch2.Dgain );
    4046:	d7 01       	movw	r26, r14
    4048:	94 96       	adiw	r26, 0x24	; 36
    404a:	4d 91       	ld	r20, X+
    404c:	5d 91       	ld	r21, X+
    404e:	6d 91       	ld	r22, X+
    4050:	7c 91       	ld	r23, X
    4052:	97 97       	sbiw	r26, 0x27	; 39
    4054:	8c e3       	ldi	r24, 0x3C	; 60
    4056:	90 e0       	ldi	r25, 0x00	; 0
    4058:	6a d6       	rcall	.+3284   	; 0x4d2e <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_TempErrWin2, ch2.tempErrorWin );
    405a:	40 91 52 02 	lds	r20, 0x0252
    405e:	50 91 53 02 	lds	r21, 0x0253
    4062:	60 91 54 02 	lds	r22, 0x0254
    4066:	70 91 55 02 	lds	r23, 0x0255
    406a:	80 e4       	ldi	r24, 0x40	; 64
    406c:	90 e0       	ldi	r25, 0x00	; 0
    406e:	5f d6       	rcall	.+3262   	; 0x4d2e <eeprom_write_dword>
	eeprom_write_word(	(uint16_t*)eepromAdr_TSettleTime2, ch2.tempSettleTime );	
    4070:	60 91 58 02 	lds	r22, 0x0258
    4074:	70 91 59 02 	lds	r23, 0x0259
    4078:	84 e4       	ldi	r24, 0x44	; 68
    407a:	90 e0       	ldi	r25, 0x00	; 0
    407c:	5d d6       	rcall	.+3258   	; 0x4d38 <eeprom_write_word>
	
	eeprom_write_float( (float*)eepromAdr_TempSetPoint3, ch3.TempSetPoint );
    407e:	0f 2e       	mov	r0, r31
    4080:	fb e9       	ldi	r31, 0x9B	; 155
    4082:	ef 2e       	mov	r14, r31
    4084:	f1 e0       	ldi	r31, 0x01	; 1
    4086:	ff 2e       	mov	r15, r31
    4088:	f0 2d       	mov	r31, r0
    408a:	f7 01       	movw	r30, r14
    408c:	40 81       	ld	r20, Z
    408e:	51 81       	ldd	r21, Z+1	; 0x01
    4090:	62 81       	ldd	r22, Z+2	; 0x02
    4092:	73 81       	ldd	r23, Z+3	; 0x03
    4094:	88 e4       	ldi	r24, 0x48	; 72
    4096:	90 e0       	ldi	r25, 0x00	; 0
    4098:	4a d6       	rcall	.+3220   	; 0x4d2e <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_PgainCh3, ch3.Pgain );
    409a:	d7 01       	movw	r26, r14
    409c:	5c 96       	adiw	r26, 0x1c	; 28
    409e:	4d 91       	ld	r20, X+
    40a0:	5d 91       	ld	r21, X+
    40a2:	6d 91       	ld	r22, X+
    40a4:	7c 91       	ld	r23, X
    40a6:	5f 97       	sbiw	r26, 0x1f	; 31
    40a8:	8c e4       	ldi	r24, 0x4C	; 76
    40aa:	90 e0       	ldi	r25, 0x00	; 0
    40ac:	40 d6       	rcall	.+3200   	; 0x4d2e <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_IgainCh3, ch3.Igain );
    40ae:	f7 01       	movw	r30, r14
    40b0:	40 a1       	ldd	r20, Z+32	; 0x20
    40b2:	51 a1       	ldd	r21, Z+33	; 0x21
    40b4:	62 a1       	ldd	r22, Z+34	; 0x22
    40b6:	73 a1       	ldd	r23, Z+35	; 0x23
    40b8:	80 e5       	ldi	r24, 0x50	; 80
    40ba:	90 e0       	ldi	r25, 0x00	; 0
    40bc:	38 d6       	rcall	.+3184   	; 0x4d2e <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_DgainCh3, ch3.Dgain );
    40be:	d7 01       	movw	r26, r14
    40c0:	94 96       	adiw	r26, 0x24	; 36
    40c2:	4d 91       	ld	r20, X+
    40c4:	5d 91       	ld	r21, X+
    40c6:	6d 91       	ld	r22, X+
    40c8:	7c 91       	ld	r23, X
    40ca:	97 97       	sbiw	r26, 0x27	; 39
    40cc:	84 e5       	ldi	r24, 0x54	; 84
    40ce:	90 e0       	ldi	r25, 0x00	; 0
    40d0:	2e d6       	rcall	.+3164   	; 0x4d2e <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_TempErrWin3, ch3.tempErrorWin );
    40d2:	40 91 ef 01 	lds	r20, 0x01EF
    40d6:	50 91 f0 01 	lds	r21, 0x01F0
    40da:	60 91 f1 01 	lds	r22, 0x01F1
    40de:	70 91 f2 01 	lds	r23, 0x01F2
    40e2:	88 e5       	ldi	r24, 0x58	; 88
    40e4:	90 e0       	ldi	r25, 0x00	; 0
    40e6:	23 d6       	rcall	.+3142   	; 0x4d2e <eeprom_write_dword>
	eeprom_write_word(	(uint16_t*)eepromAdr_TSettleTime3, ch3.tempSettleTime );	
    40e8:	60 91 f5 01 	lds	r22, 0x01F5
    40ec:	70 91 f6 01 	lds	r23, 0x01F6
    40f0:	8c e5       	ldi	r24, 0x5C	; 92
    40f2:	90 e0       	ldi	r25, 0x00	; 0
    40f4:	21 d6       	rcall	.+3138   	; 0x4d38 <eeprom_write_word>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    40f6:	81 e2       	ldi	r24, 0x21	; 33
    40f8:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    40fa:	f2 01       	movw	r30, r4
    40fc:	81 81       	ldd	r24, Z+1	; 0x01
    40fe:	8f 8f       	std	Y+31, r24	; 0x1f
    4100:	82 81       	ldd	r24, Z+2	; 0x02
    4102:	88 a3       	std	Y+32, r24	; 0x20
    4104:	83 81       	ldd	r24, Z+3	; 0x03
    4106:	89 a3       	std	Y+33, r24	; 0x21
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    4108:	1a a2       	std	Y+34, r1	; 0x22
    410a:	1b a2       	std	Y+35, r1	; 0x23
    410c:	1c a2       	std	Y+36, r1	; 0x24
    410e:	7e 01       	movw	r14, r28
    4110:	fe e1       	ldi	r31, 0x1E	; 30
    4112:	ef 0e       	add	r14, r31
    4114:	f1 1c       	adc	r15, r1
    4116:	be 01       	movw	r22, r28
    4118:	6e 5d       	subi	r22, 0xDE	; 222
    411a:	7f 4f       	sbci	r23, 0xFF	; 255
    411c:	f7 01       	movw	r30, r14
    411e:	80 e0       	ldi	r24, 0x00	; 0
    4120:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    4122:	b8 e0       	ldi	r27, 0x08	; 8
    4124:	d1 2c       	mov	r13, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    4126:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    4128:	29 2f       	mov	r18, r25
    412a:	33 27       	eor	r19, r19
    412c:	27 fd       	sbrc	r18, 7
    412e:	3a 95       	dec	r19
    4130:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    4132:	32 2f       	mov	r19, r18
    4134:	22 27       	eor	r18, r18
    4136:	4b 2f       	mov	r20, r27
    4138:	5d 2d       	mov	r21, r13
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    413a:	33 23       	and	r19, r19
    413c:	3c f4       	brge	.+14     	; 0x414c <main+0x263c>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    413e:	22 0f       	add	r18, r18
    4140:	33 1f       	adc	r19, r19
    4142:	a1 e2       	ldi	r26, 0x21	; 33
    4144:	2a 27       	eor	r18, r26
    4146:	a0 e1       	ldi	r26, 0x10	; 16
    4148:	3a 27       	eor	r19, r26
    414a:	02 c0       	rjmp	.+4      	; 0x4150 <main+0x2640>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    414c:	22 0f       	add	r18, r18
    414e:	33 1f       	adc	r19, r19
    4150:	41 50       	subi	r20, 0x01	; 1
    4152:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    4154:	91 f7       	brne	.-28     	; 0x413a <main+0x262a>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    4156:	98 2f       	mov	r25, r24
    4158:	88 27       	eor	r24, r24
    415a:	82 27       	eor	r24, r18
    415c:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    415e:	e6 17       	cp	r30, r22
    4160:	f7 07       	cpc	r31, r23
    4162:	09 f7       	brne	.-62     	; 0x4126 <main+0x2616>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    4164:	6c 01       	movw	r12, r24
    4166:	40 e1       	ldi	r20, 0x10	; 16
    4168:	6d e2       	ldi	r22, 0x2D	; 45
    416a:	75 e0       	ldi	r23, 0x05	; 5
    416c:	e2 d3       	rcall	.+1988   	; 0x4932 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    416e:	8d e2       	ldi	r24, 0x2D	; 45
    4170:	95 e0       	ldi	r25, 0x05	; 5
    4172:	d5 d3       	rcall	.+1962   	; 0x491e <strupr>
	if(crcXmodem < 0x10)
    4174:	b0 e1       	ldi	r27, 0x10	; 16
    4176:	cb 16       	cp	r12, r27
    4178:	d1 04       	cpc	r13, r1
    417a:	38 f4       	brcc	.+14     	; 0x418a <main+0x267a>
	{
		tx_string[cnt+4] = crc[0];
    417c:	80 91 2d 05 	lds	r24, 0x052D
    4180:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = '0';
    4182:	80 e3       	ldi	r24, 0x30	; 48
    4184:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = '0';
    4186:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';
    4188:	8a a3       	std	Y+34, r24	; 0x22
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    418a:	c6 01       	movw	r24, r12
    418c:	40 97       	sbiw	r24, 0x10	; 16
    418e:	80 3f       	cpi	r24, 0xF0	; 240
    4190:	91 05       	cpc	r25, r1
    4192:	48 f4       	brcc	.+18     	; 0x41a6 <main+0x2696>
	{
		tx_string[cnt+4] = crc[1];
    4194:	ed e2       	ldi	r30, 0x2D	; 45
    4196:	f5 e0       	ldi	r31, 0x05	; 5
    4198:	81 81       	ldd	r24, Z+1	; 0x01
    419a:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[0];
    419c:	80 81       	ld	r24, Z
    419e:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = '0';
    41a0:	80 e3       	ldi	r24, 0x30	; 48
    41a2:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';		
    41a4:	8a a3       	std	Y+34, r24	; 0x22
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    41a6:	c6 01       	movw	r24, r12
    41a8:	9a 95       	dec	r25
    41aa:	81 15       	cp	r24, r1
    41ac:	9f 40       	sbci	r25, 0x0F	; 15
    41ae:	50 f4       	brcc	.+20     	; 0x41c4 <main+0x26b4>
	{
		tx_string[cnt+4] = crc[2];
    41b0:	ed e2       	ldi	r30, 0x2D	; 45
    41b2:	f5 e0       	ldi	r31, 0x05	; 5
    41b4:	82 81       	ldd	r24, Z+2	; 0x02
    41b6:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[1];
    41b8:	81 81       	ldd	r24, Z+1	; 0x01
    41ba:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = crc[0];
    41bc:	80 81       	ld	r24, Z
    41be:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';		
    41c0:	80 e3       	ldi	r24, 0x30	; 48
    41c2:	8a a3       	std	Y+34, r24	; 0x22
	}
	if(crcXmodem >= 0x1000)
    41c4:	c1 14       	cp	r12, r1
    41c6:	f0 e1       	ldi	r31, 0x10	; 16
    41c8:	df 06       	cpc	r13, r31
    41ca:	50 f0       	brcs	.+20     	; 0x41e0 <main+0x26d0>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    41cc:	ed e2       	ldi	r30, 0x2D	; 45
    41ce:	f5 e0       	ldi	r31, 0x05	; 5
    41d0:	80 81       	ld	r24, Z
    41d2:	8a a3       	std	Y+34, r24	; 0x22
		tx_string[cnt+2] = crc[1];
    41d4:	81 81       	ldd	r24, Z+1	; 0x01
    41d6:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+3] = crc[2];
    41d8:	82 81       	ldd	r24, Z+2	; 0x02
    41da:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+4] = crc[3];
    41dc:	83 81       	ldd	r24, Z+3	; 0x03
    41de:	8d a3       	std	Y+37, r24	; 0x25
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    41e0:	8d e0       	ldi	r24, 0x0D	; 13
    41e2:	8e a3       	std	Y+38, r24	; 0x26
    41e4:	9e 01       	movw	r18, r28
    41e6:	29 5d       	subi	r18, 0xD9	; 217
    41e8:	3f 4f       	sbci	r19, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    41ea:	e5 e5       	ldi	r30, 0x55	; 85
    41ec:	f5 e0       	ldi	r31, 0x05	; 5
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    41ee:	0f 2e       	mov	r0, r31
    41f0:	f1 ec       	ldi	r31, 0xC1	; 193
    41f2:	8f 2e       	mov	r8, r31
    41f4:	91 2c       	mov	r9, r1
    41f6:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    41f8:	70 e0       	ldi	r23, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    41fa:	d7 01       	movw	r26, r14
    41fc:	4d 91       	ld	r20, X+
    41fe:	7d 01       	movw	r14, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    4200:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    4202:	91 81       	ldd	r25, Z+1	; 0x01
    4204:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    4206:	98 13       	cpse	r25, r24
    4208:	04 c0       	rjmp	.+8      	; 0x4212 <main+0x2702>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    420a:	d4 01       	movw	r26, r8
    420c:	8c 91       	ld	r24, X
    420e:	80 62       	ori	r24, 0x20	; 32
    4210:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    4212:	50 81       	ld	r21, Z
    4214:	83 81       	ldd	r24, Z+3	; 0x03
    4216:	94 81       	ldd	r25, Z+4	; 0x04
    4218:	85 0f       	add	r24, r21
    421a:	91 1d       	adc	r25, r1
    421c:	dc 01       	movw	r26, r24
    421e:	4c 93       	st	X, r20
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    4220:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    4222:	c8 2e       	mov	r12, r24
    4224:	d1 2c       	mov	r13, r1
    4226:	42 81       	ldd	r20, Z+2	; 0x02
    4228:	50 e0       	ldi	r21, 0x00	; 0
    422a:	41 50       	subi	r20, 0x01	; 1
    422c:	51 09       	sbc	r21, r1
    422e:	c4 16       	cp	r12, r20
    4230:	d5 06       	cpc	r13, r21
    4232:	11 f0       	breq	.+4      	; 0x4238 <main+0x2728>
    4234:	8f 5f       	subi	r24, 0xFF	; 255
    4236:	01 c0       	rjmp	.+2      	; 0x423a <main+0x272a>
    4238:	87 2f       	mov	r24, r23
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    423a:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    423c:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    423e:	e2 16       	cp	r14, r18
    4240:	f3 06       	cpc	r15, r19
    4242:	d9 f6       	brne	.-74     	; 0x41fa <main+0x26ea>
    4244:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <main+0x30e>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    4248:	6e e1       	ldi	r22, 0x1E	; 30
    424a:	70 e0       	ldi	r23, 0x00	; 0
    424c:	c2 01       	movw	r24, r4
    424e:	5c d3       	rcall	.+1720   	; 0x4908 <strnlen>
    4250:	05 97       	sbiw	r24, 0x05	; 5
    4252:	9c 01       	movw	r18, r24
    4254:	d5 01       	movw	r26, r10
    4256:	a5 01       	movw	r20, r10
    4258:	4c 5e       	subi	r20, 0xEC	; 236
    425a:	5f 4f       	sbci	r21, 0xFF	; 255
    425c:	f5 01       	movw	r30, r10
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    425e:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    4260:	e4 17       	cp	r30, r20
    4262:	f5 07       	cpc	r31, r21
    4264:	e1 f7       	brne	.-8      	; 0x425e <main+0x274e>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    4266:	2b 30       	cpi	r18, 0x0B	; 11
    4268:	31 05       	cpc	r19, r1
    426a:	54 f0       	brlt	.+20     	; 0x4280 <main+0x2770>
    426c:	e1 e4       	ldi	r30, 0x41	; 65
    426e:	f5 e0       	ldi	r31, 0x05	; 5
    4270:	89 5c       	subi	r24, 0xC9	; 201
    4272:	9a 4f       	sbci	r25, 0xFA	; 250
    4274:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    4276:	91 91       	ld	r25, Z+
    4278:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    427a:	e2 17       	cp	r30, r18
    427c:	f3 07       	cpc	r31, r19
    427e:	d9 f7       	brne	.-10     	; 0x4276 <main+0x2766>
		printStatus("");
		break;
		
		case 600: // Motor homing
		ParamParse(rx_string, param);
		if (strcmp(param, "CW") == 0)
    4280:	6f e3       	ldi	r22, 0x3F	; 63
    4282:	71 e0       	ldi	r23, 0x01	; 1
    4284:	c5 01       	movw	r24, r10
    4286:	37 d3       	rcall	.+1646   	; 0x48f6 <strcmp>
    4288:	89 2b       	or	r24, r25
    428a:	49 f4       	brne	.+18     	; 0x429e <main+0x278e>
		{
			ramp = homingCW;
    428c:	82 e0       	ldi	r24, 0x02	; 2
    428e:	80 93 92 01 	sts	0x0192, r24
			TIMSK1 |= _BV(OCIE1A);	// Enable step motor irq
    4292:	ef e6       	ldi	r30, 0x6F	; 111
    4294:	f0 e0       	ldi	r31, 0x00	; 0
    4296:	80 81       	ld	r24, Z
    4298:	82 60       	ori	r24, 0x02	; 2
    429a:	80 83       	st	Z, r24
    429c:	0e c0       	rjmp	.+28     	; 0x42ba <main+0x27aa>
		}
		else if (strcmp(param, "CCW") == 0)
    429e:	6e e3       	ldi	r22, 0x3E	; 62
    42a0:	71 e0       	ldi	r23, 0x01	; 1
    42a2:	c5 01       	movw	r24, r10
    42a4:	28 d3       	rcall	.+1616   	; 0x48f6 <strcmp>
    42a6:	89 2b       	or	r24, r25
    42a8:	41 f4       	brne	.+16     	; 0x42ba <main+0x27aa>
		{
			ramp = homingCCW;
    42aa:	85 e0       	ldi	r24, 0x05	; 5
    42ac:	80 93 92 01 	sts	0x0192, r24
			TIMSK1 |= _BV(OCIE1A);	// Enable step motor irq
    42b0:	ef e6       	ldi	r30, 0x6F	; 111
    42b2:	f0 e0       	ldi	r31, 0x00	; 0
    42b4:	80 81       	ld	r24, Z
    42b6:	82 60       	ori	r24, 0x02	; 2
    42b8:	80 83       	st	Z, r24
		}
		printStatus("");
    42ba:	89 e2       	ldi	r24, 0x29	; 41
    42bc:	91 e0       	ldi	r25, 0x01	; 1
    42be:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    42c2:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <main+0x30e>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    42c6:	6e e1       	ldi	r22, 0x1E	; 30
    42c8:	70 e0       	ldi	r23, 0x00	; 0
    42ca:	c2 01       	movw	r24, r4
    42cc:	1d d3       	rcall	.+1594   	; 0x4908 <strnlen>
    42ce:	05 97       	sbiw	r24, 0x05	; 5
    42d0:	9c 01       	movw	r18, r24
    42d2:	d5 01       	movw	r26, r10
    42d4:	a5 01       	movw	r20, r10
    42d6:	4c 5e       	subi	r20, 0xEC	; 236
    42d8:	5f 4f       	sbci	r21, 0xFF	; 255
    42da:	f5 01       	movw	r30, r10
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    42dc:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    42de:	e4 17       	cp	r30, r20
    42e0:	f5 07       	cpc	r31, r21
    42e2:	e1 f7       	brne	.-8      	; 0x42dc <main+0x27cc>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    42e4:	2b 30       	cpi	r18, 0x0B	; 11
    42e6:	31 05       	cpc	r19, r1
    42e8:	54 f0       	brlt	.+20     	; 0x42fe <main+0x27ee>
    42ea:	e1 e4       	ldi	r30, 0x41	; 65
    42ec:	f5 e0       	ldi	r31, 0x05	; 5
    42ee:	89 5c       	subi	r24, 0xC9	; 201
    42f0:	9a 4f       	sbci	r25, 0xFA	; 250
    42f2:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    42f4:	91 91       	ld	r25, Z+
    42f6:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    42f8:	e2 17       	cp	r30, r18
    42fa:	f3 07       	cpc	r31, r19
    42fc:	d9 f7       	brne	.-10     	; 0x42f4 <main+0x27e4>
		printStatus("");
		break;
		
		case 601: // Set motor speed
		ParamParse(rx_string, param);
		motorSpeed = atoi(param);
    42fe:	c5 01       	movw	r24, r10
    4300:	a1 d2       	rcall	.+1346   	; 0x4844 <atoi>
    4302:	90 93 01 01 	sts	0x0101, r25
    4306:	80 93 00 01 	sts	0x0100, r24
		printStatus("");
    430a:	89 e2       	ldi	r24, 0x29	; 41
    430c:	91 e0       	ldi	r25, 0x01	; 1
    430e:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    4312:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <main+0x30e>
		break;
		
		case 602: // Motor delta move
		ParamParse(rx_string, param);
    4316:	b5 01       	movw	r22, r10
    4318:	c2 01       	movw	r24, r4
    431a:	0e 94 30 01 	call	0x260	; 0x260 <ParamParse>
		ramp = up;
    431e:	10 92 92 01 	sts	0x0192, r1
		long deltaMove = atol(param);
    4322:	c5 01       	movw	r24, r10
    4324:	ac d2       	rcall	.+1368   	; 0x487e <atol>
    4326:	ab 01       	movw	r20, r22
    4328:	bc 01       	movw	r22, r24
		long halfDeltaMove = abs(deltaMove);
    432a:	ca 01       	movw	r24, r20
    432c:	99 23       	and	r25, r25
    432e:	24 f4       	brge	.+8      	; 0x4338 <main+0x2828>
    4330:	88 27       	eor	r24, r24
    4332:	99 27       	eor	r25, r25
    4334:	84 1b       	sub	r24, r20
    4336:	95 0b       	sbc	r25, r21
    4338:	09 2e       	mov	r0, r25
    433a:	00 0c       	add	r0, r0
    433c:	aa 0b       	sbc	r26, r26
    433e:	bb 0b       	sbc	r27, r27
		halfDeltaMove = halfDeltaMove >> 1;
    4340:	b5 95       	asr	r27
    4342:	a7 95       	ror	r26
    4344:	97 95       	ror	r25
    4346:	87 95       	ror	r24
		if (halfDeltaMove < (fullSpeedRampSize * rampAdvance))
    4348:	81 15       	cp	r24, r1
    434a:	ea e0       	ldi	r30, 0x0A	; 10
    434c:	9e 07       	cpc	r25, r30
    434e:	a1 05       	cpc	r26, r1
    4350:	b1 05       	cpc	r27, r1
    4352:	44 f5       	brge	.+80     	; 0x43a4 <main+0x2894>
		{
			for(int idx = 1; idx < fullSpeedRampSize; idx++)
			{
				if (halfDeltaMove < (long)(rampAdvance * idx))
    4354:	80 35       	cpi	r24, 0x50	; 80
    4356:	91 05       	cpc	r25, r1
    4358:	a1 05       	cpc	r26, r1
    435a:	b1 05       	cpc	r27, r1
    435c:	7c f0       	brlt	.+30     	; 0x437c <main+0x286c>
    435e:	0f 2e       	mov	r0, r31
    4360:	f0 ea       	ldi	r31, 0xA0	; 160
    4362:	cf 2e       	mov	r12, r31
    4364:	d1 2c       	mov	r13, r1
    4366:	e1 2c       	mov	r14, r1
    4368:	f1 2c       	mov	r15, r1
    436a:	f0 2d       	mov	r31, r0
    436c:	22 e0       	ldi	r18, 0x02	; 2
    436e:	30 e0       	ldi	r19, 0x00	; 0
    4370:	8c 15       	cp	r24, r12
    4372:	9d 05       	cpc	r25, r13
    4374:	ae 05       	cpc	r26, r14
    4376:	bf 05       	cpc	r27, r15
    4378:	54 f4       	brge	.+20     	; 0x438e <main+0x287e>
    437a:	02 c0       	rjmp	.+4      	; 0x4380 <main+0x2870>
    437c:	21 e0       	ldi	r18, 0x01	; 1
    437e:	30 e0       	ldi	r19, 0x00	; 0
				{
					speedRampSize = idx - 1;
    4380:	21 50       	subi	r18, 0x01	; 1
    4382:	31 09       	sbc	r19, r1
    4384:	30 93 8d 01 	sts	0x018D, r19
    4388:	20 93 8c 01 	sts	0x018C, r18
    438c:	11 c0       	rjmp	.+34     	; 0x43b0 <main+0x28a0>
		long deltaMove = atol(param);
		long halfDeltaMove = abs(deltaMove);
		halfDeltaMove = halfDeltaMove >> 1;
		if (halfDeltaMove < (fullSpeedRampSize * rampAdvance))
		{
			for(int idx = 1; idx < fullSpeedRampSize; idx++)
    438e:	2f 5f       	subi	r18, 0xFF	; 255
    4390:	3f 4f       	sbci	r19, 0xFF	; 255
    4392:	f0 e5       	ldi	r31, 0x50	; 80
    4394:	cf 0e       	add	r12, r31
    4396:	d1 1c       	adc	r13, r1
    4398:	e1 1c       	adc	r14, r1
    439a:	f1 1c       	adc	r15, r1
    439c:	20 32       	cpi	r18, 0x20	; 32
    439e:	31 05       	cpc	r19, r1
    43a0:	39 f7       	brne	.-50     	; 0x4370 <main+0x2860>
    43a2:	06 c0       	rjmp	.+12     	; 0x43b0 <main+0x28a0>
				}
			}
		}
		else
		{
			speedRampSize = fullSpeedRampSize;
    43a4:	80 e2       	ldi	r24, 0x20	; 32
    43a6:	90 e0       	ldi	r25, 0x00	; 0
    43a8:	90 93 8d 01 	sts	0x018D, r25
    43ac:	80 93 8c 01 	sts	0x018C, r24
		}
		targetMotorPos = motorPos + deltaMove;
    43b0:	80 91 97 01 	lds	r24, 0x0197
    43b4:	90 91 98 01 	lds	r25, 0x0198
    43b8:	a0 91 99 01 	lds	r26, 0x0199
    43bc:	b0 91 9a 01 	lds	r27, 0x019A
    43c0:	84 0f       	add	r24, r20
    43c2:	95 1f       	adc	r25, r21
    43c4:	a6 1f       	adc	r26, r22
    43c6:	b7 1f       	adc	r27, r23
    43c8:	80 93 93 01 	sts	0x0193, r24
    43cc:	90 93 94 01 	sts	0x0194, r25
    43d0:	a0 93 95 01 	sts	0x0195, r26
    43d4:	b0 93 96 01 	sts	0x0196, r27
		TIMSK1 |= _BV(OCIE1A);
    43d8:	ef e6       	ldi	r30, 0x6F	; 111
    43da:	f0 e0       	ldi	r31, 0x00	; 0
    43dc:	80 81       	ld	r24, Z
    43de:	82 60       	ori	r24, 0x02	; 2
    43e0:	80 83       	st	Z, r24
		printStatus("");
    43e2:	89 e2       	ldi	r24, 0x29	; 41
    43e4:	91 e0       	ldi	r25, 0x01	; 1
    43e6:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    43ea:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <main+0x30e>
		break;
		
		default:
		printStatus("VSerror");
    43ee:	82 e4       	ldi	r24, 0x42	; 66
    43f0:	91 e0       	ldi	r25, 0x01	; 1
    43f2:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    43f6:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <main+0x30e>
						var = atol(requestID);
						SetParameter(atol(requestID));
					}
					else
					{
						printStatus("CRC error");
    43fa:	8b e1       	ldi	r24, 0x1B	; 27
    43fc:	91 e0       	ldi	r25, 0x01	; 1
    43fe:	0e 94 b3 01 	call	0x366	; 0x366 <printStatus>
    4402:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <main+0x30e>
    4406:	40 e1       	ldi	r20, 0x10	; 16
    4408:	6d e2       	ldi	r22, 0x2D	; 45
    440a:	75 e0       	ldi	r23, 0x05	; 5
    440c:	80 e0       	ldi	r24, 0x00	; 0
    440e:	90 e0       	ldi	r25, 0x00	; 0
    4410:	90 d2       	rcall	.+1312   	; 0x4932 <__itoa_ncheck>
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    4412:	8d e2       	ldi	r24, 0x2D	; 45
    4414:	95 e0       	ldi	r25, 0x05	; 5
    4416:	83 d2       	rcall	.+1286   	; 0x491e <strupr>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    4418:	81 2c       	mov	r8, r1
    441a:	91 2c       	mov	r9, r1
    441c:	0c 94 bc 11 	jmp	0x2378	; 0x2378 <main+0x868>
    4420:	40 e1       	ldi	r20, 0x10	; 16
    4422:	6d e2       	ldi	r22, 0x2D	; 45
    4424:	75 e0       	ldi	r23, 0x05	; 5
    4426:	80 e0       	ldi	r24, 0x00	; 0
    4428:	90 e0       	ldi	r25, 0x00	; 0
    442a:	83 d2       	rcall	.+1286   	; 0x4932 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    442c:	8d e2       	ldi	r24, 0x2D	; 45
    442e:	95 e0       	ldi	r25, 0x05	; 5
    4430:	76 d2       	rcall	.+1260   	; 0x491e <strupr>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    4432:	81 2c       	mov	r8, r1
    4434:	91 2c       	mov	r9, r1
    4436:	0c 94 8d 13 	jmp	0x271a	; 0x271a <main+0xc0a>

0000443a <__subsf3>:
    443a:	50 58       	subi	r21, 0x80	; 128

0000443c <__addsf3>:
    443c:	bb 27       	eor	r27, r27
    443e:	aa 27       	eor	r26, r26
    4440:	0e d0       	rcall	.+28     	; 0x445e <__addsf3x>
    4442:	0d c1       	rjmp	.+538    	; 0x465e <__fp_round>
    4444:	fe d0       	rcall	.+508    	; 0x4642 <__fp_pscA>
    4446:	30 f0       	brcs	.+12     	; 0x4454 <__addsf3+0x18>
    4448:	03 d1       	rcall	.+518    	; 0x4650 <__fp_pscB>
    444a:	20 f0       	brcs	.+8      	; 0x4454 <__addsf3+0x18>
    444c:	31 f4       	brne	.+12     	; 0x445a <__addsf3+0x1e>
    444e:	9f 3f       	cpi	r25, 0xFF	; 255
    4450:	11 f4       	brne	.+4      	; 0x4456 <__addsf3+0x1a>
    4452:	1e f4       	brtc	.+6      	; 0x445a <__addsf3+0x1e>
    4454:	f3 c0       	rjmp	.+486    	; 0x463c <__fp_nan>
    4456:	0e f4       	brtc	.+2      	; 0x445a <__addsf3+0x1e>
    4458:	e0 95       	com	r30
    445a:	e7 fb       	bst	r30, 7
    445c:	e9 c0       	rjmp	.+466    	; 0x4630 <__fp_inf>

0000445e <__addsf3x>:
    445e:	e9 2f       	mov	r30, r25
    4460:	0f d1       	rcall	.+542    	; 0x4680 <__fp_split3>
    4462:	80 f3       	brcs	.-32     	; 0x4444 <__addsf3+0x8>
    4464:	ba 17       	cp	r27, r26
    4466:	62 07       	cpc	r22, r18
    4468:	73 07       	cpc	r23, r19
    446a:	84 07       	cpc	r24, r20
    446c:	95 07       	cpc	r25, r21
    446e:	18 f0       	brcs	.+6      	; 0x4476 <__addsf3x+0x18>
    4470:	71 f4       	brne	.+28     	; 0x448e <__addsf3x+0x30>
    4472:	9e f5       	brtc	.+102    	; 0x44da <__addsf3x+0x7c>
    4474:	27 c1       	rjmp	.+590    	; 0x46c4 <__fp_zero>
    4476:	0e f4       	brtc	.+2      	; 0x447a <__addsf3x+0x1c>
    4478:	e0 95       	com	r30
    447a:	0b 2e       	mov	r0, r27
    447c:	ba 2f       	mov	r27, r26
    447e:	a0 2d       	mov	r26, r0
    4480:	0b 01       	movw	r0, r22
    4482:	b9 01       	movw	r22, r18
    4484:	90 01       	movw	r18, r0
    4486:	0c 01       	movw	r0, r24
    4488:	ca 01       	movw	r24, r20
    448a:	a0 01       	movw	r20, r0
    448c:	11 24       	eor	r1, r1
    448e:	ff 27       	eor	r31, r31
    4490:	59 1b       	sub	r21, r25
    4492:	99 f0       	breq	.+38     	; 0x44ba <__addsf3x+0x5c>
    4494:	59 3f       	cpi	r21, 0xF9	; 249
    4496:	50 f4       	brcc	.+20     	; 0x44ac <__addsf3x+0x4e>
    4498:	50 3e       	cpi	r21, 0xE0	; 224
    449a:	68 f1       	brcs	.+90     	; 0x44f6 <__addsf3x+0x98>
    449c:	1a 16       	cp	r1, r26
    449e:	f0 40       	sbci	r31, 0x00	; 0
    44a0:	a2 2f       	mov	r26, r18
    44a2:	23 2f       	mov	r18, r19
    44a4:	34 2f       	mov	r19, r20
    44a6:	44 27       	eor	r20, r20
    44a8:	58 5f       	subi	r21, 0xF8	; 248
    44aa:	f3 cf       	rjmp	.-26     	; 0x4492 <__addsf3x+0x34>
    44ac:	46 95       	lsr	r20
    44ae:	37 95       	ror	r19
    44b0:	27 95       	ror	r18
    44b2:	a7 95       	ror	r26
    44b4:	f0 40       	sbci	r31, 0x00	; 0
    44b6:	53 95       	inc	r21
    44b8:	c9 f7       	brne	.-14     	; 0x44ac <__addsf3x+0x4e>
    44ba:	7e f4       	brtc	.+30     	; 0x44da <__addsf3x+0x7c>
    44bc:	1f 16       	cp	r1, r31
    44be:	ba 0b       	sbc	r27, r26
    44c0:	62 0b       	sbc	r22, r18
    44c2:	73 0b       	sbc	r23, r19
    44c4:	84 0b       	sbc	r24, r20
    44c6:	ba f0       	brmi	.+46     	; 0x44f6 <__addsf3x+0x98>
    44c8:	91 50       	subi	r25, 0x01	; 1
    44ca:	a1 f0       	breq	.+40     	; 0x44f4 <__addsf3x+0x96>
    44cc:	ff 0f       	add	r31, r31
    44ce:	bb 1f       	adc	r27, r27
    44d0:	66 1f       	adc	r22, r22
    44d2:	77 1f       	adc	r23, r23
    44d4:	88 1f       	adc	r24, r24
    44d6:	c2 f7       	brpl	.-16     	; 0x44c8 <__addsf3x+0x6a>
    44d8:	0e c0       	rjmp	.+28     	; 0x44f6 <__addsf3x+0x98>
    44da:	ba 0f       	add	r27, r26
    44dc:	62 1f       	adc	r22, r18
    44de:	73 1f       	adc	r23, r19
    44e0:	84 1f       	adc	r24, r20
    44e2:	48 f4       	brcc	.+18     	; 0x44f6 <__addsf3x+0x98>
    44e4:	87 95       	ror	r24
    44e6:	77 95       	ror	r23
    44e8:	67 95       	ror	r22
    44ea:	b7 95       	ror	r27
    44ec:	f7 95       	ror	r31
    44ee:	9e 3f       	cpi	r25, 0xFE	; 254
    44f0:	08 f0       	brcs	.+2      	; 0x44f4 <__addsf3x+0x96>
    44f2:	b3 cf       	rjmp	.-154    	; 0x445a <__addsf3+0x1e>
    44f4:	93 95       	inc	r25
    44f6:	88 0f       	add	r24, r24
    44f8:	08 f0       	brcs	.+2      	; 0x44fc <__addsf3x+0x9e>
    44fa:	99 27       	eor	r25, r25
    44fc:	ee 0f       	add	r30, r30
    44fe:	97 95       	ror	r25
    4500:	87 95       	ror	r24
    4502:	08 95       	ret

00004504 <__cmpsf2>:
    4504:	71 d0       	rcall	.+226    	; 0x45e8 <__fp_cmp>
    4506:	08 f4       	brcc	.+2      	; 0x450a <__cmpsf2+0x6>
    4508:	81 e0       	ldi	r24, 0x01	; 1
    450a:	08 95       	ret

0000450c <__fixsfsi>:
    450c:	04 d0       	rcall	.+8      	; 0x4516 <__fixunssfsi>
    450e:	68 94       	set
    4510:	b1 11       	cpse	r27, r1
    4512:	d9 c0       	rjmp	.+434    	; 0x46c6 <__fp_szero>
    4514:	08 95       	ret

00004516 <__fixunssfsi>:
    4516:	bc d0       	rcall	.+376    	; 0x4690 <__fp_splitA>
    4518:	88 f0       	brcs	.+34     	; 0x453c <__fixunssfsi+0x26>
    451a:	9f 57       	subi	r25, 0x7F	; 127
    451c:	90 f0       	brcs	.+36     	; 0x4542 <__fixunssfsi+0x2c>
    451e:	b9 2f       	mov	r27, r25
    4520:	99 27       	eor	r25, r25
    4522:	b7 51       	subi	r27, 0x17	; 23
    4524:	a0 f0       	brcs	.+40     	; 0x454e <__fixunssfsi+0x38>
    4526:	d1 f0       	breq	.+52     	; 0x455c <__fixunssfsi+0x46>
    4528:	66 0f       	add	r22, r22
    452a:	77 1f       	adc	r23, r23
    452c:	88 1f       	adc	r24, r24
    452e:	99 1f       	adc	r25, r25
    4530:	1a f0       	brmi	.+6      	; 0x4538 <__fixunssfsi+0x22>
    4532:	ba 95       	dec	r27
    4534:	c9 f7       	brne	.-14     	; 0x4528 <__fixunssfsi+0x12>
    4536:	12 c0       	rjmp	.+36     	; 0x455c <__fixunssfsi+0x46>
    4538:	b1 30       	cpi	r27, 0x01	; 1
    453a:	81 f0       	breq	.+32     	; 0x455c <__fixunssfsi+0x46>
    453c:	c3 d0       	rcall	.+390    	; 0x46c4 <__fp_zero>
    453e:	b1 e0       	ldi	r27, 0x01	; 1
    4540:	08 95       	ret
    4542:	c0 c0       	rjmp	.+384    	; 0x46c4 <__fp_zero>
    4544:	67 2f       	mov	r22, r23
    4546:	78 2f       	mov	r23, r24
    4548:	88 27       	eor	r24, r24
    454a:	b8 5f       	subi	r27, 0xF8	; 248
    454c:	39 f0       	breq	.+14     	; 0x455c <__fixunssfsi+0x46>
    454e:	b9 3f       	cpi	r27, 0xF9	; 249
    4550:	cc f3       	brlt	.-14     	; 0x4544 <__fixunssfsi+0x2e>
    4552:	86 95       	lsr	r24
    4554:	77 95       	ror	r23
    4556:	67 95       	ror	r22
    4558:	b3 95       	inc	r27
    455a:	d9 f7       	brne	.-10     	; 0x4552 <__fixunssfsi+0x3c>
    455c:	3e f4       	brtc	.+14     	; 0x456c <__fixunssfsi+0x56>
    455e:	90 95       	com	r25
    4560:	80 95       	com	r24
    4562:	70 95       	com	r23
    4564:	61 95       	neg	r22
    4566:	7f 4f       	sbci	r23, 0xFF	; 255
    4568:	8f 4f       	sbci	r24, 0xFF	; 255
    456a:	9f 4f       	sbci	r25, 0xFF	; 255
    456c:	08 95       	ret

0000456e <__floatunsisf>:
    456e:	e8 94       	clt
    4570:	09 c0       	rjmp	.+18     	; 0x4584 <__floatsisf+0x12>

00004572 <__floatsisf>:
    4572:	97 fb       	bst	r25, 7
    4574:	3e f4       	brtc	.+14     	; 0x4584 <__floatsisf+0x12>
    4576:	90 95       	com	r25
    4578:	80 95       	com	r24
    457a:	70 95       	com	r23
    457c:	61 95       	neg	r22
    457e:	7f 4f       	sbci	r23, 0xFF	; 255
    4580:	8f 4f       	sbci	r24, 0xFF	; 255
    4582:	9f 4f       	sbci	r25, 0xFF	; 255
    4584:	99 23       	and	r25, r25
    4586:	a9 f0       	breq	.+42     	; 0x45b2 <__floatsisf+0x40>
    4588:	f9 2f       	mov	r31, r25
    458a:	96 e9       	ldi	r25, 0x96	; 150
    458c:	bb 27       	eor	r27, r27
    458e:	93 95       	inc	r25
    4590:	f6 95       	lsr	r31
    4592:	87 95       	ror	r24
    4594:	77 95       	ror	r23
    4596:	67 95       	ror	r22
    4598:	b7 95       	ror	r27
    459a:	f1 11       	cpse	r31, r1
    459c:	f8 cf       	rjmp	.-16     	; 0x458e <__floatsisf+0x1c>
    459e:	fa f4       	brpl	.+62     	; 0x45de <__floatsisf+0x6c>
    45a0:	bb 0f       	add	r27, r27
    45a2:	11 f4       	brne	.+4      	; 0x45a8 <__floatsisf+0x36>
    45a4:	60 ff       	sbrs	r22, 0
    45a6:	1b c0       	rjmp	.+54     	; 0x45de <__floatsisf+0x6c>
    45a8:	6f 5f       	subi	r22, 0xFF	; 255
    45aa:	7f 4f       	sbci	r23, 0xFF	; 255
    45ac:	8f 4f       	sbci	r24, 0xFF	; 255
    45ae:	9f 4f       	sbci	r25, 0xFF	; 255
    45b0:	16 c0       	rjmp	.+44     	; 0x45de <__floatsisf+0x6c>
    45b2:	88 23       	and	r24, r24
    45b4:	11 f0       	breq	.+4      	; 0x45ba <__floatsisf+0x48>
    45b6:	96 e9       	ldi	r25, 0x96	; 150
    45b8:	11 c0       	rjmp	.+34     	; 0x45dc <__floatsisf+0x6a>
    45ba:	77 23       	and	r23, r23
    45bc:	21 f0       	breq	.+8      	; 0x45c6 <__floatsisf+0x54>
    45be:	9e e8       	ldi	r25, 0x8E	; 142
    45c0:	87 2f       	mov	r24, r23
    45c2:	76 2f       	mov	r23, r22
    45c4:	05 c0       	rjmp	.+10     	; 0x45d0 <__floatsisf+0x5e>
    45c6:	66 23       	and	r22, r22
    45c8:	71 f0       	breq	.+28     	; 0x45e6 <__floatsisf+0x74>
    45ca:	96 e8       	ldi	r25, 0x86	; 134
    45cc:	86 2f       	mov	r24, r22
    45ce:	70 e0       	ldi	r23, 0x00	; 0
    45d0:	60 e0       	ldi	r22, 0x00	; 0
    45d2:	2a f0       	brmi	.+10     	; 0x45de <__floatsisf+0x6c>
    45d4:	9a 95       	dec	r25
    45d6:	66 0f       	add	r22, r22
    45d8:	77 1f       	adc	r23, r23
    45da:	88 1f       	adc	r24, r24
    45dc:	da f7       	brpl	.-10     	; 0x45d4 <__floatsisf+0x62>
    45de:	88 0f       	add	r24, r24
    45e0:	96 95       	lsr	r25
    45e2:	87 95       	ror	r24
    45e4:	97 f9       	bld	r25, 7
    45e6:	08 95       	ret

000045e8 <__fp_cmp>:
    45e8:	99 0f       	add	r25, r25
    45ea:	00 08       	sbc	r0, r0
    45ec:	55 0f       	add	r21, r21
    45ee:	aa 0b       	sbc	r26, r26
    45f0:	e0 e8       	ldi	r30, 0x80	; 128
    45f2:	fe ef       	ldi	r31, 0xFE	; 254
    45f4:	16 16       	cp	r1, r22
    45f6:	17 06       	cpc	r1, r23
    45f8:	e8 07       	cpc	r30, r24
    45fa:	f9 07       	cpc	r31, r25
    45fc:	c0 f0       	brcs	.+48     	; 0x462e <__fp_cmp+0x46>
    45fe:	12 16       	cp	r1, r18
    4600:	13 06       	cpc	r1, r19
    4602:	e4 07       	cpc	r30, r20
    4604:	f5 07       	cpc	r31, r21
    4606:	98 f0       	brcs	.+38     	; 0x462e <__fp_cmp+0x46>
    4608:	62 1b       	sub	r22, r18
    460a:	73 0b       	sbc	r23, r19
    460c:	84 0b       	sbc	r24, r20
    460e:	95 0b       	sbc	r25, r21
    4610:	39 f4       	brne	.+14     	; 0x4620 <__fp_cmp+0x38>
    4612:	0a 26       	eor	r0, r26
    4614:	61 f0       	breq	.+24     	; 0x462e <__fp_cmp+0x46>
    4616:	23 2b       	or	r18, r19
    4618:	24 2b       	or	r18, r20
    461a:	25 2b       	or	r18, r21
    461c:	21 f4       	brne	.+8      	; 0x4626 <__fp_cmp+0x3e>
    461e:	08 95       	ret
    4620:	0a 26       	eor	r0, r26
    4622:	09 f4       	brne	.+2      	; 0x4626 <__fp_cmp+0x3e>
    4624:	a1 40       	sbci	r26, 0x01	; 1
    4626:	a6 95       	lsr	r26
    4628:	8f ef       	ldi	r24, 0xFF	; 255
    462a:	81 1d       	adc	r24, r1
    462c:	81 1d       	adc	r24, r1
    462e:	08 95       	ret

00004630 <__fp_inf>:
    4630:	97 f9       	bld	r25, 7
    4632:	9f 67       	ori	r25, 0x7F	; 127
    4634:	80 e8       	ldi	r24, 0x80	; 128
    4636:	70 e0       	ldi	r23, 0x00	; 0
    4638:	60 e0       	ldi	r22, 0x00	; 0
    463a:	08 95       	ret

0000463c <__fp_nan>:
    463c:	9f ef       	ldi	r25, 0xFF	; 255
    463e:	80 ec       	ldi	r24, 0xC0	; 192
    4640:	08 95       	ret

00004642 <__fp_pscA>:
    4642:	00 24       	eor	r0, r0
    4644:	0a 94       	dec	r0
    4646:	16 16       	cp	r1, r22
    4648:	17 06       	cpc	r1, r23
    464a:	18 06       	cpc	r1, r24
    464c:	09 06       	cpc	r0, r25
    464e:	08 95       	ret

00004650 <__fp_pscB>:
    4650:	00 24       	eor	r0, r0
    4652:	0a 94       	dec	r0
    4654:	12 16       	cp	r1, r18
    4656:	13 06       	cpc	r1, r19
    4658:	14 06       	cpc	r1, r20
    465a:	05 06       	cpc	r0, r21
    465c:	08 95       	ret

0000465e <__fp_round>:
    465e:	09 2e       	mov	r0, r25
    4660:	03 94       	inc	r0
    4662:	00 0c       	add	r0, r0
    4664:	11 f4       	brne	.+4      	; 0x466a <__fp_round+0xc>
    4666:	88 23       	and	r24, r24
    4668:	52 f0       	brmi	.+20     	; 0x467e <__fp_round+0x20>
    466a:	bb 0f       	add	r27, r27
    466c:	40 f4       	brcc	.+16     	; 0x467e <__fp_round+0x20>
    466e:	bf 2b       	or	r27, r31
    4670:	11 f4       	brne	.+4      	; 0x4676 <__fp_round+0x18>
    4672:	60 ff       	sbrs	r22, 0
    4674:	04 c0       	rjmp	.+8      	; 0x467e <__fp_round+0x20>
    4676:	6f 5f       	subi	r22, 0xFF	; 255
    4678:	7f 4f       	sbci	r23, 0xFF	; 255
    467a:	8f 4f       	sbci	r24, 0xFF	; 255
    467c:	9f 4f       	sbci	r25, 0xFF	; 255
    467e:	08 95       	ret

00004680 <__fp_split3>:
    4680:	57 fd       	sbrc	r21, 7
    4682:	90 58       	subi	r25, 0x80	; 128
    4684:	44 0f       	add	r20, r20
    4686:	55 1f       	adc	r21, r21
    4688:	59 f0       	breq	.+22     	; 0x46a0 <__fp_splitA+0x10>
    468a:	5f 3f       	cpi	r21, 0xFF	; 255
    468c:	71 f0       	breq	.+28     	; 0x46aa <__fp_splitA+0x1a>
    468e:	47 95       	ror	r20

00004690 <__fp_splitA>:
    4690:	88 0f       	add	r24, r24
    4692:	97 fb       	bst	r25, 7
    4694:	99 1f       	adc	r25, r25
    4696:	61 f0       	breq	.+24     	; 0x46b0 <__fp_splitA+0x20>
    4698:	9f 3f       	cpi	r25, 0xFF	; 255
    469a:	79 f0       	breq	.+30     	; 0x46ba <__fp_splitA+0x2a>
    469c:	87 95       	ror	r24
    469e:	08 95       	ret
    46a0:	12 16       	cp	r1, r18
    46a2:	13 06       	cpc	r1, r19
    46a4:	14 06       	cpc	r1, r20
    46a6:	55 1f       	adc	r21, r21
    46a8:	f2 cf       	rjmp	.-28     	; 0x468e <__fp_split3+0xe>
    46aa:	46 95       	lsr	r20
    46ac:	f1 df       	rcall	.-30     	; 0x4690 <__fp_splitA>
    46ae:	08 c0       	rjmp	.+16     	; 0x46c0 <__fp_splitA+0x30>
    46b0:	16 16       	cp	r1, r22
    46b2:	17 06       	cpc	r1, r23
    46b4:	18 06       	cpc	r1, r24
    46b6:	99 1f       	adc	r25, r25
    46b8:	f1 cf       	rjmp	.-30     	; 0x469c <__fp_splitA+0xc>
    46ba:	86 95       	lsr	r24
    46bc:	71 05       	cpc	r23, r1
    46be:	61 05       	cpc	r22, r1
    46c0:	08 94       	sec
    46c2:	08 95       	ret

000046c4 <__fp_zero>:
    46c4:	e8 94       	clt

000046c6 <__fp_szero>:
    46c6:	bb 27       	eor	r27, r27
    46c8:	66 27       	eor	r22, r22
    46ca:	77 27       	eor	r23, r23
    46cc:	cb 01       	movw	r24, r22
    46ce:	97 f9       	bld	r25, 7
    46d0:	08 95       	ret

000046d2 <__gesf2>:
    46d2:	8a df       	rcall	.-236    	; 0x45e8 <__fp_cmp>
    46d4:	08 f4       	brcc	.+2      	; 0x46d8 <__gesf2+0x6>
    46d6:	8f ef       	ldi	r24, 0xFF	; 255
    46d8:	08 95       	ret

000046da <__mulsf3>:
    46da:	0b d0       	rcall	.+22     	; 0x46f2 <__mulsf3x>
    46dc:	c0 cf       	rjmp	.-128    	; 0x465e <__fp_round>
    46de:	b1 df       	rcall	.-158    	; 0x4642 <__fp_pscA>
    46e0:	28 f0       	brcs	.+10     	; 0x46ec <__mulsf3+0x12>
    46e2:	b6 df       	rcall	.-148    	; 0x4650 <__fp_pscB>
    46e4:	18 f0       	brcs	.+6      	; 0x46ec <__mulsf3+0x12>
    46e6:	95 23       	and	r25, r21
    46e8:	09 f0       	breq	.+2      	; 0x46ec <__mulsf3+0x12>
    46ea:	a2 cf       	rjmp	.-188    	; 0x4630 <__fp_inf>
    46ec:	a7 cf       	rjmp	.-178    	; 0x463c <__fp_nan>
    46ee:	11 24       	eor	r1, r1
    46f0:	ea cf       	rjmp	.-44     	; 0x46c6 <__fp_szero>

000046f2 <__mulsf3x>:
    46f2:	c6 df       	rcall	.-116    	; 0x4680 <__fp_split3>
    46f4:	a0 f3       	brcs	.-24     	; 0x46de <__mulsf3+0x4>

000046f6 <__mulsf3_pse>:
    46f6:	95 9f       	mul	r25, r21
    46f8:	d1 f3       	breq	.-12     	; 0x46ee <__mulsf3+0x14>
    46fa:	95 0f       	add	r25, r21
    46fc:	50 e0       	ldi	r21, 0x00	; 0
    46fe:	55 1f       	adc	r21, r21
    4700:	62 9f       	mul	r22, r18
    4702:	f0 01       	movw	r30, r0
    4704:	72 9f       	mul	r23, r18
    4706:	bb 27       	eor	r27, r27
    4708:	f0 0d       	add	r31, r0
    470a:	b1 1d       	adc	r27, r1
    470c:	63 9f       	mul	r22, r19
    470e:	aa 27       	eor	r26, r26
    4710:	f0 0d       	add	r31, r0
    4712:	b1 1d       	adc	r27, r1
    4714:	aa 1f       	adc	r26, r26
    4716:	64 9f       	mul	r22, r20
    4718:	66 27       	eor	r22, r22
    471a:	b0 0d       	add	r27, r0
    471c:	a1 1d       	adc	r26, r1
    471e:	66 1f       	adc	r22, r22
    4720:	82 9f       	mul	r24, r18
    4722:	22 27       	eor	r18, r18
    4724:	b0 0d       	add	r27, r0
    4726:	a1 1d       	adc	r26, r1
    4728:	62 1f       	adc	r22, r18
    472a:	73 9f       	mul	r23, r19
    472c:	b0 0d       	add	r27, r0
    472e:	a1 1d       	adc	r26, r1
    4730:	62 1f       	adc	r22, r18
    4732:	83 9f       	mul	r24, r19
    4734:	a0 0d       	add	r26, r0
    4736:	61 1d       	adc	r22, r1
    4738:	22 1f       	adc	r18, r18
    473a:	74 9f       	mul	r23, r20
    473c:	33 27       	eor	r19, r19
    473e:	a0 0d       	add	r26, r0
    4740:	61 1d       	adc	r22, r1
    4742:	23 1f       	adc	r18, r19
    4744:	84 9f       	mul	r24, r20
    4746:	60 0d       	add	r22, r0
    4748:	21 1d       	adc	r18, r1
    474a:	82 2f       	mov	r24, r18
    474c:	76 2f       	mov	r23, r22
    474e:	6a 2f       	mov	r22, r26
    4750:	11 24       	eor	r1, r1
    4752:	9f 57       	subi	r25, 0x7F	; 127
    4754:	50 40       	sbci	r21, 0x00	; 0
    4756:	8a f0       	brmi	.+34     	; 0x477a <__mulsf3_pse+0x84>
    4758:	e1 f0       	breq	.+56     	; 0x4792 <__mulsf3_pse+0x9c>
    475a:	88 23       	and	r24, r24
    475c:	4a f0       	brmi	.+18     	; 0x4770 <__mulsf3_pse+0x7a>
    475e:	ee 0f       	add	r30, r30
    4760:	ff 1f       	adc	r31, r31
    4762:	bb 1f       	adc	r27, r27
    4764:	66 1f       	adc	r22, r22
    4766:	77 1f       	adc	r23, r23
    4768:	88 1f       	adc	r24, r24
    476a:	91 50       	subi	r25, 0x01	; 1
    476c:	50 40       	sbci	r21, 0x00	; 0
    476e:	a9 f7       	brne	.-22     	; 0x475a <__mulsf3_pse+0x64>
    4770:	9e 3f       	cpi	r25, 0xFE	; 254
    4772:	51 05       	cpc	r21, r1
    4774:	70 f0       	brcs	.+28     	; 0x4792 <__mulsf3_pse+0x9c>
    4776:	5c cf       	rjmp	.-328    	; 0x4630 <__fp_inf>
    4778:	a6 cf       	rjmp	.-180    	; 0x46c6 <__fp_szero>
    477a:	5f 3f       	cpi	r21, 0xFF	; 255
    477c:	ec f3       	brlt	.-6      	; 0x4778 <__mulsf3_pse+0x82>
    477e:	98 3e       	cpi	r25, 0xE8	; 232
    4780:	dc f3       	brlt	.-10     	; 0x4778 <__mulsf3_pse+0x82>
    4782:	86 95       	lsr	r24
    4784:	77 95       	ror	r23
    4786:	67 95       	ror	r22
    4788:	b7 95       	ror	r27
    478a:	f7 95       	ror	r31
    478c:	e7 95       	ror	r30
    478e:	9f 5f       	subi	r25, 0xFF	; 255
    4790:	c1 f7       	brne	.-16     	; 0x4782 <__mulsf3_pse+0x8c>
    4792:	fe 2b       	or	r31, r30
    4794:	88 0f       	add	r24, r24
    4796:	91 1d       	adc	r25, r1
    4798:	96 95       	lsr	r25
    479a:	87 95       	ror	r24
    479c:	97 f9       	bld	r25, 7
    479e:	08 95       	ret

000047a0 <round>:
    47a0:	77 df       	rcall	.-274    	; 0x4690 <__fp_splitA>
    47a2:	e0 f0       	brcs	.+56     	; 0x47dc <round+0x3c>
    47a4:	9e 37       	cpi	r25, 0x7E	; 126
    47a6:	d8 f0       	brcs	.+54     	; 0x47de <round+0x3e>
    47a8:	96 39       	cpi	r25, 0x96	; 150
    47aa:	b8 f4       	brcc	.+46     	; 0x47da <round+0x3a>
    47ac:	9e 38       	cpi	r25, 0x8E	; 142
    47ae:	48 f4       	brcc	.+18     	; 0x47c2 <round+0x22>
    47b0:	67 2f       	mov	r22, r23
    47b2:	78 2f       	mov	r23, r24
    47b4:	88 27       	eor	r24, r24
    47b6:	98 5f       	subi	r25, 0xF8	; 248
    47b8:	f9 cf       	rjmp	.-14     	; 0x47ac <round+0xc>
    47ba:	86 95       	lsr	r24
    47bc:	77 95       	ror	r23
    47be:	67 95       	ror	r22
    47c0:	93 95       	inc	r25
    47c2:	95 39       	cpi	r25, 0x95	; 149
    47c4:	d0 f3       	brcs	.-12     	; 0x47ba <round+0x1a>
    47c6:	b6 2f       	mov	r27, r22
    47c8:	b1 70       	andi	r27, 0x01	; 1
    47ca:	6b 0f       	add	r22, r27
    47cc:	71 1d       	adc	r23, r1
    47ce:	81 1d       	adc	r24, r1
    47d0:	20 f4       	brcc	.+8      	; 0x47da <round+0x3a>
    47d2:	87 95       	ror	r24
    47d4:	77 95       	ror	r23
    47d6:	67 95       	ror	r22
    47d8:	93 95       	inc	r25
    47da:	02 c0       	rjmp	.+4      	; 0x47e0 <__fp_mintl>
    47dc:	1c c0       	rjmp	.+56     	; 0x4816 <__fp_mpack>
    47de:	73 cf       	rjmp	.-282    	; 0x46c6 <__fp_szero>

000047e0 <__fp_mintl>:
    47e0:	88 23       	and	r24, r24
    47e2:	71 f4       	brne	.+28     	; 0x4800 <__fp_mintl+0x20>
    47e4:	77 23       	and	r23, r23
    47e6:	21 f0       	breq	.+8      	; 0x47f0 <__fp_mintl+0x10>
    47e8:	98 50       	subi	r25, 0x08	; 8
    47ea:	87 2b       	or	r24, r23
    47ec:	76 2f       	mov	r23, r22
    47ee:	07 c0       	rjmp	.+14     	; 0x47fe <__fp_mintl+0x1e>
    47f0:	66 23       	and	r22, r22
    47f2:	11 f4       	brne	.+4      	; 0x47f8 <__fp_mintl+0x18>
    47f4:	99 27       	eor	r25, r25
    47f6:	0d c0       	rjmp	.+26     	; 0x4812 <__fp_mintl+0x32>
    47f8:	90 51       	subi	r25, 0x10	; 16
    47fa:	86 2b       	or	r24, r22
    47fc:	70 e0       	ldi	r23, 0x00	; 0
    47fe:	60 e0       	ldi	r22, 0x00	; 0
    4800:	2a f0       	brmi	.+10     	; 0x480c <__fp_mintl+0x2c>
    4802:	9a 95       	dec	r25
    4804:	66 0f       	add	r22, r22
    4806:	77 1f       	adc	r23, r23
    4808:	88 1f       	adc	r24, r24
    480a:	da f7       	brpl	.-10     	; 0x4802 <__fp_mintl+0x22>
    480c:	88 0f       	add	r24, r24
    480e:	96 95       	lsr	r25
    4810:	87 95       	ror	r24
    4812:	97 f9       	bld	r25, 7
    4814:	08 95       	ret

00004816 <__fp_mpack>:
    4816:	9f 3f       	cpi	r25, 0xFF	; 255
    4818:	31 f0       	breq	.+12     	; 0x4826 <__fp_mpack_finite+0xc>

0000481a <__fp_mpack_finite>:
    481a:	91 50       	subi	r25, 0x01	; 1
    481c:	20 f4       	brcc	.+8      	; 0x4826 <__fp_mpack_finite+0xc>
    481e:	87 95       	ror	r24
    4820:	77 95       	ror	r23
    4822:	67 95       	ror	r22
    4824:	b7 95       	ror	r27
    4826:	88 0f       	add	r24, r24
    4828:	91 1d       	adc	r25, r1
    482a:	96 95       	lsr	r25
    482c:	87 95       	ror	r24
    482e:	97 f9       	bld	r25, 7
    4830:	08 95       	ret

00004832 <__tablejump2__>:
    4832:	ee 0f       	add	r30, r30
    4834:	ff 1f       	adc	r31, r31
    4836:	05 90       	lpm	r0, Z+
    4838:	f4 91       	lpm	r31, Z
    483a:	e0 2d       	mov	r30, r0
    483c:	09 94       	ijmp

0000483e <atof>:
    483e:	66 27       	eor	r22, r22
    4840:	77 27       	eor	r23, r23
    4842:	e6 c0       	rjmp	.+460    	; 0x4a10 <strtod>

00004844 <atoi>:
    4844:	fc 01       	movw	r30, r24
    4846:	88 27       	eor	r24, r24
    4848:	99 27       	eor	r25, r25
    484a:	e8 94       	clt
    484c:	21 91       	ld	r18, Z+
    484e:	20 32       	cpi	r18, 0x20	; 32
    4850:	e9 f3       	breq	.-6      	; 0x484c <atoi+0x8>
    4852:	29 30       	cpi	r18, 0x09	; 9
    4854:	10 f0       	brcs	.+4      	; 0x485a <atoi+0x16>
    4856:	2e 30       	cpi	r18, 0x0E	; 14
    4858:	c8 f3       	brcs	.-14     	; 0x484c <atoi+0x8>
    485a:	2b 32       	cpi	r18, 0x2B	; 43
    485c:	39 f0       	breq	.+14     	; 0x486c <atoi+0x28>
    485e:	2d 32       	cpi	r18, 0x2D	; 45
    4860:	31 f4       	brne	.+12     	; 0x486e <atoi+0x2a>
    4862:	68 94       	set
    4864:	03 c0       	rjmp	.+6      	; 0x486c <atoi+0x28>
    4866:	92 d0       	rcall	.+292    	; 0x498c <__mulhi_const_10>
    4868:	82 0f       	add	r24, r18
    486a:	91 1d       	adc	r25, r1
    486c:	21 91       	ld	r18, Z+
    486e:	20 53       	subi	r18, 0x30	; 48
    4870:	2a 30       	cpi	r18, 0x0A	; 10
    4872:	c8 f3       	brcs	.-14     	; 0x4866 <atoi+0x22>
    4874:	1e f4       	brtc	.+6      	; 0x487c <atoi+0x38>
    4876:	90 95       	com	r25
    4878:	81 95       	neg	r24
    487a:	9f 4f       	sbci	r25, 0xFF	; 255
    487c:	08 95       	ret

0000487e <atol>:
    487e:	1f 93       	push	r17
    4880:	fc 01       	movw	r30, r24
    4882:	99 27       	eor	r25, r25
    4884:	88 27       	eor	r24, r24
    4886:	bc 01       	movw	r22, r24
    4888:	e8 94       	clt
    488a:	11 91       	ld	r17, Z+
    488c:	10 32       	cpi	r17, 0x20	; 32
    488e:	e9 f3       	breq	.-6      	; 0x488a <atol+0xc>
    4890:	19 30       	cpi	r17, 0x09	; 9
    4892:	10 f0       	brcs	.+4      	; 0x4898 <atol+0x1a>
    4894:	1e 30       	cpi	r17, 0x0E	; 14
    4896:	c8 f3       	brcs	.-14     	; 0x488a <atol+0xc>
    4898:	1b 32       	cpi	r17, 0x2B	; 43
    489a:	49 f0       	breq	.+18     	; 0x48ae <atol+0x30>
    489c:	1d 32       	cpi	r17, 0x2D	; 45
    489e:	41 f4       	brne	.+16     	; 0x48b0 <atol+0x32>
    48a0:	68 94       	set
    48a2:	05 c0       	rjmp	.+10     	; 0x48ae <atol+0x30>
    48a4:	5e d0       	rcall	.+188    	; 0x4962 <__mulsi_const_10>
    48a6:	61 0f       	add	r22, r17
    48a8:	71 1d       	adc	r23, r1
    48aa:	81 1d       	adc	r24, r1
    48ac:	91 1d       	adc	r25, r1
    48ae:	11 91       	ld	r17, Z+
    48b0:	10 53       	subi	r17, 0x30	; 48
    48b2:	1a 30       	cpi	r17, 0x0A	; 10
    48b4:	b8 f3       	brcs	.-18     	; 0x48a4 <atol+0x26>
    48b6:	3e f4       	brtc	.+14     	; 0x48c6 <atol+0x48>
    48b8:	90 95       	com	r25
    48ba:	80 95       	com	r24
    48bc:	70 95       	com	r23
    48be:	61 95       	neg	r22
    48c0:	7f 4f       	sbci	r23, 0xFF	; 255
    48c2:	8f 4f       	sbci	r24, 0xFF	; 255
    48c4:	9f 4f       	sbci	r25, 0xFF	; 255
    48c6:	1f 91       	pop	r17
    48c8:	08 95       	ret

000048ca <strcat>:
    48ca:	fb 01       	movw	r30, r22
    48cc:	dc 01       	movw	r26, r24
    48ce:	0d 90       	ld	r0, X+
    48d0:	00 20       	and	r0, r0
    48d2:	e9 f7       	brne	.-6      	; 0x48ce <strcat+0x4>
    48d4:	11 97       	sbiw	r26, 0x01	; 1
    48d6:	01 90       	ld	r0, Z+
    48d8:	0d 92       	st	X+, r0
    48da:	00 20       	and	r0, r0
    48dc:	e1 f7       	brne	.-8      	; 0x48d6 <strcat+0xc>
    48de:	08 95       	ret

000048e0 <strchr>:
    48e0:	fc 01       	movw	r30, r24
    48e2:	81 91       	ld	r24, Z+
    48e4:	86 17       	cp	r24, r22
    48e6:	21 f0       	breq	.+8      	; 0x48f0 <strchr+0x10>
    48e8:	88 23       	and	r24, r24
    48ea:	d9 f7       	brne	.-10     	; 0x48e2 <strchr+0x2>
    48ec:	99 27       	eor	r25, r25
    48ee:	08 95       	ret
    48f0:	31 97       	sbiw	r30, 0x01	; 1
    48f2:	cf 01       	movw	r24, r30
    48f4:	08 95       	ret

000048f6 <strcmp>:
    48f6:	fb 01       	movw	r30, r22
    48f8:	dc 01       	movw	r26, r24
    48fa:	8d 91       	ld	r24, X+
    48fc:	01 90       	ld	r0, Z+
    48fe:	80 19       	sub	r24, r0
    4900:	01 10       	cpse	r0, r1
    4902:	d9 f3       	breq	.-10     	; 0x48fa <strcmp+0x4>
    4904:	99 0b       	sbc	r25, r25
    4906:	08 95       	ret

00004908 <strnlen>:
    4908:	fc 01       	movw	r30, r24
    490a:	61 50       	subi	r22, 0x01	; 1
    490c:	70 40       	sbci	r23, 0x00	; 0
    490e:	01 90       	ld	r0, Z+
    4910:	01 10       	cpse	r0, r1
    4912:	d8 f7       	brcc	.-10     	; 0x490a <strnlen+0x2>
    4914:	80 95       	com	r24
    4916:	90 95       	com	r25
    4918:	8e 0f       	add	r24, r30
    491a:	9f 1f       	adc	r25, r31
    491c:	08 95       	ret

0000491e <strupr>:
    491e:	dc 01       	movw	r26, r24
    4920:	6c 91       	ld	r22, X
    4922:	61 56       	subi	r22, 0x61	; 97
    4924:	6a 31       	cpi	r22, 0x1A	; 26
    4926:	08 f0       	brcs	.+2      	; 0x492a <strupr+0xc>
    4928:	60 5e       	subi	r22, 0xE0	; 224
    492a:	6f 5b       	subi	r22, 0xBF	; 191
    492c:	6d 93       	st	X+, r22
    492e:	c1 f7       	brne	.-16     	; 0x4920 <strupr+0x2>
    4930:	08 95       	ret

00004932 <__itoa_ncheck>:
    4932:	bb 27       	eor	r27, r27
    4934:	4a 30       	cpi	r20, 0x0A	; 10
    4936:	31 f4       	brne	.+12     	; 0x4944 <__itoa_ncheck+0x12>
    4938:	99 23       	and	r25, r25
    493a:	22 f4       	brpl	.+8      	; 0x4944 <__itoa_ncheck+0x12>
    493c:	bd e2       	ldi	r27, 0x2D	; 45
    493e:	90 95       	com	r25
    4940:	81 95       	neg	r24
    4942:	9f 4f       	sbci	r25, 0xFF	; 255
    4944:	4d c0       	rjmp	.+154    	; 0x49e0 <__utoa_common>

00004946 <__ltoa_ncheck>:
    4946:	bb 27       	eor	r27, r27
    4948:	2a 30       	cpi	r18, 0x0A	; 10
    494a:	51 f4       	brne	.+20     	; 0x4960 <__ltoa_ncheck+0x1a>
    494c:	99 23       	and	r25, r25
    494e:	42 f4       	brpl	.+16     	; 0x4960 <__ltoa_ncheck+0x1a>
    4950:	bd e2       	ldi	r27, 0x2D	; 45
    4952:	90 95       	com	r25
    4954:	80 95       	com	r24
    4956:	70 95       	com	r23
    4958:	61 95       	neg	r22
    495a:	7f 4f       	sbci	r23, 0xFF	; 255
    495c:	8f 4f       	sbci	r24, 0xFF	; 255
    495e:	9f 4f       	sbci	r25, 0xFF	; 255
    4960:	1e c0       	rjmp	.+60     	; 0x499e <__ultoa_common>

00004962 <__mulsi_const_10>:
    4962:	59 2f       	mov	r21, r25
    4964:	48 2f       	mov	r20, r24
    4966:	37 2f       	mov	r19, r23
    4968:	26 2f       	mov	r18, r22
    496a:	66 0f       	add	r22, r22
    496c:	77 1f       	adc	r23, r23
    496e:	88 1f       	adc	r24, r24
    4970:	99 1f       	adc	r25, r25
    4972:	66 0f       	add	r22, r22
    4974:	77 1f       	adc	r23, r23
    4976:	88 1f       	adc	r24, r24
    4978:	99 1f       	adc	r25, r25
    497a:	62 0f       	add	r22, r18
    497c:	73 1f       	adc	r23, r19
    497e:	84 1f       	adc	r24, r20
    4980:	95 1f       	adc	r25, r21
    4982:	66 0f       	add	r22, r22
    4984:	77 1f       	adc	r23, r23
    4986:	88 1f       	adc	r24, r24
    4988:	99 1f       	adc	r25, r25
    498a:	08 95       	ret

0000498c <__mulhi_const_10>:
    498c:	7a e0       	ldi	r23, 0x0A	; 10
    498e:	97 9f       	mul	r25, r23
    4990:	90 2d       	mov	r25, r0
    4992:	87 9f       	mul	r24, r23
    4994:	80 2d       	mov	r24, r0
    4996:	91 0d       	add	r25, r1
    4998:	11 24       	eor	r1, r1
    499a:	08 95       	ret

0000499c <__ultoa_ncheck>:
    499c:	bb 27       	eor	r27, r27

0000499e <__ultoa_common>:
    499e:	fa 01       	movw	r30, r20
    49a0:	a6 2f       	mov	r26, r22
    49a2:	62 17       	cp	r22, r18
    49a4:	71 05       	cpc	r23, r1
    49a6:	81 05       	cpc	r24, r1
    49a8:	91 05       	cpc	r25, r1
    49aa:	33 0b       	sbc	r19, r19
    49ac:	30 fb       	bst	r19, 0
    49ae:	66 f0       	brts	.+24     	; 0x49c8 <__ultoa_common+0x2a>
    49b0:	aa 27       	eor	r26, r26
    49b2:	66 0f       	add	r22, r22
    49b4:	77 1f       	adc	r23, r23
    49b6:	88 1f       	adc	r24, r24
    49b8:	99 1f       	adc	r25, r25
    49ba:	aa 1f       	adc	r26, r26
    49bc:	a2 17       	cp	r26, r18
    49be:	10 f0       	brcs	.+4      	; 0x49c4 <__ultoa_common+0x26>
    49c0:	a2 1b       	sub	r26, r18
    49c2:	63 95       	inc	r22
    49c4:	38 50       	subi	r19, 0x08	; 8
    49c6:	a9 f7       	brne	.-22     	; 0x49b2 <__ultoa_common+0x14>
    49c8:	a0 5d       	subi	r26, 0xD0	; 208
    49ca:	aa 33       	cpi	r26, 0x3A	; 58
    49cc:	08 f0       	brcs	.+2      	; 0x49d0 <__ultoa_common+0x32>
    49ce:	a9 5d       	subi	r26, 0xD9	; 217
    49d0:	a1 93       	st	Z+, r26
    49d2:	36 f7       	brtc	.-52     	; 0x49a0 <__ultoa_common+0x2>
    49d4:	b1 11       	cpse	r27, r1
    49d6:	b1 93       	st	Z+, r27
    49d8:	10 82       	st	Z, r1
    49da:	ca 01       	movw	r24, r20
    49dc:	8b c1       	rjmp	.+790    	; 0x4cf4 <strrev>

000049de <__utoa_ncheck>:
    49de:	bb 27       	eor	r27, r27

000049e0 <__utoa_common>:
    49e0:	fb 01       	movw	r30, r22
    49e2:	55 27       	eor	r21, r21
    49e4:	aa 27       	eor	r26, r26
    49e6:	88 0f       	add	r24, r24
    49e8:	99 1f       	adc	r25, r25
    49ea:	aa 1f       	adc	r26, r26
    49ec:	a4 17       	cp	r26, r20
    49ee:	10 f0       	brcs	.+4      	; 0x49f4 <__utoa_common+0x14>
    49f0:	a4 1b       	sub	r26, r20
    49f2:	83 95       	inc	r24
    49f4:	50 51       	subi	r21, 0x10	; 16
    49f6:	b9 f7       	brne	.-18     	; 0x49e6 <__utoa_common+0x6>
    49f8:	a0 5d       	subi	r26, 0xD0	; 208
    49fa:	aa 33       	cpi	r26, 0x3A	; 58
    49fc:	08 f0       	brcs	.+2      	; 0x4a00 <__utoa_common+0x20>
    49fe:	a9 5d       	subi	r26, 0xD9	; 217
    4a00:	a1 93       	st	Z+, r26
    4a02:	00 97       	sbiw	r24, 0x00	; 0
    4a04:	79 f7       	brne	.-34     	; 0x49e4 <__utoa_common+0x4>
    4a06:	b1 11       	cpse	r27, r1
    4a08:	b1 93       	st	Z+, r27
    4a0a:	11 92       	st	Z+, r1
    4a0c:	cb 01       	movw	r24, r22
    4a0e:	72 c1       	rjmp	.+740    	; 0x4cf4 <strrev>

00004a10 <strtod>:
    4a10:	a0 e0       	ldi	r26, 0x00	; 0
    4a12:	b0 e0       	ldi	r27, 0x00	; 0
    4a14:	ed e0       	ldi	r30, 0x0D	; 13
    4a16:	f5 e2       	ldi	r31, 0x25	; 37
    4a18:	be c1       	rjmp	.+892    	; 0x4d96 <__prologue_saves__+0x8>
    4a1a:	ec 01       	movw	r28, r24
    4a1c:	7b 01       	movw	r14, r22
    4a1e:	61 15       	cp	r22, r1
    4a20:	71 05       	cpc	r23, r1
    4a22:	19 f0       	breq	.+6      	; 0x4a2a <strtod+0x1a>
    4a24:	db 01       	movw	r26, r22
    4a26:	8d 93       	st	X+, r24
    4a28:	9c 93       	st	X, r25
    4a2a:	8e 01       	movw	r16, r28
    4a2c:	0f 5f       	subi	r16, 0xFF	; 255
    4a2e:	1f 4f       	sbci	r17, 0xFF	; 255
    4a30:	78 80       	ld	r7, Y
    4a32:	87 2d       	mov	r24, r7
    4a34:	90 e0       	ldi	r25, 0x00	; 0
    4a36:	3e d1       	rcall	.+636    	; 0x4cb4 <isspace>
    4a38:	89 2b       	or	r24, r25
    4a3a:	11 f0       	breq	.+4      	; 0x4a40 <strtod+0x30>
    4a3c:	e8 01       	movw	r28, r16
    4a3e:	f5 cf       	rjmp	.-22     	; 0x4a2a <strtod+0x1a>
    4a40:	bd e2       	ldi	r27, 0x2D	; 45
    4a42:	7b 12       	cpse	r7, r27
    4a44:	05 c0       	rjmp	.+10     	; 0x4a50 <strtod+0x40>
    4a46:	0f 5f       	subi	r16, 0xFF	; 255
    4a48:	1f 4f       	sbci	r17, 0xFF	; 255
    4a4a:	79 80       	ldd	r7, Y+1	; 0x01
    4a4c:	c1 e0       	ldi	r28, 0x01	; 1
    4a4e:	08 c0       	rjmp	.+16     	; 0x4a60 <strtod+0x50>
    4a50:	eb e2       	ldi	r30, 0x2B	; 43
    4a52:	7e 12       	cpse	r7, r30
    4a54:	04 c0       	rjmp	.+8      	; 0x4a5e <strtod+0x4e>
    4a56:	8e 01       	movw	r16, r28
    4a58:	0e 5f       	subi	r16, 0xFE	; 254
    4a5a:	1f 4f       	sbci	r17, 0xFF	; 255
    4a5c:	79 80       	ldd	r7, Y+1	; 0x01
    4a5e:	c0 e0       	ldi	r28, 0x00	; 0
    4a60:	68 01       	movw	r12, r16
    4a62:	f1 e0       	ldi	r31, 0x01	; 1
    4a64:	cf 1a       	sub	r12, r31
    4a66:	d1 08       	sbc	r13, r1
    4a68:	43 e0       	ldi	r20, 0x03	; 3
    4a6a:	50 e0       	ldi	r21, 0x00	; 0
    4a6c:	60 e8       	ldi	r22, 0x80	; 128
    4a6e:	70 e0       	ldi	r23, 0x00	; 0
    4a70:	c6 01       	movw	r24, r12
    4a72:	28 d1       	rcall	.+592    	; 0x4cc4 <strncasecmp_P>
    4a74:	89 2b       	or	r24, r25
    4a76:	e9 f4       	brne	.+58     	; 0x4ab2 <strtod+0xa2>
    4a78:	68 01       	movw	r12, r16
    4a7a:	22 e0       	ldi	r18, 0x02	; 2
    4a7c:	c2 0e       	add	r12, r18
    4a7e:	d1 1c       	adc	r13, r1
    4a80:	45 e0       	ldi	r20, 0x05	; 5
    4a82:	50 e0       	ldi	r21, 0x00	; 0
    4a84:	6b e7       	ldi	r22, 0x7B	; 123
    4a86:	70 e0       	ldi	r23, 0x00	; 0
    4a88:	c6 01       	movw	r24, r12
    4a8a:	1c d1       	rcall	.+568    	; 0x4cc4 <strncasecmp_P>
    4a8c:	89 2b       	or	r24, r25
    4a8e:	21 f4       	brne	.+8      	; 0x4a98 <strtod+0x88>
    4a90:	68 01       	movw	r12, r16
    4a92:	87 e0       	ldi	r24, 0x07	; 7
    4a94:	c8 0e       	add	r12, r24
    4a96:	d1 1c       	adc	r13, r1
    4a98:	e1 14       	cp	r14, r1
    4a9a:	f1 04       	cpc	r15, r1
    4a9c:	19 f0       	breq	.+6      	; 0x4aa4 <strtod+0x94>
    4a9e:	d7 01       	movw	r26, r14
    4aa0:	cd 92       	st	X+, r12
    4aa2:	dc 92       	st	X, r13
    4aa4:	c1 11       	cpse	r28, r1
    4aa6:	f9 c0       	rjmp	.+498    	; 0x4c9a <strtod+0x28a>
    4aa8:	60 e0       	ldi	r22, 0x00	; 0
    4aaa:	70 e0       	ldi	r23, 0x00	; 0
    4aac:	80 e8       	ldi	r24, 0x80	; 128
    4aae:	9f e7       	ldi	r25, 0x7F	; 127
    4ab0:	fd c0       	rjmp	.+506    	; 0x4cac <strtod+0x29c>
    4ab2:	43 e0       	ldi	r20, 0x03	; 3
    4ab4:	50 e0       	ldi	r21, 0x00	; 0
    4ab6:	68 e7       	ldi	r22, 0x78	; 120
    4ab8:	70 e0       	ldi	r23, 0x00	; 0
    4aba:	c6 01       	movw	r24, r12
    4abc:	03 d1       	rcall	.+518    	; 0x4cc4 <strncasecmp_P>
    4abe:	89 2b       	or	r24, r25
    4ac0:	51 f4       	brne	.+20     	; 0x4ad6 <strtod+0xc6>
    4ac2:	e1 14       	cp	r14, r1
    4ac4:	f1 04       	cpc	r15, r1
    4ac6:	09 f4       	brne	.+2      	; 0x4aca <strtod+0xba>
    4ac8:	ed c0       	rjmp	.+474    	; 0x4ca4 <strtod+0x294>
    4aca:	0e 5f       	subi	r16, 0xFE	; 254
    4acc:	1f 4f       	sbci	r17, 0xFF	; 255
    4ace:	f7 01       	movw	r30, r14
    4ad0:	11 83       	std	Z+1, r17	; 0x01
    4ad2:	00 83       	st	Z, r16
    4ad4:	e7 c0       	rjmp	.+462    	; 0x4ca4 <strtod+0x294>
    4ad6:	68 01       	movw	r12, r16
    4ad8:	60 e0       	ldi	r22, 0x00	; 0
    4ada:	70 e0       	ldi	r23, 0x00	; 0
    4adc:	cb 01       	movw	r24, r22
    4ade:	00 e0       	ldi	r16, 0x00	; 0
    4ae0:	10 e0       	ldi	r17, 0x00	; 0
    4ae2:	f6 01       	movw	r30, r12
    4ae4:	d0 ed       	ldi	r29, 0xD0	; 208
    4ae6:	d7 0d       	add	r29, r7
    4ae8:	da 30       	cpi	r29, 0x0A	; 10
    4aea:	50 f5       	brcc	.+84     	; 0x4b40 <strtod+0x130>
    4aec:	2c 2f       	mov	r18, r28
    4aee:	22 60       	ori	r18, 0x02	; 2
    4af0:	62 2e       	mov	r6, r18
    4af2:	2c 2f       	mov	r18, r28
    4af4:	28 70       	andi	r18, 0x08	; 8
    4af6:	c2 ff       	sbrs	r28, 2
    4af8:	05 c0       	rjmp	.+10     	; 0x4b04 <strtod+0xf4>
    4afa:	21 11       	cpse	r18, r1
    4afc:	27 c0       	rjmp	.+78     	; 0x4b4c <strtod+0x13c>
    4afe:	0f 5f       	subi	r16, 0xFF	; 255
    4b00:	1f 4f       	sbci	r17, 0xFF	; 255
    4b02:	24 c0       	rjmp	.+72     	; 0x4b4c <strtod+0x13c>
    4b04:	22 23       	and	r18, r18
    4b06:	11 f0       	breq	.+4      	; 0x4b0c <strtod+0xfc>
    4b08:	01 50       	subi	r16, 0x01	; 1
    4b0a:	11 09       	sbc	r17, r1
    4b0c:	a5 e0       	ldi	r26, 0x05	; 5
    4b0e:	b0 e0       	ldi	r27, 0x00	; 0
    4b10:	9b 01       	movw	r18, r22
    4b12:	ac 01       	movw	r20, r24
    4b14:	32 d1       	rcall	.+612    	; 0x4d7a <__muluhisi3>
    4b16:	4b 01       	movw	r8, r22
    4b18:	5c 01       	movw	r10, r24
    4b1a:	88 0c       	add	r8, r8
    4b1c:	99 1c       	adc	r9, r9
    4b1e:	aa 1c       	adc	r10, r10
    4b20:	bb 1c       	adc	r11, r11
    4b22:	c5 01       	movw	r24, r10
    4b24:	b4 01       	movw	r22, r8
    4b26:	6d 0f       	add	r22, r29
    4b28:	71 1d       	adc	r23, r1
    4b2a:	81 1d       	adc	r24, r1
    4b2c:	91 1d       	adc	r25, r1
    4b2e:	68 39       	cpi	r22, 0x98	; 152
    4b30:	a9 e9       	ldi	r26, 0x99	; 153
    4b32:	7a 07       	cpc	r23, r26
    4b34:	8a 07       	cpc	r24, r26
    4b36:	a9 e1       	ldi	r26, 0x19	; 25
    4b38:	9a 07       	cpc	r25, r26
    4b3a:	40 f0       	brcs	.+16     	; 0x4b4c <strtod+0x13c>
    4b3c:	c6 60       	ori	r28, 0x06	; 6
    4b3e:	05 c0       	rjmp	.+10     	; 0x4b4a <strtod+0x13a>
    4b40:	de 3f       	cpi	r29, 0xFE	; 254
    4b42:	51 f4       	brne	.+20     	; 0x4b58 <strtod+0x148>
    4b44:	c3 fd       	sbrc	r28, 3
    4b46:	44 c0       	rjmp	.+136    	; 0x4bd0 <strtod+0x1c0>
    4b48:	c8 60       	ori	r28, 0x08	; 8
    4b4a:	6c 2e       	mov	r6, r28
    4b4c:	bf ef       	ldi	r27, 0xFF	; 255
    4b4e:	cb 1a       	sub	r12, r27
    4b50:	db 0a       	sbc	r13, r27
    4b52:	70 80       	ld	r7, Z
    4b54:	c6 2d       	mov	r28, r6
    4b56:	c5 cf       	rjmp	.-118    	; 0x4ae2 <strtod+0xd2>
    4b58:	2d 2f       	mov	r18, r29
    4b5a:	2f 7d       	andi	r18, 0xDF	; 223
    4b5c:	25 31       	cpi	r18, 0x15	; 21
    4b5e:	c1 f5       	brne	.+112    	; 0x4bd0 <strtod+0x1c0>
    4b60:	40 81       	ld	r20, Z
    4b62:	4d 32       	cpi	r20, 0x2D	; 45
    4b64:	11 f4       	brne	.+4      	; 0x4b6a <strtod+0x15a>
    4b66:	c0 61       	ori	r28, 0x10	; 16
    4b68:	06 c0       	rjmp	.+12     	; 0x4b76 <strtod+0x166>
    4b6a:	4b 32       	cpi	r20, 0x2B	; 43
    4b6c:	21 f0       	breq	.+8      	; 0x4b76 <strtod+0x166>
    4b6e:	31 96       	adiw	r30, 0x01	; 1
    4b70:	21 e0       	ldi	r18, 0x01	; 1
    4b72:	30 e0       	ldi	r19, 0x00	; 0
    4b74:	06 c0       	rjmp	.+12     	; 0x4b82 <strtod+0x172>
    4b76:	32 96       	adiw	r30, 0x02	; 2
    4b78:	d6 01       	movw	r26, r12
    4b7a:	11 96       	adiw	r26, 0x01	; 1
    4b7c:	4c 91       	ld	r20, X
    4b7e:	22 e0       	ldi	r18, 0x02	; 2
    4b80:	30 e0       	ldi	r19, 0x00	; 0
    4b82:	a0 ed       	ldi	r26, 0xD0	; 208
    4b84:	a4 0f       	add	r26, r20
    4b86:	aa 30       	cpi	r26, 0x0A	; 10
    4b88:	18 f0       	brcs	.+6      	; 0x4b90 <strtod+0x180>
    4b8a:	e2 1b       	sub	r30, r18
    4b8c:	f3 0b       	sbc	r31, r19
    4b8e:	20 c0       	rjmp	.+64     	; 0x4bd0 <strtod+0x1c0>
    4b90:	40 e0       	ldi	r20, 0x00	; 0
    4b92:	50 e0       	ldi	r21, 0x00	; 0
    4b94:	40 38       	cpi	r20, 0x80	; 128
    4b96:	bc e0       	ldi	r27, 0x0C	; 12
    4b98:	5b 07       	cpc	r21, r27
    4b9a:	5c f4       	brge	.+22     	; 0x4bb2 <strtod+0x1a2>
    4b9c:	9a 01       	movw	r18, r20
    4b9e:	22 0f       	add	r18, r18
    4ba0:	33 1f       	adc	r19, r19
    4ba2:	22 0f       	add	r18, r18
    4ba4:	33 1f       	adc	r19, r19
    4ba6:	42 0f       	add	r20, r18
    4ba8:	53 1f       	adc	r21, r19
    4baa:	44 0f       	add	r20, r20
    4bac:	55 1f       	adc	r21, r21
    4bae:	4a 0f       	add	r20, r26
    4bb0:	51 1d       	adc	r21, r1
    4bb2:	31 96       	adiw	r30, 0x01	; 1
    4bb4:	df 01       	movw	r26, r30
    4bb6:	11 97       	sbiw	r26, 0x01	; 1
    4bb8:	2c 91       	ld	r18, X
    4bba:	a0 ed       	ldi	r26, 0xD0	; 208
    4bbc:	a2 0f       	add	r26, r18
    4bbe:	aa 30       	cpi	r26, 0x0A	; 10
    4bc0:	48 f3       	brcs	.-46     	; 0x4b94 <strtod+0x184>
    4bc2:	c4 ff       	sbrs	r28, 4
    4bc4:	03 c0       	rjmp	.+6      	; 0x4bcc <strtod+0x1bc>
    4bc6:	51 95       	neg	r21
    4bc8:	41 95       	neg	r20
    4bca:	51 09       	sbc	r21, r1
    4bcc:	04 0f       	add	r16, r20
    4bce:	15 1f       	adc	r17, r21
    4bd0:	c1 ff       	sbrs	r28, 1
    4bd2:	07 c0       	rjmp	.+14     	; 0x4be2 <strtod+0x1d2>
    4bd4:	e1 14       	cp	r14, r1
    4bd6:	f1 04       	cpc	r15, r1
    4bd8:	21 f0       	breq	.+8      	; 0x4be2 <strtod+0x1d2>
    4bda:	31 97       	sbiw	r30, 0x01	; 1
    4bdc:	d7 01       	movw	r26, r14
    4bde:	ed 93       	st	X+, r30
    4be0:	fc 93       	st	X, r31
    4be2:	c5 dc       	rcall	.-1654   	; 0x456e <__floatunsisf>
    4be4:	c3 70       	andi	r28, 0x03	; 3
    4be6:	c3 30       	cpi	r28, 0x03	; 3
    4be8:	19 f0       	breq	.+6      	; 0x4bf0 <strtod+0x1e0>
    4bea:	6b 01       	movw	r12, r22
    4bec:	7c 01       	movw	r14, r24
    4bee:	06 c0       	rjmp	.+12     	; 0x4bfc <strtod+0x1ec>
    4bf0:	6b 01       	movw	r12, r22
    4bf2:	7c 01       	movw	r14, r24
    4bf4:	f7 fa       	bst	r15, 7
    4bf6:	f0 94       	com	r15
    4bf8:	f7 f8       	bld	r15, 7
    4bfa:	f0 94       	com	r15
    4bfc:	20 e0       	ldi	r18, 0x00	; 0
    4bfe:	30 e0       	ldi	r19, 0x00	; 0
    4c00:	a9 01       	movw	r20, r18
    4c02:	c7 01       	movw	r24, r14
    4c04:	b6 01       	movw	r22, r12
    4c06:	7e dc       	rcall	.-1796   	; 0x4504 <__cmpsf2>
    4c08:	88 23       	and	r24, r24
    4c0a:	09 f4       	brne	.+2      	; 0x4c0e <strtod+0x1fe>
    4c0c:	43 c0       	rjmp	.+134    	; 0x4c94 <strtod+0x284>
    4c0e:	17 ff       	sbrs	r17, 7
    4c10:	06 c0       	rjmp	.+12     	; 0x4c1e <strtod+0x20e>
    4c12:	11 95       	neg	r17
    4c14:	01 95       	neg	r16
    4c16:	11 09       	sbc	r17, r1
    4c18:	c7 e9       	ldi	r28, 0x97	; 151
    4c1a:	d0 e0       	ldi	r29, 0x00	; 0
    4c1c:	02 c0       	rjmp	.+4      	; 0x4c22 <strtod+0x212>
    4c1e:	cf ea       	ldi	r28, 0xAF	; 175
    4c20:	d0 e0       	ldi	r29, 0x00	; 0
    4c22:	5e 01       	movw	r10, r28
    4c24:	b8 e1       	ldi	r27, 0x18	; 24
    4c26:	ab 1a       	sub	r10, r27
    4c28:	b1 08       	sbc	r11, r1
    4c2a:	46 01       	movw	r8, r12
    4c2c:	be 2d       	mov	r27, r14
    4c2e:	af 2d       	mov	r26, r15
    4c30:	90 e2       	ldi	r25, 0x20	; 32
    4c32:	e9 2e       	mov	r14, r25
    4c34:	f1 2c       	mov	r15, r1
    4c36:	0e 15       	cp	r16, r14
    4c38:	1f 05       	cpc	r17, r15
    4c3a:	7c f0       	brlt	.+30     	; 0x4c5a <strtod+0x24a>
    4c3c:	fe 01       	movw	r30, r28
    4c3e:	25 91       	lpm	r18, Z+
    4c40:	35 91       	lpm	r19, Z+
    4c42:	45 91       	lpm	r20, Z+
    4c44:	54 91       	lpm	r21, Z
    4c46:	b4 01       	movw	r22, r8
    4c48:	8b 2f       	mov	r24, r27
    4c4a:	9a 2f       	mov	r25, r26
    4c4c:	46 dd       	rcall	.-1396   	; 0x46da <__mulsf3>
    4c4e:	4b 01       	movw	r8, r22
    4c50:	b8 2f       	mov	r27, r24
    4c52:	a9 2f       	mov	r26, r25
    4c54:	0e 19       	sub	r16, r14
    4c56:	1f 09       	sbc	r17, r15
    4c58:	ee cf       	rjmp	.-36     	; 0x4c36 <strtod+0x226>
    4c5a:	24 97       	sbiw	r28, 0x04	; 4
    4c5c:	f5 94       	asr	r15
    4c5e:	e7 94       	ror	r14
    4c60:	ca 15       	cp	r28, r10
    4c62:	db 05       	cpc	r29, r11
    4c64:	41 f7       	brne	.-48     	; 0x4c36 <strtod+0x226>
    4c66:	64 01       	movw	r12, r8
    4c68:	eb 2e       	mov	r14, r27
    4c6a:	fa 2e       	mov	r15, r26
    4c6c:	8e 2d       	mov	r24, r14
    4c6e:	88 0f       	add	r24, r24
    4c70:	8f 2d       	mov	r24, r15
    4c72:	88 1f       	adc	r24, r24
    4c74:	8f 3f       	cpi	r24, 0xFF	; 255
    4c76:	41 f0       	breq	.+16     	; 0x4c88 <strtod+0x278>
    4c78:	20 e0       	ldi	r18, 0x00	; 0
    4c7a:	30 e0       	ldi	r19, 0x00	; 0
    4c7c:	a9 01       	movw	r20, r18
    4c7e:	c7 01       	movw	r24, r14
    4c80:	b6 01       	movw	r22, r12
    4c82:	40 dc       	rcall	.-1920   	; 0x4504 <__cmpsf2>
    4c84:	81 11       	cpse	r24, r1
    4c86:	06 c0       	rjmp	.+12     	; 0x4c94 <strtod+0x284>
    4c88:	82 e2       	ldi	r24, 0x22	; 34
    4c8a:	90 e0       	ldi	r25, 0x00	; 0
    4c8c:	90 93 5b 05 	sts	0x055B, r25
    4c90:	80 93 5a 05 	sts	0x055A, r24
    4c94:	c7 01       	movw	r24, r14
    4c96:	b6 01       	movw	r22, r12
    4c98:	09 c0       	rjmp	.+18     	; 0x4cac <strtod+0x29c>
    4c9a:	60 e0       	ldi	r22, 0x00	; 0
    4c9c:	70 e0       	ldi	r23, 0x00	; 0
    4c9e:	80 e8       	ldi	r24, 0x80	; 128
    4ca0:	9f ef       	ldi	r25, 0xFF	; 255
    4ca2:	04 c0       	rjmp	.+8      	; 0x4cac <strtod+0x29c>
    4ca4:	60 e0       	ldi	r22, 0x00	; 0
    4ca6:	70 e0       	ldi	r23, 0x00	; 0
    4ca8:	80 ec       	ldi	r24, 0xC0	; 192
    4caa:	9f e7       	ldi	r25, 0x7F	; 127
    4cac:	cd b7       	in	r28, 0x3d	; 61
    4cae:	de b7       	in	r29, 0x3e	; 62
    4cb0:	ee e0       	ldi	r30, 0x0E	; 14
    4cb2:	8d c0       	rjmp	.+282    	; 0x4dce <__epilogue_restores__+0x8>

00004cb4 <isspace>:
    4cb4:	91 11       	cpse	r25, r1
    4cb6:	2e c0       	rjmp	.+92     	; 0x4d14 <__ctype_isfalse>
    4cb8:	80 32       	cpi	r24, 0x20	; 32
    4cba:	19 f0       	breq	.+6      	; 0x4cc2 <isspace+0xe>
    4cbc:	89 50       	subi	r24, 0x09	; 9
    4cbe:	85 50       	subi	r24, 0x05	; 5
    4cc0:	d0 f7       	brcc	.-12     	; 0x4cb6 <isspace+0x2>
    4cc2:	08 95       	ret

00004cc4 <strncasecmp_P>:
    4cc4:	fb 01       	movw	r30, r22
    4cc6:	dc 01       	movw	r26, r24
    4cc8:	41 50       	subi	r20, 0x01	; 1
    4cca:	50 40       	sbci	r21, 0x00	; 0
    4ccc:	88 f0       	brcs	.+34     	; 0x4cf0 <strncasecmp_P+0x2c>
    4cce:	8d 91       	ld	r24, X+
    4cd0:	81 34       	cpi	r24, 0x41	; 65
    4cd2:	1c f0       	brlt	.+6      	; 0x4cda <strncasecmp_P+0x16>
    4cd4:	8b 35       	cpi	r24, 0x5B	; 91
    4cd6:	0c f4       	brge	.+2      	; 0x4cda <strncasecmp_P+0x16>
    4cd8:	80 5e       	subi	r24, 0xE0	; 224
    4cda:	65 91       	lpm	r22, Z+
    4cdc:	61 34       	cpi	r22, 0x41	; 65
    4cde:	1c f0       	brlt	.+6      	; 0x4ce6 <strncasecmp_P+0x22>
    4ce0:	6b 35       	cpi	r22, 0x5B	; 91
    4ce2:	0c f4       	brge	.+2      	; 0x4ce6 <strncasecmp_P+0x22>
    4ce4:	60 5e       	subi	r22, 0xE0	; 224
    4ce6:	86 1b       	sub	r24, r22
    4ce8:	61 11       	cpse	r22, r1
    4cea:	71 f3       	breq	.-36     	; 0x4cc8 <strncasecmp_P+0x4>
    4cec:	99 0b       	sbc	r25, r25
    4cee:	08 95       	ret
    4cf0:	88 1b       	sub	r24, r24
    4cf2:	fc cf       	rjmp	.-8      	; 0x4cec <strncasecmp_P+0x28>

00004cf4 <strrev>:
    4cf4:	dc 01       	movw	r26, r24
    4cf6:	fc 01       	movw	r30, r24
    4cf8:	67 2f       	mov	r22, r23
    4cfa:	71 91       	ld	r23, Z+
    4cfc:	77 23       	and	r23, r23
    4cfe:	e1 f7       	brne	.-8      	; 0x4cf8 <strrev+0x4>
    4d00:	32 97       	sbiw	r30, 0x02	; 2
    4d02:	04 c0       	rjmp	.+8      	; 0x4d0c <strrev+0x18>
    4d04:	7c 91       	ld	r23, X
    4d06:	6d 93       	st	X+, r22
    4d08:	70 83       	st	Z, r23
    4d0a:	62 91       	ld	r22, -Z
    4d0c:	ae 17       	cp	r26, r30
    4d0e:	bf 07       	cpc	r27, r31
    4d10:	c8 f3       	brcs	.-14     	; 0x4d04 <strrev+0x10>
    4d12:	08 95       	ret

00004d14 <__ctype_isfalse>:
    4d14:	99 27       	eor	r25, r25
    4d16:	88 27       	eor	r24, r24

00004d18 <__ctype_istrue>:
    4d18:	08 95       	ret

00004d1a <eeprom_read_dword>:
    4d1a:	a6 e1       	ldi	r26, 0x16	; 22
    4d1c:	b0 e0       	ldi	r27, 0x00	; 0
    4d1e:	44 e0       	ldi	r20, 0x04	; 4
    4d20:	50 e0       	ldi	r21, 0x00	; 0
    4d22:	0f c0       	rjmp	.+30     	; 0x4d42 <eeprom_read_blraw>

00004d24 <eeprom_read_word>:
    4d24:	a8 e1       	ldi	r26, 0x18	; 24
    4d26:	b0 e0       	ldi	r27, 0x00	; 0
    4d28:	42 e0       	ldi	r20, 0x02	; 2
    4d2a:	50 e0       	ldi	r21, 0x00	; 0
    4d2c:	0a c0       	rjmp	.+20     	; 0x4d42 <eeprom_read_blraw>

00004d2e <eeprom_write_dword>:
    4d2e:	24 2f       	mov	r18, r20
    4d30:	17 d0       	rcall	.+46     	; 0x4d60 <eeprom_write_r18>
    4d32:	25 2f       	mov	r18, r21
    4d34:	15 d0       	rcall	.+42     	; 0x4d60 <eeprom_write_r18>
    4d36:	00 c0       	rjmp	.+0      	; 0x4d38 <eeprom_write_word>

00004d38 <eeprom_write_word>:
    4d38:	12 d0       	rcall	.+36     	; 0x4d5e <eeprom_write_byte>
    4d3a:	27 2f       	mov	r18, r23
    4d3c:	11 c0       	rjmp	.+34     	; 0x4d60 <eeprom_write_r18>

00004d3e <eeprom_read_block>:
    4d3e:	dc 01       	movw	r26, r24
    4d40:	cb 01       	movw	r24, r22

00004d42 <eeprom_read_blraw>:
    4d42:	fc 01       	movw	r30, r24
    4d44:	f9 99       	sbic	0x1f, 1	; 31
    4d46:	fe cf       	rjmp	.-4      	; 0x4d44 <eeprom_read_blraw+0x2>
    4d48:	06 c0       	rjmp	.+12     	; 0x4d56 <eeprom_read_blraw+0x14>
    4d4a:	f2 bd       	out	0x22, r31	; 34
    4d4c:	e1 bd       	out	0x21, r30	; 33
    4d4e:	f8 9a       	sbi	0x1f, 0	; 31
    4d50:	31 96       	adiw	r30, 0x01	; 1
    4d52:	00 b4       	in	r0, 0x20	; 32
    4d54:	0d 92       	st	X+, r0
    4d56:	41 50       	subi	r20, 0x01	; 1
    4d58:	50 40       	sbci	r21, 0x00	; 0
    4d5a:	b8 f7       	brcc	.-18     	; 0x4d4a <eeprom_read_blraw+0x8>
    4d5c:	08 95       	ret

00004d5e <eeprom_write_byte>:
    4d5e:	26 2f       	mov	r18, r22

00004d60 <eeprom_write_r18>:
    4d60:	f9 99       	sbic	0x1f, 1	; 31
    4d62:	fe cf       	rjmp	.-4      	; 0x4d60 <eeprom_write_r18>
    4d64:	1f ba       	out	0x1f, r1	; 31
    4d66:	92 bd       	out	0x22, r25	; 34
    4d68:	81 bd       	out	0x21, r24	; 33
    4d6a:	20 bd       	out	0x20, r18	; 32
    4d6c:	0f b6       	in	r0, 0x3f	; 63
    4d6e:	f8 94       	cli
    4d70:	fa 9a       	sbi	0x1f, 2	; 31
    4d72:	f9 9a       	sbi	0x1f, 1	; 31
    4d74:	0f be       	out	0x3f, r0	; 63
    4d76:	01 96       	adiw	r24, 0x01	; 1
    4d78:	08 95       	ret

00004d7a <__muluhisi3>:
    4d7a:	40 d0       	rcall	.+128    	; 0x4dfc <__umulhisi3>
    4d7c:	a5 9f       	mul	r26, r21
    4d7e:	90 0d       	add	r25, r0
    4d80:	b4 9f       	mul	r27, r20
    4d82:	90 0d       	add	r25, r0
    4d84:	a4 9f       	mul	r26, r20
    4d86:	80 0d       	add	r24, r0
    4d88:	91 1d       	adc	r25, r1
    4d8a:	11 24       	eor	r1, r1
    4d8c:	08 95       	ret

00004d8e <__prologue_saves__>:
    4d8e:	2f 92       	push	r2
    4d90:	3f 92       	push	r3
    4d92:	4f 92       	push	r4
    4d94:	5f 92       	push	r5
    4d96:	6f 92       	push	r6
    4d98:	7f 92       	push	r7
    4d9a:	8f 92       	push	r8
    4d9c:	9f 92       	push	r9
    4d9e:	af 92       	push	r10
    4da0:	bf 92       	push	r11
    4da2:	cf 92       	push	r12
    4da4:	df 92       	push	r13
    4da6:	ef 92       	push	r14
    4da8:	ff 92       	push	r15
    4daa:	0f 93       	push	r16
    4dac:	1f 93       	push	r17
    4dae:	cf 93       	push	r28
    4db0:	df 93       	push	r29
    4db2:	cd b7       	in	r28, 0x3d	; 61
    4db4:	de b7       	in	r29, 0x3e	; 62
    4db6:	ca 1b       	sub	r28, r26
    4db8:	db 0b       	sbc	r29, r27
    4dba:	0f b6       	in	r0, 0x3f	; 63
    4dbc:	f8 94       	cli
    4dbe:	de bf       	out	0x3e, r29	; 62
    4dc0:	0f be       	out	0x3f, r0	; 63
    4dc2:	cd bf       	out	0x3d, r28	; 61
    4dc4:	09 94       	ijmp

00004dc6 <__epilogue_restores__>:
    4dc6:	2a 88       	ldd	r2, Y+18	; 0x12
    4dc8:	39 88       	ldd	r3, Y+17	; 0x11
    4dca:	48 88       	ldd	r4, Y+16	; 0x10
    4dcc:	5f 84       	ldd	r5, Y+15	; 0x0f
    4dce:	6e 84       	ldd	r6, Y+14	; 0x0e
    4dd0:	7d 84       	ldd	r7, Y+13	; 0x0d
    4dd2:	8c 84       	ldd	r8, Y+12	; 0x0c
    4dd4:	9b 84       	ldd	r9, Y+11	; 0x0b
    4dd6:	aa 84       	ldd	r10, Y+10	; 0x0a
    4dd8:	b9 84       	ldd	r11, Y+9	; 0x09
    4dda:	c8 84       	ldd	r12, Y+8	; 0x08
    4ddc:	df 80       	ldd	r13, Y+7	; 0x07
    4dde:	ee 80       	ldd	r14, Y+6	; 0x06
    4de0:	fd 80       	ldd	r15, Y+5	; 0x05
    4de2:	0c 81       	ldd	r16, Y+4	; 0x04
    4de4:	1b 81       	ldd	r17, Y+3	; 0x03
    4de6:	aa 81       	ldd	r26, Y+2	; 0x02
    4de8:	b9 81       	ldd	r27, Y+1	; 0x01
    4dea:	ce 0f       	add	r28, r30
    4dec:	d1 1d       	adc	r29, r1
    4dee:	0f b6       	in	r0, 0x3f	; 63
    4df0:	f8 94       	cli
    4df2:	de bf       	out	0x3e, r29	; 62
    4df4:	0f be       	out	0x3f, r0	; 63
    4df6:	cd bf       	out	0x3d, r28	; 61
    4df8:	ed 01       	movw	r28, r26
    4dfa:	08 95       	ret

00004dfc <__umulhisi3>:
    4dfc:	a2 9f       	mul	r26, r18
    4dfe:	b0 01       	movw	r22, r0
    4e00:	b3 9f       	mul	r27, r19
    4e02:	c0 01       	movw	r24, r0
    4e04:	a3 9f       	mul	r26, r19
    4e06:	70 0d       	add	r23, r0
    4e08:	81 1d       	adc	r24, r1
    4e0a:	11 24       	eor	r1, r1
    4e0c:	91 1d       	adc	r25, r1
    4e0e:	b2 9f       	mul	r27, r18
    4e10:	70 0d       	add	r23, r0
    4e12:	81 1d       	adc	r24, r1
    4e14:	11 24       	eor	r1, r1
    4e16:	91 1d       	adc	r25, r1
    4e18:	08 95       	ret

00004e1a <_exit>:
    4e1a:	f8 94       	cli

00004e1c <__stop_program>:
    4e1c:	ff cf       	rjmp	.-2      	; 0x4e1c <__stop_program>

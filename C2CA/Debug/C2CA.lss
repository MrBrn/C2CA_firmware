
C2CA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  000047b2  00004846  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000047b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003c1  00800144  00800144  0000488a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000488a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000048e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00004928  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004c7e  00000000  00000000  00004998  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000428  00000000  00000000  00009616  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002899  00000000  00000000  00009a3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000027c  00000000  00000000  0000c2d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000105eb  00000000  00000000  0000c554  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004d75  00000000  00000000  0001cb3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000788  00000000  00000000  000218b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00000624  00000000  00000000  0002203c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	88 c1       	rjmp	.+784    	; 0x312 <__ctors_end>
       2:	00 00       	nop
       4:	a3 c1       	rjmp	.+838    	; 0x34c <__bad_interrupt>
       6:	00 00       	nop
       8:	a1 c1       	rjmp	.+834    	; 0x34c <__bad_interrupt>
       a:	00 00       	nop
       c:	9f c1       	rjmp	.+830    	; 0x34c <__bad_interrupt>
       e:	00 00       	nop
      10:	9d c1       	rjmp	.+826    	; 0x34c <__bad_interrupt>
      12:	00 00       	nop
      14:	9b c1       	rjmp	.+822    	; 0x34c <__bad_interrupt>
      16:	00 00       	nop
      18:	99 c1       	rjmp	.+818    	; 0x34c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8b c5       	rjmp	.+2838   	; 0xb34 <__vector_7>
      1e:	00 00       	nop
      20:	95 c1       	rjmp	.+810    	; 0x34c <__bad_interrupt>
      22:	00 00       	nop
      24:	93 c1       	rjmp	.+806    	; 0x34c <__bad_interrupt>
      26:	00 00       	nop
      28:	91 c1       	rjmp	.+802    	; 0x34c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8f c1       	rjmp	.+798    	; 0x34c <__bad_interrupt>
      2e:	00 00       	nop
      30:	8d c1       	rjmp	.+794    	; 0x34c <__bad_interrupt>
      32:	00 00       	nop
      34:	8b c1       	rjmp	.+790    	; 0x34c <__bad_interrupt>
      36:	00 00       	nop
      38:	df c4       	rjmp	.+2494   	; 0x9f8 <__vector_14>
      3a:	00 00       	nop
      3c:	87 c1       	rjmp	.+782    	; 0x34c <__bad_interrupt>
      3e:	00 00       	nop
      40:	85 c1       	rjmp	.+778    	; 0x34c <__bad_interrupt>
      42:	00 00       	nop
      44:	83 c1       	rjmp	.+774    	; 0x34c <__bad_interrupt>
      46:	00 00       	nop
      48:	a3 c4       	rjmp	.+2374   	; 0x990 <__vector_18>
      4a:	00 00       	nop
      4c:	61 c4       	rjmp	.+2242   	; 0x910 <__vector_19>
      4e:	00 00       	nop
      50:	7d c1       	rjmp	.+762    	; 0x34c <__bad_interrupt>
      52:	00 00       	nop
      54:	7b c1       	rjmp	.+758    	; 0x34c <__bad_interrupt>
      56:	00 00       	nop
      58:	79 c1       	rjmp	.+754    	; 0x34c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	77 c1       	rjmp	.+750    	; 0x34c <__bad_interrupt>
      5e:	00 00       	nop
      60:	75 c1       	rjmp	.+746    	; 0x34c <__bad_interrupt>
      62:	00 00       	nop
      64:	73 c1       	rjmp	.+742    	; 0x34c <__bad_interrupt>
      66:	00 00       	nop
      68:	c7 0f       	add	r28, r23
      6a:	d8 0f       	add	r29, r24
      6c:	e9 0f       	add	r30, r25
      6e:	fa 0f       	add	r31, r26
      70:	0b 10       	cpse	r0, r11
      72:	1c 10       	cpse	r1, r12
      74:	2d 10       	cpse	r2, r13
      76:	3e 10       	cpse	r3, r14
      78:	4f 10       	cpse	r4, r15
      7a:	60 10       	cpse	r6, r0
      7c:	6f 10       	cpse	r6, r15
      7e:	a7 12       	cpse	r10, r23
      80:	a7 12       	cpse	r10, r23
      82:	a7 12       	cpse	r10, r23
      84:	a7 12       	cpse	r10, r23
      86:	a7 12       	cpse	r10, r23
      88:	a7 12       	cpse	r10, r23
      8a:	a7 12       	cpse	r10, r23
      8c:	a7 12       	cpse	r10, r23
      8e:	a7 12       	cpse	r10, r23
      90:	a7 12       	cpse	r10, r23
      92:	a7 12       	cpse	r10, r23
      94:	a7 12       	cpse	r10, r23
      96:	a7 12       	cpse	r10, r23
      98:	a7 12       	cpse	r10, r23
      9a:	a7 12       	cpse	r10, r23
      9c:	a7 12       	cpse	r10, r23
      9e:	a7 12       	cpse	r10, r23
      a0:	a7 12       	cpse	r10, r23
      a2:	a7 12       	cpse	r10, r23
      a4:	a7 12       	cpse	r10, r23
      a6:	a7 12       	cpse	r10, r23
      a8:	a7 12       	cpse	r10, r23
      aa:	a7 12       	cpse	r10, r23
      ac:	a7 12       	cpse	r10, r23
      ae:	a7 12       	cpse	r10, r23
      b0:	a7 12       	cpse	r10, r23
      b2:	a7 12       	cpse	r10, r23
      b4:	a7 12       	cpse	r10, r23
      b6:	a7 12       	cpse	r10, r23
      b8:	a7 12       	cpse	r10, r23
      ba:	a7 12       	cpse	r10, r23
      bc:	a7 12       	cpse	r10, r23
      be:	a7 12       	cpse	r10, r23
      c0:	a7 12       	cpse	r10, r23
      c2:	a7 12       	cpse	r10, r23
      c4:	a7 12       	cpse	r10, r23
      c6:	a7 12       	cpse	r10, r23
      c8:	a7 12       	cpse	r10, r23
      ca:	a7 12       	cpse	r10, r23
      cc:	a7 12       	cpse	r10, r23
      ce:	a7 12       	cpse	r10, r23
      d0:	a7 12       	cpse	r10, r23
      d2:	a7 12       	cpse	r10, r23
      d4:	a7 12       	cpse	r10, r23
      d6:	a7 12       	cpse	r10, r23
      d8:	a7 12       	cpse	r10, r23
      da:	a7 12       	cpse	r10, r23
      dc:	a7 12       	cpse	r10, r23
      de:	a7 12       	cpse	r10, r23
      e0:	a7 12       	cpse	r10, r23
      e2:	a7 12       	cpse	r10, r23
      e4:	a7 12       	cpse	r10, r23
      e6:	a7 12       	cpse	r10, r23
      e8:	a7 12       	cpse	r10, r23
      ea:	a7 12       	cpse	r10, r23
      ec:	a7 12       	cpse	r10, r23
      ee:	a7 12       	cpse	r10, r23
      f0:	a7 12       	cpse	r10, r23
      f2:	a7 12       	cpse	r10, r23
      f4:	a7 12       	cpse	r10, r23
      f6:	a7 12       	cpse	r10, r23
      f8:	a7 12       	cpse	r10, r23
      fa:	a7 12       	cpse	r10, r23
      fc:	a7 12       	cpse	r10, r23
      fe:	a7 12       	cpse	r10, r23
     100:	a7 12       	cpse	r10, r23
     102:	a7 12       	cpse	r10, r23
     104:	a7 12       	cpse	r10, r23
     106:	a7 12       	cpse	r10, r23
     108:	a7 12       	cpse	r10, r23
     10a:	a7 12       	cpse	r10, r23
     10c:	a7 12       	cpse	r10, r23
     10e:	a7 12       	cpse	r10, r23
     110:	a7 12       	cpse	r10, r23
     112:	a7 12       	cpse	r10, r23
     114:	a7 12       	cpse	r10, r23
     116:	a7 12       	cpse	r10, r23
     118:	a7 12       	cpse	r10, r23
     11a:	a7 12       	cpse	r10, r23
     11c:	a7 12       	cpse	r10, r23
     11e:	a7 12       	cpse	r10, r23
     120:	a7 12       	cpse	r10, r23
     122:	a7 12       	cpse	r10, r23
     124:	a7 12       	cpse	r10, r23
     126:	a7 12       	cpse	r10, r23
     128:	a7 12       	cpse	r10, r23
     12a:	a7 12       	cpse	r10, r23
     12c:	a7 12       	cpse	r10, r23
     12e:	a7 12       	cpse	r10, r23
     130:	82 10       	cpse	r8, r2
     132:	93 10       	cpse	r9, r3
     134:	a4 10       	cpse	r10, r4
     136:	b5 10       	cpse	r11, r5
     138:	c6 10       	cpse	r12, r6
     13a:	d7 10       	cpse	r13, r7
     13c:	e8 10       	cpse	r14, r8
     13e:	f9 10       	cpse	r15, r9
     140:	0a 11       	cpse	r16, r10
     142:	1b 11       	cpse	r17, r11
     144:	2a 11       	cpse	r18, r10
     146:	a7 12       	cpse	r10, r23
     148:	a7 12       	cpse	r10, r23
     14a:	a7 12       	cpse	r10, r23
     14c:	a7 12       	cpse	r10, r23
     14e:	a7 12       	cpse	r10, r23
     150:	a7 12       	cpse	r10, r23
     152:	a7 12       	cpse	r10, r23
     154:	a7 12       	cpse	r10, r23
     156:	a7 12       	cpse	r10, r23
     158:	a7 12       	cpse	r10, r23
     15a:	a7 12       	cpse	r10, r23
     15c:	a7 12       	cpse	r10, r23
     15e:	a7 12       	cpse	r10, r23
     160:	a7 12       	cpse	r10, r23
     162:	a7 12       	cpse	r10, r23
     164:	a7 12       	cpse	r10, r23
     166:	a7 12       	cpse	r10, r23
     168:	a7 12       	cpse	r10, r23
     16a:	a7 12       	cpse	r10, r23
     16c:	a7 12       	cpse	r10, r23
     16e:	a7 12       	cpse	r10, r23
     170:	a7 12       	cpse	r10, r23
     172:	a7 12       	cpse	r10, r23
     174:	a7 12       	cpse	r10, r23
     176:	a7 12       	cpse	r10, r23
     178:	a7 12       	cpse	r10, r23
     17a:	a7 12       	cpse	r10, r23
     17c:	a7 12       	cpse	r10, r23
     17e:	a7 12       	cpse	r10, r23
     180:	a7 12       	cpse	r10, r23
     182:	a7 12       	cpse	r10, r23
     184:	a7 12       	cpse	r10, r23
     186:	a7 12       	cpse	r10, r23
     188:	a7 12       	cpse	r10, r23
     18a:	a7 12       	cpse	r10, r23
     18c:	a7 12       	cpse	r10, r23
     18e:	a7 12       	cpse	r10, r23
     190:	a7 12       	cpse	r10, r23
     192:	a7 12       	cpse	r10, r23
     194:	a7 12       	cpse	r10, r23
     196:	a7 12       	cpse	r10, r23
     198:	a7 12       	cpse	r10, r23
     19a:	a7 12       	cpse	r10, r23
     19c:	a7 12       	cpse	r10, r23
     19e:	a7 12       	cpse	r10, r23
     1a0:	a7 12       	cpse	r10, r23
     1a2:	a7 12       	cpse	r10, r23
     1a4:	a7 12       	cpse	r10, r23
     1a6:	a7 12       	cpse	r10, r23
     1a8:	a7 12       	cpse	r10, r23
     1aa:	a7 12       	cpse	r10, r23
     1ac:	a7 12       	cpse	r10, r23
     1ae:	a7 12       	cpse	r10, r23
     1b0:	a7 12       	cpse	r10, r23
     1b2:	a7 12       	cpse	r10, r23
     1b4:	a7 12       	cpse	r10, r23
     1b6:	a7 12       	cpse	r10, r23
     1b8:	a7 12       	cpse	r10, r23
     1ba:	a7 12       	cpse	r10, r23
     1bc:	a7 12       	cpse	r10, r23
     1be:	a7 12       	cpse	r10, r23
     1c0:	a7 12       	cpse	r10, r23
     1c2:	a7 12       	cpse	r10, r23
     1c4:	a7 12       	cpse	r10, r23
     1c6:	a7 12       	cpse	r10, r23
     1c8:	a7 12       	cpse	r10, r23
     1ca:	a7 12       	cpse	r10, r23
     1cc:	a7 12       	cpse	r10, r23
     1ce:	a7 12       	cpse	r10, r23
     1d0:	a7 12       	cpse	r10, r23
     1d2:	a7 12       	cpse	r10, r23
     1d4:	a7 12       	cpse	r10, r23
     1d6:	a7 12       	cpse	r10, r23
     1d8:	a7 12       	cpse	r10, r23
     1da:	a7 12       	cpse	r10, r23
     1dc:	a7 12       	cpse	r10, r23
     1de:	a7 12       	cpse	r10, r23
     1e0:	a7 12       	cpse	r10, r23
     1e2:	a7 12       	cpse	r10, r23
     1e4:	a7 12       	cpse	r10, r23
     1e6:	a7 12       	cpse	r10, r23
     1e8:	a7 12       	cpse	r10, r23
     1ea:	a7 12       	cpse	r10, r23
     1ec:	a7 12       	cpse	r10, r23
     1ee:	a7 12       	cpse	r10, r23
     1f0:	a7 12       	cpse	r10, r23
     1f2:	a7 12       	cpse	r10, r23
     1f4:	a7 12       	cpse	r10, r23
     1f6:	a7 12       	cpse	r10, r23
     1f8:	39 11       	cpse	r19, r9
     1fa:	4a 11       	cpse	r20, r10
     1fc:	5b 11       	cpse	r21, r11
     1fe:	6c 11       	cpse	r22, r12
     200:	7d 11       	cpse	r23, r13
     202:	8e 11       	cpse	r24, r14
     204:	9f 11       	cpse	r25, r15
     206:	b0 11       	cpse	r27, r0
     208:	c1 11       	cpse	r28, r1
     20a:	d2 11       	cpse	r29, r2
     20c:	e1 11       	cpse	r30, r1
     20e:	a7 12       	cpse	r10, r23
     210:	a7 12       	cpse	r10, r23
     212:	a7 12       	cpse	r10, r23
     214:	a7 12       	cpse	r10, r23
     216:	a7 12       	cpse	r10, r23
     218:	a7 12       	cpse	r10, r23
     21a:	a7 12       	cpse	r10, r23
     21c:	a7 12       	cpse	r10, r23
     21e:	a7 12       	cpse	r10, r23
     220:	a7 12       	cpse	r10, r23
     222:	a7 12       	cpse	r10, r23
     224:	a7 12       	cpse	r10, r23
     226:	a7 12       	cpse	r10, r23
     228:	a7 12       	cpse	r10, r23
     22a:	a7 12       	cpse	r10, r23
     22c:	a7 12       	cpse	r10, r23
     22e:	a7 12       	cpse	r10, r23
     230:	a7 12       	cpse	r10, r23
     232:	a7 12       	cpse	r10, r23
     234:	a7 12       	cpse	r10, r23
     236:	a7 12       	cpse	r10, r23
     238:	a7 12       	cpse	r10, r23
     23a:	a7 12       	cpse	r10, r23
     23c:	a7 12       	cpse	r10, r23
     23e:	a7 12       	cpse	r10, r23
     240:	a7 12       	cpse	r10, r23
     242:	a7 12       	cpse	r10, r23
     244:	a7 12       	cpse	r10, r23
     246:	a7 12       	cpse	r10, r23
     248:	a7 12       	cpse	r10, r23
     24a:	a7 12       	cpse	r10, r23
     24c:	a7 12       	cpse	r10, r23
     24e:	a7 12       	cpse	r10, r23
     250:	a7 12       	cpse	r10, r23
     252:	a7 12       	cpse	r10, r23
     254:	a7 12       	cpse	r10, r23
     256:	a7 12       	cpse	r10, r23
     258:	a7 12       	cpse	r10, r23
     25a:	a7 12       	cpse	r10, r23
     25c:	a7 12       	cpse	r10, r23
     25e:	a7 12       	cpse	r10, r23
     260:	a7 12       	cpse	r10, r23
     262:	a7 12       	cpse	r10, r23
     264:	a7 12       	cpse	r10, r23
     266:	a7 12       	cpse	r10, r23
     268:	a7 12       	cpse	r10, r23
     26a:	a7 12       	cpse	r10, r23
     26c:	a7 12       	cpse	r10, r23
     26e:	a7 12       	cpse	r10, r23
     270:	a7 12       	cpse	r10, r23
     272:	a7 12       	cpse	r10, r23
     274:	a7 12       	cpse	r10, r23
     276:	a7 12       	cpse	r10, r23
     278:	a7 12       	cpse	r10, r23
     27a:	a7 12       	cpse	r10, r23
     27c:	a7 12       	cpse	r10, r23
     27e:	a7 12       	cpse	r10, r23
     280:	a7 12       	cpse	r10, r23
     282:	a7 12       	cpse	r10, r23
     284:	a7 12       	cpse	r10, r23
     286:	a7 12       	cpse	r10, r23
     288:	a7 12       	cpse	r10, r23
     28a:	a7 12       	cpse	r10, r23
     28c:	a7 12       	cpse	r10, r23
     28e:	a7 12       	cpse	r10, r23
     290:	a7 12       	cpse	r10, r23
     292:	a7 12       	cpse	r10, r23
     294:	a7 12       	cpse	r10, r23
     296:	a7 12       	cpse	r10, r23
     298:	a7 12       	cpse	r10, r23
     29a:	a7 12       	cpse	r10, r23
     29c:	a7 12       	cpse	r10, r23
     29e:	a7 12       	cpse	r10, r23
     2a0:	a7 12       	cpse	r10, r23
     2a2:	a7 12       	cpse	r10, r23
     2a4:	a7 12       	cpse	r10, r23
     2a6:	a7 12       	cpse	r10, r23
     2a8:	a7 12       	cpse	r10, r23
     2aa:	a7 12       	cpse	r10, r23
     2ac:	a7 12       	cpse	r10, r23
     2ae:	a7 12       	cpse	r10, r23
     2b0:	a7 12       	cpse	r10, r23
     2b2:	a7 12       	cpse	r10, r23
     2b4:	a7 12       	cpse	r10, r23
     2b6:	a7 12       	cpse	r10, r23
     2b8:	a7 12       	cpse	r10, r23
     2ba:	a7 12       	cpse	r10, r23
     2bc:	a7 12       	cpse	r10, r23
     2be:	a7 12       	cpse	r10, r23
     2c0:	f0 11       	cpse	r31, r0
     2c2:	01 12       	cpse	r0, r17
     2c4:	12 12       	cpse	r1, r18
     2c6:	23 12       	cpse	r2, r19
     2c8:	34 12       	cpse	r3, r20
     2ca:	45 12       	cpse	r4, r21
     2cc:	56 12       	cpse	r5, r22
     2ce:	67 12       	cpse	r6, r23
     2d0:	78 12       	cpse	r7, r24
     2d2:	89 12       	cpse	r8, r25
     2d4:	98 12       	cpse	r9, r24

000002d6 <__trampolines_end>:
     2d6:	4e 41       	sbci	r20, 0x1E	; 30
     2d8:	4e 49       	sbci	r20, 0x9E	; 158

000002d9 <pstr_inity>:
     2d9:	49 4e 49 54 59                                      INITY

000002de <pstr_inf>:
     2de:	49 4e 46                                            INF

000002e1 <pwr_m10>:
     2e1:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     2f1:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000002f9 <pwr_p10>:
     2f9:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     309:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000312 <__ctors_end>:
     312:	11 24       	eor	r1, r1
     314:	1f be       	out	0x3f, r1	; 63
     316:	cf ef       	ldi	r28, 0xFF	; 255
     318:	d8 e0       	ldi	r29, 0x08	; 8
     31a:	de bf       	out	0x3e, r29	; 62
     31c:	cd bf       	out	0x3d, r28	; 61

0000031e <__do_copy_data>:
     31e:	11 e0       	ldi	r17, 0x01	; 1
     320:	a0 e0       	ldi	r26, 0x00	; 0
     322:	b1 e0       	ldi	r27, 0x01	; 1
     324:	e2 eb       	ldi	r30, 0xB2	; 178
     326:	f7 e4       	ldi	r31, 0x47	; 71
     328:	02 c0       	rjmp	.+4      	; 0x32e <__do_copy_data+0x10>
     32a:	05 90       	lpm	r0, Z+
     32c:	0d 92       	st	X+, r0
     32e:	a4 34       	cpi	r26, 0x44	; 68
     330:	b1 07       	cpc	r27, r17
     332:	d9 f7       	brne	.-10     	; 0x32a <__do_copy_data+0xc>

00000334 <__do_clear_bss>:
     334:	25 e0       	ldi	r18, 0x05	; 5
     336:	a4 e4       	ldi	r26, 0x44	; 68
     338:	b1 e0       	ldi	r27, 0x01	; 1
     33a:	01 c0       	rjmp	.+2      	; 0x33e <.do_clear_bss_start>

0000033c <.do_clear_bss_loop>:
     33c:	1d 92       	st	X+, r1

0000033e <.do_clear_bss_start>:
     33e:	a5 30       	cpi	r26, 0x05	; 5
     340:	b2 07       	cpc	r27, r18
     342:	e1 f7       	brne	.-8      	; 0x33c <.do_clear_bss_loop>
     344:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <main>
     348:	0c 94 d7 23 	jmp	0x47ae	; 0x47ae <_exit>

0000034c <__bad_interrupt>:
     34c:	59 ce       	rjmp	.-846    	; 0x0 <__vectors>

0000034e <MaxRTDinit>:
*************************************************/
static inline void MaxRTDinit( unsigned char dataWrite, unsigned char ch)
{
	unsigned char dummy;

	switch (ch)
     34e:	62 30       	cpi	r22, 0x02	; 2
     350:	59 f0       	breq	.+22     	; 0x368 <MaxRTDinit+0x1a>
     352:	18 f4       	brcc	.+6      	; 0x35a <MaxRTDinit+0xc>
     354:	61 30       	cpi	r22, 0x01	; 1
     356:	31 f0       	breq	.+12     	; 0x364 <MaxRTDinit+0x16>
     358:	0c c0       	rjmp	.+24     	; 0x372 <MaxRTDinit+0x24>
     35a:	63 30       	cpi	r22, 0x03	; 3
     35c:	39 f0       	breq	.+14     	; 0x36c <MaxRTDinit+0x1e>
     35e:	64 30       	cpi	r22, 0x04	; 4
     360:	39 f0       	breq	.+14     	; 0x370 <MaxRTDinit+0x22>
     362:	07 c0       	rjmp	.+14     	; 0x372 <MaxRTDinit+0x24>
	{
		case 1:
		PORTD &= 0b11101111;	// Set CS1 low
     364:	5c 98       	cbi	0x0b, 4	; 11
		break;
     366:	05 c0       	rjmp	.+10     	; 0x372 <MaxRTDinit+0x24>
		
		case 2:
		PORTD &= 0b11011111;	// Set CS2 low
     368:	5d 98       	cbi	0x0b, 5	; 11
		break;
     36a:	03 c0       	rjmp	.+6      	; 0x372 <MaxRTDinit+0x24>
		
		case 3:
		PORTD &= 0b10111111;	// Set CS3 low
     36c:	5e 98       	cbi	0x0b, 6	; 11
		break;
     36e:	01 c0       	rjmp	.+2      	; 0x372 <MaxRTDinit+0x24>
		
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
     370:	5f 98       	cbi	0x0b, 7	; 11
		break;
	}
	SPDR = 0x80;				// Configuration
     372:	90 e8       	ldi	r25, 0x80	; 128
     374:	9e bd       	out	0x2e, r25	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     376:	0d b4       	in	r0, 0x2d	; 45
     378:	07 fe       	sbrs	r0, 7
     37a:	fd cf       	rjmp	.-6      	; 0x376 <MaxRTDinit+0x28>
	dummy = SPDR;				//just for clearing SPIF
     37c:	9e b5       	in	r25, 0x2e	; 46
	SPDR = dataWrite;
     37e:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     380:	0d b4       	in	r0, 0x2d	; 45
     382:	07 fe       	sbrs	r0, 7
     384:	fd cf       	rjmp	.-6      	; 0x380 <MaxRTDinit+0x32>
	dummy = SPDR;
     386:	8e b5       	in	r24, 0x2e	; 46
	
	PORTD |= 0b11110000;		// Set all CS High
     388:	8b b1       	in	r24, 0x0b	; 11
     38a:	80 6f       	ori	r24, 0xF0	; 240
     38c:	8b b9       	out	0x0b, r24	; 11
     38e:	08 95       	ret

00000390 <GenCrc16>:
		idx ++;
	}	
}

static inline int GenCrc16(char c[], int nByte)	// CRC-CCITT (XModem)
{
     390:	cf 93       	push	r28
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
     392:	16 16       	cp	r1, r22
     394:	17 06       	cpc	r1, r23
     396:	3c f5       	brge	.+78     	; 0x3e6 <GenCrc16+0x56>
     398:	fc 01       	movw	r30, r24
     39a:	68 0f       	add	r22, r24
     39c:	79 1f       	adc	r23, r25
     39e:	80 e0       	ldi	r24, 0x00	; 0
     3a0:	90 e0       	ldi	r25, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
     3a2:	b8 e0       	ldi	r27, 0x08	; 8
     3a4:	a0 e0       	ldi	r26, 0x00	; 0
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
     3a6:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
     3a8:	29 2f       	mov	r18, r25
     3aa:	33 27       	eor	r19, r19
     3ac:	27 fd       	sbrc	r18, 7
     3ae:	3a 95       	dec	r19
     3b0:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
     3b2:	32 2f       	mov	r19, r18
     3b4:	22 27       	eor	r18, r18
     3b6:	4b 2f       	mov	r20, r27
     3b8:	5a 2f       	mov	r21, r26
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
     3ba:	33 23       	and	r19, r19
     3bc:	3c f4       	brge	.+14     	; 0x3cc <GenCrc16+0x3c>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
     3be:	22 0f       	add	r18, r18
     3c0:	33 1f       	adc	r19, r19
     3c2:	c1 e2       	ldi	r28, 0x21	; 33
     3c4:	2c 27       	eor	r18, r28
     3c6:	c0 e1       	ldi	r28, 0x10	; 16
     3c8:	3c 27       	eor	r19, r28
     3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <GenCrc16+0x40>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
     3cc:	22 0f       	add	r18, r18
     3ce:	33 1f       	adc	r19, r19
     3d0:	41 50       	subi	r20, 0x01	; 1
     3d2:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
     3d4:	91 f7       	brne	.-28     	; 0x3ba <GenCrc16+0x2a>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
     3d6:	98 2f       	mov	r25, r24
     3d8:	88 27       	eor	r24, r24
     3da:	82 27       	eor	r24, r18
     3dc:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
     3de:	e6 17       	cp	r30, r22
     3e0:	f7 07       	cpc	r31, r23
     3e2:	09 f7       	brne	.-62     	; 0x3a6 <GenCrc16+0x16>
     3e4:	02 c0       	rjmp	.+4      	; 0x3ea <GenCrc16+0x5a>
{
	int Polynominal = 0x1021;
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	90 e0       	ldi	r25, 0x00	; 0
		}
		CRC = (int)((CRC << 8) ^ Remainder);
		index++;
	}
	return CRC;
}
     3ea:	cf 91       	pop	r28
     3ec:	08 95       	ret

000003ee <WriteParamToEEPROM>:
	ch3.tempErrorWin = eeprom_read_float((float*)eepromAdr_TempErrWin3);
	ch3.tempSettleTime = eeprom_read_float((float*)eepromAdr_TSettleTime3);	
}

static inline void WriteParamToEEPROM()
{
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
	eeprom_write_float( (float*)eepromAdr_TempSetPoint0, ch0.TempSetPoint );
     3f2:	ca e1       	ldi	r28, 0x1A	; 26
     3f4:	d4 e0       	ldi	r29, 0x04	; 4
     3f6:	48 81       	ld	r20, Y
     3f8:	59 81       	ldd	r21, Y+1	; 0x01
     3fa:	6a 81       	ldd	r22, Y+2	; 0x02
     3fc:	7b 81       	ldd	r23, Y+3	; 0x03
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	0e 94 61 23 	call	0x46c2	; 0x46c2 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_PgainCh0, ch0.Pgain );
     406:	4c 8d       	ldd	r20, Y+28	; 0x1c
     408:	5d 8d       	ldd	r21, Y+29	; 0x1d
     40a:	6e 8d       	ldd	r22, Y+30	; 0x1e
     40c:	7f 8d       	ldd	r23, Y+31	; 0x1f
     40e:	84 e0       	ldi	r24, 0x04	; 4
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	0e 94 61 23 	call	0x46c2	; 0x46c2 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_IgainCh0, ch0.Igain );
     416:	48 a1       	ldd	r20, Y+32	; 0x20
     418:	59 a1       	ldd	r21, Y+33	; 0x21
     41a:	6a a1       	ldd	r22, Y+34	; 0x22
     41c:	7b a1       	ldd	r23, Y+35	; 0x23
     41e:	88 e0       	ldi	r24, 0x08	; 8
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	0e 94 61 23 	call	0x46c2	; 0x46c2 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_DgainCh0, ch0.Dgain );
     426:	4c a1       	ldd	r20, Y+36	; 0x24
     428:	5d a1       	ldd	r21, Y+37	; 0x25
     42a:	6e a1       	ldd	r22, Y+38	; 0x26
     42c:	7f a1       	ldd	r23, Y+39	; 0x27
     42e:	8c e0       	ldi	r24, 0x0C	; 12
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	0e 94 61 23 	call	0x46c2	; 0x46c2 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_TempErrWin0, ch0.tempErrorWin );
     436:	40 91 6e 04 	lds	r20, 0x046E
     43a:	50 91 6f 04 	lds	r21, 0x046F
     43e:	60 91 70 04 	lds	r22, 0x0470
     442:	70 91 71 04 	lds	r23, 0x0471
     446:	80 e1       	ldi	r24, 0x10	; 16
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	0e 94 61 23 	call	0x46c2	; 0x46c2 <eeprom_write_dword>
	eeprom_write_float(	(float*)eepromAdr_TSettleTime0, ch0.tempSettleTime );
     44e:	60 91 74 04 	lds	r22, 0x0474
     452:	70 91 75 04 	lds	r23, 0x0475
     456:	07 2e       	mov	r0, r23
     458:	00 0c       	add	r0, r0
     45a:	88 0b       	sbc	r24, r24
     45c:	99 0b       	sbc	r25, r25
     45e:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <__floatsisf>
     462:	ab 01       	movw	r20, r22
     464:	bc 01       	movw	r22, r24
     466:	84 e1       	ldi	r24, 0x14	; 20
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	0e 94 61 23 	call	0x46c2	; 0x46c2 <eeprom_write_dword>
	
	eeprom_write_float( (float*)eepromAdr_TempSetPoint1, ch1.TempSetPoint );
     46e:	cd e7       	ldi	r28, 0x7D	; 125
     470:	d4 e0       	ldi	r29, 0x04	; 4
     472:	48 81       	ld	r20, Y
     474:	59 81       	ldd	r21, Y+1	; 0x01
     476:	6a 81       	ldd	r22, Y+2	; 0x02
     478:	7b 81       	ldd	r23, Y+3	; 0x03
     47a:	88 e1       	ldi	r24, 0x18	; 24
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	0e 94 61 23 	call	0x46c2	; 0x46c2 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_PgainCh1, ch1.Pgain );
     482:	4c 8d       	ldd	r20, Y+28	; 0x1c
     484:	5d 8d       	ldd	r21, Y+29	; 0x1d
     486:	6e 8d       	ldd	r22, Y+30	; 0x1e
     488:	7f 8d       	ldd	r23, Y+31	; 0x1f
     48a:	8c e1       	ldi	r24, 0x1C	; 28
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	0e 94 61 23 	call	0x46c2	; 0x46c2 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_IgainCh1, ch1.Igain );
     492:	48 a1       	ldd	r20, Y+32	; 0x20
     494:	59 a1       	ldd	r21, Y+33	; 0x21
     496:	6a a1       	ldd	r22, Y+34	; 0x22
     498:	7b a1       	ldd	r23, Y+35	; 0x23
     49a:	80 e2       	ldi	r24, 0x20	; 32
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	0e 94 61 23 	call	0x46c2	; 0x46c2 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_DgainCh1, ch1.Dgain );
     4a2:	4c a1       	ldd	r20, Y+36	; 0x24
     4a4:	5d a1       	ldd	r21, Y+37	; 0x25
     4a6:	6e a1       	ldd	r22, Y+38	; 0x26
     4a8:	7f a1       	ldd	r23, Y+39	; 0x27
     4aa:	84 e2       	ldi	r24, 0x24	; 36
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	0e 94 61 23 	call	0x46c2	; 0x46c2 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_TempErrWin1, ch1.tempErrorWin );
     4b2:	40 91 d1 04 	lds	r20, 0x04D1
     4b6:	50 91 d2 04 	lds	r21, 0x04D2
     4ba:	60 91 d3 04 	lds	r22, 0x04D3
     4be:	70 91 d4 04 	lds	r23, 0x04D4
     4c2:	88 e2       	ldi	r24, 0x28	; 40
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	0e 94 61 23 	call	0x46c2	; 0x46c2 <eeprom_write_dword>
	eeprom_write_float(	(float*)eepromAdr_TSettleTime1, ch1.tempSettleTime );	
     4ca:	60 91 d7 04 	lds	r22, 0x04D7
     4ce:	70 91 d8 04 	lds	r23, 0x04D8
     4d2:	07 2e       	mov	r0, r23
     4d4:	00 0c       	add	r0, r0
     4d6:	88 0b       	sbc	r24, r24
     4d8:	99 0b       	sbc	r25, r25
     4da:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <__floatsisf>
     4de:	ab 01       	movw	r20, r22
     4e0:	bc 01       	movw	r22, r24
     4e2:	8c e2       	ldi	r24, 0x2C	; 44
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	0e 94 61 23 	call	0x46c2	; 0x46c2 <eeprom_write_dword>
	
	eeprom_write_float( (float*)eepromAdr_TempSetPoint2, ch2.TempSetPoint );
     4ea:	cb ea       	ldi	r28, 0xAB	; 171
     4ec:	d2 e0       	ldi	r29, 0x02	; 2
     4ee:	48 81       	ld	r20, Y
     4f0:	59 81       	ldd	r21, Y+1	; 0x01
     4f2:	6a 81       	ldd	r22, Y+2	; 0x02
     4f4:	7b 81       	ldd	r23, Y+3	; 0x03
     4f6:	80 e3       	ldi	r24, 0x30	; 48
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	0e 94 61 23 	call	0x46c2	; 0x46c2 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_PgainCh2, ch2.Pgain );
     4fe:	4c 8d       	ldd	r20, Y+28	; 0x1c
     500:	5d 8d       	ldd	r21, Y+29	; 0x1d
     502:	6e 8d       	ldd	r22, Y+30	; 0x1e
     504:	7f 8d       	ldd	r23, Y+31	; 0x1f
     506:	84 e3       	ldi	r24, 0x34	; 52
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	0e 94 61 23 	call	0x46c2	; 0x46c2 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_IgainCh2, ch2.Igain );
     50e:	48 a1       	ldd	r20, Y+32	; 0x20
     510:	59 a1       	ldd	r21, Y+33	; 0x21
     512:	6a a1       	ldd	r22, Y+34	; 0x22
     514:	7b a1       	ldd	r23, Y+35	; 0x23
     516:	88 e3       	ldi	r24, 0x38	; 56
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	0e 94 61 23 	call	0x46c2	; 0x46c2 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_DgainCh2, ch2.Dgain );
     51e:	4c a1       	ldd	r20, Y+36	; 0x24
     520:	5d a1       	ldd	r21, Y+37	; 0x25
     522:	6e a1       	ldd	r22, Y+38	; 0x26
     524:	7f a1       	ldd	r23, Y+39	; 0x27
     526:	8c e3       	ldi	r24, 0x3C	; 60
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	0e 94 61 23 	call	0x46c2	; 0x46c2 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_TempErrWin2, ch2.tempErrorWin );
     52e:	40 91 ff 02 	lds	r20, 0x02FF
     532:	50 91 00 03 	lds	r21, 0x0300
     536:	60 91 01 03 	lds	r22, 0x0301
     53a:	70 91 02 03 	lds	r23, 0x0302
     53e:	80 e4       	ldi	r24, 0x40	; 64
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	0e 94 61 23 	call	0x46c2	; 0x46c2 <eeprom_write_dword>
	eeprom_write_float(	(float*)eepromAdr_TSettleTime2, ch2.tempSettleTime );	
     546:	60 91 05 03 	lds	r22, 0x0305
     54a:	70 91 06 03 	lds	r23, 0x0306
     54e:	07 2e       	mov	r0, r23
     550:	00 0c       	add	r0, r0
     552:	88 0b       	sbc	r24, r24
     554:	99 0b       	sbc	r25, r25
     556:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <__floatsisf>
     55a:	ab 01       	movw	r20, r22
     55c:	bc 01       	movw	r22, r24
     55e:	84 e4       	ldi	r24, 0x44	; 68
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	0e 94 61 23 	call	0x46c2	; 0x46c2 <eeprom_write_dword>
	
	eeprom_write_float( (float*)eepromAdr_TempSetPoint3, ch3.TempSetPoint );
     566:	c6 e4       	ldi	r28, 0x46	; 70
     568:	d1 e0       	ldi	r29, 0x01	; 1
     56a:	48 81       	ld	r20, Y
     56c:	59 81       	ldd	r21, Y+1	; 0x01
     56e:	6a 81       	ldd	r22, Y+2	; 0x02
     570:	7b 81       	ldd	r23, Y+3	; 0x03
     572:	88 e4       	ldi	r24, 0x48	; 72
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	0e 94 61 23 	call	0x46c2	; 0x46c2 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_PgainCh3, ch3.Pgain );
     57a:	4c 8d       	ldd	r20, Y+28	; 0x1c
     57c:	5d 8d       	ldd	r21, Y+29	; 0x1d
     57e:	6e 8d       	ldd	r22, Y+30	; 0x1e
     580:	7f 8d       	ldd	r23, Y+31	; 0x1f
     582:	8c e4       	ldi	r24, 0x4C	; 76
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	0e 94 61 23 	call	0x46c2	; 0x46c2 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_IgainCh3, ch3.Igain );
     58a:	48 a1       	ldd	r20, Y+32	; 0x20
     58c:	59 a1       	ldd	r21, Y+33	; 0x21
     58e:	6a a1       	ldd	r22, Y+34	; 0x22
     590:	7b a1       	ldd	r23, Y+35	; 0x23
     592:	80 e5       	ldi	r24, 0x50	; 80
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	0e 94 61 23 	call	0x46c2	; 0x46c2 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_DgainCh3, ch3.Dgain );
     59a:	4c a1       	ldd	r20, Y+36	; 0x24
     59c:	5d a1       	ldd	r21, Y+37	; 0x25
     59e:	6e a1       	ldd	r22, Y+38	; 0x26
     5a0:	7f a1       	ldd	r23, Y+39	; 0x27
     5a2:	84 e5       	ldi	r24, 0x54	; 84
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	0e 94 61 23 	call	0x46c2	; 0x46c2 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_TempErrWin3, ch3.tempErrorWin );
     5aa:	40 91 9a 01 	lds	r20, 0x019A
     5ae:	50 91 9b 01 	lds	r21, 0x019B
     5b2:	60 91 9c 01 	lds	r22, 0x019C
     5b6:	70 91 9d 01 	lds	r23, 0x019D
     5ba:	88 e5       	ldi	r24, 0x58	; 88
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	0e 94 61 23 	call	0x46c2	; 0x46c2 <eeprom_write_dword>
	eeprom_write_float(	(float*)eepromAdr_TSettleTime3, ch3.tempSettleTime );	
     5c2:	60 91 a0 01 	lds	r22, 0x01A0
     5c6:	70 91 a1 01 	lds	r23, 0x01A1
     5ca:	07 2e       	mov	r0, r23
     5cc:	00 0c       	add	r0, r0
     5ce:	88 0b       	sbc	r24, r24
     5d0:	99 0b       	sbc	r25, r25
     5d2:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <__floatsisf>
     5d6:	ab 01       	movw	r20, r22
     5d8:	bc 01       	movw	r22, r24
     5da:	8c e5       	ldi	r24, 0x5C	; 92
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	0e 94 61 23 	call	0x46c2	; 0x46c2 <eeprom_write_dword>
}
     5e2:	df 91       	pop	r29
     5e4:	cf 91       	pop	r28
     5e6:	08 95       	ret

000005e8 <CrcCompare>:
	}
	return CRC;
}

static inline bool CrcCompare(char *crc_in, char *crc_calc)
{
     5e8:	0f 93       	push	r16
     5ea:	1f 93       	push	r17
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	ec 01       	movw	r28, r24
     5f2:	8b 01       	movw	r16, r22
	strupr(crc_in);
     5f4:	0e 94 8d 21 	call	0x431a	; 0x431a <strupr>
	strupr(crc_calc);
     5f8:	c8 01       	movw	r24, r16
     5fa:	0e 94 8d 21 	call	0x431a	; 0x431a <strupr>
	
	if(crc_in[0] == '0' && crc_in[1] == '0' && crc_in[2] == '0')
     5fe:	88 81       	ld	r24, Y
     600:	80 33       	cpi	r24, 0x30	; 48
     602:	19 f5       	brne	.+70     	; 0x64a <CrcCompare+0x62>
     604:	89 81       	ldd	r24, Y+1	; 0x01
     606:	80 33       	cpi	r24, 0x30	; 48
     608:	09 f0       	breq	.+2      	; 0x60c <CrcCompare+0x24>
     60a:	41 c0       	rjmp	.+130    	; 0x68e <CrcCompare+0xa6>
     60c:	8a 81       	ldd	r24, Y+2	; 0x02
     60e:	80 33       	cpi	r24, 0x30	; 48
     610:	b9 f5       	brne	.+110    	; 0x680 <CrcCompare+0x98>
	{
			if(crc_in[3] == crc_calc[0])
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	2b 81       	ldd	r18, Y+3	; 0x03
     616:	f8 01       	movw	r30, r16
     618:	90 81       	ld	r25, Z
     61a:	29 17       	cp	r18, r25
     61c:	e9 f1       	breq	.+122    	; 0x698 <CrcCompare+0xb0>
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	3b c0       	rjmp	.+118    	; 0x698 <CrcCompare+0xb0>
			}
	}

	if(crc_in[0] == '0' && crc_in[1] == '0')
	{
		if((crc_in[2] == crc_calc[0]) && (crc_in[3] == crc_calc[1]))
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	2b 81       	ldd	r18, Y+3	; 0x03
     626:	f8 01       	movw	r30, r16
     628:	91 81       	ldd	r25, Z+1	; 0x01
     62a:	29 17       	cp	r18, r25
     62c:	a9 f1       	breq	.+106    	; 0x698 <CrcCompare+0xb0>
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	33 c0       	rjmp	.+102    	; 0x698 <CrcCompare+0xb0>
		}
	}
	
	if(crc_in[0] == '0')
	{
		if((crc_in[1] == crc_calc[0]) && (crc_in[2] == crc_calc[1]) &&
     632:	9a 81       	ldd	r25, Y+2	; 0x02
     634:	f8 01       	movw	r30, r16
     636:	81 81       	ldd	r24, Z+1	; 0x01
     638:	98 13       	cpse	r25, r24
     63a:	1a c0       	rjmp	.+52     	; 0x670 <CrcCompare+0x88>
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	2b 81       	ldd	r18, Y+3	; 0x03
     640:	92 81       	ldd	r25, Z+2	; 0x02
     642:	29 17       	cp	r18, r25
     644:	49 f1       	breq	.+82     	; 0x698 <CrcCompare+0xb0>
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	27 c0       	rjmp	.+78     	; 0x698 <CrcCompare+0xb0>
			return false;
		}
	}	
	else
	{
		if((crc_in[0] == crc_calc[0]) && (crc_in[1] == crc_calc[1]) &&
     64a:	f8 01       	movw	r30, r16
     64c:	90 81       	ld	r25, Z
     64e:	89 13       	cpse	r24, r25
     650:	11 c0       	rjmp	.+34     	; 0x674 <CrcCompare+0x8c>
     652:	99 81       	ldd	r25, Y+1	; 0x01
     654:	81 81       	ldd	r24, Z+1	; 0x01
     656:	98 13       	cpse	r25, r24
     658:	0f c0       	rjmp	.+30     	; 0x678 <CrcCompare+0x90>
     65a:	9a 81       	ldd	r25, Y+2	; 0x02
     65c:	82 81       	ldd	r24, Z+2	; 0x02
     65e:	98 13       	cpse	r25, r24
     660:	0d c0       	rjmp	.+26     	; 0x67c <CrcCompare+0x94>
			(crc_in[2] == crc_calc[2]) && (crc_in[3] == crc_calc[3]))
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	2b 81       	ldd	r18, Y+3	; 0x03
     666:	93 81       	ldd	r25, Z+3	; 0x03
     668:	29 17       	cp	r18, r25
     66a:	b1 f0       	breq	.+44     	; 0x698 <CrcCompare+0xb0>
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	14 c0       	rjmp	.+40     	; 0x698 <CrcCompare+0xb0>
		{
			return true;
		}
		else
		{
			return false;
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	12 c0       	rjmp	.+36     	; 0x698 <CrcCompare+0xb0>
			{
				return true;
			}
			else
			{
				return false;
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	10 c0       	rjmp	.+32     	; 0x698 <CrcCompare+0xb0>
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	0e c0       	rjmp	.+28     	; 0x698 <CrcCompare+0xb0>
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	0c c0       	rjmp	.+24     	; 0x698 <CrcCompare+0xb0>
			}
	}

	if(crc_in[0] == '0' && crc_in[1] == '0')
	{
		if((crc_in[2] == crc_calc[0]) && (crc_in[3] == crc_calc[1]))
     680:	9a 81       	ldd	r25, Y+2	; 0x02
     682:	f8 01       	movw	r30, r16
     684:	80 81       	ld	r24, Z
     686:	98 17       	cp	r25, r24
     688:	61 f2       	breq	.-104    	; 0x622 <CrcCompare+0x3a>
		{
			return true;
		}
		else
		{
			return false;
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	05 c0       	rjmp	.+10     	; 0x698 <CrcCompare+0xb0>
		}
	}
	
	if(crc_in[0] == '0')
	{
		if((crc_in[1] == crc_calc[0]) && (crc_in[2] == crc_calc[1]) &&
     68e:	f8 01       	movw	r30, r16
     690:	90 81       	ld	r25, Z
     692:	89 17       	cp	r24, r25
     694:	71 f2       	breq	.-100    	; 0x632 <CrcCompare+0x4a>
		{
			return true;
		}
		else
		{
			return false;
     696:	80 e0       	ldi	r24, 0x00	; 0
			else
			{
				return false;
			}
	}
}
     698:	df 91       	pop	r29
     69a:	cf 91       	pop	r28
     69c:	1f 91       	pop	r17
     69e:	0f 91       	pop	r16
     6a0:	08 95       	ret

000006a2 <printStatus>:
	
	PORTD |= 0b11110000;		// Set all CS High
}

static inline void printStatus (char msg_string[])	// Send string on UART
{
     6a2:	cf 92       	push	r12
     6a4:	df 92       	push	r13
     6a6:	ef 92       	push	r14
     6a8:	ff 92       	push	r15
     6aa:	0f 93       	push	r16
     6ac:	1f 93       	push	r17
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
     6b2:	cd b7       	in	r28, 0x3d	; 61
     6b4:	de b7       	in	r29, 0x3e	; 62
     6b6:	a8 97       	sbiw	r28, 0x28	; 40
     6b8:	0f b6       	in	r0, 0x3f	; 63
     6ba:	f8 94       	cli
     6bc:	de bf       	out	0x3e, r29	; 62
     6be:	0f be       	out	0x3f, r0	; 63
     6c0:	cd bf       	out	0x3d, r28	; 61
     6c2:	fc 01       	movw	r30, r24
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
     6c4:	81 e2       	ldi	r24, 0x21	; 33
     6c6:	89 83       	std	Y+1, r24	; 0x01
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
     6c8:	a0 ee       	ldi	r26, 0xE0	; 224
     6ca:	b4 e0       	ldi	r27, 0x04	; 4
     6cc:	11 96       	adiw	r26, 0x01	; 1
     6ce:	8c 91       	ld	r24, X
     6d0:	11 97       	sbiw	r26, 0x01	; 1
     6d2:	8a 83       	std	Y+2, r24	; 0x02
     6d4:	12 96       	adiw	r26, 0x02	; 2
     6d6:	8c 91       	ld	r24, X
     6d8:	12 97       	sbiw	r26, 0x02	; 2
     6da:	8b 83       	std	Y+3, r24	; 0x03
     6dc:	13 96       	adiw	r26, 0x03	; 3
     6de:	8c 91       	ld	r24, X
     6e0:	8c 83       	std	Y+4, r24	; 0x04
     6e2:	cf 01       	movw	r24, r30
     6e4:	ae 01       	movw	r20, r28
     6e6:	4b 5f       	subi	r20, 0xFB	; 251
     6e8:	5f 4f       	sbci	r21, 0xFF	; 255
     6ea:	00 e0       	ldi	r16, 0x00	; 0
     6ec:	10 e0       	ldi	r17, 0x00	; 0
     6ee:	08 c0       	rjmp	.+16     	; 0x700 <printStatus+0x5e>
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
     6f0:	dc 01       	movw	r26, r24
     6f2:	2d 91       	ld	r18, X+
     6f4:	cd 01       	movw	r24, r26
     6f6:	da 01       	movw	r26, r20
     6f8:	2d 93       	st	X+, r18
     6fa:	ad 01       	movw	r20, r26
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
     6fc:	0f 5f       	subi	r16, 0xFF	; 255
     6fe:	1f 4f       	sbci	r17, 0xFF	; 255
     700:	df 01       	movw	r26, r30
     702:	0d 90       	ld	r0, X+
     704:	00 20       	and	r0, r0
     706:	e9 f7       	brne	.-6      	; 0x702 <printStatus+0x60>
     708:	9d 01       	movw	r18, r26
     70a:	2e 1b       	sub	r18, r30
     70c:	3f 0b       	sbc	r19, r31
     70e:	2e 5f       	subi	r18, 0xFE	; 254
     710:	3f 4f       	sbci	r19, 0xFF	; 255
     712:	02 17       	cp	r16, r18
     714:	13 07       	cpc	r17, r19
     716:	60 f3       	brcs	.-40     	; 0x6f0 <printStatus+0x4e>
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
     718:	78 01       	movw	r14, r16
     71a:	bf ef       	ldi	r27, 0xFF	; 255
     71c:	eb 1a       	sub	r14, r27
     71e:	fb 0a       	sbc	r15, r27
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
     720:	1e 14       	cp	r1, r14
     722:	1f 04       	cpc	r1, r15
     724:	0c f0       	brlt	.+2      	; 0x728 <printStatus+0x86>
     726:	d7 c0       	rjmp	.+430    	; 0x8d6 <printStatus+0x234>
     728:	fe 01       	movw	r30, r28
     72a:	31 96       	adiw	r30, 0x01	; 1
     72c:	a7 01       	movw	r20, r14
     72e:	4e 0f       	add	r20, r30
     730:	5f 1f       	adc	r21, r31
     732:	80 e0       	ldi	r24, 0x00	; 0
     734:	90 e0       	ldi	r25, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
     736:	b8 e0       	ldi	r27, 0x08	; 8
     738:	d1 2c       	mov	r13, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
     73a:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
     73c:	29 2f       	mov	r18, r25
     73e:	33 27       	eor	r19, r19
     740:	27 fd       	sbrc	r18, 7
     742:	3a 95       	dec	r19
     744:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
     746:	32 2f       	mov	r19, r18
     748:	22 27       	eor	r18, r18
     74a:	6b 2f       	mov	r22, r27
     74c:	7d 2d       	mov	r23, r13
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
     74e:	33 23       	and	r19, r19
     750:	3c f4       	brge	.+14     	; 0x760 <printStatus+0xbe>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
     752:	22 0f       	add	r18, r18
     754:	33 1f       	adc	r19, r19
     756:	a1 e2       	ldi	r26, 0x21	; 33
     758:	2a 27       	eor	r18, r26
     75a:	a0 e1       	ldi	r26, 0x10	; 16
     75c:	3a 27       	eor	r19, r26
     75e:	02 c0       	rjmp	.+4      	; 0x764 <printStatus+0xc2>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
     760:	22 0f       	add	r18, r18
     762:	33 1f       	adc	r19, r19
     764:	61 50       	subi	r22, 0x01	; 1
     766:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
     768:	91 f7       	brne	.-28     	; 0x74e <printStatus+0xac>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
     76a:	98 2f       	mov	r25, r24
     76c:	88 27       	eor	r24, r24
     76e:	82 27       	eor	r24, r18
     770:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
     772:	e4 17       	cp	r30, r20
     774:	f5 07       	cpc	r31, r21
     776:	09 f7       	brne	.-62     	; 0x73a <printStatus+0x98>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
     778:	6c 01       	movw	r12, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     77a:	40 e1       	ldi	r20, 0x10	; 16
     77c:	60 e1       	ldi	r22, 0x10	; 16
     77e:	74 e0       	ldi	r23, 0x04	; 4
     780:	0e 94 97 21 	call	0x432e	; 0x432e <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
     784:	80 e1       	ldi	r24, 0x10	; 16
     786:	94 e0       	ldi	r25, 0x04	; 4
     788:	0e 94 8d 21 	call	0x431a	; 0x431a <strupr>
	if(crcXmodem < 0x10)
     78c:	b0 e1       	ldi	r27, 0x10	; 16
     78e:	cb 16       	cp	r12, r27
     790:	d1 04       	cpc	r13, r1
     792:	98 f4       	brcc	.+38     	; 0x7ba <printStatus+0x118>
	{
		tx_string[cnt+4] = crc[0];
     794:	80 91 10 04 	lds	r24, 0x0410
     798:	fe 01       	movw	r30, r28
     79a:	e0 0f       	add	r30, r16
     79c:	f1 1f       	adc	r31, r17
     79e:	85 83       	std	Z+5, r24	; 0x05
		tx_string[cnt+3] = '0';
     7a0:	80 e3       	ldi	r24, 0x30	; 48
     7a2:	fe 01       	movw	r30, r28
     7a4:	e0 0f       	add	r30, r16
     7a6:	f1 1f       	adc	r31, r17
     7a8:	84 83       	std	Z+4, r24	; 0x04
		tx_string[cnt+2] = '0';
     7aa:	fe 01       	movw	r30, r28
     7ac:	e0 0f       	add	r30, r16
     7ae:	f1 1f       	adc	r31, r17
     7b0:	83 83       	std	Z+3, r24	; 0x03
		tx_string[cnt+1] = '0';
     7b2:	fe 01       	movw	r30, r28
     7b4:	ee 0d       	add	r30, r14
     7b6:	ff 1d       	adc	r31, r15
     7b8:	81 83       	std	Z+1, r24	; 0x01
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
     7ba:	c6 01       	movw	r24, r12
     7bc:	40 97       	sbiw	r24, 0x10	; 16
     7be:	80 3f       	cpi	r24, 0xF0	; 240
     7c0:	91 05       	cpc	r25, r1
     7c2:	b8 f4       	brcc	.+46     	; 0x7f2 <printStatus+0x150>
	{
		tx_string[cnt+4] = crc[1];
     7c4:	a0 e1       	ldi	r26, 0x10	; 16
     7c6:	b4 e0       	ldi	r27, 0x04	; 4
     7c8:	11 96       	adiw	r26, 0x01	; 1
     7ca:	8c 91       	ld	r24, X
     7cc:	11 97       	sbiw	r26, 0x01	; 1
     7ce:	fe 01       	movw	r30, r28
     7d0:	e0 0f       	add	r30, r16
     7d2:	f1 1f       	adc	r31, r17
     7d4:	85 83       	std	Z+5, r24	; 0x05
		tx_string[cnt+3] = crc[0];
     7d6:	8c 91       	ld	r24, X
     7d8:	fe 01       	movw	r30, r28
     7da:	e0 0f       	add	r30, r16
     7dc:	f1 1f       	adc	r31, r17
     7de:	84 83       	std	Z+4, r24	; 0x04
		tx_string[cnt+2] = '0';
     7e0:	80 e3       	ldi	r24, 0x30	; 48
     7e2:	fe 01       	movw	r30, r28
     7e4:	e0 0f       	add	r30, r16
     7e6:	f1 1f       	adc	r31, r17
     7e8:	83 83       	std	Z+3, r24	; 0x03
		tx_string[cnt+1] = '0';		
     7ea:	fe 01       	movw	r30, r28
     7ec:	ee 0d       	add	r30, r14
     7ee:	ff 1d       	adc	r31, r15
     7f0:	81 83       	std	Z+1, r24	; 0x01
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
     7f2:	c6 01       	movw	r24, r12
     7f4:	9a 95       	dec	r25
     7f6:	81 15       	cp	r24, r1
     7f8:	9f 40       	sbci	r25, 0x0F	; 15
     7fa:	b8 f4       	brcc	.+46     	; 0x82a <printStatus+0x188>
	{
		tx_string[cnt+4] = crc[2];
     7fc:	e0 e1       	ldi	r30, 0x10	; 16
     7fe:	f4 e0       	ldi	r31, 0x04	; 4
     800:	82 81       	ldd	r24, Z+2	; 0x02
     802:	de 01       	movw	r26, r28
     804:	a0 0f       	add	r26, r16
     806:	b1 1f       	adc	r27, r17
     808:	15 96       	adiw	r26, 0x05	; 5
     80a:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[1];
     80c:	81 81       	ldd	r24, Z+1	; 0x01
     80e:	de 01       	movw	r26, r28
     810:	a0 0f       	add	r26, r16
     812:	b1 1f       	adc	r27, r17
     814:	14 96       	adiw	r26, 0x04	; 4
     816:	8c 93       	st	X, r24
     818:	14 97       	sbiw	r26, 0x04	; 4
		tx_string[cnt+2] = crc[0];
     81a:	80 81       	ld	r24, Z
     81c:	fd 01       	movw	r30, r26
     81e:	83 83       	std	Z+3, r24	; 0x03
		tx_string[cnt+1] = '0';		
     820:	80 e3       	ldi	r24, 0x30	; 48
     822:	fe 01       	movw	r30, r28
     824:	ee 0d       	add	r30, r14
     826:	ff 1d       	adc	r31, r15
     828:	81 83       	std	Z+1, r24	; 0x01
	}
	if(crcXmodem >= 0x1000)
     82a:	c1 14       	cp	r12, r1
     82c:	80 e1       	ldi	r24, 0x10	; 16
     82e:	d8 06       	cpc	r13, r24
     830:	c0 f0       	brcs	.+48     	; 0x862 <printStatus+0x1c0>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
     832:	de 01       	movw	r26, r28
     834:	ae 0d       	add	r26, r14
     836:	bf 1d       	adc	r27, r15
     838:	e0 e1       	ldi	r30, 0x10	; 16
     83a:	f4 e0       	ldi	r31, 0x04	; 4
     83c:	80 81       	ld	r24, Z
     83e:	11 96       	adiw	r26, 0x01	; 1
     840:	8c 93       	st	X, r24
		tx_string[cnt+2] = crc[1];
     842:	81 81       	ldd	r24, Z+1	; 0x01
     844:	de 01       	movw	r26, r28
     846:	a0 0f       	add	r26, r16
     848:	b1 1f       	adc	r27, r17
     84a:	13 96       	adiw	r26, 0x03	; 3
     84c:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[2];
     84e:	82 81       	ldd	r24, Z+2	; 0x02
     850:	de 01       	movw	r26, r28
     852:	a0 0f       	add	r26, r16
     854:	b1 1f       	adc	r27, r17
     856:	14 96       	adiw	r26, 0x04	; 4
     858:	8c 93       	st	X, r24
     85a:	14 97       	sbiw	r26, 0x04	; 4
		tx_string[cnt+4] = crc[3];
     85c:	83 81       	ldd	r24, Z+3	; 0x03
     85e:	fd 01       	movw	r30, r26
     860:	85 83       	std	Z+5, r24	; 0x05
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
     862:	c8 01       	movw	r24, r16
     864:	05 96       	adiw	r24, 0x05	; 5
     866:	fe 01       	movw	r30, r28
     868:	e8 0f       	add	r30, r24
     86a:	f9 1f       	adc	r31, r25
     86c:	2d e0       	ldi	r18, 0x0D	; 13
     86e:	21 83       	std	Z+1, r18	; 0x01
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
     870:	99 23       	and	r25, r25
     872:	0c f4       	brge	.+2      	; 0x876 <printStatus+0x1d4>
     874:	3e c0       	rjmp	.+124    	; 0x8f2 <printStatus+0x250>
     876:	ae 01       	movw	r20, r28
     878:	4f 5f       	subi	r20, 0xFF	; 255
     87a:	5f 4f       	sbci	r21, 0xFF	; 255
     87c:	0a 5f       	subi	r16, 0xFA	; 250
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	04 0f       	add	r16, r20
     882:	15 1f       	adc	r17, r21
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
     884:	ee ef       	ldi	r30, 0xFE	; 254
     886:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
     888:	61 ec       	ldi	r22, 0xC1	; 193
     88a:	70 e0       	ldi	r23, 0x00	; 0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     88c:	30 e0       	ldi	r19, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
     88e:	da 01       	movw	r26, r20
     890:	8d 91       	ld	r24, X+
     892:	ad 01       	movw	r20, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
     894:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
     896:	21 81       	ldd	r18, Z+1	; 0x01
     898:	90 81       	ld	r25, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
     89a:	29 13       	cpse	r18, r25
     89c:	04 c0       	rjmp	.+8      	; 0x8a6 <printStatus+0x204>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
     89e:	db 01       	movw	r26, r22
     8a0:	9c 91       	ld	r25, X
     8a2:	90 62       	ori	r25, 0x20	; 32
     8a4:	9c 93       	st	X, r25
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
     8a6:	90 81       	ld	r25, Z
     8a8:	a3 81       	ldd	r26, Z+3	; 0x03
     8aa:	b4 81       	ldd	r27, Z+4	; 0x04
     8ac:	a9 0f       	add	r26, r25
     8ae:	b1 1d       	adc	r27, r1
     8b0:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
     8b2:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     8b4:	a2 2f       	mov	r26, r18
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	82 81       	ldd	r24, Z+2	; 0x02
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	01 97       	sbiw	r24, 0x01	; 1
     8be:	a8 17       	cp	r26, r24
     8c0:	b9 07       	cpc	r27, r25
     8c2:	11 f0       	breq	.+4      	; 0x8c8 <printStatus+0x226>
     8c4:	2f 5f       	subi	r18, 0xFF	; 255
     8c6:	01 c0       	rjmp	.+2      	; 0x8ca <printStatus+0x228>
     8c8:	23 2f       	mov	r18, r19
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
     8ca:	20 83       	st	Z, r18
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
     8cc:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
     8ce:	40 17       	cp	r20, r16
     8d0:	51 07       	cpc	r21, r17
     8d2:	e9 f6       	brne	.-70     	; 0x88e <printStatus+0x1ec>
     8d4:	0e c0       	rjmp	.+28     	; 0x8f2 <printStatus+0x250>
     8d6:	40 e1       	ldi	r20, 0x10	; 16
     8d8:	60 e1       	ldi	r22, 0x10	; 16
     8da:	74 e0       	ldi	r23, 0x04	; 4
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	0e 94 97 21 	call	0x432e	; 0x432e <__itoa_ncheck>
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
     8e4:	80 e1       	ldi	r24, 0x10	; 16
     8e6:	94 e0       	ldi	r25, 0x04	; 4
     8e8:	0e 94 8d 21 	call	0x431a	; 0x431a <strupr>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
     8ec:	c1 2c       	mov	r12, r1
     8ee:	d1 2c       	mov	r13, r1
     8f0:	51 cf       	rjmp	.-350    	; 0x794 <printStatus+0xf2>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
	}	
}
     8f2:	a8 96       	adiw	r28, 0x28	; 40
     8f4:	0f b6       	in	r0, 0x3f	; 63
     8f6:	f8 94       	cli
     8f8:	de bf       	out	0x3e, r29	; 62
     8fa:	0f be       	out	0x3f, r0	; 63
     8fc:	cd bf       	out	0x3d, r28	; 61
     8fe:	df 91       	pop	r29
     900:	cf 91       	pop	r28
     902:	1f 91       	pop	r17
     904:	0f 91       	pop	r16
     906:	ff 90       	pop	r15
     908:	ef 90       	pop	r14
     90a:	df 90       	pop	r13
     90c:	cf 90       	pop	r12
     90e:	08 95       	ret

00000910 <__vector_19>:
 *
 * This handler is called each time the UART data register is available for
 * sending data.
 */
ISR(UART0_DATA_EMPTY_IRQ)
{
     910:	1f 92       	push	r1
     912:	0f 92       	push	r0
     914:	0f b6       	in	r0, 0x3f	; 63
     916:	0f 92       	push	r0
     918:	11 24       	eor	r1, r1
     91a:	2f 93       	push	r18
     91c:	3f 93       	push	r19
     91e:	4f 93       	push	r20
     920:	5f 93       	push	r21
     922:	8f 93       	push	r24
     924:	9f 93       	push	r25
     926:	af 93       	push	r26
     928:	bf 93       	push	r27
     92a:	ef 93       	push	r30
     92c:	ff 93       	push	r31
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
     92e:	ee ef       	ldi	r30, 0xFE	; 254
     930:	f4 e0       	ldi	r31, 0x04	; 4
     932:	91 81       	ldd	r25, Z+1	; 0x01
     934:	80 81       	ld	r24, Z
	// if there is data in the ring buffer, fetch it and send it
	if (!ring_buffer_is_empty(&ring_buffer_out))
     936:	98 17       	cp	r25, r24
     938:	b9 f0       	breq	.+46     	; 0x968 <__vector_19+0x58>
 * \returns next data byte in buffer
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
     93a:	81 81       	ldd	r24, Z+1	; 0x01
     93c:	a3 81       	ldd	r26, Z+3	; 0x03
     93e:	b4 81       	ldd	r27, Z+4	; 0x04
     940:	a8 0f       	add	r26, r24
     942:	b1 1d       	adc	r27, r1
     944:	3c 91       	ld	r19, X
 *
 * \returns the next read offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_read(const struct ring_buffer *ring)
{
	return get_next(ring->read_offset, ring->size);
     946:	21 81       	ldd	r18, Z+1	; 0x01
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     948:	42 2f       	mov	r20, r18
     94a:	50 e0       	ldi	r21, 0x00	; 0
     94c:	82 81       	ldd	r24, Z+2	; 0x02
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	01 97       	sbiw	r24, 0x01	; 1
     952:	48 17       	cp	r20, r24
     954:	59 07       	cpc	r21, r25
     956:	11 f0       	breq	.+4      	; 0x95c <__vector_19+0x4c>
     958:	2f 5f       	subi	r18, 0xFF	; 255
     95a:	01 c0       	rjmp	.+2      	; 0x95e <__vector_19+0x4e>
     95c:	20 e0       	ldi	r18, 0x00	; 0
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
	ring->read_offset = ring_buffer_get_next_read(ring);
     95e:	20 93 ff 04 	sts	0x04FF, r18
	{
		UDR0 = ring_buffer_get(&ring_buffer_out);
     962:	30 93 c6 00 	sts	0x00C6, r19
     966:	05 c0       	rjmp	.+10     	; 0x972 <__vector_19+0x62>
	}
	else 
	{
		// no more data to send, turn off data ready interrupt
		UCSR0B &= ~(1 << UDRIE0);
     968:	e1 ec       	ldi	r30, 0xC1	; 193
     96a:	f0 e0       	ldi	r31, 0x00	; 0
     96c:	80 81       	ld	r24, Z
     96e:	8f 7d       	andi	r24, 0xDF	; 223
     970:	80 83       	st	Z, r24
	}
}
     972:	ff 91       	pop	r31
     974:	ef 91       	pop	r30
     976:	bf 91       	pop	r27
     978:	af 91       	pop	r26
     97a:	9f 91       	pop	r25
     97c:	8f 91       	pop	r24
     97e:	5f 91       	pop	r21
     980:	4f 91       	pop	r20
     982:	3f 91       	pop	r19
     984:	2f 91       	pop	r18
     986:	0f 90       	pop	r0
     988:	0f be       	out	0x3f, r0	; 63
     98a:	0f 90       	pop	r0
     98c:	1f 90       	pop	r1
     98e:	18 95       	reti

00000990 <__vector_18>:
 * \brief Data RX interrupt handler
 *
 * This is the handler for UART receive data
 */
ISR(UART0_RX_IRQ)
{
     990:	1f 92       	push	r1
     992:	0f 92       	push	r0
     994:	0f b6       	in	r0, 0x3f	; 63
     996:	0f 92       	push	r0
     998:	11 24       	eor	r1, r1
     99a:	2f 93       	push	r18
     99c:	4f 93       	push	r20
     99e:	5f 93       	push	r21
     9a0:	8f 93       	push	r24
     9a2:	9f 93       	push	r25
     9a4:	af 93       	push	r26
     9a6:	bf 93       	push	r27
     9a8:	ef 93       	push	r30
     9aa:	ff 93       	push	r31
	ring_buffer_put(&ring_buffer_in, UDR0);
     9ac:	80 91 c6 00 	lds	r24, 0x00C6
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
     9b0:	e5 e1       	ldi	r30, 0x15	; 21
     9b2:	f4 e0       	ldi	r31, 0x04	; 4
     9b4:	90 81       	ld	r25, Z
     9b6:	a3 81       	ldd	r26, Z+3	; 0x03
     9b8:	b4 81       	ldd	r27, Z+4	; 0x04
     9ba:	a9 0f       	add	r26, r25
     9bc:	b1 1d       	adc	r27, r1
     9be:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
     9c0:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     9c2:	42 2f       	mov	r20, r18
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	82 81       	ldd	r24, Z+2	; 0x02
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	01 97       	sbiw	r24, 0x01	; 1
     9cc:	48 17       	cp	r20, r24
     9ce:	59 07       	cpc	r21, r25
     9d0:	11 f0       	breq	.+4      	; 0x9d6 <__vector_18+0x46>
     9d2:	2f 5f       	subi	r18, 0xFF	; 255
     9d4:	01 c0       	rjmp	.+2      	; 0x9d8 <__vector_18+0x48>
     9d6:	20 e0       	ldi	r18, 0x00	; 0
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
     9d8:	20 93 15 04 	sts	0x0415, r18
}
     9dc:	ff 91       	pop	r31
     9de:	ef 91       	pop	r30
     9e0:	bf 91       	pop	r27
     9e2:	af 91       	pop	r26
     9e4:	9f 91       	pop	r25
     9e6:	8f 91       	pop	r24
     9e8:	5f 91       	pop	r21
     9ea:	4f 91       	pop	r20
     9ec:	2f 91       	pop	r18
     9ee:	0f 90       	pop	r0
     9f0:	0f be       	out	0x3f, r0	; 63
     9f2:	0f 90       	pop	r0
     9f4:	1f 90       	pop	r1
     9f6:	18 95       	reti

000009f8 <__vector_14>:
	
	sei();
}

ISR(TIMER0_COMPA_vect)	// PWM output Irq
{
     9f8:	1f 92       	push	r1
     9fa:	0f 92       	push	r0
     9fc:	0f b6       	in	r0, 0x3f	; 63
     9fe:	0f 92       	push	r0
     a00:	11 24       	eor	r1, r1
     a02:	2f 93       	push	r18
     a04:	3f 93       	push	r19
     a06:	8f 93       	push	r24
     a08:	9f 93       	push	r25
     a0a:	ef 93       	push	r30
     a0c:	ff 93       	push	r31
	ch0.pwmCnt++;
     a0e:	e8 e7       	ldi	r30, 0x78	; 120
     a10:	f4 e0       	ldi	r31, 0x04	; 4
     a12:	80 81       	ld	r24, Z
     a14:	91 81       	ldd	r25, Z+1	; 0x01
     a16:	01 96       	adiw	r24, 0x01	; 1
     a18:	91 83       	std	Z+1, r25	; 0x01
     a1a:	80 83       	st	Z, r24
	if(ch0.pwmCnt < ch0.pwm )
     a1c:	20 81       	ld	r18, Z
     a1e:	31 81       	ldd	r19, Z+1	; 0x01
     a20:	80 91 7a 04 	lds	r24, 0x047A
     a24:	90 91 7b 04 	lds	r25, 0x047B
     a28:	28 17       	cp	r18, r24
     a2a:	39 07       	cpc	r19, r25
     a2c:	34 f4       	brge	.+12     	; 0xa3a <__vector_14+0x42>
static inline void SetHeaterOutputON(uint8_t ch)
{
	switch (ch)
	{
		case 0:
			if(ch0.heaterEnable)
     a2e:	80 91 7c 04 	lds	r24, 0x047C
     a32:	88 23       	and	r24, r24
     a34:	19 f0       	breq	.+6      	; 0xa3c <__vector_14+0x44>
			{
				PORTC |= 0b00000001;
     a36:	40 9a       	sbi	0x08, 0	; 8
     a38:	01 c0       	rjmp	.+2      	; 0xa3c <__vector_14+0x44>
	{
		SetHeaterOutputON(0);
	}
	else
	{
		PORTC &= 0b11111110;
     a3a:	40 98       	cbi	0x08, 0	; 8
	}
	if(ch0.pwmCnt >= 100)
     a3c:	80 91 78 04 	lds	r24, 0x0478
     a40:	90 91 79 04 	lds	r25, 0x0479
     a44:	84 36       	cpi	r24, 0x64	; 100
     a46:	91 05       	cpc	r25, r1
     a48:	24 f0       	brlt	.+8      	; 0xa52 <__vector_14+0x5a>
	{
		ch0.pwmCnt = 0;
     a4a:	10 92 79 04 	sts	0x0479, r1
     a4e:	10 92 78 04 	sts	0x0478, r1
	}
	
	ch1.pwmCnt++;
     a52:	eb ed       	ldi	r30, 0xDB	; 219
     a54:	f4 e0       	ldi	r31, 0x04	; 4
     a56:	80 81       	ld	r24, Z
     a58:	91 81       	ldd	r25, Z+1	; 0x01
     a5a:	01 96       	adiw	r24, 0x01	; 1
     a5c:	91 83       	std	Z+1, r25	; 0x01
     a5e:	80 83       	st	Z, r24
	if(ch1.pwmCnt < ch1.pwm )
     a60:	20 81       	ld	r18, Z
     a62:	31 81       	ldd	r19, Z+1	; 0x01
     a64:	80 91 dd 04 	lds	r24, 0x04DD
     a68:	90 91 de 04 	lds	r25, 0x04DE
     a6c:	28 17       	cp	r18, r24
     a6e:	39 07       	cpc	r19, r25
     a70:	34 f4       	brge	.+12     	; 0xa7e <__vector_14+0x86>
				PORTC |= 0b00000001;
			}
			break;
	
		case 1:
			if(ch1.heaterEnable)
     a72:	80 91 df 04 	lds	r24, 0x04DF
     a76:	88 23       	and	r24, r24
     a78:	19 f0       	breq	.+6      	; 0xa80 <__vector_14+0x88>
			{
				PORTC |= 0b00000010;	
     a7a:	41 9a       	sbi	0x08, 1	; 8
     a7c:	01 c0       	rjmp	.+2      	; 0xa80 <__vector_14+0x88>
	{
		SetHeaterOutputON(1);
	}
	else
	{
		PORTC &= 0b11111101;
     a7e:	41 98       	cbi	0x08, 1	; 8
	}
	if(ch1.pwmCnt >= 100)
     a80:	80 91 db 04 	lds	r24, 0x04DB
     a84:	90 91 dc 04 	lds	r25, 0x04DC
     a88:	84 36       	cpi	r24, 0x64	; 100
     a8a:	91 05       	cpc	r25, r1
     a8c:	24 f0       	brlt	.+8      	; 0xa96 <__vector_14+0x9e>
	{
		ch1.pwmCnt = 0;
     a8e:	10 92 dc 04 	sts	0x04DC, r1
     a92:	10 92 db 04 	sts	0x04DB, r1
	}
	
	ch2.pwmCnt++;
     a96:	e9 e0       	ldi	r30, 0x09	; 9
     a98:	f3 e0       	ldi	r31, 0x03	; 3
     a9a:	80 81       	ld	r24, Z
     a9c:	91 81       	ldd	r25, Z+1	; 0x01
     a9e:	01 96       	adiw	r24, 0x01	; 1
     aa0:	91 83       	std	Z+1, r25	; 0x01
     aa2:	80 83       	st	Z, r24
	if(ch2.pwmCnt < ch2.pwm )
     aa4:	20 81       	ld	r18, Z
     aa6:	31 81       	ldd	r19, Z+1	; 0x01
     aa8:	80 91 0b 03 	lds	r24, 0x030B
     aac:	90 91 0c 03 	lds	r25, 0x030C
     ab0:	28 17       	cp	r18, r24
     ab2:	39 07       	cpc	r19, r25
     ab4:	34 f4       	brge	.+12     	; 0xac2 <__vector_14+0xca>
				PORTC |= 0b00000010;	
			}
			break;

		case 2:
			if(ch2.heaterEnable)
     ab6:	80 91 0d 03 	lds	r24, 0x030D
     aba:	88 23       	and	r24, r24
     abc:	19 f0       	breq	.+6      	; 0xac4 <__vector_14+0xcc>
			{
				PORTC |= 0b00000100;
     abe:	42 9a       	sbi	0x08, 2	; 8
     ac0:	01 c0       	rjmp	.+2      	; 0xac4 <__vector_14+0xcc>
	{
		SetHeaterOutputON(2);
	}
	else
	{
		PORTC &= 0b11111011;
     ac2:	42 98       	cbi	0x08, 2	; 8
	}
	if(ch2.pwmCnt >= 100)
     ac4:	80 91 09 03 	lds	r24, 0x0309
     ac8:	90 91 0a 03 	lds	r25, 0x030A
     acc:	84 36       	cpi	r24, 0x64	; 100
     ace:	91 05       	cpc	r25, r1
     ad0:	24 f0       	brlt	.+8      	; 0xada <__vector_14+0xe2>
	{
		ch2.pwmCnt = 0;
     ad2:	10 92 0a 03 	sts	0x030A, r1
     ad6:	10 92 09 03 	sts	0x0309, r1
	}
	
	ch3.pwmCnt++;
     ada:	e4 ea       	ldi	r30, 0xA4	; 164
     adc:	f1 e0       	ldi	r31, 0x01	; 1
     ade:	80 81       	ld	r24, Z
     ae0:	91 81       	ldd	r25, Z+1	; 0x01
     ae2:	01 96       	adiw	r24, 0x01	; 1
     ae4:	91 83       	std	Z+1, r25	; 0x01
     ae6:	80 83       	st	Z, r24
	if(ch3.pwmCnt < ch3.pwm )
     ae8:	20 81       	ld	r18, Z
     aea:	31 81       	ldd	r19, Z+1	; 0x01
     aec:	80 91 a6 01 	lds	r24, 0x01A6
     af0:	90 91 a7 01 	lds	r25, 0x01A7
     af4:	28 17       	cp	r18, r24
     af6:	39 07       	cpc	r19, r25
     af8:	34 f4       	brge	.+12     	; 0xb06 <__vector_14+0x10e>
				PORTC |= 0b00000100;
			}
			break;

		case 3:
			if(ch3.heaterEnable)
     afa:	80 91 a8 01 	lds	r24, 0x01A8
     afe:	88 23       	and	r24, r24
     b00:	19 f0       	breq	.+6      	; 0xb08 <__vector_14+0x110>
			{
				PORTC |= 0b00001000;	
     b02:	43 9a       	sbi	0x08, 3	; 8
     b04:	01 c0       	rjmp	.+2      	; 0xb08 <__vector_14+0x110>
	{
		SetHeaterOutputON(3);
	}
	else
	{
		PORTC &= 0b11110111;
     b06:	43 98       	cbi	0x08, 3	; 8
	}
	if(ch3.pwmCnt >= 100)
     b08:	80 91 a4 01 	lds	r24, 0x01A4
     b0c:	90 91 a5 01 	lds	r25, 0x01A5
     b10:	84 36       	cpi	r24, 0x64	; 100
     b12:	91 05       	cpc	r25, r1
     b14:	24 f0       	brlt	.+8      	; 0xb1e <__vector_14+0x126>
	{
		ch3.pwmCnt = 0;
     b16:	10 92 a5 01 	sts	0x01A5, r1
     b1a:	10 92 a4 01 	sts	0x01A4, r1
	}

}
     b1e:	ff 91       	pop	r31
     b20:	ef 91       	pop	r30
     b22:	9f 91       	pop	r25
     b24:	8f 91       	pop	r24
     b26:	3f 91       	pop	r19
     b28:	2f 91       	pop	r18
     b2a:	0f 90       	pop	r0
     b2c:	0f be       	out	0x3f, r0	; 63
     b2e:	0f 90       	pop	r0
     b30:	1f 90       	pop	r1
     b32:	18 95       	reti

00000b34 <__vector_7>:

ISR(TIMER2_COMPA_vect)	// PID Controller Irq
{
     b34:	1f 92       	push	r1
     b36:	0f 92       	push	r0
     b38:	0f b6       	in	r0, 0x3f	; 63
     b3a:	0f 92       	push	r0
     b3c:	11 24       	eor	r1, r1
     b3e:	cf 92       	push	r12
     b40:	df 92       	push	r13
     b42:	ef 92       	push	r14
     b44:	ff 92       	push	r15
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	2f 93       	push	r18
     b4c:	3f 93       	push	r19
     b4e:	4f 93       	push	r20
     b50:	5f 93       	push	r21
     b52:	6f 93       	push	r22
     b54:	7f 93       	push	r23
     b56:	8f 93       	push	r24
     b58:	9f 93       	push	r25
     b5a:	af 93       	push	r26
     b5c:	bf 93       	push	r27
     b5e:	cf 93       	push	r28
     b60:	df 93       	push	r29
     b62:	ef 93       	push	r30
     b64:	ff 93       	push	r31
	sei();	// Enable nested interrupt
     b66:	78 94       	sei
	PORTD |= statusLed;
     b68:	5b 9a       	sbi	0x0b, 3	; 11
static inline unsigned char SPIread( unsigned char byteword, unsigned char ch)
{
	switch (ch)
	{
		case 1:
		PORTD &= 0b11101111;	// Set CS1 low
     b6a:	5c 98       	cbi	0x0b, 4	; 11
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     b70:	0d b4       	in	r0, 0x2d	; 45
     b72:	07 fe       	sbrs	r0, 7
     b74:	fd cf       	rjmp	.-6      	; 0xb70 <__vector_7+0x3c>
	byteword=SPDR;				//just for clearing SPIF
     b76:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
     b78:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     b7a:	0d b4       	in	r0, 0x2d	; 45
     b7c:	07 fe       	sbrs	r0, 7
     b7e:	fd cf       	rjmp	.-6      	; 0xb7a <__vector_7+0x46>
	byteword=SPDR;
     b80:	9e b5       	in	r25, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
     b82:	8b b1       	in	r24, 0x0b	; 11
     b84:	80 6f       	ori	r24, 0xF0	; 240
     b86:	8b b9       	out	0x0b, r24	; 11
static inline unsigned char SPIread( unsigned char byteword, unsigned char ch)
{
	switch (ch)
	{
		case 1:
		PORTD &= 0b11101111;	// Set CS1 low
     b88:	5c 98       	cbi	0x0b, 4	; 11
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
     b8a:	82 e0       	ldi	r24, 0x02	; 2
     b8c:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     b8e:	0d b4       	in	r0, 0x2d	; 45
     b90:	07 fe       	sbrs	r0, 7
     b92:	fd cf       	rjmp	.-6      	; 0xb8e <__vector_7+0x5a>
	byteword=SPDR;				//just for clearing SPIF
     b94:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
     b96:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     b98:	0d b4       	in	r0, 0x2d	; 45
     b9a:	07 fe       	sbrs	r0, 7
     b9c:	fd cf       	rjmp	.-6      	; 0xb98 <__vector_7+0x64>
	byteword=SPDR;
     b9e:	6e b5       	in	r22, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
     ba0:	8b b1       	in	r24, 0x0b	; 11
     ba2:	80 6f       	ori	r24, 0xF0	; 240
     ba4:	8b b9       	out	0x0b, r24	; 11
	uint8_t u8_msb = 0;
	uint8_t u8_lsb = 0;
	
	u8_msb = SPIread(0x01, ch);
	u8_lsb = SPIread(0x02, ch);
	adc_code = (((u8_msb << 8) | u8_lsb) >> 1);
     ba6:	70 e0       	ldi	r23, 0x00	; 0
     ba8:	79 2b       	or	r23, r25
     baa:	75 95       	asr	r23
     bac:	67 95       	ror	r22
	return ((float)adc_code / 32.0 - 256.0);
     bae:	07 2e       	mov	r0, r23
     bb0:	00 0c       	add	r0, r0
     bb2:	88 0b       	sbc	r24, r24
     bb4:	99 0b       	sbc	r25, r25
     bb6:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <__floatsisf>
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	40 e0       	ldi	r20, 0x00	; 0
     bc0:	5d e3       	ldi	r21, 0x3D	; 61
     bc2:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <__mulsf3>
     bc6:	20 e0       	ldi	r18, 0x00	; 0
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	40 e8       	ldi	r20, 0x80	; 128
     bcc:	53 e4       	ldi	r21, 0x43	; 67
     bce:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__subsf3>
	PORTD &= 0b11110111;						// Turn off LED on PCB (Irq call freq: 16MHz / 1024 / 255 = 61.3 Hz )
}

static inline void PIDctrl(channel *ch, int tempSensor)
{
	ch->TempSensor = ReadTempSensor(tempSensor);
     bd2:	ea e1       	ldi	r30, 0x1A	; 26
     bd4:	f4 e0       	ldi	r31, 0x04	; 4
     bd6:	64 83       	std	Z+4, r22	; 0x04
     bd8:	75 83       	std	Z+5, r23	; 0x05
     bda:	86 83       	std	Z+6, r24	; 0x06
     bdc:	97 83       	std	Z+7, r25	; 0x07
	if(ch->TempSensor > (float)maxAllowedTemp)								// Max temperature limit
     bde:	64 81       	ldd	r22, Z+4	; 0x04
     be0:	75 81       	ldd	r23, Z+5	; 0x05
     be2:	86 81       	ldd	r24, Z+6	; 0x06
     be4:	97 81       	ldd	r25, Z+7	; 0x07
     be6:	20 e0       	ldi	r18, 0x00	; 0
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	40 ef       	ldi	r20, 0xF0	; 240
     bec:	52 e4       	ldi	r21, 0x42	; 66
     bee:	0e 94 67 20 	call	0x40ce	; 0x40ce <__gesf2>
     bf2:	18 16       	cp	r1, r24
     bf4:	2c f4       	brge	.+10     	; 0xc00 <__vector_7+0xcc>
	{
		ch->heaterEnable = false;
     bf6:	10 92 7c 04 	sts	0x047C, r1
		PORTC &= allHeaterOff;
     bfa:	88 b1       	in	r24, 0x08	; 8
     bfc:	80 7f       	andi	r24, 0xF0	; 240
     bfe:	88 b9       	out	0x08, r24	; 8
	}

	ch->TempError[CtrlErrorIdx] = ch->TempSetPoint - ch->TempSensor;		// Control error
     c00:	00 91 44 01 	lds	r16, 0x0144
     c04:	10 91 45 01 	lds	r17, 0x0145
     c08:	ca e1       	ldi	r28, 0x1A	; 26
     c0a:	d4 e0       	ldi	r29, 0x04	; 4
     c0c:	68 81       	ld	r22, Y
     c0e:	79 81       	ldd	r23, Y+1	; 0x01
     c10:	8a 81       	ldd	r24, Y+2	; 0x02
     c12:	9b 81       	ldd	r25, Y+3	; 0x03
     c14:	2c 81       	ldd	r18, Y+4	; 0x04
     c16:	3d 81       	ldd	r19, Y+5	; 0x05
     c18:	4e 81       	ldd	r20, Y+6	; 0x06
     c1a:	5f 81       	ldd	r21, Y+7	; 0x07
     c1c:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__subsf3>
     c20:	00 0f       	add	r16, r16
     c22:	11 1f       	adc	r17, r17
     c24:	00 0f       	add	r16, r16
     c26:	11 1f       	adc	r17, r17
     c28:	f8 01       	movw	r30, r16
     c2a:	ee 5b       	subi	r30, 0xBE	; 190
     c2c:	fb 4f       	sbci	r31, 0xFB	; 251
     c2e:	60 83       	st	Z, r22
     c30:	71 83       	std	Z+1, r23	; 0x01
     c32:	82 83       	std	Z+2, r24	; 0x02
     c34:	93 83       	std	Z+3, r25	; 0x03
	
	ch->P_err = ch->TempError[CtrlErrorIdx] * ch->Pgain;					// P error
     c36:	e0 91 44 01 	lds	r30, 0x0144
     c3a:	f0 91 45 01 	lds	r31, 0x0145
     c3e:	ee 0f       	add	r30, r30
     c40:	ff 1f       	adc	r31, r31
     c42:	ee 0f       	add	r30, r30
     c44:	ff 1f       	adc	r31, r31
     c46:	ee 5b       	subi	r30, 0xBE	; 190
     c48:	fb 4f       	sbci	r31, 0xFB	; 251
     c4a:	60 81       	ld	r22, Z
     c4c:	71 81       	ldd	r23, Z+1	; 0x01
     c4e:	82 81       	ldd	r24, Z+2	; 0x02
     c50:	93 81       	ldd	r25, Z+3	; 0x03
     c52:	2c 8d       	ldd	r18, Y+28	; 0x1c
     c54:	3d 8d       	ldd	r19, Y+29	; 0x1d
     c56:	4e 8d       	ldd	r20, Y+30	; 0x1e
     c58:	5f 8d       	ldd	r21, Y+31	; 0x1f
     c5a:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <__mulsf3>
     c5e:	68 87       	std	Y+8, r22	; 0x08
     c60:	79 87       	std	Y+9, r23	; 0x09
     c62:	8a 87       	std	Y+10, r24	; 0x0a
     c64:	9b 87       	std	Y+11, r25	; 0x0b
	ch->I_err = ch->I_err + (ch->TempError[CtrlErrorIdx] * ch->Igain);		// I error
     c66:	cc 84       	ldd	r12, Y+12	; 0x0c
     c68:	dd 84       	ldd	r13, Y+13	; 0x0d
     c6a:	ee 84       	ldd	r14, Y+14	; 0x0e
     c6c:	ff 84       	ldd	r15, Y+15	; 0x0f
     c6e:	e0 91 44 01 	lds	r30, 0x0144
     c72:	f0 91 45 01 	lds	r31, 0x0145
     c76:	ee 0f       	add	r30, r30
     c78:	ff 1f       	adc	r31, r31
     c7a:	ee 0f       	add	r30, r30
     c7c:	ff 1f       	adc	r31, r31
     c7e:	ee 5b       	subi	r30, 0xBE	; 190
     c80:	fb 4f       	sbci	r31, 0xFB	; 251
     c82:	60 81       	ld	r22, Z
     c84:	71 81       	ldd	r23, Z+1	; 0x01
     c86:	82 81       	ldd	r24, Z+2	; 0x02
     c88:	93 81       	ldd	r25, Z+3	; 0x03
     c8a:	28 a1       	ldd	r18, Y+32	; 0x20
     c8c:	39 a1       	ldd	r19, Y+33	; 0x21
     c8e:	4a a1       	ldd	r20, Y+34	; 0x22
     c90:	5b a1       	ldd	r21, Y+35	; 0x23
     c92:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <__mulsf3>
     c96:	9b 01       	movw	r18, r22
     c98:	ac 01       	movw	r20, r24
     c9a:	c7 01       	movw	r24, r14
     c9c:	b6 01       	movw	r22, r12
     c9e:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__addsf3>
     ca2:	6c 87       	std	Y+12, r22	; 0x0c
     ca4:	7d 87       	std	Y+13, r23	; 0x0d
     ca6:	8e 87       	std	Y+14, r24	; 0x0e
     ca8:	9f 87       	std	Y+15, r25	; 0x0f
	if(ch->I_err > integralErrorLimit)
     caa:	6c 85       	ldd	r22, Y+12	; 0x0c
     cac:	7d 85       	ldd	r23, Y+13	; 0x0d
     cae:	8e 85       	ldd	r24, Y+14	; 0x0e
     cb0:	9f 85       	ldd	r25, Y+15	; 0x0f
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	40 e2       	ldi	r20, 0x20	; 32
     cb8:	51 e4       	ldi	r21, 0x41	; 65
     cba:	0e 94 67 20 	call	0x40ce	; 0x40ce <__gesf2>
     cbe:	18 16       	cp	r1, r24
     cc0:	64 f4       	brge	.+24     	; 0xcda <__vector_7+0x1a6>
	{
		ch->I_err = integralErrorLimit;
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	a0 e2       	ldi	r26, 0x20	; 32
     cc8:	b1 e4       	ldi	r27, 0x41	; 65
     cca:	80 93 26 04 	sts	0x0426, r24
     cce:	90 93 27 04 	sts	0x0427, r25
     cd2:	a0 93 28 04 	sts	0x0428, r26
     cd6:	b0 93 29 04 	sts	0x0429, r27
	}
	if(ch->I_err < -integralErrorLimit)
     cda:	60 91 26 04 	lds	r22, 0x0426
     cde:	70 91 27 04 	lds	r23, 0x0427
     ce2:	80 91 28 04 	lds	r24, 0x0428
     ce6:	90 91 29 04 	lds	r25, 0x0429
     cea:	20 e0       	ldi	r18, 0x00	; 0
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	40 e2       	ldi	r20, 0x20	; 32
     cf0:	51 ec       	ldi	r21, 0xC1	; 193
     cf2:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__cmpsf2>
     cf6:	88 23       	and	r24, r24
     cf8:	64 f4       	brge	.+24     	; 0xd12 <__vector_7+0x1de>
	{
		ch->I_err = -integralErrorLimit;
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	a0 e2       	ldi	r26, 0x20	; 32
     d00:	b1 ec       	ldi	r27, 0xC1	; 193
     d02:	80 93 26 04 	sts	0x0426, r24
     d06:	90 93 27 04 	sts	0x0427, r25
     d0a:	a0 93 28 04 	sts	0x0428, r26
     d0e:	b0 93 29 04 	sts	0x0429, r27
	}
	
	ch->D_err = (ch->TempError[CtrlErrorIdx] - ch->TempError[CtrlErrorHistIdx]) * ch->Dgain; // D error
     d12:	e0 91 44 01 	lds	r30, 0x0144
     d16:	f0 91 45 01 	lds	r31, 0x0145
     d1a:	ca e1       	ldi	r28, 0x1A	; 26
     d1c:	d4 e0       	ldi	r29, 0x04	; 4
     d1e:	ee 0f       	add	r30, r30
     d20:	ff 1f       	adc	r31, r31
     d22:	ee 0f       	add	r30, r30
     d24:	ff 1f       	adc	r31, r31
     d26:	ee 5b       	subi	r30, 0xBE	; 190
     d28:	fb 4f       	sbci	r31, 0xFB	; 251
     d2a:	60 81       	ld	r22, Z
     d2c:	71 81       	ldd	r23, Z+1	; 0x01
     d2e:	82 81       	ldd	r24, Z+2	; 0x02
     d30:	93 81       	ldd	r25, Z+3	; 0x03
     d32:	e0 91 00 01 	lds	r30, 0x0100
     d36:	f0 91 01 01 	lds	r31, 0x0101
     d3a:	ee 0f       	add	r30, r30
     d3c:	ff 1f       	adc	r31, r31
     d3e:	ee 0f       	add	r30, r30
     d40:	ff 1f       	adc	r31, r31
     d42:	ee 5b       	subi	r30, 0xBE	; 190
     d44:	fb 4f       	sbci	r31, 0xFB	; 251
     d46:	20 81       	ld	r18, Z
     d48:	31 81       	ldd	r19, Z+1	; 0x01
     d4a:	42 81       	ldd	r20, Z+2	; 0x02
     d4c:	53 81       	ldd	r21, Z+3	; 0x03
     d4e:	cc a0       	ldd	r12, Y+36	; 0x24
     d50:	dd a0       	ldd	r13, Y+37	; 0x25
     d52:	ee a0       	ldd	r14, Y+38	; 0x26
     d54:	ff a0       	ldd	r15, Y+39	; 0x27
     d56:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__subsf3>
     d5a:	a7 01       	movw	r20, r14
     d5c:	96 01       	movw	r18, r12
     d5e:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <__mulsf3>
     d62:	68 8b       	std	Y+16, r22	; 0x10
     d64:	79 8b       	std	Y+17, r23	; 0x11
     d66:	8a 8b       	std	Y+18, r24	; 0x12
     d68:	9b 8b       	std	Y+19, r25	; 0x13
	
	ch->Control_PID = ch->P_err + ch->I_err + ch->D_err;
     d6a:	68 85       	ldd	r22, Y+8	; 0x08
     d6c:	79 85       	ldd	r23, Y+9	; 0x09
     d6e:	8a 85       	ldd	r24, Y+10	; 0x0a
     d70:	9b 85       	ldd	r25, Y+11	; 0x0b
     d72:	2c 85       	ldd	r18, Y+12	; 0x0c
     d74:	3d 85       	ldd	r19, Y+13	; 0x0d
     d76:	4e 85       	ldd	r20, Y+14	; 0x0e
     d78:	5f 85       	ldd	r21, Y+15	; 0x0f
     d7a:	c8 88       	ldd	r12, Y+16	; 0x10
     d7c:	d9 88       	ldd	r13, Y+17	; 0x11
     d7e:	ea 88       	ldd	r14, Y+18	; 0x12
     d80:	fb 88       	ldd	r15, Y+19	; 0x13
     d82:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__addsf3>
     d86:	a7 01       	movw	r20, r14
     d88:	96 01       	movw	r18, r12
     d8a:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__addsf3>
     d8e:	68 8f       	std	Y+24, r22	; 0x18
     d90:	79 8f       	std	Y+25, r23	; 0x19
     d92:	8a 8f       	std	Y+26, r24	; 0x1a
     d94:	9b 8f       	std	Y+27, r25	; 0x1b
	ch->Control = ch->Control_PID + ch->TempSetPoint * (float)0.21 - 5;
     d96:	c8 8c       	ldd	r12, Y+24	; 0x18
     d98:	d9 8c       	ldd	r13, Y+25	; 0x19
     d9a:	ea 8c       	ldd	r14, Y+26	; 0x1a
     d9c:	fb 8c       	ldd	r15, Y+27	; 0x1b
     d9e:	68 81       	ld	r22, Y
     da0:	79 81       	ldd	r23, Y+1	; 0x01
     da2:	8a 81       	ldd	r24, Y+2	; 0x02
     da4:	9b 81       	ldd	r25, Y+3	; 0x03
     da6:	2d e3       	ldi	r18, 0x3D	; 61
     da8:	3a e0       	ldi	r19, 0x0A	; 10
     daa:	47 e5       	ldi	r20, 0x57	; 87
     dac:	5e e3       	ldi	r21, 0x3E	; 62
     dae:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <__mulsf3>
     db2:	9b 01       	movw	r18, r22
     db4:	ac 01       	movw	r20, r24
     db6:	c7 01       	movw	r24, r14
     db8:	b6 01       	movw	r22, r12
     dba:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__addsf3>
     dbe:	20 e0       	ldi	r18, 0x00	; 0
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	40 ea       	ldi	r20, 0xA0	; 160
     dc4:	50 e4       	ldi	r21, 0x40	; 64
     dc6:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__subsf3>
     dca:	6c 8b       	std	Y+20, r22	; 0x14
     dcc:	7d 8b       	std	Y+21, r23	; 0x15
     dce:	8e 8b       	std	Y+22, r24	; 0x16
     dd0:	9f 8b       	std	Y+23, r25	; 0x17
	ch->pwm = (round(ch->Control));
     dd2:	6c 89       	ldd	r22, Y+20	; 0x14
     dd4:	7d 89       	ldd	r23, Y+21	; 0x15
     dd6:	8e 89       	ldd	r24, Y+22	; 0x16
     dd8:	9f 89       	ldd	r25, Y+23	; 0x17
     dda:	0e 94 ce 20 	call	0x419c	; 0x419c <round>
     dde:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <__fixsfsi>
     de2:	70 93 7b 04 	sts	0x047B, r23
     de6:	60 93 7a 04 	sts	0x047A, r22
	
	if(fabs(ch->TempError[CtrlErrorIdx]) > integralErrorActiveWindow)
     dea:	e0 91 44 01 	lds	r30, 0x0144
     dee:	f0 91 45 01 	lds	r31, 0x0145
     df2:	ee 0f       	add	r30, r30
     df4:	ff 1f       	adc	r31, r31
     df6:	ee 0f       	add	r30, r30
     df8:	ff 1f       	adc	r31, r31
     dfa:	ee 5b       	subi	r30, 0xBE	; 190
     dfc:	fb 4f       	sbci	r31, 0xFB	; 251
     dfe:	80 81       	ld	r24, Z
     e00:	91 81       	ldd	r25, Z+1	; 0x01
     e02:	a2 81       	ldd	r26, Z+2	; 0x02
     e04:	b3 81       	ldd	r27, Z+3	; 0x03
     e06:	bc 01       	movw	r22, r24
     e08:	cd 01       	movw	r24, r26
     e0a:	9f 77       	andi	r25, 0x7F	; 127
     e0c:	20 e0       	ldi	r18, 0x00	; 0
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	40 ea       	ldi	r20, 0xA0	; 160
     e12:	50 e4       	ldi	r21, 0x40	; 64
     e14:	0e 94 67 20 	call	0x40ce	; 0x40ce <__gesf2>
     e18:	18 16       	cp	r1, r24
     e1a:	44 f4       	brge	.+16     	; 0xe2c <__vector_7+0x2f8>
	{
		ch->I_err = 0;														// Avoid integral wind-up
     e1c:	10 92 26 04 	sts	0x0426, r1
     e20:	10 92 27 04 	sts	0x0427, r1
     e24:	10 92 28 04 	sts	0x0428, r1
     e28:	10 92 29 04 	sts	0x0429, r1
	}
	
	if(fabs(ch->TempError[CtrlErrorIdx]) <= ch->tempErrorWin)				// Temperature settle window
     e2c:	e0 91 44 01 	lds	r30, 0x0144
     e30:	f0 91 45 01 	lds	r31, 0x0145
     e34:	ee 0f       	add	r30, r30
     e36:	ff 1f       	adc	r31, r31
     e38:	ee 0f       	add	r30, r30
     e3a:	ff 1f       	adc	r31, r31
     e3c:	ee 5b       	subi	r30, 0xBE	; 190
     e3e:	fb 4f       	sbci	r31, 0xFB	; 251
     e40:	80 81       	ld	r24, Z
     e42:	91 81       	ldd	r25, Z+1	; 0x01
     e44:	a2 81       	ldd	r26, Z+2	; 0x02
     e46:	b3 81       	ldd	r27, Z+3	; 0x03
     e48:	20 91 6e 04 	lds	r18, 0x046E
     e4c:	30 91 6f 04 	lds	r19, 0x046F
     e50:	40 91 70 04 	lds	r20, 0x0470
     e54:	50 91 71 04 	lds	r21, 0x0471
     e58:	bc 01       	movw	r22, r24
     e5a:	cd 01       	movw	r24, r26
     e5c:	9f 77       	andi	r25, 0x7F	; 127
     e5e:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__cmpsf2>
     e62:	18 16       	cp	r1, r24
     e64:	14 f1       	brlt	.+68     	; 0xeaa <__vector_7+0x376>
	{
		ch->tempSettleCnt ++;
     e66:	e2 e7       	ldi	r30, 0x72	; 114
     e68:	f4 e0       	ldi	r31, 0x04	; 4
     e6a:	80 81       	ld	r24, Z
     e6c:	91 81       	ldd	r25, Z+1	; 0x01
     e6e:	01 96       	adiw	r24, 0x01	; 1
     e70:	91 83       	std	Z+1, r25	; 0x01
     e72:	80 83       	st	Z, r24
		if(ch->tempSettleCnt >= (ch->tempSettleTime * 61))
     e74:	20 81       	ld	r18, Z
     e76:	31 81       	ldd	r19, Z+1	; 0x01
     e78:	40 91 74 04 	lds	r20, 0x0474
     e7c:	50 91 75 04 	lds	r21, 0x0475
     e80:	6d e3       	ldi	r22, 0x3D	; 61
     e82:	64 9f       	mul	r22, r20
     e84:	c0 01       	movw	r24, r0
     e86:	65 9f       	mul	r22, r21
     e88:	90 0d       	add	r25, r0
     e8a:	11 24       	eor	r1, r1
     e8c:	28 17       	cp	r18, r24
     e8e:	39 07       	cpc	r19, r25
     e90:	a4 f0       	brlt	.+40     	; 0xeba <__vector_7+0x386>
		{
			ch->tempStable = 1;
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	90 93 77 04 	sts	0x0477, r25
     e9a:	80 93 76 04 	sts	0x0476, r24
			ch->tempSettleCnt --;
     e9e:	80 81       	ld	r24, Z
     ea0:	91 81       	ldd	r25, Z+1	; 0x01
     ea2:	01 97       	sbiw	r24, 0x01	; 1
     ea4:	91 83       	std	Z+1, r25	; 0x01
     ea6:	80 83       	st	Z, r24
     ea8:	08 c0       	rjmp	.+16     	; 0xeba <__vector_7+0x386>
		}			
	}
	else
	{
		ch->tempSettleCnt = 0;
     eaa:	10 92 73 04 	sts	0x0473, r1
     eae:	10 92 72 04 	sts	0x0472, r1
		ch->tempStable = 0;
     eb2:	10 92 77 04 	sts	0x0477, r1
     eb6:	10 92 76 04 	sts	0x0476, r1
		case 1:
		PORTD &= 0b11101111;	// Set CS1 low
		break;
		
		case 2:
		PORTD &= 0b11011111;	// Set CS2 low
     eba:	5d 98       	cbi	0x0b, 5	; 11
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     ec0:	0d b4       	in	r0, 0x2d	; 45
     ec2:	07 fe       	sbrs	r0, 7
     ec4:	fd cf       	rjmp	.-6      	; 0xec0 <__vector_7+0x38c>
	byteword=SPDR;				//just for clearing SPIF
     ec6:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
     ec8:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     eca:	0d b4       	in	r0, 0x2d	; 45
     ecc:	07 fe       	sbrs	r0, 7
     ece:	fd cf       	rjmp	.-6      	; 0xeca <__vector_7+0x396>
	byteword=SPDR;
     ed0:	9e b5       	in	r25, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
     ed2:	8b b1       	in	r24, 0x0b	; 11
     ed4:	80 6f       	ori	r24, 0xF0	; 240
     ed6:	8b b9       	out	0x0b, r24	; 11
		case 1:
		PORTD &= 0b11101111;	// Set CS1 low
		break;
		
		case 2:
		PORTD &= 0b11011111;	// Set CS2 low
     ed8:	5d 98       	cbi	0x0b, 5	; 11
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
     eda:	82 e0       	ldi	r24, 0x02	; 2
     edc:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     ede:	0d b4       	in	r0, 0x2d	; 45
     ee0:	07 fe       	sbrs	r0, 7
     ee2:	fd cf       	rjmp	.-6      	; 0xede <__vector_7+0x3aa>
	byteword=SPDR;				//just for clearing SPIF
     ee4:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
     ee6:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     ee8:	0d b4       	in	r0, 0x2d	; 45
     eea:	07 fe       	sbrs	r0, 7
     eec:	fd cf       	rjmp	.-6      	; 0xee8 <__vector_7+0x3b4>
	byteword=SPDR;
     eee:	6e b5       	in	r22, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
     ef0:	8b b1       	in	r24, 0x0b	; 11
     ef2:	80 6f       	ori	r24, 0xF0	; 240
     ef4:	8b b9       	out	0x0b, r24	; 11
	uint8_t u8_msb = 0;
	uint8_t u8_lsb = 0;
	
	u8_msb = SPIread(0x01, ch);
	u8_lsb = SPIread(0x02, ch);
	adc_code = (((u8_msb << 8) | u8_lsb) >> 1);
     ef6:	70 e0       	ldi	r23, 0x00	; 0
     ef8:	79 2b       	or	r23, r25
     efa:	75 95       	asr	r23
     efc:	67 95       	ror	r22
	return ((float)adc_code / 32.0 - 256.0);
     efe:	07 2e       	mov	r0, r23
     f00:	00 0c       	add	r0, r0
     f02:	88 0b       	sbc	r24, r24
     f04:	99 0b       	sbc	r25, r25
     f06:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <__floatsisf>
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	40 e0       	ldi	r20, 0x00	; 0
     f10:	5d e3       	ldi	r21, 0x3D	; 61
     f12:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <__mulsf3>
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	40 e8       	ldi	r20, 0x80	; 128
     f1c:	53 e4       	ldi	r21, 0x43	; 67
     f1e:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__subsf3>
	PORTD &= 0b11110111;						// Turn off LED on PCB (Irq call freq: 16MHz / 1024 / 255 = 61.3 Hz )
}

static inline void PIDctrl(channel *ch, int tempSensor)
{
	ch->TempSensor = ReadTempSensor(tempSensor);
     f22:	ed e7       	ldi	r30, 0x7D	; 125
     f24:	f4 e0       	ldi	r31, 0x04	; 4
     f26:	64 83       	std	Z+4, r22	; 0x04
     f28:	75 83       	std	Z+5, r23	; 0x05
     f2a:	86 83       	std	Z+6, r24	; 0x06
     f2c:	97 83       	std	Z+7, r25	; 0x07
	if(ch->TempSensor > (float)maxAllowedTemp)								// Max temperature limit
     f2e:	64 81       	ldd	r22, Z+4	; 0x04
     f30:	75 81       	ldd	r23, Z+5	; 0x05
     f32:	86 81       	ldd	r24, Z+6	; 0x06
     f34:	97 81       	ldd	r25, Z+7	; 0x07
     f36:	20 e0       	ldi	r18, 0x00	; 0
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	40 ef       	ldi	r20, 0xF0	; 240
     f3c:	52 e4       	ldi	r21, 0x42	; 66
     f3e:	0e 94 67 20 	call	0x40ce	; 0x40ce <__gesf2>
     f42:	18 16       	cp	r1, r24
     f44:	2c f4       	brge	.+10     	; 0xf50 <__vector_7+0x41c>
	{
		ch->heaterEnable = false;
     f46:	10 92 df 04 	sts	0x04DF, r1
		PORTC &= allHeaterOff;
     f4a:	88 b1       	in	r24, 0x08	; 8
     f4c:	80 7f       	andi	r24, 0xF0	; 240
     f4e:	88 b9       	out	0x08, r24	; 8
	}

	ch->TempError[CtrlErrorIdx] = ch->TempSetPoint - ch->TempSensor;		// Control error
     f50:	00 91 44 01 	lds	r16, 0x0144
     f54:	10 91 45 01 	lds	r17, 0x0145
     f58:	cd e7       	ldi	r28, 0x7D	; 125
     f5a:	d4 e0       	ldi	r29, 0x04	; 4
     f5c:	68 81       	ld	r22, Y
     f5e:	79 81       	ldd	r23, Y+1	; 0x01
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	9b 81       	ldd	r25, Y+3	; 0x03
     f64:	2c 81       	ldd	r18, Y+4	; 0x04
     f66:	3d 81       	ldd	r19, Y+5	; 0x05
     f68:	4e 81       	ldd	r20, Y+6	; 0x06
     f6a:	5f 81       	ldd	r21, Y+7	; 0x07
     f6c:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__subsf3>
     f70:	00 0f       	add	r16, r16
     f72:	11 1f       	adc	r17, r17
     f74:	00 0f       	add	r16, r16
     f76:	11 1f       	adc	r17, r17
     f78:	f8 01       	movw	r30, r16
     f7a:	eb 55       	subi	r30, 0x5B	; 91
     f7c:	fb 4f       	sbci	r31, 0xFB	; 251
     f7e:	60 83       	st	Z, r22
     f80:	71 83       	std	Z+1, r23	; 0x01
     f82:	82 83       	std	Z+2, r24	; 0x02
     f84:	93 83       	std	Z+3, r25	; 0x03
	
	ch->P_err = ch->TempError[CtrlErrorIdx] * ch->Pgain;					// P error
     f86:	e0 91 44 01 	lds	r30, 0x0144
     f8a:	f0 91 45 01 	lds	r31, 0x0145
     f8e:	ee 0f       	add	r30, r30
     f90:	ff 1f       	adc	r31, r31
     f92:	ee 0f       	add	r30, r30
     f94:	ff 1f       	adc	r31, r31
     f96:	eb 55       	subi	r30, 0x5B	; 91
     f98:	fb 4f       	sbci	r31, 0xFB	; 251
     f9a:	60 81       	ld	r22, Z
     f9c:	71 81       	ldd	r23, Z+1	; 0x01
     f9e:	82 81       	ldd	r24, Z+2	; 0x02
     fa0:	93 81       	ldd	r25, Z+3	; 0x03
     fa2:	2c 8d       	ldd	r18, Y+28	; 0x1c
     fa4:	3d 8d       	ldd	r19, Y+29	; 0x1d
     fa6:	4e 8d       	ldd	r20, Y+30	; 0x1e
     fa8:	5f 8d       	ldd	r21, Y+31	; 0x1f
     faa:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <__mulsf3>
     fae:	68 87       	std	Y+8, r22	; 0x08
     fb0:	79 87       	std	Y+9, r23	; 0x09
     fb2:	8a 87       	std	Y+10, r24	; 0x0a
     fb4:	9b 87       	std	Y+11, r25	; 0x0b
	ch->I_err = ch->I_err + (ch->TempError[CtrlErrorIdx] * ch->Igain);		// I error
     fb6:	cc 84       	ldd	r12, Y+12	; 0x0c
     fb8:	dd 84       	ldd	r13, Y+13	; 0x0d
     fba:	ee 84       	ldd	r14, Y+14	; 0x0e
     fbc:	ff 84       	ldd	r15, Y+15	; 0x0f
     fbe:	e0 91 44 01 	lds	r30, 0x0144
     fc2:	f0 91 45 01 	lds	r31, 0x0145
     fc6:	ee 0f       	add	r30, r30
     fc8:	ff 1f       	adc	r31, r31
     fca:	ee 0f       	add	r30, r30
     fcc:	ff 1f       	adc	r31, r31
     fce:	eb 55       	subi	r30, 0x5B	; 91
     fd0:	fb 4f       	sbci	r31, 0xFB	; 251
     fd2:	60 81       	ld	r22, Z
     fd4:	71 81       	ldd	r23, Z+1	; 0x01
     fd6:	82 81       	ldd	r24, Z+2	; 0x02
     fd8:	93 81       	ldd	r25, Z+3	; 0x03
     fda:	28 a1       	ldd	r18, Y+32	; 0x20
     fdc:	39 a1       	ldd	r19, Y+33	; 0x21
     fde:	4a a1       	ldd	r20, Y+34	; 0x22
     fe0:	5b a1       	ldd	r21, Y+35	; 0x23
     fe2:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <__mulsf3>
     fe6:	9b 01       	movw	r18, r22
     fe8:	ac 01       	movw	r20, r24
     fea:	c7 01       	movw	r24, r14
     fec:	b6 01       	movw	r22, r12
     fee:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__addsf3>
     ff2:	6c 87       	std	Y+12, r22	; 0x0c
     ff4:	7d 87       	std	Y+13, r23	; 0x0d
     ff6:	8e 87       	std	Y+14, r24	; 0x0e
     ff8:	9f 87       	std	Y+15, r25	; 0x0f
	if(ch->I_err > integralErrorLimit)
     ffa:	6c 85       	ldd	r22, Y+12	; 0x0c
     ffc:	7d 85       	ldd	r23, Y+13	; 0x0d
     ffe:	8e 85       	ldd	r24, Y+14	; 0x0e
    1000:	9f 85       	ldd	r25, Y+15	; 0x0f
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	40 e2       	ldi	r20, 0x20	; 32
    1008:	51 e4       	ldi	r21, 0x41	; 65
    100a:	0e 94 67 20 	call	0x40ce	; 0x40ce <__gesf2>
    100e:	18 16       	cp	r1, r24
    1010:	64 f4       	brge	.+24     	; 0x102a <__vector_7+0x4f6>
	{
		ch->I_err = integralErrorLimit;
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	a0 e2       	ldi	r26, 0x20	; 32
    1018:	b1 e4       	ldi	r27, 0x41	; 65
    101a:	80 93 89 04 	sts	0x0489, r24
    101e:	90 93 8a 04 	sts	0x048A, r25
    1022:	a0 93 8b 04 	sts	0x048B, r26
    1026:	b0 93 8c 04 	sts	0x048C, r27
	}
	if(ch->I_err < -integralErrorLimit)
    102a:	60 91 89 04 	lds	r22, 0x0489
    102e:	70 91 8a 04 	lds	r23, 0x048A
    1032:	80 91 8b 04 	lds	r24, 0x048B
    1036:	90 91 8c 04 	lds	r25, 0x048C
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	40 e2       	ldi	r20, 0x20	; 32
    1040:	51 ec       	ldi	r21, 0xC1	; 193
    1042:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__cmpsf2>
    1046:	88 23       	and	r24, r24
    1048:	64 f4       	brge	.+24     	; 0x1062 <__vector_7+0x52e>
	{
		ch->I_err = -integralErrorLimit;
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	a0 e2       	ldi	r26, 0x20	; 32
    1050:	b1 ec       	ldi	r27, 0xC1	; 193
    1052:	80 93 89 04 	sts	0x0489, r24
    1056:	90 93 8a 04 	sts	0x048A, r25
    105a:	a0 93 8b 04 	sts	0x048B, r26
    105e:	b0 93 8c 04 	sts	0x048C, r27
	}
	
	ch->D_err = (ch->TempError[CtrlErrorIdx] - ch->TempError[CtrlErrorHistIdx]) * ch->Dgain; // D error
    1062:	e0 91 44 01 	lds	r30, 0x0144
    1066:	f0 91 45 01 	lds	r31, 0x0145
    106a:	cd e7       	ldi	r28, 0x7D	; 125
    106c:	d4 e0       	ldi	r29, 0x04	; 4
    106e:	ee 0f       	add	r30, r30
    1070:	ff 1f       	adc	r31, r31
    1072:	ee 0f       	add	r30, r30
    1074:	ff 1f       	adc	r31, r31
    1076:	eb 55       	subi	r30, 0x5B	; 91
    1078:	fb 4f       	sbci	r31, 0xFB	; 251
    107a:	60 81       	ld	r22, Z
    107c:	71 81       	ldd	r23, Z+1	; 0x01
    107e:	82 81       	ldd	r24, Z+2	; 0x02
    1080:	93 81       	ldd	r25, Z+3	; 0x03
    1082:	e0 91 00 01 	lds	r30, 0x0100
    1086:	f0 91 01 01 	lds	r31, 0x0101
    108a:	ee 0f       	add	r30, r30
    108c:	ff 1f       	adc	r31, r31
    108e:	ee 0f       	add	r30, r30
    1090:	ff 1f       	adc	r31, r31
    1092:	eb 55       	subi	r30, 0x5B	; 91
    1094:	fb 4f       	sbci	r31, 0xFB	; 251
    1096:	20 81       	ld	r18, Z
    1098:	31 81       	ldd	r19, Z+1	; 0x01
    109a:	42 81       	ldd	r20, Z+2	; 0x02
    109c:	53 81       	ldd	r21, Z+3	; 0x03
    109e:	cc a0       	ldd	r12, Y+36	; 0x24
    10a0:	dd a0       	ldd	r13, Y+37	; 0x25
    10a2:	ee a0       	ldd	r14, Y+38	; 0x26
    10a4:	ff a0       	ldd	r15, Y+39	; 0x27
    10a6:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__subsf3>
    10aa:	a7 01       	movw	r20, r14
    10ac:	96 01       	movw	r18, r12
    10ae:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <__mulsf3>
    10b2:	68 8b       	std	Y+16, r22	; 0x10
    10b4:	79 8b       	std	Y+17, r23	; 0x11
    10b6:	8a 8b       	std	Y+18, r24	; 0x12
    10b8:	9b 8b       	std	Y+19, r25	; 0x13
	
	ch->Control_PID = ch->P_err + ch->I_err + ch->D_err;
    10ba:	68 85       	ldd	r22, Y+8	; 0x08
    10bc:	79 85       	ldd	r23, Y+9	; 0x09
    10be:	8a 85       	ldd	r24, Y+10	; 0x0a
    10c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    10c2:	2c 85       	ldd	r18, Y+12	; 0x0c
    10c4:	3d 85       	ldd	r19, Y+13	; 0x0d
    10c6:	4e 85       	ldd	r20, Y+14	; 0x0e
    10c8:	5f 85       	ldd	r21, Y+15	; 0x0f
    10ca:	c8 88       	ldd	r12, Y+16	; 0x10
    10cc:	d9 88       	ldd	r13, Y+17	; 0x11
    10ce:	ea 88       	ldd	r14, Y+18	; 0x12
    10d0:	fb 88       	ldd	r15, Y+19	; 0x13
    10d2:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__addsf3>
    10d6:	a7 01       	movw	r20, r14
    10d8:	96 01       	movw	r18, r12
    10da:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__addsf3>
    10de:	68 8f       	std	Y+24, r22	; 0x18
    10e0:	79 8f       	std	Y+25, r23	; 0x19
    10e2:	8a 8f       	std	Y+26, r24	; 0x1a
    10e4:	9b 8f       	std	Y+27, r25	; 0x1b
	ch->Control = ch->Control_PID + ch->TempSetPoint * (float)0.21 - 5;
    10e6:	c8 8c       	ldd	r12, Y+24	; 0x18
    10e8:	d9 8c       	ldd	r13, Y+25	; 0x19
    10ea:	ea 8c       	ldd	r14, Y+26	; 0x1a
    10ec:	fb 8c       	ldd	r15, Y+27	; 0x1b
    10ee:	68 81       	ld	r22, Y
    10f0:	79 81       	ldd	r23, Y+1	; 0x01
    10f2:	8a 81       	ldd	r24, Y+2	; 0x02
    10f4:	9b 81       	ldd	r25, Y+3	; 0x03
    10f6:	2d e3       	ldi	r18, 0x3D	; 61
    10f8:	3a e0       	ldi	r19, 0x0A	; 10
    10fa:	47 e5       	ldi	r20, 0x57	; 87
    10fc:	5e e3       	ldi	r21, 0x3E	; 62
    10fe:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <__mulsf3>
    1102:	9b 01       	movw	r18, r22
    1104:	ac 01       	movw	r20, r24
    1106:	c7 01       	movw	r24, r14
    1108:	b6 01       	movw	r22, r12
    110a:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__addsf3>
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	40 ea       	ldi	r20, 0xA0	; 160
    1114:	50 e4       	ldi	r21, 0x40	; 64
    1116:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__subsf3>
    111a:	6c 8b       	std	Y+20, r22	; 0x14
    111c:	7d 8b       	std	Y+21, r23	; 0x15
    111e:	8e 8b       	std	Y+22, r24	; 0x16
    1120:	9f 8b       	std	Y+23, r25	; 0x17
	ch->pwm = (round(ch->Control));
    1122:	6c 89       	ldd	r22, Y+20	; 0x14
    1124:	7d 89       	ldd	r23, Y+21	; 0x15
    1126:	8e 89       	ldd	r24, Y+22	; 0x16
    1128:	9f 89       	ldd	r25, Y+23	; 0x17
    112a:	0e 94 ce 20 	call	0x419c	; 0x419c <round>
    112e:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <__fixsfsi>
    1132:	70 93 de 04 	sts	0x04DE, r23
    1136:	60 93 dd 04 	sts	0x04DD, r22
	
	if(fabs(ch->TempError[CtrlErrorIdx]) > integralErrorActiveWindow)
    113a:	e0 91 44 01 	lds	r30, 0x0144
    113e:	f0 91 45 01 	lds	r31, 0x0145
    1142:	ee 0f       	add	r30, r30
    1144:	ff 1f       	adc	r31, r31
    1146:	ee 0f       	add	r30, r30
    1148:	ff 1f       	adc	r31, r31
    114a:	eb 55       	subi	r30, 0x5B	; 91
    114c:	fb 4f       	sbci	r31, 0xFB	; 251
    114e:	80 81       	ld	r24, Z
    1150:	91 81       	ldd	r25, Z+1	; 0x01
    1152:	a2 81       	ldd	r26, Z+2	; 0x02
    1154:	b3 81       	ldd	r27, Z+3	; 0x03
    1156:	bc 01       	movw	r22, r24
    1158:	cd 01       	movw	r24, r26
    115a:	9f 77       	andi	r25, 0x7F	; 127
    115c:	20 e0       	ldi	r18, 0x00	; 0
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	40 ea       	ldi	r20, 0xA0	; 160
    1162:	50 e4       	ldi	r21, 0x40	; 64
    1164:	0e 94 67 20 	call	0x40ce	; 0x40ce <__gesf2>
    1168:	18 16       	cp	r1, r24
    116a:	44 f4       	brge	.+16     	; 0x117c <__vector_7+0x648>
	{
		ch->I_err = 0;														// Avoid integral wind-up
    116c:	10 92 89 04 	sts	0x0489, r1
    1170:	10 92 8a 04 	sts	0x048A, r1
    1174:	10 92 8b 04 	sts	0x048B, r1
    1178:	10 92 8c 04 	sts	0x048C, r1
	}
	
	if(fabs(ch->TempError[CtrlErrorIdx]) <= ch->tempErrorWin)				// Temperature settle window
    117c:	e0 91 44 01 	lds	r30, 0x0144
    1180:	f0 91 45 01 	lds	r31, 0x0145
    1184:	ee 0f       	add	r30, r30
    1186:	ff 1f       	adc	r31, r31
    1188:	ee 0f       	add	r30, r30
    118a:	ff 1f       	adc	r31, r31
    118c:	eb 55       	subi	r30, 0x5B	; 91
    118e:	fb 4f       	sbci	r31, 0xFB	; 251
    1190:	80 81       	ld	r24, Z
    1192:	91 81       	ldd	r25, Z+1	; 0x01
    1194:	a2 81       	ldd	r26, Z+2	; 0x02
    1196:	b3 81       	ldd	r27, Z+3	; 0x03
    1198:	20 91 d1 04 	lds	r18, 0x04D1
    119c:	30 91 d2 04 	lds	r19, 0x04D2
    11a0:	40 91 d3 04 	lds	r20, 0x04D3
    11a4:	50 91 d4 04 	lds	r21, 0x04D4
    11a8:	bc 01       	movw	r22, r24
    11aa:	cd 01       	movw	r24, r26
    11ac:	9f 77       	andi	r25, 0x7F	; 127
    11ae:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__cmpsf2>
    11b2:	18 16       	cp	r1, r24
    11b4:	14 f1       	brlt	.+68     	; 0x11fa <__vector_7+0x6c6>
	{
		ch->tempSettleCnt ++;
    11b6:	e5 ed       	ldi	r30, 0xD5	; 213
    11b8:	f4 e0       	ldi	r31, 0x04	; 4
    11ba:	80 81       	ld	r24, Z
    11bc:	91 81       	ldd	r25, Z+1	; 0x01
    11be:	01 96       	adiw	r24, 0x01	; 1
    11c0:	91 83       	std	Z+1, r25	; 0x01
    11c2:	80 83       	st	Z, r24
		if(ch->tempSettleCnt >= (ch->tempSettleTime * 61))
    11c4:	20 81       	ld	r18, Z
    11c6:	31 81       	ldd	r19, Z+1	; 0x01
    11c8:	40 91 d7 04 	lds	r20, 0x04D7
    11cc:	50 91 d8 04 	lds	r21, 0x04D8
    11d0:	6d e3       	ldi	r22, 0x3D	; 61
    11d2:	64 9f       	mul	r22, r20
    11d4:	c0 01       	movw	r24, r0
    11d6:	65 9f       	mul	r22, r21
    11d8:	90 0d       	add	r25, r0
    11da:	11 24       	eor	r1, r1
    11dc:	28 17       	cp	r18, r24
    11de:	39 07       	cpc	r19, r25
    11e0:	a4 f0       	brlt	.+40     	; 0x120a <__vector_7+0x6d6>
		{
			ch->tempStable = 1;
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	90 93 da 04 	sts	0x04DA, r25
    11ea:	80 93 d9 04 	sts	0x04D9, r24
			ch->tempSettleCnt --;
    11ee:	80 81       	ld	r24, Z
    11f0:	91 81       	ldd	r25, Z+1	; 0x01
    11f2:	01 97       	sbiw	r24, 0x01	; 1
    11f4:	91 83       	std	Z+1, r25	; 0x01
    11f6:	80 83       	st	Z, r24
    11f8:	08 c0       	rjmp	.+16     	; 0x120a <__vector_7+0x6d6>
		}			
	}
	else
	{
		ch->tempSettleCnt = 0;
    11fa:	10 92 d6 04 	sts	0x04D6, r1
    11fe:	10 92 d5 04 	sts	0x04D5, r1
		ch->tempStable = 0;
    1202:	10 92 da 04 	sts	0x04DA, r1
    1206:	10 92 d9 04 	sts	0x04D9, r1
		case 2:
		PORTD &= 0b11011111;	// Set CS2 low
		break;
				
		case 3:
		PORTD &= 0b10111111;	// Set CS3 low
    120a:	5e 98       	cbi	0x0b, 6	; 11
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    1210:	0d b4       	in	r0, 0x2d	; 45
    1212:	07 fe       	sbrs	r0, 7
    1214:	fd cf       	rjmp	.-6      	; 0x1210 <__vector_7+0x6dc>
	byteword=SPDR;				//just for clearing SPIF
    1216:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
    1218:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    121a:	0d b4       	in	r0, 0x2d	; 45
    121c:	07 fe       	sbrs	r0, 7
    121e:	fd cf       	rjmp	.-6      	; 0x121a <__vector_7+0x6e6>
	byteword=SPDR;
    1220:	9e b5       	in	r25, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
    1222:	8b b1       	in	r24, 0x0b	; 11
    1224:	80 6f       	ori	r24, 0xF0	; 240
    1226:	8b b9       	out	0x0b, r24	; 11
		case 2:
		PORTD &= 0b11011111;	// Set CS2 low
		break;
				
		case 3:
		PORTD &= 0b10111111;	// Set CS3 low
    1228:	5e 98       	cbi	0x0b, 6	; 11
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
    122a:	82 e0       	ldi	r24, 0x02	; 2
    122c:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    122e:	0d b4       	in	r0, 0x2d	; 45
    1230:	07 fe       	sbrs	r0, 7
    1232:	fd cf       	rjmp	.-6      	; 0x122e <__vector_7+0x6fa>
	byteword=SPDR;				//just for clearing SPIF
    1234:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
    1236:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    1238:	0d b4       	in	r0, 0x2d	; 45
    123a:	07 fe       	sbrs	r0, 7
    123c:	fd cf       	rjmp	.-6      	; 0x1238 <__vector_7+0x704>
	byteword=SPDR;
    123e:	6e b5       	in	r22, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
    1240:	8b b1       	in	r24, 0x0b	; 11
    1242:	80 6f       	ori	r24, 0xF0	; 240
    1244:	8b b9       	out	0x0b, r24	; 11
	uint8_t u8_msb = 0;
	uint8_t u8_lsb = 0;
	
	u8_msb = SPIread(0x01, ch);
	u8_lsb = SPIread(0x02, ch);
	adc_code = (((u8_msb << 8) | u8_lsb) >> 1);
    1246:	70 e0       	ldi	r23, 0x00	; 0
    1248:	79 2b       	or	r23, r25
    124a:	75 95       	asr	r23
    124c:	67 95       	ror	r22
	return ((float)adc_code / 32.0 - 256.0);
    124e:	07 2e       	mov	r0, r23
    1250:	00 0c       	add	r0, r0
    1252:	88 0b       	sbc	r24, r24
    1254:	99 0b       	sbc	r25, r25
    1256:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <__floatsisf>
    125a:	20 e0       	ldi	r18, 0x00	; 0
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	40 e0       	ldi	r20, 0x00	; 0
    1260:	5d e3       	ldi	r21, 0x3D	; 61
    1262:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <__mulsf3>
    1266:	20 e0       	ldi	r18, 0x00	; 0
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	40 e8       	ldi	r20, 0x80	; 128
    126c:	53 e4       	ldi	r21, 0x43	; 67
    126e:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__subsf3>
	PORTD &= 0b11110111;						// Turn off LED on PCB (Irq call freq: 16MHz / 1024 / 255 = 61.3 Hz )
}

static inline void PIDctrl(channel *ch, int tempSensor)
{
	ch->TempSensor = ReadTempSensor(tempSensor);
    1272:	eb ea       	ldi	r30, 0xAB	; 171
    1274:	f2 e0       	ldi	r31, 0x02	; 2
    1276:	64 83       	std	Z+4, r22	; 0x04
    1278:	75 83       	std	Z+5, r23	; 0x05
    127a:	86 83       	std	Z+6, r24	; 0x06
    127c:	97 83       	std	Z+7, r25	; 0x07
	if(ch->TempSensor > (float)maxAllowedTemp)								// Max temperature limit
    127e:	64 81       	ldd	r22, Z+4	; 0x04
    1280:	75 81       	ldd	r23, Z+5	; 0x05
    1282:	86 81       	ldd	r24, Z+6	; 0x06
    1284:	97 81       	ldd	r25, Z+7	; 0x07
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	40 ef       	ldi	r20, 0xF0	; 240
    128c:	52 e4       	ldi	r21, 0x42	; 66
    128e:	0e 94 67 20 	call	0x40ce	; 0x40ce <__gesf2>
    1292:	18 16       	cp	r1, r24
    1294:	2c f4       	brge	.+10     	; 0x12a0 <__vector_7+0x76c>
	{
		ch->heaterEnable = false;
    1296:	10 92 0d 03 	sts	0x030D, r1
		PORTC &= allHeaterOff;
    129a:	88 b1       	in	r24, 0x08	; 8
    129c:	80 7f       	andi	r24, 0xF0	; 240
    129e:	88 b9       	out	0x08, r24	; 8
	}

	ch->TempError[CtrlErrorIdx] = ch->TempSetPoint - ch->TempSensor;		// Control error
    12a0:	00 91 44 01 	lds	r16, 0x0144
    12a4:	10 91 45 01 	lds	r17, 0x0145
    12a8:	cb ea       	ldi	r28, 0xAB	; 171
    12aa:	d2 e0       	ldi	r29, 0x02	; 2
    12ac:	68 81       	ld	r22, Y
    12ae:	79 81       	ldd	r23, Y+1	; 0x01
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	9b 81       	ldd	r25, Y+3	; 0x03
    12b4:	2c 81       	ldd	r18, Y+4	; 0x04
    12b6:	3d 81       	ldd	r19, Y+5	; 0x05
    12b8:	4e 81       	ldd	r20, Y+6	; 0x06
    12ba:	5f 81       	ldd	r21, Y+7	; 0x07
    12bc:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__subsf3>
    12c0:	00 0f       	add	r16, r16
    12c2:	11 1f       	adc	r17, r17
    12c4:	00 0f       	add	r16, r16
    12c6:	11 1f       	adc	r17, r17
    12c8:	f8 01       	movw	r30, r16
    12ca:	ed 52       	subi	r30, 0x2D	; 45
    12cc:	fd 4f       	sbci	r31, 0xFD	; 253
    12ce:	60 83       	st	Z, r22
    12d0:	71 83       	std	Z+1, r23	; 0x01
    12d2:	82 83       	std	Z+2, r24	; 0x02
    12d4:	93 83       	std	Z+3, r25	; 0x03
	
	ch->P_err = ch->TempError[CtrlErrorIdx] * ch->Pgain;					// P error
    12d6:	e0 91 44 01 	lds	r30, 0x0144
    12da:	f0 91 45 01 	lds	r31, 0x0145
    12de:	ee 0f       	add	r30, r30
    12e0:	ff 1f       	adc	r31, r31
    12e2:	ee 0f       	add	r30, r30
    12e4:	ff 1f       	adc	r31, r31
    12e6:	ed 52       	subi	r30, 0x2D	; 45
    12e8:	fd 4f       	sbci	r31, 0xFD	; 253
    12ea:	60 81       	ld	r22, Z
    12ec:	71 81       	ldd	r23, Z+1	; 0x01
    12ee:	82 81       	ldd	r24, Z+2	; 0x02
    12f0:	93 81       	ldd	r25, Z+3	; 0x03
    12f2:	2c 8d       	ldd	r18, Y+28	; 0x1c
    12f4:	3d 8d       	ldd	r19, Y+29	; 0x1d
    12f6:	4e 8d       	ldd	r20, Y+30	; 0x1e
    12f8:	5f 8d       	ldd	r21, Y+31	; 0x1f
    12fa:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <__mulsf3>
    12fe:	68 87       	std	Y+8, r22	; 0x08
    1300:	79 87       	std	Y+9, r23	; 0x09
    1302:	8a 87       	std	Y+10, r24	; 0x0a
    1304:	9b 87       	std	Y+11, r25	; 0x0b
	ch->I_err = ch->I_err + (ch->TempError[CtrlErrorIdx] * ch->Igain);		// I error
    1306:	cc 84       	ldd	r12, Y+12	; 0x0c
    1308:	dd 84       	ldd	r13, Y+13	; 0x0d
    130a:	ee 84       	ldd	r14, Y+14	; 0x0e
    130c:	ff 84       	ldd	r15, Y+15	; 0x0f
    130e:	e0 91 44 01 	lds	r30, 0x0144
    1312:	f0 91 45 01 	lds	r31, 0x0145
    1316:	ee 0f       	add	r30, r30
    1318:	ff 1f       	adc	r31, r31
    131a:	ee 0f       	add	r30, r30
    131c:	ff 1f       	adc	r31, r31
    131e:	ed 52       	subi	r30, 0x2D	; 45
    1320:	fd 4f       	sbci	r31, 0xFD	; 253
    1322:	60 81       	ld	r22, Z
    1324:	71 81       	ldd	r23, Z+1	; 0x01
    1326:	82 81       	ldd	r24, Z+2	; 0x02
    1328:	93 81       	ldd	r25, Z+3	; 0x03
    132a:	28 a1       	ldd	r18, Y+32	; 0x20
    132c:	39 a1       	ldd	r19, Y+33	; 0x21
    132e:	4a a1       	ldd	r20, Y+34	; 0x22
    1330:	5b a1       	ldd	r21, Y+35	; 0x23
    1332:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <__mulsf3>
    1336:	9b 01       	movw	r18, r22
    1338:	ac 01       	movw	r20, r24
    133a:	c7 01       	movw	r24, r14
    133c:	b6 01       	movw	r22, r12
    133e:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__addsf3>
    1342:	6c 87       	std	Y+12, r22	; 0x0c
    1344:	7d 87       	std	Y+13, r23	; 0x0d
    1346:	8e 87       	std	Y+14, r24	; 0x0e
    1348:	9f 87       	std	Y+15, r25	; 0x0f
	if(ch->I_err > integralErrorLimit)
    134a:	6c 85       	ldd	r22, Y+12	; 0x0c
    134c:	7d 85       	ldd	r23, Y+13	; 0x0d
    134e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1350:	9f 85       	ldd	r25, Y+15	; 0x0f
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	40 e2       	ldi	r20, 0x20	; 32
    1358:	51 e4       	ldi	r21, 0x41	; 65
    135a:	0e 94 67 20 	call	0x40ce	; 0x40ce <__gesf2>
    135e:	18 16       	cp	r1, r24
    1360:	64 f4       	brge	.+24     	; 0x137a <__vector_7+0x846>
	{
		ch->I_err = integralErrorLimit;
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	a0 e2       	ldi	r26, 0x20	; 32
    1368:	b1 e4       	ldi	r27, 0x41	; 65
    136a:	80 93 b7 02 	sts	0x02B7, r24
    136e:	90 93 b8 02 	sts	0x02B8, r25
    1372:	a0 93 b9 02 	sts	0x02B9, r26
    1376:	b0 93 ba 02 	sts	0x02BA, r27
	}
	if(ch->I_err < -integralErrorLimit)
    137a:	60 91 b7 02 	lds	r22, 0x02B7
    137e:	70 91 b8 02 	lds	r23, 0x02B8
    1382:	80 91 b9 02 	lds	r24, 0x02B9
    1386:	90 91 ba 02 	lds	r25, 0x02BA
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	40 e2       	ldi	r20, 0x20	; 32
    1390:	51 ec       	ldi	r21, 0xC1	; 193
    1392:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__cmpsf2>
    1396:	88 23       	and	r24, r24
    1398:	64 f4       	brge	.+24     	; 0x13b2 <__vector_7+0x87e>
	{
		ch->I_err = -integralErrorLimit;
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	a0 e2       	ldi	r26, 0x20	; 32
    13a0:	b1 ec       	ldi	r27, 0xC1	; 193
    13a2:	80 93 b7 02 	sts	0x02B7, r24
    13a6:	90 93 b8 02 	sts	0x02B8, r25
    13aa:	a0 93 b9 02 	sts	0x02B9, r26
    13ae:	b0 93 ba 02 	sts	0x02BA, r27
	}
	
	ch->D_err = (ch->TempError[CtrlErrorIdx] - ch->TempError[CtrlErrorHistIdx]) * ch->Dgain; // D error
    13b2:	e0 91 44 01 	lds	r30, 0x0144
    13b6:	f0 91 45 01 	lds	r31, 0x0145
    13ba:	cb ea       	ldi	r28, 0xAB	; 171
    13bc:	d2 e0       	ldi	r29, 0x02	; 2
    13be:	ee 0f       	add	r30, r30
    13c0:	ff 1f       	adc	r31, r31
    13c2:	ee 0f       	add	r30, r30
    13c4:	ff 1f       	adc	r31, r31
    13c6:	ed 52       	subi	r30, 0x2D	; 45
    13c8:	fd 4f       	sbci	r31, 0xFD	; 253
    13ca:	60 81       	ld	r22, Z
    13cc:	71 81       	ldd	r23, Z+1	; 0x01
    13ce:	82 81       	ldd	r24, Z+2	; 0x02
    13d0:	93 81       	ldd	r25, Z+3	; 0x03
    13d2:	e0 91 00 01 	lds	r30, 0x0100
    13d6:	f0 91 01 01 	lds	r31, 0x0101
    13da:	ee 0f       	add	r30, r30
    13dc:	ff 1f       	adc	r31, r31
    13de:	ee 0f       	add	r30, r30
    13e0:	ff 1f       	adc	r31, r31
    13e2:	ed 52       	subi	r30, 0x2D	; 45
    13e4:	fd 4f       	sbci	r31, 0xFD	; 253
    13e6:	20 81       	ld	r18, Z
    13e8:	31 81       	ldd	r19, Z+1	; 0x01
    13ea:	42 81       	ldd	r20, Z+2	; 0x02
    13ec:	53 81       	ldd	r21, Z+3	; 0x03
    13ee:	cc a0       	ldd	r12, Y+36	; 0x24
    13f0:	dd a0       	ldd	r13, Y+37	; 0x25
    13f2:	ee a0       	ldd	r14, Y+38	; 0x26
    13f4:	ff a0       	ldd	r15, Y+39	; 0x27
    13f6:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__subsf3>
    13fa:	a7 01       	movw	r20, r14
    13fc:	96 01       	movw	r18, r12
    13fe:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <__mulsf3>
    1402:	68 8b       	std	Y+16, r22	; 0x10
    1404:	79 8b       	std	Y+17, r23	; 0x11
    1406:	8a 8b       	std	Y+18, r24	; 0x12
    1408:	9b 8b       	std	Y+19, r25	; 0x13
	
	ch->Control_PID = ch->P_err + ch->I_err + ch->D_err;
    140a:	68 85       	ldd	r22, Y+8	; 0x08
    140c:	79 85       	ldd	r23, Y+9	; 0x09
    140e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1410:	9b 85       	ldd	r25, Y+11	; 0x0b
    1412:	2c 85       	ldd	r18, Y+12	; 0x0c
    1414:	3d 85       	ldd	r19, Y+13	; 0x0d
    1416:	4e 85       	ldd	r20, Y+14	; 0x0e
    1418:	5f 85       	ldd	r21, Y+15	; 0x0f
    141a:	c8 88       	ldd	r12, Y+16	; 0x10
    141c:	d9 88       	ldd	r13, Y+17	; 0x11
    141e:	ea 88       	ldd	r14, Y+18	; 0x12
    1420:	fb 88       	ldd	r15, Y+19	; 0x13
    1422:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__addsf3>
    1426:	a7 01       	movw	r20, r14
    1428:	96 01       	movw	r18, r12
    142a:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__addsf3>
    142e:	68 8f       	std	Y+24, r22	; 0x18
    1430:	79 8f       	std	Y+25, r23	; 0x19
    1432:	8a 8f       	std	Y+26, r24	; 0x1a
    1434:	9b 8f       	std	Y+27, r25	; 0x1b
	ch->Control = ch->Control_PID + ch->TempSetPoint * (float)0.21 - 5;
    1436:	c8 8c       	ldd	r12, Y+24	; 0x18
    1438:	d9 8c       	ldd	r13, Y+25	; 0x19
    143a:	ea 8c       	ldd	r14, Y+26	; 0x1a
    143c:	fb 8c       	ldd	r15, Y+27	; 0x1b
    143e:	68 81       	ld	r22, Y
    1440:	79 81       	ldd	r23, Y+1	; 0x01
    1442:	8a 81       	ldd	r24, Y+2	; 0x02
    1444:	9b 81       	ldd	r25, Y+3	; 0x03
    1446:	2d e3       	ldi	r18, 0x3D	; 61
    1448:	3a e0       	ldi	r19, 0x0A	; 10
    144a:	47 e5       	ldi	r20, 0x57	; 87
    144c:	5e e3       	ldi	r21, 0x3E	; 62
    144e:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <__mulsf3>
    1452:	9b 01       	movw	r18, r22
    1454:	ac 01       	movw	r20, r24
    1456:	c7 01       	movw	r24, r14
    1458:	b6 01       	movw	r22, r12
    145a:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__addsf3>
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	40 ea       	ldi	r20, 0xA0	; 160
    1464:	50 e4       	ldi	r21, 0x40	; 64
    1466:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__subsf3>
    146a:	6c 8b       	std	Y+20, r22	; 0x14
    146c:	7d 8b       	std	Y+21, r23	; 0x15
    146e:	8e 8b       	std	Y+22, r24	; 0x16
    1470:	9f 8b       	std	Y+23, r25	; 0x17
	ch->pwm = (round(ch->Control));
    1472:	6c 89       	ldd	r22, Y+20	; 0x14
    1474:	7d 89       	ldd	r23, Y+21	; 0x15
    1476:	8e 89       	ldd	r24, Y+22	; 0x16
    1478:	9f 89       	ldd	r25, Y+23	; 0x17
    147a:	0e 94 ce 20 	call	0x419c	; 0x419c <round>
    147e:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <__fixsfsi>
    1482:	70 93 0c 03 	sts	0x030C, r23
    1486:	60 93 0b 03 	sts	0x030B, r22
	
	if(fabs(ch->TempError[CtrlErrorIdx]) > integralErrorActiveWindow)
    148a:	e0 91 44 01 	lds	r30, 0x0144
    148e:	f0 91 45 01 	lds	r31, 0x0145
    1492:	ee 0f       	add	r30, r30
    1494:	ff 1f       	adc	r31, r31
    1496:	ee 0f       	add	r30, r30
    1498:	ff 1f       	adc	r31, r31
    149a:	ed 52       	subi	r30, 0x2D	; 45
    149c:	fd 4f       	sbci	r31, 0xFD	; 253
    149e:	80 81       	ld	r24, Z
    14a0:	91 81       	ldd	r25, Z+1	; 0x01
    14a2:	a2 81       	ldd	r26, Z+2	; 0x02
    14a4:	b3 81       	ldd	r27, Z+3	; 0x03
    14a6:	bc 01       	movw	r22, r24
    14a8:	cd 01       	movw	r24, r26
    14aa:	9f 77       	andi	r25, 0x7F	; 127
    14ac:	20 e0       	ldi	r18, 0x00	; 0
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	40 ea       	ldi	r20, 0xA0	; 160
    14b2:	50 e4       	ldi	r21, 0x40	; 64
    14b4:	0e 94 67 20 	call	0x40ce	; 0x40ce <__gesf2>
    14b8:	18 16       	cp	r1, r24
    14ba:	44 f4       	brge	.+16     	; 0x14cc <__vector_7+0x998>
	{
		ch->I_err = 0;														// Avoid integral wind-up
    14bc:	10 92 b7 02 	sts	0x02B7, r1
    14c0:	10 92 b8 02 	sts	0x02B8, r1
    14c4:	10 92 b9 02 	sts	0x02B9, r1
    14c8:	10 92 ba 02 	sts	0x02BA, r1
	}
	
	if(fabs(ch->TempError[CtrlErrorIdx]) <= ch->tempErrorWin)				// Temperature settle window
    14cc:	e0 91 44 01 	lds	r30, 0x0144
    14d0:	f0 91 45 01 	lds	r31, 0x0145
    14d4:	ee 0f       	add	r30, r30
    14d6:	ff 1f       	adc	r31, r31
    14d8:	ee 0f       	add	r30, r30
    14da:	ff 1f       	adc	r31, r31
    14dc:	ed 52       	subi	r30, 0x2D	; 45
    14de:	fd 4f       	sbci	r31, 0xFD	; 253
    14e0:	80 81       	ld	r24, Z
    14e2:	91 81       	ldd	r25, Z+1	; 0x01
    14e4:	a2 81       	ldd	r26, Z+2	; 0x02
    14e6:	b3 81       	ldd	r27, Z+3	; 0x03
    14e8:	20 91 ff 02 	lds	r18, 0x02FF
    14ec:	30 91 00 03 	lds	r19, 0x0300
    14f0:	40 91 01 03 	lds	r20, 0x0301
    14f4:	50 91 02 03 	lds	r21, 0x0302
    14f8:	bc 01       	movw	r22, r24
    14fa:	cd 01       	movw	r24, r26
    14fc:	9f 77       	andi	r25, 0x7F	; 127
    14fe:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__cmpsf2>
    1502:	18 16       	cp	r1, r24
    1504:	14 f1       	brlt	.+68     	; 0x154a <__vector_7+0xa16>
	{
		ch->tempSettleCnt ++;
    1506:	e3 e0       	ldi	r30, 0x03	; 3
    1508:	f3 e0       	ldi	r31, 0x03	; 3
    150a:	80 81       	ld	r24, Z
    150c:	91 81       	ldd	r25, Z+1	; 0x01
    150e:	01 96       	adiw	r24, 0x01	; 1
    1510:	91 83       	std	Z+1, r25	; 0x01
    1512:	80 83       	st	Z, r24
		if(ch->tempSettleCnt >= (ch->tempSettleTime * 61))
    1514:	20 81       	ld	r18, Z
    1516:	31 81       	ldd	r19, Z+1	; 0x01
    1518:	40 91 05 03 	lds	r20, 0x0305
    151c:	50 91 06 03 	lds	r21, 0x0306
    1520:	6d e3       	ldi	r22, 0x3D	; 61
    1522:	64 9f       	mul	r22, r20
    1524:	c0 01       	movw	r24, r0
    1526:	65 9f       	mul	r22, r21
    1528:	90 0d       	add	r25, r0
    152a:	11 24       	eor	r1, r1
    152c:	28 17       	cp	r18, r24
    152e:	39 07       	cpc	r19, r25
    1530:	a4 f0       	brlt	.+40     	; 0x155a <__vector_7+0xa26>
		{
			ch->tempStable = 1;
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	90 93 08 03 	sts	0x0308, r25
    153a:	80 93 07 03 	sts	0x0307, r24
			ch->tempSettleCnt --;
    153e:	80 81       	ld	r24, Z
    1540:	91 81       	ldd	r25, Z+1	; 0x01
    1542:	01 97       	sbiw	r24, 0x01	; 1
    1544:	91 83       	std	Z+1, r25	; 0x01
    1546:	80 83       	st	Z, r24
    1548:	08 c0       	rjmp	.+16     	; 0x155a <__vector_7+0xa26>
		}			
	}
	else
	{
		ch->tempSettleCnt = 0;
    154a:	10 92 04 03 	sts	0x0304, r1
    154e:	10 92 03 03 	sts	0x0303, r1
		ch->tempStable = 0;
    1552:	10 92 08 03 	sts	0x0308, r1
    1556:	10 92 07 03 	sts	0x0307, r1
		case 3:
		PORTD &= 0b10111111;	// Set CS3 low
		break;
						
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
    155a:	5f 98       	cbi	0x0b, 7	; 11
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    1560:	0d b4       	in	r0, 0x2d	; 45
    1562:	07 fe       	sbrs	r0, 7
    1564:	fd cf       	rjmp	.-6      	; 0x1560 <__vector_7+0xa2c>
	byteword=SPDR;				//just for clearing SPIF
    1566:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
    1568:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    156a:	0d b4       	in	r0, 0x2d	; 45
    156c:	07 fe       	sbrs	r0, 7
    156e:	fd cf       	rjmp	.-6      	; 0x156a <__vector_7+0xa36>
	byteword=SPDR;
    1570:	9e b5       	in	r25, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
    1572:	8b b1       	in	r24, 0x0b	; 11
    1574:	80 6f       	ori	r24, 0xF0	; 240
    1576:	8b b9       	out	0x0b, r24	; 11
		case 3:
		PORTD &= 0b10111111;	// Set CS3 low
		break;
						
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
    1578:	5f 98       	cbi	0x0b, 7	; 11
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
    157a:	82 e0       	ldi	r24, 0x02	; 2
    157c:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    157e:	0d b4       	in	r0, 0x2d	; 45
    1580:	07 fe       	sbrs	r0, 7
    1582:	fd cf       	rjmp	.-6      	; 0x157e <__vector_7+0xa4a>
	byteword=SPDR;				//just for clearing SPIF
    1584:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
    1586:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    1588:	0d b4       	in	r0, 0x2d	; 45
    158a:	07 fe       	sbrs	r0, 7
    158c:	fd cf       	rjmp	.-6      	; 0x1588 <__vector_7+0xa54>
	byteword=SPDR;
    158e:	6e b5       	in	r22, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
    1590:	8b b1       	in	r24, 0x0b	; 11
    1592:	80 6f       	ori	r24, 0xF0	; 240
    1594:	8b b9       	out	0x0b, r24	; 11
	uint8_t u8_msb = 0;
	uint8_t u8_lsb = 0;
	
	u8_msb = SPIread(0x01, ch);
	u8_lsb = SPIread(0x02, ch);
	adc_code = (((u8_msb << 8) | u8_lsb) >> 1);
    1596:	70 e0       	ldi	r23, 0x00	; 0
    1598:	79 2b       	or	r23, r25
    159a:	75 95       	asr	r23
    159c:	67 95       	ror	r22
	return ((float)adc_code / 32.0 - 256.0);
    159e:	07 2e       	mov	r0, r23
    15a0:	00 0c       	add	r0, r0
    15a2:	88 0b       	sbc	r24, r24
    15a4:	99 0b       	sbc	r25, r25
    15a6:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <__floatsisf>
    15aa:	20 e0       	ldi	r18, 0x00	; 0
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	40 e0       	ldi	r20, 0x00	; 0
    15b0:	5d e3       	ldi	r21, 0x3D	; 61
    15b2:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <__mulsf3>
    15b6:	20 e0       	ldi	r18, 0x00	; 0
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	40 e8       	ldi	r20, 0x80	; 128
    15bc:	53 e4       	ldi	r21, 0x43	; 67
    15be:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__subsf3>
	PORTD &= 0b11110111;						// Turn off LED on PCB (Irq call freq: 16MHz / 1024 / 255 = 61.3 Hz )
}

static inline void PIDctrl(channel *ch, int tempSensor)
{
	ch->TempSensor = ReadTempSensor(tempSensor);
    15c2:	e6 e4       	ldi	r30, 0x46	; 70
    15c4:	f1 e0       	ldi	r31, 0x01	; 1
    15c6:	64 83       	std	Z+4, r22	; 0x04
    15c8:	75 83       	std	Z+5, r23	; 0x05
    15ca:	86 83       	std	Z+6, r24	; 0x06
    15cc:	97 83       	std	Z+7, r25	; 0x07
	if(ch->TempSensor > (float)maxAllowedTemp)								// Max temperature limit
    15ce:	64 81       	ldd	r22, Z+4	; 0x04
    15d0:	75 81       	ldd	r23, Z+5	; 0x05
    15d2:	86 81       	ldd	r24, Z+6	; 0x06
    15d4:	97 81       	ldd	r25, Z+7	; 0x07
    15d6:	20 e0       	ldi	r18, 0x00	; 0
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	40 ef       	ldi	r20, 0xF0	; 240
    15dc:	52 e4       	ldi	r21, 0x42	; 66
    15de:	0e 94 67 20 	call	0x40ce	; 0x40ce <__gesf2>
    15e2:	18 16       	cp	r1, r24
    15e4:	2c f4       	brge	.+10     	; 0x15f0 <__vector_7+0xabc>
	{
		ch->heaterEnable = false;
    15e6:	10 92 a8 01 	sts	0x01A8, r1
		PORTC &= allHeaterOff;
    15ea:	88 b1       	in	r24, 0x08	; 8
    15ec:	80 7f       	andi	r24, 0xF0	; 240
    15ee:	88 b9       	out	0x08, r24	; 8
	}

	ch->TempError[CtrlErrorIdx] = ch->TempSetPoint - ch->TempSensor;		// Control error
    15f0:	00 91 44 01 	lds	r16, 0x0144
    15f4:	10 91 45 01 	lds	r17, 0x0145
    15f8:	c6 e4       	ldi	r28, 0x46	; 70
    15fa:	d1 e0       	ldi	r29, 0x01	; 1
    15fc:	68 81       	ld	r22, Y
    15fe:	79 81       	ldd	r23, Y+1	; 0x01
    1600:	8a 81       	ldd	r24, Y+2	; 0x02
    1602:	9b 81       	ldd	r25, Y+3	; 0x03
    1604:	2c 81       	ldd	r18, Y+4	; 0x04
    1606:	3d 81       	ldd	r19, Y+5	; 0x05
    1608:	4e 81       	ldd	r20, Y+6	; 0x06
    160a:	5f 81       	ldd	r21, Y+7	; 0x07
    160c:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__subsf3>
    1610:	00 0f       	add	r16, r16
    1612:	11 1f       	adc	r17, r17
    1614:	00 0f       	add	r16, r16
    1616:	11 1f       	adc	r17, r17
    1618:	f8 01       	movw	r30, r16
    161a:	e2 59       	subi	r30, 0x92	; 146
    161c:	fe 4f       	sbci	r31, 0xFE	; 254
    161e:	60 83       	st	Z, r22
    1620:	71 83       	std	Z+1, r23	; 0x01
    1622:	82 83       	std	Z+2, r24	; 0x02
    1624:	93 83       	std	Z+3, r25	; 0x03
	
	ch->P_err = ch->TempError[CtrlErrorIdx] * ch->Pgain;					// P error
    1626:	e0 91 44 01 	lds	r30, 0x0144
    162a:	f0 91 45 01 	lds	r31, 0x0145
    162e:	ee 0f       	add	r30, r30
    1630:	ff 1f       	adc	r31, r31
    1632:	ee 0f       	add	r30, r30
    1634:	ff 1f       	adc	r31, r31
    1636:	e2 59       	subi	r30, 0x92	; 146
    1638:	fe 4f       	sbci	r31, 0xFE	; 254
    163a:	60 81       	ld	r22, Z
    163c:	71 81       	ldd	r23, Z+1	; 0x01
    163e:	82 81       	ldd	r24, Z+2	; 0x02
    1640:	93 81       	ldd	r25, Z+3	; 0x03
    1642:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1644:	3d 8d       	ldd	r19, Y+29	; 0x1d
    1646:	4e 8d       	ldd	r20, Y+30	; 0x1e
    1648:	5f 8d       	ldd	r21, Y+31	; 0x1f
    164a:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <__mulsf3>
    164e:	68 87       	std	Y+8, r22	; 0x08
    1650:	79 87       	std	Y+9, r23	; 0x09
    1652:	8a 87       	std	Y+10, r24	; 0x0a
    1654:	9b 87       	std	Y+11, r25	; 0x0b
	ch->I_err = ch->I_err + (ch->TempError[CtrlErrorIdx] * ch->Igain);		// I error
    1656:	cc 84       	ldd	r12, Y+12	; 0x0c
    1658:	dd 84       	ldd	r13, Y+13	; 0x0d
    165a:	ee 84       	ldd	r14, Y+14	; 0x0e
    165c:	ff 84       	ldd	r15, Y+15	; 0x0f
    165e:	e0 91 44 01 	lds	r30, 0x0144
    1662:	f0 91 45 01 	lds	r31, 0x0145
    1666:	ee 0f       	add	r30, r30
    1668:	ff 1f       	adc	r31, r31
    166a:	ee 0f       	add	r30, r30
    166c:	ff 1f       	adc	r31, r31
    166e:	e2 59       	subi	r30, 0x92	; 146
    1670:	fe 4f       	sbci	r31, 0xFE	; 254
    1672:	60 81       	ld	r22, Z
    1674:	71 81       	ldd	r23, Z+1	; 0x01
    1676:	82 81       	ldd	r24, Z+2	; 0x02
    1678:	93 81       	ldd	r25, Z+3	; 0x03
    167a:	28 a1       	ldd	r18, Y+32	; 0x20
    167c:	39 a1       	ldd	r19, Y+33	; 0x21
    167e:	4a a1       	ldd	r20, Y+34	; 0x22
    1680:	5b a1       	ldd	r21, Y+35	; 0x23
    1682:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <__mulsf3>
    1686:	9b 01       	movw	r18, r22
    1688:	ac 01       	movw	r20, r24
    168a:	c7 01       	movw	r24, r14
    168c:	b6 01       	movw	r22, r12
    168e:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__addsf3>
    1692:	6c 87       	std	Y+12, r22	; 0x0c
    1694:	7d 87       	std	Y+13, r23	; 0x0d
    1696:	8e 87       	std	Y+14, r24	; 0x0e
    1698:	9f 87       	std	Y+15, r25	; 0x0f
	if(ch->I_err > integralErrorLimit)
    169a:	6c 85       	ldd	r22, Y+12	; 0x0c
    169c:	7d 85       	ldd	r23, Y+13	; 0x0d
    169e:	8e 85       	ldd	r24, Y+14	; 0x0e
    16a0:	9f 85       	ldd	r25, Y+15	; 0x0f
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	40 e2       	ldi	r20, 0x20	; 32
    16a8:	51 e4       	ldi	r21, 0x41	; 65
    16aa:	0e 94 67 20 	call	0x40ce	; 0x40ce <__gesf2>
    16ae:	18 16       	cp	r1, r24
    16b0:	64 f4       	brge	.+24     	; 0x16ca <__vector_7+0xb96>
	{
		ch->I_err = integralErrorLimit;
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	a0 e2       	ldi	r26, 0x20	; 32
    16b8:	b1 e4       	ldi	r27, 0x41	; 65
    16ba:	80 93 52 01 	sts	0x0152, r24
    16be:	90 93 53 01 	sts	0x0153, r25
    16c2:	a0 93 54 01 	sts	0x0154, r26
    16c6:	b0 93 55 01 	sts	0x0155, r27
	}
	if(ch->I_err < -integralErrorLimit)
    16ca:	60 91 52 01 	lds	r22, 0x0152
    16ce:	70 91 53 01 	lds	r23, 0x0153
    16d2:	80 91 54 01 	lds	r24, 0x0154
    16d6:	90 91 55 01 	lds	r25, 0x0155
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	40 e2       	ldi	r20, 0x20	; 32
    16e0:	51 ec       	ldi	r21, 0xC1	; 193
    16e2:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__cmpsf2>
    16e6:	88 23       	and	r24, r24
    16e8:	64 f4       	brge	.+24     	; 0x1702 <__vector_7+0xbce>
	{
		ch->I_err = -integralErrorLimit;
    16ea:	80 e0       	ldi	r24, 0x00	; 0
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	a0 e2       	ldi	r26, 0x20	; 32
    16f0:	b1 ec       	ldi	r27, 0xC1	; 193
    16f2:	80 93 52 01 	sts	0x0152, r24
    16f6:	90 93 53 01 	sts	0x0153, r25
    16fa:	a0 93 54 01 	sts	0x0154, r26
    16fe:	b0 93 55 01 	sts	0x0155, r27
	}
	
	ch->D_err = (ch->TempError[CtrlErrorIdx] - ch->TempError[CtrlErrorHistIdx]) * ch->Dgain; // D error
    1702:	e0 91 44 01 	lds	r30, 0x0144
    1706:	f0 91 45 01 	lds	r31, 0x0145
    170a:	c6 e4       	ldi	r28, 0x46	; 70
    170c:	d1 e0       	ldi	r29, 0x01	; 1
    170e:	ee 0f       	add	r30, r30
    1710:	ff 1f       	adc	r31, r31
    1712:	ee 0f       	add	r30, r30
    1714:	ff 1f       	adc	r31, r31
    1716:	e2 59       	subi	r30, 0x92	; 146
    1718:	fe 4f       	sbci	r31, 0xFE	; 254
    171a:	60 81       	ld	r22, Z
    171c:	71 81       	ldd	r23, Z+1	; 0x01
    171e:	82 81       	ldd	r24, Z+2	; 0x02
    1720:	93 81       	ldd	r25, Z+3	; 0x03
    1722:	e0 91 00 01 	lds	r30, 0x0100
    1726:	f0 91 01 01 	lds	r31, 0x0101
    172a:	ee 0f       	add	r30, r30
    172c:	ff 1f       	adc	r31, r31
    172e:	ee 0f       	add	r30, r30
    1730:	ff 1f       	adc	r31, r31
    1732:	e2 59       	subi	r30, 0x92	; 146
    1734:	fe 4f       	sbci	r31, 0xFE	; 254
    1736:	20 81       	ld	r18, Z
    1738:	31 81       	ldd	r19, Z+1	; 0x01
    173a:	42 81       	ldd	r20, Z+2	; 0x02
    173c:	53 81       	ldd	r21, Z+3	; 0x03
    173e:	cc a0       	ldd	r12, Y+36	; 0x24
    1740:	dd a0       	ldd	r13, Y+37	; 0x25
    1742:	ee a0       	ldd	r14, Y+38	; 0x26
    1744:	ff a0       	ldd	r15, Y+39	; 0x27
    1746:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__subsf3>
    174a:	a7 01       	movw	r20, r14
    174c:	96 01       	movw	r18, r12
    174e:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <__mulsf3>
    1752:	68 8b       	std	Y+16, r22	; 0x10
    1754:	79 8b       	std	Y+17, r23	; 0x11
    1756:	8a 8b       	std	Y+18, r24	; 0x12
    1758:	9b 8b       	std	Y+19, r25	; 0x13
	
	ch->Control_PID = ch->P_err + ch->I_err + ch->D_err;
    175a:	68 85       	ldd	r22, Y+8	; 0x08
    175c:	79 85       	ldd	r23, Y+9	; 0x09
    175e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1760:	9b 85       	ldd	r25, Y+11	; 0x0b
    1762:	2c 85       	ldd	r18, Y+12	; 0x0c
    1764:	3d 85       	ldd	r19, Y+13	; 0x0d
    1766:	4e 85       	ldd	r20, Y+14	; 0x0e
    1768:	5f 85       	ldd	r21, Y+15	; 0x0f
    176a:	c8 88       	ldd	r12, Y+16	; 0x10
    176c:	d9 88       	ldd	r13, Y+17	; 0x11
    176e:	ea 88       	ldd	r14, Y+18	; 0x12
    1770:	fb 88       	ldd	r15, Y+19	; 0x13
    1772:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__addsf3>
    1776:	a7 01       	movw	r20, r14
    1778:	96 01       	movw	r18, r12
    177a:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__addsf3>
    177e:	68 8f       	std	Y+24, r22	; 0x18
    1780:	79 8f       	std	Y+25, r23	; 0x19
    1782:	8a 8f       	std	Y+26, r24	; 0x1a
    1784:	9b 8f       	std	Y+27, r25	; 0x1b
	ch->Control = ch->Control_PID + ch->TempSetPoint * (float)0.21 - 5;
    1786:	c8 8c       	ldd	r12, Y+24	; 0x18
    1788:	d9 8c       	ldd	r13, Y+25	; 0x19
    178a:	ea 8c       	ldd	r14, Y+26	; 0x1a
    178c:	fb 8c       	ldd	r15, Y+27	; 0x1b
    178e:	68 81       	ld	r22, Y
    1790:	79 81       	ldd	r23, Y+1	; 0x01
    1792:	8a 81       	ldd	r24, Y+2	; 0x02
    1794:	9b 81       	ldd	r25, Y+3	; 0x03
    1796:	2d e3       	ldi	r18, 0x3D	; 61
    1798:	3a e0       	ldi	r19, 0x0A	; 10
    179a:	47 e5       	ldi	r20, 0x57	; 87
    179c:	5e e3       	ldi	r21, 0x3E	; 62
    179e:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <__mulsf3>
    17a2:	9b 01       	movw	r18, r22
    17a4:	ac 01       	movw	r20, r24
    17a6:	c7 01       	movw	r24, r14
    17a8:	b6 01       	movw	r22, r12
    17aa:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__addsf3>
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	40 ea       	ldi	r20, 0xA0	; 160
    17b4:	50 e4       	ldi	r21, 0x40	; 64
    17b6:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__subsf3>
    17ba:	6c 8b       	std	Y+20, r22	; 0x14
    17bc:	7d 8b       	std	Y+21, r23	; 0x15
    17be:	8e 8b       	std	Y+22, r24	; 0x16
    17c0:	9f 8b       	std	Y+23, r25	; 0x17
	ch->pwm = (round(ch->Control));
    17c2:	6c 89       	ldd	r22, Y+20	; 0x14
    17c4:	7d 89       	ldd	r23, Y+21	; 0x15
    17c6:	8e 89       	ldd	r24, Y+22	; 0x16
    17c8:	9f 89       	ldd	r25, Y+23	; 0x17
    17ca:	0e 94 ce 20 	call	0x419c	; 0x419c <round>
    17ce:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <__fixsfsi>
    17d2:	70 93 a7 01 	sts	0x01A7, r23
    17d6:	60 93 a6 01 	sts	0x01A6, r22
	
	if(fabs(ch->TempError[CtrlErrorIdx]) > integralErrorActiveWindow)
    17da:	e0 91 44 01 	lds	r30, 0x0144
    17de:	f0 91 45 01 	lds	r31, 0x0145
    17e2:	ee 0f       	add	r30, r30
    17e4:	ff 1f       	adc	r31, r31
    17e6:	ee 0f       	add	r30, r30
    17e8:	ff 1f       	adc	r31, r31
    17ea:	e2 59       	subi	r30, 0x92	; 146
    17ec:	fe 4f       	sbci	r31, 0xFE	; 254
    17ee:	80 81       	ld	r24, Z
    17f0:	91 81       	ldd	r25, Z+1	; 0x01
    17f2:	a2 81       	ldd	r26, Z+2	; 0x02
    17f4:	b3 81       	ldd	r27, Z+3	; 0x03
    17f6:	bc 01       	movw	r22, r24
    17f8:	cd 01       	movw	r24, r26
    17fa:	9f 77       	andi	r25, 0x7F	; 127
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	40 ea       	ldi	r20, 0xA0	; 160
    1802:	50 e4       	ldi	r21, 0x40	; 64
    1804:	0e 94 67 20 	call	0x40ce	; 0x40ce <__gesf2>
    1808:	18 16       	cp	r1, r24
    180a:	44 f4       	brge	.+16     	; 0x181c <__vector_7+0xce8>
	{
		ch->I_err = 0;														// Avoid integral wind-up
    180c:	10 92 52 01 	sts	0x0152, r1
    1810:	10 92 53 01 	sts	0x0153, r1
    1814:	10 92 54 01 	sts	0x0154, r1
    1818:	10 92 55 01 	sts	0x0155, r1
	}
	
	if(fabs(ch->TempError[CtrlErrorIdx]) <= ch->tempErrorWin)				// Temperature settle window
    181c:	e0 91 44 01 	lds	r30, 0x0144
    1820:	f0 91 45 01 	lds	r31, 0x0145
    1824:	ee 0f       	add	r30, r30
    1826:	ff 1f       	adc	r31, r31
    1828:	ee 0f       	add	r30, r30
    182a:	ff 1f       	adc	r31, r31
    182c:	e2 59       	subi	r30, 0x92	; 146
    182e:	fe 4f       	sbci	r31, 0xFE	; 254
    1830:	80 81       	ld	r24, Z
    1832:	91 81       	ldd	r25, Z+1	; 0x01
    1834:	a2 81       	ldd	r26, Z+2	; 0x02
    1836:	b3 81       	ldd	r27, Z+3	; 0x03
    1838:	20 91 9a 01 	lds	r18, 0x019A
    183c:	30 91 9b 01 	lds	r19, 0x019B
    1840:	40 91 9c 01 	lds	r20, 0x019C
    1844:	50 91 9d 01 	lds	r21, 0x019D
    1848:	bc 01       	movw	r22, r24
    184a:	cd 01       	movw	r24, r26
    184c:	9f 77       	andi	r25, 0x7F	; 127
    184e:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__cmpsf2>
    1852:	18 16       	cp	r1, r24
    1854:	14 f1       	brlt	.+68     	; 0x189a <__vector_7+0xd66>
	{
		ch->tempSettleCnt ++;
    1856:	ee e9       	ldi	r30, 0x9E	; 158
    1858:	f1 e0       	ldi	r31, 0x01	; 1
    185a:	80 81       	ld	r24, Z
    185c:	91 81       	ldd	r25, Z+1	; 0x01
    185e:	01 96       	adiw	r24, 0x01	; 1
    1860:	91 83       	std	Z+1, r25	; 0x01
    1862:	80 83       	st	Z, r24
		if(ch->tempSettleCnt >= (ch->tempSettleTime * 61))
    1864:	20 81       	ld	r18, Z
    1866:	31 81       	ldd	r19, Z+1	; 0x01
    1868:	40 91 a0 01 	lds	r20, 0x01A0
    186c:	50 91 a1 01 	lds	r21, 0x01A1
    1870:	6d e3       	ldi	r22, 0x3D	; 61
    1872:	64 9f       	mul	r22, r20
    1874:	c0 01       	movw	r24, r0
    1876:	65 9f       	mul	r22, r21
    1878:	90 0d       	add	r25, r0
    187a:	11 24       	eor	r1, r1
    187c:	28 17       	cp	r18, r24
    187e:	39 07       	cpc	r19, r25
    1880:	a4 f0       	brlt	.+40     	; 0x18aa <__vector_7+0xd76>
		{
			ch->tempStable = 1;
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	90 93 a3 01 	sts	0x01A3, r25
    188a:	80 93 a2 01 	sts	0x01A2, r24
			ch->tempSettleCnt --;
    188e:	80 81       	ld	r24, Z
    1890:	91 81       	ldd	r25, Z+1	; 0x01
    1892:	01 97       	sbiw	r24, 0x01	; 1
    1894:	91 83       	std	Z+1, r25	; 0x01
    1896:	80 83       	st	Z, r24
    1898:	08 c0       	rjmp	.+16     	; 0x18aa <__vector_7+0xd76>
		}			
	}
	else
	{
		ch->tempSettleCnt = 0;
    189a:	10 92 9f 01 	sts	0x019F, r1
    189e:	10 92 9e 01 	sts	0x019E, r1
		ch->tempStable = 0;
    18a2:	10 92 a3 01 	sts	0x01A3, r1
    18a6:	10 92 a2 01 	sts	0x01A2, r1
	PIDctrl(&ch0, 1);
	PIDctrl(&ch1, 2);
	PIDctrl(&ch2, 3);
	PIDctrl(&ch3, 4);

	CtrlErrorIdx ++;							// Control error ring buffer index
    18aa:	80 91 44 01 	lds	r24, 0x0144
    18ae:	90 91 45 01 	lds	r25, 0x0145
    18b2:	01 96       	adiw	r24, 0x01	; 1
    18b4:	90 93 45 01 	sts	0x0145, r25
    18b8:	80 93 44 01 	sts	0x0144, r24
	if(CtrlErrorIdx > errorHistory)
    18bc:	80 91 44 01 	lds	r24, 0x0144
    18c0:	90 91 45 01 	lds	r25, 0x0145
    18c4:	0b 97       	sbiw	r24, 0x0b	; 11
    18c6:	24 f0       	brlt	.+8      	; 0x18d0 <__vector_7+0xd9c>
	{
		CtrlErrorIdx = 0;
    18c8:	10 92 45 01 	sts	0x0145, r1
    18cc:	10 92 44 01 	sts	0x0144, r1
	}
	CtrlErrorHistIdx = CtrlErrorIdx + 1;
    18d0:	80 91 44 01 	lds	r24, 0x0144
    18d4:	90 91 45 01 	lds	r25, 0x0145
    18d8:	01 96       	adiw	r24, 0x01	; 1
    18da:	90 93 01 01 	sts	0x0101, r25
    18de:	80 93 00 01 	sts	0x0100, r24
	if(CtrlErrorHistIdx > errorHistory)
    18e2:	80 91 00 01 	lds	r24, 0x0100
    18e6:	90 91 01 01 	lds	r25, 0x0101
    18ea:	0b 97       	sbiw	r24, 0x0b	; 11
    18ec:	24 f0       	brlt	.+8      	; 0x18f6 <__vector_7+0xdc2>
	{
		CtrlErrorHistIdx = 0;
    18ee:	10 92 01 01 	sts	0x0101, r1
    18f2:	10 92 00 01 	sts	0x0100, r1
	}		

	PORTD &= 0b11110111;						// Turn off LED on PCB (Irq call freq: 16MHz / 1024 / 255 = 61.3 Hz )
    18f6:	5b 98       	cbi	0x0b, 3	; 11
}
    18f8:	ff 91       	pop	r31
    18fa:	ef 91       	pop	r30
    18fc:	df 91       	pop	r29
    18fe:	cf 91       	pop	r28
    1900:	bf 91       	pop	r27
    1902:	af 91       	pop	r26
    1904:	9f 91       	pop	r25
    1906:	8f 91       	pop	r24
    1908:	7f 91       	pop	r23
    190a:	6f 91       	pop	r22
    190c:	5f 91       	pop	r21
    190e:	4f 91       	pop	r20
    1910:	3f 91       	pop	r19
    1912:	2f 91       	pop	r18
    1914:	1f 91       	pop	r17
    1916:	0f 91       	pop	r16
    1918:	ff 90       	pop	r15
    191a:	ef 90       	pop	r14
    191c:	df 90       	pop	r13
    191e:	cf 90       	pop	r12
    1920:	0f 90       	pop	r0
    1922:	0f be       	out	0x3f, r0	; 63
    1924:	0f 90       	pop	r0
    1926:	1f 90       	pop	r1
    1928:	18 95       	reti

0000192a <ftoa>:
	printStatus("IntiRead: ");
	printStatus(data);
}

void ftoa(float num, char *str)
{
    192a:	8f 92       	push	r8
    192c:	9f 92       	push	r9
    192e:	af 92       	push	r10
    1930:	bf 92       	push	r11
    1932:	cf 92       	push	r12
    1934:	df 92       	push	r13
    1936:	ef 92       	push	r14
    1938:	ff 92       	push	r15
    193a:	0f 93       	push	r16
    193c:	1f 93       	push	r17
    193e:	cf 93       	push	r28
    1940:	df 93       	push	r29
    1942:	cd b7       	in	r28, 0x3d	; 61
    1944:	de b7       	in	r29, 0x3e	; 62
    1946:	64 97       	sbiw	r28, 0x14	; 20
    1948:	0f b6       	in	r0, 0x3f	; 63
    194a:	f8 94       	cli
    194c:	de bf       	out	0x3e, r29	; 62
    194e:	0f be       	out	0x3f, r0	; 63
    1950:	cd bf       	out	0x3d, r28	; 61
    1952:	4b 01       	movw	r8, r22
    1954:	5c 01       	movw	r10, r24
    1956:	8a 01       	movw	r16, r20
	int intpart = num;
    1958:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <__fixsfsi>
    195c:	6b 01       	movw	r12, r22
    195e:	7c 01       	movw	r14, r24
	int i;
	float decimal_part;
	char decimal[20];
	int PRECISION = 3;						// Decimal precision

	memset(str, 0x0, 20);
    1960:	84 e1       	ldi	r24, 0x14	; 20
    1962:	f8 01       	movw	r30, r16
    1964:	11 92       	st	Z+, r1
    1966:	8a 95       	dec	r24
    1968:	e9 f7       	brne	.-6      	; 0x1964 <ftoa+0x3a>
    196a:	4a e0       	ldi	r20, 0x0A	; 10
    196c:	b8 01       	movw	r22, r16
    196e:	c6 01       	movw	r24, r12
    1970:	0e 94 97 21 	call	0x432e	; 0x432e <__itoa_ncheck>
	itoa(num, str, 10);

	strcat(str, ".");
    1974:	f8 01       	movw	r30, r16
    1976:	01 90       	ld	r0, Z+
    1978:	00 20       	and	r0, r0
    197a:	e9 f7       	brne	.-6      	; 0x1976 <ftoa+0x4c>
    197c:	31 97       	sbiw	r30, 0x01	; 1
    197e:	8e e2       	ldi	r24, 0x2E	; 46
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	91 83       	std	Z+1, r25	; 0x01
    1984:	80 83       	st	Z, r24

	decimal_part = num - intpart;
    1986:	b6 01       	movw	r22, r12
    1988:	dd 0c       	add	r13, r13
    198a:	88 0b       	sbc	r24, r24
    198c:	99 0b       	sbc	r25, r25
    198e:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <__floatsisf>
    1992:	9b 01       	movw	r18, r22
    1994:	ac 01       	movw	r20, r24
    1996:	c5 01       	movw	r24, r10
    1998:	b4 01       	movw	r22, r8
    199a:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__subsf3>
	intdecimal = decimal_part * 1000;		// If decimal precision is 3 then 1000, 2 -> 100, 1 -> 10 ...;
    199e:	20 e0       	ldi	r18, 0x00	; 0
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	4a e7       	ldi	r20, 0x7A	; 122
    19a4:	54 e4       	ldi	r21, 0x44	; 68
    19a6:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <__mulsf3>
    19aa:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <__fixsfsi>
    19ae:	9b 01       	movw	r18, r22
    19b0:	77 23       	and	r23, r23
    19b2:	24 f4       	brge	.+8      	; 0x19bc <ftoa+0x92>
    19b4:	22 27       	eor	r18, r18
    19b6:	33 27       	eor	r19, r19
    19b8:	26 1b       	sub	r18, r22
    19ba:	37 0b       	sbc	r19, r23
    19bc:	4a e0       	ldi	r20, 0x0A	; 10
    19be:	be 01       	movw	r22, r28
    19c0:	6f 5f       	subi	r22, 0xFF	; 255
    19c2:	7f 4f       	sbci	r23, 0xFF	; 255
    19c4:	c9 01       	movw	r24, r18
    19c6:	0e 94 97 21 	call	0x432e	; 0x432e <__itoa_ncheck>
	if(intdecimal < 0)
	{
		intdecimal = -intdecimal;
	}
	itoa(intdecimal, decimal, 10);
	for(i =0;i < (PRECISION - strlen(decimal));i++)
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	de 01       	movw	r26, r28
    19d0:	11 96       	adiw	r26, 0x01	; 1
    19d2:	23 e0       	ldi	r18, 0x03	; 3
    19d4:	30 e0       	ldi	r19, 0x00	; 0
	{
		strcat(str, "0");
    19d6:	40 e3       	ldi	r20, 0x30	; 48
    19d8:	50 e0       	ldi	r21, 0x00	; 0
	if(intdecimal < 0)
	{
		intdecimal = -intdecimal;
	}
	itoa(intdecimal, decimal, 10);
	for(i =0;i < (PRECISION - strlen(decimal));i++)
    19da:	08 c0       	rjmp	.+16     	; 0x19ec <ftoa+0xc2>
	{
		strcat(str, "0");
    19dc:	f8 01       	movw	r30, r16
    19de:	01 90       	ld	r0, Z+
    19e0:	00 20       	and	r0, r0
    19e2:	e9 f7       	brne	.-6      	; 0x19de <ftoa+0xb4>
    19e4:	31 97       	sbiw	r30, 0x01	; 1
    19e6:	51 83       	std	Z+1, r21	; 0x01
    19e8:	40 83       	st	Z, r20
	if(intdecimal < 0)
	{
		intdecimal = -intdecimal;
	}
	itoa(intdecimal, decimal, 10);
	for(i =0;i < (PRECISION - strlen(decimal));i++)
    19ea:	01 96       	adiw	r24, 0x01	; 1
    19ec:	fd 01       	movw	r30, r26
    19ee:	01 90       	ld	r0, Z+
    19f0:	00 20       	and	r0, r0
    19f2:	e9 f7       	brne	.-6      	; 0x19ee <ftoa+0xc4>
    19f4:	31 97       	sbiw	r30, 0x01	; 1
    19f6:	ea 1b       	sub	r30, r26
    19f8:	fb 0b       	sbc	r31, r27
    19fa:	b9 01       	movw	r22, r18
    19fc:	6e 1b       	sub	r22, r30
    19fe:	7f 0b       	sbc	r23, r31
    1a00:	86 17       	cp	r24, r22
    1a02:	97 07       	cpc	r25, r23
    1a04:	58 f3       	brcs	.-42     	; 0x19dc <ftoa+0xb2>
	{
		strcat(str, "0");
	}
	strcat(str, decimal);
    1a06:	be 01       	movw	r22, r28
    1a08:	6f 5f       	subi	r22, 0xFF	; 255
    1a0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a0c:	c8 01       	movw	r24, r16
    1a0e:	0e 94 63 21 	call	0x42c6	; 0x42c6 <strcat>
}
    1a12:	64 96       	adiw	r28, 0x14	; 20
    1a14:	0f b6       	in	r0, 0x3f	; 63
    1a16:	f8 94       	cli
    1a18:	de bf       	out	0x3e, r29	; 62
    1a1a:	0f be       	out	0x3f, r0	; 63
    1a1c:	cd bf       	out	0x3d, r28	; 61
    1a1e:	df 91       	pop	r29
    1a20:	cf 91       	pop	r28
    1a22:	1f 91       	pop	r17
    1a24:	0f 91       	pop	r16
    1a26:	ff 90       	pop	r15
    1a28:	ef 90       	pop	r14
    1a2a:	df 90       	pop	r13
    1a2c:	cf 90       	pop	r12
    1a2e:	bf 90       	pop	r11
    1a30:	af 90       	pop	r10
    1a32:	9f 90       	pop	r9
    1a34:	8f 90       	pop	r8
    1a36:	08 95       	ret

00001a38 <main>:
	eeprom_write_float( (float*)eepromAdr_TempErrWin3, ch3.tempErrorWin );
	eeprom_write_float(	(float*)eepromAdr_TSettleTime3, ch3.tempSettleTime );	
}

int main(void)
{
    1a38:	cf 93       	push	r28
    1a3a:	df 93       	push	r29
    1a3c:	cd b7       	in	r28, 0x3d	; 61
    1a3e:	de b7       	in	r29, 0x3e	; 62
    1a40:	cd 56       	subi	r28, 0x6D	; 109
    1a42:	d1 09       	sbc	r29, r1
    1a44:	0f b6       	in	r0, 0x3f	; 63
    1a46:	f8 94       	cli
    1a48:	de bf       	out	0x3e, r29	; 62
    1a4a:	0f be       	out	0x3f, r0	; 63
    1a4c:	cd bf       	out	0x3d, r28	; 61
	char requestID[4];
	char s_string[20] = "C2CA SA ADP 1.0";
    1a4e:	80 e1       	ldi	r24, 0x10	; 16
    1a50:	e2 e0       	ldi	r30, 0x02	; 2
    1a52:	f1 e0       	ldi	r31, 0x01	; 1
    1a54:	de 01       	movw	r26, r28
    1a56:	59 96       	adiw	r26, 0x19	; 25
    1a58:	01 90       	ld	r0, Z+
    1a5a:	0d 92       	st	X+, r0
    1a5c:	8a 95       	dec	r24
    1a5e:	e1 f7       	brne	.-8      	; 0x1a58 <main+0x20>
    1a60:	19 a6       	std	Y+41, r1	; 0x29
    1a62:	1a a6       	std	Y+42, r1	; 0x2a
    1a64:	1b a6       	std	Y+43, r1	; 0x2b
    1a66:	1c a6       	std	Y+44, r1	; 0x2c
	char *pos;
	char inCrC_string[5];
	int i;
	int var;
	
	cli();
    1a68:	f8 94       	cli
 */
static void uart_init(void)
{
#if defined UBRR0H
	// get the values from the setbaud tool
	UBRR0H = UBRRH_VALUE;
    1a6a:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBRRL_VALUE;
    1a6e:	82 e2       	ldi	r24, 0x22	; 34
    1a70:	80 93 c4 00 	sts	0x00C4, r24
#else
#error "Device is not supported by the driver"
#endif

#if USE_2X
	UCSR0A |= (1 << U2X0);
    1a74:	e0 ec       	ldi	r30, 0xC0	; 192
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	80 81       	ld	r24, Z
    1a7a:	82 60       	ori	r24, 0x02	; 2
    1a7c:	80 83       	st	Z, r24
#endif

	// enable RX and TX and set interrupts on rx complete
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
    1a7e:	88 e9       	ldi	r24, 0x98	; 152
    1a80:	80 93 c1 00 	sts	0x00C1, r24

	// 8-bit, 1 stop bit, no parity, asynchronous UART
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00) | (0 << USBS0) |
    1a84:	86 e0       	ldi	r24, 0x06	; 6
    1a86:	80 93 c2 00 	sts	0x00C2, r24
 * \retval struct ring_buffer a struct containing the ring buffer
 */
static inline struct ring_buffer ring_buffer_init(uint8_t *buffer, uint8_t size)
{
	struct ring_buffer ring;
	ring.write_offset = 0;
    1a8a:	1a aa       	std	Y+50, r1	; 0x32
	ring.read_offset = 0;
    1a8c:	1b aa       	std	Y+51, r1	; 0x33
	ring.size = size;
    1a8e:	99 24       	eor	r9, r9
    1a90:	9a 94       	dec	r9
    1a92:	9c aa       	std	Y+52, r9	; 0x34
	ring.buffer = buffer;
    1a94:	8c ea       	ldi	r24, 0xAC	; 172
    1a96:	91 e0       	ldi	r25, 0x01	; 1
    1a98:	9e ab       	std	Y+54, r25	; 0x36
    1a9a:	8d ab       	std	Y+53, r24	; 0x35
	return ring;
    1a9c:	85 e0       	ldi	r24, 0x05	; 5
    1a9e:	fe 01       	movw	r30, r28
    1aa0:	f2 96       	adiw	r30, 0x32	; 50
    1aa2:	de 01       	movw	r26, r28
    1aa4:	16 96       	adiw	r26, 0x06	; 6
    1aa6:	01 90       	ld	r0, Z+
    1aa8:	0d 92       	st	X+, r0
    1aaa:	8a 95       	dec	r24
    1aac:	e1 f7       	brne	.-8      	; 0x1aa6 <main+0x6e>
    1aae:	85 e0       	ldi	r24, 0x05	; 5
    1ab0:	fe 01       	movw	r30, r28
    1ab2:	36 96       	adiw	r30, 0x06	; 6
    1ab4:	de 01       	movw	r26, r28
    1ab6:	11 96       	adiw	r26, 0x01	; 1
    1ab8:	01 90       	ld	r0, Z+
    1aba:	0d 92       	st	X+, r0
    1abc:	8a 95       	dec	r24
    1abe:	e1 f7       	brne	.-8      	; 0x1ab8 <main+0x80>
			(0 << UPM01) | (0 << UPM00) | (0 << UMSEL01) |
			(0 << UMSEL00);

	// initialize the in and out buffer for the UART
	ring_buffer_out = ring_buffer_init(out_buffer, BUFFER_SIZE);
    1ac0:	85 e0       	ldi	r24, 0x05	; 5
    1ac2:	fe 01       	movw	r30, r28
    1ac4:	31 96       	adiw	r30, 0x01	; 1
    1ac6:	ae ef       	ldi	r26, 0xFE	; 254
    1ac8:	b4 e0       	ldi	r27, 0x04	; 4
    1aca:	01 90       	ld	r0, Z+
    1acc:	0d 92       	st	X+, r0
    1ace:	8a 95       	dec	r24
    1ad0:	e1 f7       	brne	.-8      	; 0x1aca <main+0x92>
 * \retval struct ring_buffer a struct containing the ring buffer
 */
static inline struct ring_buffer ring_buffer_init(uint8_t *buffer, uint8_t size)
{
	struct ring_buffer ring;
	ring.write_offset = 0;
    1ad2:	1a aa       	std	Y+50, r1	; 0x32
	ring.read_offset = 0;
    1ad4:	1b aa       	std	Y+51, r1	; 0x33
	ring.size = size;
    1ad6:	9c aa       	std	Y+52, r9	; 0x34
	ring.buffer = buffer;
    1ad8:	8e e0       	ldi	r24, 0x0E	; 14
    1ada:	93 e0       	ldi	r25, 0x03	; 3
    1adc:	9e ab       	std	Y+54, r25	; 0x36
    1ade:	8d ab       	std	Y+53, r24	; 0x35
	return ring;
    1ae0:	85 e0       	ldi	r24, 0x05	; 5
    1ae2:	fe 01       	movw	r30, r28
    1ae4:	f2 96       	adiw	r30, 0x32	; 50
    1ae6:	de 01       	movw	r26, r28
    1ae8:	50 96       	adiw	r26, 0x10	; 16
    1aea:	01 90       	ld	r0, Z+
    1aec:	0d 92       	st	X+, r0
    1aee:	8a 95       	dec	r24
    1af0:	e1 f7       	brne	.-8      	; 0x1aea <main+0xb2>
    1af2:	85 e0       	ldi	r24, 0x05	; 5
    1af4:	fe 01       	movw	r30, r28
    1af6:	70 96       	adiw	r30, 0x10	; 16
    1af8:	de 01       	movw	r26, r28
    1afa:	1b 96       	adiw	r26, 0x0b	; 11
    1afc:	01 90       	ld	r0, Z+
    1afe:	0d 92       	st	X+, r0
    1b00:	8a 95       	dec	r24
    1b02:	e1 f7       	brne	.-8      	; 0x1afc <main+0xc4>
	ring_buffer_in = ring_buffer_init(in_buffer, BUFFER_SIZE);
    1b04:	85 e0       	ldi	r24, 0x05	; 5
    1b06:	fe 01       	movw	r30, r28
    1b08:	3b 96       	adiw	r30, 0x0b	; 11
    1b0a:	a5 e1       	ldi	r26, 0x15	; 21
    1b0c:	b4 e0       	ldi	r27, 0x04	; 4
    1b0e:	01 90       	ld	r0, Z+
    1b10:	0d 92       	st	X+, r0
    1b12:	8a 95       	dec	r24
    1b14:	e1 f7       	brne	.-8      	; 0x1b0e <main+0xd6>
	int i;
	int var;
	
	cli();
	uart_init();
	sei();
    1b16:	78 94       	sei
/************************************************
SPI INITIALISATION
*************************************************/
static inline void SPIinit(void)
{
	SPI_DDR &= 0b11101111;							// PB4 = Input = MISO
    1b18:	24 98       	cbi	0x04, 4	; 4
	SPI_DDR = (1<<PORTB3)|(1<<PORTB5|(1<<PORTB2));	// Set MOSI, SCK and SS as output
    1b1a:	8c e2       	ldi	r24, 0x2C	; 44
    1b1c:	84 b9       	out	0x04, r24	; 4
	
	
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0)|(1<<CPHA)|(1<<CPOL); // Enable SPI, Master, set clock rate fck/16
    1b1e:	8d e5       	ldi	r24, 0x5D	; 93
    1b20:	8c bd       	out	0x2c, r24	; 44
	cli();
	uart_init();
	sei();
	SPIinit();

	ch0.pwm = 1;
    1b22:	0f 2e       	mov	r0, r31
    1b24:	fa e1       	ldi	r31, 0x1A	; 26
    1b26:	af 2e       	mov	r10, r31
    1b28:	f4 e0       	ldi	r31, 0x04	; 4
    1b2a:	bf 2e       	mov	r11, r31
    1b2c:	f0 2d       	mov	r31, r0
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	90 93 7b 04 	sts	0x047B, r25
    1b36:	80 93 7a 04 	sts	0x047A, r24
	ch1.pwm = 1;
    1b3a:	0f 2e       	mov	r0, r31
    1b3c:	fd e7       	ldi	r31, 0x7D	; 125
    1b3e:	cf 2e       	mov	r12, r31
    1b40:	f4 e0       	ldi	r31, 0x04	; 4
    1b42:	df 2e       	mov	r13, r31
    1b44:	f0 2d       	mov	r31, r0
    1b46:	90 93 de 04 	sts	0x04DE, r25
    1b4a:	80 93 dd 04 	sts	0x04DD, r24
	ch2.pwm = 1;
    1b4e:	0f 2e       	mov	r0, r31
    1b50:	fb ea       	ldi	r31, 0xAB	; 171
    1b52:	ef 2e       	mov	r14, r31
    1b54:	f2 e0       	ldi	r31, 0x02	; 2
    1b56:	ff 2e       	mov	r15, r31
    1b58:	f0 2d       	mov	r31, r0
    1b5a:	90 93 0c 03 	sts	0x030C, r25
    1b5e:	80 93 0b 03 	sts	0x030B, r24
	ch3.pwm = 1;
    1b62:	06 e4       	ldi	r16, 0x46	; 70
    1b64:	11 e0       	ldi	r17, 0x01	; 1
    1b66:	90 93 a7 01 	sts	0x01A7, r25
    1b6a:	80 93 a6 01 	sts	0x01A6, r24

	DDRD = 0b11111000;			// 1 = output 0 = input
    1b6e:	88 ef       	ldi	r24, 0xF8	; 248
    1b70:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0b00001111;
    1b72:	8f e0       	ldi	r24, 0x0F	; 15
    1b74:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1<<PORTB1);		// Set stepper Dir to output
    1b76:	21 9a       	sbi	0x04, 1	; 4
	
	PORTD |=(1<<PORTD7)|(1<<PORTD6)|(1<<PORTD5)|(1<<PORTD4);	// Set initially all CS high
    1b78:	8b b1       	in	r24, 0x0b	; 11
    1b7a:	80 6f       	ori	r24, 0xF0	; 240
    1b7c:	8b b9       	out	0x0b, r24	; 11
	}
}

static inline void ReadParmEEPROM()
{
	ch0.TempSetPoint = eeprom_read_float((float*)eepromAdr_TempSetPoint0);
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <eeprom_read_dword>
    1b86:	d5 01       	movw	r26, r10
    1b88:	6d 93       	st	X+, r22
    1b8a:	7d 93       	st	X+, r23
    1b8c:	8d 93       	st	X+, r24
    1b8e:	9c 93       	st	X, r25
    1b90:	13 97       	sbiw	r26, 0x03	; 3
	ch0.Pgain = eeprom_read_float((float*)eepromAdr_PgainCh0);
    1b92:	84 e0       	ldi	r24, 0x04	; 4
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <eeprom_read_dword>
    1b9a:	f5 01       	movw	r30, r10
    1b9c:	64 8f       	std	Z+28, r22	; 0x1c
    1b9e:	75 8f       	std	Z+29, r23	; 0x1d
    1ba0:	86 8f       	std	Z+30, r24	; 0x1e
    1ba2:	97 8f       	std	Z+31, r25	; 0x1f
	ch0.Igain = eeprom_read_float((float*)eepromAdr_IgainCh0);
    1ba4:	88 e0       	ldi	r24, 0x08	; 8
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <eeprom_read_dword>
    1bac:	d5 01       	movw	r26, r10
    1bae:	90 96       	adiw	r26, 0x20	; 32
    1bb0:	6d 93       	st	X+, r22
    1bb2:	7d 93       	st	X+, r23
    1bb4:	8d 93       	st	X+, r24
    1bb6:	9c 93       	st	X, r25
    1bb8:	93 97       	sbiw	r26, 0x23	; 35
	ch0.Dgain = eeprom_read_float((float*)eepromAdr_DgainCh0);
    1bba:	8c e0       	ldi	r24, 0x0C	; 12
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <eeprom_read_dword>
    1bc2:	f5 01       	movw	r30, r10
    1bc4:	64 a3       	std	Z+36, r22	; 0x24
    1bc6:	75 a3       	std	Z+37, r23	; 0x25
    1bc8:	86 a3       	std	Z+38, r24	; 0x26
    1bca:	97 a3       	std	Z+39, r25	; 0x27
	ch0.tempErrorWin = eeprom_read_float((float*)eepromAdr_TempErrWin0);
    1bcc:	80 e1       	ldi	r24, 0x10	; 16
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <eeprom_read_dword>
    1bd4:	60 93 6e 04 	sts	0x046E, r22
    1bd8:	70 93 6f 04 	sts	0x046F, r23
    1bdc:	80 93 70 04 	sts	0x0470, r24
    1be0:	90 93 71 04 	sts	0x0471, r25
	ch0.tempSettleTime = eeprom_read_float((float*)eepromAdr_TSettleTime0);
    1be4:	84 e1       	ldi	r24, 0x14	; 20
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <eeprom_read_dword>
    1bec:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <__fixsfsi>
    1bf0:	70 93 75 04 	sts	0x0475, r23
    1bf4:	60 93 74 04 	sts	0x0474, r22
	
	ch1.TempSetPoint = eeprom_read_float((float*)eepromAdr_TempSetPoint1);
    1bf8:	88 e1       	ldi	r24, 0x18	; 24
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <eeprom_read_dword>
    1c00:	d6 01       	movw	r26, r12
    1c02:	6d 93       	st	X+, r22
    1c04:	7d 93       	st	X+, r23
    1c06:	8d 93       	st	X+, r24
    1c08:	9c 93       	st	X, r25
    1c0a:	13 97       	sbiw	r26, 0x03	; 3
	ch1.Pgain = eeprom_read_float((float*)eepromAdr_PgainCh1);
    1c0c:	8c e1       	ldi	r24, 0x1C	; 28
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <eeprom_read_dword>
    1c14:	f6 01       	movw	r30, r12
    1c16:	64 8f       	std	Z+28, r22	; 0x1c
    1c18:	75 8f       	std	Z+29, r23	; 0x1d
    1c1a:	86 8f       	std	Z+30, r24	; 0x1e
    1c1c:	97 8f       	std	Z+31, r25	; 0x1f
	ch1.Igain = eeprom_read_float((float*)eepromAdr_IgainCh1);
    1c1e:	80 e2       	ldi	r24, 0x20	; 32
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <eeprom_read_dword>
    1c26:	d6 01       	movw	r26, r12
    1c28:	90 96       	adiw	r26, 0x20	; 32
    1c2a:	6d 93       	st	X+, r22
    1c2c:	7d 93       	st	X+, r23
    1c2e:	8d 93       	st	X+, r24
    1c30:	9c 93       	st	X, r25
    1c32:	93 97       	sbiw	r26, 0x23	; 35
	ch1.Dgain = eeprom_read_float((float*)eepromAdr_DgainCh1);
    1c34:	84 e2       	ldi	r24, 0x24	; 36
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <eeprom_read_dword>
    1c3c:	f6 01       	movw	r30, r12
    1c3e:	64 a3       	std	Z+36, r22	; 0x24
    1c40:	75 a3       	std	Z+37, r23	; 0x25
    1c42:	86 a3       	std	Z+38, r24	; 0x26
    1c44:	97 a3       	std	Z+39, r25	; 0x27
	ch1.tempErrorWin = eeprom_read_float((float*)eepromAdr_TempErrWin1);
    1c46:	88 e2       	ldi	r24, 0x28	; 40
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <eeprom_read_dword>
    1c4e:	60 93 d1 04 	sts	0x04D1, r22
    1c52:	70 93 d2 04 	sts	0x04D2, r23
    1c56:	80 93 d3 04 	sts	0x04D3, r24
    1c5a:	90 93 d4 04 	sts	0x04D4, r25
	ch1.tempSettleTime = eeprom_read_float((float*)eepromAdr_TSettleTime1);	
    1c5e:	8c e2       	ldi	r24, 0x2C	; 44
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <eeprom_read_dword>
    1c66:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <__fixsfsi>
    1c6a:	70 93 d8 04 	sts	0x04D8, r23
    1c6e:	60 93 d7 04 	sts	0x04D7, r22
	
	ch2.TempSetPoint = eeprom_read_float((float*)eepromAdr_TempSetPoint2);
    1c72:	80 e3       	ldi	r24, 0x30	; 48
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <eeprom_read_dword>
    1c7a:	d7 01       	movw	r26, r14
    1c7c:	6d 93       	st	X+, r22
    1c7e:	7d 93       	st	X+, r23
    1c80:	8d 93       	st	X+, r24
    1c82:	9c 93       	st	X, r25
    1c84:	13 97       	sbiw	r26, 0x03	; 3
	ch2.Pgain = eeprom_read_float((float*)eepromAdr_PgainCh2);
    1c86:	84 e3       	ldi	r24, 0x34	; 52
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <eeprom_read_dword>
    1c8e:	f7 01       	movw	r30, r14
    1c90:	64 8f       	std	Z+28, r22	; 0x1c
    1c92:	75 8f       	std	Z+29, r23	; 0x1d
    1c94:	86 8f       	std	Z+30, r24	; 0x1e
    1c96:	97 8f       	std	Z+31, r25	; 0x1f
	ch2.Igain = eeprom_read_float((float*)eepromAdr_IgainCh2);
    1c98:	88 e3       	ldi	r24, 0x38	; 56
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <eeprom_read_dword>
    1ca0:	d7 01       	movw	r26, r14
    1ca2:	90 96       	adiw	r26, 0x20	; 32
    1ca4:	6d 93       	st	X+, r22
    1ca6:	7d 93       	st	X+, r23
    1ca8:	8d 93       	st	X+, r24
    1caa:	9c 93       	st	X, r25
    1cac:	93 97       	sbiw	r26, 0x23	; 35
	ch2.Dgain = eeprom_read_float((float*)eepromAdr_DgainCh2);
    1cae:	8c e3       	ldi	r24, 0x3C	; 60
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <eeprom_read_dword>
    1cb6:	f7 01       	movw	r30, r14
    1cb8:	64 a3       	std	Z+36, r22	; 0x24
    1cba:	75 a3       	std	Z+37, r23	; 0x25
    1cbc:	86 a3       	std	Z+38, r24	; 0x26
    1cbe:	97 a3       	std	Z+39, r25	; 0x27
	ch2.tempErrorWin = eeprom_read_float((float*)eepromAdr_TempErrWin2);
    1cc0:	80 e4       	ldi	r24, 0x40	; 64
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <eeprom_read_dword>
    1cc8:	60 93 ff 02 	sts	0x02FF, r22
    1ccc:	70 93 00 03 	sts	0x0300, r23
    1cd0:	80 93 01 03 	sts	0x0301, r24
    1cd4:	90 93 02 03 	sts	0x0302, r25
	ch2.tempSettleTime = eeprom_read_float((float*)eepromAdr_TSettleTime2);	
    1cd8:	84 e4       	ldi	r24, 0x44	; 68
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <eeprom_read_dword>
    1ce0:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <__fixsfsi>
    1ce4:	70 93 06 03 	sts	0x0306, r23
    1ce8:	60 93 05 03 	sts	0x0305, r22
	
	ch3.TempSetPoint = eeprom_read_float((float*)eepromAdr_TempSetPoint3);
    1cec:	88 e4       	ldi	r24, 0x48	; 72
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <eeprom_read_dword>
    1cf4:	d8 01       	movw	r26, r16
    1cf6:	6d 93       	st	X+, r22
    1cf8:	7d 93       	st	X+, r23
    1cfa:	8d 93       	st	X+, r24
    1cfc:	9c 93       	st	X, r25
    1cfe:	13 97       	sbiw	r26, 0x03	; 3
	ch3.Pgain = eeprom_read_float((float*)eepromAdr_PgainCh3);
    1d00:	8c e4       	ldi	r24, 0x4C	; 76
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <eeprom_read_dword>
    1d08:	f8 01       	movw	r30, r16
    1d0a:	64 8f       	std	Z+28, r22	; 0x1c
    1d0c:	75 8f       	std	Z+29, r23	; 0x1d
    1d0e:	86 8f       	std	Z+30, r24	; 0x1e
    1d10:	97 8f       	std	Z+31, r25	; 0x1f
	ch3.Igain = eeprom_read_float((float*)eepromAdr_IgainCh3);
    1d12:	80 e5       	ldi	r24, 0x50	; 80
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <eeprom_read_dword>
    1d1a:	d8 01       	movw	r26, r16
    1d1c:	90 96       	adiw	r26, 0x20	; 32
    1d1e:	6d 93       	st	X+, r22
    1d20:	7d 93       	st	X+, r23
    1d22:	8d 93       	st	X+, r24
    1d24:	9c 93       	st	X, r25
    1d26:	93 97       	sbiw	r26, 0x23	; 35
	ch3.Dgain = eeprom_read_float((float*)eepromAdr_DgainCh3);			
    1d28:	84 e5       	ldi	r24, 0x54	; 84
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <eeprom_read_dword>
    1d30:	f8 01       	movw	r30, r16
    1d32:	64 a3       	std	Z+36, r22	; 0x24
    1d34:	75 a3       	std	Z+37, r23	; 0x25
    1d36:	86 a3       	std	Z+38, r24	; 0x26
    1d38:	97 a3       	std	Z+39, r25	; 0x27
	ch3.tempErrorWin = eeprom_read_float((float*)eepromAdr_TempErrWin3);
    1d3a:	88 e5       	ldi	r24, 0x58	; 88
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <eeprom_read_dword>
    1d42:	60 93 9a 01 	sts	0x019A, r22
    1d46:	70 93 9b 01 	sts	0x019B, r23
    1d4a:	80 93 9c 01 	sts	0x019C, r24
    1d4e:	90 93 9d 01 	sts	0x019D, r25
	ch3.tempSettleTime = eeprom_read_float((float*)eepromAdr_TSettleTime3);	
    1d52:	8c e5       	ldi	r24, 0x5C	; 92
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <eeprom_read_dword>
    1d5a:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <__fixsfsi>
    1d5e:	70 93 a1 01 	sts	0x01A1, r23
    1d62:	60 93 a0 01 	sts	0x01A0, r22
	printStatus(data);
}

static inline void MAX31865initAuto(uint8_t ch)
{
	MaxRTDinit(0xC3, ch);
    1d66:	61 e0       	ldi	r22, 0x01	; 1
    1d68:	83 ec       	ldi	r24, 0xC3	; 195
    1d6a:	0e 94 a7 01 	call	0x34e	; 0x34e <MaxRTDinit>
    1d6e:	62 e0       	ldi	r22, 0x02	; 2
    1d70:	83 ec       	ldi	r24, 0xC3	; 195
    1d72:	0e 94 a7 01 	call	0x34e	; 0x34e <MaxRTDinit>
    1d76:	63 e0       	ldi	r22, 0x03	; 3
    1d78:	83 ec       	ldi	r24, 0xC3	; 195
    1d7a:	0e 94 a7 01 	call	0x34e	; 0x34e <MaxRTDinit>
    1d7e:	64 e0       	ldi	r22, 0x04	; 4
    1d80:	83 ec       	ldi	r24, 0xC3	; 195
    1d82:	0e 94 a7 01 	call	0x34e	; 0x34e <MaxRTDinit>
}

static inline void TimerInit(void)
{
	// Timer0 PWM output
	TIMSK0 = _BV(OCIE0A);				// Enable Interrupt TimerCounter0 Compare Match A (TIMER0_COMPA_vect)
    1d86:	82 e0       	ldi	r24, 0x02	; 2
    1d88:	80 93 6e 00 	sts	0x006E, r24
	TCCR0A = _BV(WGM01);				// Mode = CTC (Clear Timer on Compare)
    1d8c:	84 bd       	out	0x24, r24	; 36
	TCCR0B = _BV(CS02) | _BV(CS00);		// 16MHz/1024, 0.000064 seconds per tick
    1d8e:	95 e0       	ldi	r25, 0x05	; 5
    1d90:	95 bd       	out	0x25, r25	; 37
	OCR0A = 16;							// TIMER0_COMPA_vect will be triggered each 0.000064 x 16 = 0.001024 s (976.5 Hz)
    1d92:	90 e1       	ldi	r25, 0x10	; 16
    1d94:	97 bd       	out	0x27, r25	; 39

	// Timer2 PID controller	
	TIMSK2 = _BV(OCIE2A);				// Enable Interrupt TimerCounter2 Compare Match A (TIMER2_COMPA_vect)
    1d96:	80 93 70 00 	sts	0x0070, r24
	TCCR2A = _BV(WGM21);				// Mode = CTC (Clear Timer on Compare)
    1d9a:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B = _BV(CS22) | _BV(CS21) | _BV(CS20);		// 16MHz/1024, 0.000064 seconds per tick
    1d9e:	87 e0       	ldi	r24, 0x07	; 7
    1da0:	80 93 b1 00 	sts	0x00B1, r24
	OCR2A = 255;						// TIMER2_COMPA_vect will be triggered each 0.000064 x 255 = 0.01632 s (61.3 Hz)
    1da4:	90 92 b3 00 	sts	0x00B3, r9
	
	sei();
    1da8:	78 94       	sei
	*	PC:		#12A?VR104
	*	ATMega:	!12A70.0006DCA
	***********************************************************/
	while(1)
	{
		memset(rx_string, 0x00, rx_size);			// Purge rx_string
    1daa:	0f 2e       	mov	r0, r31
    1dac:	f0 ee       	ldi	r31, 0xE0	; 224
    1dae:	ef 2e       	mov	r14, r31
    1db0:	f4 e0       	ldi	r31, 0x04	; 4
    1db2:	ff 2e       	mov	r15, r31
    1db4:	f0 2d       	mov	r31, r0
 * \returns next data byte in buffer
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
    1db6:	05 e1       	ldi	r16, 0x15	; 21
    1db8:	14 e0       	ldi	r17, 0x04	; 4
    1dba:	0f 2e       	mov	r0, r31
    1dbc:	fe ef       	ldi	r31, 0xFE	; 254
    1dbe:	cf 2e       	mov	r12, r31
    1dc0:	f4 e0       	ldi	r31, 0x04	; 4
    1dc2:	df 2e       	mov	r13, r31
    1dc4:	f0 2d       	mov	r31, r0
    1dc6:	be 2c       	mov	r11, r14
    1dc8:	af 2c       	mov	r10, r15
    1dca:	5e 2c       	mov	r5, r14
    1dcc:	4f 2c       	mov	r4, r15
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    1dce:	71 2c       	mov	r7, r1
    1dd0:	0f 2e       	mov	r0, r31
    1dd2:	fe e1       	ldi	r31, 0x1E	; 30
    1dd4:	9f 2e       	mov	r9, r31
    1dd6:	f0 2d       	mov	r31, r0
    1dd8:	d7 01       	movw	r26, r14
    1dda:	e9 2d       	mov	r30, r9
    1ddc:	1d 92       	st	X+, r1
    1dde:	ea 95       	dec	r30
    1de0:	e9 f7       	brne	.-6      	; 0x1ddc <main+0x3a4>
 * \returns next data byte in buffer
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
    1de2:	d8 01       	movw	r26, r16
    1de4:	13 96       	adiw	r26, 0x03	; 3
    1de6:	4d 91       	ld	r20, X+
    1de8:	5c 91       	ld	r21, X
    1dea:	14 97       	sbiw	r26, 0x04	; 4
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    1dec:	12 96       	adiw	r26, 0x02	; 2
    1dee:	2c 91       	ld	r18, X
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	21 50       	subi	r18, 0x01	; 1
    1df4:	31 09       	sbc	r19, r1
    1df6:	e5 2d       	mov	r30, r5
    1df8:	f4 2d       	mov	r31, r4
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    1dfa:	d8 01       	movw	r26, r16
    1dfc:	11 96       	adiw	r26, 0x01	; 1
    1dfe:	8c 91       	ld	r24, X
    1e00:	11 97       	sbiw	r26, 0x01	; 1
    1e02:	9c 91       	ld	r25, X

		for(i = 0; i < rx_size; i++)
		{
			while(!uart_char_waiting());
    1e04:	98 17       	cp	r25, r24
    1e06:	c9 f3       	breq	.-14     	; 0x1dfa <main+0x3c2>
 * \returns next data byte in buffer
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
    1e08:	11 96       	adiw	r26, 0x01	; 1
    1e0a:	8c 91       	ld	r24, X
    1e0c:	da 01       	movw	r26, r20
    1e0e:	a8 0f       	add	r26, r24
    1e10:	b1 1d       	adc	r27, r1
    1e12:	7c 91       	ld	r23, X
 *
 * \returns the next read offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_read(const struct ring_buffer *ring)
{
	return get_next(ring->read_offset, ring->size);
    1e14:	d8 01       	movw	r26, r16
    1e16:	11 96       	adiw	r26, 0x01	; 1
    1e18:	6c 91       	ld	r22, X
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    1e1a:	86 2f       	mov	r24, r22
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	82 17       	cp	r24, r18
    1e20:	93 07       	cpc	r25, r19
    1e22:	11 f0       	breq	.+4      	; 0x1e28 <main+0x3f0>
    1e24:	6f 5f       	subi	r22, 0xFF	; 255
    1e26:	01 c0       	rjmp	.+2      	; 0x1e2a <main+0x3f2>
    1e28:	67 2d       	mov	r22, r7
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
	ring->read_offset = ring_buffer_get_next_read(ring);
    1e2a:	d8 01       	movw	r26, r16
    1e2c:	11 96       	adiw	r26, 0x01	; 1
    1e2e:	6c 93       	st	X, r22
			rx_string[i] = uart_getchar();			// Collect the message
    1e30:	71 93       	st	Z+, r23
			if(rx_string[i] == 0x0D)				// Terminate acquisition if <CR> received
    1e32:	7d 30       	cpi	r23, 0x0D	; 13
    1e34:	19 f0       	breq	.+6      	; 0x1e3c <main+0x404>
	***********************************************************/
	while(1)
	{
		memset(rx_string, 0x00, rx_size);			// Purge rx_string

		for(i = 0; i < rx_size; i++)
    1e36:	ec 15       	cp	r30, r12
    1e38:	fd 05       	cpc	r31, r13
    1e3a:	f9 f6       	brne	.-66     	; 0x1dfa <main+0x3c2>
			{
				break;
			}	
		}

		if(rx_string[0] == '#')
    1e3c:	f7 01       	movw	r30, r14
    1e3e:	80 81       	ld	r24, Z
    1e40:	83 32       	cpi	r24, 0x23	; 35
    1e42:	51 f6       	brne	.-108    	; 0x1dd8 <main+0x3a0>
		{
			pos = NULL;
			pos = strchr(rx_string, '?');
    1e44:	6f e3       	ldi	r22, 0x3F	; 63
    1e46:	70 e0       	ldi	r23, 0x00	; 0
    1e48:	8b 2d       	mov	r24, r11
    1e4a:	9a 2d       	mov	r25, r10
    1e4c:	0e 94 6e 21 	call	0x42dc	; 0x42dc <strchr>
    1e50:	4c 01       	movw	r8, r24
			if(pos != NULL)							
    1e52:	00 97       	sbiw	r24, 0x00	; 0
    1e54:	09 f4       	brne	.+2      	; 0x1e58 <main+0x420>
    1e56:	84 c3       	rjmp	.+1800   	; 0x2560 <main+0xb28>
			{
				requestCmd[0] = *(pos + 1);			// Parse request command	
    1e58:	e9 ea       	ldi	r30, 0xA9	; 169
    1e5a:	f1 e0       	ldi	r31, 0x01	; 1
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	11 96       	adiw	r26, 0x01	; 1
    1e60:	8c 91       	ld	r24, X
    1e62:	11 97       	sbiw	r26, 0x01	; 1
    1e64:	80 83       	st	Z, r24
				requestCmd[1] = *(pos + 2);
    1e66:	12 96       	adiw	r26, 0x02	; 2
    1e68:	8c 91       	ld	r24, X
    1e6a:	81 83       	std	Z+1, r24	; 0x01

				if(strcmp(requestCmd, "IF") == 0)
    1e6c:	66 e1       	ldi	r22, 0x16	; 22
    1e6e:	71 e0       	ldi	r23, 0x01	; 1
    1e70:	cf 01       	movw	r24, r30
    1e72:	0e 94 79 21 	call	0x42f2	; 0x42f2 <strcmp>
    1e76:	89 2b       	or	r24, r25
    1e78:	b9 f5       	brne	.+110    	; 0x1ee8 <main+0x4b0>
				{
					crc[0] = *(pos + 3);			// Parse incoming crc
    1e7a:	e0 e1       	ldi	r30, 0x10	; 16
    1e7c:	f4 e0       	ldi	r31, 0x04	; 4
    1e7e:	d4 01       	movw	r26, r8
    1e80:	13 96       	adiw	r26, 0x03	; 3
    1e82:	8c 91       	ld	r24, X
    1e84:	13 97       	sbiw	r26, 0x03	; 3
    1e86:	80 83       	st	Z, r24
					crc[1] = *(pos + 4);
    1e88:	14 96       	adiw	r26, 0x04	; 4
    1e8a:	8c 91       	ld	r24, X
    1e8c:	14 97       	sbiw	r26, 0x04	; 4
    1e8e:	81 83       	std	Z+1, r24	; 0x01
					crc[2] = *(pos + 5);
    1e90:	15 96       	adiw	r26, 0x05	; 5
    1e92:	8c 91       	ld	r24, X
    1e94:	15 97       	sbiw	r26, 0x05	; 5
    1e96:	82 83       	std	Z+2, r24	; 0x02
					crc[3] = *(pos + 6);
    1e98:	16 96       	adiw	r26, 0x06	; 6
    1e9a:	8c 91       	ld	r24, X
    1e9c:	83 83       	std	Z+3, r24	; 0x03

					itoa(GenCrc16(rx_string, (int)strnlen(rx_string, rx_size)-5), inCrC_string, 16);
    1e9e:	6e e1       	ldi	r22, 0x1E	; 30
    1ea0:	70 e0       	ldi	r23, 0x00	; 0
    1ea2:	8b 2d       	mov	r24, r11
    1ea4:	9a 2d       	mov	r25, r10
    1ea6:	0e 94 82 21 	call	0x4304	; 0x4304 <strnlen>
    1eaa:	bc 01       	movw	r22, r24
    1eac:	65 50       	subi	r22, 0x05	; 5
    1eae:	71 09       	sbc	r23, r1
    1eb0:	8b 2d       	mov	r24, r11
    1eb2:	9a 2d       	mov	r25, r10
    1eb4:	0e 94 c8 01 	call	0x390	; 0x390 <GenCrc16>
    1eb8:	40 e1       	ldi	r20, 0x10	; 16
    1eba:	be 01       	movw	r22, r28
    1ebc:	63 5d       	subi	r22, 0xD3	; 211
    1ebe:	7f 4f       	sbci	r23, 0xFF	; 255
    1ec0:	0e 94 97 21 	call	0x432e	; 0x432e <__itoa_ncheck>
					if(CrcCompare(crc, inCrC_string) == true)
    1ec4:	be 01       	movw	r22, r28
    1ec6:	63 5d       	subi	r22, 0xD3	; 211
    1ec8:	7f 4f       	sbci	r23, 0xFF	; 255
    1eca:	80 e1       	ldi	r24, 0x10	; 16
    1ecc:	94 e0       	ldi	r25, 0x04	; 4
    1ece:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <CrcCompare>
    1ed2:	88 23       	and	r24, r24
    1ed4:	29 f0       	breq	.+10     	; 0x1ee0 <main+0x4a8>
					{
						printStatus(s_string);	
    1ed6:	ce 01       	movw	r24, r28
    1ed8:	49 96       	adiw	r24, 0x19	; 25
    1eda:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    1ede:	04 c0       	rjmp	.+8      	; 0x1ee8 <main+0x4b0>
					}
					else
					{
						printStatus("CRC error");
    1ee0:	89 e1       	ldi	r24, 0x19	; 25
    1ee2:	91 e0       	ldi	r25, 0x01	; 1
    1ee4:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
						//printStatus(rx_string);
					}
				}
					
				if(strcmp(requestCmd, "VR") == 0)
    1ee8:	63 e2       	ldi	r22, 0x23	; 35
    1eea:	71 e0       	ldi	r23, 0x01	; 1
    1eec:	89 ea       	ldi	r24, 0xA9	; 169
    1eee:	91 e0       	ldi	r25, 0x01	; 1
    1ef0:	0e 94 79 21 	call	0x42f2	; 0x42f2 <strcmp>
    1ef4:	89 2b       	or	r24, r25
    1ef6:	09 f0       	breq	.+2      	; 0x1efa <main+0x4c2>
    1ef8:	33 c3       	rjmp	.+1638   	; 0x2560 <main+0xb28>
				{
					requestID[0] = *(pos + 3);		// Parse request ID
    1efa:	f4 01       	movw	r30, r8
    1efc:	83 81       	ldd	r24, Z+3	; 0x03
    1efe:	8d 8b       	std	Y+21, r24	; 0x15
					requestID[1] = *(pos + 4);
    1f00:	84 81       	ldd	r24, Z+4	; 0x04
    1f02:	8e 8b       	std	Y+22, r24	; 0x16
					requestID[2] = *(pos + 5);
    1f04:	85 81       	ldd	r24, Z+5	; 0x05
    1f06:	8f 8b       	std	Y+23, r24	; 0x17
					crc[0] = *(pos + 6);			// Parse incoming crc
    1f08:	e0 e1       	ldi	r30, 0x10	; 16
    1f0a:	f4 e0       	ldi	r31, 0x04	; 4
    1f0c:	d4 01       	movw	r26, r8
    1f0e:	16 96       	adiw	r26, 0x06	; 6
    1f10:	8c 91       	ld	r24, X
    1f12:	16 97       	sbiw	r26, 0x06	; 6
    1f14:	80 83       	st	Z, r24
					crc[1] = *(pos + 7);
    1f16:	17 96       	adiw	r26, 0x07	; 7
    1f18:	8c 91       	ld	r24, X
    1f1a:	17 97       	sbiw	r26, 0x07	; 7
    1f1c:	81 83       	std	Z+1, r24	; 0x01
					crc[2] = *(pos + 8);
    1f1e:	18 96       	adiw	r26, 0x08	; 8
    1f20:	8c 91       	ld	r24, X
    1f22:	18 97       	sbiw	r26, 0x08	; 8
    1f24:	82 83       	std	Z+2, r24	; 0x02
					crc[3] = *(pos + 9);
    1f26:	19 96       	adiw	r26, 0x09	; 9
    1f28:	8c 91       	ld	r24, X
    1f2a:	83 83       	std	Z+3, r24	; 0x03
					
					itoa(GenCrc16(rx_string, (int)strnlen(rx_string, rx_size)-5), inCrC_string, 16);
    1f2c:	6e e1       	ldi	r22, 0x1E	; 30
    1f2e:	70 e0       	ldi	r23, 0x00	; 0
    1f30:	8b 2d       	mov	r24, r11
    1f32:	9a 2d       	mov	r25, r10
    1f34:	0e 94 82 21 	call	0x4304	; 0x4304 <strnlen>
    1f38:	bc 01       	movw	r22, r24
    1f3a:	65 50       	subi	r22, 0x05	; 5
    1f3c:	71 09       	sbc	r23, r1
    1f3e:	8b 2d       	mov	r24, r11
    1f40:	9a 2d       	mov	r25, r10
    1f42:	0e 94 c8 01 	call	0x390	; 0x390 <GenCrc16>
    1f46:	40 e1       	ldi	r20, 0x10	; 16
    1f48:	be 01       	movw	r22, r28
    1f4a:	63 5d       	subi	r22, 0xD3	; 211
    1f4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f4e:	0e 94 97 21 	call	0x432e	; 0x432e <__itoa_ncheck>
					if(CrcCompare(crc, inCrC_string) == true)
    1f52:	be 01       	movw	r22, r28
    1f54:	63 5d       	subi	r22, 0xD3	; 211
    1f56:	7f 4f       	sbci	r23, 0xFF	; 255
    1f58:	80 e1       	ldi	r24, 0x10	; 16
    1f5a:	94 e0       	ldi	r25, 0x04	; 4
    1f5c:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <CrcCompare>
    1f60:	88 23       	and	r24, r24
    1f62:	09 f4       	brne	.+2      	; 0x1f66 <main+0x52e>
    1f64:	f9 c2       	rjmp	.+1522   	; 0x2558 <main+0xb20>
					{					
						var = atol(requestID);
    1f66:	ce 01       	movw	r24, r28
    1f68:	45 96       	adiw	r24, 0x15	; 21
    1f6a:	0e 94 3d 21 	call	0x427a	; 0x427a <atol>

static inline void SendParameter(int id)
{
	char tx_string[20];

	switch(id)
    1f6e:	cb 01       	movw	r24, r22
    1f70:	77 0f       	add	r23, r23
    1f72:	aa 0b       	sbc	r26, r26
    1f74:	bb 0b       	sbc	r27, r27
    1f76:	fc 01       	movw	r30, r24
    1f78:	e4 56       	subi	r30, 0x64	; 100
    1f7a:	f1 09       	sbc	r31, r1
    1f7c:	e7 33       	cpi	r30, 0x37	; 55
    1f7e:	b1 e0       	ldi	r27, 0x01	; 1
    1f80:	fb 07       	cpc	r31, r27
    1f82:	08 f0       	brcs	.+2      	; 0x1f86 <main+0x54e>
    1f84:	e4 c2       	rjmp	.+1480   	; 0x254e <main+0xb16>
    1f86:	ec 5c       	subi	r30, 0xCC	; 204
    1f88:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8a:	0c 94 17 21 	jmp	0x422e	; 0x422e <__tablejump2__>
	{
		// *** Channel 0 ***
		case 100:	// Send sensor 1 temperature		
		ftoa(ch0.TempSensor, tx_string);
    1f8e:	60 91 1e 04 	lds	r22, 0x041E
    1f92:	70 91 1f 04 	lds	r23, 0x041F
    1f96:	80 91 20 04 	lds	r24, 0x0420
    1f9a:	90 91 21 04 	lds	r25, 0x0421
    1f9e:	ae 01       	movw	r20, r28
    1fa0:	4e 5c       	subi	r20, 0xCE	; 206
    1fa2:	5f 4f       	sbci	r21, 0xFF	; 255
    1fa4:	c2 dc       	rcall	.-1660   	; 0x192a <ftoa>
		printStatus(tx_string);
    1fa6:	ce 01       	movw	r24, r28
    1fa8:	c2 96       	adiw	r24, 0x32	; 50
    1faa:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    1fae:	d8 c2       	rjmp	.+1456   	; 0x2560 <main+0xb28>
		break;
		
		case 101:	// Send P part of PID-controller 1
		ftoa(ch0.P_err, tx_string);
    1fb0:	60 91 22 04 	lds	r22, 0x0422
    1fb4:	70 91 23 04 	lds	r23, 0x0423
    1fb8:	80 91 24 04 	lds	r24, 0x0424
    1fbc:	90 91 25 04 	lds	r25, 0x0425
    1fc0:	ae 01       	movw	r20, r28
    1fc2:	4e 5c       	subi	r20, 0xCE	; 206
    1fc4:	5f 4f       	sbci	r21, 0xFF	; 255
    1fc6:	b1 dc       	rcall	.-1694   	; 0x192a <ftoa>
		printStatus(tx_string);
    1fc8:	ce 01       	movw	r24, r28
    1fca:	c2 96       	adiw	r24, 0x32	; 50
    1fcc:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    1fd0:	c7 c2       	rjmp	.+1422   	; 0x2560 <main+0xb28>
		break;
		
		case 102:	// Send I part of PID-controller 1
		ftoa(ch0.I_err, tx_string);
    1fd2:	60 91 26 04 	lds	r22, 0x0426
    1fd6:	70 91 27 04 	lds	r23, 0x0427
    1fda:	80 91 28 04 	lds	r24, 0x0428
    1fde:	90 91 29 04 	lds	r25, 0x0429
    1fe2:	ae 01       	movw	r20, r28
    1fe4:	4e 5c       	subi	r20, 0xCE	; 206
    1fe6:	5f 4f       	sbci	r21, 0xFF	; 255
    1fe8:	a0 dc       	rcall	.-1728   	; 0x192a <ftoa>
		printStatus(tx_string);
    1fea:	ce 01       	movw	r24, r28
    1fec:	c2 96       	adiw	r24, 0x32	; 50
    1fee:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    1ff2:	b6 c2       	rjmp	.+1388   	; 0x2560 <main+0xb28>
		break;
				
		case 103:	// Send D part of PID-controller 1
		ftoa(ch0.D_err, tx_string);
    1ff4:	60 91 2a 04 	lds	r22, 0x042A
    1ff8:	70 91 2b 04 	lds	r23, 0x042B
    1ffc:	80 91 2c 04 	lds	r24, 0x042C
    2000:	90 91 2d 04 	lds	r25, 0x042D
    2004:	ae 01       	movw	r20, r28
    2006:	4e 5c       	subi	r20, 0xCE	; 206
    2008:	5f 4f       	sbci	r21, 0xFF	; 255
    200a:	8f dc       	rcall	.-1762   	; 0x192a <ftoa>
		printStatus(tx_string);
    200c:	ce 01       	movw	r24, r28
    200e:	c2 96       	adiw	r24, 0x32	; 50
    2010:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    2014:	a5 c2       	rjmp	.+1354   	; 0x2560 <main+0xb28>
		break;
		
		case 104:	// Send ch0.TempSetPoint
		ftoa(ch0.TempSetPoint, tx_string);
    2016:	60 91 1a 04 	lds	r22, 0x041A
    201a:	70 91 1b 04 	lds	r23, 0x041B
    201e:	80 91 1c 04 	lds	r24, 0x041C
    2022:	90 91 1d 04 	lds	r25, 0x041D
    2026:	ae 01       	movw	r20, r28
    2028:	4e 5c       	subi	r20, 0xCE	; 206
    202a:	5f 4f       	sbci	r21, 0xFF	; 255
    202c:	7e dc       	rcall	.-1796   	; 0x192a <ftoa>
		printStatus(tx_string);
    202e:	ce 01       	movw	r24, r28
    2030:	c2 96       	adiw	r24, 0x32	; 50
    2032:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    2036:	94 c2       	rjmp	.+1320   	; 0x2560 <main+0xb28>
		break;
		
		case 105:	// Send Pgain ch0
		ftoa(ch0.Pgain, tx_string);
    2038:	60 91 36 04 	lds	r22, 0x0436
    203c:	70 91 37 04 	lds	r23, 0x0437
    2040:	80 91 38 04 	lds	r24, 0x0438
    2044:	90 91 39 04 	lds	r25, 0x0439
    2048:	ae 01       	movw	r20, r28
    204a:	4e 5c       	subi	r20, 0xCE	; 206
    204c:	5f 4f       	sbci	r21, 0xFF	; 255
    204e:	6d dc       	rcall	.-1830   	; 0x192a <ftoa>
		printStatus(tx_string);
    2050:	ce 01       	movw	r24, r28
    2052:	c2 96       	adiw	r24, 0x32	; 50
    2054:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    2058:	83 c2       	rjmp	.+1286   	; 0x2560 <main+0xb28>
		break;								
		
		case 106:	// Send Igain ch0
		ftoa(ch0.Igain, tx_string);
    205a:	60 91 3a 04 	lds	r22, 0x043A
    205e:	70 91 3b 04 	lds	r23, 0x043B
    2062:	80 91 3c 04 	lds	r24, 0x043C
    2066:	90 91 3d 04 	lds	r25, 0x043D
    206a:	ae 01       	movw	r20, r28
    206c:	4e 5c       	subi	r20, 0xCE	; 206
    206e:	5f 4f       	sbci	r21, 0xFF	; 255
    2070:	5c dc       	rcall	.-1864   	; 0x192a <ftoa>
		printStatus(tx_string);
    2072:	ce 01       	movw	r24, r28
    2074:	c2 96       	adiw	r24, 0x32	; 50
    2076:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    207a:	72 c2       	rjmp	.+1252   	; 0x2560 <main+0xb28>
		break;
		
		case 107:	// Send Dgain ch0
		ftoa(ch0.Dgain, tx_string);
    207c:	60 91 3e 04 	lds	r22, 0x043E
    2080:	70 91 3f 04 	lds	r23, 0x043F
    2084:	80 91 40 04 	lds	r24, 0x0440
    2088:	90 91 41 04 	lds	r25, 0x0441
    208c:	ae 01       	movw	r20, r28
    208e:	4e 5c       	subi	r20, 0xCE	; 206
    2090:	5f 4f       	sbci	r21, 0xFF	; 255
    2092:	4b dc       	rcall	.-1898   	; 0x192a <ftoa>
		printStatus(tx_string);
    2094:	ce 01       	movw	r24, r28
    2096:	c2 96       	adiw	r24, 0x32	; 50
    2098:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    209c:	61 c2       	rjmp	.+1218   	; 0x2560 <main+0xb28>
		break;
		
		case 108:	// Send TemperatureWindow
		ftoa(ch0.tempErrorWin, tx_string);
    209e:	60 91 6e 04 	lds	r22, 0x046E
    20a2:	70 91 6f 04 	lds	r23, 0x046F
    20a6:	80 91 70 04 	lds	r24, 0x0470
    20aa:	90 91 71 04 	lds	r25, 0x0471
    20ae:	ae 01       	movw	r20, r28
    20b0:	4e 5c       	subi	r20, 0xCE	; 206
    20b2:	5f 4f       	sbci	r21, 0xFF	; 255
    20b4:	3a dc       	rcall	.-1932   	; 0x192a <ftoa>
		printStatus(tx_string);
    20b6:	ce 01       	movw	r24, r28
    20b8:	c2 96       	adiw	r24, 0x32	; 50
    20ba:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    20be:	50 c2       	rjmp	.+1184   	; 0x2560 <main+0xb28>
		break;
		
		case 109:	// Send SettleTimeTemperature
		itoa(ch0.tempSettleTime, tx_string, 10);
    20c0:	80 91 74 04 	lds	r24, 0x0474
    20c4:	90 91 75 04 	lds	r25, 0x0475
    20c8:	4a e0       	ldi	r20, 0x0A	; 10
    20ca:	be 01       	movw	r22, r28
    20cc:	6e 5c       	subi	r22, 0xCE	; 206
    20ce:	7f 4f       	sbci	r23, 0xFF	; 255
    20d0:	0e 94 97 21 	call	0x432e	; 0x432e <__itoa_ncheck>
		printStatus(tx_string);
    20d4:	ce 01       	movw	r24, r28
    20d6:	c2 96       	adiw	r24, 0x32	; 50
    20d8:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    20dc:	41 c2       	rjmp	.+1154   	; 0x2560 <main+0xb28>
		break;
		
		case 110:	// Send Temperature stable status
		switch(ch0.tempStable)
    20de:	80 91 76 04 	lds	r24, 0x0476
    20e2:	90 91 77 04 	lds	r25, 0x0477
    20e6:	00 97       	sbiw	r24, 0x00	; 0
    20e8:	19 f0       	breq	.+6      	; 0x20f0 <main+0x6b8>
    20ea:	01 97       	sbiw	r24, 0x01	; 1
    20ec:	31 f0       	breq	.+12     	; 0x20fa <main+0x6c2>
    20ee:	38 c2       	rjmp	.+1136   	; 0x2560 <main+0xb28>
		{
			case 0:
			printStatus("0");
    20f0:	86 e2       	ldi	r24, 0x26	; 38
    20f2:	91 e0       	ldi	r25, 0x01	; 1
    20f4:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    20f8:	33 c2       	rjmp	.+1126   	; 0x2560 <main+0xb28>
			break;
				
			case 1:
			printStatus("1");
    20fa:	88 e2       	ldi	r24, 0x28	; 40
    20fc:	91 e0       	ldi	r25, 0x01	; 1
    20fe:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    2102:	2e c2       	rjmp	.+1116   	; 0x2560 <main+0xb28>
		}
		break;
		
		// *** Channel 1 ***
		case 200:	// Send sensor 1 temperature
		ftoa(ch1.TempSensor, tx_string);
    2104:	60 91 81 04 	lds	r22, 0x0481
    2108:	70 91 82 04 	lds	r23, 0x0482
    210c:	80 91 83 04 	lds	r24, 0x0483
    2110:	90 91 84 04 	lds	r25, 0x0484
    2114:	ae 01       	movw	r20, r28
    2116:	4e 5c       	subi	r20, 0xCE	; 206
    2118:	5f 4f       	sbci	r21, 0xFF	; 255
    211a:	07 dc       	rcall	.-2034   	; 0x192a <ftoa>
		printStatus(tx_string);
    211c:	ce 01       	movw	r24, r28
    211e:	c2 96       	adiw	r24, 0x32	; 50
    2120:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    2124:	1d c2       	rjmp	.+1082   	; 0x2560 <main+0xb28>
		break;
		
		case 201:	// Send P part of PID-controller 1
		ftoa(ch1.P_err, tx_string);
    2126:	60 91 85 04 	lds	r22, 0x0485
    212a:	70 91 86 04 	lds	r23, 0x0486
    212e:	80 91 87 04 	lds	r24, 0x0487
    2132:	90 91 88 04 	lds	r25, 0x0488
    2136:	ae 01       	movw	r20, r28
    2138:	4e 5c       	subi	r20, 0xCE	; 206
    213a:	5f 4f       	sbci	r21, 0xFF	; 255
    213c:	f6 db       	rcall	.-2068   	; 0x192a <ftoa>
		printStatus(tx_string);
    213e:	ce 01       	movw	r24, r28
    2140:	c2 96       	adiw	r24, 0x32	; 50
    2142:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    2146:	0c c2       	rjmp	.+1048   	; 0x2560 <main+0xb28>
		break;
		
		case 202:	// Send I part of PID-controller 1
		ftoa(ch1.I_err, tx_string);
    2148:	60 91 89 04 	lds	r22, 0x0489
    214c:	70 91 8a 04 	lds	r23, 0x048A
    2150:	80 91 8b 04 	lds	r24, 0x048B
    2154:	90 91 8c 04 	lds	r25, 0x048C
    2158:	ae 01       	movw	r20, r28
    215a:	4e 5c       	subi	r20, 0xCE	; 206
    215c:	5f 4f       	sbci	r21, 0xFF	; 255
    215e:	e5 db       	rcall	.-2102   	; 0x192a <ftoa>
		printStatus(tx_string);
    2160:	ce 01       	movw	r24, r28
    2162:	c2 96       	adiw	r24, 0x32	; 50
    2164:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    2168:	fb c1       	rjmp	.+1014   	; 0x2560 <main+0xb28>
		break;
				
		case 203:	// Send D part of PID-controller 1
		ftoa(ch1.D_err, tx_string);
    216a:	60 91 8d 04 	lds	r22, 0x048D
    216e:	70 91 8e 04 	lds	r23, 0x048E
    2172:	80 91 8f 04 	lds	r24, 0x048F
    2176:	90 91 90 04 	lds	r25, 0x0490
    217a:	ae 01       	movw	r20, r28
    217c:	4e 5c       	subi	r20, 0xCE	; 206
    217e:	5f 4f       	sbci	r21, 0xFF	; 255
    2180:	d4 db       	rcall	.-2136   	; 0x192a <ftoa>
		printStatus(tx_string);
    2182:	ce 01       	movw	r24, r28
    2184:	c2 96       	adiw	r24, 0x32	; 50
    2186:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    218a:	ea c1       	rjmp	.+980    	; 0x2560 <main+0xb28>
		break;
		
		case 204:	// Send ch1.TempSetPoint
		ftoa(ch1.TempSetPoint, tx_string);
    218c:	60 91 7d 04 	lds	r22, 0x047D
    2190:	70 91 7e 04 	lds	r23, 0x047E
    2194:	80 91 7f 04 	lds	r24, 0x047F
    2198:	90 91 80 04 	lds	r25, 0x0480
    219c:	ae 01       	movw	r20, r28
    219e:	4e 5c       	subi	r20, 0xCE	; 206
    21a0:	5f 4f       	sbci	r21, 0xFF	; 255
    21a2:	c3 db       	rcall	.-2170   	; 0x192a <ftoa>
		printStatus(tx_string);
    21a4:	ce 01       	movw	r24, r28
    21a6:	c2 96       	adiw	r24, 0x32	; 50
    21a8:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    21ac:	d9 c1       	rjmp	.+946    	; 0x2560 <main+0xb28>
		break;
		
		case 205:	// Send Pgain ch1
		ftoa(ch1.Pgain, tx_string);
    21ae:	60 91 99 04 	lds	r22, 0x0499
    21b2:	70 91 9a 04 	lds	r23, 0x049A
    21b6:	80 91 9b 04 	lds	r24, 0x049B
    21ba:	90 91 9c 04 	lds	r25, 0x049C
    21be:	ae 01       	movw	r20, r28
    21c0:	4e 5c       	subi	r20, 0xCE	; 206
    21c2:	5f 4f       	sbci	r21, 0xFF	; 255
    21c4:	b2 db       	rcall	.-2204   	; 0x192a <ftoa>
		printStatus(tx_string);
    21c6:	ce 01       	movw	r24, r28
    21c8:	c2 96       	adiw	r24, 0x32	; 50
    21ca:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    21ce:	c8 c1       	rjmp	.+912    	; 0x2560 <main+0xb28>
		break;
		
		case 206:	// Send Igain ch1
		ftoa(ch1.Igain, tx_string);
    21d0:	60 91 9d 04 	lds	r22, 0x049D
    21d4:	70 91 9e 04 	lds	r23, 0x049E
    21d8:	80 91 9f 04 	lds	r24, 0x049F
    21dc:	90 91 a0 04 	lds	r25, 0x04A0
    21e0:	ae 01       	movw	r20, r28
    21e2:	4e 5c       	subi	r20, 0xCE	; 206
    21e4:	5f 4f       	sbci	r21, 0xFF	; 255
    21e6:	a1 db       	rcall	.-2238   	; 0x192a <ftoa>
		printStatus(tx_string);
    21e8:	ce 01       	movw	r24, r28
    21ea:	c2 96       	adiw	r24, 0x32	; 50
    21ec:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    21f0:	b7 c1       	rjmp	.+878    	; 0x2560 <main+0xb28>
		break;
		
		case 207:	// Send Dgain ch1
		ftoa(ch1.Dgain, tx_string);
    21f2:	60 91 a1 04 	lds	r22, 0x04A1
    21f6:	70 91 a2 04 	lds	r23, 0x04A2
    21fa:	80 91 a3 04 	lds	r24, 0x04A3
    21fe:	90 91 a4 04 	lds	r25, 0x04A4
    2202:	ae 01       	movw	r20, r28
    2204:	4e 5c       	subi	r20, 0xCE	; 206
    2206:	5f 4f       	sbci	r21, 0xFF	; 255
    2208:	90 db       	rcall	.-2272   	; 0x192a <ftoa>
		printStatus(tx_string);
    220a:	ce 01       	movw	r24, r28
    220c:	c2 96       	adiw	r24, 0x32	; 50
    220e:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    2212:	a6 c1       	rjmp	.+844    	; 0x2560 <main+0xb28>
		break;
		
		case 208:	// Send TemperatureWindow
		ftoa(ch1.tempErrorWin, tx_string);
    2214:	60 91 d1 04 	lds	r22, 0x04D1
    2218:	70 91 d2 04 	lds	r23, 0x04D2
    221c:	80 91 d3 04 	lds	r24, 0x04D3
    2220:	90 91 d4 04 	lds	r25, 0x04D4
    2224:	ae 01       	movw	r20, r28
    2226:	4e 5c       	subi	r20, 0xCE	; 206
    2228:	5f 4f       	sbci	r21, 0xFF	; 255
    222a:	7f db       	rcall	.-2306   	; 0x192a <ftoa>
		printStatus(tx_string);
    222c:	ce 01       	movw	r24, r28
    222e:	c2 96       	adiw	r24, 0x32	; 50
    2230:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    2234:	95 c1       	rjmp	.+810    	; 0x2560 <main+0xb28>
		break;
		
		case 209:	// Send SettleTimeTemperature
		itoa(ch1.tempSettleTime, tx_string, 10);
    2236:	80 91 d7 04 	lds	r24, 0x04D7
    223a:	90 91 d8 04 	lds	r25, 0x04D8
    223e:	4a e0       	ldi	r20, 0x0A	; 10
    2240:	be 01       	movw	r22, r28
    2242:	6e 5c       	subi	r22, 0xCE	; 206
    2244:	7f 4f       	sbci	r23, 0xFF	; 255
    2246:	0e 94 97 21 	call	0x432e	; 0x432e <__itoa_ncheck>
		printStatus(tx_string);
    224a:	ce 01       	movw	r24, r28
    224c:	c2 96       	adiw	r24, 0x32	; 50
    224e:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    2252:	86 c1       	rjmp	.+780    	; 0x2560 <main+0xb28>
		break;
		
		case 210:	// Send Temperature stable status
		itoa(ch1.tempStable, tx_string, 10);
    2254:	80 91 d9 04 	lds	r24, 0x04D9
    2258:	90 91 da 04 	lds	r25, 0x04DA
    225c:	4a e0       	ldi	r20, 0x0A	; 10
    225e:	be 01       	movw	r22, r28
    2260:	6e 5c       	subi	r22, 0xCE	; 206
    2262:	7f 4f       	sbci	r23, 0xFF	; 255
    2264:	0e 94 97 21 	call	0x432e	; 0x432e <__itoa_ncheck>
		printStatus(tx_string);
    2268:	ce 01       	movw	r24, r28
    226a:	c2 96       	adiw	r24, 0x32	; 50
    226c:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    2270:	77 c1       	rjmp	.+750    	; 0x2560 <main+0xb28>
		break;		
		
		// *** Channel 2 ***		
		case 300:	// Send sensor 2 temperature
		ftoa(ch2.TempSensor, tx_string);
    2272:	60 91 af 02 	lds	r22, 0x02AF
    2276:	70 91 b0 02 	lds	r23, 0x02B0
    227a:	80 91 b1 02 	lds	r24, 0x02B1
    227e:	90 91 b2 02 	lds	r25, 0x02B2
    2282:	ae 01       	movw	r20, r28
    2284:	4e 5c       	subi	r20, 0xCE	; 206
    2286:	5f 4f       	sbci	r21, 0xFF	; 255
    2288:	50 db       	rcall	.-2400   	; 0x192a <ftoa>
		printStatus(tx_string);
    228a:	ce 01       	movw	r24, r28
    228c:	c2 96       	adiw	r24, 0x32	; 50
    228e:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    2292:	66 c1       	rjmp	.+716    	; 0x2560 <main+0xb28>
		break;
		
		case 301:	// Send P part of PID-controller 2
		ftoa(ch2.P_err, tx_string);
    2294:	60 91 b3 02 	lds	r22, 0x02B3
    2298:	70 91 b4 02 	lds	r23, 0x02B4
    229c:	80 91 b5 02 	lds	r24, 0x02B5
    22a0:	90 91 b6 02 	lds	r25, 0x02B6
    22a4:	ae 01       	movw	r20, r28
    22a6:	4e 5c       	subi	r20, 0xCE	; 206
    22a8:	5f 4f       	sbci	r21, 0xFF	; 255
    22aa:	3f db       	rcall	.-2434   	; 0x192a <ftoa>
		printStatus(tx_string);
    22ac:	ce 01       	movw	r24, r28
    22ae:	c2 96       	adiw	r24, 0x32	; 50
    22b0:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    22b4:	55 c1       	rjmp	.+682    	; 0x2560 <main+0xb28>
		break;
		
		case 302:	// Send I part of PID-controller 2
		ftoa(ch2.I_err, tx_string);
    22b6:	60 91 b7 02 	lds	r22, 0x02B7
    22ba:	70 91 b8 02 	lds	r23, 0x02B8
    22be:	80 91 b9 02 	lds	r24, 0x02B9
    22c2:	90 91 ba 02 	lds	r25, 0x02BA
    22c6:	ae 01       	movw	r20, r28
    22c8:	4e 5c       	subi	r20, 0xCE	; 206
    22ca:	5f 4f       	sbci	r21, 0xFF	; 255
    22cc:	2e db       	rcall	.-2468   	; 0x192a <ftoa>
		printStatus(tx_string);
    22ce:	ce 01       	movw	r24, r28
    22d0:	c2 96       	adiw	r24, 0x32	; 50
    22d2:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    22d6:	44 c1       	rjmp	.+648    	; 0x2560 <main+0xb28>
		break;
		
		case 303:	// Send D part of PID-controller 2
		ftoa(ch2.D_err, tx_string);
    22d8:	60 91 bb 02 	lds	r22, 0x02BB
    22dc:	70 91 bc 02 	lds	r23, 0x02BC
    22e0:	80 91 bd 02 	lds	r24, 0x02BD
    22e4:	90 91 be 02 	lds	r25, 0x02BE
    22e8:	ae 01       	movw	r20, r28
    22ea:	4e 5c       	subi	r20, 0xCE	; 206
    22ec:	5f 4f       	sbci	r21, 0xFF	; 255
    22ee:	1d db       	rcall	.-2502   	; 0x192a <ftoa>
		printStatus(tx_string);
    22f0:	ce 01       	movw	r24, r28
    22f2:	c2 96       	adiw	r24, 0x32	; 50
    22f4:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    22f8:	33 c1       	rjmp	.+614    	; 0x2560 <main+0xb28>
		break;
		
		case 304:	// Send ch2.TempSetPoint
		ftoa(ch2.TempSetPoint, tx_string);
    22fa:	60 91 ab 02 	lds	r22, 0x02AB
    22fe:	70 91 ac 02 	lds	r23, 0x02AC
    2302:	80 91 ad 02 	lds	r24, 0x02AD
    2306:	90 91 ae 02 	lds	r25, 0x02AE
    230a:	ae 01       	movw	r20, r28
    230c:	4e 5c       	subi	r20, 0xCE	; 206
    230e:	5f 4f       	sbci	r21, 0xFF	; 255
    2310:	0c db       	rcall	.-2536   	; 0x192a <ftoa>
		printStatus(tx_string);
    2312:	ce 01       	movw	r24, r28
    2314:	c2 96       	adiw	r24, 0x32	; 50
    2316:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    231a:	22 c1       	rjmp	.+580    	; 0x2560 <main+0xb28>
		break;
		
		case 305:	// Send Pgain ch2
		ftoa(ch2.Pgain, tx_string);
    231c:	60 91 c7 02 	lds	r22, 0x02C7
    2320:	70 91 c8 02 	lds	r23, 0x02C8
    2324:	80 91 c9 02 	lds	r24, 0x02C9
    2328:	90 91 ca 02 	lds	r25, 0x02CA
    232c:	ae 01       	movw	r20, r28
    232e:	4e 5c       	subi	r20, 0xCE	; 206
    2330:	5f 4f       	sbci	r21, 0xFF	; 255
    2332:	fb da       	rcall	.-2570   	; 0x192a <ftoa>
		printStatus(tx_string);
    2334:	ce 01       	movw	r24, r28
    2336:	c2 96       	adiw	r24, 0x32	; 50
    2338:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    233c:	11 c1       	rjmp	.+546    	; 0x2560 <main+0xb28>
		break;
		
		case 306:	// Send Igain ch2
		ftoa(ch2.Igain, tx_string);
    233e:	60 91 cb 02 	lds	r22, 0x02CB
    2342:	70 91 cc 02 	lds	r23, 0x02CC
    2346:	80 91 cd 02 	lds	r24, 0x02CD
    234a:	90 91 ce 02 	lds	r25, 0x02CE
    234e:	ae 01       	movw	r20, r28
    2350:	4e 5c       	subi	r20, 0xCE	; 206
    2352:	5f 4f       	sbci	r21, 0xFF	; 255
    2354:	ea da       	rcall	.-2604   	; 0x192a <ftoa>
		printStatus(tx_string);
    2356:	ce 01       	movw	r24, r28
    2358:	c2 96       	adiw	r24, 0x32	; 50
    235a:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    235e:	00 c1       	rjmp	.+512    	; 0x2560 <main+0xb28>
		break;
		
		case 307:	// Send Dgain ch2
		ftoa(ch2.Dgain, tx_string);
    2360:	60 91 cf 02 	lds	r22, 0x02CF
    2364:	70 91 d0 02 	lds	r23, 0x02D0
    2368:	80 91 d1 02 	lds	r24, 0x02D1
    236c:	90 91 d2 02 	lds	r25, 0x02D2
    2370:	ae 01       	movw	r20, r28
    2372:	4e 5c       	subi	r20, 0xCE	; 206
    2374:	5f 4f       	sbci	r21, 0xFF	; 255
    2376:	d9 da       	rcall	.-2638   	; 0x192a <ftoa>
		printStatus(tx_string);
    2378:	ce 01       	movw	r24, r28
    237a:	c2 96       	adiw	r24, 0x32	; 50
    237c:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    2380:	ef c0       	rjmp	.+478    	; 0x2560 <main+0xb28>
		break;
		
		case 308:	// Send TemperatureWindow
		ftoa(ch2.tempErrorWin, tx_string);
    2382:	60 91 ff 02 	lds	r22, 0x02FF
    2386:	70 91 00 03 	lds	r23, 0x0300
    238a:	80 91 01 03 	lds	r24, 0x0301
    238e:	90 91 02 03 	lds	r25, 0x0302
    2392:	ae 01       	movw	r20, r28
    2394:	4e 5c       	subi	r20, 0xCE	; 206
    2396:	5f 4f       	sbci	r21, 0xFF	; 255
    2398:	c8 da       	rcall	.-2672   	; 0x192a <ftoa>
		printStatus(tx_string);
    239a:	ce 01       	movw	r24, r28
    239c:	c2 96       	adiw	r24, 0x32	; 50
    239e:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    23a2:	de c0       	rjmp	.+444    	; 0x2560 <main+0xb28>
		break;
		
		case 309:	// Send SettleTimeTemperature
		itoa(ch2.tempSettleTime, tx_string, 10);
    23a4:	80 91 05 03 	lds	r24, 0x0305
    23a8:	90 91 06 03 	lds	r25, 0x0306
    23ac:	4a e0       	ldi	r20, 0x0A	; 10
    23ae:	be 01       	movw	r22, r28
    23b0:	6e 5c       	subi	r22, 0xCE	; 206
    23b2:	7f 4f       	sbci	r23, 0xFF	; 255
    23b4:	0e 94 97 21 	call	0x432e	; 0x432e <__itoa_ncheck>
		printStatus(tx_string);
    23b8:	ce 01       	movw	r24, r28
    23ba:	c2 96       	adiw	r24, 0x32	; 50
    23bc:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    23c0:	cf c0       	rjmp	.+414    	; 0x2560 <main+0xb28>
		break;
		
		case 310:	// Send Temperature stable status
		itoa(ch2.tempStable, tx_string, 10);
    23c2:	80 91 07 03 	lds	r24, 0x0307
    23c6:	90 91 08 03 	lds	r25, 0x0308
    23ca:	4a e0       	ldi	r20, 0x0A	; 10
    23cc:	be 01       	movw	r22, r28
    23ce:	6e 5c       	subi	r22, 0xCE	; 206
    23d0:	7f 4f       	sbci	r23, 0xFF	; 255
    23d2:	0e 94 97 21 	call	0x432e	; 0x432e <__itoa_ncheck>
		printStatus(tx_string);
    23d6:	ce 01       	movw	r24, r28
    23d8:	c2 96       	adiw	r24, 0x32	; 50
    23da:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    23de:	c0 c0       	rjmp	.+384    	; 0x2560 <main+0xb28>
		break;		
		
		// *** Channel 3 ***
		case 400:	// Send sensor 3 temperature
		ftoa(ch3.TempSensor, tx_string);
    23e0:	60 91 4a 01 	lds	r22, 0x014A
    23e4:	70 91 4b 01 	lds	r23, 0x014B
    23e8:	80 91 4c 01 	lds	r24, 0x014C
    23ec:	90 91 4d 01 	lds	r25, 0x014D
    23f0:	ae 01       	movw	r20, r28
    23f2:	4e 5c       	subi	r20, 0xCE	; 206
    23f4:	5f 4f       	sbci	r21, 0xFF	; 255
    23f6:	99 da       	rcall	.-2766   	; 0x192a <ftoa>
		printStatus(tx_string);
    23f8:	ce 01       	movw	r24, r28
    23fa:	c2 96       	adiw	r24, 0x32	; 50
    23fc:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    2400:	af c0       	rjmp	.+350    	; 0x2560 <main+0xb28>
		break;
		
		case 401:	// Send P part of PID-controller 3
		ftoa(ch3.P_err, tx_string);
    2402:	60 91 4e 01 	lds	r22, 0x014E
    2406:	70 91 4f 01 	lds	r23, 0x014F
    240a:	80 91 50 01 	lds	r24, 0x0150
    240e:	90 91 51 01 	lds	r25, 0x0151
    2412:	ae 01       	movw	r20, r28
    2414:	4e 5c       	subi	r20, 0xCE	; 206
    2416:	5f 4f       	sbci	r21, 0xFF	; 255
    2418:	88 da       	rcall	.-2800   	; 0x192a <ftoa>
		printStatus(tx_string);
    241a:	ce 01       	movw	r24, r28
    241c:	c2 96       	adiw	r24, 0x32	; 50
    241e:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    2422:	9e c0       	rjmp	.+316    	; 0x2560 <main+0xb28>
		break;
		
		case 402:	// Send I part of PID-controller 3
		ftoa(ch3.I_err, tx_string);
    2424:	60 91 52 01 	lds	r22, 0x0152
    2428:	70 91 53 01 	lds	r23, 0x0153
    242c:	80 91 54 01 	lds	r24, 0x0154
    2430:	90 91 55 01 	lds	r25, 0x0155
    2434:	ae 01       	movw	r20, r28
    2436:	4e 5c       	subi	r20, 0xCE	; 206
    2438:	5f 4f       	sbci	r21, 0xFF	; 255
    243a:	77 da       	rcall	.-2834   	; 0x192a <ftoa>
		printStatus(tx_string);
    243c:	ce 01       	movw	r24, r28
    243e:	c2 96       	adiw	r24, 0x32	; 50
    2440:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    2444:	8d c0       	rjmp	.+282    	; 0x2560 <main+0xb28>
		break;
		
		case 403:	// Send D part of PID-controller 3
		ftoa(ch3.D_err, tx_string);
    2446:	60 91 56 01 	lds	r22, 0x0156
    244a:	70 91 57 01 	lds	r23, 0x0157
    244e:	80 91 58 01 	lds	r24, 0x0158
    2452:	90 91 59 01 	lds	r25, 0x0159
    2456:	ae 01       	movw	r20, r28
    2458:	4e 5c       	subi	r20, 0xCE	; 206
    245a:	5f 4f       	sbci	r21, 0xFF	; 255
    245c:	66 da       	rcall	.-2868   	; 0x192a <ftoa>
		printStatus(tx_string);
    245e:	ce 01       	movw	r24, r28
    2460:	c2 96       	adiw	r24, 0x32	; 50
    2462:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    2466:	7c c0       	rjmp	.+248    	; 0x2560 <main+0xb28>
		break;
		
		case 404:	// Send ch3.TempSetPoint
		ftoa(ch3.TempSetPoint, tx_string);
    2468:	60 91 46 01 	lds	r22, 0x0146
    246c:	70 91 47 01 	lds	r23, 0x0147
    2470:	80 91 48 01 	lds	r24, 0x0148
    2474:	90 91 49 01 	lds	r25, 0x0149
    2478:	ae 01       	movw	r20, r28
    247a:	4e 5c       	subi	r20, 0xCE	; 206
    247c:	5f 4f       	sbci	r21, 0xFF	; 255
    247e:	55 da       	rcall	.-2902   	; 0x192a <ftoa>
		printStatus(tx_string);
    2480:	ce 01       	movw	r24, r28
    2482:	c2 96       	adiw	r24, 0x32	; 50
    2484:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    2488:	6b c0       	rjmp	.+214    	; 0x2560 <main+0xb28>
		break;
		
		case 405:	// Send Pgain ch3
		ftoa(ch3.Pgain, tx_string);
    248a:	60 91 62 01 	lds	r22, 0x0162
    248e:	70 91 63 01 	lds	r23, 0x0163
    2492:	80 91 64 01 	lds	r24, 0x0164
    2496:	90 91 65 01 	lds	r25, 0x0165
    249a:	ae 01       	movw	r20, r28
    249c:	4e 5c       	subi	r20, 0xCE	; 206
    249e:	5f 4f       	sbci	r21, 0xFF	; 255
    24a0:	44 da       	rcall	.-2936   	; 0x192a <ftoa>
		printStatus(tx_string);
    24a2:	ce 01       	movw	r24, r28
    24a4:	c2 96       	adiw	r24, 0x32	; 50
    24a6:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    24aa:	5a c0       	rjmp	.+180    	; 0x2560 <main+0xb28>
		break;
		
		case 406:	// Send Igain ch3
		ftoa(ch3.Igain, tx_string);
    24ac:	60 91 66 01 	lds	r22, 0x0166
    24b0:	70 91 67 01 	lds	r23, 0x0167
    24b4:	80 91 68 01 	lds	r24, 0x0168
    24b8:	90 91 69 01 	lds	r25, 0x0169
    24bc:	ae 01       	movw	r20, r28
    24be:	4e 5c       	subi	r20, 0xCE	; 206
    24c0:	5f 4f       	sbci	r21, 0xFF	; 255
    24c2:	33 da       	rcall	.-2970   	; 0x192a <ftoa>
		printStatus(tx_string);
    24c4:	ce 01       	movw	r24, r28
    24c6:	c2 96       	adiw	r24, 0x32	; 50
    24c8:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    24cc:	49 c0       	rjmp	.+146    	; 0x2560 <main+0xb28>
		break;
		
		case 407:	// Send Dgain ch3
		ftoa(ch3.Dgain, tx_string);
    24ce:	60 91 6a 01 	lds	r22, 0x016A
    24d2:	70 91 6b 01 	lds	r23, 0x016B
    24d6:	80 91 6c 01 	lds	r24, 0x016C
    24da:	90 91 6d 01 	lds	r25, 0x016D
    24de:	ae 01       	movw	r20, r28
    24e0:	4e 5c       	subi	r20, 0xCE	; 206
    24e2:	5f 4f       	sbci	r21, 0xFF	; 255
    24e4:	22 da       	rcall	.-3004   	; 0x192a <ftoa>
		printStatus(tx_string);
    24e6:	ce 01       	movw	r24, r28
    24e8:	c2 96       	adiw	r24, 0x32	; 50
    24ea:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    24ee:	38 c0       	rjmp	.+112    	; 0x2560 <main+0xb28>
		break;	
		
		case 408:	// Send TemperatureWindow
		ftoa(ch3.tempErrorWin, tx_string);
    24f0:	60 91 9a 01 	lds	r22, 0x019A
    24f4:	70 91 9b 01 	lds	r23, 0x019B
    24f8:	80 91 9c 01 	lds	r24, 0x019C
    24fc:	90 91 9d 01 	lds	r25, 0x019D
    2500:	ae 01       	movw	r20, r28
    2502:	4e 5c       	subi	r20, 0xCE	; 206
    2504:	5f 4f       	sbci	r21, 0xFF	; 255
    2506:	11 da       	rcall	.-3038   	; 0x192a <ftoa>
		printStatus(tx_string);
    2508:	ce 01       	movw	r24, r28
    250a:	c2 96       	adiw	r24, 0x32	; 50
    250c:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    2510:	27 c0       	rjmp	.+78     	; 0x2560 <main+0xb28>
		break;
		
		case 409:	// Send SettleTimeTemperature
		itoa(ch3.tempSettleTime, tx_string, 10);
    2512:	80 91 a0 01 	lds	r24, 0x01A0
    2516:	90 91 a1 01 	lds	r25, 0x01A1
    251a:	4a e0       	ldi	r20, 0x0A	; 10
    251c:	be 01       	movw	r22, r28
    251e:	6e 5c       	subi	r22, 0xCE	; 206
    2520:	7f 4f       	sbci	r23, 0xFF	; 255
    2522:	0e 94 97 21 	call	0x432e	; 0x432e <__itoa_ncheck>
		printStatus(tx_string);
    2526:	ce 01       	movw	r24, r28
    2528:	c2 96       	adiw	r24, 0x32	; 50
    252a:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    252e:	18 c0       	rjmp	.+48     	; 0x2560 <main+0xb28>
		break;
		
		case 410:	// Send Temperature stable status
		itoa(ch3.tempStable, tx_string, 10);
    2530:	80 91 a2 01 	lds	r24, 0x01A2
    2534:	90 91 a3 01 	lds	r25, 0x01A3
    2538:	4a e0       	ldi	r20, 0x0A	; 10
    253a:	be 01       	movw	r22, r28
    253c:	6e 5c       	subi	r22, 0xCE	; 206
    253e:	7f 4f       	sbci	r23, 0xFF	; 255
    2540:	0e 94 97 21 	call	0x432e	; 0x432e <__itoa_ncheck>
		printStatus(tx_string);
    2544:	ce 01       	movw	r24, r28
    2546:	c2 96       	adiw	r24, 0x32	; 50
    2548:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    254c:	09 c0       	rjmp	.+18     	; 0x2560 <main+0xb28>
		break;							
		
		default:
		printStatus("VRerror");
    254e:	8a e2       	ldi	r24, 0x2A	; 42
    2550:	91 e0       	ldi	r25, 0x01	; 1
    2552:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    2556:	04 c0       	rjmp	.+8      	; 0x2560 <main+0xb28>
						var = atol(requestID);
						SendParameter(var);
					}
					else
					{
						printStatus("CRC error");
    2558:	89 e1       	ldi	r24, 0x19	; 25
    255a:	91 e0       	ldi	r25, 0x01	; 1
    255c:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
					}
				}
			}	
			
			pos = NULL;
			pos = strchr(rx_string, '&');
    2560:	66 e2       	ldi	r22, 0x26	; 38
    2562:	70 e0       	ldi	r23, 0x00	; 0
    2564:	8b 2d       	mov	r24, r11
    2566:	9a 2d       	mov	r25, r10
    2568:	0e 94 6e 21 	call	0x42dc	; 0x42dc <strchr>
    256c:	fc 01       	movw	r30, r24
			if(pos != NULL)
    256e:	89 2b       	or	r24, r25
    2570:	09 f4       	brne	.+2      	; 0x2574 <main+0xb3c>
    2572:	2e cc       	rjmp	.-1956   	; 0x1dd0 <main+0x398>
			{
				setCmd[0] = *(pos + 1);					// Parse set command
    2574:	ad e0       	ldi	r26, 0x0D	; 13
    2576:	b4 e0       	ldi	r27, 0x04	; 4
    2578:	81 81       	ldd	r24, Z+1	; 0x01
    257a:	8c 93       	st	X, r24
				setCmd[1] = *(pos + 2);
    257c:	82 81       	ldd	r24, Z+2	; 0x02
    257e:	11 96       	adiw	r26, 0x01	; 1
    2580:	8c 93       	st	X, r24
    2582:	11 97       	sbiw	r26, 0x01	; 1
				requestID[0] = *(pos + 3);				// Parse request ID
    2584:	83 81       	ldd	r24, Z+3	; 0x03
    2586:	8d 8b       	std	Y+21, r24	; 0x15
				requestID[1] = *(pos + 4);
    2588:	84 81       	ldd	r24, Z+4	; 0x04
    258a:	8e 8b       	std	Y+22, r24	; 0x16
				requestID[2] = *(pos + 5);				
    258c:	85 81       	ldd	r24, Z+5	; 0x05
    258e:	8f 8b       	std	Y+23, r24	; 0x17
				
				if(strcmp(setCmd, "VS") == 0)
    2590:	62 e3       	ldi	r22, 0x32	; 50
    2592:	71 e0       	ldi	r23, 0x01	; 1
    2594:	cd 01       	movw	r24, r26
    2596:	0e 94 79 21 	call	0x42f2	; 0x42f2 <strcmp>
    259a:	89 2b       	or	r24, r25
    259c:	09 f0       	breq	.+2      	; 0x25a0 <main+0xb68>
    259e:	17 cc       	rjmp	.-2002   	; 0x1dce <main+0x396>
				{
					pos = strchr(rx_string, 0x0D);		// Find end of message
    25a0:	6d e0       	ldi	r22, 0x0D	; 13
    25a2:	70 e0       	ldi	r23, 0x00	; 0
    25a4:	c7 01       	movw	r24, r14
    25a6:	0e 94 6e 21 	call	0x42dc	; 0x42dc <strchr>
					crc[0] = *(pos - 4);				// Parse incoming crc
    25aa:	e0 e1       	ldi	r30, 0x10	; 16
    25ac:	f4 e0       	ldi	r31, 0x04	; 4
    25ae:	dc 01       	movw	r26, r24
    25b0:	14 97       	sbiw	r26, 0x04	; 4
    25b2:	2c 91       	ld	r18, X
    25b4:	20 83       	st	Z, r18
					crc[1] = *(pos - 3);
    25b6:	11 96       	adiw	r26, 0x01	; 1
    25b8:	2c 91       	ld	r18, X
    25ba:	21 83       	std	Z+1, r18	; 0x01
					crc[2] = *(pos - 2);
    25bc:	11 96       	adiw	r26, 0x01	; 1
    25be:	2c 91       	ld	r18, X
    25c0:	22 83       	std	Z+2, r18	; 0x02
					crc[3] = *(pos - 1);
    25c2:	11 96       	adiw	r26, 0x01	; 1
    25c4:	8c 91       	ld	r24, X
    25c6:	83 83       	std	Z+3, r24	; 0x03
					
					itoa(GenCrc16(rx_string, (int)strnlen(rx_string, rx_size)-5), inCrC_string, 16);
    25c8:	6e e1       	ldi	r22, 0x1E	; 30
    25ca:	70 e0       	ldi	r23, 0x00	; 0
    25cc:	c7 01       	movw	r24, r14
    25ce:	0e 94 82 21 	call	0x4304	; 0x4304 <strnlen>
    25d2:	bc 01       	movw	r22, r24
    25d4:	65 50       	subi	r22, 0x05	; 5
    25d6:	71 09       	sbc	r23, r1
    25d8:	c7 01       	movw	r24, r14
    25da:	0e 94 c8 01 	call	0x390	; 0x390 <GenCrc16>
    25de:	40 e1       	ldi	r20, 0x10	; 16
    25e0:	be 01       	movw	r22, r28
    25e2:	63 5d       	subi	r22, 0xD3	; 211
    25e4:	7f 4f       	sbci	r23, 0xFF	; 255
    25e6:	0e 94 97 21 	call	0x432e	; 0x432e <__itoa_ncheck>
					if(CrcCompare(crc, inCrC_string) == true)
    25ea:	be 01       	movw	r22, r28
    25ec:	63 5d       	subi	r22, 0xD3	; 211
    25ee:	7f 4f       	sbci	r23, 0xFF	; 255
    25f0:	80 e1       	ldi	r24, 0x10	; 16
    25f2:	94 e0       	ldi	r25, 0x04	; 4
    25f4:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <CrcCompare>
    25f8:	88 23       	and	r24, r24
    25fa:	11 f4       	brne	.+4      	; 0x2600 <main+0xbc8>
    25fc:	0c 94 15 1f 	jmp	0x3e2a	; 0x3e2a <main+0x23f2>
					{
						var = atol(requestID);
						SetParameter(atol(requestID));
    2600:	ce 01       	movw	r24, r28
    2602:	45 96       	adiw	r24, 0x15	; 21
    2604:	0e 94 3d 21 	call	0x427a	; 0x427a <atol>

static inline void SetParameter(int id)
{
	char param[20];
	
	switch(id)
    2608:	6e 3f       	cpi	r22, 0xFE	; 254
    260a:	71 05       	cpc	r23, r1
    260c:	09 f4       	brne	.+2      	; 0x2610 <main+0xbd8>
    260e:	b1 c4       	rjmp	.+2402   	; 0x2f72 <main+0x153a>
    2610:	bc f5       	brge	.+110    	; 0x2680 <main+0xc48>
    2612:	6b 39       	cpi	r22, 0x9B	; 155
    2614:	71 05       	cpc	r23, r1
    2616:	09 f4       	brne	.+2      	; 0x261a <main+0xbe2>
    2618:	73 c2       	rjmp	.+1254   	; 0x2b00 <main+0x10c8>
    261a:	cc f4       	brge	.+50     	; 0x264e <main+0xc16>
    261c:	68 39       	cpi	r22, 0x98	; 152
    261e:	71 05       	cpc	r23, r1
    2620:	09 f4       	brne	.+2      	; 0x2624 <main+0xbec>
    2622:	65 c1       	rjmp	.+714    	; 0x28ee <main+0xeb6>
    2624:	54 f4       	brge	.+20     	; 0x263a <main+0xc02>
    2626:	66 39       	cpi	r22, 0x96	; 150
    2628:	71 05       	cpc	r23, r1
    262a:	09 f4       	brne	.+2      	; 0x262e <main+0xbf6>
    262c:	6d c0       	rjmp	.+218    	; 0x2708 <main+0xcd0>
    262e:	67 39       	cpi	r22, 0x97	; 151
    2630:	71 05       	cpc	r23, r1
    2632:	09 f4       	brne	.+2      	; 0x2636 <main+0xbfe>
    2634:	90 c0       	rjmp	.+288    	; 0x2756 <main+0xd1e>
    2636:	0c 94 0f 1f 	jmp	0x3e1e	; 0x3e1e <main+0x23e6>
    263a:	69 39       	cpi	r22, 0x99	; 153
    263c:	71 05       	cpc	r23, r1
    263e:	09 f4       	brne	.+2      	; 0x2642 <main+0xc0a>
    2640:	22 c2       	rjmp	.+1092   	; 0x2a86 <main+0x104e>
    2642:	6a 39       	cpi	r22, 0x9A	; 154
    2644:	71 05       	cpc	r23, r1
    2646:	09 f4       	brne	.+2      	; 0x264a <main+0xc12>
    2648:	45 c2       	rjmp	.+1162   	; 0x2ad4 <main+0x109c>
    264a:	0c 94 0f 1f 	jmp	0x3e1e	; 0x3e1e <main+0x23e6>
    264e:	6b 3f       	cpi	r22, 0xFB	; 251
    2650:	71 05       	cpc	r23, r1
    2652:	09 f4       	brne	.+2      	; 0x2656 <main+0xc1e>
    2654:	16 c4       	rjmp	.+2092   	; 0x2e82 <main+0x144a>
    2656:	54 f4       	brge	.+20     	; 0x266c <main+0xc34>
    2658:	6c 39       	cpi	r22, 0x9C	; 156
    265a:	71 05       	cpc	r23, r1
    265c:	09 f4       	brne	.+2      	; 0x2660 <main+0xc28>
    265e:	77 c2       	rjmp	.+1262   	; 0x2b4e <main+0x1116>
    2660:	6a 3f       	cpi	r22, 0xFA	; 250
    2662:	71 05       	cpc	r23, r1
    2664:	09 f4       	brne	.+2      	; 0x2668 <main+0xc30>
    2666:	40 c3       	rjmp	.+1664   	; 0x2ce8 <main+0x12b0>
    2668:	0c 94 0f 1f 	jmp	0x3e1e	; 0x3e1e <main+0x23e6>
    266c:	6c 3f       	cpi	r22, 0xFC	; 252
    266e:	71 05       	cpc	r23, r1
    2670:	09 f4       	brne	.+2      	; 0x2674 <main+0xc3c>
    2672:	2f c4       	rjmp	.+2142   	; 0x2ed2 <main+0x149a>
    2674:	6d 3f       	cpi	r22, 0xFD	; 253
    2676:	71 05       	cpc	r23, r1
    2678:	09 f4       	brne	.+2      	; 0x267c <main+0xc44>
    267a:	53 c4       	rjmp	.+2214   	; 0x2f22 <main+0x14ea>
    267c:	0c 94 0f 1f 	jmp	0x3e1e	; 0x3e1e <main+0x23e6>
    2680:	62 3c       	cpi	r22, 0xC2	; 194
    2682:	e1 e0       	ldi	r30, 0x01	; 1
    2684:	7e 07       	cpc	r23, r30
    2686:	11 f4       	brne	.+4      	; 0x268c <main+0xc54>
    2688:	0c 94 ca 1b 	jmp	0x3794	; 0x3794 <main+0x1d5c>
    268c:	e4 f4       	brge	.+56     	; 0x26c6 <main+0xc8e>
    268e:	60 36       	cpi	r22, 0x60	; 96
    2690:	21 e0       	ldi	r18, 0x01	; 1
    2692:	72 07       	cpc	r23, r18
    2694:	09 f4       	brne	.+2      	; 0x2698 <main+0xc60>
    2696:	80 c5       	rjmp	.+2816   	; 0x3198 <main+0x1760>
    2698:	5c f4       	brge	.+22     	; 0x26b0 <main+0xc78>
    269a:	6e 35       	cpi	r22, 0x5E	; 94
    269c:	b1 e0       	ldi	r27, 0x01	; 1
    269e:	7b 07       	cpc	r23, r27
    26a0:	09 f4       	brne	.+2      	; 0x26a4 <main+0xc6c>
    26a2:	80 c4       	rjmp	.+2304   	; 0x2fa4 <main+0x156c>
    26a4:	6f 35       	cpi	r22, 0x5F	; 95
    26a6:	71 40       	sbci	r23, 0x01	; 1
    26a8:	09 f4       	brne	.+2      	; 0x26ac <main+0xc74>
    26aa:	a4 c4       	rjmp	.+2376   	; 0x2ff4 <main+0x15bc>
    26ac:	0c 94 0f 1f 	jmp	0x3e1e	; 0x3e1e <main+0x23e6>
    26b0:	61 36       	cpi	r22, 0x61	; 97
    26b2:	f1 e0       	ldi	r31, 0x01	; 1
    26b4:	7f 07       	cpc	r23, r31
    26b6:	09 f4       	brne	.+2      	; 0x26ba <main+0xc82>
    26b8:	3c c6       	rjmp	.+3192   	; 0x3332 <main+0x18fa>
    26ba:	62 36       	cpi	r22, 0x62	; 98
    26bc:	71 40       	sbci	r23, 0x01	; 1
    26be:	09 f4       	brne	.+2      	; 0x26c2 <main+0xc8a>
    26c0:	01 c7       	rjmp	.+3586   	; 0x34c4 <main+0x1a8c>
    26c2:	0c 94 0f 1f 	jmp	0x3e1e	; 0x3e1e <main+0x23e6>
    26c6:	65 3c       	cpi	r22, 0xC5	; 197
    26c8:	a1 e0       	ldi	r26, 0x01	; 1
    26ca:	7a 07       	cpc	r23, r26
    26cc:	11 f4       	brne	.+4      	; 0x26d2 <main+0xc9a>
    26ce:	0c 94 25 1e 	jmp	0x3c4a	; 0x3c4a <main+0x2212>
    26d2:	6c f4       	brge	.+26     	; 0x26ee <main+0xcb6>
    26d4:	63 3c       	cpi	r22, 0xC3	; 195
    26d6:	e1 e0       	ldi	r30, 0x01	; 1
    26d8:	7e 07       	cpc	r23, r30
    26da:	11 f4       	brne	.+4      	; 0x26e0 <main+0xca8>
    26dc:	0c 94 93 1c 	jmp	0x3926	; 0x3926 <main+0x1eee>
    26e0:	64 3c       	cpi	r22, 0xC4	; 196
    26e2:	71 40       	sbci	r23, 0x01	; 1
    26e4:	11 f4       	brne	.+4      	; 0x26ea <main+0xcb2>
    26e6:	0c 94 5c 1d 	jmp	0x3ab8	; 0x3ab8 <main+0x2080>
    26ea:	0c 94 0f 1f 	jmp	0x3e1e	; 0x3e1e <main+0x23e6>
    26ee:	66 3c       	cpi	r22, 0xC6	; 198
    26f0:	21 e0       	ldi	r18, 0x01	; 1
    26f2:	72 07       	cpc	r23, r18
    26f4:	11 f4       	brne	.+4      	; 0x26fa <main+0xcc2>
    26f6:	0c 94 ee 1e 	jmp	0x3ddc	; 0x3ddc <main+0x23a4>
    26fa:	64 3f       	cpi	r22, 0xF4	; 244
    26fc:	71 40       	sbci	r23, 0x01	; 1
    26fe:	11 f4       	brne	.+4      	; 0x2704 <main+0xccc>
    2700:	0c 94 07 1f 	jmp	0x3e0e	; 0x3e0e <main+0x23d6>
    2704:	0c 94 0f 1f 	jmp	0x3e1e	; 0x3e1e <main+0x23e6>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    2708:	6e e1       	ldi	r22, 0x1E	; 30
    270a:	70 e0       	ldi	r23, 0x00	; 0
    270c:	c7 01       	movw	r24, r14
    270e:	0e 94 82 21 	call	0x4304	; 0x4304 <strnlen>
    2712:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    2714:	8b 30       	cpi	r24, 0x0B	; 11
    2716:	91 05       	cpc	r25, r1
    2718:	64 f0       	brlt	.+24     	; 0x2732 <main+0xcfa>
    271a:	ea ee       	ldi	r30, 0xEA	; 234
    271c:	f4 e0       	ldi	r31, 0x04	; 4
    271e:	de 01       	movw	r26, r28
    2720:	a6 5a       	subi	r26, 0xA6	; 166
    2722:	bf 4f       	sbci	r27, 0xFF	; 255
    2724:	80 52       	subi	r24, 0x20	; 32
    2726:	9b 4f       	sbci	r25, 0xFB	; 251
	{
		param[idx] = stringToParse[i];
    2728:	21 91       	ld	r18, Z+
    272a:	2d 93       	st	X+, r18
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    272c:	e8 17       	cp	r30, r24
    272e:	f9 07       	cpc	r31, r25
    2730:	d9 f7       	brne	.-10     	; 0x2728 <main+0xcf0>
	switch(id)
	{
		// *** Channel 0 ***
		case 150:	// ch0.TempSetPoint
		ParamParse(rx_string, param);
		ch0.TempSetPoint = atof(param);
    2732:	ce 01       	movw	r24, r28
    2734:	86 5a       	subi	r24, 0xA6	; 166
    2736:	9f 4f       	sbci	r25, 0xFF	; 255
    2738:	0e 94 1d 21 	call	0x423a	; 0x423a <atof>
    273c:	60 93 1a 04 	sts	0x041A, r22
    2740:	70 93 1b 04 	sts	0x041B, r23
    2744:	80 93 1c 04 	sts	0x041C, r24
    2748:	90 93 1d 04 	sts	0x041D, r25
		printStatus("");
    274c:	87 e2       	ldi	r24, 0x27	; 39
    274e:	91 e0       	ldi	r25, 0x01	; 1
    2750:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    2754:	3c cb       	rjmp	.-2440   	; 0x1dce <main+0x396>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    2756:	6e e1       	ldi	r22, 0x1E	; 30
    2758:	70 e0       	ldi	r23, 0x00	; 0
    275a:	c7 01       	movw	r24, r14
    275c:	0e 94 82 21 	call	0x4304	; 0x4304 <strnlen>
    2760:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    2762:	8b 30       	cpi	r24, 0x0B	; 11
    2764:	91 05       	cpc	r25, r1
    2766:	64 f0       	brlt	.+24     	; 0x2780 <main+0xd48>
    2768:	ea ee       	ldi	r30, 0xEA	; 234
    276a:	f4 e0       	ldi	r31, 0x04	; 4
    276c:	de 01       	movw	r26, r28
    276e:	a6 5a       	subi	r26, 0xA6	; 166
    2770:	bf 4f       	sbci	r27, 0xFF	; 255
    2772:	80 52       	subi	r24, 0x20	; 32
    2774:	9b 4f       	sbci	r25, 0xFB	; 251
	{
		param[idx] = stringToParse[i];
    2776:	21 91       	ld	r18, Z+
    2778:	2d 93       	st	X+, r18
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    277a:	e8 17       	cp	r30, r24
    277c:	f9 07       	cpc	r31, r25
    277e:	d9 f7       	brne	.-10     	; 0x2776 <main+0xd3e>
		printStatus("");
		break;
		
		case 151:	// SetPgainCh0
		ParamParse(rx_string, param);
		ch0.Pgain = atof(param);
    2780:	ce 01       	movw	r24, r28
    2782:	86 5a       	subi	r24, 0xA6	; 166
    2784:	9f 4f       	sbci	r25, 0xFF	; 255
    2786:	0e 94 1d 21 	call	0x423a	; 0x423a <atof>
    278a:	60 93 36 04 	sts	0x0436, r22
    278e:	70 93 37 04 	sts	0x0437, r23
    2792:	80 93 38 04 	sts	0x0438, r24
    2796:	90 93 39 04 	sts	0x0439, r25
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    279a:	81 e2       	ldi	r24, 0x21	; 33
    279c:	8a ab       	std	Y+50, r24	; 0x32
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    279e:	f7 01       	movw	r30, r14
    27a0:	81 81       	ldd	r24, Z+1	; 0x01
    27a2:	8b ab       	std	Y+51, r24	; 0x33
    27a4:	82 81       	ldd	r24, Z+2	; 0x02
    27a6:	8c ab       	std	Y+52, r24	; 0x34
    27a8:	83 81       	ldd	r24, Z+3	; 0x03
    27aa:	8d ab       	std	Y+53, r24	; 0x35
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    27ac:	1e aa       	std	Y+54, r1	; 0x36
    27ae:	1f aa       	std	Y+55, r1	; 0x37
    27b0:	18 ae       	std	Y+56, r1	; 0x38
    27b2:	4e 01       	movw	r8, r28
    27b4:	f2 e3       	ldi	r31, 0x32	; 50
    27b6:	8f 0e       	add	r8, r31
    27b8:	91 1c       	adc	r9, r1
    27ba:	be 01       	movw	r22, r28
    27bc:	6a 5c       	subi	r22, 0xCA	; 202
    27be:	7f 4f       	sbci	r23, 0xFF	; 255
    27c0:	f4 01       	movw	r30, r8
    27c2:	80 e0       	ldi	r24, 0x00	; 0
    27c4:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    27c6:	a8 e0       	ldi	r26, 0x08	; 8
    27c8:	71 2c       	mov	r7, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    27ca:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    27cc:	29 2f       	mov	r18, r25
    27ce:	33 27       	eor	r19, r19
    27d0:	27 fd       	sbrc	r18, 7
    27d2:	3a 95       	dec	r19
    27d4:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    27d6:	32 2f       	mov	r19, r18
    27d8:	22 27       	eor	r18, r18
    27da:	4a 2f       	mov	r20, r26
    27dc:	57 2d       	mov	r21, r7
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    27de:	33 23       	and	r19, r19
    27e0:	3c f4       	brge	.+14     	; 0x27f0 <main+0xdb8>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    27e2:	22 0f       	add	r18, r18
    27e4:	33 1f       	adc	r19, r19
    27e6:	b1 e2       	ldi	r27, 0x21	; 33
    27e8:	2b 27       	eor	r18, r27
    27ea:	b0 e1       	ldi	r27, 0x10	; 16
    27ec:	3b 27       	eor	r19, r27
    27ee:	02 c0       	rjmp	.+4      	; 0x27f4 <main+0xdbc>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    27f0:	22 0f       	add	r18, r18
    27f2:	33 1f       	adc	r19, r19
    27f4:	41 50       	subi	r20, 0x01	; 1
    27f6:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    27f8:	91 f7       	brne	.-28     	; 0x27de <main+0xda6>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    27fa:	98 2f       	mov	r25, r24
    27fc:	88 27       	eor	r24, r24
    27fe:	82 27       	eor	r24, r18
    2800:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    2802:	e6 17       	cp	r30, r22
    2804:	f7 07       	cpc	r31, r23
    2806:	09 f7       	brne	.-62     	; 0x27ca <main+0xd92>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    2808:	3c 01       	movw	r6, r24
    280a:	40 e1       	ldi	r20, 0x10	; 16
    280c:	60 e1       	ldi	r22, 0x10	; 16
    280e:	74 e0       	ldi	r23, 0x04	; 4
    2810:	0e 94 97 21 	call	0x432e	; 0x432e <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    2814:	80 e1       	ldi	r24, 0x10	; 16
    2816:	94 e0       	ldi	r25, 0x04	; 4
    2818:	0e 94 8d 21 	call	0x431a	; 0x431a <strupr>
	if(crcXmodem < 0x10)
    281c:	e0 e1       	ldi	r30, 0x10	; 16
    281e:	6e 16       	cp	r6, r30
    2820:	71 04       	cpc	r7, r1
    2822:	38 f4       	brcc	.+14     	; 0x2832 <main+0xdfa>
	{
		tx_string[cnt+4] = crc[0];
    2824:	80 91 10 04 	lds	r24, 0x0410
    2828:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = '0';
    282a:	80 e3       	ldi	r24, 0x30	; 48
    282c:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = '0';
    282e:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';
    2830:	8e ab       	std	Y+54, r24	; 0x36
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    2832:	c3 01       	movw	r24, r6
    2834:	40 97       	sbiw	r24, 0x10	; 16
    2836:	80 3f       	cpi	r24, 0xF0	; 240
    2838:	91 05       	cpc	r25, r1
    283a:	48 f4       	brcc	.+18     	; 0x284e <main+0xe16>
	{
		tx_string[cnt+4] = crc[1];
    283c:	e0 e1       	ldi	r30, 0x10	; 16
    283e:	f4 e0       	ldi	r31, 0x04	; 4
    2840:	81 81       	ldd	r24, Z+1	; 0x01
    2842:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = crc[0];
    2844:	80 81       	ld	r24, Z
    2846:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = '0';
    2848:	80 e3       	ldi	r24, 0x30	; 48
    284a:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';		
    284c:	8e ab       	std	Y+54, r24	; 0x36
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    284e:	c3 01       	movw	r24, r6
    2850:	9a 95       	dec	r25
    2852:	81 15       	cp	r24, r1
    2854:	9f 40       	sbci	r25, 0x0F	; 15
    2856:	50 f4       	brcc	.+20     	; 0x286c <main+0xe34>
	{
		tx_string[cnt+4] = crc[2];
    2858:	e0 e1       	ldi	r30, 0x10	; 16
    285a:	f4 e0       	ldi	r31, 0x04	; 4
    285c:	82 81       	ldd	r24, Z+2	; 0x02
    285e:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = crc[1];
    2860:	81 81       	ldd	r24, Z+1	; 0x01
    2862:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = crc[0];
    2864:	80 81       	ld	r24, Z
    2866:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';		
    2868:	80 e3       	ldi	r24, 0x30	; 48
    286a:	8e ab       	std	Y+54, r24	; 0x36
	}
	if(crcXmodem >= 0x1000)
    286c:	61 14       	cp	r6, r1
    286e:	20 e1       	ldi	r18, 0x10	; 16
    2870:	72 06       	cpc	r7, r18
    2872:	50 f0       	brcs	.+20     	; 0x2888 <main+0xe50>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    2874:	e0 e1       	ldi	r30, 0x10	; 16
    2876:	f4 e0       	ldi	r31, 0x04	; 4
    2878:	80 81       	ld	r24, Z
    287a:	8e ab       	std	Y+54, r24	; 0x36
		tx_string[cnt+2] = crc[1];
    287c:	81 81       	ldd	r24, Z+1	; 0x01
    287e:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+3] = crc[2];
    2880:	82 81       	ldd	r24, Z+2	; 0x02
    2882:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+4] = crc[3];
    2884:	83 81       	ldd	r24, Z+3	; 0x03
    2886:	89 af       	std	Y+57, r24	; 0x39
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    2888:	8d e0       	ldi	r24, 0x0D	; 13
    288a:	8a af       	std	Y+58, r24	; 0x3a
    288c:	9e 01       	movw	r18, r28
    288e:	25 5c       	subi	r18, 0xC5	; 197
    2890:	3f 4f       	sbci	r19, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    2892:	ee ef       	ldi	r30, 0xFE	; 254
    2894:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    2896:	0f 2e       	mov	r0, r31
    2898:	f1 ec       	ldi	r31, 0xC1	; 193
    289a:	6f 2e       	mov	r6, r31
    289c:	71 2c       	mov	r7, r1
    289e:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    28a0:	60 e0       	ldi	r22, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    28a2:	d4 01       	movw	r26, r8
    28a4:	4d 91       	ld	r20, X+
    28a6:	4d 01       	movw	r8, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    28a8:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    28aa:	91 81       	ldd	r25, Z+1	; 0x01
    28ac:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    28ae:	98 13       	cpse	r25, r24
    28b0:	04 c0       	rjmp	.+8      	; 0x28ba <main+0xe82>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    28b2:	d3 01       	movw	r26, r6
    28b4:	8c 91       	ld	r24, X
    28b6:	80 62       	ori	r24, 0x20	; 32
    28b8:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    28ba:	50 81       	ld	r21, Z
    28bc:	83 81       	ldd	r24, Z+3	; 0x03
    28be:	94 81       	ldd	r25, Z+4	; 0x04
    28c0:	85 0f       	add	r24, r21
    28c2:	91 1d       	adc	r25, r1
    28c4:	dc 01       	movw	r26, r24
    28c6:	4c 93       	st	X, r20
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    28c8:	70 81       	ld	r23, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    28ca:	47 2f       	mov	r20, r23
    28cc:	50 e0       	ldi	r21, 0x00	; 0
    28ce:	82 81       	ldd	r24, Z+2	; 0x02
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	01 97       	sbiw	r24, 0x01	; 1
    28d4:	48 17       	cp	r20, r24
    28d6:	59 07       	cpc	r21, r25
    28d8:	19 f0       	breq	.+6      	; 0x28e0 <main+0xea8>
    28da:	81 e0       	ldi	r24, 0x01	; 1
    28dc:	87 0f       	add	r24, r23
    28de:	01 c0       	rjmp	.+2      	; 0x28e2 <main+0xeaa>
    28e0:	86 2f       	mov	r24, r22
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    28e2:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    28e4:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    28e6:	82 16       	cp	r8, r18
    28e8:	93 06       	cpc	r9, r19
    28ea:	d9 f6       	brne	.-74     	; 0x28a2 <main+0xe6a>
    28ec:	70 ca       	rjmp	.-2848   	; 0x1dce <main+0x396>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    28ee:	6e e1       	ldi	r22, 0x1E	; 30
    28f0:	70 e0       	ldi	r23, 0x00	; 0
    28f2:	c7 01       	movw	r24, r14
    28f4:	0e 94 82 21 	call	0x4304	; 0x4304 <strnlen>
    28f8:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    28fa:	8b 30       	cpi	r24, 0x0B	; 11
    28fc:	91 05       	cpc	r25, r1
    28fe:	64 f0       	brlt	.+24     	; 0x2918 <main+0xee0>
    2900:	ea ee       	ldi	r30, 0xEA	; 234
    2902:	f4 e0       	ldi	r31, 0x04	; 4
    2904:	de 01       	movw	r26, r28
    2906:	a6 5a       	subi	r26, 0xA6	; 166
    2908:	bf 4f       	sbci	r27, 0xFF	; 255
    290a:	80 52       	subi	r24, 0x20	; 32
    290c:	9b 4f       	sbci	r25, 0xFB	; 251
	{
		param[idx] = stringToParse[i];
    290e:	21 91       	ld	r18, Z+
    2910:	2d 93       	st	X+, r18
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    2912:	e8 17       	cp	r30, r24
    2914:	f9 07       	cpc	r31, r25
    2916:	d9 f7       	brne	.-10     	; 0x290e <main+0xed6>
		printStatus("");
		break;
		
		case 152:	// SetIgainCh0
		ParamParse(rx_string, param);
		ch0.Igain = atof(param);
    2918:	ce 01       	movw	r24, r28
    291a:	86 5a       	subi	r24, 0xA6	; 166
    291c:	9f 4f       	sbci	r25, 0xFF	; 255
    291e:	0e 94 1d 21 	call	0x423a	; 0x423a <atof>
    2922:	60 93 3a 04 	sts	0x043A, r22
    2926:	70 93 3b 04 	sts	0x043B, r23
    292a:	80 93 3c 04 	sts	0x043C, r24
    292e:	90 93 3d 04 	sts	0x043D, r25
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    2932:	81 e2       	ldi	r24, 0x21	; 33
    2934:	8a ab       	std	Y+50, r24	; 0x32
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    2936:	f7 01       	movw	r30, r14
    2938:	81 81       	ldd	r24, Z+1	; 0x01
    293a:	8b ab       	std	Y+51, r24	; 0x33
    293c:	82 81       	ldd	r24, Z+2	; 0x02
    293e:	8c ab       	std	Y+52, r24	; 0x34
    2940:	83 81       	ldd	r24, Z+3	; 0x03
    2942:	8d ab       	std	Y+53, r24	; 0x35
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    2944:	1e aa       	std	Y+54, r1	; 0x36
    2946:	1f aa       	std	Y+55, r1	; 0x37
    2948:	18 ae       	std	Y+56, r1	; 0x38
    294a:	4e 01       	movw	r8, r28
    294c:	f2 e3       	ldi	r31, 0x32	; 50
    294e:	8f 0e       	add	r8, r31
    2950:	91 1c       	adc	r9, r1
    2952:	be 01       	movw	r22, r28
    2954:	6a 5c       	subi	r22, 0xCA	; 202
    2956:	7f 4f       	sbci	r23, 0xFF	; 255
    2958:	f4 01       	movw	r30, r8
    295a:	80 e0       	ldi	r24, 0x00	; 0
    295c:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    295e:	a8 e0       	ldi	r26, 0x08	; 8
    2960:	71 2c       	mov	r7, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    2962:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    2964:	29 2f       	mov	r18, r25
    2966:	33 27       	eor	r19, r19
    2968:	27 fd       	sbrc	r18, 7
    296a:	3a 95       	dec	r19
    296c:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    296e:	32 2f       	mov	r19, r18
    2970:	22 27       	eor	r18, r18
    2972:	4a 2f       	mov	r20, r26
    2974:	57 2d       	mov	r21, r7
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    2976:	33 23       	and	r19, r19
    2978:	3c f4       	brge	.+14     	; 0x2988 <main+0xf50>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    297a:	22 0f       	add	r18, r18
    297c:	33 1f       	adc	r19, r19
    297e:	b1 e2       	ldi	r27, 0x21	; 33
    2980:	2b 27       	eor	r18, r27
    2982:	b0 e1       	ldi	r27, 0x10	; 16
    2984:	3b 27       	eor	r19, r27
    2986:	02 c0       	rjmp	.+4      	; 0x298c <main+0xf54>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    2988:	22 0f       	add	r18, r18
    298a:	33 1f       	adc	r19, r19
    298c:	41 50       	subi	r20, 0x01	; 1
    298e:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    2990:	91 f7       	brne	.-28     	; 0x2976 <main+0xf3e>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    2992:	98 2f       	mov	r25, r24
    2994:	88 27       	eor	r24, r24
    2996:	82 27       	eor	r24, r18
    2998:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    299a:	e6 17       	cp	r30, r22
    299c:	f7 07       	cpc	r31, r23
    299e:	09 f7       	brne	.-62     	; 0x2962 <main+0xf2a>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    29a0:	3c 01       	movw	r6, r24
    29a2:	40 e1       	ldi	r20, 0x10	; 16
    29a4:	60 e1       	ldi	r22, 0x10	; 16
    29a6:	74 e0       	ldi	r23, 0x04	; 4
    29a8:	0e 94 97 21 	call	0x432e	; 0x432e <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    29ac:	80 e1       	ldi	r24, 0x10	; 16
    29ae:	94 e0       	ldi	r25, 0x04	; 4
    29b0:	0e 94 8d 21 	call	0x431a	; 0x431a <strupr>
	if(crcXmodem < 0x10)
    29b4:	e0 e1       	ldi	r30, 0x10	; 16
    29b6:	6e 16       	cp	r6, r30
    29b8:	71 04       	cpc	r7, r1
    29ba:	38 f4       	brcc	.+14     	; 0x29ca <main+0xf92>
	{
		tx_string[cnt+4] = crc[0];
    29bc:	80 91 10 04 	lds	r24, 0x0410
    29c0:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = '0';
    29c2:	80 e3       	ldi	r24, 0x30	; 48
    29c4:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = '0';
    29c6:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';
    29c8:	8e ab       	std	Y+54, r24	; 0x36
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    29ca:	c3 01       	movw	r24, r6
    29cc:	40 97       	sbiw	r24, 0x10	; 16
    29ce:	80 3f       	cpi	r24, 0xF0	; 240
    29d0:	91 05       	cpc	r25, r1
    29d2:	48 f4       	brcc	.+18     	; 0x29e6 <main+0xfae>
	{
		tx_string[cnt+4] = crc[1];
    29d4:	e0 e1       	ldi	r30, 0x10	; 16
    29d6:	f4 e0       	ldi	r31, 0x04	; 4
    29d8:	81 81       	ldd	r24, Z+1	; 0x01
    29da:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = crc[0];
    29dc:	80 81       	ld	r24, Z
    29de:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = '0';
    29e0:	80 e3       	ldi	r24, 0x30	; 48
    29e2:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';		
    29e4:	8e ab       	std	Y+54, r24	; 0x36
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    29e6:	c3 01       	movw	r24, r6
    29e8:	9a 95       	dec	r25
    29ea:	81 15       	cp	r24, r1
    29ec:	9f 40       	sbci	r25, 0x0F	; 15
    29ee:	50 f4       	brcc	.+20     	; 0x2a04 <main+0xfcc>
	{
		tx_string[cnt+4] = crc[2];
    29f0:	e0 e1       	ldi	r30, 0x10	; 16
    29f2:	f4 e0       	ldi	r31, 0x04	; 4
    29f4:	82 81       	ldd	r24, Z+2	; 0x02
    29f6:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = crc[1];
    29f8:	81 81       	ldd	r24, Z+1	; 0x01
    29fa:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = crc[0];
    29fc:	80 81       	ld	r24, Z
    29fe:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';		
    2a00:	80 e3       	ldi	r24, 0x30	; 48
    2a02:	8e ab       	std	Y+54, r24	; 0x36
	}
	if(crcXmodem >= 0x1000)
    2a04:	61 14       	cp	r6, r1
    2a06:	20 e1       	ldi	r18, 0x10	; 16
    2a08:	72 06       	cpc	r7, r18
    2a0a:	50 f0       	brcs	.+20     	; 0x2a20 <main+0xfe8>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    2a0c:	e0 e1       	ldi	r30, 0x10	; 16
    2a0e:	f4 e0       	ldi	r31, 0x04	; 4
    2a10:	80 81       	ld	r24, Z
    2a12:	8e ab       	std	Y+54, r24	; 0x36
		tx_string[cnt+2] = crc[1];
    2a14:	81 81       	ldd	r24, Z+1	; 0x01
    2a16:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+3] = crc[2];
    2a18:	82 81       	ldd	r24, Z+2	; 0x02
    2a1a:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+4] = crc[3];
    2a1c:	83 81       	ldd	r24, Z+3	; 0x03
    2a1e:	89 af       	std	Y+57, r24	; 0x39
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    2a20:	8d e0       	ldi	r24, 0x0D	; 13
    2a22:	8a af       	std	Y+58, r24	; 0x3a
    2a24:	9e 01       	movw	r18, r28
    2a26:	25 5c       	subi	r18, 0xC5	; 197
    2a28:	3f 4f       	sbci	r19, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    2a2a:	ee ef       	ldi	r30, 0xFE	; 254
    2a2c:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    2a2e:	0f 2e       	mov	r0, r31
    2a30:	f1 ec       	ldi	r31, 0xC1	; 193
    2a32:	6f 2e       	mov	r6, r31
    2a34:	71 2c       	mov	r7, r1
    2a36:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    2a38:	60 e0       	ldi	r22, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    2a3a:	d4 01       	movw	r26, r8
    2a3c:	4d 91       	ld	r20, X+
    2a3e:	4d 01       	movw	r8, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    2a40:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    2a42:	91 81       	ldd	r25, Z+1	; 0x01
    2a44:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    2a46:	98 13       	cpse	r25, r24
    2a48:	04 c0       	rjmp	.+8      	; 0x2a52 <main+0x101a>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    2a4a:	d3 01       	movw	r26, r6
    2a4c:	8c 91       	ld	r24, X
    2a4e:	80 62       	ori	r24, 0x20	; 32
    2a50:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    2a52:	50 81       	ld	r21, Z
    2a54:	83 81       	ldd	r24, Z+3	; 0x03
    2a56:	94 81       	ldd	r25, Z+4	; 0x04
    2a58:	85 0f       	add	r24, r21
    2a5a:	91 1d       	adc	r25, r1
    2a5c:	dc 01       	movw	r26, r24
    2a5e:	4c 93       	st	X, r20
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    2a60:	70 81       	ld	r23, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    2a62:	47 2f       	mov	r20, r23
    2a64:	50 e0       	ldi	r21, 0x00	; 0
    2a66:	82 81       	ldd	r24, Z+2	; 0x02
    2a68:	90 e0       	ldi	r25, 0x00	; 0
    2a6a:	01 97       	sbiw	r24, 0x01	; 1
    2a6c:	48 17       	cp	r20, r24
    2a6e:	59 07       	cpc	r21, r25
    2a70:	19 f0       	breq	.+6      	; 0x2a78 <main+0x1040>
    2a72:	81 e0       	ldi	r24, 0x01	; 1
    2a74:	87 0f       	add	r24, r23
    2a76:	01 c0       	rjmp	.+2      	; 0x2a7a <main+0x1042>
    2a78:	86 2f       	mov	r24, r22
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    2a7a:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    2a7c:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    2a7e:	82 16       	cp	r8, r18
    2a80:	93 06       	cpc	r9, r19
    2a82:	d9 f6       	brne	.-74     	; 0x2a3a <main+0x1002>
    2a84:	a4 c9       	rjmp	.-3256   	; 0x1dce <main+0x396>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    2a86:	6e e1       	ldi	r22, 0x1E	; 30
    2a88:	70 e0       	ldi	r23, 0x00	; 0
    2a8a:	c7 01       	movw	r24, r14
    2a8c:	0e 94 82 21 	call	0x4304	; 0x4304 <strnlen>
    2a90:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    2a92:	8b 30       	cpi	r24, 0x0B	; 11
    2a94:	91 05       	cpc	r25, r1
    2a96:	64 f0       	brlt	.+24     	; 0x2ab0 <main+0x1078>
    2a98:	ea ee       	ldi	r30, 0xEA	; 234
    2a9a:	f4 e0       	ldi	r31, 0x04	; 4
    2a9c:	de 01       	movw	r26, r28
    2a9e:	a6 5a       	subi	r26, 0xA6	; 166
    2aa0:	bf 4f       	sbci	r27, 0xFF	; 255
    2aa2:	80 52       	subi	r24, 0x20	; 32
    2aa4:	9b 4f       	sbci	r25, 0xFB	; 251
	{
		param[idx] = stringToParse[i];
    2aa6:	21 91       	ld	r18, Z+
    2aa8:	2d 93       	st	X+, r18
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    2aaa:	e8 17       	cp	r30, r24
    2aac:	f9 07       	cpc	r31, r25
    2aae:	d9 f7       	brne	.-10     	; 0x2aa6 <main+0x106e>
		printStatus("");
		break;
		
		case 153:	// Setch0.Dgain
		ParamParse(rx_string, param);
		ch0.Dgain = atof(param);
    2ab0:	ce 01       	movw	r24, r28
    2ab2:	86 5a       	subi	r24, 0xA6	; 166
    2ab4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ab6:	0e 94 1d 21 	call	0x423a	; 0x423a <atof>
    2aba:	60 93 3e 04 	sts	0x043E, r22
    2abe:	70 93 3f 04 	sts	0x043F, r23
    2ac2:	80 93 40 04 	sts	0x0440, r24
    2ac6:	90 93 41 04 	sts	0x0441, r25
		printStatus("");
    2aca:	87 e2       	ldi	r24, 0x27	; 39
    2acc:	91 e0       	ldi	r25, 0x01	; 1
    2ace:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    2ad2:	7d c9       	rjmp	.-3334   	; 0x1dce <main+0x396>
		break;	
		
		case 154:	// Set heater on/off ch0
		if(rx_string[10] == '1')
    2ad4:	f7 01       	movw	r30, r14
    2ad6:	82 85       	ldd	r24, Z+10	; 0x0a
    2ad8:	81 33       	cpi	r24, 0x31	; 49
    2ada:	41 f4       	brne	.+16     	; 0x2aec <main+0x10b4>
		{
			ch0.heaterEnable = true;
    2adc:	81 e0       	ldi	r24, 0x01	; 1
    2ade:	80 93 7c 04 	sts	0x047C, r24
			printStatus("ON");
    2ae2:	85 e3       	ldi	r24, 0x35	; 53
    2ae4:	91 e0       	ldi	r25, 0x01	; 1
    2ae6:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    2aea:	71 c9       	rjmp	.-3358   	; 0x1dce <main+0x396>
		}
		else if(rx_string[10] == '0')
    2aec:	80 33       	cpi	r24, 0x30	; 48
    2aee:	09 f0       	breq	.+2      	; 0x2af2 <main+0x10ba>
    2af0:	6e c9       	rjmp	.-3364   	; 0x1dce <main+0x396>
		{
			ch0.heaterEnable = false;
    2af2:	10 92 7c 04 	sts	0x047C, r1
			printStatus("OFF");
    2af6:	88 e3       	ldi	r24, 0x38	; 56
    2af8:	91 e0       	ldi	r25, 0x01	; 1
    2afa:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    2afe:	67 c9       	rjmp	.-3378   	; 0x1dce <main+0x396>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    2b00:	6e e1       	ldi	r22, 0x1E	; 30
    2b02:	70 e0       	ldi	r23, 0x00	; 0
    2b04:	c7 01       	movw	r24, r14
    2b06:	0e 94 82 21 	call	0x4304	; 0x4304 <strnlen>
    2b0a:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    2b0c:	8b 30       	cpi	r24, 0x0B	; 11
    2b0e:	91 05       	cpc	r25, r1
    2b10:	64 f0       	brlt	.+24     	; 0x2b2a <main+0x10f2>
    2b12:	ea ee       	ldi	r30, 0xEA	; 234
    2b14:	f4 e0       	ldi	r31, 0x04	; 4
    2b16:	de 01       	movw	r26, r28
    2b18:	a6 5a       	subi	r26, 0xA6	; 166
    2b1a:	bf 4f       	sbci	r27, 0xFF	; 255
    2b1c:	80 52       	subi	r24, 0x20	; 32
    2b1e:	9b 4f       	sbci	r25, 0xFB	; 251
	{
		param[idx] = stringToParse[i];
    2b20:	21 91       	ld	r18, Z+
    2b22:	2d 93       	st	X+, r18
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    2b24:	e8 17       	cp	r30, r24
    2b26:	f9 07       	cpc	r31, r25
    2b28:	d9 f7       	brne	.-10     	; 0x2b20 <main+0x10e8>
		}
		break;
		
		case 155:	// Set Temperature error window
		ParamParse(rx_string, param);
		ch0.tempErrorWin = atof(param);
    2b2a:	ce 01       	movw	r24, r28
    2b2c:	86 5a       	subi	r24, 0xA6	; 166
    2b2e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b30:	0e 94 1d 21 	call	0x423a	; 0x423a <atof>
    2b34:	60 93 6e 04 	sts	0x046E, r22
    2b38:	70 93 6f 04 	sts	0x046F, r23
    2b3c:	80 93 70 04 	sts	0x0470, r24
    2b40:	90 93 71 04 	sts	0x0471, r25
		printStatus("");
    2b44:	87 e2       	ldi	r24, 0x27	; 39
    2b46:	91 e0       	ldi	r25, 0x01	; 1
    2b48:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    2b4c:	40 c9       	rjmp	.-3456   	; 0x1dce <main+0x396>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    2b4e:	6e e1       	ldi	r22, 0x1E	; 30
    2b50:	70 e0       	ldi	r23, 0x00	; 0
    2b52:	c7 01       	movw	r24, r14
    2b54:	0e 94 82 21 	call	0x4304	; 0x4304 <strnlen>
    2b58:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    2b5a:	8b 30       	cpi	r24, 0x0B	; 11
    2b5c:	91 05       	cpc	r25, r1
    2b5e:	64 f0       	brlt	.+24     	; 0x2b78 <main+0x1140>
    2b60:	ea ee       	ldi	r30, 0xEA	; 234
    2b62:	f4 e0       	ldi	r31, 0x04	; 4
    2b64:	de 01       	movw	r26, r28
    2b66:	a6 5a       	subi	r26, 0xA6	; 166
    2b68:	bf 4f       	sbci	r27, 0xFF	; 255
    2b6a:	80 52       	subi	r24, 0x20	; 32
    2b6c:	9b 4f       	sbci	r25, 0xFB	; 251
	{
		param[idx] = stringToParse[i];
    2b6e:	21 91       	ld	r18, Z+
    2b70:	2d 93       	st	X+, r18
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    2b72:	e8 17       	cp	r30, r24
    2b74:	f9 07       	cpc	r31, r25
    2b76:	d9 f7       	brne	.-10     	; 0x2b6e <main+0x1136>
		printStatus("");
		break;

		case 156:	// Set Temperature Settle time
		ParamParse(rx_string, param);
		ch0.tempSettleTime = atoi(param);
    2b78:	ce 01       	movw	r24, r28
    2b7a:	86 5a       	subi	r24, 0xA6	; 166
    2b7c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b7e:	0e 94 20 21 	call	0x4240	; 0x4240 <atoi>
    2b82:	90 93 75 04 	sts	0x0475, r25
    2b86:	80 93 74 04 	sts	0x0474, r24
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    2b8a:	81 e2       	ldi	r24, 0x21	; 33
    2b8c:	8a ab       	std	Y+50, r24	; 0x32
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    2b8e:	d7 01       	movw	r26, r14
    2b90:	11 96       	adiw	r26, 0x01	; 1
    2b92:	8c 91       	ld	r24, X
    2b94:	11 97       	sbiw	r26, 0x01	; 1
    2b96:	8b ab       	std	Y+51, r24	; 0x33
    2b98:	12 96       	adiw	r26, 0x02	; 2
    2b9a:	8c 91       	ld	r24, X
    2b9c:	12 97       	sbiw	r26, 0x02	; 2
    2b9e:	8c ab       	std	Y+52, r24	; 0x34
    2ba0:	13 96       	adiw	r26, 0x03	; 3
    2ba2:	8c 91       	ld	r24, X
    2ba4:	8d ab       	std	Y+53, r24	; 0x35
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    2ba6:	1e aa       	std	Y+54, r1	; 0x36
    2ba8:	1f aa       	std	Y+55, r1	; 0x37
    2baa:	18 ae       	std	Y+56, r1	; 0x38
    2bac:	4e 01       	movw	r8, r28
    2bae:	b2 e3       	ldi	r27, 0x32	; 50
    2bb0:	8b 0e       	add	r8, r27
    2bb2:	91 1c       	adc	r9, r1
    2bb4:	be 01       	movw	r22, r28
    2bb6:	6a 5c       	subi	r22, 0xCA	; 202
    2bb8:	7f 4f       	sbci	r23, 0xFF	; 255
    2bba:	f4 01       	movw	r30, r8
    2bbc:	80 e0       	ldi	r24, 0x00	; 0
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    2bc0:	a8 e0       	ldi	r26, 0x08	; 8
    2bc2:	71 2c       	mov	r7, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    2bc4:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    2bc6:	29 2f       	mov	r18, r25
    2bc8:	33 27       	eor	r19, r19
    2bca:	27 fd       	sbrc	r18, 7
    2bcc:	3a 95       	dec	r19
    2bce:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    2bd0:	32 2f       	mov	r19, r18
    2bd2:	22 27       	eor	r18, r18
    2bd4:	4a 2f       	mov	r20, r26
    2bd6:	57 2d       	mov	r21, r7
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    2bd8:	33 23       	and	r19, r19
    2bda:	3c f4       	brge	.+14     	; 0x2bea <main+0x11b2>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    2bdc:	22 0f       	add	r18, r18
    2bde:	33 1f       	adc	r19, r19
    2be0:	b1 e2       	ldi	r27, 0x21	; 33
    2be2:	2b 27       	eor	r18, r27
    2be4:	b0 e1       	ldi	r27, 0x10	; 16
    2be6:	3b 27       	eor	r19, r27
    2be8:	02 c0       	rjmp	.+4      	; 0x2bee <main+0x11b6>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    2bea:	22 0f       	add	r18, r18
    2bec:	33 1f       	adc	r19, r19
    2bee:	41 50       	subi	r20, 0x01	; 1
    2bf0:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    2bf2:	91 f7       	brne	.-28     	; 0x2bd8 <main+0x11a0>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    2bf4:	98 2f       	mov	r25, r24
    2bf6:	88 27       	eor	r24, r24
    2bf8:	82 27       	eor	r24, r18
    2bfa:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    2bfc:	e6 17       	cp	r30, r22
    2bfe:	f7 07       	cpc	r31, r23
    2c00:	09 f7       	brne	.-62     	; 0x2bc4 <main+0x118c>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    2c02:	3c 01       	movw	r6, r24
    2c04:	40 e1       	ldi	r20, 0x10	; 16
    2c06:	60 e1       	ldi	r22, 0x10	; 16
    2c08:	74 e0       	ldi	r23, 0x04	; 4
    2c0a:	0e 94 97 21 	call	0x432e	; 0x432e <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    2c0e:	80 e1       	ldi	r24, 0x10	; 16
    2c10:	94 e0       	ldi	r25, 0x04	; 4
    2c12:	0e 94 8d 21 	call	0x431a	; 0x431a <strupr>
	if(crcXmodem < 0x10)
    2c16:	e0 e1       	ldi	r30, 0x10	; 16
    2c18:	6e 16       	cp	r6, r30
    2c1a:	71 04       	cpc	r7, r1
    2c1c:	38 f4       	brcc	.+14     	; 0x2c2c <main+0x11f4>
	{
		tx_string[cnt+4] = crc[0];
    2c1e:	80 91 10 04 	lds	r24, 0x0410
    2c22:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = '0';
    2c24:	80 e3       	ldi	r24, 0x30	; 48
    2c26:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = '0';
    2c28:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';
    2c2a:	8e ab       	std	Y+54, r24	; 0x36
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    2c2c:	c3 01       	movw	r24, r6
    2c2e:	40 97       	sbiw	r24, 0x10	; 16
    2c30:	80 3f       	cpi	r24, 0xF0	; 240
    2c32:	91 05       	cpc	r25, r1
    2c34:	48 f4       	brcc	.+18     	; 0x2c48 <main+0x1210>
	{
		tx_string[cnt+4] = crc[1];
    2c36:	e0 e1       	ldi	r30, 0x10	; 16
    2c38:	f4 e0       	ldi	r31, 0x04	; 4
    2c3a:	81 81       	ldd	r24, Z+1	; 0x01
    2c3c:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = crc[0];
    2c3e:	80 81       	ld	r24, Z
    2c40:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = '0';
    2c42:	80 e3       	ldi	r24, 0x30	; 48
    2c44:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';		
    2c46:	8e ab       	std	Y+54, r24	; 0x36
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    2c48:	c3 01       	movw	r24, r6
    2c4a:	9a 95       	dec	r25
    2c4c:	81 15       	cp	r24, r1
    2c4e:	9f 40       	sbci	r25, 0x0F	; 15
    2c50:	50 f4       	brcc	.+20     	; 0x2c66 <main+0x122e>
	{
		tx_string[cnt+4] = crc[2];
    2c52:	e0 e1       	ldi	r30, 0x10	; 16
    2c54:	f4 e0       	ldi	r31, 0x04	; 4
    2c56:	82 81       	ldd	r24, Z+2	; 0x02
    2c58:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = crc[1];
    2c5a:	81 81       	ldd	r24, Z+1	; 0x01
    2c5c:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = crc[0];
    2c5e:	80 81       	ld	r24, Z
    2c60:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';		
    2c62:	80 e3       	ldi	r24, 0x30	; 48
    2c64:	8e ab       	std	Y+54, r24	; 0x36
	}
	if(crcXmodem >= 0x1000)
    2c66:	61 14       	cp	r6, r1
    2c68:	20 e1       	ldi	r18, 0x10	; 16
    2c6a:	72 06       	cpc	r7, r18
    2c6c:	50 f0       	brcs	.+20     	; 0x2c82 <main+0x124a>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    2c6e:	e0 e1       	ldi	r30, 0x10	; 16
    2c70:	f4 e0       	ldi	r31, 0x04	; 4
    2c72:	80 81       	ld	r24, Z
    2c74:	8e ab       	std	Y+54, r24	; 0x36
		tx_string[cnt+2] = crc[1];
    2c76:	81 81       	ldd	r24, Z+1	; 0x01
    2c78:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+3] = crc[2];
    2c7a:	82 81       	ldd	r24, Z+2	; 0x02
    2c7c:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+4] = crc[3];
    2c7e:	83 81       	ldd	r24, Z+3	; 0x03
    2c80:	89 af       	std	Y+57, r24	; 0x39
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    2c82:	8d e0       	ldi	r24, 0x0D	; 13
    2c84:	8a af       	std	Y+58, r24	; 0x3a
    2c86:	9e 01       	movw	r18, r28
    2c88:	25 5c       	subi	r18, 0xC5	; 197
    2c8a:	3f 4f       	sbci	r19, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    2c8c:	ee ef       	ldi	r30, 0xFE	; 254
    2c8e:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    2c90:	0f 2e       	mov	r0, r31
    2c92:	f1 ec       	ldi	r31, 0xC1	; 193
    2c94:	6f 2e       	mov	r6, r31
    2c96:	71 2c       	mov	r7, r1
    2c98:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    2c9a:	60 e0       	ldi	r22, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    2c9c:	d4 01       	movw	r26, r8
    2c9e:	4d 91       	ld	r20, X+
    2ca0:	4d 01       	movw	r8, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    2ca2:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    2ca4:	91 81       	ldd	r25, Z+1	; 0x01
    2ca6:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    2ca8:	98 13       	cpse	r25, r24
    2caa:	04 c0       	rjmp	.+8      	; 0x2cb4 <main+0x127c>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    2cac:	d3 01       	movw	r26, r6
    2cae:	8c 91       	ld	r24, X
    2cb0:	80 62       	ori	r24, 0x20	; 32
    2cb2:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    2cb4:	50 81       	ld	r21, Z
    2cb6:	83 81       	ldd	r24, Z+3	; 0x03
    2cb8:	94 81       	ldd	r25, Z+4	; 0x04
    2cba:	85 0f       	add	r24, r21
    2cbc:	91 1d       	adc	r25, r1
    2cbe:	dc 01       	movw	r26, r24
    2cc0:	4c 93       	st	X, r20
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    2cc2:	70 81       	ld	r23, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    2cc4:	47 2f       	mov	r20, r23
    2cc6:	50 e0       	ldi	r21, 0x00	; 0
    2cc8:	82 81       	ldd	r24, Z+2	; 0x02
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	01 97       	sbiw	r24, 0x01	; 1
    2cce:	48 17       	cp	r20, r24
    2cd0:	59 07       	cpc	r21, r25
    2cd2:	19 f0       	breq	.+6      	; 0x2cda <main+0x12a2>
    2cd4:	81 e0       	ldi	r24, 0x01	; 1
    2cd6:	87 0f       	add	r24, r23
    2cd8:	01 c0       	rjmp	.+2      	; 0x2cdc <main+0x12a4>
    2cda:	86 2f       	mov	r24, r22
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    2cdc:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    2cde:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    2ce0:	82 16       	cp	r8, r18
    2ce2:	93 06       	cpc	r9, r19
    2ce4:	d9 f6       	brne	.-74     	; 0x2c9c <main+0x1264>
    2ce6:	73 c8       	rjmp	.-3866   	; 0x1dce <main+0x396>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    2ce8:	6e e1       	ldi	r22, 0x1E	; 30
    2cea:	70 e0       	ldi	r23, 0x00	; 0
    2cec:	c7 01       	movw	r24, r14
    2cee:	0e 94 82 21 	call	0x4304	; 0x4304 <strnlen>
    2cf2:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    2cf4:	8b 30       	cpi	r24, 0x0B	; 11
    2cf6:	91 05       	cpc	r25, r1
    2cf8:	64 f0       	brlt	.+24     	; 0x2d12 <main+0x12da>
    2cfa:	ea ee       	ldi	r30, 0xEA	; 234
    2cfc:	f4 e0       	ldi	r31, 0x04	; 4
    2cfe:	de 01       	movw	r26, r28
    2d00:	a6 5a       	subi	r26, 0xA6	; 166
    2d02:	bf 4f       	sbci	r27, 0xFF	; 255
    2d04:	80 52       	subi	r24, 0x20	; 32
    2d06:	9b 4f       	sbci	r25, 0xFB	; 251
	{
		param[idx] = stringToParse[i];
    2d08:	21 91       	ld	r18, Z+
    2d0a:	2d 93       	st	X+, r18
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    2d0c:	e8 17       	cp	r30, r24
    2d0e:	f9 07       	cpc	r31, r25
    2d10:	d9 f7       	brne	.-10     	; 0x2d08 <main+0x12d0>
		break;
		
		// *** Channel 1 ***
		case 250:	// ch1.TempSetPoint
		ParamParse(rx_string, param);
		ch1.TempSetPoint = atof(param);
    2d12:	ce 01       	movw	r24, r28
    2d14:	86 5a       	subi	r24, 0xA6	; 166
    2d16:	9f 4f       	sbci	r25, 0xFF	; 255
    2d18:	0e 94 1d 21 	call	0x423a	; 0x423a <atof>
    2d1c:	60 93 7d 04 	sts	0x047D, r22
    2d20:	70 93 7e 04 	sts	0x047E, r23
    2d24:	80 93 7f 04 	sts	0x047F, r24
    2d28:	90 93 80 04 	sts	0x0480, r25
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    2d2c:	81 e2       	ldi	r24, 0x21	; 33
    2d2e:	8a ab       	std	Y+50, r24	; 0x32
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    2d30:	f7 01       	movw	r30, r14
    2d32:	81 81       	ldd	r24, Z+1	; 0x01
    2d34:	8b ab       	std	Y+51, r24	; 0x33
    2d36:	82 81       	ldd	r24, Z+2	; 0x02
    2d38:	8c ab       	std	Y+52, r24	; 0x34
    2d3a:	83 81       	ldd	r24, Z+3	; 0x03
    2d3c:	8d ab       	std	Y+53, r24	; 0x35
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    2d3e:	1e aa       	std	Y+54, r1	; 0x36
    2d40:	1f aa       	std	Y+55, r1	; 0x37
    2d42:	18 ae       	std	Y+56, r1	; 0x38
    2d44:	4e 01       	movw	r8, r28
    2d46:	f2 e3       	ldi	r31, 0x32	; 50
    2d48:	8f 0e       	add	r8, r31
    2d4a:	91 1c       	adc	r9, r1
    2d4c:	be 01       	movw	r22, r28
    2d4e:	6a 5c       	subi	r22, 0xCA	; 202
    2d50:	7f 4f       	sbci	r23, 0xFF	; 255
    2d52:	f4 01       	movw	r30, r8
    2d54:	80 e0       	ldi	r24, 0x00	; 0
    2d56:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    2d58:	a8 e0       	ldi	r26, 0x08	; 8
    2d5a:	71 2c       	mov	r7, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    2d5c:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    2d5e:	29 2f       	mov	r18, r25
    2d60:	33 27       	eor	r19, r19
    2d62:	27 fd       	sbrc	r18, 7
    2d64:	3a 95       	dec	r19
    2d66:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    2d68:	32 2f       	mov	r19, r18
    2d6a:	22 27       	eor	r18, r18
    2d6c:	4a 2f       	mov	r20, r26
    2d6e:	57 2d       	mov	r21, r7
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    2d70:	33 23       	and	r19, r19
    2d72:	3c f4       	brge	.+14     	; 0x2d82 <main+0x134a>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    2d74:	22 0f       	add	r18, r18
    2d76:	33 1f       	adc	r19, r19
    2d78:	b1 e2       	ldi	r27, 0x21	; 33
    2d7a:	2b 27       	eor	r18, r27
    2d7c:	b0 e1       	ldi	r27, 0x10	; 16
    2d7e:	3b 27       	eor	r19, r27
    2d80:	02 c0       	rjmp	.+4      	; 0x2d86 <main+0x134e>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    2d82:	22 0f       	add	r18, r18
    2d84:	33 1f       	adc	r19, r19
    2d86:	41 50       	subi	r20, 0x01	; 1
    2d88:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    2d8a:	91 f7       	brne	.-28     	; 0x2d70 <main+0x1338>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    2d8c:	98 2f       	mov	r25, r24
    2d8e:	88 27       	eor	r24, r24
    2d90:	82 27       	eor	r24, r18
    2d92:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    2d94:	e6 17       	cp	r30, r22
    2d96:	f7 07       	cpc	r31, r23
    2d98:	09 f7       	brne	.-62     	; 0x2d5c <main+0x1324>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    2d9a:	3c 01       	movw	r6, r24
    2d9c:	40 e1       	ldi	r20, 0x10	; 16
    2d9e:	60 e1       	ldi	r22, 0x10	; 16
    2da0:	74 e0       	ldi	r23, 0x04	; 4
    2da2:	0e 94 97 21 	call	0x432e	; 0x432e <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    2da6:	80 e1       	ldi	r24, 0x10	; 16
    2da8:	94 e0       	ldi	r25, 0x04	; 4
    2daa:	0e 94 8d 21 	call	0x431a	; 0x431a <strupr>
	if(crcXmodem < 0x10)
    2dae:	e0 e1       	ldi	r30, 0x10	; 16
    2db0:	6e 16       	cp	r6, r30
    2db2:	71 04       	cpc	r7, r1
    2db4:	38 f4       	brcc	.+14     	; 0x2dc4 <main+0x138c>
	{
		tx_string[cnt+4] = crc[0];
    2db6:	80 91 10 04 	lds	r24, 0x0410
    2dba:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = '0';
    2dbc:	80 e3       	ldi	r24, 0x30	; 48
    2dbe:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = '0';
    2dc0:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';
    2dc2:	8e ab       	std	Y+54, r24	; 0x36
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    2dc4:	c3 01       	movw	r24, r6
    2dc6:	40 97       	sbiw	r24, 0x10	; 16
    2dc8:	80 3f       	cpi	r24, 0xF0	; 240
    2dca:	91 05       	cpc	r25, r1
    2dcc:	48 f4       	brcc	.+18     	; 0x2de0 <main+0x13a8>
	{
		tx_string[cnt+4] = crc[1];
    2dce:	e0 e1       	ldi	r30, 0x10	; 16
    2dd0:	f4 e0       	ldi	r31, 0x04	; 4
    2dd2:	81 81       	ldd	r24, Z+1	; 0x01
    2dd4:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = crc[0];
    2dd6:	80 81       	ld	r24, Z
    2dd8:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = '0';
    2dda:	80 e3       	ldi	r24, 0x30	; 48
    2ddc:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';		
    2dde:	8e ab       	std	Y+54, r24	; 0x36
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    2de0:	c3 01       	movw	r24, r6
    2de2:	9a 95       	dec	r25
    2de4:	81 15       	cp	r24, r1
    2de6:	9f 40       	sbci	r25, 0x0F	; 15
    2de8:	50 f4       	brcc	.+20     	; 0x2dfe <main+0x13c6>
	{
		tx_string[cnt+4] = crc[2];
    2dea:	e0 e1       	ldi	r30, 0x10	; 16
    2dec:	f4 e0       	ldi	r31, 0x04	; 4
    2dee:	82 81       	ldd	r24, Z+2	; 0x02
    2df0:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = crc[1];
    2df2:	81 81       	ldd	r24, Z+1	; 0x01
    2df4:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = crc[0];
    2df6:	80 81       	ld	r24, Z
    2df8:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';		
    2dfa:	80 e3       	ldi	r24, 0x30	; 48
    2dfc:	8e ab       	std	Y+54, r24	; 0x36
	}
	if(crcXmodem >= 0x1000)
    2dfe:	61 14       	cp	r6, r1
    2e00:	20 e1       	ldi	r18, 0x10	; 16
    2e02:	72 06       	cpc	r7, r18
    2e04:	50 f0       	brcs	.+20     	; 0x2e1a <main+0x13e2>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    2e06:	e0 e1       	ldi	r30, 0x10	; 16
    2e08:	f4 e0       	ldi	r31, 0x04	; 4
    2e0a:	80 81       	ld	r24, Z
    2e0c:	8e ab       	std	Y+54, r24	; 0x36
		tx_string[cnt+2] = crc[1];
    2e0e:	81 81       	ldd	r24, Z+1	; 0x01
    2e10:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+3] = crc[2];
    2e12:	82 81       	ldd	r24, Z+2	; 0x02
    2e14:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+4] = crc[3];
    2e16:	83 81       	ldd	r24, Z+3	; 0x03
    2e18:	89 af       	std	Y+57, r24	; 0x39
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    2e1a:	8d e0       	ldi	r24, 0x0D	; 13
    2e1c:	8a af       	std	Y+58, r24	; 0x3a
    2e1e:	9e 01       	movw	r18, r28
    2e20:	25 5c       	subi	r18, 0xC5	; 197
    2e22:	3f 4f       	sbci	r19, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    2e24:	ee ef       	ldi	r30, 0xFE	; 254
    2e26:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    2e28:	0f 2e       	mov	r0, r31
    2e2a:	f1 ec       	ldi	r31, 0xC1	; 193
    2e2c:	6f 2e       	mov	r6, r31
    2e2e:	71 2c       	mov	r7, r1
    2e30:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    2e32:	60 e0       	ldi	r22, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    2e34:	d4 01       	movw	r26, r8
    2e36:	4d 91       	ld	r20, X+
    2e38:	4d 01       	movw	r8, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    2e3a:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    2e3c:	91 81       	ldd	r25, Z+1	; 0x01
    2e3e:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    2e40:	98 13       	cpse	r25, r24
    2e42:	04 c0       	rjmp	.+8      	; 0x2e4c <main+0x1414>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    2e44:	d3 01       	movw	r26, r6
    2e46:	8c 91       	ld	r24, X
    2e48:	80 62       	ori	r24, 0x20	; 32
    2e4a:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    2e4c:	50 81       	ld	r21, Z
    2e4e:	83 81       	ldd	r24, Z+3	; 0x03
    2e50:	94 81       	ldd	r25, Z+4	; 0x04
    2e52:	85 0f       	add	r24, r21
    2e54:	91 1d       	adc	r25, r1
    2e56:	dc 01       	movw	r26, r24
    2e58:	4c 93       	st	X, r20
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    2e5a:	70 81       	ld	r23, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    2e5c:	47 2f       	mov	r20, r23
    2e5e:	50 e0       	ldi	r21, 0x00	; 0
    2e60:	82 81       	ldd	r24, Z+2	; 0x02
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	01 97       	sbiw	r24, 0x01	; 1
    2e66:	48 17       	cp	r20, r24
    2e68:	59 07       	cpc	r21, r25
    2e6a:	19 f0       	breq	.+6      	; 0x2e72 <main+0x143a>
    2e6c:	81 e0       	ldi	r24, 0x01	; 1
    2e6e:	87 0f       	add	r24, r23
    2e70:	01 c0       	rjmp	.+2      	; 0x2e74 <main+0x143c>
    2e72:	86 2f       	mov	r24, r22
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    2e74:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    2e76:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    2e78:	82 16       	cp	r8, r18
    2e7a:	93 06       	cpc	r9, r19
    2e7c:	d9 f6       	brne	.-74     	; 0x2e34 <main+0x13fc>
    2e7e:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <main+0x396>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    2e82:	6e e1       	ldi	r22, 0x1E	; 30
    2e84:	70 e0       	ldi	r23, 0x00	; 0
    2e86:	c7 01       	movw	r24, r14
    2e88:	0e 94 82 21 	call	0x4304	; 0x4304 <strnlen>
    2e8c:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    2e8e:	8b 30       	cpi	r24, 0x0B	; 11
    2e90:	91 05       	cpc	r25, r1
    2e92:	64 f0       	brlt	.+24     	; 0x2eac <main+0x1474>
    2e94:	ea ee       	ldi	r30, 0xEA	; 234
    2e96:	f4 e0       	ldi	r31, 0x04	; 4
    2e98:	de 01       	movw	r26, r28
    2e9a:	a6 5a       	subi	r26, 0xA6	; 166
    2e9c:	bf 4f       	sbci	r27, 0xFF	; 255
    2e9e:	80 52       	subi	r24, 0x20	; 32
    2ea0:	9b 4f       	sbci	r25, 0xFB	; 251
	{
		param[idx] = stringToParse[i];
    2ea2:	21 91       	ld	r18, Z+
    2ea4:	2d 93       	st	X+, r18
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    2ea6:	e8 17       	cp	r30, r24
    2ea8:	f9 07       	cpc	r31, r25
    2eaa:	d9 f7       	brne	.-10     	; 0x2ea2 <main+0x146a>
		printStatus("");
		break;
		
		case 251:	// SetPgainCh1
		ParamParse(rx_string, param);
		ch1.Pgain = atof(param);
    2eac:	ce 01       	movw	r24, r28
    2eae:	86 5a       	subi	r24, 0xA6	; 166
    2eb0:	9f 4f       	sbci	r25, 0xFF	; 255
    2eb2:	0e 94 1d 21 	call	0x423a	; 0x423a <atof>
    2eb6:	60 93 99 04 	sts	0x0499, r22
    2eba:	70 93 9a 04 	sts	0x049A, r23
    2ebe:	80 93 9b 04 	sts	0x049B, r24
    2ec2:	90 93 9c 04 	sts	0x049C, r25
		printStatus("");
    2ec6:	87 e2       	ldi	r24, 0x27	; 39
    2ec8:	91 e0       	ldi	r25, 0x01	; 1
    2eca:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    2ece:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <main+0x396>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    2ed2:	6e e1       	ldi	r22, 0x1E	; 30
    2ed4:	70 e0       	ldi	r23, 0x00	; 0
    2ed6:	c7 01       	movw	r24, r14
    2ed8:	0e 94 82 21 	call	0x4304	; 0x4304 <strnlen>
    2edc:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    2ede:	8b 30       	cpi	r24, 0x0B	; 11
    2ee0:	91 05       	cpc	r25, r1
    2ee2:	64 f0       	brlt	.+24     	; 0x2efc <main+0x14c4>
    2ee4:	ea ee       	ldi	r30, 0xEA	; 234
    2ee6:	f4 e0       	ldi	r31, 0x04	; 4
    2ee8:	de 01       	movw	r26, r28
    2eea:	a6 5a       	subi	r26, 0xA6	; 166
    2eec:	bf 4f       	sbci	r27, 0xFF	; 255
    2eee:	80 52       	subi	r24, 0x20	; 32
    2ef0:	9b 4f       	sbci	r25, 0xFB	; 251
	{
		param[idx] = stringToParse[i];
    2ef2:	21 91       	ld	r18, Z+
    2ef4:	2d 93       	st	X+, r18
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    2ef6:	e8 17       	cp	r30, r24
    2ef8:	f9 07       	cpc	r31, r25
    2efa:	d9 f7       	brne	.-10     	; 0x2ef2 <main+0x14ba>
		printStatus("");
		break;
		
		case 252:	// SetIgainCh1
		ParamParse(rx_string, param);
		ch1.Igain = atof(param);
    2efc:	ce 01       	movw	r24, r28
    2efe:	86 5a       	subi	r24, 0xA6	; 166
    2f00:	9f 4f       	sbci	r25, 0xFF	; 255
    2f02:	0e 94 1d 21 	call	0x423a	; 0x423a <atof>
    2f06:	60 93 9d 04 	sts	0x049D, r22
    2f0a:	70 93 9e 04 	sts	0x049E, r23
    2f0e:	80 93 9f 04 	sts	0x049F, r24
    2f12:	90 93 a0 04 	sts	0x04A0, r25
		printStatus("");
    2f16:	87 e2       	ldi	r24, 0x27	; 39
    2f18:	91 e0       	ldi	r25, 0x01	; 1
    2f1a:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    2f1e:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <main+0x396>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    2f22:	6e e1       	ldi	r22, 0x1E	; 30
    2f24:	70 e0       	ldi	r23, 0x00	; 0
    2f26:	c7 01       	movw	r24, r14
    2f28:	0e 94 82 21 	call	0x4304	; 0x4304 <strnlen>
    2f2c:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    2f2e:	8b 30       	cpi	r24, 0x0B	; 11
    2f30:	91 05       	cpc	r25, r1
    2f32:	64 f0       	brlt	.+24     	; 0x2f4c <main+0x1514>
    2f34:	ea ee       	ldi	r30, 0xEA	; 234
    2f36:	f4 e0       	ldi	r31, 0x04	; 4
    2f38:	de 01       	movw	r26, r28
    2f3a:	a6 5a       	subi	r26, 0xA6	; 166
    2f3c:	bf 4f       	sbci	r27, 0xFF	; 255
    2f3e:	80 52       	subi	r24, 0x20	; 32
    2f40:	9b 4f       	sbci	r25, 0xFB	; 251
	{
		param[idx] = stringToParse[i];
    2f42:	21 91       	ld	r18, Z+
    2f44:	2d 93       	st	X+, r18
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    2f46:	e8 17       	cp	r30, r24
    2f48:	f9 07       	cpc	r31, r25
    2f4a:	d9 f7       	brne	.-10     	; 0x2f42 <main+0x150a>
		printStatus("");
		break;
		
		case 253:	// Setch1.Dgain
		ParamParse(rx_string, param);
		ch1.Dgain = atof(param);
    2f4c:	ce 01       	movw	r24, r28
    2f4e:	86 5a       	subi	r24, 0xA6	; 166
    2f50:	9f 4f       	sbci	r25, 0xFF	; 255
    2f52:	0e 94 1d 21 	call	0x423a	; 0x423a <atof>
    2f56:	60 93 a1 04 	sts	0x04A1, r22
    2f5a:	70 93 a2 04 	sts	0x04A2, r23
    2f5e:	80 93 a3 04 	sts	0x04A3, r24
    2f62:	90 93 a4 04 	sts	0x04A4, r25
		printStatus("");
    2f66:	87 e2       	ldi	r24, 0x27	; 39
    2f68:	91 e0       	ldi	r25, 0x01	; 1
    2f6a:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    2f6e:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <main+0x396>
		break;
		
		case 254:	// Set heater on/off ch1
		if(rx_string[10] == '1')
    2f72:	f7 01       	movw	r30, r14
    2f74:	82 85       	ldd	r24, Z+10	; 0x0a
    2f76:	81 33       	cpi	r24, 0x31	; 49
    2f78:	49 f4       	brne	.+18     	; 0x2f8c <main+0x1554>
		{
			ch1.heaterEnable = true;
    2f7a:	81 e0       	ldi	r24, 0x01	; 1
    2f7c:	80 93 df 04 	sts	0x04DF, r24
			printStatus("ON");
    2f80:	85 e3       	ldi	r24, 0x35	; 53
    2f82:	91 e0       	ldi	r25, 0x01	; 1
    2f84:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    2f88:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <main+0x396>
		}
		else if(rx_string[10] == '0')
    2f8c:	80 33       	cpi	r24, 0x30	; 48
    2f8e:	11 f0       	breq	.+4      	; 0x2f94 <main+0x155c>
    2f90:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <main+0x396>
		{
			ch1.heaterEnable = false;
    2f94:	10 92 df 04 	sts	0x04DF, r1
			printStatus("OFF");
    2f98:	88 e3       	ldi	r24, 0x38	; 56
    2f9a:	91 e0       	ldi	r25, 0x01	; 1
    2f9c:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    2fa0:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <main+0x396>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    2fa4:	6e e1       	ldi	r22, 0x1E	; 30
    2fa6:	70 e0       	ldi	r23, 0x00	; 0
    2fa8:	c7 01       	movw	r24, r14
    2faa:	0e 94 82 21 	call	0x4304	; 0x4304 <strnlen>
    2fae:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    2fb0:	8b 30       	cpi	r24, 0x0B	; 11
    2fb2:	91 05       	cpc	r25, r1
    2fb4:	64 f0       	brlt	.+24     	; 0x2fce <main+0x1596>
    2fb6:	ea ee       	ldi	r30, 0xEA	; 234
    2fb8:	f4 e0       	ldi	r31, 0x04	; 4
    2fba:	de 01       	movw	r26, r28
    2fbc:	a6 5a       	subi	r26, 0xA6	; 166
    2fbe:	bf 4f       	sbci	r27, 0xFF	; 255
    2fc0:	80 52       	subi	r24, 0x20	; 32
    2fc2:	9b 4f       	sbci	r25, 0xFB	; 251
	{
		param[idx] = stringToParse[i];
    2fc4:	21 91       	ld	r18, Z+
    2fc6:	2d 93       	st	X+, r18
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    2fc8:	e8 17       	cp	r30, r24
    2fca:	f9 07       	cpc	r31, r25
    2fcc:	d9 f7       	brne	.-10     	; 0x2fc4 <main+0x158c>
		break;
		
		// *** Channel 2 ***
		case 350:	// ch2.TempSetPoint
		ParamParse(rx_string, param);
		ch2.TempSetPoint = atof(param);
    2fce:	ce 01       	movw	r24, r28
    2fd0:	86 5a       	subi	r24, 0xA6	; 166
    2fd2:	9f 4f       	sbci	r25, 0xFF	; 255
    2fd4:	0e 94 1d 21 	call	0x423a	; 0x423a <atof>
    2fd8:	60 93 ab 02 	sts	0x02AB, r22
    2fdc:	70 93 ac 02 	sts	0x02AC, r23
    2fe0:	80 93 ad 02 	sts	0x02AD, r24
    2fe4:	90 93 ae 02 	sts	0x02AE, r25
		printStatus("");
    2fe8:	87 e2       	ldi	r24, 0x27	; 39
    2fea:	91 e0       	ldi	r25, 0x01	; 1
    2fec:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    2ff0:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <main+0x396>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    2ff4:	6e e1       	ldi	r22, 0x1E	; 30
    2ff6:	70 e0       	ldi	r23, 0x00	; 0
    2ff8:	c7 01       	movw	r24, r14
    2ffa:	0e 94 82 21 	call	0x4304	; 0x4304 <strnlen>
    2ffe:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    3000:	8b 30       	cpi	r24, 0x0B	; 11
    3002:	91 05       	cpc	r25, r1
    3004:	64 f0       	brlt	.+24     	; 0x301e <main+0x15e6>
    3006:	ea ee       	ldi	r30, 0xEA	; 234
    3008:	f4 e0       	ldi	r31, 0x04	; 4
    300a:	de 01       	movw	r26, r28
    300c:	a6 5a       	subi	r26, 0xA6	; 166
    300e:	bf 4f       	sbci	r27, 0xFF	; 255
    3010:	80 52       	subi	r24, 0x20	; 32
    3012:	9b 4f       	sbci	r25, 0xFB	; 251
	{
		param[idx] = stringToParse[i];
    3014:	21 91       	ld	r18, Z+
    3016:	2d 93       	st	X+, r18
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    3018:	e8 17       	cp	r30, r24
    301a:	f9 07       	cpc	r31, r25
    301c:	d9 f7       	brne	.-10     	; 0x3014 <main+0x15dc>
		printStatus("");
		break;
		
		case 351:	// SetPgainCh2
		ParamParse(rx_string, param);
		ch2.Pgain = atof(param);
    301e:	ce 01       	movw	r24, r28
    3020:	86 5a       	subi	r24, 0xA6	; 166
    3022:	9f 4f       	sbci	r25, 0xFF	; 255
    3024:	0e 94 1d 21 	call	0x423a	; 0x423a <atof>
    3028:	60 93 c7 02 	sts	0x02C7, r22
    302c:	70 93 c8 02 	sts	0x02C8, r23
    3030:	80 93 c9 02 	sts	0x02C9, r24
    3034:	90 93 ca 02 	sts	0x02CA, r25
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    3038:	81 e2       	ldi	r24, 0x21	; 33
    303a:	8a ab       	std	Y+50, r24	; 0x32
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    303c:	d7 01       	movw	r26, r14
    303e:	11 96       	adiw	r26, 0x01	; 1
    3040:	8c 91       	ld	r24, X
    3042:	11 97       	sbiw	r26, 0x01	; 1
    3044:	8b ab       	std	Y+51, r24	; 0x33
    3046:	12 96       	adiw	r26, 0x02	; 2
    3048:	8c 91       	ld	r24, X
    304a:	12 97       	sbiw	r26, 0x02	; 2
    304c:	8c ab       	std	Y+52, r24	; 0x34
    304e:	13 96       	adiw	r26, 0x03	; 3
    3050:	8c 91       	ld	r24, X
    3052:	8d ab       	std	Y+53, r24	; 0x35
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    3054:	1e aa       	std	Y+54, r1	; 0x36
    3056:	1f aa       	std	Y+55, r1	; 0x37
    3058:	18 ae       	std	Y+56, r1	; 0x38
    305a:	4e 01       	movw	r8, r28
    305c:	b2 e3       	ldi	r27, 0x32	; 50
    305e:	8b 0e       	add	r8, r27
    3060:	91 1c       	adc	r9, r1
    3062:	be 01       	movw	r22, r28
    3064:	6a 5c       	subi	r22, 0xCA	; 202
    3066:	7f 4f       	sbci	r23, 0xFF	; 255
    3068:	f4 01       	movw	r30, r8
    306a:	80 e0       	ldi	r24, 0x00	; 0
    306c:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    306e:	a8 e0       	ldi	r26, 0x08	; 8
    3070:	71 2c       	mov	r7, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    3072:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    3074:	29 2f       	mov	r18, r25
    3076:	33 27       	eor	r19, r19
    3078:	27 fd       	sbrc	r18, 7
    307a:	3a 95       	dec	r19
    307c:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    307e:	32 2f       	mov	r19, r18
    3080:	22 27       	eor	r18, r18
    3082:	4a 2f       	mov	r20, r26
    3084:	57 2d       	mov	r21, r7
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    3086:	33 23       	and	r19, r19
    3088:	3c f4       	brge	.+14     	; 0x3098 <main+0x1660>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    308a:	22 0f       	add	r18, r18
    308c:	33 1f       	adc	r19, r19
    308e:	b1 e2       	ldi	r27, 0x21	; 33
    3090:	2b 27       	eor	r18, r27
    3092:	b0 e1       	ldi	r27, 0x10	; 16
    3094:	3b 27       	eor	r19, r27
    3096:	02 c0       	rjmp	.+4      	; 0x309c <main+0x1664>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    3098:	22 0f       	add	r18, r18
    309a:	33 1f       	adc	r19, r19
    309c:	41 50       	subi	r20, 0x01	; 1
    309e:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    30a0:	91 f7       	brne	.-28     	; 0x3086 <main+0x164e>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    30a2:	98 2f       	mov	r25, r24
    30a4:	88 27       	eor	r24, r24
    30a6:	82 27       	eor	r24, r18
    30a8:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    30aa:	e6 17       	cp	r30, r22
    30ac:	f7 07       	cpc	r31, r23
    30ae:	09 f7       	brne	.-62     	; 0x3072 <main+0x163a>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    30b0:	3c 01       	movw	r6, r24
    30b2:	40 e1       	ldi	r20, 0x10	; 16
    30b4:	60 e1       	ldi	r22, 0x10	; 16
    30b6:	74 e0       	ldi	r23, 0x04	; 4
    30b8:	0e 94 97 21 	call	0x432e	; 0x432e <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    30bc:	80 e1       	ldi	r24, 0x10	; 16
    30be:	94 e0       	ldi	r25, 0x04	; 4
    30c0:	0e 94 8d 21 	call	0x431a	; 0x431a <strupr>
	if(crcXmodem < 0x10)
    30c4:	e0 e1       	ldi	r30, 0x10	; 16
    30c6:	6e 16       	cp	r6, r30
    30c8:	71 04       	cpc	r7, r1
    30ca:	38 f4       	brcc	.+14     	; 0x30da <main+0x16a2>
	{
		tx_string[cnt+4] = crc[0];
    30cc:	80 91 10 04 	lds	r24, 0x0410
    30d0:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = '0';
    30d2:	80 e3       	ldi	r24, 0x30	; 48
    30d4:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = '0';
    30d6:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';
    30d8:	8e ab       	std	Y+54, r24	; 0x36
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    30da:	c3 01       	movw	r24, r6
    30dc:	40 97       	sbiw	r24, 0x10	; 16
    30de:	80 3f       	cpi	r24, 0xF0	; 240
    30e0:	91 05       	cpc	r25, r1
    30e2:	48 f4       	brcc	.+18     	; 0x30f6 <main+0x16be>
	{
		tx_string[cnt+4] = crc[1];
    30e4:	e0 e1       	ldi	r30, 0x10	; 16
    30e6:	f4 e0       	ldi	r31, 0x04	; 4
    30e8:	81 81       	ldd	r24, Z+1	; 0x01
    30ea:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = crc[0];
    30ec:	80 81       	ld	r24, Z
    30ee:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = '0';
    30f0:	80 e3       	ldi	r24, 0x30	; 48
    30f2:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';		
    30f4:	8e ab       	std	Y+54, r24	; 0x36
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    30f6:	c3 01       	movw	r24, r6
    30f8:	9a 95       	dec	r25
    30fa:	81 15       	cp	r24, r1
    30fc:	9f 40       	sbci	r25, 0x0F	; 15
    30fe:	50 f4       	brcc	.+20     	; 0x3114 <main+0x16dc>
	{
		tx_string[cnt+4] = crc[2];
    3100:	e0 e1       	ldi	r30, 0x10	; 16
    3102:	f4 e0       	ldi	r31, 0x04	; 4
    3104:	82 81       	ldd	r24, Z+2	; 0x02
    3106:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = crc[1];
    3108:	81 81       	ldd	r24, Z+1	; 0x01
    310a:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = crc[0];
    310c:	80 81       	ld	r24, Z
    310e:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';		
    3110:	80 e3       	ldi	r24, 0x30	; 48
    3112:	8e ab       	std	Y+54, r24	; 0x36
	}
	if(crcXmodem >= 0x1000)
    3114:	61 14       	cp	r6, r1
    3116:	20 e1       	ldi	r18, 0x10	; 16
    3118:	72 06       	cpc	r7, r18
    311a:	50 f0       	brcs	.+20     	; 0x3130 <main+0x16f8>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    311c:	e0 e1       	ldi	r30, 0x10	; 16
    311e:	f4 e0       	ldi	r31, 0x04	; 4
    3120:	80 81       	ld	r24, Z
    3122:	8e ab       	std	Y+54, r24	; 0x36
		tx_string[cnt+2] = crc[1];
    3124:	81 81       	ldd	r24, Z+1	; 0x01
    3126:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+3] = crc[2];
    3128:	82 81       	ldd	r24, Z+2	; 0x02
    312a:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+4] = crc[3];
    312c:	83 81       	ldd	r24, Z+3	; 0x03
    312e:	89 af       	std	Y+57, r24	; 0x39
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    3130:	8d e0       	ldi	r24, 0x0D	; 13
    3132:	8a af       	std	Y+58, r24	; 0x3a
    3134:	9e 01       	movw	r18, r28
    3136:	25 5c       	subi	r18, 0xC5	; 197
    3138:	3f 4f       	sbci	r19, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    313a:	ee ef       	ldi	r30, 0xFE	; 254
    313c:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    313e:	0f 2e       	mov	r0, r31
    3140:	f1 ec       	ldi	r31, 0xC1	; 193
    3142:	6f 2e       	mov	r6, r31
    3144:	71 2c       	mov	r7, r1
    3146:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3148:	60 e0       	ldi	r22, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    314a:	d4 01       	movw	r26, r8
    314c:	4d 91       	ld	r20, X+
    314e:	4d 01       	movw	r8, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    3150:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3152:	91 81       	ldd	r25, Z+1	; 0x01
    3154:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    3156:	98 13       	cpse	r25, r24
    3158:	04 c0       	rjmp	.+8      	; 0x3162 <main+0x172a>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    315a:	d3 01       	movw	r26, r6
    315c:	8c 91       	ld	r24, X
    315e:	80 62       	ori	r24, 0x20	; 32
    3160:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    3162:	50 81       	ld	r21, Z
    3164:	83 81       	ldd	r24, Z+3	; 0x03
    3166:	94 81       	ldd	r25, Z+4	; 0x04
    3168:	85 0f       	add	r24, r21
    316a:	91 1d       	adc	r25, r1
    316c:	dc 01       	movw	r26, r24
    316e:	4c 93       	st	X, r20
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    3170:	70 81       	ld	r23, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3172:	47 2f       	mov	r20, r23
    3174:	50 e0       	ldi	r21, 0x00	; 0
    3176:	82 81       	ldd	r24, Z+2	; 0x02
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	01 97       	sbiw	r24, 0x01	; 1
    317c:	48 17       	cp	r20, r24
    317e:	59 07       	cpc	r21, r25
    3180:	19 f0       	breq	.+6      	; 0x3188 <main+0x1750>
    3182:	81 e0       	ldi	r24, 0x01	; 1
    3184:	87 0f       	add	r24, r23
    3186:	01 c0       	rjmp	.+2      	; 0x318a <main+0x1752>
    3188:	86 2f       	mov	r24, r22
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    318a:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    318c:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    318e:	82 16       	cp	r8, r18
    3190:	93 06       	cpc	r9, r19
    3192:	d9 f6       	brne	.-74     	; 0x314a <main+0x1712>
    3194:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <main+0x396>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    3198:	6e e1       	ldi	r22, 0x1E	; 30
    319a:	70 e0       	ldi	r23, 0x00	; 0
    319c:	c7 01       	movw	r24, r14
    319e:	0e 94 82 21 	call	0x4304	; 0x4304 <strnlen>
    31a2:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    31a4:	8b 30       	cpi	r24, 0x0B	; 11
    31a6:	91 05       	cpc	r25, r1
    31a8:	64 f0       	brlt	.+24     	; 0x31c2 <main+0x178a>
    31aa:	ea ee       	ldi	r30, 0xEA	; 234
    31ac:	f4 e0       	ldi	r31, 0x04	; 4
    31ae:	de 01       	movw	r26, r28
    31b0:	a6 5a       	subi	r26, 0xA6	; 166
    31b2:	bf 4f       	sbci	r27, 0xFF	; 255
    31b4:	80 52       	subi	r24, 0x20	; 32
    31b6:	9b 4f       	sbci	r25, 0xFB	; 251
	{
		param[idx] = stringToParse[i];
    31b8:	21 91       	ld	r18, Z+
    31ba:	2d 93       	st	X+, r18
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    31bc:	e8 17       	cp	r30, r24
    31be:	f9 07       	cpc	r31, r25
    31c0:	d9 f7       	brne	.-10     	; 0x31b8 <main+0x1780>
		printStatus("");
		break;
		
		case 352:	// SetIgainCh2
		ParamParse(rx_string, param);
		ch2.Igain = atof(param);
    31c2:	ce 01       	movw	r24, r28
    31c4:	86 5a       	subi	r24, 0xA6	; 166
    31c6:	9f 4f       	sbci	r25, 0xFF	; 255
    31c8:	0e 94 1d 21 	call	0x423a	; 0x423a <atof>
    31cc:	60 93 cb 02 	sts	0x02CB, r22
    31d0:	70 93 cc 02 	sts	0x02CC, r23
    31d4:	80 93 cd 02 	sts	0x02CD, r24
    31d8:	90 93 ce 02 	sts	0x02CE, r25
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    31dc:	81 e2       	ldi	r24, 0x21	; 33
    31de:	8a ab       	std	Y+50, r24	; 0x32
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    31e0:	f7 01       	movw	r30, r14
    31e2:	81 81       	ldd	r24, Z+1	; 0x01
    31e4:	8b ab       	std	Y+51, r24	; 0x33
    31e6:	82 81       	ldd	r24, Z+2	; 0x02
    31e8:	8c ab       	std	Y+52, r24	; 0x34
    31ea:	83 81       	ldd	r24, Z+3	; 0x03
    31ec:	8d ab       	std	Y+53, r24	; 0x35
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    31ee:	1e aa       	std	Y+54, r1	; 0x36
    31f0:	1f aa       	std	Y+55, r1	; 0x37
    31f2:	18 ae       	std	Y+56, r1	; 0x38
    31f4:	4e 01       	movw	r8, r28
    31f6:	f2 e3       	ldi	r31, 0x32	; 50
    31f8:	8f 0e       	add	r8, r31
    31fa:	91 1c       	adc	r9, r1
    31fc:	be 01       	movw	r22, r28
    31fe:	6a 5c       	subi	r22, 0xCA	; 202
    3200:	7f 4f       	sbci	r23, 0xFF	; 255
    3202:	f4 01       	movw	r30, r8
    3204:	80 e0       	ldi	r24, 0x00	; 0
    3206:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    3208:	a8 e0       	ldi	r26, 0x08	; 8
    320a:	71 2c       	mov	r7, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    320c:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    320e:	29 2f       	mov	r18, r25
    3210:	33 27       	eor	r19, r19
    3212:	27 fd       	sbrc	r18, 7
    3214:	3a 95       	dec	r19
    3216:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    3218:	32 2f       	mov	r19, r18
    321a:	22 27       	eor	r18, r18
    321c:	4a 2f       	mov	r20, r26
    321e:	57 2d       	mov	r21, r7
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    3220:	33 23       	and	r19, r19
    3222:	3c f4       	brge	.+14     	; 0x3232 <main+0x17fa>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    3224:	22 0f       	add	r18, r18
    3226:	33 1f       	adc	r19, r19
    3228:	b1 e2       	ldi	r27, 0x21	; 33
    322a:	2b 27       	eor	r18, r27
    322c:	b0 e1       	ldi	r27, 0x10	; 16
    322e:	3b 27       	eor	r19, r27
    3230:	02 c0       	rjmp	.+4      	; 0x3236 <main+0x17fe>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    3232:	22 0f       	add	r18, r18
    3234:	33 1f       	adc	r19, r19
    3236:	41 50       	subi	r20, 0x01	; 1
    3238:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    323a:	91 f7       	brne	.-28     	; 0x3220 <main+0x17e8>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    323c:	98 2f       	mov	r25, r24
    323e:	88 27       	eor	r24, r24
    3240:	82 27       	eor	r24, r18
    3242:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    3244:	e6 17       	cp	r30, r22
    3246:	f7 07       	cpc	r31, r23
    3248:	09 f7       	brne	.-62     	; 0x320c <main+0x17d4>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    324a:	3c 01       	movw	r6, r24
    324c:	40 e1       	ldi	r20, 0x10	; 16
    324e:	60 e1       	ldi	r22, 0x10	; 16
    3250:	74 e0       	ldi	r23, 0x04	; 4
    3252:	0e 94 97 21 	call	0x432e	; 0x432e <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    3256:	80 e1       	ldi	r24, 0x10	; 16
    3258:	94 e0       	ldi	r25, 0x04	; 4
    325a:	0e 94 8d 21 	call	0x431a	; 0x431a <strupr>
	if(crcXmodem < 0x10)
    325e:	e0 e1       	ldi	r30, 0x10	; 16
    3260:	6e 16       	cp	r6, r30
    3262:	71 04       	cpc	r7, r1
    3264:	38 f4       	brcc	.+14     	; 0x3274 <main+0x183c>
	{
		tx_string[cnt+4] = crc[0];
    3266:	80 91 10 04 	lds	r24, 0x0410
    326a:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = '0';
    326c:	80 e3       	ldi	r24, 0x30	; 48
    326e:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = '0';
    3270:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';
    3272:	8e ab       	std	Y+54, r24	; 0x36
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    3274:	c3 01       	movw	r24, r6
    3276:	40 97       	sbiw	r24, 0x10	; 16
    3278:	80 3f       	cpi	r24, 0xF0	; 240
    327a:	91 05       	cpc	r25, r1
    327c:	48 f4       	brcc	.+18     	; 0x3290 <main+0x1858>
	{
		tx_string[cnt+4] = crc[1];
    327e:	e0 e1       	ldi	r30, 0x10	; 16
    3280:	f4 e0       	ldi	r31, 0x04	; 4
    3282:	81 81       	ldd	r24, Z+1	; 0x01
    3284:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = crc[0];
    3286:	80 81       	ld	r24, Z
    3288:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = '0';
    328a:	80 e3       	ldi	r24, 0x30	; 48
    328c:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';		
    328e:	8e ab       	std	Y+54, r24	; 0x36
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    3290:	c3 01       	movw	r24, r6
    3292:	9a 95       	dec	r25
    3294:	81 15       	cp	r24, r1
    3296:	9f 40       	sbci	r25, 0x0F	; 15
    3298:	50 f4       	brcc	.+20     	; 0x32ae <main+0x1876>
	{
		tx_string[cnt+4] = crc[2];
    329a:	e0 e1       	ldi	r30, 0x10	; 16
    329c:	f4 e0       	ldi	r31, 0x04	; 4
    329e:	82 81       	ldd	r24, Z+2	; 0x02
    32a0:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = crc[1];
    32a2:	81 81       	ldd	r24, Z+1	; 0x01
    32a4:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = crc[0];
    32a6:	80 81       	ld	r24, Z
    32a8:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';		
    32aa:	80 e3       	ldi	r24, 0x30	; 48
    32ac:	8e ab       	std	Y+54, r24	; 0x36
	}
	if(crcXmodem >= 0x1000)
    32ae:	61 14       	cp	r6, r1
    32b0:	20 e1       	ldi	r18, 0x10	; 16
    32b2:	72 06       	cpc	r7, r18
    32b4:	50 f0       	brcs	.+20     	; 0x32ca <main+0x1892>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    32b6:	e0 e1       	ldi	r30, 0x10	; 16
    32b8:	f4 e0       	ldi	r31, 0x04	; 4
    32ba:	80 81       	ld	r24, Z
    32bc:	8e ab       	std	Y+54, r24	; 0x36
		tx_string[cnt+2] = crc[1];
    32be:	81 81       	ldd	r24, Z+1	; 0x01
    32c0:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+3] = crc[2];
    32c2:	82 81       	ldd	r24, Z+2	; 0x02
    32c4:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+4] = crc[3];
    32c6:	83 81       	ldd	r24, Z+3	; 0x03
    32c8:	89 af       	std	Y+57, r24	; 0x39
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    32ca:	8d e0       	ldi	r24, 0x0D	; 13
    32cc:	8a af       	std	Y+58, r24	; 0x3a
    32ce:	9e 01       	movw	r18, r28
    32d0:	25 5c       	subi	r18, 0xC5	; 197
    32d2:	3f 4f       	sbci	r19, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    32d4:	ee ef       	ldi	r30, 0xFE	; 254
    32d6:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    32d8:	0f 2e       	mov	r0, r31
    32da:	f1 ec       	ldi	r31, 0xC1	; 193
    32dc:	6f 2e       	mov	r6, r31
    32de:	71 2c       	mov	r7, r1
    32e0:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    32e2:	60 e0       	ldi	r22, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    32e4:	d4 01       	movw	r26, r8
    32e6:	4d 91       	ld	r20, X+
    32e8:	4d 01       	movw	r8, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    32ea:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    32ec:	91 81       	ldd	r25, Z+1	; 0x01
    32ee:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    32f0:	98 13       	cpse	r25, r24
    32f2:	04 c0       	rjmp	.+8      	; 0x32fc <main+0x18c4>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    32f4:	d3 01       	movw	r26, r6
    32f6:	8c 91       	ld	r24, X
    32f8:	80 62       	ori	r24, 0x20	; 32
    32fa:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    32fc:	50 81       	ld	r21, Z
    32fe:	83 81       	ldd	r24, Z+3	; 0x03
    3300:	94 81       	ldd	r25, Z+4	; 0x04
    3302:	85 0f       	add	r24, r21
    3304:	91 1d       	adc	r25, r1
    3306:	dc 01       	movw	r26, r24
    3308:	4c 93       	st	X, r20
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    330a:	70 81       	ld	r23, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    330c:	47 2f       	mov	r20, r23
    330e:	50 e0       	ldi	r21, 0x00	; 0
    3310:	82 81       	ldd	r24, Z+2	; 0x02
    3312:	90 e0       	ldi	r25, 0x00	; 0
    3314:	01 97       	sbiw	r24, 0x01	; 1
    3316:	48 17       	cp	r20, r24
    3318:	59 07       	cpc	r21, r25
    331a:	19 f0       	breq	.+6      	; 0x3322 <main+0x18ea>
    331c:	81 e0       	ldi	r24, 0x01	; 1
    331e:	87 0f       	add	r24, r23
    3320:	01 c0       	rjmp	.+2      	; 0x3324 <main+0x18ec>
    3322:	86 2f       	mov	r24, r22
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    3324:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    3326:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    3328:	82 16       	cp	r8, r18
    332a:	93 06       	cpc	r9, r19
    332c:	d9 f6       	brne	.-74     	; 0x32e4 <main+0x18ac>
    332e:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <main+0x396>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    3332:	6e e1       	ldi	r22, 0x1E	; 30
    3334:	70 e0       	ldi	r23, 0x00	; 0
    3336:	c7 01       	movw	r24, r14
    3338:	e5 d7       	rcall	.+4042   	; 0x4304 <strnlen>
    333a:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    333c:	8b 30       	cpi	r24, 0x0B	; 11
    333e:	91 05       	cpc	r25, r1
    3340:	64 f0       	brlt	.+24     	; 0x335a <main+0x1922>
    3342:	ea ee       	ldi	r30, 0xEA	; 234
    3344:	f4 e0       	ldi	r31, 0x04	; 4
    3346:	de 01       	movw	r26, r28
    3348:	a6 5a       	subi	r26, 0xA6	; 166
    334a:	bf 4f       	sbci	r27, 0xFF	; 255
    334c:	80 52       	subi	r24, 0x20	; 32
    334e:	9b 4f       	sbci	r25, 0xFB	; 251
	{
		param[idx] = stringToParse[i];
    3350:	21 91       	ld	r18, Z+
    3352:	2d 93       	st	X+, r18
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    3354:	e8 17       	cp	r30, r24
    3356:	f9 07       	cpc	r31, r25
    3358:	d9 f7       	brne	.-10     	; 0x3350 <main+0x1918>
		printStatus("");
		break;
		
		case 353:	// Setch2.Dgain
		ParamParse(rx_string, param);
		ch2.Dgain = atof(param);
    335a:	ce 01       	movw	r24, r28
    335c:	86 5a       	subi	r24, 0xA6	; 166
    335e:	9f 4f       	sbci	r25, 0xFF	; 255
    3360:	6c d7       	rcall	.+3800   	; 0x423a <atof>
    3362:	60 93 cf 02 	sts	0x02CF, r22
    3366:	70 93 d0 02 	sts	0x02D0, r23
    336a:	80 93 d1 02 	sts	0x02D1, r24
    336e:	90 93 d2 02 	sts	0x02D2, r25
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    3372:	81 e2       	ldi	r24, 0x21	; 33
    3374:	8a ab       	std	Y+50, r24	; 0x32
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    3376:	f7 01       	movw	r30, r14
    3378:	81 81       	ldd	r24, Z+1	; 0x01
    337a:	8b ab       	std	Y+51, r24	; 0x33
    337c:	82 81       	ldd	r24, Z+2	; 0x02
    337e:	8c ab       	std	Y+52, r24	; 0x34
    3380:	83 81       	ldd	r24, Z+3	; 0x03
    3382:	8d ab       	std	Y+53, r24	; 0x35
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    3384:	1e aa       	std	Y+54, r1	; 0x36
    3386:	1f aa       	std	Y+55, r1	; 0x37
    3388:	18 ae       	std	Y+56, r1	; 0x38
    338a:	4e 01       	movw	r8, r28
    338c:	f2 e3       	ldi	r31, 0x32	; 50
    338e:	8f 0e       	add	r8, r31
    3390:	91 1c       	adc	r9, r1
    3392:	be 01       	movw	r22, r28
    3394:	6a 5c       	subi	r22, 0xCA	; 202
    3396:	7f 4f       	sbci	r23, 0xFF	; 255
    3398:	f4 01       	movw	r30, r8
    339a:	80 e0       	ldi	r24, 0x00	; 0
    339c:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    339e:	a8 e0       	ldi	r26, 0x08	; 8
    33a0:	71 2c       	mov	r7, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    33a2:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    33a4:	29 2f       	mov	r18, r25
    33a6:	33 27       	eor	r19, r19
    33a8:	27 fd       	sbrc	r18, 7
    33aa:	3a 95       	dec	r19
    33ac:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    33ae:	32 2f       	mov	r19, r18
    33b0:	22 27       	eor	r18, r18
    33b2:	4a 2f       	mov	r20, r26
    33b4:	57 2d       	mov	r21, r7
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    33b6:	33 23       	and	r19, r19
    33b8:	3c f4       	brge	.+14     	; 0x33c8 <main+0x1990>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    33ba:	22 0f       	add	r18, r18
    33bc:	33 1f       	adc	r19, r19
    33be:	b1 e2       	ldi	r27, 0x21	; 33
    33c0:	2b 27       	eor	r18, r27
    33c2:	b0 e1       	ldi	r27, 0x10	; 16
    33c4:	3b 27       	eor	r19, r27
    33c6:	02 c0       	rjmp	.+4      	; 0x33cc <main+0x1994>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    33c8:	22 0f       	add	r18, r18
    33ca:	33 1f       	adc	r19, r19
    33cc:	41 50       	subi	r20, 0x01	; 1
    33ce:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    33d0:	91 f7       	brne	.-28     	; 0x33b6 <main+0x197e>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    33d2:	98 2f       	mov	r25, r24
    33d4:	88 27       	eor	r24, r24
    33d6:	82 27       	eor	r24, r18
    33d8:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    33da:	e6 17       	cp	r30, r22
    33dc:	f7 07       	cpc	r31, r23
    33de:	09 f7       	brne	.-62     	; 0x33a2 <main+0x196a>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    33e0:	3c 01       	movw	r6, r24
    33e2:	40 e1       	ldi	r20, 0x10	; 16
    33e4:	60 e1       	ldi	r22, 0x10	; 16
    33e6:	74 e0       	ldi	r23, 0x04	; 4
    33e8:	a2 d7       	rcall	.+3908   	; 0x432e <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    33ea:	80 e1       	ldi	r24, 0x10	; 16
    33ec:	94 e0       	ldi	r25, 0x04	; 4
    33ee:	95 d7       	rcall	.+3882   	; 0x431a <strupr>
	if(crcXmodem < 0x10)
    33f0:	e0 e1       	ldi	r30, 0x10	; 16
    33f2:	6e 16       	cp	r6, r30
    33f4:	71 04       	cpc	r7, r1
    33f6:	38 f4       	brcc	.+14     	; 0x3406 <main+0x19ce>
	{
		tx_string[cnt+4] = crc[0];
    33f8:	80 91 10 04 	lds	r24, 0x0410
    33fc:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = '0';
    33fe:	80 e3       	ldi	r24, 0x30	; 48
    3400:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = '0';
    3402:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';
    3404:	8e ab       	std	Y+54, r24	; 0x36
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    3406:	c3 01       	movw	r24, r6
    3408:	40 97       	sbiw	r24, 0x10	; 16
    340a:	80 3f       	cpi	r24, 0xF0	; 240
    340c:	91 05       	cpc	r25, r1
    340e:	48 f4       	brcc	.+18     	; 0x3422 <main+0x19ea>
	{
		tx_string[cnt+4] = crc[1];
    3410:	e0 e1       	ldi	r30, 0x10	; 16
    3412:	f4 e0       	ldi	r31, 0x04	; 4
    3414:	81 81       	ldd	r24, Z+1	; 0x01
    3416:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = crc[0];
    3418:	80 81       	ld	r24, Z
    341a:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = '0';
    341c:	80 e3       	ldi	r24, 0x30	; 48
    341e:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';		
    3420:	8e ab       	std	Y+54, r24	; 0x36
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    3422:	c3 01       	movw	r24, r6
    3424:	9a 95       	dec	r25
    3426:	81 15       	cp	r24, r1
    3428:	9f 40       	sbci	r25, 0x0F	; 15
    342a:	50 f4       	brcc	.+20     	; 0x3440 <main+0x1a08>
	{
		tx_string[cnt+4] = crc[2];
    342c:	e0 e1       	ldi	r30, 0x10	; 16
    342e:	f4 e0       	ldi	r31, 0x04	; 4
    3430:	82 81       	ldd	r24, Z+2	; 0x02
    3432:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = crc[1];
    3434:	81 81       	ldd	r24, Z+1	; 0x01
    3436:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = crc[0];
    3438:	80 81       	ld	r24, Z
    343a:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';		
    343c:	80 e3       	ldi	r24, 0x30	; 48
    343e:	8e ab       	std	Y+54, r24	; 0x36
	}
	if(crcXmodem >= 0x1000)
    3440:	61 14       	cp	r6, r1
    3442:	20 e1       	ldi	r18, 0x10	; 16
    3444:	72 06       	cpc	r7, r18
    3446:	50 f0       	brcs	.+20     	; 0x345c <main+0x1a24>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    3448:	e0 e1       	ldi	r30, 0x10	; 16
    344a:	f4 e0       	ldi	r31, 0x04	; 4
    344c:	80 81       	ld	r24, Z
    344e:	8e ab       	std	Y+54, r24	; 0x36
		tx_string[cnt+2] = crc[1];
    3450:	81 81       	ldd	r24, Z+1	; 0x01
    3452:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+3] = crc[2];
    3454:	82 81       	ldd	r24, Z+2	; 0x02
    3456:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+4] = crc[3];
    3458:	83 81       	ldd	r24, Z+3	; 0x03
    345a:	89 af       	std	Y+57, r24	; 0x39
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    345c:	8d e0       	ldi	r24, 0x0D	; 13
    345e:	8a af       	std	Y+58, r24	; 0x3a
    3460:	9e 01       	movw	r18, r28
    3462:	25 5c       	subi	r18, 0xC5	; 197
    3464:	3f 4f       	sbci	r19, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3466:	ee ef       	ldi	r30, 0xFE	; 254
    3468:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    346a:	0f 2e       	mov	r0, r31
    346c:	f1 ec       	ldi	r31, 0xC1	; 193
    346e:	6f 2e       	mov	r6, r31
    3470:	71 2c       	mov	r7, r1
    3472:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3474:	60 e0       	ldi	r22, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    3476:	d4 01       	movw	r26, r8
    3478:	4d 91       	ld	r20, X+
    347a:	4d 01       	movw	r8, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    347c:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    347e:	91 81       	ldd	r25, Z+1	; 0x01
    3480:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    3482:	98 13       	cpse	r25, r24
    3484:	04 c0       	rjmp	.+8      	; 0x348e <main+0x1a56>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3486:	d3 01       	movw	r26, r6
    3488:	8c 91       	ld	r24, X
    348a:	80 62       	ori	r24, 0x20	; 32
    348c:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    348e:	50 81       	ld	r21, Z
    3490:	83 81       	ldd	r24, Z+3	; 0x03
    3492:	94 81       	ldd	r25, Z+4	; 0x04
    3494:	85 0f       	add	r24, r21
    3496:	91 1d       	adc	r25, r1
    3498:	dc 01       	movw	r26, r24
    349a:	4c 93       	st	X, r20
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    349c:	70 81       	ld	r23, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    349e:	47 2f       	mov	r20, r23
    34a0:	50 e0       	ldi	r21, 0x00	; 0
    34a2:	82 81       	ldd	r24, Z+2	; 0x02
    34a4:	90 e0       	ldi	r25, 0x00	; 0
    34a6:	01 97       	sbiw	r24, 0x01	; 1
    34a8:	48 17       	cp	r20, r24
    34aa:	59 07       	cpc	r21, r25
    34ac:	19 f0       	breq	.+6      	; 0x34b4 <main+0x1a7c>
    34ae:	81 e0       	ldi	r24, 0x01	; 1
    34b0:	87 0f       	add	r24, r23
    34b2:	01 c0       	rjmp	.+2      	; 0x34b6 <main+0x1a7e>
    34b4:	86 2f       	mov	r24, r22
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    34b6:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    34b8:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    34ba:	82 16       	cp	r8, r18
    34bc:	93 06       	cpc	r9, r19
    34be:	d9 f6       	brne	.-74     	; 0x3476 <main+0x1a3e>
    34c0:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <main+0x396>
		ch2.Dgain = atof(param);
		printStatus("");
		break;
		
		case 354:	// Set heater on/off ch2
		if(rx_string[10] == '1')
    34c4:	f7 01       	movw	r30, r14
    34c6:	82 85       	ldd	r24, Z+10	; 0x0a
    34c8:	81 33       	cpi	r24, 0x31	; 49
    34ca:	09 f0       	breq	.+2      	; 0x34ce <main+0x1a96>
    34cc:	af c0       	rjmp	.+350    	; 0x362c <main+0x1bf4>
		{
			ch2.heaterEnable = true;
    34ce:	81 e0       	ldi	r24, 0x01	; 1
    34d0:	80 93 0d 03 	sts	0x030D, r24
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    34d4:	81 e2       	ldi	r24, 0x21	; 33
    34d6:	8a ab       	std	Y+50, r24	; 0x32
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    34d8:	81 81       	ldd	r24, Z+1	; 0x01
    34da:	8b ab       	std	Y+51, r24	; 0x33
    34dc:	82 81       	ldd	r24, Z+2	; 0x02
    34de:	8c ab       	std	Y+52, r24	; 0x34
    34e0:	83 81       	ldd	r24, Z+3	; 0x03
    34e2:	8d ab       	std	Y+53, r24	; 0x35
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    34e4:	8f e4       	ldi	r24, 0x4F	; 79
    34e6:	8e ab       	std	Y+54, r24	; 0x36
    34e8:	8e e4       	ldi	r24, 0x4E	; 78
    34ea:	8f ab       	std	Y+55, r24	; 0x37
    34ec:	18 ae       	std	Y+56, r1	; 0x38
    34ee:	19 ae       	std	Y+57, r1	; 0x39
    34f0:	1a ae       	std	Y+58, r1	; 0x3a
    34f2:	4e 01       	movw	r8, r28
    34f4:	f2 e3       	ldi	r31, 0x32	; 50
    34f6:	8f 0e       	add	r8, r31
    34f8:	91 1c       	adc	r9, r1
    34fa:	be 01       	movw	r22, r28
    34fc:	68 5c       	subi	r22, 0xC8	; 200
    34fe:	7f 4f       	sbci	r23, 0xFF	; 255
    3500:	f4 01       	movw	r30, r8
    3502:	80 e0       	ldi	r24, 0x00	; 0
    3504:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    3506:	a8 e0       	ldi	r26, 0x08	; 8
    3508:	71 2c       	mov	r7, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    350a:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    350c:	29 2f       	mov	r18, r25
    350e:	33 27       	eor	r19, r19
    3510:	27 fd       	sbrc	r18, 7
    3512:	3a 95       	dec	r19
    3514:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    3516:	32 2f       	mov	r19, r18
    3518:	22 27       	eor	r18, r18
    351a:	4a 2f       	mov	r20, r26
    351c:	57 2d       	mov	r21, r7
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    351e:	33 23       	and	r19, r19
    3520:	3c f4       	brge	.+14     	; 0x3530 <main+0x1af8>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    3522:	22 0f       	add	r18, r18
    3524:	33 1f       	adc	r19, r19
    3526:	b1 e2       	ldi	r27, 0x21	; 33
    3528:	2b 27       	eor	r18, r27
    352a:	b0 e1       	ldi	r27, 0x10	; 16
    352c:	3b 27       	eor	r19, r27
    352e:	02 c0       	rjmp	.+4      	; 0x3534 <main+0x1afc>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    3530:	22 0f       	add	r18, r18
    3532:	33 1f       	adc	r19, r19
    3534:	41 50       	subi	r20, 0x01	; 1
    3536:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    3538:	91 f7       	brne	.-28     	; 0x351e <main+0x1ae6>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    353a:	98 2f       	mov	r25, r24
    353c:	88 27       	eor	r24, r24
    353e:	82 27       	eor	r24, r18
    3540:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    3542:	e6 17       	cp	r30, r22
    3544:	f7 07       	cpc	r31, r23
    3546:	09 f7       	brne	.-62     	; 0x350a <main+0x1ad2>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    3548:	3c 01       	movw	r6, r24
    354a:	40 e1       	ldi	r20, 0x10	; 16
    354c:	60 e1       	ldi	r22, 0x10	; 16
    354e:	74 e0       	ldi	r23, 0x04	; 4
    3550:	ee d6       	rcall	.+3548   	; 0x432e <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    3552:	80 e1       	ldi	r24, 0x10	; 16
    3554:	94 e0       	ldi	r25, 0x04	; 4
    3556:	e1 d6       	rcall	.+3522   	; 0x431a <strupr>
	if(crcXmodem < 0x10)
    3558:	e0 e1       	ldi	r30, 0x10	; 16
    355a:	6e 16       	cp	r6, r30
    355c:	71 04       	cpc	r7, r1
    355e:	38 f4       	brcc	.+14     	; 0x356e <main+0x1b36>
	{
		tx_string[cnt+4] = crc[0];
    3560:	80 91 10 04 	lds	r24, 0x0410
    3564:	8b af       	std	Y+59, r24	; 0x3b
		tx_string[cnt+3] = '0';
    3566:	80 e3       	ldi	r24, 0x30	; 48
    3568:	8a af       	std	Y+58, r24	; 0x3a
		tx_string[cnt+2] = '0';
    356a:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+1] = '0';
    356c:	88 af       	std	Y+56, r24	; 0x38
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    356e:	c3 01       	movw	r24, r6
    3570:	40 97       	sbiw	r24, 0x10	; 16
    3572:	80 3f       	cpi	r24, 0xF0	; 240
    3574:	91 05       	cpc	r25, r1
    3576:	48 f4       	brcc	.+18     	; 0x358a <main+0x1b52>
	{
		tx_string[cnt+4] = crc[1];
    3578:	e0 e1       	ldi	r30, 0x10	; 16
    357a:	f4 e0       	ldi	r31, 0x04	; 4
    357c:	81 81       	ldd	r24, Z+1	; 0x01
    357e:	8b af       	std	Y+59, r24	; 0x3b
		tx_string[cnt+3] = crc[0];
    3580:	80 81       	ld	r24, Z
    3582:	8a af       	std	Y+58, r24	; 0x3a
		tx_string[cnt+2] = '0';
    3584:	80 e3       	ldi	r24, 0x30	; 48
    3586:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+1] = '0';		
    3588:	88 af       	std	Y+56, r24	; 0x38
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    358a:	c3 01       	movw	r24, r6
    358c:	9a 95       	dec	r25
    358e:	81 15       	cp	r24, r1
    3590:	9f 40       	sbci	r25, 0x0F	; 15
    3592:	50 f4       	brcc	.+20     	; 0x35a8 <main+0x1b70>
	{
		tx_string[cnt+4] = crc[2];
    3594:	e0 e1       	ldi	r30, 0x10	; 16
    3596:	f4 e0       	ldi	r31, 0x04	; 4
    3598:	82 81       	ldd	r24, Z+2	; 0x02
    359a:	8b af       	std	Y+59, r24	; 0x3b
		tx_string[cnt+3] = crc[1];
    359c:	81 81       	ldd	r24, Z+1	; 0x01
    359e:	8a af       	std	Y+58, r24	; 0x3a
		tx_string[cnt+2] = crc[0];
    35a0:	80 81       	ld	r24, Z
    35a2:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+1] = '0';		
    35a4:	80 e3       	ldi	r24, 0x30	; 48
    35a6:	88 af       	std	Y+56, r24	; 0x38
	}
	if(crcXmodem >= 0x1000)
    35a8:	61 14       	cp	r6, r1
    35aa:	20 e1       	ldi	r18, 0x10	; 16
    35ac:	72 06       	cpc	r7, r18
    35ae:	50 f0       	brcs	.+20     	; 0x35c4 <main+0x1b8c>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    35b0:	e0 e1       	ldi	r30, 0x10	; 16
    35b2:	f4 e0       	ldi	r31, 0x04	; 4
    35b4:	80 81       	ld	r24, Z
    35b6:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = crc[1];
    35b8:	81 81       	ldd	r24, Z+1	; 0x01
    35ba:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = crc[2];
    35bc:	82 81       	ldd	r24, Z+2	; 0x02
    35be:	8a af       	std	Y+58, r24	; 0x3a
		tx_string[cnt+4] = crc[3];
    35c0:	83 81       	ldd	r24, Z+3	; 0x03
    35c2:	8b af       	std	Y+59, r24	; 0x3b
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    35c4:	8d e0       	ldi	r24, 0x0D	; 13
    35c6:	8c af       	std	Y+60, r24	; 0x3c
    35c8:	9e 01       	movw	r18, r28
    35ca:	23 5c       	subi	r18, 0xC3	; 195
    35cc:	3f 4f       	sbci	r19, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    35ce:	ee ef       	ldi	r30, 0xFE	; 254
    35d0:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    35d2:	0f 2e       	mov	r0, r31
    35d4:	f1 ec       	ldi	r31, 0xC1	; 193
    35d6:	6f 2e       	mov	r6, r31
    35d8:	71 2c       	mov	r7, r1
    35da:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    35dc:	60 e0       	ldi	r22, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    35de:	d4 01       	movw	r26, r8
    35e0:	4d 91       	ld	r20, X+
    35e2:	4d 01       	movw	r8, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    35e4:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    35e6:	91 81       	ldd	r25, Z+1	; 0x01
    35e8:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    35ea:	98 13       	cpse	r25, r24
    35ec:	04 c0       	rjmp	.+8      	; 0x35f6 <main+0x1bbe>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    35ee:	d3 01       	movw	r26, r6
    35f0:	8c 91       	ld	r24, X
    35f2:	80 62       	ori	r24, 0x20	; 32
    35f4:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    35f6:	50 81       	ld	r21, Z
    35f8:	83 81       	ldd	r24, Z+3	; 0x03
    35fa:	94 81       	ldd	r25, Z+4	; 0x04
    35fc:	85 0f       	add	r24, r21
    35fe:	91 1d       	adc	r25, r1
    3600:	dc 01       	movw	r26, r24
    3602:	4c 93       	st	X, r20
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    3604:	70 81       	ld	r23, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3606:	47 2f       	mov	r20, r23
    3608:	50 e0       	ldi	r21, 0x00	; 0
    360a:	82 81       	ldd	r24, Z+2	; 0x02
    360c:	90 e0       	ldi	r25, 0x00	; 0
    360e:	01 97       	sbiw	r24, 0x01	; 1
    3610:	48 17       	cp	r20, r24
    3612:	59 07       	cpc	r21, r25
    3614:	19 f0       	breq	.+6      	; 0x361c <main+0x1be4>
    3616:	81 e0       	ldi	r24, 0x01	; 1
    3618:	87 0f       	add	r24, r23
    361a:	01 c0       	rjmp	.+2      	; 0x361e <main+0x1be6>
    361c:	86 2f       	mov	r24, r22
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    361e:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    3620:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    3622:	82 16       	cp	r8, r18
    3624:	93 06       	cpc	r9, r19
    3626:	d9 f6       	brne	.-74     	; 0x35de <main+0x1ba6>
    3628:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <main+0x396>
		if(rx_string[10] == '1')
		{
			ch2.heaterEnable = true;
			printStatus("ON");
		}
		else if(rx_string[10] == '0')
    362c:	80 33       	cpi	r24, 0x30	; 48
    362e:	11 f0       	breq	.+4      	; 0x3634 <main+0x1bfc>
    3630:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <main+0x396>
		{
			ch2.heaterEnable = false;
    3634:	10 92 0d 03 	sts	0x030D, r1
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    3638:	81 e2       	ldi	r24, 0x21	; 33
    363a:	8a ab       	std	Y+50, r24	; 0x32
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    363c:	f7 01       	movw	r30, r14
    363e:	81 81       	ldd	r24, Z+1	; 0x01
    3640:	8b ab       	std	Y+51, r24	; 0x33
    3642:	82 81       	ldd	r24, Z+2	; 0x02
    3644:	8c ab       	std	Y+52, r24	; 0x34
    3646:	83 81       	ldd	r24, Z+3	; 0x03
    3648:	8d ab       	std	Y+53, r24	; 0x35
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    364a:	8f e4       	ldi	r24, 0x4F	; 79
    364c:	8e ab       	std	Y+54, r24	; 0x36
    364e:	86 e4       	ldi	r24, 0x46	; 70
    3650:	8f ab       	std	Y+55, r24	; 0x37
    3652:	88 af       	std	Y+56, r24	; 0x38
    3654:	19 ae       	std	Y+57, r1	; 0x39
    3656:	1a ae       	std	Y+58, r1	; 0x3a
    3658:	1b ae       	std	Y+59, r1	; 0x3b
    365a:	4e 01       	movw	r8, r28
    365c:	f2 e3       	ldi	r31, 0x32	; 50
    365e:	8f 0e       	add	r8, r31
    3660:	91 1c       	adc	r9, r1
    3662:	be 01       	movw	r22, r28
    3664:	67 5c       	subi	r22, 0xC7	; 199
    3666:	7f 4f       	sbci	r23, 0xFF	; 255
    3668:	f4 01       	movw	r30, r8
    366a:	80 e0       	ldi	r24, 0x00	; 0
    366c:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    366e:	a8 e0       	ldi	r26, 0x08	; 8
    3670:	71 2c       	mov	r7, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    3672:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    3674:	29 2f       	mov	r18, r25
    3676:	33 27       	eor	r19, r19
    3678:	27 fd       	sbrc	r18, 7
    367a:	3a 95       	dec	r19
    367c:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    367e:	32 2f       	mov	r19, r18
    3680:	22 27       	eor	r18, r18
    3682:	4a 2f       	mov	r20, r26
    3684:	57 2d       	mov	r21, r7
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    3686:	33 23       	and	r19, r19
    3688:	3c f4       	brge	.+14     	; 0x3698 <main+0x1c60>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    368a:	22 0f       	add	r18, r18
    368c:	33 1f       	adc	r19, r19
    368e:	b1 e2       	ldi	r27, 0x21	; 33
    3690:	2b 27       	eor	r18, r27
    3692:	b0 e1       	ldi	r27, 0x10	; 16
    3694:	3b 27       	eor	r19, r27
    3696:	02 c0       	rjmp	.+4      	; 0x369c <main+0x1c64>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    3698:	22 0f       	add	r18, r18
    369a:	33 1f       	adc	r19, r19
    369c:	41 50       	subi	r20, 0x01	; 1
    369e:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    36a0:	91 f7       	brne	.-28     	; 0x3686 <main+0x1c4e>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    36a2:	98 2f       	mov	r25, r24
    36a4:	88 27       	eor	r24, r24
    36a6:	82 27       	eor	r24, r18
    36a8:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    36aa:	e6 17       	cp	r30, r22
    36ac:	f7 07       	cpc	r31, r23
    36ae:	09 f7       	brne	.-62     	; 0x3672 <main+0x1c3a>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    36b0:	3c 01       	movw	r6, r24
    36b2:	40 e1       	ldi	r20, 0x10	; 16
    36b4:	60 e1       	ldi	r22, 0x10	; 16
    36b6:	74 e0       	ldi	r23, 0x04	; 4
    36b8:	3a d6       	rcall	.+3188   	; 0x432e <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    36ba:	80 e1       	ldi	r24, 0x10	; 16
    36bc:	94 e0       	ldi	r25, 0x04	; 4
    36be:	2d d6       	rcall	.+3162   	; 0x431a <strupr>
	if(crcXmodem < 0x10)
    36c0:	e0 e1       	ldi	r30, 0x10	; 16
    36c2:	6e 16       	cp	r6, r30
    36c4:	71 04       	cpc	r7, r1
    36c6:	38 f4       	brcc	.+14     	; 0x36d6 <main+0x1c9e>
	{
		tx_string[cnt+4] = crc[0];
    36c8:	80 91 10 04 	lds	r24, 0x0410
    36cc:	8c af       	std	Y+60, r24	; 0x3c
		tx_string[cnt+3] = '0';
    36ce:	80 e3       	ldi	r24, 0x30	; 48
    36d0:	8b af       	std	Y+59, r24	; 0x3b
		tx_string[cnt+2] = '0';
    36d2:	8a af       	std	Y+58, r24	; 0x3a
		tx_string[cnt+1] = '0';
    36d4:	89 af       	std	Y+57, r24	; 0x39
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    36d6:	c3 01       	movw	r24, r6
    36d8:	40 97       	sbiw	r24, 0x10	; 16
    36da:	80 3f       	cpi	r24, 0xF0	; 240
    36dc:	91 05       	cpc	r25, r1
    36de:	48 f4       	brcc	.+18     	; 0x36f2 <main+0x1cba>
	{
		tx_string[cnt+4] = crc[1];
    36e0:	e0 e1       	ldi	r30, 0x10	; 16
    36e2:	f4 e0       	ldi	r31, 0x04	; 4
    36e4:	81 81       	ldd	r24, Z+1	; 0x01
    36e6:	8c af       	std	Y+60, r24	; 0x3c
		tx_string[cnt+3] = crc[0];
    36e8:	80 81       	ld	r24, Z
    36ea:	8b af       	std	Y+59, r24	; 0x3b
		tx_string[cnt+2] = '0';
    36ec:	80 e3       	ldi	r24, 0x30	; 48
    36ee:	8a af       	std	Y+58, r24	; 0x3a
		tx_string[cnt+1] = '0';		
    36f0:	89 af       	std	Y+57, r24	; 0x39
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    36f2:	c3 01       	movw	r24, r6
    36f4:	9a 95       	dec	r25
    36f6:	81 15       	cp	r24, r1
    36f8:	9f 40       	sbci	r25, 0x0F	; 15
    36fa:	50 f4       	brcc	.+20     	; 0x3710 <main+0x1cd8>
	{
		tx_string[cnt+4] = crc[2];
    36fc:	e0 e1       	ldi	r30, 0x10	; 16
    36fe:	f4 e0       	ldi	r31, 0x04	; 4
    3700:	82 81       	ldd	r24, Z+2	; 0x02
    3702:	8c af       	std	Y+60, r24	; 0x3c
		tx_string[cnt+3] = crc[1];
    3704:	81 81       	ldd	r24, Z+1	; 0x01
    3706:	8b af       	std	Y+59, r24	; 0x3b
		tx_string[cnt+2] = crc[0];
    3708:	80 81       	ld	r24, Z
    370a:	8a af       	std	Y+58, r24	; 0x3a
		tx_string[cnt+1] = '0';		
    370c:	80 e3       	ldi	r24, 0x30	; 48
    370e:	89 af       	std	Y+57, r24	; 0x39
	}
	if(crcXmodem >= 0x1000)
    3710:	61 14       	cp	r6, r1
    3712:	20 e1       	ldi	r18, 0x10	; 16
    3714:	72 06       	cpc	r7, r18
    3716:	50 f0       	brcs	.+20     	; 0x372c <main+0x1cf4>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    3718:	e0 e1       	ldi	r30, 0x10	; 16
    371a:	f4 e0       	ldi	r31, 0x04	; 4
    371c:	80 81       	ld	r24, Z
    371e:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+2] = crc[1];
    3720:	81 81       	ldd	r24, Z+1	; 0x01
    3722:	8a af       	std	Y+58, r24	; 0x3a
		tx_string[cnt+3] = crc[2];
    3724:	82 81       	ldd	r24, Z+2	; 0x02
    3726:	8b af       	std	Y+59, r24	; 0x3b
		tx_string[cnt+4] = crc[3];
    3728:	83 81       	ldd	r24, Z+3	; 0x03
    372a:	8c af       	std	Y+60, r24	; 0x3c
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    372c:	8d e0       	ldi	r24, 0x0D	; 13
    372e:	8d af       	std	Y+61, r24	; 0x3d
    3730:	9e 01       	movw	r18, r28
    3732:	22 5c       	subi	r18, 0xC2	; 194
    3734:	3f 4f       	sbci	r19, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3736:	ee ef       	ldi	r30, 0xFE	; 254
    3738:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    373a:	0f 2e       	mov	r0, r31
    373c:	f1 ec       	ldi	r31, 0xC1	; 193
    373e:	6f 2e       	mov	r6, r31
    3740:	71 2c       	mov	r7, r1
    3742:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3744:	60 e0       	ldi	r22, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    3746:	d4 01       	movw	r26, r8
    3748:	4d 91       	ld	r20, X+
    374a:	4d 01       	movw	r8, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    374c:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    374e:	91 81       	ldd	r25, Z+1	; 0x01
    3750:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    3752:	98 13       	cpse	r25, r24
    3754:	04 c0       	rjmp	.+8      	; 0x375e <main+0x1d26>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3756:	d3 01       	movw	r26, r6
    3758:	8c 91       	ld	r24, X
    375a:	80 62       	ori	r24, 0x20	; 32
    375c:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    375e:	50 81       	ld	r21, Z
    3760:	83 81       	ldd	r24, Z+3	; 0x03
    3762:	94 81       	ldd	r25, Z+4	; 0x04
    3764:	85 0f       	add	r24, r21
    3766:	91 1d       	adc	r25, r1
    3768:	dc 01       	movw	r26, r24
    376a:	4c 93       	st	X, r20
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    376c:	70 81       	ld	r23, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    376e:	47 2f       	mov	r20, r23
    3770:	50 e0       	ldi	r21, 0x00	; 0
    3772:	82 81       	ldd	r24, Z+2	; 0x02
    3774:	90 e0       	ldi	r25, 0x00	; 0
    3776:	01 97       	sbiw	r24, 0x01	; 1
    3778:	48 17       	cp	r20, r24
    377a:	59 07       	cpc	r21, r25
    377c:	19 f0       	breq	.+6      	; 0x3784 <main+0x1d4c>
    377e:	81 e0       	ldi	r24, 0x01	; 1
    3780:	87 0f       	add	r24, r23
    3782:	01 c0       	rjmp	.+2      	; 0x3786 <main+0x1d4e>
    3784:	86 2f       	mov	r24, r22
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    3786:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    3788:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    378a:	82 16       	cp	r8, r18
    378c:	93 06       	cpc	r9, r19
    378e:	d9 f6       	brne	.-74     	; 0x3746 <main+0x1d0e>
    3790:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <main+0x396>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    3794:	6e e1       	ldi	r22, 0x1E	; 30
    3796:	70 e0       	ldi	r23, 0x00	; 0
    3798:	c7 01       	movw	r24, r14
    379a:	b4 d5       	rcall	.+2920   	; 0x4304 <strnlen>
    379c:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    379e:	8b 30       	cpi	r24, 0x0B	; 11
    37a0:	91 05       	cpc	r25, r1
    37a2:	64 f0       	brlt	.+24     	; 0x37bc <main+0x1d84>
    37a4:	ea ee       	ldi	r30, 0xEA	; 234
    37a6:	f4 e0       	ldi	r31, 0x04	; 4
    37a8:	de 01       	movw	r26, r28
    37aa:	a6 5a       	subi	r26, 0xA6	; 166
    37ac:	bf 4f       	sbci	r27, 0xFF	; 255
    37ae:	80 52       	subi	r24, 0x20	; 32
    37b0:	9b 4f       	sbci	r25, 0xFB	; 251
	{
		param[idx] = stringToParse[i];
    37b2:	21 91       	ld	r18, Z+
    37b4:	2d 93       	st	X+, r18
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    37b6:	e8 17       	cp	r30, r24
    37b8:	f9 07       	cpc	r31, r25
    37ba:	d9 f7       	brne	.-10     	; 0x37b2 <main+0x1d7a>
		break;
		
		// *** Channel 4 ***
		case 450:	// ch3.TempSetPoint
		ParamParse(rx_string, param);
		ch3.TempSetPoint = atof(param);
    37bc:	ce 01       	movw	r24, r28
    37be:	86 5a       	subi	r24, 0xA6	; 166
    37c0:	9f 4f       	sbci	r25, 0xFF	; 255
    37c2:	3b d5       	rcall	.+2678   	; 0x423a <atof>
    37c4:	60 93 46 01 	sts	0x0146, r22
    37c8:	70 93 47 01 	sts	0x0147, r23
    37cc:	80 93 48 01 	sts	0x0148, r24
    37d0:	90 93 49 01 	sts	0x0149, r25
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    37d4:	81 e2       	ldi	r24, 0x21	; 33
    37d6:	8a ab       	std	Y+50, r24	; 0x32
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    37d8:	f7 01       	movw	r30, r14
    37da:	81 81       	ldd	r24, Z+1	; 0x01
    37dc:	8b ab       	std	Y+51, r24	; 0x33
    37de:	82 81       	ldd	r24, Z+2	; 0x02
    37e0:	8c ab       	std	Y+52, r24	; 0x34
    37e2:	83 81       	ldd	r24, Z+3	; 0x03
    37e4:	8d ab       	std	Y+53, r24	; 0x35
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    37e6:	1e aa       	std	Y+54, r1	; 0x36
    37e8:	1f aa       	std	Y+55, r1	; 0x37
    37ea:	18 ae       	std	Y+56, r1	; 0x38
    37ec:	4e 01       	movw	r8, r28
    37ee:	f2 e3       	ldi	r31, 0x32	; 50
    37f0:	8f 0e       	add	r8, r31
    37f2:	91 1c       	adc	r9, r1
    37f4:	be 01       	movw	r22, r28
    37f6:	6a 5c       	subi	r22, 0xCA	; 202
    37f8:	7f 4f       	sbci	r23, 0xFF	; 255
    37fa:	f4 01       	movw	r30, r8
    37fc:	80 e0       	ldi	r24, 0x00	; 0
    37fe:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    3800:	a8 e0       	ldi	r26, 0x08	; 8
    3802:	71 2c       	mov	r7, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    3804:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    3806:	29 2f       	mov	r18, r25
    3808:	33 27       	eor	r19, r19
    380a:	27 fd       	sbrc	r18, 7
    380c:	3a 95       	dec	r19
    380e:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    3810:	32 2f       	mov	r19, r18
    3812:	22 27       	eor	r18, r18
    3814:	4a 2f       	mov	r20, r26
    3816:	57 2d       	mov	r21, r7
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    3818:	33 23       	and	r19, r19
    381a:	3c f4       	brge	.+14     	; 0x382a <main+0x1df2>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    381c:	22 0f       	add	r18, r18
    381e:	33 1f       	adc	r19, r19
    3820:	b1 e2       	ldi	r27, 0x21	; 33
    3822:	2b 27       	eor	r18, r27
    3824:	b0 e1       	ldi	r27, 0x10	; 16
    3826:	3b 27       	eor	r19, r27
    3828:	02 c0       	rjmp	.+4      	; 0x382e <main+0x1df6>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    382a:	22 0f       	add	r18, r18
    382c:	33 1f       	adc	r19, r19
    382e:	41 50       	subi	r20, 0x01	; 1
    3830:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    3832:	91 f7       	brne	.-28     	; 0x3818 <main+0x1de0>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    3834:	98 2f       	mov	r25, r24
    3836:	88 27       	eor	r24, r24
    3838:	82 27       	eor	r24, r18
    383a:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    383c:	e6 17       	cp	r30, r22
    383e:	f7 07       	cpc	r31, r23
    3840:	09 f7       	brne	.-62     	; 0x3804 <main+0x1dcc>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    3842:	3c 01       	movw	r6, r24
    3844:	40 e1       	ldi	r20, 0x10	; 16
    3846:	60 e1       	ldi	r22, 0x10	; 16
    3848:	74 e0       	ldi	r23, 0x04	; 4
    384a:	71 d5       	rcall	.+2786   	; 0x432e <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    384c:	80 e1       	ldi	r24, 0x10	; 16
    384e:	94 e0       	ldi	r25, 0x04	; 4
    3850:	64 d5       	rcall	.+2760   	; 0x431a <strupr>
	if(crcXmodem < 0x10)
    3852:	e0 e1       	ldi	r30, 0x10	; 16
    3854:	6e 16       	cp	r6, r30
    3856:	71 04       	cpc	r7, r1
    3858:	38 f4       	brcc	.+14     	; 0x3868 <main+0x1e30>
	{
		tx_string[cnt+4] = crc[0];
    385a:	80 91 10 04 	lds	r24, 0x0410
    385e:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = '0';
    3860:	80 e3       	ldi	r24, 0x30	; 48
    3862:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = '0';
    3864:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';
    3866:	8e ab       	std	Y+54, r24	; 0x36
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    3868:	c3 01       	movw	r24, r6
    386a:	40 97       	sbiw	r24, 0x10	; 16
    386c:	80 3f       	cpi	r24, 0xF0	; 240
    386e:	91 05       	cpc	r25, r1
    3870:	48 f4       	brcc	.+18     	; 0x3884 <main+0x1e4c>
	{
		tx_string[cnt+4] = crc[1];
    3872:	e0 e1       	ldi	r30, 0x10	; 16
    3874:	f4 e0       	ldi	r31, 0x04	; 4
    3876:	81 81       	ldd	r24, Z+1	; 0x01
    3878:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = crc[0];
    387a:	80 81       	ld	r24, Z
    387c:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = '0';
    387e:	80 e3       	ldi	r24, 0x30	; 48
    3880:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';		
    3882:	8e ab       	std	Y+54, r24	; 0x36
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    3884:	c3 01       	movw	r24, r6
    3886:	9a 95       	dec	r25
    3888:	81 15       	cp	r24, r1
    388a:	9f 40       	sbci	r25, 0x0F	; 15
    388c:	50 f4       	brcc	.+20     	; 0x38a2 <main+0x1e6a>
	{
		tx_string[cnt+4] = crc[2];
    388e:	e0 e1       	ldi	r30, 0x10	; 16
    3890:	f4 e0       	ldi	r31, 0x04	; 4
    3892:	82 81       	ldd	r24, Z+2	; 0x02
    3894:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = crc[1];
    3896:	81 81       	ldd	r24, Z+1	; 0x01
    3898:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = crc[0];
    389a:	80 81       	ld	r24, Z
    389c:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';		
    389e:	80 e3       	ldi	r24, 0x30	; 48
    38a0:	8e ab       	std	Y+54, r24	; 0x36
	}
	if(crcXmodem >= 0x1000)
    38a2:	61 14       	cp	r6, r1
    38a4:	20 e1       	ldi	r18, 0x10	; 16
    38a6:	72 06       	cpc	r7, r18
    38a8:	50 f0       	brcs	.+20     	; 0x38be <main+0x1e86>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    38aa:	e0 e1       	ldi	r30, 0x10	; 16
    38ac:	f4 e0       	ldi	r31, 0x04	; 4
    38ae:	80 81       	ld	r24, Z
    38b0:	8e ab       	std	Y+54, r24	; 0x36
		tx_string[cnt+2] = crc[1];
    38b2:	81 81       	ldd	r24, Z+1	; 0x01
    38b4:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+3] = crc[2];
    38b6:	82 81       	ldd	r24, Z+2	; 0x02
    38b8:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+4] = crc[3];
    38ba:	83 81       	ldd	r24, Z+3	; 0x03
    38bc:	89 af       	std	Y+57, r24	; 0x39
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    38be:	8d e0       	ldi	r24, 0x0D	; 13
    38c0:	8a af       	std	Y+58, r24	; 0x3a
    38c2:	9e 01       	movw	r18, r28
    38c4:	25 5c       	subi	r18, 0xC5	; 197
    38c6:	3f 4f       	sbci	r19, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    38c8:	ee ef       	ldi	r30, 0xFE	; 254
    38ca:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    38cc:	0f 2e       	mov	r0, r31
    38ce:	f1 ec       	ldi	r31, 0xC1	; 193
    38d0:	6f 2e       	mov	r6, r31
    38d2:	71 2c       	mov	r7, r1
    38d4:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    38d6:	60 e0       	ldi	r22, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    38d8:	d4 01       	movw	r26, r8
    38da:	4d 91       	ld	r20, X+
    38dc:	4d 01       	movw	r8, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    38de:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    38e0:	91 81       	ldd	r25, Z+1	; 0x01
    38e2:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    38e4:	98 13       	cpse	r25, r24
    38e6:	04 c0       	rjmp	.+8      	; 0x38f0 <main+0x1eb8>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    38e8:	d3 01       	movw	r26, r6
    38ea:	8c 91       	ld	r24, X
    38ec:	80 62       	ori	r24, 0x20	; 32
    38ee:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    38f0:	50 81       	ld	r21, Z
    38f2:	83 81       	ldd	r24, Z+3	; 0x03
    38f4:	94 81       	ldd	r25, Z+4	; 0x04
    38f6:	85 0f       	add	r24, r21
    38f8:	91 1d       	adc	r25, r1
    38fa:	dc 01       	movw	r26, r24
    38fc:	4c 93       	st	X, r20
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    38fe:	70 81       	ld	r23, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3900:	47 2f       	mov	r20, r23
    3902:	50 e0       	ldi	r21, 0x00	; 0
    3904:	82 81       	ldd	r24, Z+2	; 0x02
    3906:	90 e0       	ldi	r25, 0x00	; 0
    3908:	01 97       	sbiw	r24, 0x01	; 1
    390a:	48 17       	cp	r20, r24
    390c:	59 07       	cpc	r21, r25
    390e:	19 f0       	breq	.+6      	; 0x3916 <main+0x1ede>
    3910:	81 e0       	ldi	r24, 0x01	; 1
    3912:	87 0f       	add	r24, r23
    3914:	01 c0       	rjmp	.+2      	; 0x3918 <main+0x1ee0>
    3916:	86 2f       	mov	r24, r22
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    3918:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    391a:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    391c:	82 16       	cp	r8, r18
    391e:	93 06       	cpc	r9, r19
    3920:	d9 f6       	brne	.-74     	; 0x38d8 <main+0x1ea0>
    3922:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <main+0x396>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    3926:	6e e1       	ldi	r22, 0x1E	; 30
    3928:	70 e0       	ldi	r23, 0x00	; 0
    392a:	c7 01       	movw	r24, r14
    392c:	eb d4       	rcall	.+2518   	; 0x4304 <strnlen>
    392e:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    3930:	8b 30       	cpi	r24, 0x0B	; 11
    3932:	91 05       	cpc	r25, r1
    3934:	64 f0       	brlt	.+24     	; 0x394e <main+0x1f16>
    3936:	ea ee       	ldi	r30, 0xEA	; 234
    3938:	f4 e0       	ldi	r31, 0x04	; 4
    393a:	de 01       	movw	r26, r28
    393c:	a6 5a       	subi	r26, 0xA6	; 166
    393e:	bf 4f       	sbci	r27, 0xFF	; 255
    3940:	80 52       	subi	r24, 0x20	; 32
    3942:	9b 4f       	sbci	r25, 0xFB	; 251
	{
		param[idx] = stringToParse[i];
    3944:	21 91       	ld	r18, Z+
    3946:	2d 93       	st	X+, r18
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    3948:	e8 17       	cp	r30, r24
    394a:	f9 07       	cpc	r31, r25
    394c:	d9 f7       	brne	.-10     	; 0x3944 <main+0x1f0c>
		printStatus("");
		break;
		
		case 451:	// SetPgainCh3
		ParamParse(rx_string, param);
		ch3.Pgain = atof(param);
    394e:	ce 01       	movw	r24, r28
    3950:	86 5a       	subi	r24, 0xA6	; 166
    3952:	9f 4f       	sbci	r25, 0xFF	; 255
    3954:	72 d4       	rcall	.+2276   	; 0x423a <atof>
    3956:	60 93 62 01 	sts	0x0162, r22
    395a:	70 93 63 01 	sts	0x0163, r23
    395e:	80 93 64 01 	sts	0x0164, r24
    3962:	90 93 65 01 	sts	0x0165, r25
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    3966:	81 e2       	ldi	r24, 0x21	; 33
    3968:	8a ab       	std	Y+50, r24	; 0x32
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    396a:	f7 01       	movw	r30, r14
    396c:	81 81       	ldd	r24, Z+1	; 0x01
    396e:	8b ab       	std	Y+51, r24	; 0x33
    3970:	82 81       	ldd	r24, Z+2	; 0x02
    3972:	8c ab       	std	Y+52, r24	; 0x34
    3974:	83 81       	ldd	r24, Z+3	; 0x03
    3976:	8d ab       	std	Y+53, r24	; 0x35
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    3978:	1e aa       	std	Y+54, r1	; 0x36
    397a:	1f aa       	std	Y+55, r1	; 0x37
    397c:	18 ae       	std	Y+56, r1	; 0x38
    397e:	4e 01       	movw	r8, r28
    3980:	f2 e3       	ldi	r31, 0x32	; 50
    3982:	8f 0e       	add	r8, r31
    3984:	91 1c       	adc	r9, r1
    3986:	be 01       	movw	r22, r28
    3988:	6a 5c       	subi	r22, 0xCA	; 202
    398a:	7f 4f       	sbci	r23, 0xFF	; 255
    398c:	f4 01       	movw	r30, r8
    398e:	80 e0       	ldi	r24, 0x00	; 0
    3990:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    3992:	a8 e0       	ldi	r26, 0x08	; 8
    3994:	71 2c       	mov	r7, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    3996:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    3998:	29 2f       	mov	r18, r25
    399a:	33 27       	eor	r19, r19
    399c:	27 fd       	sbrc	r18, 7
    399e:	3a 95       	dec	r19
    39a0:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    39a2:	32 2f       	mov	r19, r18
    39a4:	22 27       	eor	r18, r18
    39a6:	4a 2f       	mov	r20, r26
    39a8:	57 2d       	mov	r21, r7
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    39aa:	33 23       	and	r19, r19
    39ac:	3c f4       	brge	.+14     	; 0x39bc <main+0x1f84>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    39ae:	22 0f       	add	r18, r18
    39b0:	33 1f       	adc	r19, r19
    39b2:	b1 e2       	ldi	r27, 0x21	; 33
    39b4:	2b 27       	eor	r18, r27
    39b6:	b0 e1       	ldi	r27, 0x10	; 16
    39b8:	3b 27       	eor	r19, r27
    39ba:	02 c0       	rjmp	.+4      	; 0x39c0 <main+0x1f88>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    39bc:	22 0f       	add	r18, r18
    39be:	33 1f       	adc	r19, r19
    39c0:	41 50       	subi	r20, 0x01	; 1
    39c2:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    39c4:	91 f7       	brne	.-28     	; 0x39aa <main+0x1f72>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    39c6:	98 2f       	mov	r25, r24
    39c8:	88 27       	eor	r24, r24
    39ca:	82 27       	eor	r24, r18
    39cc:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    39ce:	e6 17       	cp	r30, r22
    39d0:	f7 07       	cpc	r31, r23
    39d2:	09 f7       	brne	.-62     	; 0x3996 <main+0x1f5e>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    39d4:	3c 01       	movw	r6, r24
    39d6:	40 e1       	ldi	r20, 0x10	; 16
    39d8:	60 e1       	ldi	r22, 0x10	; 16
    39da:	74 e0       	ldi	r23, 0x04	; 4
    39dc:	a8 d4       	rcall	.+2384   	; 0x432e <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    39de:	80 e1       	ldi	r24, 0x10	; 16
    39e0:	94 e0       	ldi	r25, 0x04	; 4
    39e2:	9b d4       	rcall	.+2358   	; 0x431a <strupr>
	if(crcXmodem < 0x10)
    39e4:	e0 e1       	ldi	r30, 0x10	; 16
    39e6:	6e 16       	cp	r6, r30
    39e8:	71 04       	cpc	r7, r1
    39ea:	38 f4       	brcc	.+14     	; 0x39fa <main+0x1fc2>
	{
		tx_string[cnt+4] = crc[0];
    39ec:	80 91 10 04 	lds	r24, 0x0410
    39f0:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = '0';
    39f2:	80 e3       	ldi	r24, 0x30	; 48
    39f4:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = '0';
    39f6:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';
    39f8:	8e ab       	std	Y+54, r24	; 0x36
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    39fa:	c3 01       	movw	r24, r6
    39fc:	40 97       	sbiw	r24, 0x10	; 16
    39fe:	80 3f       	cpi	r24, 0xF0	; 240
    3a00:	91 05       	cpc	r25, r1
    3a02:	48 f4       	brcc	.+18     	; 0x3a16 <main+0x1fde>
	{
		tx_string[cnt+4] = crc[1];
    3a04:	e0 e1       	ldi	r30, 0x10	; 16
    3a06:	f4 e0       	ldi	r31, 0x04	; 4
    3a08:	81 81       	ldd	r24, Z+1	; 0x01
    3a0a:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = crc[0];
    3a0c:	80 81       	ld	r24, Z
    3a0e:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = '0';
    3a10:	80 e3       	ldi	r24, 0x30	; 48
    3a12:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';		
    3a14:	8e ab       	std	Y+54, r24	; 0x36
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    3a16:	c3 01       	movw	r24, r6
    3a18:	9a 95       	dec	r25
    3a1a:	81 15       	cp	r24, r1
    3a1c:	9f 40       	sbci	r25, 0x0F	; 15
    3a1e:	50 f4       	brcc	.+20     	; 0x3a34 <main+0x1ffc>
	{
		tx_string[cnt+4] = crc[2];
    3a20:	e0 e1       	ldi	r30, 0x10	; 16
    3a22:	f4 e0       	ldi	r31, 0x04	; 4
    3a24:	82 81       	ldd	r24, Z+2	; 0x02
    3a26:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = crc[1];
    3a28:	81 81       	ldd	r24, Z+1	; 0x01
    3a2a:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = crc[0];
    3a2c:	80 81       	ld	r24, Z
    3a2e:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';		
    3a30:	80 e3       	ldi	r24, 0x30	; 48
    3a32:	8e ab       	std	Y+54, r24	; 0x36
	}
	if(crcXmodem >= 0x1000)
    3a34:	61 14       	cp	r6, r1
    3a36:	20 e1       	ldi	r18, 0x10	; 16
    3a38:	72 06       	cpc	r7, r18
    3a3a:	50 f0       	brcs	.+20     	; 0x3a50 <main+0x2018>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    3a3c:	e0 e1       	ldi	r30, 0x10	; 16
    3a3e:	f4 e0       	ldi	r31, 0x04	; 4
    3a40:	80 81       	ld	r24, Z
    3a42:	8e ab       	std	Y+54, r24	; 0x36
		tx_string[cnt+2] = crc[1];
    3a44:	81 81       	ldd	r24, Z+1	; 0x01
    3a46:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+3] = crc[2];
    3a48:	82 81       	ldd	r24, Z+2	; 0x02
    3a4a:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+4] = crc[3];
    3a4c:	83 81       	ldd	r24, Z+3	; 0x03
    3a4e:	89 af       	std	Y+57, r24	; 0x39
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    3a50:	8d e0       	ldi	r24, 0x0D	; 13
    3a52:	8a af       	std	Y+58, r24	; 0x3a
    3a54:	9e 01       	movw	r18, r28
    3a56:	25 5c       	subi	r18, 0xC5	; 197
    3a58:	3f 4f       	sbci	r19, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3a5a:	ee ef       	ldi	r30, 0xFE	; 254
    3a5c:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3a5e:	0f 2e       	mov	r0, r31
    3a60:	f1 ec       	ldi	r31, 0xC1	; 193
    3a62:	6f 2e       	mov	r6, r31
    3a64:	71 2c       	mov	r7, r1
    3a66:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3a68:	60 e0       	ldi	r22, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    3a6a:	d4 01       	movw	r26, r8
    3a6c:	4d 91       	ld	r20, X+
    3a6e:	4d 01       	movw	r8, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    3a70:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3a72:	91 81       	ldd	r25, Z+1	; 0x01
    3a74:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    3a76:	98 13       	cpse	r25, r24
    3a78:	04 c0       	rjmp	.+8      	; 0x3a82 <main+0x204a>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3a7a:	d3 01       	movw	r26, r6
    3a7c:	8c 91       	ld	r24, X
    3a7e:	80 62       	ori	r24, 0x20	; 32
    3a80:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    3a82:	50 81       	ld	r21, Z
    3a84:	83 81       	ldd	r24, Z+3	; 0x03
    3a86:	94 81       	ldd	r25, Z+4	; 0x04
    3a88:	85 0f       	add	r24, r21
    3a8a:	91 1d       	adc	r25, r1
    3a8c:	dc 01       	movw	r26, r24
    3a8e:	4c 93       	st	X, r20
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    3a90:	70 81       	ld	r23, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3a92:	47 2f       	mov	r20, r23
    3a94:	50 e0       	ldi	r21, 0x00	; 0
    3a96:	82 81       	ldd	r24, Z+2	; 0x02
    3a98:	90 e0       	ldi	r25, 0x00	; 0
    3a9a:	01 97       	sbiw	r24, 0x01	; 1
    3a9c:	48 17       	cp	r20, r24
    3a9e:	59 07       	cpc	r21, r25
    3aa0:	19 f0       	breq	.+6      	; 0x3aa8 <main+0x2070>
    3aa2:	81 e0       	ldi	r24, 0x01	; 1
    3aa4:	87 0f       	add	r24, r23
    3aa6:	01 c0       	rjmp	.+2      	; 0x3aaa <main+0x2072>
    3aa8:	86 2f       	mov	r24, r22
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    3aaa:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    3aac:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    3aae:	82 16       	cp	r8, r18
    3ab0:	93 06       	cpc	r9, r19
    3ab2:	d9 f6       	brne	.-74     	; 0x3a6a <main+0x2032>
    3ab4:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <main+0x396>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    3ab8:	6e e1       	ldi	r22, 0x1E	; 30
    3aba:	70 e0       	ldi	r23, 0x00	; 0
    3abc:	c7 01       	movw	r24, r14
    3abe:	22 d4       	rcall	.+2116   	; 0x4304 <strnlen>
    3ac0:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    3ac2:	8b 30       	cpi	r24, 0x0B	; 11
    3ac4:	91 05       	cpc	r25, r1
    3ac6:	64 f0       	brlt	.+24     	; 0x3ae0 <main+0x20a8>
    3ac8:	ea ee       	ldi	r30, 0xEA	; 234
    3aca:	f4 e0       	ldi	r31, 0x04	; 4
    3acc:	de 01       	movw	r26, r28
    3ace:	a6 5a       	subi	r26, 0xA6	; 166
    3ad0:	bf 4f       	sbci	r27, 0xFF	; 255
    3ad2:	80 52       	subi	r24, 0x20	; 32
    3ad4:	9b 4f       	sbci	r25, 0xFB	; 251
	{
		param[idx] = stringToParse[i];
    3ad6:	21 91       	ld	r18, Z+
    3ad8:	2d 93       	st	X+, r18
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    3ada:	e8 17       	cp	r30, r24
    3adc:	f9 07       	cpc	r31, r25
    3ade:	d9 f7       	brne	.-10     	; 0x3ad6 <main+0x209e>
		printStatus("");
		break;
		
		case 452:	// SetIgainCh3
		ParamParse(rx_string, param);
		ch3.Igain = atof(param);
    3ae0:	ce 01       	movw	r24, r28
    3ae2:	86 5a       	subi	r24, 0xA6	; 166
    3ae4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ae6:	a9 d3       	rcall	.+1874   	; 0x423a <atof>
    3ae8:	60 93 66 01 	sts	0x0166, r22
    3aec:	70 93 67 01 	sts	0x0167, r23
    3af0:	80 93 68 01 	sts	0x0168, r24
    3af4:	90 93 69 01 	sts	0x0169, r25
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    3af8:	81 e2       	ldi	r24, 0x21	; 33
    3afa:	8a ab       	std	Y+50, r24	; 0x32
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    3afc:	f7 01       	movw	r30, r14
    3afe:	81 81       	ldd	r24, Z+1	; 0x01
    3b00:	8b ab       	std	Y+51, r24	; 0x33
    3b02:	82 81       	ldd	r24, Z+2	; 0x02
    3b04:	8c ab       	std	Y+52, r24	; 0x34
    3b06:	83 81       	ldd	r24, Z+3	; 0x03
    3b08:	8d ab       	std	Y+53, r24	; 0x35
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    3b0a:	1e aa       	std	Y+54, r1	; 0x36
    3b0c:	1f aa       	std	Y+55, r1	; 0x37
    3b0e:	18 ae       	std	Y+56, r1	; 0x38
    3b10:	4e 01       	movw	r8, r28
    3b12:	f2 e3       	ldi	r31, 0x32	; 50
    3b14:	8f 0e       	add	r8, r31
    3b16:	91 1c       	adc	r9, r1
    3b18:	be 01       	movw	r22, r28
    3b1a:	6a 5c       	subi	r22, 0xCA	; 202
    3b1c:	7f 4f       	sbci	r23, 0xFF	; 255
    3b1e:	f4 01       	movw	r30, r8
    3b20:	80 e0       	ldi	r24, 0x00	; 0
    3b22:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    3b24:	a8 e0       	ldi	r26, 0x08	; 8
    3b26:	71 2c       	mov	r7, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    3b28:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    3b2a:	29 2f       	mov	r18, r25
    3b2c:	33 27       	eor	r19, r19
    3b2e:	27 fd       	sbrc	r18, 7
    3b30:	3a 95       	dec	r19
    3b32:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    3b34:	32 2f       	mov	r19, r18
    3b36:	22 27       	eor	r18, r18
    3b38:	4a 2f       	mov	r20, r26
    3b3a:	57 2d       	mov	r21, r7
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    3b3c:	33 23       	and	r19, r19
    3b3e:	3c f4       	brge	.+14     	; 0x3b4e <main+0x2116>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    3b40:	22 0f       	add	r18, r18
    3b42:	33 1f       	adc	r19, r19
    3b44:	b1 e2       	ldi	r27, 0x21	; 33
    3b46:	2b 27       	eor	r18, r27
    3b48:	b0 e1       	ldi	r27, 0x10	; 16
    3b4a:	3b 27       	eor	r19, r27
    3b4c:	02 c0       	rjmp	.+4      	; 0x3b52 <main+0x211a>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    3b4e:	22 0f       	add	r18, r18
    3b50:	33 1f       	adc	r19, r19
    3b52:	41 50       	subi	r20, 0x01	; 1
    3b54:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    3b56:	91 f7       	brne	.-28     	; 0x3b3c <main+0x2104>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    3b58:	98 2f       	mov	r25, r24
    3b5a:	88 27       	eor	r24, r24
    3b5c:	82 27       	eor	r24, r18
    3b5e:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    3b60:	e6 17       	cp	r30, r22
    3b62:	f7 07       	cpc	r31, r23
    3b64:	09 f7       	brne	.-62     	; 0x3b28 <main+0x20f0>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    3b66:	3c 01       	movw	r6, r24
    3b68:	40 e1       	ldi	r20, 0x10	; 16
    3b6a:	60 e1       	ldi	r22, 0x10	; 16
    3b6c:	74 e0       	ldi	r23, 0x04	; 4
    3b6e:	df d3       	rcall	.+1982   	; 0x432e <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    3b70:	80 e1       	ldi	r24, 0x10	; 16
    3b72:	94 e0       	ldi	r25, 0x04	; 4
    3b74:	d2 d3       	rcall	.+1956   	; 0x431a <strupr>
	if(crcXmodem < 0x10)
    3b76:	e0 e1       	ldi	r30, 0x10	; 16
    3b78:	6e 16       	cp	r6, r30
    3b7a:	71 04       	cpc	r7, r1
    3b7c:	38 f4       	brcc	.+14     	; 0x3b8c <main+0x2154>
	{
		tx_string[cnt+4] = crc[0];
    3b7e:	80 91 10 04 	lds	r24, 0x0410
    3b82:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = '0';
    3b84:	80 e3       	ldi	r24, 0x30	; 48
    3b86:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = '0';
    3b88:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';
    3b8a:	8e ab       	std	Y+54, r24	; 0x36
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    3b8c:	c3 01       	movw	r24, r6
    3b8e:	40 97       	sbiw	r24, 0x10	; 16
    3b90:	80 3f       	cpi	r24, 0xF0	; 240
    3b92:	91 05       	cpc	r25, r1
    3b94:	48 f4       	brcc	.+18     	; 0x3ba8 <main+0x2170>
	{
		tx_string[cnt+4] = crc[1];
    3b96:	e0 e1       	ldi	r30, 0x10	; 16
    3b98:	f4 e0       	ldi	r31, 0x04	; 4
    3b9a:	81 81       	ldd	r24, Z+1	; 0x01
    3b9c:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = crc[0];
    3b9e:	80 81       	ld	r24, Z
    3ba0:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = '0';
    3ba2:	80 e3       	ldi	r24, 0x30	; 48
    3ba4:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';		
    3ba6:	8e ab       	std	Y+54, r24	; 0x36
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    3ba8:	c3 01       	movw	r24, r6
    3baa:	9a 95       	dec	r25
    3bac:	81 15       	cp	r24, r1
    3bae:	9f 40       	sbci	r25, 0x0F	; 15
    3bb0:	50 f4       	brcc	.+20     	; 0x3bc6 <main+0x218e>
	{
		tx_string[cnt+4] = crc[2];
    3bb2:	e0 e1       	ldi	r30, 0x10	; 16
    3bb4:	f4 e0       	ldi	r31, 0x04	; 4
    3bb6:	82 81       	ldd	r24, Z+2	; 0x02
    3bb8:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = crc[1];
    3bba:	81 81       	ldd	r24, Z+1	; 0x01
    3bbc:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = crc[0];
    3bbe:	80 81       	ld	r24, Z
    3bc0:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';		
    3bc2:	80 e3       	ldi	r24, 0x30	; 48
    3bc4:	8e ab       	std	Y+54, r24	; 0x36
	}
	if(crcXmodem >= 0x1000)
    3bc6:	61 14       	cp	r6, r1
    3bc8:	20 e1       	ldi	r18, 0x10	; 16
    3bca:	72 06       	cpc	r7, r18
    3bcc:	50 f0       	brcs	.+20     	; 0x3be2 <main+0x21aa>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    3bce:	e0 e1       	ldi	r30, 0x10	; 16
    3bd0:	f4 e0       	ldi	r31, 0x04	; 4
    3bd2:	80 81       	ld	r24, Z
    3bd4:	8e ab       	std	Y+54, r24	; 0x36
		tx_string[cnt+2] = crc[1];
    3bd6:	81 81       	ldd	r24, Z+1	; 0x01
    3bd8:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+3] = crc[2];
    3bda:	82 81       	ldd	r24, Z+2	; 0x02
    3bdc:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+4] = crc[3];
    3bde:	83 81       	ldd	r24, Z+3	; 0x03
    3be0:	89 af       	std	Y+57, r24	; 0x39
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    3be2:	8d e0       	ldi	r24, 0x0D	; 13
    3be4:	8a af       	std	Y+58, r24	; 0x3a
    3be6:	9e 01       	movw	r18, r28
    3be8:	25 5c       	subi	r18, 0xC5	; 197
    3bea:	3f 4f       	sbci	r19, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3bec:	ee ef       	ldi	r30, 0xFE	; 254
    3bee:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3bf0:	0f 2e       	mov	r0, r31
    3bf2:	f1 ec       	ldi	r31, 0xC1	; 193
    3bf4:	6f 2e       	mov	r6, r31
    3bf6:	71 2c       	mov	r7, r1
    3bf8:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3bfa:	60 e0       	ldi	r22, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    3bfc:	d4 01       	movw	r26, r8
    3bfe:	4d 91       	ld	r20, X+
    3c00:	4d 01       	movw	r8, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    3c02:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3c04:	91 81       	ldd	r25, Z+1	; 0x01
    3c06:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    3c08:	98 13       	cpse	r25, r24
    3c0a:	04 c0       	rjmp	.+8      	; 0x3c14 <main+0x21dc>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3c0c:	d3 01       	movw	r26, r6
    3c0e:	8c 91       	ld	r24, X
    3c10:	80 62       	ori	r24, 0x20	; 32
    3c12:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    3c14:	50 81       	ld	r21, Z
    3c16:	83 81       	ldd	r24, Z+3	; 0x03
    3c18:	94 81       	ldd	r25, Z+4	; 0x04
    3c1a:	85 0f       	add	r24, r21
    3c1c:	91 1d       	adc	r25, r1
    3c1e:	dc 01       	movw	r26, r24
    3c20:	4c 93       	st	X, r20
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    3c22:	70 81       	ld	r23, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3c24:	47 2f       	mov	r20, r23
    3c26:	50 e0       	ldi	r21, 0x00	; 0
    3c28:	82 81       	ldd	r24, Z+2	; 0x02
    3c2a:	90 e0       	ldi	r25, 0x00	; 0
    3c2c:	01 97       	sbiw	r24, 0x01	; 1
    3c2e:	48 17       	cp	r20, r24
    3c30:	59 07       	cpc	r21, r25
    3c32:	19 f0       	breq	.+6      	; 0x3c3a <main+0x2202>
    3c34:	81 e0       	ldi	r24, 0x01	; 1
    3c36:	87 0f       	add	r24, r23
    3c38:	01 c0       	rjmp	.+2      	; 0x3c3c <main+0x2204>
    3c3a:	86 2f       	mov	r24, r22
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    3c3c:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    3c3e:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    3c40:	82 16       	cp	r8, r18
    3c42:	93 06       	cpc	r9, r19
    3c44:	d9 f6       	brne	.-74     	; 0x3bfc <main+0x21c4>
    3c46:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <main+0x396>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    3c4a:	6e e1       	ldi	r22, 0x1E	; 30
    3c4c:	70 e0       	ldi	r23, 0x00	; 0
    3c4e:	c7 01       	movw	r24, r14
    3c50:	59 d3       	rcall	.+1714   	; 0x4304 <strnlen>
    3c52:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    3c54:	8b 30       	cpi	r24, 0x0B	; 11
    3c56:	91 05       	cpc	r25, r1
    3c58:	64 f0       	brlt	.+24     	; 0x3c72 <main+0x223a>
    3c5a:	ea ee       	ldi	r30, 0xEA	; 234
    3c5c:	f4 e0       	ldi	r31, 0x04	; 4
    3c5e:	de 01       	movw	r26, r28
    3c60:	a6 5a       	subi	r26, 0xA6	; 166
    3c62:	bf 4f       	sbci	r27, 0xFF	; 255
    3c64:	80 52       	subi	r24, 0x20	; 32
    3c66:	9b 4f       	sbci	r25, 0xFB	; 251
	{
		param[idx] = stringToParse[i];
    3c68:	21 91       	ld	r18, Z+
    3c6a:	2d 93       	st	X+, r18
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    3c6c:	e8 17       	cp	r30, r24
    3c6e:	f9 07       	cpc	r31, r25
    3c70:	d9 f7       	brne	.-10     	; 0x3c68 <main+0x2230>
		printStatus("");
		break;
		
		case 453:	// Setch3.Dgain
		ParamParse(rx_string, param);
		ch3.Dgain = atof(param);
    3c72:	ce 01       	movw	r24, r28
    3c74:	86 5a       	subi	r24, 0xA6	; 166
    3c76:	9f 4f       	sbci	r25, 0xFF	; 255
    3c78:	e0 d2       	rcall	.+1472   	; 0x423a <atof>
    3c7a:	60 93 6a 01 	sts	0x016A, r22
    3c7e:	70 93 6b 01 	sts	0x016B, r23
    3c82:	80 93 6c 01 	sts	0x016C, r24
    3c86:	90 93 6d 01 	sts	0x016D, r25
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    3c8a:	81 e2       	ldi	r24, 0x21	; 33
    3c8c:	8a ab       	std	Y+50, r24	; 0x32
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    3c8e:	f7 01       	movw	r30, r14
    3c90:	81 81       	ldd	r24, Z+1	; 0x01
    3c92:	8b ab       	std	Y+51, r24	; 0x33
    3c94:	82 81       	ldd	r24, Z+2	; 0x02
    3c96:	8c ab       	std	Y+52, r24	; 0x34
    3c98:	83 81       	ldd	r24, Z+3	; 0x03
    3c9a:	8d ab       	std	Y+53, r24	; 0x35
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    3c9c:	1e aa       	std	Y+54, r1	; 0x36
    3c9e:	1f aa       	std	Y+55, r1	; 0x37
    3ca0:	18 ae       	std	Y+56, r1	; 0x38
    3ca2:	4e 01       	movw	r8, r28
    3ca4:	f2 e3       	ldi	r31, 0x32	; 50
    3ca6:	8f 0e       	add	r8, r31
    3ca8:	91 1c       	adc	r9, r1
    3caa:	be 01       	movw	r22, r28
    3cac:	6a 5c       	subi	r22, 0xCA	; 202
    3cae:	7f 4f       	sbci	r23, 0xFF	; 255
    3cb0:	f4 01       	movw	r30, r8
    3cb2:	80 e0       	ldi	r24, 0x00	; 0
    3cb4:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    3cb6:	a8 e0       	ldi	r26, 0x08	; 8
    3cb8:	71 2c       	mov	r7, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    3cba:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    3cbc:	29 2f       	mov	r18, r25
    3cbe:	33 27       	eor	r19, r19
    3cc0:	27 fd       	sbrc	r18, 7
    3cc2:	3a 95       	dec	r19
    3cc4:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    3cc6:	32 2f       	mov	r19, r18
    3cc8:	22 27       	eor	r18, r18
    3cca:	4a 2f       	mov	r20, r26
    3ccc:	57 2d       	mov	r21, r7
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    3cce:	33 23       	and	r19, r19
    3cd0:	3c f4       	brge	.+14     	; 0x3ce0 <main+0x22a8>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    3cd2:	22 0f       	add	r18, r18
    3cd4:	33 1f       	adc	r19, r19
    3cd6:	b1 e2       	ldi	r27, 0x21	; 33
    3cd8:	2b 27       	eor	r18, r27
    3cda:	b0 e1       	ldi	r27, 0x10	; 16
    3cdc:	3b 27       	eor	r19, r27
    3cde:	02 c0       	rjmp	.+4      	; 0x3ce4 <main+0x22ac>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    3ce0:	22 0f       	add	r18, r18
    3ce2:	33 1f       	adc	r19, r19
    3ce4:	41 50       	subi	r20, 0x01	; 1
    3ce6:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    3ce8:	91 f7       	brne	.-28     	; 0x3cce <main+0x2296>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    3cea:	98 2f       	mov	r25, r24
    3cec:	88 27       	eor	r24, r24
    3cee:	82 27       	eor	r24, r18
    3cf0:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    3cf2:	e6 17       	cp	r30, r22
    3cf4:	f7 07       	cpc	r31, r23
    3cf6:	09 f7       	brne	.-62     	; 0x3cba <main+0x2282>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    3cf8:	3c 01       	movw	r6, r24
    3cfa:	40 e1       	ldi	r20, 0x10	; 16
    3cfc:	60 e1       	ldi	r22, 0x10	; 16
    3cfe:	74 e0       	ldi	r23, 0x04	; 4
    3d00:	16 d3       	rcall	.+1580   	; 0x432e <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    3d02:	80 e1       	ldi	r24, 0x10	; 16
    3d04:	94 e0       	ldi	r25, 0x04	; 4
    3d06:	09 d3       	rcall	.+1554   	; 0x431a <strupr>
	if(crcXmodem < 0x10)
    3d08:	e0 e1       	ldi	r30, 0x10	; 16
    3d0a:	6e 16       	cp	r6, r30
    3d0c:	71 04       	cpc	r7, r1
    3d0e:	38 f4       	brcc	.+14     	; 0x3d1e <main+0x22e6>
	{
		tx_string[cnt+4] = crc[0];
    3d10:	80 91 10 04 	lds	r24, 0x0410
    3d14:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = '0';
    3d16:	80 e3       	ldi	r24, 0x30	; 48
    3d18:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = '0';
    3d1a:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';
    3d1c:	8e ab       	std	Y+54, r24	; 0x36
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    3d1e:	c3 01       	movw	r24, r6
    3d20:	40 97       	sbiw	r24, 0x10	; 16
    3d22:	80 3f       	cpi	r24, 0xF0	; 240
    3d24:	91 05       	cpc	r25, r1
    3d26:	48 f4       	brcc	.+18     	; 0x3d3a <main+0x2302>
	{
		tx_string[cnt+4] = crc[1];
    3d28:	e0 e1       	ldi	r30, 0x10	; 16
    3d2a:	f4 e0       	ldi	r31, 0x04	; 4
    3d2c:	81 81       	ldd	r24, Z+1	; 0x01
    3d2e:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = crc[0];
    3d30:	80 81       	ld	r24, Z
    3d32:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = '0';
    3d34:	80 e3       	ldi	r24, 0x30	; 48
    3d36:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';		
    3d38:	8e ab       	std	Y+54, r24	; 0x36
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    3d3a:	c3 01       	movw	r24, r6
    3d3c:	9a 95       	dec	r25
    3d3e:	81 15       	cp	r24, r1
    3d40:	9f 40       	sbci	r25, 0x0F	; 15
    3d42:	50 f4       	brcc	.+20     	; 0x3d58 <main+0x2320>
	{
		tx_string[cnt+4] = crc[2];
    3d44:	e0 e1       	ldi	r30, 0x10	; 16
    3d46:	f4 e0       	ldi	r31, 0x04	; 4
    3d48:	82 81       	ldd	r24, Z+2	; 0x02
    3d4a:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = crc[1];
    3d4c:	81 81       	ldd	r24, Z+1	; 0x01
    3d4e:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = crc[0];
    3d50:	80 81       	ld	r24, Z
    3d52:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';		
    3d54:	80 e3       	ldi	r24, 0x30	; 48
    3d56:	8e ab       	std	Y+54, r24	; 0x36
	}
	if(crcXmodem >= 0x1000)
    3d58:	61 14       	cp	r6, r1
    3d5a:	20 e1       	ldi	r18, 0x10	; 16
    3d5c:	72 06       	cpc	r7, r18
    3d5e:	50 f0       	brcs	.+20     	; 0x3d74 <main+0x233c>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    3d60:	e0 e1       	ldi	r30, 0x10	; 16
    3d62:	f4 e0       	ldi	r31, 0x04	; 4
    3d64:	80 81       	ld	r24, Z
    3d66:	8e ab       	std	Y+54, r24	; 0x36
		tx_string[cnt+2] = crc[1];
    3d68:	81 81       	ldd	r24, Z+1	; 0x01
    3d6a:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+3] = crc[2];
    3d6c:	82 81       	ldd	r24, Z+2	; 0x02
    3d6e:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+4] = crc[3];
    3d70:	83 81       	ldd	r24, Z+3	; 0x03
    3d72:	89 af       	std	Y+57, r24	; 0x39
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    3d74:	8d e0       	ldi	r24, 0x0D	; 13
    3d76:	8a af       	std	Y+58, r24	; 0x3a
    3d78:	9e 01       	movw	r18, r28
    3d7a:	25 5c       	subi	r18, 0xC5	; 197
    3d7c:	3f 4f       	sbci	r19, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3d7e:	ee ef       	ldi	r30, 0xFE	; 254
    3d80:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3d82:	0f 2e       	mov	r0, r31
    3d84:	f1 ec       	ldi	r31, 0xC1	; 193
    3d86:	6f 2e       	mov	r6, r31
    3d88:	71 2c       	mov	r7, r1
    3d8a:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3d8c:	60 e0       	ldi	r22, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    3d8e:	d4 01       	movw	r26, r8
    3d90:	4d 91       	ld	r20, X+
    3d92:	4d 01       	movw	r8, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    3d94:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3d96:	91 81       	ldd	r25, Z+1	; 0x01
    3d98:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    3d9a:	98 13       	cpse	r25, r24
    3d9c:	04 c0       	rjmp	.+8      	; 0x3da6 <main+0x236e>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3d9e:	d3 01       	movw	r26, r6
    3da0:	8c 91       	ld	r24, X
    3da2:	80 62       	ori	r24, 0x20	; 32
    3da4:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    3da6:	50 81       	ld	r21, Z
    3da8:	83 81       	ldd	r24, Z+3	; 0x03
    3daa:	94 81       	ldd	r25, Z+4	; 0x04
    3dac:	85 0f       	add	r24, r21
    3dae:	91 1d       	adc	r25, r1
    3db0:	dc 01       	movw	r26, r24
    3db2:	4c 93       	st	X, r20
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    3db4:	70 81       	ld	r23, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3db6:	47 2f       	mov	r20, r23
    3db8:	50 e0       	ldi	r21, 0x00	; 0
    3dba:	82 81       	ldd	r24, Z+2	; 0x02
    3dbc:	90 e0       	ldi	r25, 0x00	; 0
    3dbe:	01 97       	sbiw	r24, 0x01	; 1
    3dc0:	48 17       	cp	r20, r24
    3dc2:	59 07       	cpc	r21, r25
    3dc4:	19 f0       	breq	.+6      	; 0x3dcc <main+0x2394>
    3dc6:	81 e0       	ldi	r24, 0x01	; 1
    3dc8:	87 0f       	add	r24, r23
    3dca:	01 c0       	rjmp	.+2      	; 0x3dce <main+0x2396>
    3dcc:	86 2f       	mov	r24, r22
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    3dce:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    3dd0:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    3dd2:	82 16       	cp	r8, r18
    3dd4:	93 06       	cpc	r9, r19
    3dd6:	d9 f6       	brne	.-74     	; 0x3d8e <main+0x2356>
    3dd8:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <main+0x396>
		ch3.Dgain = atof(param);
		printStatus("");
		break;
		
		case 454:	// Set heater on/off ch3
		if(rx_string[10] == '1')
    3ddc:	f7 01       	movw	r30, r14
    3dde:	82 85       	ldd	r24, Z+10	; 0x0a
    3de0:	81 33       	cpi	r24, 0x31	; 49
    3de2:	49 f4       	brne	.+18     	; 0x3df6 <main+0x23be>
		{
			ch3.heaterEnable = true;
    3de4:	81 e0       	ldi	r24, 0x01	; 1
    3de6:	80 93 a8 01 	sts	0x01A8, r24
			printStatus("ON");
    3dea:	85 e3       	ldi	r24, 0x35	; 53
    3dec:	91 e0       	ldi	r25, 0x01	; 1
    3dee:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    3df2:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <main+0x396>
		}
		else if(rx_string[10] == '0')
    3df6:	80 33       	cpi	r24, 0x30	; 48
    3df8:	11 f0       	breq	.+4      	; 0x3dfe <main+0x23c6>
    3dfa:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <main+0x396>
		{
			ch3.heaterEnable = false;
    3dfe:	10 92 a8 01 	sts	0x01A8, r1
			printStatus("OFF");
    3e02:	88 e3       	ldi	r24, 0x38	; 56
    3e04:	91 e0       	ldi	r25, 0x01	; 1
    3e06:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    3e0a:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <main+0x396>
		}
		break;						 

		case 500: // Store param to EEPROM
		WriteParamToEEPROM();
    3e0e:	0e 94 f7 01 	call	0x3ee	; 0x3ee <WriteParamToEEPROM>
		printStatus("");
    3e12:	87 e2       	ldi	r24, 0x27	; 39
    3e14:	91 e0       	ldi	r25, 0x01	; 1
    3e16:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    3e1a:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <main+0x396>
		break;
		
		default:
		printStatus("VSerror");
    3e1e:	8c e3       	ldi	r24, 0x3C	; 60
    3e20:	91 e0       	ldi	r25, 0x01	; 1
    3e22:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    3e26:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <main+0x396>
						var = atol(requestID);
						SetParameter(atol(requestID));
					}
					else
					{
						printStatus("CRC error");
    3e2a:	89 e1       	ldi	r24, 0x19	; 25
    3e2c:	91 e0       	ldi	r25, 0x01	; 1
    3e2e:	0e 94 51 03 	call	0x6a2	; 0x6a2 <printStatus>
    3e32:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <main+0x396>

00003e36 <__subsf3>:
    3e36:	50 58       	subi	r21, 0x80	; 128

00003e38 <__addsf3>:
    3e38:	bb 27       	eor	r27, r27
    3e3a:	aa 27       	eor	r26, r26
    3e3c:	0e d0       	rcall	.+28     	; 0x3e5a <__addsf3x>
    3e3e:	0d c1       	rjmp	.+538    	; 0x405a <__fp_round>
    3e40:	fe d0       	rcall	.+508    	; 0x403e <__fp_pscA>
    3e42:	30 f0       	brcs	.+12     	; 0x3e50 <__addsf3+0x18>
    3e44:	03 d1       	rcall	.+518    	; 0x404c <__fp_pscB>
    3e46:	20 f0       	brcs	.+8      	; 0x3e50 <__addsf3+0x18>
    3e48:	31 f4       	brne	.+12     	; 0x3e56 <__addsf3+0x1e>
    3e4a:	9f 3f       	cpi	r25, 0xFF	; 255
    3e4c:	11 f4       	brne	.+4      	; 0x3e52 <__addsf3+0x1a>
    3e4e:	1e f4       	brtc	.+6      	; 0x3e56 <__addsf3+0x1e>
    3e50:	f3 c0       	rjmp	.+486    	; 0x4038 <__fp_nan>
    3e52:	0e f4       	brtc	.+2      	; 0x3e56 <__addsf3+0x1e>
    3e54:	e0 95       	com	r30
    3e56:	e7 fb       	bst	r30, 7
    3e58:	e9 c0       	rjmp	.+466    	; 0x402c <__fp_inf>

00003e5a <__addsf3x>:
    3e5a:	e9 2f       	mov	r30, r25
    3e5c:	0f d1       	rcall	.+542    	; 0x407c <__fp_split3>
    3e5e:	80 f3       	brcs	.-32     	; 0x3e40 <__addsf3+0x8>
    3e60:	ba 17       	cp	r27, r26
    3e62:	62 07       	cpc	r22, r18
    3e64:	73 07       	cpc	r23, r19
    3e66:	84 07       	cpc	r24, r20
    3e68:	95 07       	cpc	r25, r21
    3e6a:	18 f0       	brcs	.+6      	; 0x3e72 <__addsf3x+0x18>
    3e6c:	71 f4       	brne	.+28     	; 0x3e8a <__addsf3x+0x30>
    3e6e:	9e f5       	brtc	.+102    	; 0x3ed6 <__addsf3x+0x7c>
    3e70:	27 c1       	rjmp	.+590    	; 0x40c0 <__fp_zero>
    3e72:	0e f4       	brtc	.+2      	; 0x3e76 <__addsf3x+0x1c>
    3e74:	e0 95       	com	r30
    3e76:	0b 2e       	mov	r0, r27
    3e78:	ba 2f       	mov	r27, r26
    3e7a:	a0 2d       	mov	r26, r0
    3e7c:	0b 01       	movw	r0, r22
    3e7e:	b9 01       	movw	r22, r18
    3e80:	90 01       	movw	r18, r0
    3e82:	0c 01       	movw	r0, r24
    3e84:	ca 01       	movw	r24, r20
    3e86:	a0 01       	movw	r20, r0
    3e88:	11 24       	eor	r1, r1
    3e8a:	ff 27       	eor	r31, r31
    3e8c:	59 1b       	sub	r21, r25
    3e8e:	99 f0       	breq	.+38     	; 0x3eb6 <__addsf3x+0x5c>
    3e90:	59 3f       	cpi	r21, 0xF9	; 249
    3e92:	50 f4       	brcc	.+20     	; 0x3ea8 <__addsf3x+0x4e>
    3e94:	50 3e       	cpi	r21, 0xE0	; 224
    3e96:	68 f1       	brcs	.+90     	; 0x3ef2 <__addsf3x+0x98>
    3e98:	1a 16       	cp	r1, r26
    3e9a:	f0 40       	sbci	r31, 0x00	; 0
    3e9c:	a2 2f       	mov	r26, r18
    3e9e:	23 2f       	mov	r18, r19
    3ea0:	34 2f       	mov	r19, r20
    3ea2:	44 27       	eor	r20, r20
    3ea4:	58 5f       	subi	r21, 0xF8	; 248
    3ea6:	f3 cf       	rjmp	.-26     	; 0x3e8e <__addsf3x+0x34>
    3ea8:	46 95       	lsr	r20
    3eaa:	37 95       	ror	r19
    3eac:	27 95       	ror	r18
    3eae:	a7 95       	ror	r26
    3eb0:	f0 40       	sbci	r31, 0x00	; 0
    3eb2:	53 95       	inc	r21
    3eb4:	c9 f7       	brne	.-14     	; 0x3ea8 <__addsf3x+0x4e>
    3eb6:	7e f4       	brtc	.+30     	; 0x3ed6 <__addsf3x+0x7c>
    3eb8:	1f 16       	cp	r1, r31
    3eba:	ba 0b       	sbc	r27, r26
    3ebc:	62 0b       	sbc	r22, r18
    3ebe:	73 0b       	sbc	r23, r19
    3ec0:	84 0b       	sbc	r24, r20
    3ec2:	ba f0       	brmi	.+46     	; 0x3ef2 <__addsf3x+0x98>
    3ec4:	91 50       	subi	r25, 0x01	; 1
    3ec6:	a1 f0       	breq	.+40     	; 0x3ef0 <__addsf3x+0x96>
    3ec8:	ff 0f       	add	r31, r31
    3eca:	bb 1f       	adc	r27, r27
    3ecc:	66 1f       	adc	r22, r22
    3ece:	77 1f       	adc	r23, r23
    3ed0:	88 1f       	adc	r24, r24
    3ed2:	c2 f7       	brpl	.-16     	; 0x3ec4 <__addsf3x+0x6a>
    3ed4:	0e c0       	rjmp	.+28     	; 0x3ef2 <__addsf3x+0x98>
    3ed6:	ba 0f       	add	r27, r26
    3ed8:	62 1f       	adc	r22, r18
    3eda:	73 1f       	adc	r23, r19
    3edc:	84 1f       	adc	r24, r20
    3ede:	48 f4       	brcc	.+18     	; 0x3ef2 <__addsf3x+0x98>
    3ee0:	87 95       	ror	r24
    3ee2:	77 95       	ror	r23
    3ee4:	67 95       	ror	r22
    3ee6:	b7 95       	ror	r27
    3ee8:	f7 95       	ror	r31
    3eea:	9e 3f       	cpi	r25, 0xFE	; 254
    3eec:	08 f0       	brcs	.+2      	; 0x3ef0 <__addsf3x+0x96>
    3eee:	b3 cf       	rjmp	.-154    	; 0x3e56 <__addsf3+0x1e>
    3ef0:	93 95       	inc	r25
    3ef2:	88 0f       	add	r24, r24
    3ef4:	08 f0       	brcs	.+2      	; 0x3ef8 <__addsf3x+0x9e>
    3ef6:	99 27       	eor	r25, r25
    3ef8:	ee 0f       	add	r30, r30
    3efa:	97 95       	ror	r25
    3efc:	87 95       	ror	r24
    3efe:	08 95       	ret

00003f00 <__cmpsf2>:
    3f00:	71 d0       	rcall	.+226    	; 0x3fe4 <__fp_cmp>
    3f02:	08 f4       	brcc	.+2      	; 0x3f06 <__cmpsf2+0x6>
    3f04:	81 e0       	ldi	r24, 0x01	; 1
    3f06:	08 95       	ret

00003f08 <__fixsfsi>:
    3f08:	04 d0       	rcall	.+8      	; 0x3f12 <__fixunssfsi>
    3f0a:	68 94       	set
    3f0c:	b1 11       	cpse	r27, r1
    3f0e:	d9 c0       	rjmp	.+434    	; 0x40c2 <__fp_szero>
    3f10:	08 95       	ret

00003f12 <__fixunssfsi>:
    3f12:	bc d0       	rcall	.+376    	; 0x408c <__fp_splitA>
    3f14:	88 f0       	brcs	.+34     	; 0x3f38 <__fixunssfsi+0x26>
    3f16:	9f 57       	subi	r25, 0x7F	; 127
    3f18:	90 f0       	brcs	.+36     	; 0x3f3e <__fixunssfsi+0x2c>
    3f1a:	b9 2f       	mov	r27, r25
    3f1c:	99 27       	eor	r25, r25
    3f1e:	b7 51       	subi	r27, 0x17	; 23
    3f20:	a0 f0       	brcs	.+40     	; 0x3f4a <__fixunssfsi+0x38>
    3f22:	d1 f0       	breq	.+52     	; 0x3f58 <__fixunssfsi+0x46>
    3f24:	66 0f       	add	r22, r22
    3f26:	77 1f       	adc	r23, r23
    3f28:	88 1f       	adc	r24, r24
    3f2a:	99 1f       	adc	r25, r25
    3f2c:	1a f0       	brmi	.+6      	; 0x3f34 <__fixunssfsi+0x22>
    3f2e:	ba 95       	dec	r27
    3f30:	c9 f7       	brne	.-14     	; 0x3f24 <__fixunssfsi+0x12>
    3f32:	12 c0       	rjmp	.+36     	; 0x3f58 <__fixunssfsi+0x46>
    3f34:	b1 30       	cpi	r27, 0x01	; 1
    3f36:	81 f0       	breq	.+32     	; 0x3f58 <__fixunssfsi+0x46>
    3f38:	c3 d0       	rcall	.+390    	; 0x40c0 <__fp_zero>
    3f3a:	b1 e0       	ldi	r27, 0x01	; 1
    3f3c:	08 95       	ret
    3f3e:	c0 c0       	rjmp	.+384    	; 0x40c0 <__fp_zero>
    3f40:	67 2f       	mov	r22, r23
    3f42:	78 2f       	mov	r23, r24
    3f44:	88 27       	eor	r24, r24
    3f46:	b8 5f       	subi	r27, 0xF8	; 248
    3f48:	39 f0       	breq	.+14     	; 0x3f58 <__fixunssfsi+0x46>
    3f4a:	b9 3f       	cpi	r27, 0xF9	; 249
    3f4c:	cc f3       	brlt	.-14     	; 0x3f40 <__fixunssfsi+0x2e>
    3f4e:	86 95       	lsr	r24
    3f50:	77 95       	ror	r23
    3f52:	67 95       	ror	r22
    3f54:	b3 95       	inc	r27
    3f56:	d9 f7       	brne	.-10     	; 0x3f4e <__fixunssfsi+0x3c>
    3f58:	3e f4       	brtc	.+14     	; 0x3f68 <__fixunssfsi+0x56>
    3f5a:	90 95       	com	r25
    3f5c:	80 95       	com	r24
    3f5e:	70 95       	com	r23
    3f60:	61 95       	neg	r22
    3f62:	7f 4f       	sbci	r23, 0xFF	; 255
    3f64:	8f 4f       	sbci	r24, 0xFF	; 255
    3f66:	9f 4f       	sbci	r25, 0xFF	; 255
    3f68:	08 95       	ret

00003f6a <__floatunsisf>:
    3f6a:	e8 94       	clt
    3f6c:	09 c0       	rjmp	.+18     	; 0x3f80 <__floatsisf+0x12>

00003f6e <__floatsisf>:
    3f6e:	97 fb       	bst	r25, 7
    3f70:	3e f4       	brtc	.+14     	; 0x3f80 <__floatsisf+0x12>
    3f72:	90 95       	com	r25
    3f74:	80 95       	com	r24
    3f76:	70 95       	com	r23
    3f78:	61 95       	neg	r22
    3f7a:	7f 4f       	sbci	r23, 0xFF	; 255
    3f7c:	8f 4f       	sbci	r24, 0xFF	; 255
    3f7e:	9f 4f       	sbci	r25, 0xFF	; 255
    3f80:	99 23       	and	r25, r25
    3f82:	a9 f0       	breq	.+42     	; 0x3fae <__floatsisf+0x40>
    3f84:	f9 2f       	mov	r31, r25
    3f86:	96 e9       	ldi	r25, 0x96	; 150
    3f88:	bb 27       	eor	r27, r27
    3f8a:	93 95       	inc	r25
    3f8c:	f6 95       	lsr	r31
    3f8e:	87 95       	ror	r24
    3f90:	77 95       	ror	r23
    3f92:	67 95       	ror	r22
    3f94:	b7 95       	ror	r27
    3f96:	f1 11       	cpse	r31, r1
    3f98:	f8 cf       	rjmp	.-16     	; 0x3f8a <__floatsisf+0x1c>
    3f9a:	fa f4       	brpl	.+62     	; 0x3fda <__floatsisf+0x6c>
    3f9c:	bb 0f       	add	r27, r27
    3f9e:	11 f4       	brne	.+4      	; 0x3fa4 <__floatsisf+0x36>
    3fa0:	60 ff       	sbrs	r22, 0
    3fa2:	1b c0       	rjmp	.+54     	; 0x3fda <__floatsisf+0x6c>
    3fa4:	6f 5f       	subi	r22, 0xFF	; 255
    3fa6:	7f 4f       	sbci	r23, 0xFF	; 255
    3fa8:	8f 4f       	sbci	r24, 0xFF	; 255
    3faa:	9f 4f       	sbci	r25, 0xFF	; 255
    3fac:	16 c0       	rjmp	.+44     	; 0x3fda <__floatsisf+0x6c>
    3fae:	88 23       	and	r24, r24
    3fb0:	11 f0       	breq	.+4      	; 0x3fb6 <__floatsisf+0x48>
    3fb2:	96 e9       	ldi	r25, 0x96	; 150
    3fb4:	11 c0       	rjmp	.+34     	; 0x3fd8 <__floatsisf+0x6a>
    3fb6:	77 23       	and	r23, r23
    3fb8:	21 f0       	breq	.+8      	; 0x3fc2 <__floatsisf+0x54>
    3fba:	9e e8       	ldi	r25, 0x8E	; 142
    3fbc:	87 2f       	mov	r24, r23
    3fbe:	76 2f       	mov	r23, r22
    3fc0:	05 c0       	rjmp	.+10     	; 0x3fcc <__floatsisf+0x5e>
    3fc2:	66 23       	and	r22, r22
    3fc4:	71 f0       	breq	.+28     	; 0x3fe2 <__floatsisf+0x74>
    3fc6:	96 e8       	ldi	r25, 0x86	; 134
    3fc8:	86 2f       	mov	r24, r22
    3fca:	70 e0       	ldi	r23, 0x00	; 0
    3fcc:	60 e0       	ldi	r22, 0x00	; 0
    3fce:	2a f0       	brmi	.+10     	; 0x3fda <__floatsisf+0x6c>
    3fd0:	9a 95       	dec	r25
    3fd2:	66 0f       	add	r22, r22
    3fd4:	77 1f       	adc	r23, r23
    3fd6:	88 1f       	adc	r24, r24
    3fd8:	da f7       	brpl	.-10     	; 0x3fd0 <__floatsisf+0x62>
    3fda:	88 0f       	add	r24, r24
    3fdc:	96 95       	lsr	r25
    3fde:	87 95       	ror	r24
    3fe0:	97 f9       	bld	r25, 7
    3fe2:	08 95       	ret

00003fe4 <__fp_cmp>:
    3fe4:	99 0f       	add	r25, r25
    3fe6:	00 08       	sbc	r0, r0
    3fe8:	55 0f       	add	r21, r21
    3fea:	aa 0b       	sbc	r26, r26
    3fec:	e0 e8       	ldi	r30, 0x80	; 128
    3fee:	fe ef       	ldi	r31, 0xFE	; 254
    3ff0:	16 16       	cp	r1, r22
    3ff2:	17 06       	cpc	r1, r23
    3ff4:	e8 07       	cpc	r30, r24
    3ff6:	f9 07       	cpc	r31, r25
    3ff8:	c0 f0       	brcs	.+48     	; 0x402a <__fp_cmp+0x46>
    3ffa:	12 16       	cp	r1, r18
    3ffc:	13 06       	cpc	r1, r19
    3ffe:	e4 07       	cpc	r30, r20
    4000:	f5 07       	cpc	r31, r21
    4002:	98 f0       	brcs	.+38     	; 0x402a <__fp_cmp+0x46>
    4004:	62 1b       	sub	r22, r18
    4006:	73 0b       	sbc	r23, r19
    4008:	84 0b       	sbc	r24, r20
    400a:	95 0b       	sbc	r25, r21
    400c:	39 f4       	brne	.+14     	; 0x401c <__fp_cmp+0x38>
    400e:	0a 26       	eor	r0, r26
    4010:	61 f0       	breq	.+24     	; 0x402a <__fp_cmp+0x46>
    4012:	23 2b       	or	r18, r19
    4014:	24 2b       	or	r18, r20
    4016:	25 2b       	or	r18, r21
    4018:	21 f4       	brne	.+8      	; 0x4022 <__fp_cmp+0x3e>
    401a:	08 95       	ret
    401c:	0a 26       	eor	r0, r26
    401e:	09 f4       	brne	.+2      	; 0x4022 <__fp_cmp+0x3e>
    4020:	a1 40       	sbci	r26, 0x01	; 1
    4022:	a6 95       	lsr	r26
    4024:	8f ef       	ldi	r24, 0xFF	; 255
    4026:	81 1d       	adc	r24, r1
    4028:	81 1d       	adc	r24, r1
    402a:	08 95       	ret

0000402c <__fp_inf>:
    402c:	97 f9       	bld	r25, 7
    402e:	9f 67       	ori	r25, 0x7F	; 127
    4030:	80 e8       	ldi	r24, 0x80	; 128
    4032:	70 e0       	ldi	r23, 0x00	; 0
    4034:	60 e0       	ldi	r22, 0x00	; 0
    4036:	08 95       	ret

00004038 <__fp_nan>:
    4038:	9f ef       	ldi	r25, 0xFF	; 255
    403a:	80 ec       	ldi	r24, 0xC0	; 192
    403c:	08 95       	ret

0000403e <__fp_pscA>:
    403e:	00 24       	eor	r0, r0
    4040:	0a 94       	dec	r0
    4042:	16 16       	cp	r1, r22
    4044:	17 06       	cpc	r1, r23
    4046:	18 06       	cpc	r1, r24
    4048:	09 06       	cpc	r0, r25
    404a:	08 95       	ret

0000404c <__fp_pscB>:
    404c:	00 24       	eor	r0, r0
    404e:	0a 94       	dec	r0
    4050:	12 16       	cp	r1, r18
    4052:	13 06       	cpc	r1, r19
    4054:	14 06       	cpc	r1, r20
    4056:	05 06       	cpc	r0, r21
    4058:	08 95       	ret

0000405a <__fp_round>:
    405a:	09 2e       	mov	r0, r25
    405c:	03 94       	inc	r0
    405e:	00 0c       	add	r0, r0
    4060:	11 f4       	brne	.+4      	; 0x4066 <__fp_round+0xc>
    4062:	88 23       	and	r24, r24
    4064:	52 f0       	brmi	.+20     	; 0x407a <__fp_round+0x20>
    4066:	bb 0f       	add	r27, r27
    4068:	40 f4       	brcc	.+16     	; 0x407a <__fp_round+0x20>
    406a:	bf 2b       	or	r27, r31
    406c:	11 f4       	brne	.+4      	; 0x4072 <__fp_round+0x18>
    406e:	60 ff       	sbrs	r22, 0
    4070:	04 c0       	rjmp	.+8      	; 0x407a <__fp_round+0x20>
    4072:	6f 5f       	subi	r22, 0xFF	; 255
    4074:	7f 4f       	sbci	r23, 0xFF	; 255
    4076:	8f 4f       	sbci	r24, 0xFF	; 255
    4078:	9f 4f       	sbci	r25, 0xFF	; 255
    407a:	08 95       	ret

0000407c <__fp_split3>:
    407c:	57 fd       	sbrc	r21, 7
    407e:	90 58       	subi	r25, 0x80	; 128
    4080:	44 0f       	add	r20, r20
    4082:	55 1f       	adc	r21, r21
    4084:	59 f0       	breq	.+22     	; 0x409c <__fp_splitA+0x10>
    4086:	5f 3f       	cpi	r21, 0xFF	; 255
    4088:	71 f0       	breq	.+28     	; 0x40a6 <__fp_splitA+0x1a>
    408a:	47 95       	ror	r20

0000408c <__fp_splitA>:
    408c:	88 0f       	add	r24, r24
    408e:	97 fb       	bst	r25, 7
    4090:	99 1f       	adc	r25, r25
    4092:	61 f0       	breq	.+24     	; 0x40ac <__fp_splitA+0x20>
    4094:	9f 3f       	cpi	r25, 0xFF	; 255
    4096:	79 f0       	breq	.+30     	; 0x40b6 <__fp_splitA+0x2a>
    4098:	87 95       	ror	r24
    409a:	08 95       	ret
    409c:	12 16       	cp	r1, r18
    409e:	13 06       	cpc	r1, r19
    40a0:	14 06       	cpc	r1, r20
    40a2:	55 1f       	adc	r21, r21
    40a4:	f2 cf       	rjmp	.-28     	; 0x408a <__fp_split3+0xe>
    40a6:	46 95       	lsr	r20
    40a8:	f1 df       	rcall	.-30     	; 0x408c <__fp_splitA>
    40aa:	08 c0       	rjmp	.+16     	; 0x40bc <__fp_splitA+0x30>
    40ac:	16 16       	cp	r1, r22
    40ae:	17 06       	cpc	r1, r23
    40b0:	18 06       	cpc	r1, r24
    40b2:	99 1f       	adc	r25, r25
    40b4:	f1 cf       	rjmp	.-30     	; 0x4098 <__fp_splitA+0xc>
    40b6:	86 95       	lsr	r24
    40b8:	71 05       	cpc	r23, r1
    40ba:	61 05       	cpc	r22, r1
    40bc:	08 94       	sec
    40be:	08 95       	ret

000040c0 <__fp_zero>:
    40c0:	e8 94       	clt

000040c2 <__fp_szero>:
    40c2:	bb 27       	eor	r27, r27
    40c4:	66 27       	eor	r22, r22
    40c6:	77 27       	eor	r23, r23
    40c8:	cb 01       	movw	r24, r22
    40ca:	97 f9       	bld	r25, 7
    40cc:	08 95       	ret

000040ce <__gesf2>:
    40ce:	8a df       	rcall	.-236    	; 0x3fe4 <__fp_cmp>
    40d0:	08 f4       	brcc	.+2      	; 0x40d4 <__gesf2+0x6>
    40d2:	8f ef       	ldi	r24, 0xFF	; 255
    40d4:	08 95       	ret

000040d6 <__mulsf3>:
    40d6:	0b d0       	rcall	.+22     	; 0x40ee <__mulsf3x>
    40d8:	c0 cf       	rjmp	.-128    	; 0x405a <__fp_round>
    40da:	b1 df       	rcall	.-158    	; 0x403e <__fp_pscA>
    40dc:	28 f0       	brcs	.+10     	; 0x40e8 <__mulsf3+0x12>
    40de:	b6 df       	rcall	.-148    	; 0x404c <__fp_pscB>
    40e0:	18 f0       	brcs	.+6      	; 0x40e8 <__mulsf3+0x12>
    40e2:	95 23       	and	r25, r21
    40e4:	09 f0       	breq	.+2      	; 0x40e8 <__mulsf3+0x12>
    40e6:	a2 cf       	rjmp	.-188    	; 0x402c <__fp_inf>
    40e8:	a7 cf       	rjmp	.-178    	; 0x4038 <__fp_nan>
    40ea:	11 24       	eor	r1, r1
    40ec:	ea cf       	rjmp	.-44     	; 0x40c2 <__fp_szero>

000040ee <__mulsf3x>:
    40ee:	c6 df       	rcall	.-116    	; 0x407c <__fp_split3>
    40f0:	a0 f3       	brcs	.-24     	; 0x40da <__mulsf3+0x4>

000040f2 <__mulsf3_pse>:
    40f2:	95 9f       	mul	r25, r21
    40f4:	d1 f3       	breq	.-12     	; 0x40ea <__mulsf3+0x14>
    40f6:	95 0f       	add	r25, r21
    40f8:	50 e0       	ldi	r21, 0x00	; 0
    40fa:	55 1f       	adc	r21, r21
    40fc:	62 9f       	mul	r22, r18
    40fe:	f0 01       	movw	r30, r0
    4100:	72 9f       	mul	r23, r18
    4102:	bb 27       	eor	r27, r27
    4104:	f0 0d       	add	r31, r0
    4106:	b1 1d       	adc	r27, r1
    4108:	63 9f       	mul	r22, r19
    410a:	aa 27       	eor	r26, r26
    410c:	f0 0d       	add	r31, r0
    410e:	b1 1d       	adc	r27, r1
    4110:	aa 1f       	adc	r26, r26
    4112:	64 9f       	mul	r22, r20
    4114:	66 27       	eor	r22, r22
    4116:	b0 0d       	add	r27, r0
    4118:	a1 1d       	adc	r26, r1
    411a:	66 1f       	adc	r22, r22
    411c:	82 9f       	mul	r24, r18
    411e:	22 27       	eor	r18, r18
    4120:	b0 0d       	add	r27, r0
    4122:	a1 1d       	adc	r26, r1
    4124:	62 1f       	adc	r22, r18
    4126:	73 9f       	mul	r23, r19
    4128:	b0 0d       	add	r27, r0
    412a:	a1 1d       	adc	r26, r1
    412c:	62 1f       	adc	r22, r18
    412e:	83 9f       	mul	r24, r19
    4130:	a0 0d       	add	r26, r0
    4132:	61 1d       	adc	r22, r1
    4134:	22 1f       	adc	r18, r18
    4136:	74 9f       	mul	r23, r20
    4138:	33 27       	eor	r19, r19
    413a:	a0 0d       	add	r26, r0
    413c:	61 1d       	adc	r22, r1
    413e:	23 1f       	adc	r18, r19
    4140:	84 9f       	mul	r24, r20
    4142:	60 0d       	add	r22, r0
    4144:	21 1d       	adc	r18, r1
    4146:	82 2f       	mov	r24, r18
    4148:	76 2f       	mov	r23, r22
    414a:	6a 2f       	mov	r22, r26
    414c:	11 24       	eor	r1, r1
    414e:	9f 57       	subi	r25, 0x7F	; 127
    4150:	50 40       	sbci	r21, 0x00	; 0
    4152:	8a f0       	brmi	.+34     	; 0x4176 <__mulsf3_pse+0x84>
    4154:	e1 f0       	breq	.+56     	; 0x418e <__mulsf3_pse+0x9c>
    4156:	88 23       	and	r24, r24
    4158:	4a f0       	brmi	.+18     	; 0x416c <__mulsf3_pse+0x7a>
    415a:	ee 0f       	add	r30, r30
    415c:	ff 1f       	adc	r31, r31
    415e:	bb 1f       	adc	r27, r27
    4160:	66 1f       	adc	r22, r22
    4162:	77 1f       	adc	r23, r23
    4164:	88 1f       	adc	r24, r24
    4166:	91 50       	subi	r25, 0x01	; 1
    4168:	50 40       	sbci	r21, 0x00	; 0
    416a:	a9 f7       	brne	.-22     	; 0x4156 <__mulsf3_pse+0x64>
    416c:	9e 3f       	cpi	r25, 0xFE	; 254
    416e:	51 05       	cpc	r21, r1
    4170:	70 f0       	brcs	.+28     	; 0x418e <__mulsf3_pse+0x9c>
    4172:	5c cf       	rjmp	.-328    	; 0x402c <__fp_inf>
    4174:	a6 cf       	rjmp	.-180    	; 0x40c2 <__fp_szero>
    4176:	5f 3f       	cpi	r21, 0xFF	; 255
    4178:	ec f3       	brlt	.-6      	; 0x4174 <__mulsf3_pse+0x82>
    417a:	98 3e       	cpi	r25, 0xE8	; 232
    417c:	dc f3       	brlt	.-10     	; 0x4174 <__mulsf3_pse+0x82>
    417e:	86 95       	lsr	r24
    4180:	77 95       	ror	r23
    4182:	67 95       	ror	r22
    4184:	b7 95       	ror	r27
    4186:	f7 95       	ror	r31
    4188:	e7 95       	ror	r30
    418a:	9f 5f       	subi	r25, 0xFF	; 255
    418c:	c1 f7       	brne	.-16     	; 0x417e <__mulsf3_pse+0x8c>
    418e:	fe 2b       	or	r31, r30
    4190:	88 0f       	add	r24, r24
    4192:	91 1d       	adc	r25, r1
    4194:	96 95       	lsr	r25
    4196:	87 95       	ror	r24
    4198:	97 f9       	bld	r25, 7
    419a:	08 95       	ret

0000419c <round>:
    419c:	77 df       	rcall	.-274    	; 0x408c <__fp_splitA>
    419e:	e0 f0       	brcs	.+56     	; 0x41d8 <round+0x3c>
    41a0:	9e 37       	cpi	r25, 0x7E	; 126
    41a2:	d8 f0       	brcs	.+54     	; 0x41da <round+0x3e>
    41a4:	96 39       	cpi	r25, 0x96	; 150
    41a6:	b8 f4       	brcc	.+46     	; 0x41d6 <round+0x3a>
    41a8:	9e 38       	cpi	r25, 0x8E	; 142
    41aa:	48 f4       	brcc	.+18     	; 0x41be <round+0x22>
    41ac:	67 2f       	mov	r22, r23
    41ae:	78 2f       	mov	r23, r24
    41b0:	88 27       	eor	r24, r24
    41b2:	98 5f       	subi	r25, 0xF8	; 248
    41b4:	f9 cf       	rjmp	.-14     	; 0x41a8 <round+0xc>
    41b6:	86 95       	lsr	r24
    41b8:	77 95       	ror	r23
    41ba:	67 95       	ror	r22
    41bc:	93 95       	inc	r25
    41be:	95 39       	cpi	r25, 0x95	; 149
    41c0:	d0 f3       	brcs	.-12     	; 0x41b6 <round+0x1a>
    41c2:	b6 2f       	mov	r27, r22
    41c4:	b1 70       	andi	r27, 0x01	; 1
    41c6:	6b 0f       	add	r22, r27
    41c8:	71 1d       	adc	r23, r1
    41ca:	81 1d       	adc	r24, r1
    41cc:	20 f4       	brcc	.+8      	; 0x41d6 <round+0x3a>
    41ce:	87 95       	ror	r24
    41d0:	77 95       	ror	r23
    41d2:	67 95       	ror	r22
    41d4:	93 95       	inc	r25
    41d6:	02 c0       	rjmp	.+4      	; 0x41dc <__fp_mintl>
    41d8:	1c c0       	rjmp	.+56     	; 0x4212 <__fp_mpack>
    41da:	73 cf       	rjmp	.-282    	; 0x40c2 <__fp_szero>

000041dc <__fp_mintl>:
    41dc:	88 23       	and	r24, r24
    41de:	71 f4       	brne	.+28     	; 0x41fc <__fp_mintl+0x20>
    41e0:	77 23       	and	r23, r23
    41e2:	21 f0       	breq	.+8      	; 0x41ec <__fp_mintl+0x10>
    41e4:	98 50       	subi	r25, 0x08	; 8
    41e6:	87 2b       	or	r24, r23
    41e8:	76 2f       	mov	r23, r22
    41ea:	07 c0       	rjmp	.+14     	; 0x41fa <__fp_mintl+0x1e>
    41ec:	66 23       	and	r22, r22
    41ee:	11 f4       	brne	.+4      	; 0x41f4 <__fp_mintl+0x18>
    41f0:	99 27       	eor	r25, r25
    41f2:	0d c0       	rjmp	.+26     	; 0x420e <__fp_mintl+0x32>
    41f4:	90 51       	subi	r25, 0x10	; 16
    41f6:	86 2b       	or	r24, r22
    41f8:	70 e0       	ldi	r23, 0x00	; 0
    41fa:	60 e0       	ldi	r22, 0x00	; 0
    41fc:	2a f0       	brmi	.+10     	; 0x4208 <__fp_mintl+0x2c>
    41fe:	9a 95       	dec	r25
    4200:	66 0f       	add	r22, r22
    4202:	77 1f       	adc	r23, r23
    4204:	88 1f       	adc	r24, r24
    4206:	da f7       	brpl	.-10     	; 0x41fe <__fp_mintl+0x22>
    4208:	88 0f       	add	r24, r24
    420a:	96 95       	lsr	r25
    420c:	87 95       	ror	r24
    420e:	97 f9       	bld	r25, 7
    4210:	08 95       	ret

00004212 <__fp_mpack>:
    4212:	9f 3f       	cpi	r25, 0xFF	; 255
    4214:	31 f0       	breq	.+12     	; 0x4222 <__fp_mpack_finite+0xc>

00004216 <__fp_mpack_finite>:
    4216:	91 50       	subi	r25, 0x01	; 1
    4218:	20 f4       	brcc	.+8      	; 0x4222 <__fp_mpack_finite+0xc>
    421a:	87 95       	ror	r24
    421c:	77 95       	ror	r23
    421e:	67 95       	ror	r22
    4220:	b7 95       	ror	r27
    4222:	88 0f       	add	r24, r24
    4224:	91 1d       	adc	r25, r1
    4226:	96 95       	lsr	r25
    4228:	87 95       	ror	r24
    422a:	97 f9       	bld	r25, 7
    422c:	08 95       	ret

0000422e <__tablejump2__>:
    422e:	ee 0f       	add	r30, r30
    4230:	ff 1f       	adc	r31, r31
    4232:	05 90       	lpm	r0, Z+
    4234:	f4 91       	lpm	r31, Z
    4236:	e0 2d       	mov	r30, r0
    4238:	09 94       	ijmp

0000423a <atof>:
    423a:	66 27       	eor	r22, r22
    423c:	77 27       	eor	r23, r23
    423e:	b7 c0       	rjmp	.+366    	; 0x43ae <strtod>

00004240 <atoi>:
    4240:	fc 01       	movw	r30, r24
    4242:	88 27       	eor	r24, r24
    4244:	99 27       	eor	r25, r25
    4246:	e8 94       	clt
    4248:	21 91       	ld	r18, Z+
    424a:	20 32       	cpi	r18, 0x20	; 32
    424c:	e9 f3       	breq	.-6      	; 0x4248 <atoi+0x8>
    424e:	29 30       	cpi	r18, 0x09	; 9
    4250:	10 f0       	brcs	.+4      	; 0x4256 <atoi+0x16>
    4252:	2e 30       	cpi	r18, 0x0E	; 14
    4254:	c8 f3       	brcs	.-14     	; 0x4248 <atoi+0x8>
    4256:	2b 32       	cpi	r18, 0x2B	; 43
    4258:	39 f0       	breq	.+14     	; 0x4268 <atoi+0x28>
    425a:	2d 32       	cpi	r18, 0x2D	; 45
    425c:	31 f4       	brne	.+12     	; 0x426a <atoi+0x2a>
    425e:	68 94       	set
    4260:	03 c0       	rjmp	.+6      	; 0x4268 <atoi+0x28>
    4262:	84 d0       	rcall	.+264    	; 0x436c <__mulhi_const_10>
    4264:	82 0f       	add	r24, r18
    4266:	91 1d       	adc	r25, r1
    4268:	21 91       	ld	r18, Z+
    426a:	20 53       	subi	r18, 0x30	; 48
    426c:	2a 30       	cpi	r18, 0x0A	; 10
    426e:	c8 f3       	brcs	.-14     	; 0x4262 <atoi+0x22>
    4270:	1e f4       	brtc	.+6      	; 0x4278 <atoi+0x38>
    4272:	90 95       	com	r25
    4274:	81 95       	neg	r24
    4276:	9f 4f       	sbci	r25, 0xFF	; 255
    4278:	08 95       	ret

0000427a <atol>:
    427a:	1f 93       	push	r17
    427c:	fc 01       	movw	r30, r24
    427e:	99 27       	eor	r25, r25
    4280:	88 27       	eor	r24, r24
    4282:	bc 01       	movw	r22, r24
    4284:	e8 94       	clt
    4286:	11 91       	ld	r17, Z+
    4288:	10 32       	cpi	r17, 0x20	; 32
    428a:	e9 f3       	breq	.-6      	; 0x4286 <atol+0xc>
    428c:	19 30       	cpi	r17, 0x09	; 9
    428e:	10 f0       	brcs	.+4      	; 0x4294 <atol+0x1a>
    4290:	1e 30       	cpi	r17, 0x0E	; 14
    4292:	c8 f3       	brcs	.-14     	; 0x4286 <atol+0xc>
    4294:	1b 32       	cpi	r17, 0x2B	; 43
    4296:	49 f0       	breq	.+18     	; 0x42aa <atol+0x30>
    4298:	1d 32       	cpi	r17, 0x2D	; 45
    429a:	41 f4       	brne	.+16     	; 0x42ac <atol+0x32>
    429c:	68 94       	set
    429e:	05 c0       	rjmp	.+10     	; 0x42aa <atol+0x30>
    42a0:	50 d0       	rcall	.+160    	; 0x4342 <__mulsi_const_10>
    42a2:	61 0f       	add	r22, r17
    42a4:	71 1d       	adc	r23, r1
    42a6:	81 1d       	adc	r24, r1
    42a8:	91 1d       	adc	r25, r1
    42aa:	11 91       	ld	r17, Z+
    42ac:	10 53       	subi	r17, 0x30	; 48
    42ae:	1a 30       	cpi	r17, 0x0A	; 10
    42b0:	b8 f3       	brcs	.-18     	; 0x42a0 <atol+0x26>
    42b2:	3e f4       	brtc	.+14     	; 0x42c2 <atol+0x48>
    42b4:	90 95       	com	r25
    42b6:	80 95       	com	r24
    42b8:	70 95       	com	r23
    42ba:	61 95       	neg	r22
    42bc:	7f 4f       	sbci	r23, 0xFF	; 255
    42be:	8f 4f       	sbci	r24, 0xFF	; 255
    42c0:	9f 4f       	sbci	r25, 0xFF	; 255
    42c2:	1f 91       	pop	r17
    42c4:	08 95       	ret

000042c6 <strcat>:
    42c6:	fb 01       	movw	r30, r22
    42c8:	dc 01       	movw	r26, r24
    42ca:	0d 90       	ld	r0, X+
    42cc:	00 20       	and	r0, r0
    42ce:	e9 f7       	brne	.-6      	; 0x42ca <strcat+0x4>
    42d0:	11 97       	sbiw	r26, 0x01	; 1
    42d2:	01 90       	ld	r0, Z+
    42d4:	0d 92       	st	X+, r0
    42d6:	00 20       	and	r0, r0
    42d8:	e1 f7       	brne	.-8      	; 0x42d2 <strcat+0xc>
    42da:	08 95       	ret

000042dc <strchr>:
    42dc:	fc 01       	movw	r30, r24
    42de:	81 91       	ld	r24, Z+
    42e0:	86 17       	cp	r24, r22
    42e2:	21 f0       	breq	.+8      	; 0x42ec <strchr+0x10>
    42e4:	88 23       	and	r24, r24
    42e6:	d9 f7       	brne	.-10     	; 0x42de <strchr+0x2>
    42e8:	99 27       	eor	r25, r25
    42ea:	08 95       	ret
    42ec:	31 97       	sbiw	r30, 0x01	; 1
    42ee:	cf 01       	movw	r24, r30
    42f0:	08 95       	ret

000042f2 <strcmp>:
    42f2:	fb 01       	movw	r30, r22
    42f4:	dc 01       	movw	r26, r24
    42f6:	8d 91       	ld	r24, X+
    42f8:	01 90       	ld	r0, Z+
    42fa:	80 19       	sub	r24, r0
    42fc:	01 10       	cpse	r0, r1
    42fe:	d9 f3       	breq	.-10     	; 0x42f6 <strcmp+0x4>
    4300:	99 0b       	sbc	r25, r25
    4302:	08 95       	ret

00004304 <strnlen>:
    4304:	fc 01       	movw	r30, r24
    4306:	61 50       	subi	r22, 0x01	; 1
    4308:	70 40       	sbci	r23, 0x00	; 0
    430a:	01 90       	ld	r0, Z+
    430c:	01 10       	cpse	r0, r1
    430e:	d8 f7       	brcc	.-10     	; 0x4306 <strnlen+0x2>
    4310:	80 95       	com	r24
    4312:	90 95       	com	r25
    4314:	8e 0f       	add	r24, r30
    4316:	9f 1f       	adc	r25, r31
    4318:	08 95       	ret

0000431a <strupr>:
    431a:	dc 01       	movw	r26, r24
    431c:	6c 91       	ld	r22, X
    431e:	61 56       	subi	r22, 0x61	; 97
    4320:	6a 31       	cpi	r22, 0x1A	; 26
    4322:	08 f0       	brcs	.+2      	; 0x4326 <strupr+0xc>
    4324:	60 5e       	subi	r22, 0xE0	; 224
    4326:	6f 5b       	subi	r22, 0xBF	; 191
    4328:	6d 93       	st	X+, r22
    432a:	c1 f7       	brne	.-16     	; 0x431c <strupr+0x2>
    432c:	08 95       	ret

0000432e <__itoa_ncheck>:
    432e:	bb 27       	eor	r27, r27
    4330:	4a 30       	cpi	r20, 0x0A	; 10
    4332:	31 f4       	brne	.+12     	; 0x4340 <__itoa_ncheck+0x12>
    4334:	99 23       	and	r25, r25
    4336:	22 f4       	brpl	.+8      	; 0x4340 <__itoa_ncheck+0x12>
    4338:	bd e2       	ldi	r27, 0x2D	; 45
    433a:	90 95       	com	r25
    433c:	81 95       	neg	r24
    433e:	9f 4f       	sbci	r25, 0xFF	; 255
    4340:	1e c0       	rjmp	.+60     	; 0x437e <__utoa_common>

00004342 <__mulsi_const_10>:
    4342:	59 2f       	mov	r21, r25
    4344:	48 2f       	mov	r20, r24
    4346:	37 2f       	mov	r19, r23
    4348:	26 2f       	mov	r18, r22
    434a:	66 0f       	add	r22, r22
    434c:	77 1f       	adc	r23, r23
    434e:	88 1f       	adc	r24, r24
    4350:	99 1f       	adc	r25, r25
    4352:	66 0f       	add	r22, r22
    4354:	77 1f       	adc	r23, r23
    4356:	88 1f       	adc	r24, r24
    4358:	99 1f       	adc	r25, r25
    435a:	62 0f       	add	r22, r18
    435c:	73 1f       	adc	r23, r19
    435e:	84 1f       	adc	r24, r20
    4360:	95 1f       	adc	r25, r21
    4362:	66 0f       	add	r22, r22
    4364:	77 1f       	adc	r23, r23
    4366:	88 1f       	adc	r24, r24
    4368:	99 1f       	adc	r25, r25
    436a:	08 95       	ret

0000436c <__mulhi_const_10>:
    436c:	7a e0       	ldi	r23, 0x0A	; 10
    436e:	97 9f       	mul	r25, r23
    4370:	90 2d       	mov	r25, r0
    4372:	87 9f       	mul	r24, r23
    4374:	80 2d       	mov	r24, r0
    4376:	91 0d       	add	r25, r1
    4378:	11 24       	eor	r1, r1
    437a:	08 95       	ret

0000437c <__utoa_ncheck>:
    437c:	bb 27       	eor	r27, r27

0000437e <__utoa_common>:
    437e:	fb 01       	movw	r30, r22
    4380:	55 27       	eor	r21, r21
    4382:	aa 27       	eor	r26, r26
    4384:	88 0f       	add	r24, r24
    4386:	99 1f       	adc	r25, r25
    4388:	aa 1f       	adc	r26, r26
    438a:	a4 17       	cp	r26, r20
    438c:	10 f0       	brcs	.+4      	; 0x4392 <__utoa_common+0x14>
    438e:	a4 1b       	sub	r26, r20
    4390:	83 95       	inc	r24
    4392:	50 51       	subi	r21, 0x10	; 16
    4394:	b9 f7       	brne	.-18     	; 0x4384 <__utoa_common+0x6>
    4396:	a0 5d       	subi	r26, 0xD0	; 208
    4398:	aa 33       	cpi	r26, 0x3A	; 58
    439a:	08 f0       	brcs	.+2      	; 0x439e <__utoa_common+0x20>
    439c:	a9 5d       	subi	r26, 0xD9	; 217
    439e:	a1 93       	st	Z+, r26
    43a0:	00 97       	sbiw	r24, 0x00	; 0
    43a2:	79 f7       	brne	.-34     	; 0x4382 <__utoa_common+0x4>
    43a4:	b1 11       	cpse	r27, r1
    43a6:	b1 93       	st	Z+, r27
    43a8:	11 92       	st	Z+, r1
    43aa:	cb 01       	movw	r24, r22
    43ac:	72 c1       	rjmp	.+740    	; 0x4692 <strrev>

000043ae <strtod>:
    43ae:	a0 e0       	ldi	r26, 0x00	; 0
    43b0:	b0 e0       	ldi	r27, 0x00	; 0
    43b2:	ec ed       	ldi	r30, 0xDC	; 220
    43b4:	f1 e2       	ldi	r31, 0x21	; 33
    43b6:	b9 c1       	rjmp	.+882    	; 0x472a <__prologue_saves__+0x8>
    43b8:	ec 01       	movw	r28, r24
    43ba:	7b 01       	movw	r14, r22
    43bc:	61 15       	cp	r22, r1
    43be:	71 05       	cpc	r23, r1
    43c0:	19 f0       	breq	.+6      	; 0x43c8 <strtod+0x1a>
    43c2:	db 01       	movw	r26, r22
    43c4:	8d 93       	st	X+, r24
    43c6:	9c 93       	st	X, r25
    43c8:	8e 01       	movw	r16, r28
    43ca:	0f 5f       	subi	r16, 0xFF	; 255
    43cc:	1f 4f       	sbci	r17, 0xFF	; 255
    43ce:	78 80       	ld	r7, Y
    43d0:	87 2d       	mov	r24, r7
    43d2:	90 e0       	ldi	r25, 0x00	; 0
    43d4:	3e d1       	rcall	.+636    	; 0x4652 <isspace>
    43d6:	89 2b       	or	r24, r25
    43d8:	11 f0       	breq	.+4      	; 0x43de <strtod+0x30>
    43da:	e8 01       	movw	r28, r16
    43dc:	f5 cf       	rjmp	.-22     	; 0x43c8 <strtod+0x1a>
    43de:	bd e2       	ldi	r27, 0x2D	; 45
    43e0:	7b 12       	cpse	r7, r27
    43e2:	05 c0       	rjmp	.+10     	; 0x43ee <strtod+0x40>
    43e4:	0f 5f       	subi	r16, 0xFF	; 255
    43e6:	1f 4f       	sbci	r17, 0xFF	; 255
    43e8:	79 80       	ldd	r7, Y+1	; 0x01
    43ea:	c1 e0       	ldi	r28, 0x01	; 1
    43ec:	08 c0       	rjmp	.+16     	; 0x43fe <strtod+0x50>
    43ee:	eb e2       	ldi	r30, 0x2B	; 43
    43f0:	7e 12       	cpse	r7, r30
    43f2:	04 c0       	rjmp	.+8      	; 0x43fc <strtod+0x4e>
    43f4:	8e 01       	movw	r16, r28
    43f6:	0e 5f       	subi	r16, 0xFE	; 254
    43f8:	1f 4f       	sbci	r17, 0xFF	; 255
    43fa:	79 80       	ldd	r7, Y+1	; 0x01
    43fc:	c0 e0       	ldi	r28, 0x00	; 0
    43fe:	68 01       	movw	r12, r16
    4400:	f1 e0       	ldi	r31, 0x01	; 1
    4402:	cf 1a       	sub	r12, r31
    4404:	d1 08       	sbc	r13, r1
    4406:	43 e0       	ldi	r20, 0x03	; 3
    4408:	50 e0       	ldi	r21, 0x00	; 0
    440a:	6e ed       	ldi	r22, 0xDE	; 222
    440c:	72 e0       	ldi	r23, 0x02	; 2
    440e:	c6 01       	movw	r24, r12
    4410:	28 d1       	rcall	.+592    	; 0x4662 <strncasecmp_P>
    4412:	89 2b       	or	r24, r25
    4414:	e9 f4       	brne	.+58     	; 0x4450 <strtod+0xa2>
    4416:	68 01       	movw	r12, r16
    4418:	22 e0       	ldi	r18, 0x02	; 2
    441a:	c2 0e       	add	r12, r18
    441c:	d1 1c       	adc	r13, r1
    441e:	45 e0       	ldi	r20, 0x05	; 5
    4420:	50 e0       	ldi	r21, 0x00	; 0
    4422:	69 ed       	ldi	r22, 0xD9	; 217
    4424:	72 e0       	ldi	r23, 0x02	; 2
    4426:	c6 01       	movw	r24, r12
    4428:	1c d1       	rcall	.+568    	; 0x4662 <strncasecmp_P>
    442a:	89 2b       	or	r24, r25
    442c:	21 f4       	brne	.+8      	; 0x4436 <strtod+0x88>
    442e:	68 01       	movw	r12, r16
    4430:	87 e0       	ldi	r24, 0x07	; 7
    4432:	c8 0e       	add	r12, r24
    4434:	d1 1c       	adc	r13, r1
    4436:	e1 14       	cp	r14, r1
    4438:	f1 04       	cpc	r15, r1
    443a:	19 f0       	breq	.+6      	; 0x4442 <strtod+0x94>
    443c:	d7 01       	movw	r26, r14
    443e:	cd 92       	st	X+, r12
    4440:	dc 92       	st	X, r13
    4442:	c1 11       	cpse	r28, r1
    4444:	f9 c0       	rjmp	.+498    	; 0x4638 <strtod+0x28a>
    4446:	60 e0       	ldi	r22, 0x00	; 0
    4448:	70 e0       	ldi	r23, 0x00	; 0
    444a:	80 e8       	ldi	r24, 0x80	; 128
    444c:	9f e7       	ldi	r25, 0x7F	; 127
    444e:	fd c0       	rjmp	.+506    	; 0x464a <strtod+0x29c>
    4450:	43 e0       	ldi	r20, 0x03	; 3
    4452:	50 e0       	ldi	r21, 0x00	; 0
    4454:	66 ed       	ldi	r22, 0xD6	; 214
    4456:	72 e0       	ldi	r23, 0x02	; 2
    4458:	c6 01       	movw	r24, r12
    445a:	03 d1       	rcall	.+518    	; 0x4662 <strncasecmp_P>
    445c:	89 2b       	or	r24, r25
    445e:	51 f4       	brne	.+20     	; 0x4474 <strtod+0xc6>
    4460:	e1 14       	cp	r14, r1
    4462:	f1 04       	cpc	r15, r1
    4464:	09 f4       	brne	.+2      	; 0x4468 <strtod+0xba>
    4466:	ed c0       	rjmp	.+474    	; 0x4642 <strtod+0x294>
    4468:	0e 5f       	subi	r16, 0xFE	; 254
    446a:	1f 4f       	sbci	r17, 0xFF	; 255
    446c:	f7 01       	movw	r30, r14
    446e:	11 83       	std	Z+1, r17	; 0x01
    4470:	00 83       	st	Z, r16
    4472:	e7 c0       	rjmp	.+462    	; 0x4642 <strtod+0x294>
    4474:	68 01       	movw	r12, r16
    4476:	60 e0       	ldi	r22, 0x00	; 0
    4478:	70 e0       	ldi	r23, 0x00	; 0
    447a:	cb 01       	movw	r24, r22
    447c:	00 e0       	ldi	r16, 0x00	; 0
    447e:	10 e0       	ldi	r17, 0x00	; 0
    4480:	f6 01       	movw	r30, r12
    4482:	d0 ed       	ldi	r29, 0xD0	; 208
    4484:	d7 0d       	add	r29, r7
    4486:	da 30       	cpi	r29, 0x0A	; 10
    4488:	50 f5       	brcc	.+84     	; 0x44de <strtod+0x130>
    448a:	2c 2f       	mov	r18, r28
    448c:	22 60       	ori	r18, 0x02	; 2
    448e:	62 2e       	mov	r6, r18
    4490:	2c 2f       	mov	r18, r28
    4492:	28 70       	andi	r18, 0x08	; 8
    4494:	c2 ff       	sbrs	r28, 2
    4496:	05 c0       	rjmp	.+10     	; 0x44a2 <strtod+0xf4>
    4498:	21 11       	cpse	r18, r1
    449a:	27 c0       	rjmp	.+78     	; 0x44ea <strtod+0x13c>
    449c:	0f 5f       	subi	r16, 0xFF	; 255
    449e:	1f 4f       	sbci	r17, 0xFF	; 255
    44a0:	24 c0       	rjmp	.+72     	; 0x44ea <strtod+0x13c>
    44a2:	22 23       	and	r18, r18
    44a4:	11 f0       	breq	.+4      	; 0x44aa <strtod+0xfc>
    44a6:	01 50       	subi	r16, 0x01	; 1
    44a8:	11 09       	sbc	r17, r1
    44aa:	a5 e0       	ldi	r26, 0x05	; 5
    44ac:	b0 e0       	ldi	r27, 0x00	; 0
    44ae:	9b 01       	movw	r18, r22
    44b0:	ac 01       	movw	r20, r24
    44b2:	2d d1       	rcall	.+602    	; 0x470e <__muluhisi3>
    44b4:	4b 01       	movw	r8, r22
    44b6:	5c 01       	movw	r10, r24
    44b8:	88 0c       	add	r8, r8
    44ba:	99 1c       	adc	r9, r9
    44bc:	aa 1c       	adc	r10, r10
    44be:	bb 1c       	adc	r11, r11
    44c0:	c5 01       	movw	r24, r10
    44c2:	b4 01       	movw	r22, r8
    44c4:	6d 0f       	add	r22, r29
    44c6:	71 1d       	adc	r23, r1
    44c8:	81 1d       	adc	r24, r1
    44ca:	91 1d       	adc	r25, r1
    44cc:	68 39       	cpi	r22, 0x98	; 152
    44ce:	a9 e9       	ldi	r26, 0x99	; 153
    44d0:	7a 07       	cpc	r23, r26
    44d2:	8a 07       	cpc	r24, r26
    44d4:	a9 e1       	ldi	r26, 0x19	; 25
    44d6:	9a 07       	cpc	r25, r26
    44d8:	40 f0       	brcs	.+16     	; 0x44ea <strtod+0x13c>
    44da:	c6 60       	ori	r28, 0x06	; 6
    44dc:	05 c0       	rjmp	.+10     	; 0x44e8 <strtod+0x13a>
    44de:	de 3f       	cpi	r29, 0xFE	; 254
    44e0:	51 f4       	brne	.+20     	; 0x44f6 <strtod+0x148>
    44e2:	c3 fd       	sbrc	r28, 3
    44e4:	44 c0       	rjmp	.+136    	; 0x456e <strtod+0x1c0>
    44e6:	c8 60       	ori	r28, 0x08	; 8
    44e8:	6c 2e       	mov	r6, r28
    44ea:	bf ef       	ldi	r27, 0xFF	; 255
    44ec:	cb 1a       	sub	r12, r27
    44ee:	db 0a       	sbc	r13, r27
    44f0:	70 80       	ld	r7, Z
    44f2:	c6 2d       	mov	r28, r6
    44f4:	c5 cf       	rjmp	.-118    	; 0x4480 <strtod+0xd2>
    44f6:	2d 2f       	mov	r18, r29
    44f8:	2f 7d       	andi	r18, 0xDF	; 223
    44fa:	25 31       	cpi	r18, 0x15	; 21
    44fc:	c1 f5       	brne	.+112    	; 0x456e <strtod+0x1c0>
    44fe:	40 81       	ld	r20, Z
    4500:	4d 32       	cpi	r20, 0x2D	; 45
    4502:	11 f4       	brne	.+4      	; 0x4508 <strtod+0x15a>
    4504:	c0 61       	ori	r28, 0x10	; 16
    4506:	06 c0       	rjmp	.+12     	; 0x4514 <strtod+0x166>
    4508:	4b 32       	cpi	r20, 0x2B	; 43
    450a:	21 f0       	breq	.+8      	; 0x4514 <strtod+0x166>
    450c:	31 96       	adiw	r30, 0x01	; 1
    450e:	21 e0       	ldi	r18, 0x01	; 1
    4510:	30 e0       	ldi	r19, 0x00	; 0
    4512:	06 c0       	rjmp	.+12     	; 0x4520 <strtod+0x172>
    4514:	32 96       	adiw	r30, 0x02	; 2
    4516:	d6 01       	movw	r26, r12
    4518:	11 96       	adiw	r26, 0x01	; 1
    451a:	4c 91       	ld	r20, X
    451c:	22 e0       	ldi	r18, 0x02	; 2
    451e:	30 e0       	ldi	r19, 0x00	; 0
    4520:	a0 ed       	ldi	r26, 0xD0	; 208
    4522:	a4 0f       	add	r26, r20
    4524:	aa 30       	cpi	r26, 0x0A	; 10
    4526:	18 f0       	brcs	.+6      	; 0x452e <strtod+0x180>
    4528:	e2 1b       	sub	r30, r18
    452a:	f3 0b       	sbc	r31, r19
    452c:	20 c0       	rjmp	.+64     	; 0x456e <strtod+0x1c0>
    452e:	40 e0       	ldi	r20, 0x00	; 0
    4530:	50 e0       	ldi	r21, 0x00	; 0
    4532:	40 38       	cpi	r20, 0x80	; 128
    4534:	bc e0       	ldi	r27, 0x0C	; 12
    4536:	5b 07       	cpc	r21, r27
    4538:	5c f4       	brge	.+22     	; 0x4550 <strtod+0x1a2>
    453a:	9a 01       	movw	r18, r20
    453c:	22 0f       	add	r18, r18
    453e:	33 1f       	adc	r19, r19
    4540:	22 0f       	add	r18, r18
    4542:	33 1f       	adc	r19, r19
    4544:	42 0f       	add	r20, r18
    4546:	53 1f       	adc	r21, r19
    4548:	44 0f       	add	r20, r20
    454a:	55 1f       	adc	r21, r21
    454c:	4a 0f       	add	r20, r26
    454e:	51 1d       	adc	r21, r1
    4550:	31 96       	adiw	r30, 0x01	; 1
    4552:	df 01       	movw	r26, r30
    4554:	11 97       	sbiw	r26, 0x01	; 1
    4556:	2c 91       	ld	r18, X
    4558:	a0 ed       	ldi	r26, 0xD0	; 208
    455a:	a2 0f       	add	r26, r18
    455c:	aa 30       	cpi	r26, 0x0A	; 10
    455e:	48 f3       	brcs	.-46     	; 0x4532 <strtod+0x184>
    4560:	c4 ff       	sbrs	r28, 4
    4562:	03 c0       	rjmp	.+6      	; 0x456a <strtod+0x1bc>
    4564:	51 95       	neg	r21
    4566:	41 95       	neg	r20
    4568:	51 09       	sbc	r21, r1
    456a:	04 0f       	add	r16, r20
    456c:	15 1f       	adc	r17, r21
    456e:	c1 ff       	sbrs	r28, 1
    4570:	07 c0       	rjmp	.+14     	; 0x4580 <strtod+0x1d2>
    4572:	e1 14       	cp	r14, r1
    4574:	f1 04       	cpc	r15, r1
    4576:	21 f0       	breq	.+8      	; 0x4580 <strtod+0x1d2>
    4578:	31 97       	sbiw	r30, 0x01	; 1
    457a:	d7 01       	movw	r26, r14
    457c:	ed 93       	st	X+, r30
    457e:	fc 93       	st	X, r31
    4580:	f4 dc       	rcall	.-1560   	; 0x3f6a <__floatunsisf>
    4582:	c3 70       	andi	r28, 0x03	; 3
    4584:	c3 30       	cpi	r28, 0x03	; 3
    4586:	19 f0       	breq	.+6      	; 0x458e <strtod+0x1e0>
    4588:	6b 01       	movw	r12, r22
    458a:	7c 01       	movw	r14, r24
    458c:	06 c0       	rjmp	.+12     	; 0x459a <strtod+0x1ec>
    458e:	6b 01       	movw	r12, r22
    4590:	7c 01       	movw	r14, r24
    4592:	f7 fa       	bst	r15, 7
    4594:	f0 94       	com	r15
    4596:	f7 f8       	bld	r15, 7
    4598:	f0 94       	com	r15
    459a:	20 e0       	ldi	r18, 0x00	; 0
    459c:	30 e0       	ldi	r19, 0x00	; 0
    459e:	a9 01       	movw	r20, r18
    45a0:	c7 01       	movw	r24, r14
    45a2:	b6 01       	movw	r22, r12
    45a4:	ad dc       	rcall	.-1702   	; 0x3f00 <__cmpsf2>
    45a6:	88 23       	and	r24, r24
    45a8:	09 f4       	brne	.+2      	; 0x45ac <strtod+0x1fe>
    45aa:	43 c0       	rjmp	.+134    	; 0x4632 <strtod+0x284>
    45ac:	17 ff       	sbrs	r17, 7
    45ae:	06 c0       	rjmp	.+12     	; 0x45bc <strtod+0x20e>
    45b0:	11 95       	neg	r17
    45b2:	01 95       	neg	r16
    45b4:	11 09       	sbc	r17, r1
    45b6:	c5 ef       	ldi	r28, 0xF5	; 245
    45b8:	d2 e0       	ldi	r29, 0x02	; 2
    45ba:	02 c0       	rjmp	.+4      	; 0x45c0 <strtod+0x212>
    45bc:	cd e0       	ldi	r28, 0x0D	; 13
    45be:	d3 e0       	ldi	r29, 0x03	; 3
    45c0:	5e 01       	movw	r10, r28
    45c2:	b8 e1       	ldi	r27, 0x18	; 24
    45c4:	ab 1a       	sub	r10, r27
    45c6:	b1 08       	sbc	r11, r1
    45c8:	46 01       	movw	r8, r12
    45ca:	be 2d       	mov	r27, r14
    45cc:	af 2d       	mov	r26, r15
    45ce:	90 e2       	ldi	r25, 0x20	; 32
    45d0:	e9 2e       	mov	r14, r25
    45d2:	f1 2c       	mov	r15, r1
    45d4:	0e 15       	cp	r16, r14
    45d6:	1f 05       	cpc	r17, r15
    45d8:	7c f0       	brlt	.+30     	; 0x45f8 <strtod+0x24a>
    45da:	fe 01       	movw	r30, r28
    45dc:	25 91       	lpm	r18, Z+
    45de:	35 91       	lpm	r19, Z+
    45e0:	45 91       	lpm	r20, Z+
    45e2:	54 91       	lpm	r21, Z
    45e4:	b4 01       	movw	r22, r8
    45e6:	8b 2f       	mov	r24, r27
    45e8:	9a 2f       	mov	r25, r26
    45ea:	75 dd       	rcall	.-1302   	; 0x40d6 <__mulsf3>
    45ec:	4b 01       	movw	r8, r22
    45ee:	b8 2f       	mov	r27, r24
    45f0:	a9 2f       	mov	r26, r25
    45f2:	0e 19       	sub	r16, r14
    45f4:	1f 09       	sbc	r17, r15
    45f6:	ee cf       	rjmp	.-36     	; 0x45d4 <strtod+0x226>
    45f8:	24 97       	sbiw	r28, 0x04	; 4
    45fa:	f5 94       	asr	r15
    45fc:	e7 94       	ror	r14
    45fe:	ca 15       	cp	r28, r10
    4600:	db 05       	cpc	r29, r11
    4602:	41 f7       	brne	.-48     	; 0x45d4 <strtod+0x226>
    4604:	64 01       	movw	r12, r8
    4606:	eb 2e       	mov	r14, r27
    4608:	fa 2e       	mov	r15, r26
    460a:	8e 2d       	mov	r24, r14
    460c:	88 0f       	add	r24, r24
    460e:	8f 2d       	mov	r24, r15
    4610:	88 1f       	adc	r24, r24
    4612:	8f 3f       	cpi	r24, 0xFF	; 255
    4614:	41 f0       	breq	.+16     	; 0x4626 <strtod+0x278>
    4616:	20 e0       	ldi	r18, 0x00	; 0
    4618:	30 e0       	ldi	r19, 0x00	; 0
    461a:	a9 01       	movw	r20, r18
    461c:	c7 01       	movw	r24, r14
    461e:	b6 01       	movw	r22, r12
    4620:	6f dc       	rcall	.-1826   	; 0x3f00 <__cmpsf2>
    4622:	81 11       	cpse	r24, r1
    4624:	06 c0       	rjmp	.+12     	; 0x4632 <strtod+0x284>
    4626:	82 e2       	ldi	r24, 0x22	; 34
    4628:	90 e0       	ldi	r25, 0x00	; 0
    462a:	90 93 04 05 	sts	0x0504, r25
    462e:	80 93 03 05 	sts	0x0503, r24
    4632:	c7 01       	movw	r24, r14
    4634:	b6 01       	movw	r22, r12
    4636:	09 c0       	rjmp	.+18     	; 0x464a <strtod+0x29c>
    4638:	60 e0       	ldi	r22, 0x00	; 0
    463a:	70 e0       	ldi	r23, 0x00	; 0
    463c:	80 e8       	ldi	r24, 0x80	; 128
    463e:	9f ef       	ldi	r25, 0xFF	; 255
    4640:	04 c0       	rjmp	.+8      	; 0x464a <strtod+0x29c>
    4642:	60 e0       	ldi	r22, 0x00	; 0
    4644:	70 e0       	ldi	r23, 0x00	; 0
    4646:	80 ec       	ldi	r24, 0xC0	; 192
    4648:	9f e7       	ldi	r25, 0x7F	; 127
    464a:	cd b7       	in	r28, 0x3d	; 61
    464c:	de b7       	in	r29, 0x3e	; 62
    464e:	ee e0       	ldi	r30, 0x0E	; 14
    4650:	88 c0       	rjmp	.+272    	; 0x4762 <__epilogue_restores__+0x8>

00004652 <isspace>:
    4652:	91 11       	cpse	r25, r1
    4654:	2e c0       	rjmp	.+92     	; 0x46b2 <__ctype_isfalse>
    4656:	80 32       	cpi	r24, 0x20	; 32
    4658:	19 f0       	breq	.+6      	; 0x4660 <isspace+0xe>
    465a:	89 50       	subi	r24, 0x09	; 9
    465c:	85 50       	subi	r24, 0x05	; 5
    465e:	d0 f7       	brcc	.-12     	; 0x4654 <isspace+0x2>
    4660:	08 95       	ret

00004662 <strncasecmp_P>:
    4662:	fb 01       	movw	r30, r22
    4664:	dc 01       	movw	r26, r24
    4666:	41 50       	subi	r20, 0x01	; 1
    4668:	50 40       	sbci	r21, 0x00	; 0
    466a:	88 f0       	brcs	.+34     	; 0x468e <strncasecmp_P+0x2c>
    466c:	8d 91       	ld	r24, X+
    466e:	81 34       	cpi	r24, 0x41	; 65
    4670:	1c f0       	brlt	.+6      	; 0x4678 <strncasecmp_P+0x16>
    4672:	8b 35       	cpi	r24, 0x5B	; 91
    4674:	0c f4       	brge	.+2      	; 0x4678 <strncasecmp_P+0x16>
    4676:	80 5e       	subi	r24, 0xE0	; 224
    4678:	65 91       	lpm	r22, Z+
    467a:	61 34       	cpi	r22, 0x41	; 65
    467c:	1c f0       	brlt	.+6      	; 0x4684 <strncasecmp_P+0x22>
    467e:	6b 35       	cpi	r22, 0x5B	; 91
    4680:	0c f4       	brge	.+2      	; 0x4684 <strncasecmp_P+0x22>
    4682:	60 5e       	subi	r22, 0xE0	; 224
    4684:	86 1b       	sub	r24, r22
    4686:	61 11       	cpse	r22, r1
    4688:	71 f3       	breq	.-36     	; 0x4666 <strncasecmp_P+0x4>
    468a:	99 0b       	sbc	r25, r25
    468c:	08 95       	ret
    468e:	88 1b       	sub	r24, r24
    4690:	fc cf       	rjmp	.-8      	; 0x468a <strncasecmp_P+0x28>

00004692 <strrev>:
    4692:	dc 01       	movw	r26, r24
    4694:	fc 01       	movw	r30, r24
    4696:	67 2f       	mov	r22, r23
    4698:	71 91       	ld	r23, Z+
    469a:	77 23       	and	r23, r23
    469c:	e1 f7       	brne	.-8      	; 0x4696 <strrev+0x4>
    469e:	32 97       	sbiw	r30, 0x02	; 2
    46a0:	04 c0       	rjmp	.+8      	; 0x46aa <strrev+0x18>
    46a2:	7c 91       	ld	r23, X
    46a4:	6d 93       	st	X+, r22
    46a6:	70 83       	st	Z, r23
    46a8:	62 91       	ld	r22, -Z
    46aa:	ae 17       	cp	r26, r30
    46ac:	bf 07       	cpc	r27, r31
    46ae:	c8 f3       	brcs	.-14     	; 0x46a2 <strrev+0x10>
    46b0:	08 95       	ret

000046b2 <__ctype_isfalse>:
    46b2:	99 27       	eor	r25, r25
    46b4:	88 27       	eor	r24, r24

000046b6 <__ctype_istrue>:
    46b6:	08 95       	ret

000046b8 <eeprom_read_dword>:
    46b8:	a6 e1       	ldi	r26, 0x16	; 22
    46ba:	b0 e0       	ldi	r27, 0x00	; 0
    46bc:	44 e0       	ldi	r20, 0x04	; 4
    46be:	50 e0       	ldi	r21, 0x00	; 0
    46c0:	0a c0       	rjmp	.+20     	; 0x46d6 <eeprom_read_blraw>

000046c2 <eeprom_write_dword>:
    46c2:	24 2f       	mov	r18, r20
    46c4:	17 d0       	rcall	.+46     	; 0x46f4 <eeprom_write_r18>
    46c6:	25 2f       	mov	r18, r21
    46c8:	15 d0       	rcall	.+42     	; 0x46f4 <eeprom_write_r18>
    46ca:	00 c0       	rjmp	.+0      	; 0x46cc <eeprom_write_word>

000046cc <eeprom_write_word>:
    46cc:	12 d0       	rcall	.+36     	; 0x46f2 <eeprom_write_byte>
    46ce:	27 2f       	mov	r18, r23
    46d0:	11 c0       	rjmp	.+34     	; 0x46f4 <eeprom_write_r18>

000046d2 <eeprom_read_block>:
    46d2:	dc 01       	movw	r26, r24
    46d4:	cb 01       	movw	r24, r22

000046d6 <eeprom_read_blraw>:
    46d6:	fc 01       	movw	r30, r24
    46d8:	f9 99       	sbic	0x1f, 1	; 31
    46da:	fe cf       	rjmp	.-4      	; 0x46d8 <eeprom_read_blraw+0x2>
    46dc:	06 c0       	rjmp	.+12     	; 0x46ea <eeprom_read_blraw+0x14>
    46de:	f2 bd       	out	0x22, r31	; 34
    46e0:	e1 bd       	out	0x21, r30	; 33
    46e2:	f8 9a       	sbi	0x1f, 0	; 31
    46e4:	31 96       	adiw	r30, 0x01	; 1
    46e6:	00 b4       	in	r0, 0x20	; 32
    46e8:	0d 92       	st	X+, r0
    46ea:	41 50       	subi	r20, 0x01	; 1
    46ec:	50 40       	sbci	r21, 0x00	; 0
    46ee:	b8 f7       	brcc	.-18     	; 0x46de <eeprom_read_blraw+0x8>
    46f0:	08 95       	ret

000046f2 <eeprom_write_byte>:
    46f2:	26 2f       	mov	r18, r22

000046f4 <eeprom_write_r18>:
    46f4:	f9 99       	sbic	0x1f, 1	; 31
    46f6:	fe cf       	rjmp	.-4      	; 0x46f4 <eeprom_write_r18>
    46f8:	1f ba       	out	0x1f, r1	; 31
    46fa:	92 bd       	out	0x22, r25	; 34
    46fc:	81 bd       	out	0x21, r24	; 33
    46fe:	20 bd       	out	0x20, r18	; 32
    4700:	0f b6       	in	r0, 0x3f	; 63
    4702:	f8 94       	cli
    4704:	fa 9a       	sbi	0x1f, 2	; 31
    4706:	f9 9a       	sbi	0x1f, 1	; 31
    4708:	0f be       	out	0x3f, r0	; 63
    470a:	01 96       	adiw	r24, 0x01	; 1
    470c:	08 95       	ret

0000470e <__muluhisi3>:
    470e:	40 d0       	rcall	.+128    	; 0x4790 <__umulhisi3>
    4710:	a5 9f       	mul	r26, r21
    4712:	90 0d       	add	r25, r0
    4714:	b4 9f       	mul	r27, r20
    4716:	90 0d       	add	r25, r0
    4718:	a4 9f       	mul	r26, r20
    471a:	80 0d       	add	r24, r0
    471c:	91 1d       	adc	r25, r1
    471e:	11 24       	eor	r1, r1
    4720:	08 95       	ret

00004722 <__prologue_saves__>:
    4722:	2f 92       	push	r2
    4724:	3f 92       	push	r3
    4726:	4f 92       	push	r4
    4728:	5f 92       	push	r5
    472a:	6f 92       	push	r6
    472c:	7f 92       	push	r7
    472e:	8f 92       	push	r8
    4730:	9f 92       	push	r9
    4732:	af 92       	push	r10
    4734:	bf 92       	push	r11
    4736:	cf 92       	push	r12
    4738:	df 92       	push	r13
    473a:	ef 92       	push	r14
    473c:	ff 92       	push	r15
    473e:	0f 93       	push	r16
    4740:	1f 93       	push	r17
    4742:	cf 93       	push	r28
    4744:	df 93       	push	r29
    4746:	cd b7       	in	r28, 0x3d	; 61
    4748:	de b7       	in	r29, 0x3e	; 62
    474a:	ca 1b       	sub	r28, r26
    474c:	db 0b       	sbc	r29, r27
    474e:	0f b6       	in	r0, 0x3f	; 63
    4750:	f8 94       	cli
    4752:	de bf       	out	0x3e, r29	; 62
    4754:	0f be       	out	0x3f, r0	; 63
    4756:	cd bf       	out	0x3d, r28	; 61
    4758:	09 94       	ijmp

0000475a <__epilogue_restores__>:
    475a:	2a 88       	ldd	r2, Y+18	; 0x12
    475c:	39 88       	ldd	r3, Y+17	; 0x11
    475e:	48 88       	ldd	r4, Y+16	; 0x10
    4760:	5f 84       	ldd	r5, Y+15	; 0x0f
    4762:	6e 84       	ldd	r6, Y+14	; 0x0e
    4764:	7d 84       	ldd	r7, Y+13	; 0x0d
    4766:	8c 84       	ldd	r8, Y+12	; 0x0c
    4768:	9b 84       	ldd	r9, Y+11	; 0x0b
    476a:	aa 84       	ldd	r10, Y+10	; 0x0a
    476c:	b9 84       	ldd	r11, Y+9	; 0x09
    476e:	c8 84       	ldd	r12, Y+8	; 0x08
    4770:	df 80       	ldd	r13, Y+7	; 0x07
    4772:	ee 80       	ldd	r14, Y+6	; 0x06
    4774:	fd 80       	ldd	r15, Y+5	; 0x05
    4776:	0c 81       	ldd	r16, Y+4	; 0x04
    4778:	1b 81       	ldd	r17, Y+3	; 0x03
    477a:	aa 81       	ldd	r26, Y+2	; 0x02
    477c:	b9 81       	ldd	r27, Y+1	; 0x01
    477e:	ce 0f       	add	r28, r30
    4780:	d1 1d       	adc	r29, r1
    4782:	0f b6       	in	r0, 0x3f	; 63
    4784:	f8 94       	cli
    4786:	de bf       	out	0x3e, r29	; 62
    4788:	0f be       	out	0x3f, r0	; 63
    478a:	cd bf       	out	0x3d, r28	; 61
    478c:	ed 01       	movw	r28, r26
    478e:	08 95       	ret

00004790 <__umulhisi3>:
    4790:	a2 9f       	mul	r26, r18
    4792:	b0 01       	movw	r22, r0
    4794:	b3 9f       	mul	r27, r19
    4796:	c0 01       	movw	r24, r0
    4798:	a3 9f       	mul	r26, r19
    479a:	70 0d       	add	r23, r0
    479c:	81 1d       	adc	r24, r1
    479e:	11 24       	eor	r1, r1
    47a0:	91 1d       	adc	r25, r1
    47a2:	b2 9f       	mul	r27, r18
    47a4:	70 0d       	add	r23, r0
    47a6:	81 1d       	adc	r24, r1
    47a8:	11 24       	eor	r1, r1
    47aa:	91 1d       	adc	r25, r1
    47ac:	08 95       	ret

000047ae <_exit>:
    47ae:	f8 94       	cli

000047b0 <__stop_program>:
    47b0:	ff cf       	rjmp	.-2      	; 0x47b0 <__stop_program>


C2CA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  00004bca  00004c5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004bca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000039d  00800146  00800146  00004ca4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004ca4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004d00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00004d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004686  00000000  00000000  00004db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000433  00000000  00000000  0000943e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000029e1  00000000  00000000  00009871  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000290  00000000  00000000  0000c254  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000106d4  00000000  00000000  0000c4e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004d0e  00000000  00000000  0001cbb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000948  00000000  00000000  000218c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00000624  00000000  00000000  0002220e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	85 c1       	rjmp	.+778    	; 0x30c <__ctors_end>
       2:	00 00       	nop
       4:	a0 c1       	rjmp	.+832    	; 0x346 <__bad_interrupt>
       6:	00 00       	nop
       8:	9e c1       	rjmp	.+828    	; 0x346 <__bad_interrupt>
       a:	00 00       	nop
       c:	9c c1       	rjmp	.+824    	; 0x346 <__bad_interrupt>
       e:	00 00       	nop
      10:	9a c1       	rjmp	.+820    	; 0x346 <__bad_interrupt>
      12:	00 00       	nop
      14:	98 c1       	rjmp	.+816    	; 0x346 <__bad_interrupt>
      16:	00 00       	nop
      18:	96 c1       	rjmp	.+812    	; 0x346 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	1f c5       	rjmp	.+2622   	; 0xa5c <__vector_7>
      1e:	00 00       	nop
      20:	92 c1       	rjmp	.+804    	; 0x346 <__bad_interrupt>
      22:	00 00       	nop
      24:	90 c1       	rjmp	.+800    	; 0x346 <__bad_interrupt>
      26:	00 00       	nop
      28:	8e c1       	rjmp	.+796    	; 0x346 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8c c1       	rjmp	.+792    	; 0x346 <__bad_interrupt>
      2e:	00 00       	nop
      30:	8a c1       	rjmp	.+788    	; 0x346 <__bad_interrupt>
      32:	00 00       	nop
      34:	88 c1       	rjmp	.+784    	; 0x346 <__bad_interrupt>
      36:	00 00       	nop
      38:	67 c4       	rjmp	.+2254   	; 0x908 <__vector_14>
      3a:	00 00       	nop
      3c:	84 c1       	rjmp	.+776    	; 0x346 <__bad_interrupt>
      3e:	00 00       	nop
      40:	82 c1       	rjmp	.+772    	; 0x346 <__bad_interrupt>
      42:	00 00       	nop
      44:	80 c1       	rjmp	.+768    	; 0x346 <__bad_interrupt>
      46:	00 00       	nop
      48:	2b c4       	rjmp	.+2134   	; 0x8a0 <__vector_18>
      4a:	00 00       	nop
      4c:	e9 c3       	rjmp	.+2002   	; 0x820 <__vector_19>
      4e:	00 00       	nop
      50:	7a c1       	rjmp	.+756    	; 0x346 <__bad_interrupt>
      52:	00 00       	nop
      54:	78 c1       	rjmp	.+752    	; 0x346 <__bad_interrupt>
      56:	00 00       	nop
      58:	76 c1       	rjmp	.+748    	; 0x346 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	74 c1       	rjmp	.+744    	; 0x346 <__bad_interrupt>
      5e:	00 00       	nop
      60:	72 c1       	rjmp	.+740    	; 0x346 <__bad_interrupt>
      62:	00 00       	nop
      64:	70 c1       	rjmp	.+736    	; 0x346 <__bad_interrupt>
      66:	00 00       	nop
      68:	20 0f       	add	r18, r16
      6a:	30 0f       	add	r19, r16
      6c:	4b 10       	cpse	r4, r11
      6e:	66 11       	cpse	r22, r6
      70:	81 12       	cpse	r8, r17
      72:	9c 13       	cpse	r25, r28
      74:	ac 13       	cpse	r26, r28
      76:	bc 13       	cpse	r27, r28
      78:	67 16       	cp	r6, r23
      7a:	67 16       	cp	r6, r23
      7c:	67 16       	cp	r6, r23
      7e:	67 16       	cp	r6, r23
      80:	67 16       	cp	r6, r23
      82:	67 16       	cp	r6, r23
      84:	67 16       	cp	r6, r23
      86:	67 16       	cp	r6, r23
      88:	67 16       	cp	r6, r23
      8a:	67 16       	cp	r6, r23
      8c:	67 16       	cp	r6, r23
      8e:	67 16       	cp	r6, r23
      90:	67 16       	cp	r6, r23
      92:	67 16       	cp	r6, r23
      94:	67 16       	cp	r6, r23
      96:	67 16       	cp	r6, r23
      98:	67 16       	cp	r6, r23
      9a:	67 16       	cp	r6, r23
      9c:	67 16       	cp	r6, r23
      9e:	67 16       	cp	r6, r23
      a0:	67 16       	cp	r6, r23
      a2:	67 16       	cp	r6, r23
      a4:	67 16       	cp	r6, r23
      a6:	67 16       	cp	r6, r23
      a8:	67 16       	cp	r6, r23
      aa:	67 16       	cp	r6, r23
      ac:	67 16       	cp	r6, r23
      ae:	67 16       	cp	r6, r23
      b0:	67 16       	cp	r6, r23
      b2:	67 16       	cp	r6, r23
      b4:	67 16       	cp	r6, r23
      b6:	67 16       	cp	r6, r23
      b8:	67 16       	cp	r6, r23
      ba:	67 16       	cp	r6, r23
      bc:	67 16       	cp	r6, r23
      be:	67 16       	cp	r6, r23
      c0:	67 16       	cp	r6, r23
      c2:	67 16       	cp	r6, r23
      c4:	67 16       	cp	r6, r23
      c6:	67 16       	cp	r6, r23
      c8:	67 16       	cp	r6, r23
      ca:	67 16       	cp	r6, r23
      cc:	67 16       	cp	r6, r23
      ce:	67 16       	cp	r6, r23
      d0:	67 16       	cp	r6, r23
      d2:	67 16       	cp	r6, r23
      d4:	67 16       	cp	r6, r23
      d6:	67 16       	cp	r6, r23
      d8:	67 16       	cp	r6, r23
      da:	67 16       	cp	r6, r23
      dc:	67 16       	cp	r6, r23
      de:	67 16       	cp	r6, r23
      e0:	67 16       	cp	r6, r23
      e2:	67 16       	cp	r6, r23
      e4:	67 16       	cp	r6, r23
      e6:	67 16       	cp	r6, r23
      e8:	67 16       	cp	r6, r23
      ea:	67 16       	cp	r6, r23
      ec:	67 16       	cp	r6, r23
      ee:	67 16       	cp	r6, r23
      f0:	67 16       	cp	r6, r23
      f2:	67 16       	cp	r6, r23
      f4:	67 16       	cp	r6, r23
      f6:	67 16       	cp	r6, r23
      f8:	67 16       	cp	r6, r23
      fa:	67 16       	cp	r6, r23
      fc:	67 16       	cp	r6, r23
      fe:	67 16       	cp	r6, r23
     100:	67 16       	cp	r6, r23
     102:	67 16       	cp	r6, r23
     104:	67 16       	cp	r6, r23
     106:	67 16       	cp	r6, r23
     108:	67 16       	cp	r6, r23
     10a:	67 16       	cp	r6, r23
     10c:	67 16       	cp	r6, r23
     10e:	67 16       	cp	r6, r23
     110:	67 16       	cp	r6, r23
     112:	67 16       	cp	r6, r23
     114:	67 16       	cp	r6, r23
     116:	67 16       	cp	r6, r23
     118:	67 16       	cp	r6, r23
     11a:	67 16       	cp	r6, r23
     11c:	67 16       	cp	r6, r23
     11e:	67 16       	cp	r6, r23
     120:	67 16       	cp	r6, r23
     122:	67 16       	cp	r6, r23
     124:	67 16       	cp	r6, r23
     126:	67 16       	cp	r6, r23
     128:	67 16       	cp	r6, r23
     12a:	67 16       	cp	r6, r23
     12c:	67 16       	cp	r6, r23
     12e:	67 16       	cp	r6, r23
     130:	cc 13       	cpse	r28, r28
     132:	dc 13       	cpse	r29, r28
     134:	ec 13       	cpse	r30, r28
     136:	fc 13       	cpse	r31, r28
     138:	0c 14       	cp	r0, r12
     13a:	1c 14       	cp	r1, r12
     13c:	2c 14       	cp	r2, r12
     13e:	3c 14       	cp	r3, r12
     140:	67 16       	cp	r6, r23
     142:	67 16       	cp	r6, r23
     144:	67 16       	cp	r6, r23
     146:	67 16       	cp	r6, r23
     148:	67 16       	cp	r6, r23
     14a:	67 16       	cp	r6, r23
     14c:	67 16       	cp	r6, r23
     14e:	67 16       	cp	r6, r23
     150:	67 16       	cp	r6, r23
     152:	67 16       	cp	r6, r23
     154:	67 16       	cp	r6, r23
     156:	67 16       	cp	r6, r23
     158:	67 16       	cp	r6, r23
     15a:	67 16       	cp	r6, r23
     15c:	67 16       	cp	r6, r23
     15e:	67 16       	cp	r6, r23
     160:	67 16       	cp	r6, r23
     162:	67 16       	cp	r6, r23
     164:	67 16       	cp	r6, r23
     166:	67 16       	cp	r6, r23
     168:	67 16       	cp	r6, r23
     16a:	67 16       	cp	r6, r23
     16c:	67 16       	cp	r6, r23
     16e:	67 16       	cp	r6, r23
     170:	67 16       	cp	r6, r23
     172:	67 16       	cp	r6, r23
     174:	67 16       	cp	r6, r23
     176:	67 16       	cp	r6, r23
     178:	67 16       	cp	r6, r23
     17a:	67 16       	cp	r6, r23
     17c:	67 16       	cp	r6, r23
     17e:	67 16       	cp	r6, r23
     180:	67 16       	cp	r6, r23
     182:	67 16       	cp	r6, r23
     184:	67 16       	cp	r6, r23
     186:	67 16       	cp	r6, r23
     188:	67 16       	cp	r6, r23
     18a:	67 16       	cp	r6, r23
     18c:	67 16       	cp	r6, r23
     18e:	67 16       	cp	r6, r23
     190:	67 16       	cp	r6, r23
     192:	67 16       	cp	r6, r23
     194:	67 16       	cp	r6, r23
     196:	67 16       	cp	r6, r23
     198:	67 16       	cp	r6, r23
     19a:	67 16       	cp	r6, r23
     19c:	67 16       	cp	r6, r23
     19e:	67 16       	cp	r6, r23
     1a0:	67 16       	cp	r6, r23
     1a2:	67 16       	cp	r6, r23
     1a4:	67 16       	cp	r6, r23
     1a6:	67 16       	cp	r6, r23
     1a8:	67 16       	cp	r6, r23
     1aa:	67 16       	cp	r6, r23
     1ac:	67 16       	cp	r6, r23
     1ae:	67 16       	cp	r6, r23
     1b0:	67 16       	cp	r6, r23
     1b2:	67 16       	cp	r6, r23
     1b4:	67 16       	cp	r6, r23
     1b6:	67 16       	cp	r6, r23
     1b8:	67 16       	cp	r6, r23
     1ba:	67 16       	cp	r6, r23
     1bc:	67 16       	cp	r6, r23
     1be:	67 16       	cp	r6, r23
     1c0:	67 16       	cp	r6, r23
     1c2:	67 16       	cp	r6, r23
     1c4:	67 16       	cp	r6, r23
     1c6:	67 16       	cp	r6, r23
     1c8:	67 16       	cp	r6, r23
     1ca:	67 16       	cp	r6, r23
     1cc:	67 16       	cp	r6, r23
     1ce:	67 16       	cp	r6, r23
     1d0:	67 16       	cp	r6, r23
     1d2:	67 16       	cp	r6, r23
     1d4:	67 16       	cp	r6, r23
     1d6:	67 16       	cp	r6, r23
     1d8:	67 16       	cp	r6, r23
     1da:	67 16       	cp	r6, r23
     1dc:	67 16       	cp	r6, r23
     1de:	67 16       	cp	r6, r23
     1e0:	67 16       	cp	r6, r23
     1e2:	67 16       	cp	r6, r23
     1e4:	67 16       	cp	r6, r23
     1e6:	67 16       	cp	r6, r23
     1e8:	67 16       	cp	r6, r23
     1ea:	67 16       	cp	r6, r23
     1ec:	67 16       	cp	r6, r23
     1ee:	67 16       	cp	r6, r23
     1f0:	67 16       	cp	r6, r23
     1f2:	67 16       	cp	r6, r23
     1f4:	67 16       	cp	r6, r23
     1f6:	67 16       	cp	r6, r23
     1f8:	4c 14       	cp	r4, r12
     1fa:	5d 14       	cp	r5, r13
     1fc:	6e 14       	cp	r6, r14
     1fe:	7f 14       	cp	r7, r15
     200:	90 14       	cp	r9, r0
     202:	ac 15       	cp	r26, r12
     204:	bd 15       	cp	r27, r13
     206:	ce 15       	cp	r28, r14
     208:	67 16       	cp	r6, r23
     20a:	67 16       	cp	r6, r23
     20c:	67 16       	cp	r6, r23
     20e:	67 16       	cp	r6, r23
     210:	67 16       	cp	r6, r23
     212:	67 16       	cp	r6, r23
     214:	67 16       	cp	r6, r23
     216:	67 16       	cp	r6, r23
     218:	67 16       	cp	r6, r23
     21a:	67 16       	cp	r6, r23
     21c:	67 16       	cp	r6, r23
     21e:	67 16       	cp	r6, r23
     220:	67 16       	cp	r6, r23
     222:	67 16       	cp	r6, r23
     224:	67 16       	cp	r6, r23
     226:	67 16       	cp	r6, r23
     228:	67 16       	cp	r6, r23
     22a:	67 16       	cp	r6, r23
     22c:	67 16       	cp	r6, r23
     22e:	67 16       	cp	r6, r23
     230:	67 16       	cp	r6, r23
     232:	67 16       	cp	r6, r23
     234:	67 16       	cp	r6, r23
     236:	67 16       	cp	r6, r23
     238:	67 16       	cp	r6, r23
     23a:	67 16       	cp	r6, r23
     23c:	67 16       	cp	r6, r23
     23e:	67 16       	cp	r6, r23
     240:	67 16       	cp	r6, r23
     242:	67 16       	cp	r6, r23
     244:	67 16       	cp	r6, r23
     246:	67 16       	cp	r6, r23
     248:	67 16       	cp	r6, r23
     24a:	67 16       	cp	r6, r23
     24c:	67 16       	cp	r6, r23
     24e:	67 16       	cp	r6, r23
     250:	67 16       	cp	r6, r23
     252:	67 16       	cp	r6, r23
     254:	67 16       	cp	r6, r23
     256:	67 16       	cp	r6, r23
     258:	67 16       	cp	r6, r23
     25a:	67 16       	cp	r6, r23
     25c:	67 16       	cp	r6, r23
     25e:	67 16       	cp	r6, r23
     260:	67 16       	cp	r6, r23
     262:	67 16       	cp	r6, r23
     264:	67 16       	cp	r6, r23
     266:	67 16       	cp	r6, r23
     268:	67 16       	cp	r6, r23
     26a:	67 16       	cp	r6, r23
     26c:	67 16       	cp	r6, r23
     26e:	67 16       	cp	r6, r23
     270:	67 16       	cp	r6, r23
     272:	67 16       	cp	r6, r23
     274:	67 16       	cp	r6, r23
     276:	67 16       	cp	r6, r23
     278:	67 16       	cp	r6, r23
     27a:	67 16       	cp	r6, r23
     27c:	67 16       	cp	r6, r23
     27e:	67 16       	cp	r6, r23
     280:	67 16       	cp	r6, r23
     282:	67 16       	cp	r6, r23
     284:	67 16       	cp	r6, r23
     286:	67 16       	cp	r6, r23
     288:	67 16       	cp	r6, r23
     28a:	67 16       	cp	r6, r23
     28c:	67 16       	cp	r6, r23
     28e:	67 16       	cp	r6, r23
     290:	67 16       	cp	r6, r23
     292:	67 16       	cp	r6, r23
     294:	67 16       	cp	r6, r23
     296:	67 16       	cp	r6, r23
     298:	67 16       	cp	r6, r23
     29a:	67 16       	cp	r6, r23
     29c:	67 16       	cp	r6, r23
     29e:	67 16       	cp	r6, r23
     2a0:	67 16       	cp	r6, r23
     2a2:	67 16       	cp	r6, r23
     2a4:	67 16       	cp	r6, r23
     2a6:	67 16       	cp	r6, r23
     2a8:	67 16       	cp	r6, r23
     2aa:	67 16       	cp	r6, r23
     2ac:	67 16       	cp	r6, r23
     2ae:	67 16       	cp	r6, r23
     2b0:	67 16       	cp	r6, r23
     2b2:	67 16       	cp	r6, r23
     2b4:	67 16       	cp	r6, r23
     2b6:	67 16       	cp	r6, r23
     2b8:	67 16       	cp	r6, r23
     2ba:	67 16       	cp	r6, r23
     2bc:	67 16       	cp	r6, r23
     2be:	67 16       	cp	r6, r23
     2c0:	df 15       	cp	r29, r15
     2c2:	f0 15       	cp	r31, r0
     2c4:	01 16       	cp	r0, r17
     2c6:	12 16       	cp	r1, r18
     2c8:	23 16       	cp	r2, r19
     2ca:	34 16       	cp	r3, r20
     2cc:	45 16       	cp	r4, r21
     2ce:	56 16       	cp	r5, r22

000002d0 <__trampolines_end>:
     2d0:	4e 41       	sbci	r20, 0x1E	; 30
     2d2:	4e 49       	sbci	r20, 0x9E	; 158

000002d3 <pstr_inity>:
     2d3:	49 4e 49 54 59                                      INITY

000002d8 <pstr_inf>:
     2d8:	49 4e 46                                            INF

000002db <pwr_m10>:
     2db:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     2eb:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000002f3 <pwr_p10>:
     2f3:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     303:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

0000030c <__ctors_end>:
     30c:	11 24       	eor	r1, r1
     30e:	1f be       	out	0x3f, r1	; 63
     310:	cf ef       	ldi	r28, 0xFF	; 255
     312:	d8 e0       	ldi	r29, 0x08	; 8
     314:	de bf       	out	0x3e, r29	; 62
     316:	cd bf       	out	0x3d, r28	; 61

00000318 <__do_copy_data>:
     318:	11 e0       	ldi	r17, 0x01	; 1
     31a:	a0 e0       	ldi	r26, 0x00	; 0
     31c:	b1 e0       	ldi	r27, 0x01	; 1
     31e:	ea ec       	ldi	r30, 0xCA	; 202
     320:	fb e4       	ldi	r31, 0x4B	; 75
     322:	02 c0       	rjmp	.+4      	; 0x328 <__do_copy_data+0x10>
     324:	05 90       	lpm	r0, Z+
     326:	0d 92       	st	X+, r0
     328:	a6 34       	cpi	r26, 0x46	; 70
     32a:	b1 07       	cpc	r27, r17
     32c:	d9 f7       	brne	.-10     	; 0x324 <__do_copy_data+0xc>

0000032e <__do_clear_bss>:
     32e:	24 e0       	ldi	r18, 0x04	; 4
     330:	a6 e4       	ldi	r26, 0x46	; 70
     332:	b1 e0       	ldi	r27, 0x01	; 1
     334:	01 c0       	rjmp	.+2      	; 0x338 <.do_clear_bss_start>

00000336 <.do_clear_bss_loop>:
     336:	1d 92       	st	X+, r1

00000338 <.do_clear_bss_start>:
     338:	a3 3e       	cpi	r26, 0xE3	; 227
     33a:	b2 07       	cpc	r27, r18
     33c:	e1 f7       	brne	.-8      	; 0x336 <.do_clear_bss_loop>
     33e:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <main>
     342:	0c 94 e3 25 	jmp	0x4bc6	; 0x4bc6 <_exit>

00000346 <__bad_interrupt>:
     346:	5c ce       	rjmp	.-840    	; 0x0 <__vectors>

00000348 <uart_init>:
 * This function will initialize the UART baud rate registers with the correct
 * values using the AVR libc setbaud utility. In addition set the UART to
 * 8-bit, 1 stop and no parity.
 */
static void uart_init(void)
{
     348:	cf 93       	push	r28
     34a:	df 93       	push	r29
     34c:	cd b7       	in	r28, 0x3d	; 61
     34e:	de b7       	in	r29, 0x3e	; 62
     350:	69 97       	sbiw	r28, 0x19	; 25
     352:	0f b6       	in	r0, 0x3f	; 63
     354:	f8 94       	cli
     356:	de bf       	out	0x3e, r29	; 62
     358:	0f be       	out	0x3f, r0	; 63
     35a:	cd bf       	out	0x3d, r28	; 61
#if defined UBRR0H
	// get the values from the setbaud tool
	UBRR0H = UBRRH_VALUE;
     35c:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBRRL_VALUE;
     360:	82 e2       	ldi	r24, 0x22	; 34
     362:	80 93 c4 00 	sts	0x00C4, r24
#else
#error "Device is not supported by the driver"
#endif

#if USE_2X
	UCSR0A |= (1 << U2X0);
     366:	e0 ec       	ldi	r30, 0xC0	; 192
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	80 81       	ld	r24, Z
     36c:	82 60       	ori	r24, 0x02	; 2
     36e:	80 83       	st	Z, r24
#endif

	// enable RX and TX and set interrupts on rx complete
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
     370:	88 e9       	ldi	r24, 0x98	; 152
     372:	80 93 c1 00 	sts	0x00C1, r24

	// 8-bit, 1 stop bit, no parity, asynchronous UART
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00) | (0 << USBS0) |
     376:	86 e0       	ldi	r24, 0x06	; 6
     378:	80 93 c2 00 	sts	0x00C2, r24
 * \retval struct ring_buffer a struct containing the ring buffer
 */
static inline struct ring_buffer ring_buffer_init(uint8_t *buffer, uint8_t size)
{
	struct ring_buffer ring;
	ring.write_offset = 0;
     37c:	1d 8a       	std	Y+21, r1	; 0x15
	ring.read_offset = 0;
     37e:	1e 8a       	std	Y+22, r1	; 0x16
	ring.size = size;
     380:	8f ef       	ldi	r24, 0xFF	; 255
     382:	8f 8b       	std	Y+23, r24	; 0x17
	ring.buffer = buffer;
     384:	27 e0       	ldi	r18, 0x07	; 7
     386:	32 e0       	ldi	r19, 0x02	; 2
     388:	39 8f       	std	Y+25, r19	; 0x19
     38a:	28 8f       	std	Y+24, r18	; 0x18
	return ring;
     38c:	95 e0       	ldi	r25, 0x05	; 5
     38e:	fe 01       	movw	r30, r28
     390:	75 96       	adiw	r30, 0x15	; 21
     392:	de 01       	movw	r26, r28
     394:	1b 96       	adiw	r26, 0x0b	; 11
     396:	01 90       	ld	r0, Z+
     398:	0d 92       	st	X+, r0
     39a:	9a 95       	dec	r25
     39c:	e1 f7       	brne	.-8      	; 0x396 <uart_init+0x4e>
     39e:	95 e0       	ldi	r25, 0x05	; 5
     3a0:	fe 01       	movw	r30, r28
     3a2:	3b 96       	adiw	r30, 0x0b	; 11
     3a4:	de 01       	movw	r26, r28
     3a6:	50 96       	adiw	r26, 0x10	; 16
     3a8:	01 90       	ld	r0, Z+
     3aa:	0d 92       	st	X+, r0
     3ac:	9a 95       	dec	r25
     3ae:	e1 f7       	brne	.-8      	; 0x3a8 <uart_init+0x60>
			(0 << UPM01) | (0 << UPM00) | (0 << UMSEL01) |
			(0 << UMSEL00);

	// initialize the in and out buffer for the UART
	ring_buffer_out = ring_buffer_init(out_buffer, BUFFER_SIZE);
     3b0:	95 e0       	ldi	r25, 0x05	; 5
     3b2:	fe 01       	movw	r30, r28
     3b4:	70 96       	adiw	r30, 0x10	; 16
     3b6:	ac ed       	ldi	r26, 0xDC	; 220
     3b8:	b4 e0       	ldi	r27, 0x04	; 4
     3ba:	01 90       	ld	r0, Z+
     3bc:	0d 92       	st	X+, r0
     3be:	9a 95       	dec	r25
     3c0:	e1 f7       	brne	.-8      	; 0x3ba <uart_init+0x72>
 * \retval struct ring_buffer a struct containing the ring buffer
 */
static inline struct ring_buffer ring_buffer_init(uint8_t *buffer, uint8_t size)
{
	struct ring_buffer ring;
	ring.write_offset = 0;
     3c2:	1d 8a       	std	Y+21, r1	; 0x15
	ring.read_offset = 0;
     3c4:	1e 8a       	std	Y+22, r1	; 0x16
	ring.size = size;
     3c6:	8f 8b       	std	Y+23, r24	; 0x17
	ring.buffer = buffer;
     3c8:	8e e0       	ldi	r24, 0x0E	; 14
     3ca:	93 e0       	ldi	r25, 0x03	; 3
     3cc:	99 8f       	std	Y+25, r25	; 0x19
     3ce:	88 8f       	std	Y+24, r24	; 0x18
	return ring;
     3d0:	85 e0       	ldi	r24, 0x05	; 5
     3d2:	fe 01       	movw	r30, r28
     3d4:	75 96       	adiw	r30, 0x15	; 21
     3d6:	de 01       	movw	r26, r28
     3d8:	11 96       	adiw	r26, 0x01	; 1
     3da:	01 90       	ld	r0, Z+
     3dc:	0d 92       	st	X+, r0
     3de:	8a 95       	dec	r24
     3e0:	e1 f7       	brne	.-8      	; 0x3da <uart_init+0x92>
     3e2:	85 e0       	ldi	r24, 0x05	; 5
     3e4:	fe 01       	movw	r30, r28
     3e6:	31 96       	adiw	r30, 0x01	; 1
     3e8:	de 01       	movw	r26, r28
     3ea:	16 96       	adiw	r26, 0x06	; 6
     3ec:	01 90       	ld	r0, Z+
     3ee:	0d 92       	st	X+, r0
     3f0:	8a 95       	dec	r24
     3f2:	e1 f7       	brne	.-8      	; 0x3ec <uart_init+0xa4>
	ring_buffer_in = ring_buffer_init(in_buffer, BUFFER_SIZE);
     3f4:	85 e0       	ldi	r24, 0x05	; 5
     3f6:	fe 01       	movw	r30, r28
     3f8:	36 96       	adiw	r30, 0x06	; 6
     3fa:	ad ea       	ldi	r26, 0xAD	; 173
     3fc:	b4 e0       	ldi	r27, 0x04	; 4
     3fe:	01 90       	ld	r0, Z+
     400:	0d 92       	st	X+, r0
     402:	8a 95       	dec	r24
     404:	e1 f7       	brne	.-8      	; 0x3fe <uart_init+0xb6>
}
     406:	69 96       	adiw	r28, 0x19	; 25
     408:	0f b6       	in	r0, 0x3f	; 63
     40a:	f8 94       	cli
     40c:	de bf       	out	0x3e, r29	; 62
     40e:	0f be       	out	0x3f, r0	; 63
     410:	cd bf       	out	0x3d, r28	; 61
     412:	df 91       	pop	r29
     414:	cf 91       	pop	r28
     416:	08 95       	ret

00000418 <MaxRTDinit>:
*************************************************/
static inline void MaxRTDinit( unsigned char dataWrite, unsigned char ch)
{
	unsigned char dummy;

	switch (ch)
     418:	62 30       	cpi	r22, 0x02	; 2
     41a:	59 f0       	breq	.+22     	; 0x432 <MaxRTDinit+0x1a>
     41c:	18 f4       	brcc	.+6      	; 0x424 <MaxRTDinit+0xc>
     41e:	61 30       	cpi	r22, 0x01	; 1
     420:	31 f0       	breq	.+12     	; 0x42e <MaxRTDinit+0x16>
     422:	0c c0       	rjmp	.+24     	; 0x43c <MaxRTDinit+0x24>
     424:	63 30       	cpi	r22, 0x03	; 3
     426:	39 f0       	breq	.+14     	; 0x436 <MaxRTDinit+0x1e>
     428:	64 30       	cpi	r22, 0x04	; 4
     42a:	39 f0       	breq	.+14     	; 0x43a <MaxRTDinit+0x22>
     42c:	07 c0       	rjmp	.+14     	; 0x43c <MaxRTDinit+0x24>
	{
		case 1:
		PORTD &= 0b11101111;	// Set CS1 low
     42e:	5c 98       	cbi	0x0b, 4	; 11
		break;
     430:	05 c0       	rjmp	.+10     	; 0x43c <MaxRTDinit+0x24>
		
		case 2:
		PORTD &= 0b11011111;	// Set CS2 low
     432:	5d 98       	cbi	0x0b, 5	; 11
		break;
     434:	03 c0       	rjmp	.+6      	; 0x43c <MaxRTDinit+0x24>
		
		case 3:
		PORTD &= 0b10111111;	// Set CS3 low
     436:	5e 98       	cbi	0x0b, 6	; 11
		break;
     438:	01 c0       	rjmp	.+2      	; 0x43c <MaxRTDinit+0x24>
		
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
     43a:	5f 98       	cbi	0x0b, 7	; 11
		break;
	}
	SPDR = 0x80;				// Configuration
     43c:	90 e8       	ldi	r25, 0x80	; 128
     43e:	9e bd       	out	0x2e, r25	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     440:	0d b4       	in	r0, 0x2d	; 45
     442:	07 fe       	sbrs	r0, 7
     444:	fd cf       	rjmp	.-6      	; 0x440 <MaxRTDinit+0x28>
	dummy = SPDR;				//just for clearing SPIF
     446:	9e b5       	in	r25, 0x2e	; 46
	SPDR = dataWrite;
     448:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     44a:	0d b4       	in	r0, 0x2d	; 45
     44c:	07 fe       	sbrs	r0, 7
     44e:	fd cf       	rjmp	.-6      	; 0x44a <MaxRTDinit+0x32>
	dummy = SPDR;
     450:	8e b5       	in	r24, 0x2e	; 46
	
	PORTD |= 0b11110000;		// Set all CS High
     452:	8b b1       	in	r24, 0x0b	; 11
     454:	80 6f       	ori	r24, 0xF0	; 240
     456:	8b b9       	out	0x0b, r24	; 11
     458:	08 95       	ret

0000045a <GenCrc16>:
		idx ++;
	}	
}

static inline int GenCrc16(char c[], int nByte)	// CRC-CCITT (XModem)
{
     45a:	cf 93       	push	r28
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
     45c:	16 16       	cp	r1, r22
     45e:	17 06       	cpc	r1, r23
     460:	3c f5       	brge	.+78     	; 0x4b0 <GenCrc16+0x56>
     462:	fc 01       	movw	r30, r24
     464:	68 0f       	add	r22, r24
     466:	79 1f       	adc	r23, r25
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	90 e0       	ldi	r25, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
     46c:	b8 e0       	ldi	r27, 0x08	; 8
     46e:	a0 e0       	ldi	r26, 0x00	; 0
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
     470:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
     472:	29 2f       	mov	r18, r25
     474:	33 27       	eor	r19, r19
     476:	27 fd       	sbrc	r18, 7
     478:	3a 95       	dec	r19
     47a:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
     47c:	32 2f       	mov	r19, r18
     47e:	22 27       	eor	r18, r18
     480:	4b 2f       	mov	r20, r27
     482:	5a 2f       	mov	r21, r26
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
     484:	33 23       	and	r19, r19
     486:	3c f4       	brge	.+14     	; 0x496 <GenCrc16+0x3c>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
     488:	22 0f       	add	r18, r18
     48a:	33 1f       	adc	r19, r19
     48c:	c1 e2       	ldi	r28, 0x21	; 33
     48e:	2c 27       	eor	r18, r28
     490:	c0 e1       	ldi	r28, 0x10	; 16
     492:	3c 27       	eor	r19, r28
     494:	02 c0       	rjmp	.+4      	; 0x49a <GenCrc16+0x40>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
     496:	22 0f       	add	r18, r18
     498:	33 1f       	adc	r19, r19
     49a:	41 50       	subi	r20, 0x01	; 1
     49c:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
     49e:	91 f7       	brne	.-28     	; 0x484 <GenCrc16+0x2a>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
     4a0:	98 2f       	mov	r25, r24
     4a2:	88 27       	eor	r24, r24
     4a4:	82 27       	eor	r24, r18
     4a6:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
     4a8:	e6 17       	cp	r30, r22
     4aa:	f7 07       	cpc	r31, r23
     4ac:	09 f7       	brne	.-62     	; 0x470 <GenCrc16+0x16>
     4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <GenCrc16+0x5a>
{
	int Polynominal = 0x1021;
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	90 e0       	ldi	r25, 0x00	; 0
		}
		CRC = (int)((CRC << 8) ^ Remainder);
		index++;
	}
	return CRC;
}
     4b4:	cf 91       	pop	r28
     4b6:	08 95       	ret

000004b8 <ParamParse>:
		printStatus("VSerror");
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
     4b8:	0f 93       	push	r16
     4ba:	1f 93       	push	r17
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	ec 01       	movw	r28, r24
     4c2:	06 2f       	mov	r16, r22
     4c4:	17 2f       	mov	r17, r23
	int s_len = strnlen(stringToParse, rx_size) - 5;
     4c6:	6e e1       	ldi	r22, 0x1E	; 30
     4c8:	70 e0       	ldi	r23, 0x00	; 0
     4ca:	0e 94 96 23 	call	0x472c	; 0x472c <strnlen>
     4ce:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
     4d0:	8b 30       	cpi	r24, 0x0B	; 11
     4d2:	91 05       	cpc	r25, r1
     4d4:	64 f0       	brlt	.+24     	; 0x4ee <ParamParse+0x36>
     4d6:	fe 01       	movw	r30, r28
     4d8:	3a 96       	adiw	r30, 0x0a	; 10
     4da:	a0 2f       	mov	r26, r16
     4dc:	b1 2f       	mov	r27, r17
     4de:	9e 01       	movw	r18, r28
     4e0:	28 0f       	add	r18, r24
     4e2:	39 1f       	adc	r19, r25
	{
		param[idx] = stringToParse[i];
     4e4:	91 91       	ld	r25, Z+
     4e6:	9d 93       	st	X+, r25
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
     4e8:	e2 17       	cp	r30, r18
     4ea:	f3 07       	cpc	r31, r19
     4ec:	d9 f7       	brne	.-10     	; 0x4e4 <ParamParse+0x2c>
	{
		param[idx] = stringToParse[i];
		idx ++;
	}	
}
     4ee:	df 91       	pop	r29
     4f0:	cf 91       	pop	r28
     4f2:	1f 91       	pop	r17
     4f4:	0f 91       	pop	r16
     4f6:	08 95       	ret

000004f8 <CrcCompare>:
	}
	return CRC;
}

static inline bool CrcCompare(char *crc_in, char *crc_calc)
{
     4f8:	0f 93       	push	r16
     4fa:	1f 93       	push	r17
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	ec 01       	movw	r28, r24
     502:	8b 01       	movw	r16, r22
	strupr(crc_in);
     504:	0e 94 a1 23 	call	0x4742	; 0x4742 <strupr>
	strupr(crc_calc);
     508:	c8 01       	movw	r24, r16
     50a:	0e 94 a1 23 	call	0x4742	; 0x4742 <strupr>
	
	if(crc_in[0] == '0' && crc_in[1] == '0' && crc_in[2] == '0')
     50e:	88 81       	ld	r24, Y
     510:	80 33       	cpi	r24, 0x30	; 48
     512:	19 f5       	brne	.+70     	; 0x55a <CrcCompare+0x62>
     514:	89 81       	ldd	r24, Y+1	; 0x01
     516:	80 33       	cpi	r24, 0x30	; 48
     518:	09 f0       	breq	.+2      	; 0x51c <CrcCompare+0x24>
     51a:	41 c0       	rjmp	.+130    	; 0x59e <CrcCompare+0xa6>
     51c:	8a 81       	ldd	r24, Y+2	; 0x02
     51e:	80 33       	cpi	r24, 0x30	; 48
     520:	b9 f5       	brne	.+110    	; 0x590 <CrcCompare+0x98>
	{
			if(crc_in[3] == crc_calc[0])
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	2b 81       	ldd	r18, Y+3	; 0x03
     526:	f8 01       	movw	r30, r16
     528:	90 81       	ld	r25, Z
     52a:	29 17       	cp	r18, r25
     52c:	e9 f1       	breq	.+122    	; 0x5a8 <CrcCompare+0xb0>
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	3b c0       	rjmp	.+118    	; 0x5a8 <CrcCompare+0xb0>
			}
	}

	if(crc_in[0] == '0' && crc_in[1] == '0')
	{
		if((crc_in[2] == crc_calc[0]) && (crc_in[3] == crc_calc[1]))
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	2b 81       	ldd	r18, Y+3	; 0x03
     536:	f8 01       	movw	r30, r16
     538:	91 81       	ldd	r25, Z+1	; 0x01
     53a:	29 17       	cp	r18, r25
     53c:	a9 f1       	breq	.+106    	; 0x5a8 <CrcCompare+0xb0>
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	33 c0       	rjmp	.+102    	; 0x5a8 <CrcCompare+0xb0>
		}
	}
	
	if(crc_in[0] == '0')
	{
		if((crc_in[1] == crc_calc[0]) && (crc_in[2] == crc_calc[1]) &&
     542:	9a 81       	ldd	r25, Y+2	; 0x02
     544:	f8 01       	movw	r30, r16
     546:	81 81       	ldd	r24, Z+1	; 0x01
     548:	98 13       	cpse	r25, r24
     54a:	1a c0       	rjmp	.+52     	; 0x580 <CrcCompare+0x88>
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	2b 81       	ldd	r18, Y+3	; 0x03
     550:	92 81       	ldd	r25, Z+2	; 0x02
     552:	29 17       	cp	r18, r25
     554:	49 f1       	breq	.+82     	; 0x5a8 <CrcCompare+0xb0>
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	27 c0       	rjmp	.+78     	; 0x5a8 <CrcCompare+0xb0>
			return false;
		}
	}	
	else
	{
		if((crc_in[0] == crc_calc[0]) && (crc_in[1] == crc_calc[1]) &&
     55a:	f8 01       	movw	r30, r16
     55c:	90 81       	ld	r25, Z
     55e:	89 13       	cpse	r24, r25
     560:	11 c0       	rjmp	.+34     	; 0x584 <CrcCompare+0x8c>
     562:	99 81       	ldd	r25, Y+1	; 0x01
     564:	81 81       	ldd	r24, Z+1	; 0x01
     566:	98 13       	cpse	r25, r24
     568:	0f c0       	rjmp	.+30     	; 0x588 <CrcCompare+0x90>
     56a:	9a 81       	ldd	r25, Y+2	; 0x02
     56c:	82 81       	ldd	r24, Z+2	; 0x02
     56e:	98 13       	cpse	r25, r24
     570:	0d c0       	rjmp	.+26     	; 0x58c <CrcCompare+0x94>
			(crc_in[2] == crc_calc[2]) && (crc_in[3] == crc_calc[3]))
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	2b 81       	ldd	r18, Y+3	; 0x03
     576:	93 81       	ldd	r25, Z+3	; 0x03
     578:	29 17       	cp	r18, r25
     57a:	b1 f0       	breq	.+44     	; 0x5a8 <CrcCompare+0xb0>
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	14 c0       	rjmp	.+40     	; 0x5a8 <CrcCompare+0xb0>
		{
			return true;
		}
		else
		{
			return false;
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	12 c0       	rjmp	.+36     	; 0x5a8 <CrcCompare+0xb0>
			{
				return true;
			}
			else
			{
				return false;
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	10 c0       	rjmp	.+32     	; 0x5a8 <CrcCompare+0xb0>
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	0e c0       	rjmp	.+28     	; 0x5a8 <CrcCompare+0xb0>
     58c:	80 e0       	ldi	r24, 0x00	; 0
     58e:	0c c0       	rjmp	.+24     	; 0x5a8 <CrcCompare+0xb0>
			}
	}

	if(crc_in[0] == '0' && crc_in[1] == '0')
	{
		if((crc_in[2] == crc_calc[0]) && (crc_in[3] == crc_calc[1]))
     590:	9a 81       	ldd	r25, Y+2	; 0x02
     592:	f8 01       	movw	r30, r16
     594:	80 81       	ld	r24, Z
     596:	98 17       	cp	r25, r24
     598:	61 f2       	breq	.-104    	; 0x532 <CrcCompare+0x3a>
		{
			return true;
		}
		else
		{
			return false;
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	05 c0       	rjmp	.+10     	; 0x5a8 <CrcCompare+0xb0>
		}
	}
	
	if(crc_in[0] == '0')
	{
		if((crc_in[1] == crc_calc[0]) && (crc_in[2] == crc_calc[1]) &&
     59e:	f8 01       	movw	r30, r16
     5a0:	90 81       	ld	r25, Z
     5a2:	89 17       	cp	r24, r25
     5a4:	71 f2       	breq	.-100    	; 0x542 <CrcCompare+0x4a>
		{
			return true;
		}
		else
		{
			return false;
     5a6:	80 e0       	ldi	r24, 0x00	; 0
			else
			{
				return false;
			}
	}
}
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	1f 91       	pop	r17
     5ae:	0f 91       	pop	r16
     5b0:	08 95       	ret

000005b2 <printStatus>:
	
	PORTD |= 0b11110000;		// Set all CS High
}

static inline void printStatus (char msg_string[])	// Send string on UART
{
     5b2:	cf 92       	push	r12
     5b4:	df 92       	push	r13
     5b6:	ef 92       	push	r14
     5b8:	ff 92       	push	r15
     5ba:	0f 93       	push	r16
     5bc:	1f 93       	push	r17
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
     5c2:	cd b7       	in	r28, 0x3d	; 61
     5c4:	de b7       	in	r29, 0x3e	; 62
     5c6:	a8 97       	sbiw	r28, 0x28	; 40
     5c8:	0f b6       	in	r0, 0x3f	; 63
     5ca:	f8 94       	cli
     5cc:	de bf       	out	0x3e, r29	; 62
     5ce:	0f be       	out	0x3f, r0	; 63
     5d0:	cd bf       	out	0x3d, r28	; 61
     5d2:	fc 01       	movw	r30, r24
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
     5d4:	81 e2       	ldi	r24, 0x21	; 33
     5d6:	89 83       	std	Y+1, r24	; 0x01
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
     5d8:	ae eb       	ldi	r26, 0xBE	; 190
     5da:	b4 e0       	ldi	r27, 0x04	; 4
     5dc:	11 96       	adiw	r26, 0x01	; 1
     5de:	8c 91       	ld	r24, X
     5e0:	11 97       	sbiw	r26, 0x01	; 1
     5e2:	8a 83       	std	Y+2, r24	; 0x02
     5e4:	12 96       	adiw	r26, 0x02	; 2
     5e6:	8c 91       	ld	r24, X
     5e8:	12 97       	sbiw	r26, 0x02	; 2
     5ea:	8b 83       	std	Y+3, r24	; 0x03
     5ec:	13 96       	adiw	r26, 0x03	; 3
     5ee:	8c 91       	ld	r24, X
     5f0:	8c 83       	std	Y+4, r24	; 0x04
     5f2:	cf 01       	movw	r24, r30
     5f4:	ae 01       	movw	r20, r28
     5f6:	4b 5f       	subi	r20, 0xFB	; 251
     5f8:	5f 4f       	sbci	r21, 0xFF	; 255
     5fa:	00 e0       	ldi	r16, 0x00	; 0
     5fc:	10 e0       	ldi	r17, 0x00	; 0
     5fe:	08 c0       	rjmp	.+16     	; 0x610 <printStatus+0x5e>
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
     600:	dc 01       	movw	r26, r24
     602:	2d 91       	ld	r18, X+
     604:	cd 01       	movw	r24, r26
     606:	da 01       	movw	r26, r20
     608:	2d 93       	st	X+, r18
     60a:	ad 01       	movw	r20, r26
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
     60c:	0f 5f       	subi	r16, 0xFF	; 255
     60e:	1f 4f       	sbci	r17, 0xFF	; 255
     610:	df 01       	movw	r26, r30
     612:	0d 90       	ld	r0, X+
     614:	00 20       	and	r0, r0
     616:	e9 f7       	brne	.-6      	; 0x612 <printStatus+0x60>
     618:	9d 01       	movw	r18, r26
     61a:	2e 1b       	sub	r18, r30
     61c:	3f 0b       	sbc	r19, r31
     61e:	2e 5f       	subi	r18, 0xFE	; 254
     620:	3f 4f       	sbci	r19, 0xFF	; 255
     622:	02 17       	cp	r16, r18
     624:	13 07       	cpc	r17, r19
     626:	60 f3       	brcs	.-40     	; 0x600 <printStatus+0x4e>
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
     628:	78 01       	movw	r14, r16
     62a:	bf ef       	ldi	r27, 0xFF	; 255
     62c:	eb 1a       	sub	r14, r27
     62e:	fb 0a       	sbc	r15, r27
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
     630:	1e 14       	cp	r1, r14
     632:	1f 04       	cpc	r1, r15
     634:	0c f0       	brlt	.+2      	; 0x638 <printStatus+0x86>
     636:	d7 c0       	rjmp	.+430    	; 0x7e6 <printStatus+0x234>
     638:	fe 01       	movw	r30, r28
     63a:	31 96       	adiw	r30, 0x01	; 1
     63c:	a7 01       	movw	r20, r14
     63e:	4e 0f       	add	r20, r30
     640:	5f 1f       	adc	r21, r31
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	90 e0       	ldi	r25, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
     646:	b8 e0       	ldi	r27, 0x08	; 8
     648:	d1 2c       	mov	r13, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
     64a:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
     64c:	29 2f       	mov	r18, r25
     64e:	33 27       	eor	r19, r19
     650:	27 fd       	sbrc	r18, 7
     652:	3a 95       	dec	r19
     654:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
     656:	32 2f       	mov	r19, r18
     658:	22 27       	eor	r18, r18
     65a:	6b 2f       	mov	r22, r27
     65c:	7d 2d       	mov	r23, r13
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
     65e:	33 23       	and	r19, r19
     660:	3c f4       	brge	.+14     	; 0x670 <printStatus+0xbe>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
     662:	22 0f       	add	r18, r18
     664:	33 1f       	adc	r19, r19
     666:	a1 e2       	ldi	r26, 0x21	; 33
     668:	2a 27       	eor	r18, r26
     66a:	a0 e1       	ldi	r26, 0x10	; 16
     66c:	3a 27       	eor	r19, r26
     66e:	02 c0       	rjmp	.+4      	; 0x674 <printStatus+0xc2>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
     670:	22 0f       	add	r18, r18
     672:	33 1f       	adc	r19, r19
     674:	61 50       	subi	r22, 0x01	; 1
     676:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
     678:	91 f7       	brne	.-28     	; 0x65e <printStatus+0xac>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
     67a:	98 2f       	mov	r25, r24
     67c:	88 27       	eor	r24, r24
     67e:	82 27       	eor	r24, r18
     680:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
     682:	e4 17       	cp	r30, r20
     684:	f5 07       	cpc	r31, r21
     686:	09 f7       	brne	.-62     	; 0x64a <printStatus+0x98>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
     688:	6c 01       	movw	r12, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     68a:	40 e1       	ldi	r20, 0x10	; 16
     68c:	68 e6       	ldi	r22, 0x68	; 104
     68e:	74 e0       	ldi	r23, 0x04	; 4
     690:	0e 94 ab 23 	call	0x4756	; 0x4756 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
     694:	88 e6       	ldi	r24, 0x68	; 104
     696:	94 e0       	ldi	r25, 0x04	; 4
     698:	0e 94 a1 23 	call	0x4742	; 0x4742 <strupr>
	if(crcXmodem < 0x10)
     69c:	b0 e1       	ldi	r27, 0x10	; 16
     69e:	cb 16       	cp	r12, r27
     6a0:	d1 04       	cpc	r13, r1
     6a2:	98 f4       	brcc	.+38     	; 0x6ca <printStatus+0x118>
	{
		tx_string[cnt+4] = crc[0];
     6a4:	80 91 68 04 	lds	r24, 0x0468
     6a8:	fe 01       	movw	r30, r28
     6aa:	e0 0f       	add	r30, r16
     6ac:	f1 1f       	adc	r31, r17
     6ae:	85 83       	std	Z+5, r24	; 0x05
		tx_string[cnt+3] = '0';
     6b0:	80 e3       	ldi	r24, 0x30	; 48
     6b2:	fe 01       	movw	r30, r28
     6b4:	e0 0f       	add	r30, r16
     6b6:	f1 1f       	adc	r31, r17
     6b8:	84 83       	std	Z+4, r24	; 0x04
		tx_string[cnt+2] = '0';
     6ba:	fe 01       	movw	r30, r28
     6bc:	e0 0f       	add	r30, r16
     6be:	f1 1f       	adc	r31, r17
     6c0:	83 83       	std	Z+3, r24	; 0x03
		tx_string[cnt+1] = '0';
     6c2:	fe 01       	movw	r30, r28
     6c4:	ee 0d       	add	r30, r14
     6c6:	ff 1d       	adc	r31, r15
     6c8:	81 83       	std	Z+1, r24	; 0x01
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
     6ca:	c6 01       	movw	r24, r12
     6cc:	40 97       	sbiw	r24, 0x10	; 16
     6ce:	80 3f       	cpi	r24, 0xF0	; 240
     6d0:	91 05       	cpc	r25, r1
     6d2:	b8 f4       	brcc	.+46     	; 0x702 <printStatus+0x150>
	{
		tx_string[cnt+4] = crc[1];
     6d4:	a8 e6       	ldi	r26, 0x68	; 104
     6d6:	b4 e0       	ldi	r27, 0x04	; 4
     6d8:	11 96       	adiw	r26, 0x01	; 1
     6da:	8c 91       	ld	r24, X
     6dc:	11 97       	sbiw	r26, 0x01	; 1
     6de:	fe 01       	movw	r30, r28
     6e0:	e0 0f       	add	r30, r16
     6e2:	f1 1f       	adc	r31, r17
     6e4:	85 83       	std	Z+5, r24	; 0x05
		tx_string[cnt+3] = crc[0];
     6e6:	8c 91       	ld	r24, X
     6e8:	fe 01       	movw	r30, r28
     6ea:	e0 0f       	add	r30, r16
     6ec:	f1 1f       	adc	r31, r17
     6ee:	84 83       	std	Z+4, r24	; 0x04
		tx_string[cnt+2] = '0';
     6f0:	80 e3       	ldi	r24, 0x30	; 48
     6f2:	fe 01       	movw	r30, r28
     6f4:	e0 0f       	add	r30, r16
     6f6:	f1 1f       	adc	r31, r17
     6f8:	83 83       	std	Z+3, r24	; 0x03
		tx_string[cnt+1] = '0';		
     6fa:	fe 01       	movw	r30, r28
     6fc:	ee 0d       	add	r30, r14
     6fe:	ff 1d       	adc	r31, r15
     700:	81 83       	std	Z+1, r24	; 0x01
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
     702:	c6 01       	movw	r24, r12
     704:	9a 95       	dec	r25
     706:	81 15       	cp	r24, r1
     708:	9f 40       	sbci	r25, 0x0F	; 15
     70a:	b8 f4       	brcc	.+46     	; 0x73a <printStatus+0x188>
	{
		tx_string[cnt+4] = crc[2];
     70c:	e8 e6       	ldi	r30, 0x68	; 104
     70e:	f4 e0       	ldi	r31, 0x04	; 4
     710:	82 81       	ldd	r24, Z+2	; 0x02
     712:	de 01       	movw	r26, r28
     714:	a0 0f       	add	r26, r16
     716:	b1 1f       	adc	r27, r17
     718:	15 96       	adiw	r26, 0x05	; 5
     71a:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[1];
     71c:	81 81       	ldd	r24, Z+1	; 0x01
     71e:	de 01       	movw	r26, r28
     720:	a0 0f       	add	r26, r16
     722:	b1 1f       	adc	r27, r17
     724:	14 96       	adiw	r26, 0x04	; 4
     726:	8c 93       	st	X, r24
     728:	14 97       	sbiw	r26, 0x04	; 4
		tx_string[cnt+2] = crc[0];
     72a:	80 81       	ld	r24, Z
     72c:	fd 01       	movw	r30, r26
     72e:	83 83       	std	Z+3, r24	; 0x03
		tx_string[cnt+1] = '0';		
     730:	80 e3       	ldi	r24, 0x30	; 48
     732:	fe 01       	movw	r30, r28
     734:	ee 0d       	add	r30, r14
     736:	ff 1d       	adc	r31, r15
     738:	81 83       	std	Z+1, r24	; 0x01
	}
	if(crcXmodem >= 0x1000)
     73a:	c1 14       	cp	r12, r1
     73c:	80 e1       	ldi	r24, 0x10	; 16
     73e:	d8 06       	cpc	r13, r24
     740:	c0 f0       	brcs	.+48     	; 0x772 <printStatus+0x1c0>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
     742:	de 01       	movw	r26, r28
     744:	ae 0d       	add	r26, r14
     746:	bf 1d       	adc	r27, r15
     748:	e8 e6       	ldi	r30, 0x68	; 104
     74a:	f4 e0       	ldi	r31, 0x04	; 4
     74c:	80 81       	ld	r24, Z
     74e:	11 96       	adiw	r26, 0x01	; 1
     750:	8c 93       	st	X, r24
		tx_string[cnt+2] = crc[1];
     752:	81 81       	ldd	r24, Z+1	; 0x01
     754:	de 01       	movw	r26, r28
     756:	a0 0f       	add	r26, r16
     758:	b1 1f       	adc	r27, r17
     75a:	13 96       	adiw	r26, 0x03	; 3
     75c:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[2];
     75e:	82 81       	ldd	r24, Z+2	; 0x02
     760:	de 01       	movw	r26, r28
     762:	a0 0f       	add	r26, r16
     764:	b1 1f       	adc	r27, r17
     766:	14 96       	adiw	r26, 0x04	; 4
     768:	8c 93       	st	X, r24
     76a:	14 97       	sbiw	r26, 0x04	; 4
		tx_string[cnt+4] = crc[3];
     76c:	83 81       	ldd	r24, Z+3	; 0x03
     76e:	fd 01       	movw	r30, r26
     770:	85 83       	std	Z+5, r24	; 0x05
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
     772:	c8 01       	movw	r24, r16
     774:	05 96       	adiw	r24, 0x05	; 5
     776:	fe 01       	movw	r30, r28
     778:	e8 0f       	add	r30, r24
     77a:	f9 1f       	adc	r31, r25
     77c:	2d e0       	ldi	r18, 0x0D	; 13
     77e:	21 83       	std	Z+1, r18	; 0x01
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
     780:	99 23       	and	r25, r25
     782:	0c f4       	brge	.+2      	; 0x786 <printStatus+0x1d4>
     784:	3e c0       	rjmp	.+124    	; 0x802 <printStatus+0x250>
     786:	ae 01       	movw	r20, r28
     788:	4f 5f       	subi	r20, 0xFF	; 255
     78a:	5f 4f       	sbci	r21, 0xFF	; 255
     78c:	0a 5f       	subi	r16, 0xFA	; 250
     78e:	1f 4f       	sbci	r17, 0xFF	; 255
     790:	04 0f       	add	r16, r20
     792:	15 1f       	adc	r17, r21
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
     794:	ec ed       	ldi	r30, 0xDC	; 220
     796:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
     798:	61 ec       	ldi	r22, 0xC1	; 193
     79a:	70 e0       	ldi	r23, 0x00	; 0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     79c:	30 e0       	ldi	r19, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
     79e:	da 01       	movw	r26, r20
     7a0:	8d 91       	ld	r24, X+
     7a2:	ad 01       	movw	r20, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
     7a4:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
     7a6:	21 81       	ldd	r18, Z+1	; 0x01
     7a8:	90 81       	ld	r25, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
     7aa:	29 13       	cpse	r18, r25
     7ac:	04 c0       	rjmp	.+8      	; 0x7b6 <printStatus+0x204>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
     7ae:	db 01       	movw	r26, r22
     7b0:	9c 91       	ld	r25, X
     7b2:	90 62       	ori	r25, 0x20	; 32
     7b4:	9c 93       	st	X, r25
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
     7b6:	90 81       	ld	r25, Z
     7b8:	a3 81       	ldd	r26, Z+3	; 0x03
     7ba:	b4 81       	ldd	r27, Z+4	; 0x04
     7bc:	a9 0f       	add	r26, r25
     7be:	b1 1d       	adc	r27, r1
     7c0:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
     7c2:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     7c4:	a2 2f       	mov	r26, r18
     7c6:	b0 e0       	ldi	r27, 0x00	; 0
     7c8:	82 81       	ldd	r24, Z+2	; 0x02
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	01 97       	sbiw	r24, 0x01	; 1
     7ce:	a8 17       	cp	r26, r24
     7d0:	b9 07       	cpc	r27, r25
     7d2:	11 f0       	breq	.+4      	; 0x7d8 <printStatus+0x226>
     7d4:	2f 5f       	subi	r18, 0xFF	; 255
     7d6:	01 c0       	rjmp	.+2      	; 0x7da <printStatus+0x228>
     7d8:	23 2f       	mov	r18, r19
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
     7da:	20 83       	st	Z, r18
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
     7dc:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
     7de:	40 17       	cp	r20, r16
     7e0:	51 07       	cpc	r21, r17
     7e2:	e9 f6       	brne	.-70     	; 0x79e <printStatus+0x1ec>
     7e4:	0e c0       	rjmp	.+28     	; 0x802 <printStatus+0x250>
     7e6:	40 e1       	ldi	r20, 0x10	; 16
     7e8:	68 e6       	ldi	r22, 0x68	; 104
     7ea:	74 e0       	ldi	r23, 0x04	; 4
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	0e 94 ab 23 	call	0x4756	; 0x4756 <__itoa_ncheck>
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
     7f4:	88 e6       	ldi	r24, 0x68	; 104
     7f6:	94 e0       	ldi	r25, 0x04	; 4
     7f8:	0e 94 a1 23 	call	0x4742	; 0x4742 <strupr>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
     7fc:	c1 2c       	mov	r12, r1
     7fe:	d1 2c       	mov	r13, r1
     800:	51 cf       	rjmp	.-350    	; 0x6a4 <printStatus+0xf2>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
	}	
}
     802:	a8 96       	adiw	r28, 0x28	; 40
     804:	0f b6       	in	r0, 0x3f	; 63
     806:	f8 94       	cli
     808:	de bf       	out	0x3e, r29	; 62
     80a:	0f be       	out	0x3f, r0	; 63
     80c:	cd bf       	out	0x3d, r28	; 61
     80e:	df 91       	pop	r29
     810:	cf 91       	pop	r28
     812:	1f 91       	pop	r17
     814:	0f 91       	pop	r16
     816:	ff 90       	pop	r15
     818:	ef 90       	pop	r14
     81a:	df 90       	pop	r13
     81c:	cf 90       	pop	r12
     81e:	08 95       	ret

00000820 <__vector_19>:
 *
 * This handler is called each time the UART data register is available for
 * sending data.
 */
ISR(UART0_DATA_EMPTY_IRQ)
{
     820:	1f 92       	push	r1
     822:	0f 92       	push	r0
     824:	0f b6       	in	r0, 0x3f	; 63
     826:	0f 92       	push	r0
     828:	11 24       	eor	r1, r1
     82a:	2f 93       	push	r18
     82c:	3f 93       	push	r19
     82e:	4f 93       	push	r20
     830:	5f 93       	push	r21
     832:	8f 93       	push	r24
     834:	9f 93       	push	r25
     836:	af 93       	push	r26
     838:	bf 93       	push	r27
     83a:	ef 93       	push	r30
     83c:	ff 93       	push	r31
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
     83e:	ec ed       	ldi	r30, 0xDC	; 220
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	91 81       	ldd	r25, Z+1	; 0x01
     844:	80 81       	ld	r24, Z
	// if there is data in the ring buffer, fetch it and send it
	if (!ring_buffer_is_empty(&ring_buffer_out))
     846:	98 17       	cp	r25, r24
     848:	b9 f0       	breq	.+46     	; 0x878 <__vector_19+0x58>
 * \returns next data byte in buffer
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
     84a:	81 81       	ldd	r24, Z+1	; 0x01
     84c:	a3 81       	ldd	r26, Z+3	; 0x03
     84e:	b4 81       	ldd	r27, Z+4	; 0x04
     850:	a8 0f       	add	r26, r24
     852:	b1 1d       	adc	r27, r1
     854:	3c 91       	ld	r19, X
 *
 * \returns the next read offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_read(const struct ring_buffer *ring)
{
	return get_next(ring->read_offset, ring->size);
     856:	21 81       	ldd	r18, Z+1	; 0x01
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     858:	42 2f       	mov	r20, r18
     85a:	50 e0       	ldi	r21, 0x00	; 0
     85c:	82 81       	ldd	r24, Z+2	; 0x02
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	01 97       	sbiw	r24, 0x01	; 1
     862:	48 17       	cp	r20, r24
     864:	59 07       	cpc	r21, r25
     866:	11 f0       	breq	.+4      	; 0x86c <__vector_19+0x4c>
     868:	2f 5f       	subi	r18, 0xFF	; 255
     86a:	01 c0       	rjmp	.+2      	; 0x86e <__vector_19+0x4e>
     86c:	20 e0       	ldi	r18, 0x00	; 0
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
	ring->read_offset = ring_buffer_get_next_read(ring);
     86e:	20 93 dd 04 	sts	0x04DD, r18
	{
		UDR0 = ring_buffer_get(&ring_buffer_out);
     872:	30 93 c6 00 	sts	0x00C6, r19
     876:	05 c0       	rjmp	.+10     	; 0x882 <__vector_19+0x62>
	}
	else 
	{
		// no more data to send, turn off data ready interrupt
		UCSR0B &= ~(1 << UDRIE0);
     878:	e1 ec       	ldi	r30, 0xC1	; 193
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	80 81       	ld	r24, Z
     87e:	8f 7d       	andi	r24, 0xDF	; 223
     880:	80 83       	st	Z, r24
	}
}
     882:	ff 91       	pop	r31
     884:	ef 91       	pop	r30
     886:	bf 91       	pop	r27
     888:	af 91       	pop	r26
     88a:	9f 91       	pop	r25
     88c:	8f 91       	pop	r24
     88e:	5f 91       	pop	r21
     890:	4f 91       	pop	r20
     892:	3f 91       	pop	r19
     894:	2f 91       	pop	r18
     896:	0f 90       	pop	r0
     898:	0f be       	out	0x3f, r0	; 63
     89a:	0f 90       	pop	r0
     89c:	1f 90       	pop	r1
     89e:	18 95       	reti

000008a0 <__vector_18>:
 * \brief Data RX interrupt handler
 *
 * This is the handler for UART receive data
 */
ISR(UART0_RX_IRQ)
{
     8a0:	1f 92       	push	r1
     8a2:	0f 92       	push	r0
     8a4:	0f b6       	in	r0, 0x3f	; 63
     8a6:	0f 92       	push	r0
     8a8:	11 24       	eor	r1, r1
     8aa:	2f 93       	push	r18
     8ac:	4f 93       	push	r20
     8ae:	5f 93       	push	r21
     8b0:	8f 93       	push	r24
     8b2:	9f 93       	push	r25
     8b4:	af 93       	push	r26
     8b6:	bf 93       	push	r27
     8b8:	ef 93       	push	r30
     8ba:	ff 93       	push	r31
	ring_buffer_put(&ring_buffer_in, UDR0);
     8bc:	80 91 c6 00 	lds	r24, 0x00C6
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
     8c0:	ed ea       	ldi	r30, 0xAD	; 173
     8c2:	f4 e0       	ldi	r31, 0x04	; 4
     8c4:	90 81       	ld	r25, Z
     8c6:	a3 81       	ldd	r26, Z+3	; 0x03
     8c8:	b4 81       	ldd	r27, Z+4	; 0x04
     8ca:	a9 0f       	add	r26, r25
     8cc:	b1 1d       	adc	r27, r1
     8ce:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
     8d0:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     8d2:	42 2f       	mov	r20, r18
     8d4:	50 e0       	ldi	r21, 0x00	; 0
     8d6:	82 81       	ldd	r24, Z+2	; 0x02
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	01 97       	sbiw	r24, 0x01	; 1
     8dc:	48 17       	cp	r20, r24
     8de:	59 07       	cpc	r21, r25
     8e0:	11 f0       	breq	.+4      	; 0x8e6 <__vector_18+0x46>
     8e2:	2f 5f       	subi	r18, 0xFF	; 255
     8e4:	01 c0       	rjmp	.+2      	; 0x8e8 <__vector_18+0x48>
     8e6:	20 e0       	ldi	r18, 0x00	; 0
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
     8e8:	20 93 ad 04 	sts	0x04AD, r18
}
     8ec:	ff 91       	pop	r31
     8ee:	ef 91       	pop	r30
     8f0:	bf 91       	pop	r27
     8f2:	af 91       	pop	r26
     8f4:	9f 91       	pop	r25
     8f6:	8f 91       	pop	r24
     8f8:	5f 91       	pop	r21
     8fa:	4f 91       	pop	r20
     8fc:	2f 91       	pop	r18
     8fe:	0f 90       	pop	r0
     900:	0f be       	out	0x3f, r0	; 63
     902:	0f 90       	pop	r0
     904:	1f 90       	pop	r1
     906:	18 95       	reti

00000908 <__vector_14>:
	
	sei();
}

ISR(TIMER0_COMPA_vect)	// PWM output
{
     908:	1f 92       	push	r1
     90a:	0f 92       	push	r0
     90c:	0f b6       	in	r0, 0x3f	; 63
     90e:	0f 92       	push	r0
     910:	11 24       	eor	r1, r1
     912:	2f 93       	push	r18
     914:	3f 93       	push	r19
     916:	8f 93       	push	r24
     918:	9f 93       	push	r25
	pwmCnt_Ch0++;
     91a:	80 91 c4 01 	lds	r24, 0x01C4
     91e:	90 91 c5 01 	lds	r25, 0x01C5
     922:	01 96       	adiw	r24, 0x01	; 1
     924:	90 93 c5 01 	sts	0x01C5, r25
     928:	80 93 c4 01 	sts	0x01C4, r24
	if(pwmCnt_Ch0 < pwmCh0 )
     92c:	20 91 c4 01 	lds	r18, 0x01C4
     930:	30 91 c5 01 	lds	r19, 0x01C5
     934:	80 91 c2 01 	lds	r24, 0x01C2
     938:	90 91 c3 01 	lds	r25, 0x01C3
     93c:	28 17       	cp	r18, r24
     93e:	39 07       	cpc	r19, r25
     940:	34 f4       	brge	.+12     	; 0x94e <__vector_14+0x46>
static inline void SetHeaterOutputON(uint8_t ch)
{
	switch (ch)
	{
		case 0:
			if(heaterEnableCh0)
     942:	80 91 bb 01 	lds	r24, 0x01BB
     946:	88 23       	and	r24, r24
     948:	19 f0       	breq	.+6      	; 0x950 <__vector_14+0x48>
			{
				PORTC |= 0b00000001;
     94a:	40 9a       	sbi	0x08, 0	; 8
     94c:	01 c0       	rjmp	.+2      	; 0x950 <__vector_14+0x48>
	{
		SetHeaterOutputON(0);
	}
	else
	{
		PORTC &= 0b11111110;
     94e:	40 98       	cbi	0x08, 0	; 8
	}
	if(pwmCnt_Ch0 >= 100)
     950:	80 91 c4 01 	lds	r24, 0x01C4
     954:	90 91 c5 01 	lds	r25, 0x01C5
     958:	84 36       	cpi	r24, 0x64	; 100
     95a:	91 05       	cpc	r25, r1
     95c:	24 f0       	brlt	.+8      	; 0x966 <__vector_14+0x5e>
	{
		pwmCnt_Ch0 = 0;
     95e:	10 92 c5 01 	sts	0x01C5, r1
     962:	10 92 c4 01 	sts	0x01C4, r1
	}
	
	pwmCnt_Ch1++;
     966:	80 91 06 01 	lds	r24, 0x0106
     96a:	90 91 07 01 	lds	r25, 0x0107
     96e:	01 96       	adiw	r24, 0x01	; 1
     970:	90 93 07 01 	sts	0x0107, r25
     974:	80 93 06 01 	sts	0x0106, r24
	if(pwmCnt_Ch1 < pwmCh1 )
     978:	20 91 06 01 	lds	r18, 0x0106
     97c:	30 91 07 01 	lds	r19, 0x0107
     980:	80 91 c0 01 	lds	r24, 0x01C0
     984:	90 91 c1 01 	lds	r25, 0x01C1
     988:	28 17       	cp	r18, r24
     98a:	39 07       	cpc	r19, r25
     98c:	34 f4       	brge	.+12     	; 0x99a <__vector_14+0x92>
				PORTC |= 0b00000001;
			}
			break;
	
		case 1:
			if(heaterEnableCh1)
     98e:	80 91 ba 01 	lds	r24, 0x01BA
     992:	88 23       	and	r24, r24
     994:	19 f0       	breq	.+6      	; 0x99c <__vector_14+0x94>
			{
				PORTC |= 0b00000010;	
     996:	41 9a       	sbi	0x08, 1	; 8
     998:	01 c0       	rjmp	.+2      	; 0x99c <__vector_14+0x94>
	{
		SetHeaterOutputON(1);
	}
	else
	{
		PORTC &= 0b11111101;
     99a:	41 98       	cbi	0x08, 1	; 8
	}
	if(pwmCnt_Ch1 >= 100)
     99c:	80 91 06 01 	lds	r24, 0x0106
     9a0:	90 91 07 01 	lds	r25, 0x0107
     9a4:	84 36       	cpi	r24, 0x64	; 100
     9a6:	91 05       	cpc	r25, r1
     9a8:	24 f0       	brlt	.+8      	; 0x9b2 <__vector_14+0xaa>
	{
		pwmCnt_Ch1 = 0;
     9aa:	10 92 07 01 	sts	0x0107, r1
     9ae:	10 92 06 01 	sts	0x0106, r1
	}
	
	pwmCnt_Ch2++;
     9b2:	80 91 04 01 	lds	r24, 0x0104
     9b6:	90 91 05 01 	lds	r25, 0x0105
     9ba:	01 96       	adiw	r24, 0x01	; 1
     9bc:	90 93 05 01 	sts	0x0105, r25
     9c0:	80 93 04 01 	sts	0x0104, r24
	if(pwmCnt_Ch2 < pwmCh2 )
     9c4:	20 91 04 01 	lds	r18, 0x0104
     9c8:	30 91 05 01 	lds	r19, 0x0105
     9cc:	80 91 be 01 	lds	r24, 0x01BE
     9d0:	90 91 bf 01 	lds	r25, 0x01BF
     9d4:	28 17       	cp	r18, r24
     9d6:	39 07       	cpc	r19, r25
     9d8:	34 f4       	brge	.+12     	; 0x9e6 <__vector_14+0xde>
				PORTC |= 0b00000010;	
			}
			break;

		case 2:
			if(heaterEnableCh2)
     9da:	80 91 b9 01 	lds	r24, 0x01B9
     9de:	88 23       	and	r24, r24
     9e0:	19 f0       	breq	.+6      	; 0x9e8 <__vector_14+0xe0>
			{
				PORTC |= 0b00000100;
     9e2:	42 9a       	sbi	0x08, 2	; 8
     9e4:	01 c0       	rjmp	.+2      	; 0x9e8 <__vector_14+0xe0>
	{
		SetHeaterOutputON(2);
	}
	else
	{
		PORTC &= 0b11111011;
     9e6:	42 98       	cbi	0x08, 2	; 8
	}
	if(pwmCnt_Ch2 >= 100)
     9e8:	80 91 04 01 	lds	r24, 0x0104
     9ec:	90 91 05 01 	lds	r25, 0x0105
     9f0:	84 36       	cpi	r24, 0x64	; 100
     9f2:	91 05       	cpc	r25, r1
     9f4:	24 f0       	brlt	.+8      	; 0x9fe <__vector_14+0xf6>
	{
		pwmCnt_Ch2 = 0;
     9f6:	10 92 05 01 	sts	0x0105, r1
     9fa:	10 92 04 01 	sts	0x0104, r1
	}
	
	pwmCnt_Ch3++;
     9fe:	80 91 02 01 	lds	r24, 0x0102
     a02:	90 91 03 01 	lds	r25, 0x0103
     a06:	01 96       	adiw	r24, 0x01	; 1
     a08:	90 93 03 01 	sts	0x0103, r25
     a0c:	80 93 02 01 	sts	0x0102, r24
	if(pwmCnt_Ch3 < pwmCh3 )
     a10:	20 91 02 01 	lds	r18, 0x0102
     a14:	30 91 03 01 	lds	r19, 0x0103
     a18:	80 91 bc 01 	lds	r24, 0x01BC
     a1c:	90 91 bd 01 	lds	r25, 0x01BD
     a20:	28 17       	cp	r18, r24
     a22:	39 07       	cpc	r19, r25
     a24:	34 f4       	brge	.+12     	; 0xa32 <__vector_14+0x12a>
				PORTC |= 0b00000100;
			}
			break;

		case 3:
			if(heaterEnableCh3)
     a26:	80 91 b8 01 	lds	r24, 0x01B8
     a2a:	88 23       	and	r24, r24
     a2c:	19 f0       	breq	.+6      	; 0xa34 <__vector_14+0x12c>
			{
				PORTC |= 0b00001000;	
     a2e:	43 9a       	sbi	0x08, 3	; 8
     a30:	01 c0       	rjmp	.+2      	; 0xa34 <__vector_14+0x12c>
	{
		SetHeaterOutputON(3);
	}
	else
	{
		PORTC &= 0b11110111;
     a32:	43 98       	cbi	0x08, 3	; 8
	}
	if(pwmCnt_Ch3 >= 100)
     a34:	80 91 02 01 	lds	r24, 0x0102
     a38:	90 91 03 01 	lds	r25, 0x0103
     a3c:	84 36       	cpi	r24, 0x64	; 100
     a3e:	91 05       	cpc	r25, r1
     a40:	24 f0       	brlt	.+8      	; 0xa4a <__vector_14+0x142>
	{
		pwmCnt_Ch3 = 0;
     a42:	10 92 03 01 	sts	0x0103, r1
     a46:	10 92 02 01 	sts	0x0102, r1
	}

}
     a4a:	9f 91       	pop	r25
     a4c:	8f 91       	pop	r24
     a4e:	3f 91       	pop	r19
     a50:	2f 91       	pop	r18
     a52:	0f 90       	pop	r0
     a54:	0f be       	out	0x3f, r0	; 63
     a56:	0f 90       	pop	r0
     a58:	1f 90       	pop	r1
     a5a:	18 95       	reti

00000a5c <__vector_7>:

ISR(TIMER2_COMPA_vect)	// PID Controller
{
     a5c:	1f 92       	push	r1
     a5e:	0f 92       	push	r0
     a60:	0f b6       	in	r0, 0x3f	; 63
     a62:	0f 92       	push	r0
     a64:	11 24       	eor	r1, r1
     a66:	cf 92       	push	r12
     a68:	df 92       	push	r13
     a6a:	ef 92       	push	r14
     a6c:	ff 92       	push	r15
     a6e:	2f 93       	push	r18
     a70:	3f 93       	push	r19
     a72:	4f 93       	push	r20
     a74:	5f 93       	push	r21
     a76:	6f 93       	push	r22
     a78:	7f 93       	push	r23
     a7a:	8f 93       	push	r24
     a7c:	9f 93       	push	r25
     a7e:	af 93       	push	r26
     a80:	bf 93       	push	r27
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29
     a86:	ef 93       	push	r30
     a88:	ff 93       	push	r31
	sei();	// Enable nested interrupt
     a8a:	78 94       	sei
	PORTD |= statusLed;
     a8c:	5b 9a       	sbi	0x0b, 3	; 11
static inline unsigned char SPIread( unsigned char byteword, unsigned char ch)
{
	switch (ch)
	{
		case 1:
		PORTD &= 0b11101111;	// Set CS1 low
     a8e:	5c 98       	cbi	0x0b, 4	; 11
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     a94:	0d b4       	in	r0, 0x2d	; 45
     a96:	07 fe       	sbrs	r0, 7
     a98:	fd cf       	rjmp	.-6      	; 0xa94 <__vector_7+0x38>
	byteword=SPDR;				//just for clearing SPIF
     a9a:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
     a9c:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     a9e:	0d b4       	in	r0, 0x2d	; 45
     aa0:	07 fe       	sbrs	r0, 7
     aa2:	fd cf       	rjmp	.-6      	; 0xa9e <__vector_7+0x42>
	byteword=SPDR;
     aa4:	9e b5       	in	r25, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
     aa6:	8b b1       	in	r24, 0x0b	; 11
     aa8:	80 6f       	ori	r24, 0xF0	; 240
     aaa:	8b b9       	out	0x0b, r24	; 11
static inline unsigned char SPIread( unsigned char byteword, unsigned char ch)
{
	switch (ch)
	{
		case 1:
		PORTD &= 0b11101111;	// Set CS1 low
     aac:	5c 98       	cbi	0x0b, 4	; 11
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
     aae:	82 e0       	ldi	r24, 0x02	; 2
     ab0:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     ab2:	0d b4       	in	r0, 0x2d	; 45
     ab4:	07 fe       	sbrs	r0, 7
     ab6:	fd cf       	rjmp	.-6      	; 0xab2 <__vector_7+0x56>
	byteword=SPDR;				//just for clearing SPIF
     ab8:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
     aba:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     abc:	0d b4       	in	r0, 0x2d	; 45
     abe:	07 fe       	sbrs	r0, 7
     ac0:	fd cf       	rjmp	.-6      	; 0xabc <__vector_7+0x60>
	byteword=SPDR;
     ac2:	6e b5       	in	r22, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
     ac4:	8b b1       	in	r24, 0x0b	; 11
     ac6:	80 6f       	ori	r24, 0xF0	; 240
     ac8:	8b b9       	out	0x0b, r24	; 11
	uint8_t u8_msb = 0;
	uint8_t u8_lsb = 0;
	
	u8_msb = SPIread(0x01, ch);
	u8_lsb = SPIread(0x02, ch);
	adc_code = (((u8_msb << 8) | u8_lsb) >> 1);
     aca:	70 e0       	ldi	r23, 0x00	; 0
     acc:	79 2b       	or	r23, r25
     ace:	75 95       	asr	r23
     ad0:	67 95       	ror	r22
	return ((float)adc_code / 32.0 - 256.0);
     ad2:	07 2e       	mov	r0, r23
     ad4:	00 0c       	add	r0, r0
     ad6:	88 0b       	sbc	r24, r24
     ad8:	99 0b       	sbc	r25, r25
     ada:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <__floatsisf>
     ade:	20 e0       	ldi	r18, 0x00	; 0
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	40 e0       	ldi	r20, 0x00	; 0
     ae4:	5d e3       	ldi	r21, 0x3D	; 61
     ae6:	0e 94 9c 22 	call	0x4538	; 0x4538 <__mulsf3>
     aea:	20 e0       	ldi	r18, 0x00	; 0
     aec:	30 e0       	ldi	r19, 0x00	; 0
     aee:	40 e8       	ldi	r20, 0x80	; 128
     af0:	53 e4       	ldi	r21, 0x43	; 67
     af2:	0e 94 4c 21 	call	0x4298	; 0x4298 <__subsf3>
ISR(TIMER2_COMPA_vect)	// PID Controller
{
	sei();	// Enable nested interrupt
	PORTD |= statusLed;
	
	TempSensor0 = ReadTempSensor(1);
     af6:	60 93 b4 01 	sts	0x01B4, r22
     afa:	70 93 b5 01 	sts	0x01B5, r23
     afe:	80 93 b6 01 	sts	0x01B6, r24
     b02:	90 93 b7 01 	sts	0x01B7, r25
	if(TempSensor0 > (float)maxAllowedTemp)					// Max temperature limit
     b06:	60 91 b4 01 	lds	r22, 0x01B4
     b0a:	70 91 b5 01 	lds	r23, 0x01B5
     b0e:	80 91 b6 01 	lds	r24, 0x01B6
     b12:	90 91 b7 01 	lds	r25, 0x01B7
     b16:	20 e0       	ldi	r18, 0x00	; 0
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	40 ef       	ldi	r20, 0xF0	; 240
     b1c:	52 e4       	ldi	r21, 0x42	; 66
     b1e:	0e 94 98 22 	call	0x4530	; 0x4530 <__gesf2>
     b22:	18 16       	cp	r1, r24
     b24:	2c f4       	brge	.+10     	; 0xb30 <__vector_7+0xd4>
	{
		heaterEnableCh0 = false;
     b26:	10 92 bb 01 	sts	0x01BB, r1
		PORTC &= allHeaterOff;
     b2a:	88 b1       	in	r24, 0x08	; 8
     b2c:	80 7f       	andi	r24, 0xF0	; 240
     b2e:	88 b9       	out	0x08, r24	; 8
	}

	TempError0[CtrlErrorIdx] = TempSetPoint0 - TempSensor0;			// Control error
     b30:	c0 91 a6 01 	lds	r28, 0x01A6
     b34:	d0 91 a7 01 	lds	r29, 0x01A7
     b38:	60 91 a2 01 	lds	r22, 0x01A2
     b3c:	70 91 a3 01 	lds	r23, 0x01A3
     b40:	80 91 a4 01 	lds	r24, 0x01A4
     b44:	90 91 a5 01 	lds	r25, 0x01A5
     b48:	20 91 b4 01 	lds	r18, 0x01B4
     b4c:	30 91 b5 01 	lds	r19, 0x01B5
     b50:	40 91 b6 01 	lds	r20, 0x01B6
     b54:	50 91 b7 01 	lds	r21, 0x01B7
     b58:	0e 94 4c 21 	call	0x4298	; 0x4298 <__subsf3>
     b5c:	cc 0f       	add	r28, r28
     b5e:	dd 1f       	adc	r29, r29
     b60:	cc 0f       	add	r28, r28
     b62:	dd 1f       	adc	r29, r29
     b64:	c1 53       	subi	r28, 0x31	; 49
     b66:	de 4f       	sbci	r29, 0xFE	; 254
     b68:	68 83       	st	Y, r22
     b6a:	79 83       	std	Y+1, r23	; 0x01
     b6c:	8a 83       	std	Y+2, r24	; 0x02
     b6e:	9b 83       	std	Y+3, r25	; 0x03
	
	P_ch0 = TempError0[CtrlErrorIdx] * Pgain_ch0;					// P error
     b70:	e0 91 a6 01 	lds	r30, 0x01A6
     b74:	f0 91 a7 01 	lds	r31, 0x01A7
     b78:	ee 0f       	add	r30, r30
     b7a:	ff 1f       	adc	r31, r31
     b7c:	ee 0f       	add	r30, r30
     b7e:	ff 1f       	adc	r31, r31
     b80:	e1 53       	subi	r30, 0x31	; 49
     b82:	fe 4f       	sbci	r31, 0xFE	; 254
     b84:	60 81       	ld	r22, Z
     b86:	71 81       	ldd	r23, Z+1	; 0x01
     b88:	82 81       	ldd	r24, Z+2	; 0x02
     b8a:	93 81       	ldd	r25, Z+3	; 0x03
     b8c:	20 91 06 03 	lds	r18, 0x0306
     b90:	30 91 07 03 	lds	r19, 0x0307
     b94:	40 91 08 03 	lds	r20, 0x0308
     b98:	50 91 09 03 	lds	r21, 0x0309
     b9c:	0e 94 9c 22 	call	0x4538	; 0x4538 <__mulsf3>
     ba0:	60 93 9e 01 	sts	0x019E, r22
     ba4:	70 93 9f 01 	sts	0x019F, r23
     ba8:	80 93 a0 01 	sts	0x01A0, r24
     bac:	90 93 a1 01 	sts	0x01A1, r25
	I_ch0 = I_ch0 + (TempError0[CtrlErrorIdx] * Igain_ch0);			// I error
     bb0:	e0 91 a6 01 	lds	r30, 0x01A6
     bb4:	f0 91 a7 01 	lds	r31, 0x01A7
     bb8:	ee 0f       	add	r30, r30
     bba:	ff 1f       	adc	r31, r31
     bbc:	ee 0f       	add	r30, r30
     bbe:	ff 1f       	adc	r31, r31
     bc0:	e1 53       	subi	r30, 0x31	; 49
     bc2:	fe 4f       	sbci	r31, 0xFE	; 254
     bc4:	60 81       	ld	r22, Z
     bc6:	71 81       	ldd	r23, Z+1	; 0x01
     bc8:	82 81       	ldd	r24, Z+2	; 0x02
     bca:	93 81       	ldd	r25, Z+3	; 0x03
     bcc:	20 91 ba 04 	lds	r18, 0x04BA
     bd0:	30 91 bb 04 	lds	r19, 0x04BB
     bd4:	40 91 bc 04 	lds	r20, 0x04BC
     bd8:	50 91 bd 04 	lds	r21, 0x04BD
     bdc:	c0 90 9a 01 	lds	r12, 0x019A
     be0:	d0 90 9b 01 	lds	r13, 0x019B
     be4:	e0 90 9c 01 	lds	r14, 0x019C
     be8:	f0 90 9d 01 	lds	r15, 0x019D
     bec:	0e 94 9c 22 	call	0x4538	; 0x4538 <__mulsf3>
     bf0:	a7 01       	movw	r20, r14
     bf2:	96 01       	movw	r18, r12
     bf4:	0e 94 4d 21 	call	0x429a	; 0x429a <__addsf3>
     bf8:	60 93 9a 01 	sts	0x019A, r22
     bfc:	70 93 9b 01 	sts	0x019B, r23
     c00:	80 93 9c 01 	sts	0x019C, r24
     c04:	90 93 9d 01 	sts	0x019D, r25
	if(I_ch0 > integralErrorLimit)
     c08:	60 91 9a 01 	lds	r22, 0x019A
     c0c:	70 91 9b 01 	lds	r23, 0x019B
     c10:	80 91 9c 01 	lds	r24, 0x019C
     c14:	90 91 9d 01 	lds	r25, 0x019D
     c18:	20 e0       	ldi	r18, 0x00	; 0
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	40 e2       	ldi	r20, 0x20	; 32
     c1e:	51 e4       	ldi	r21, 0x41	; 65
     c20:	0e 94 98 22 	call	0x4530	; 0x4530 <__gesf2>
     c24:	18 16       	cp	r1, r24
     c26:	64 f4       	brge	.+24     	; 0xc40 <__vector_7+0x1e4>
	{
	I_ch0 = integralErrorLimit;
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e2       	ldi	r26, 0x20	; 32
     c2e:	b1 e4       	ldi	r27, 0x41	; 65
     c30:	80 93 9a 01 	sts	0x019A, r24
     c34:	90 93 9b 01 	sts	0x019B, r25
     c38:	a0 93 9c 01 	sts	0x019C, r26
     c3c:	b0 93 9d 01 	sts	0x019D, r27
	}
	if(I_ch0 < -integralErrorLimit)
     c40:	60 91 9a 01 	lds	r22, 0x019A
     c44:	70 91 9b 01 	lds	r23, 0x019B
     c48:	80 91 9c 01 	lds	r24, 0x019C
     c4c:	90 91 9d 01 	lds	r25, 0x019D
     c50:	20 e0       	ldi	r18, 0x00	; 0
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	40 e2       	ldi	r20, 0x20	; 32
     c56:	51 ec       	ldi	r21, 0xC1	; 193
     c58:	0e 94 b1 21 	call	0x4362	; 0x4362 <__cmpsf2>
     c5c:	88 23       	and	r24, r24
     c5e:	64 f4       	brge	.+24     	; 0xc78 <__vector_7+0x21c>
	{
	I_ch0 = -integralErrorLimit;
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	a0 e2       	ldi	r26, 0x20	; 32
     c66:	b1 ec       	ldi	r27, 0xC1	; 193
     c68:	80 93 9a 01 	sts	0x019A, r24
     c6c:	90 93 9b 01 	sts	0x019B, r25
     c70:	a0 93 9c 01 	sts	0x019C, r26
     c74:	b0 93 9d 01 	sts	0x019D, r27
	}
	
	D_ch0 = (TempError0[CtrlErrorIdx] - TempError0[CtrlErrorHistIdx]) * Dgain_ch0; // D error
     c78:	e0 91 a6 01 	lds	r30, 0x01A6
     c7c:	f0 91 a7 01 	lds	r31, 0x01A7
     c80:	ee 0f       	add	r30, r30
     c82:	ff 1f       	adc	r31, r31
     c84:	ee 0f       	add	r30, r30
     c86:	ff 1f       	adc	r31, r31
     c88:	e1 53       	subi	r30, 0x31	; 49
     c8a:	fe 4f       	sbci	r31, 0xFE	; 254
     c8c:	60 81       	ld	r22, Z
     c8e:	71 81       	ldd	r23, Z+1	; 0x01
     c90:	82 81       	ldd	r24, Z+2	; 0x02
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	e0 91 00 01 	lds	r30, 0x0100
     c98:	f0 91 01 01 	lds	r31, 0x0101
     c9c:	ee 0f       	add	r30, r30
     c9e:	ff 1f       	adc	r31, r31
     ca0:	ee 0f       	add	r30, r30
     ca2:	ff 1f       	adc	r31, r31
     ca4:	e1 53       	subi	r30, 0x31	; 49
     ca6:	fe 4f       	sbci	r31, 0xFE	; 254
     ca8:	20 81       	ld	r18, Z
     caa:	31 81       	ldd	r19, Z+1	; 0x01
     cac:	42 81       	ldd	r20, Z+2	; 0x02
     cae:	53 81       	ldd	r21, Z+3	; 0x03
     cb0:	c0 90 03 02 	lds	r12, 0x0203
     cb4:	d0 90 04 02 	lds	r13, 0x0204
     cb8:	e0 90 05 02 	lds	r14, 0x0205
     cbc:	f0 90 06 02 	lds	r15, 0x0206
     cc0:	0e 94 4c 21 	call	0x4298	; 0x4298 <__subsf3>
     cc4:	a7 01       	movw	r20, r14
     cc6:	96 01       	movw	r18, r12
     cc8:	0e 94 9c 22 	call	0x4538	; 0x4538 <__mulsf3>
     ccc:	60 93 96 01 	sts	0x0196, r22
     cd0:	70 93 97 01 	sts	0x0197, r23
     cd4:	80 93 98 01 	sts	0x0198, r24
     cd8:	90 93 99 01 	sts	0x0199, r25
	
	Control_ch0_PID = P_ch0 + I_ch0 + D_ch0;
     cdc:	60 91 9e 01 	lds	r22, 0x019E
     ce0:	70 91 9f 01 	lds	r23, 0x019F
     ce4:	80 91 a0 01 	lds	r24, 0x01A0
     ce8:	90 91 a1 01 	lds	r25, 0x01A1
     cec:	20 91 9a 01 	lds	r18, 0x019A
     cf0:	30 91 9b 01 	lds	r19, 0x019B
     cf4:	40 91 9c 01 	lds	r20, 0x019C
     cf8:	50 91 9d 01 	lds	r21, 0x019D
     cfc:	c0 90 96 01 	lds	r12, 0x0196
     d00:	d0 90 97 01 	lds	r13, 0x0197
     d04:	e0 90 98 01 	lds	r14, 0x0198
     d08:	f0 90 99 01 	lds	r15, 0x0199
     d0c:	0e 94 4d 21 	call	0x429a	; 0x429a <__addsf3>
     d10:	a7 01       	movw	r20, r14
     d12:	96 01       	movw	r18, r12
     d14:	0e 94 4d 21 	call	0x429a	; 0x429a <__addsf3>
     d18:	60 93 8e 01 	sts	0x018E, r22
     d1c:	70 93 8f 01 	sts	0x018F, r23
     d20:	80 93 90 01 	sts	0x0190, r24
     d24:	90 93 91 01 	sts	0x0191, r25
	Control_ch0 = Control_ch0_PID + TempSetPoint0 * (float)0.21 - 5;
     d28:	60 91 a2 01 	lds	r22, 0x01A2
     d2c:	70 91 a3 01 	lds	r23, 0x01A3
     d30:	80 91 a4 01 	lds	r24, 0x01A4
     d34:	90 91 a5 01 	lds	r25, 0x01A5
     d38:	c0 90 8e 01 	lds	r12, 0x018E
     d3c:	d0 90 8f 01 	lds	r13, 0x018F
     d40:	e0 90 90 01 	lds	r14, 0x0190
     d44:	f0 90 91 01 	lds	r15, 0x0191
     d48:	2d e3       	ldi	r18, 0x3D	; 61
     d4a:	3a e0       	ldi	r19, 0x0A	; 10
     d4c:	47 e5       	ldi	r20, 0x57	; 87
     d4e:	5e e3       	ldi	r21, 0x3E	; 62
     d50:	0e 94 9c 22 	call	0x4538	; 0x4538 <__mulsf3>
     d54:	a7 01       	movw	r20, r14
     d56:	96 01       	movw	r18, r12
     d58:	0e 94 4d 21 	call	0x429a	; 0x429a <__addsf3>
     d5c:	20 e0       	ldi	r18, 0x00	; 0
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	40 ea       	ldi	r20, 0xA0	; 160
     d62:	50 e4       	ldi	r21, 0x40	; 64
     d64:	0e 94 4c 21 	call	0x4298	; 0x4298 <__subsf3>
     d68:	60 93 92 01 	sts	0x0192, r22
     d6c:	70 93 93 01 	sts	0x0193, r23
     d70:	80 93 94 01 	sts	0x0194, r24
     d74:	90 93 95 01 	sts	0x0195, r25
	pwmCh0 = (round(Control_ch0));
     d78:	60 91 92 01 	lds	r22, 0x0192
     d7c:	70 91 93 01 	lds	r23, 0x0193
     d80:	80 91 94 01 	lds	r24, 0x0194
     d84:	90 91 95 01 	lds	r25, 0x0195
     d88:	0e 94 ff 22 	call	0x45fe	; 0x45fe <round>
     d8c:	0e 94 b5 21 	call	0x436a	; 0x436a <__fixsfsi>
     d90:	70 93 c3 01 	sts	0x01C3, r23
     d94:	60 93 c2 01 	sts	0x01C2, r22
	
	if(abs(TempError0[0]) > integralErrorActiveWindow)
     d98:	60 91 cf 01 	lds	r22, 0x01CF
     d9c:	70 91 d0 01 	lds	r23, 0x01D0
     da0:	80 91 d1 01 	lds	r24, 0x01D1
     da4:	90 91 d2 01 	lds	r25, 0x01D2
     da8:	0e 94 b5 21 	call	0x436a	; 0x436a <__fixsfsi>
     dac:	9b 01       	movw	r18, r22
     dae:	77 23       	and	r23, r23
     db0:	24 f4       	brge	.+8      	; 0xdba <__vector_7+0x35e>
     db2:	22 27       	eor	r18, r18
     db4:	33 27       	eor	r19, r19
     db6:	26 1b       	sub	r18, r22
     db8:	37 0b       	sbc	r19, r23
     dba:	26 30       	cpi	r18, 0x06	; 6
     dbc:	31 05       	cpc	r19, r1
     dbe:	44 f0       	brlt	.+16     	; 0xdd0 <__vector_7+0x374>
	{
	I_ch0 = 0;									// Avoid integral wind-up
     dc0:	10 92 9a 01 	sts	0x019A, r1
     dc4:	10 92 9b 01 	sts	0x019B, r1
     dc8:	10 92 9c 01 	sts	0x019C, r1
     dcc:	10 92 9d 01 	sts	0x019D, r1
	}
	
	if(abs(TempError0[0]) <= tempErrorWinCh0)
     dd0:	60 91 cf 01 	lds	r22, 0x01CF
     dd4:	70 91 d0 01 	lds	r23, 0x01D0
     dd8:	80 91 d1 01 	lds	r24, 0x01D1
     ddc:	90 91 d2 01 	lds	r25, 0x01D2
     de0:	c0 90 7d 04 	lds	r12, 0x047D
     de4:	d0 90 7e 04 	lds	r13, 0x047E
     de8:	e0 90 7f 04 	lds	r14, 0x047F
     dec:	f0 90 80 04 	lds	r15, 0x0480
     df0:	0e 94 b5 21 	call	0x436a	; 0x436a <__fixsfsi>
     df4:	9b 01       	movw	r18, r22
     df6:	77 23       	and	r23, r23
     df8:	24 f4       	brge	.+8      	; 0xe02 <__vector_7+0x3a6>
     dfa:	22 27       	eor	r18, r18
     dfc:	33 27       	eor	r19, r19
     dfe:	26 1b       	sub	r18, r22
     e00:	37 0b       	sbc	r19, r23
     e02:	b9 01       	movw	r22, r18
     e04:	33 0f       	add	r19, r19
     e06:	88 0b       	sbc	r24, r24
     e08:	99 0b       	sbc	r25, r25
     e0a:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <__floatsisf>
     e0e:	a7 01       	movw	r20, r14
     e10:	96 01       	movw	r18, r12
     e12:	0e 94 b1 21 	call	0x4362	; 0x4362 <__cmpsf2>
     e16:	18 16       	cp	r1, r24
     e18:	54 f0       	brlt	.+20     	; 0xe2e <__vector_7+0x3d2>
	{
		tempSettleCntCh0 ++;
     e1a:	80 91 ca 01 	lds	r24, 0x01CA
     e1e:	90 91 cb 01 	lds	r25, 0x01CB
     e22:	01 96       	adiw	r24, 0x01	; 1
     e24:	90 93 cb 01 	sts	0x01CB, r25
     e28:	80 93 ca 01 	sts	0x01CA, r24
     e2c:	04 c0       	rjmp	.+8      	; 0xe36 <__vector_7+0x3da>
	}
	else
	{
		tempSettleCntCh0 = 0;
     e2e:	10 92 cb 01 	sts	0x01CB, r1
     e32:	10 92 ca 01 	sts	0x01CA, r1
	}
	if(tempSettleCntCh0 >= tempSettleTimeCh0)
     e36:	20 91 ca 01 	lds	r18, 0x01CA
     e3a:	30 91 cb 01 	lds	r19, 0x01CB
     e3e:	80 91 01 02 	lds	r24, 0x0201
     e42:	90 91 02 02 	lds	r25, 0x0202
     e46:	28 17       	cp	r18, r24
     e48:	39 07       	cpc	r19, r25
     e4a:	3c f0       	brlt	.+14     	; 0xe5a <__vector_7+0x3fe>
	{
		tempStableCh0 = 1;
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	90 93 00 02 	sts	0x0200, r25
     e54:	80 93 ff 01 	sts	0x01FF, r24
     e58:	04 c0       	rjmp	.+8      	; 0xe62 <__vector_7+0x406>
	}
	else
	{
		tempStableCh0 = 0;
     e5a:	10 92 00 02 	sts	0x0200, r1
     e5e:	10 92 ff 01 	sts	0x01FF, r1
		case 1:
		PORTD &= 0b11101111;	// Set CS1 low
		break;
		
		case 2:
		PORTD &= 0b11011111;	// Set CS2 low
     e62:	5d 98       	cbi	0x0b, 5	; 11
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     e68:	0d b4       	in	r0, 0x2d	; 45
     e6a:	07 fe       	sbrs	r0, 7
     e6c:	fd cf       	rjmp	.-6      	; 0xe68 <__vector_7+0x40c>
	byteword=SPDR;				//just for clearing SPIF
     e6e:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
     e70:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     e72:	0d b4       	in	r0, 0x2d	; 45
     e74:	07 fe       	sbrs	r0, 7
     e76:	fd cf       	rjmp	.-6      	; 0xe72 <__vector_7+0x416>
	byteword=SPDR;
     e78:	9e b5       	in	r25, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
     e7a:	8b b1       	in	r24, 0x0b	; 11
     e7c:	80 6f       	ori	r24, 0xF0	; 240
     e7e:	8b b9       	out	0x0b, r24	; 11
		case 1:
		PORTD &= 0b11101111;	// Set CS1 low
		break;
		
		case 2:
		PORTD &= 0b11011111;	// Set CS2 low
     e80:	5d 98       	cbi	0x0b, 5	; 11
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
     e82:	82 e0       	ldi	r24, 0x02	; 2
     e84:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     e86:	0d b4       	in	r0, 0x2d	; 45
     e88:	07 fe       	sbrs	r0, 7
     e8a:	fd cf       	rjmp	.-6      	; 0xe86 <__vector_7+0x42a>
	byteword=SPDR;				//just for clearing SPIF
     e8c:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
     e8e:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     e90:	0d b4       	in	r0, 0x2d	; 45
     e92:	07 fe       	sbrs	r0, 7
     e94:	fd cf       	rjmp	.-6      	; 0xe90 <__vector_7+0x434>
	byteword=SPDR;
     e96:	6e b5       	in	r22, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
     e98:	8b b1       	in	r24, 0x0b	; 11
     e9a:	80 6f       	ori	r24, 0xF0	; 240
     e9c:	8b b9       	out	0x0b, r24	; 11
	uint8_t u8_msb = 0;
	uint8_t u8_lsb = 0;
	
	u8_msb = SPIread(0x01, ch);
	u8_lsb = SPIread(0x02, ch);
	adc_code = (((u8_msb << 8) | u8_lsb) >> 1);
     e9e:	70 e0       	ldi	r23, 0x00	; 0
     ea0:	79 2b       	or	r23, r25
     ea2:	75 95       	asr	r23
     ea4:	67 95       	ror	r22
	return ((float)adc_code / 32.0 - 256.0);
     ea6:	07 2e       	mov	r0, r23
     ea8:	00 0c       	add	r0, r0
     eaa:	88 0b       	sbc	r24, r24
     eac:	99 0b       	sbc	r25, r25
     eae:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <__floatsisf>
     eb2:	20 e0       	ldi	r18, 0x00	; 0
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	40 e0       	ldi	r20, 0x00	; 0
     eb8:	5d e3       	ldi	r21, 0x3D	; 61
     eba:	0e 94 9c 22 	call	0x4538	; 0x4538 <__mulsf3>
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	40 e8       	ldi	r20, 0x80	; 128
     ec4:	53 e4       	ldi	r21, 0x43	; 67
     ec6:	0e 94 4c 21 	call	0x4298	; 0x4298 <__subsf3>
	{
		tempStableCh0 = 0;
	}
	
	//*** Channel 1 ***
	TempSensor1 = ReadTempSensor(2);
     eca:	60 93 b0 01 	sts	0x01B0, r22
     ece:	70 93 b1 01 	sts	0x01B1, r23
     ed2:	80 93 b2 01 	sts	0x01B2, r24
     ed6:	90 93 b3 01 	sts	0x01B3, r25
		
	if(TempSensor1 > (float)maxAllowedTemp)					// Max temperature limit
     eda:	60 91 b0 01 	lds	r22, 0x01B0
     ede:	70 91 b1 01 	lds	r23, 0x01B1
     ee2:	80 91 b2 01 	lds	r24, 0x01B2
     ee6:	90 91 b3 01 	lds	r25, 0x01B3
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	40 ef       	ldi	r20, 0xF0	; 240
     ef0:	52 e4       	ldi	r21, 0x42	; 66
     ef2:	0e 94 98 22 	call	0x4530	; 0x4530 <__gesf2>
     ef6:	18 16       	cp	r1, r24
     ef8:	2c f4       	brge	.+10     	; 0xf04 <__vector_7+0x4a8>
	{
		heaterEnableCh1 = false;
     efa:	10 92 ba 01 	sts	0x01BA, r1
		PORTC &= allHeaterOff;
     efe:	88 b1       	in	r24, 0x08	; 8
     f00:	80 7f       	andi	r24, 0xF0	; 240
     f02:	88 b9       	out	0x08, r24	; 8
	}

	TempError1[CtrlErrorIdx] = TempSetPoint1 - TempSensor1;			// Control error
     f04:	c0 91 a6 01 	lds	r28, 0x01A6
     f08:	d0 91 a7 01 	lds	r29, 0x01A7
     f0c:	60 91 8a 01 	lds	r22, 0x018A
     f10:	70 91 8b 01 	lds	r23, 0x018B
     f14:	80 91 8c 01 	lds	r24, 0x018C
     f18:	90 91 8d 01 	lds	r25, 0x018D
     f1c:	20 91 b0 01 	lds	r18, 0x01B0
     f20:	30 91 b1 01 	lds	r19, 0x01B1
     f24:	40 91 b2 01 	lds	r20, 0x01B2
     f28:	50 91 b3 01 	lds	r21, 0x01B3
     f2c:	0e 94 4c 21 	call	0x4298	; 0x4298 <__subsf3>
     f30:	cc 0f       	add	r28, r28
     f32:	dd 1f       	adc	r29, r29
     f34:	cc 0f       	add	r28, r28
     f36:	dd 1f       	adc	r29, r29
     f38:	c3 5f       	subi	r28, 0xF3	; 243
     f3a:	db 4f       	sbci	r29, 0xFB	; 251
     f3c:	68 83       	st	Y, r22
     f3e:	79 83       	std	Y+1, r23	; 0x01
     f40:	8a 83       	std	Y+2, r24	; 0x02
     f42:	9b 83       	std	Y+3, r25	; 0x03
	
	P_ch1 = TempError1[CtrlErrorIdx] * Pgain_ch1;					// P error
     f44:	e0 91 a6 01 	lds	r30, 0x01A6
     f48:	f0 91 a7 01 	lds	r31, 0x01A7
     f4c:	ee 0f       	add	r30, r30
     f4e:	ff 1f       	adc	r31, r31
     f50:	ee 0f       	add	r30, r30
     f52:	ff 1f       	adc	r31, r31
     f54:	e3 5f       	subi	r30, 0xF3	; 243
     f56:	fb 4f       	sbci	r31, 0xFB	; 251
     f58:	60 81       	ld	r22, Z
     f5a:	71 81       	ldd	r23, Z+1	; 0x01
     f5c:	82 81       	ldd	r24, Z+2	; 0x02
     f5e:	93 81       	ldd	r25, Z+3	; 0x03
     f60:	20 91 71 04 	lds	r18, 0x0471
     f64:	30 91 72 04 	lds	r19, 0x0472
     f68:	40 91 73 04 	lds	r20, 0x0473
     f6c:	50 91 74 04 	lds	r21, 0x0474
     f70:	0e 94 9c 22 	call	0x4538	; 0x4538 <__mulsf3>
     f74:	60 93 86 01 	sts	0x0186, r22
     f78:	70 93 87 01 	sts	0x0187, r23
     f7c:	80 93 88 01 	sts	0x0188, r24
     f80:	90 93 89 01 	sts	0x0189, r25
	I_ch1 = I_ch1 + (TempError1[CtrlErrorIdx] * Igain_ch1);			// I error
     f84:	e0 91 a6 01 	lds	r30, 0x01A6
     f88:	f0 91 a7 01 	lds	r31, 0x01A7
     f8c:	ee 0f       	add	r30, r30
     f8e:	ff 1f       	adc	r31, r31
     f90:	ee 0f       	add	r30, r30
     f92:	ff 1f       	adc	r31, r31
     f94:	e3 5f       	subi	r30, 0xF3	; 243
     f96:	fb 4f       	sbci	r31, 0xFB	; 251
     f98:	60 81       	ld	r22, Z
     f9a:	71 81       	ldd	r23, Z+1	; 0x01
     f9c:	82 81       	ldd	r24, Z+2	; 0x02
     f9e:	93 81       	ldd	r25, Z+3	; 0x03
     fa0:	20 91 c6 01 	lds	r18, 0x01C6
     fa4:	30 91 c7 01 	lds	r19, 0x01C7
     fa8:	40 91 c8 01 	lds	r20, 0x01C8
     fac:	50 91 c9 01 	lds	r21, 0x01C9
     fb0:	c0 90 82 01 	lds	r12, 0x0182
     fb4:	d0 90 83 01 	lds	r13, 0x0183
     fb8:	e0 90 84 01 	lds	r14, 0x0184
     fbc:	f0 90 85 01 	lds	r15, 0x0185
     fc0:	0e 94 9c 22 	call	0x4538	; 0x4538 <__mulsf3>
     fc4:	a7 01       	movw	r20, r14
     fc6:	96 01       	movw	r18, r12
     fc8:	0e 94 4d 21 	call	0x429a	; 0x429a <__addsf3>
     fcc:	60 93 82 01 	sts	0x0182, r22
     fd0:	70 93 83 01 	sts	0x0183, r23
     fd4:	80 93 84 01 	sts	0x0184, r24
     fd8:	90 93 85 01 	sts	0x0185, r25
	if(I_ch1 > integralErrorLimit)
     fdc:	60 91 82 01 	lds	r22, 0x0182
     fe0:	70 91 83 01 	lds	r23, 0x0183
     fe4:	80 91 84 01 	lds	r24, 0x0184
     fe8:	90 91 85 01 	lds	r25, 0x0185
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	40 e2       	ldi	r20, 0x20	; 32
     ff2:	51 e4       	ldi	r21, 0x41	; 65
     ff4:	0e 94 98 22 	call	0x4530	; 0x4530 <__gesf2>
     ff8:	18 16       	cp	r1, r24
     ffa:	64 f4       	brge	.+24     	; 0x1014 <__vector_7+0x5b8>
	{
		I_ch1 = integralErrorLimit;
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	a0 e2       	ldi	r26, 0x20	; 32
    1002:	b1 e4       	ldi	r27, 0x41	; 65
    1004:	80 93 82 01 	sts	0x0182, r24
    1008:	90 93 83 01 	sts	0x0183, r25
    100c:	a0 93 84 01 	sts	0x0184, r26
    1010:	b0 93 85 01 	sts	0x0185, r27
	}
	if(I_ch1 < -integralErrorLimit)
    1014:	60 91 82 01 	lds	r22, 0x0182
    1018:	70 91 83 01 	lds	r23, 0x0183
    101c:	80 91 84 01 	lds	r24, 0x0184
    1020:	90 91 85 01 	lds	r25, 0x0185
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	40 e2       	ldi	r20, 0x20	; 32
    102a:	51 ec       	ldi	r21, 0xC1	; 193
    102c:	0e 94 b1 21 	call	0x4362	; 0x4362 <__cmpsf2>
    1030:	88 23       	and	r24, r24
    1032:	64 f4       	brge	.+24     	; 0x104c <__vector_7+0x5f0>
	{
		I_ch1 = -integralErrorLimit;
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	a0 e2       	ldi	r26, 0x20	; 32
    103a:	b1 ec       	ldi	r27, 0xC1	; 193
    103c:	80 93 82 01 	sts	0x0182, r24
    1040:	90 93 83 01 	sts	0x0183, r25
    1044:	a0 93 84 01 	sts	0x0184, r26
    1048:	b0 93 85 01 	sts	0x0185, r27
	}
	
	D_ch1 = (TempError1[CtrlErrorIdx] - TempError1[CtrlErrorHistIdx]) * Dgain_ch1; // D error
    104c:	e0 91 a6 01 	lds	r30, 0x01A6
    1050:	f0 91 a7 01 	lds	r31, 0x01A7
    1054:	ee 0f       	add	r30, r30
    1056:	ff 1f       	adc	r31, r31
    1058:	ee 0f       	add	r30, r30
    105a:	ff 1f       	adc	r31, r31
    105c:	e3 5f       	subi	r30, 0xF3	; 243
    105e:	fb 4f       	sbci	r31, 0xFB	; 251
    1060:	60 81       	ld	r22, Z
    1062:	71 81       	ldd	r23, Z+1	; 0x01
    1064:	82 81       	ldd	r24, Z+2	; 0x02
    1066:	93 81       	ldd	r25, Z+3	; 0x03
    1068:	e0 91 00 01 	lds	r30, 0x0100
    106c:	f0 91 01 01 	lds	r31, 0x0101
    1070:	ee 0f       	add	r30, r30
    1072:	ff 1f       	adc	r31, r31
    1074:	ee 0f       	add	r30, r30
    1076:	ff 1f       	adc	r31, r31
    1078:	e3 5f       	subi	r30, 0xF3	; 243
    107a:	fb 4f       	sbci	r31, 0xFB	; 251
    107c:	20 81       	ld	r18, Z
    107e:	31 81       	ldd	r19, Z+1	; 0x01
    1080:	42 81       	ldd	r20, Z+2	; 0x02
    1082:	53 81       	ldd	r21, Z+3	; 0x03
    1084:	c0 90 b6 04 	lds	r12, 0x04B6
    1088:	d0 90 b7 04 	lds	r13, 0x04B7
    108c:	e0 90 b8 04 	lds	r14, 0x04B8
    1090:	f0 90 b9 04 	lds	r15, 0x04B9
    1094:	0e 94 4c 21 	call	0x4298	; 0x4298 <__subsf3>
    1098:	a7 01       	movw	r20, r14
    109a:	96 01       	movw	r18, r12
    109c:	0e 94 9c 22 	call	0x4538	; 0x4538 <__mulsf3>
    10a0:	60 93 7e 01 	sts	0x017E, r22
    10a4:	70 93 7f 01 	sts	0x017F, r23
    10a8:	80 93 80 01 	sts	0x0180, r24
    10ac:	90 93 81 01 	sts	0x0181, r25
	
	Control_ch1_PID = P_ch1 + I_ch1 + D_ch1;
    10b0:	60 91 86 01 	lds	r22, 0x0186
    10b4:	70 91 87 01 	lds	r23, 0x0187
    10b8:	80 91 88 01 	lds	r24, 0x0188
    10bc:	90 91 89 01 	lds	r25, 0x0189
    10c0:	20 91 82 01 	lds	r18, 0x0182
    10c4:	30 91 83 01 	lds	r19, 0x0183
    10c8:	40 91 84 01 	lds	r20, 0x0184
    10cc:	50 91 85 01 	lds	r21, 0x0185
    10d0:	c0 90 7e 01 	lds	r12, 0x017E
    10d4:	d0 90 7f 01 	lds	r13, 0x017F
    10d8:	e0 90 80 01 	lds	r14, 0x0180
    10dc:	f0 90 81 01 	lds	r15, 0x0181
    10e0:	0e 94 4d 21 	call	0x429a	; 0x429a <__addsf3>
    10e4:	a7 01       	movw	r20, r14
    10e6:	96 01       	movw	r18, r12
    10e8:	0e 94 4d 21 	call	0x429a	; 0x429a <__addsf3>
    10ec:	60 93 76 01 	sts	0x0176, r22
    10f0:	70 93 77 01 	sts	0x0177, r23
    10f4:	80 93 78 01 	sts	0x0178, r24
    10f8:	90 93 79 01 	sts	0x0179, r25
	Control_ch1 = Control_ch1_PID + TempSetPoint1 * (float)0.21 - 5;
    10fc:	60 91 8a 01 	lds	r22, 0x018A
    1100:	70 91 8b 01 	lds	r23, 0x018B
    1104:	80 91 8c 01 	lds	r24, 0x018C
    1108:	90 91 8d 01 	lds	r25, 0x018D
    110c:	c0 90 76 01 	lds	r12, 0x0176
    1110:	d0 90 77 01 	lds	r13, 0x0177
    1114:	e0 90 78 01 	lds	r14, 0x0178
    1118:	f0 90 79 01 	lds	r15, 0x0179
    111c:	2d e3       	ldi	r18, 0x3D	; 61
    111e:	3a e0       	ldi	r19, 0x0A	; 10
    1120:	47 e5       	ldi	r20, 0x57	; 87
    1122:	5e e3       	ldi	r21, 0x3E	; 62
    1124:	0e 94 9c 22 	call	0x4538	; 0x4538 <__mulsf3>
    1128:	a7 01       	movw	r20, r14
    112a:	96 01       	movw	r18, r12
    112c:	0e 94 4d 21 	call	0x429a	; 0x429a <__addsf3>
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	40 ea       	ldi	r20, 0xA0	; 160
    1136:	50 e4       	ldi	r21, 0x40	; 64
    1138:	0e 94 4c 21 	call	0x4298	; 0x4298 <__subsf3>
    113c:	60 93 7a 01 	sts	0x017A, r22
    1140:	70 93 7b 01 	sts	0x017B, r23
    1144:	80 93 7c 01 	sts	0x017C, r24
    1148:	90 93 7d 01 	sts	0x017D, r25
	pwmCh1 = (round(Control_ch1));
    114c:	60 91 7a 01 	lds	r22, 0x017A
    1150:	70 91 7b 01 	lds	r23, 0x017B
    1154:	80 91 7c 01 	lds	r24, 0x017C
    1158:	90 91 7d 01 	lds	r25, 0x017D
    115c:	0e 94 ff 22 	call	0x45fe	; 0x45fe <round>
    1160:	0e 94 b5 21 	call	0x436a	; 0x436a <__fixsfsi>
    1164:	70 93 c1 01 	sts	0x01C1, r23
    1168:	60 93 c0 01 	sts	0x01C0, r22
	
	if(abs(TempError1[0]) > integralErrorActiveWindow)
    116c:	60 91 0d 04 	lds	r22, 0x040D
    1170:	70 91 0e 04 	lds	r23, 0x040E
    1174:	80 91 0f 04 	lds	r24, 0x040F
    1178:	90 91 10 04 	lds	r25, 0x0410
    117c:	0e 94 b5 21 	call	0x436a	; 0x436a <__fixsfsi>
    1180:	9b 01       	movw	r18, r22
    1182:	77 23       	and	r23, r23
    1184:	24 f4       	brge	.+8      	; 0x118e <__vector_7+0x732>
    1186:	22 27       	eor	r18, r18
    1188:	33 27       	eor	r19, r19
    118a:	26 1b       	sub	r18, r22
    118c:	37 0b       	sbc	r19, r23
    118e:	26 30       	cpi	r18, 0x06	; 6
    1190:	31 05       	cpc	r19, r1
    1192:	44 f0       	brlt	.+16     	; 0x11a4 <__vector_7+0x748>
	{
		I_ch1 = 0;									// Avoid integral wind-up
    1194:	10 92 82 01 	sts	0x0182, r1
    1198:	10 92 83 01 	sts	0x0183, r1
    119c:	10 92 84 01 	sts	0x0184, r1
    11a0:	10 92 85 01 	sts	0x0185, r1
		case 2:
		PORTD &= 0b11011111;	// Set CS2 low
		break;
				
		case 3:
		PORTD &= 0b10111111;	// Set CS3 low
    11a4:	5e 98       	cbi	0x0b, 6	; 11
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    11aa:	0d b4       	in	r0, 0x2d	; 45
    11ac:	07 fe       	sbrs	r0, 7
    11ae:	fd cf       	rjmp	.-6      	; 0x11aa <__vector_7+0x74e>
	byteword=SPDR;				//just for clearing SPIF
    11b0:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
    11b2:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    11b4:	0d b4       	in	r0, 0x2d	; 45
    11b6:	07 fe       	sbrs	r0, 7
    11b8:	fd cf       	rjmp	.-6      	; 0x11b4 <__vector_7+0x758>
	byteword=SPDR;
    11ba:	9e b5       	in	r25, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
    11bc:	8b b1       	in	r24, 0x0b	; 11
    11be:	80 6f       	ori	r24, 0xF0	; 240
    11c0:	8b b9       	out	0x0b, r24	; 11
		case 2:
		PORTD &= 0b11011111;	// Set CS2 low
		break;
				
		case 3:
		PORTD &= 0b10111111;	// Set CS3 low
    11c2:	5e 98       	cbi	0x0b, 6	; 11
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
    11c4:	82 e0       	ldi	r24, 0x02	; 2
    11c6:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    11c8:	0d b4       	in	r0, 0x2d	; 45
    11ca:	07 fe       	sbrs	r0, 7
    11cc:	fd cf       	rjmp	.-6      	; 0x11c8 <__vector_7+0x76c>
	byteword=SPDR;				//just for clearing SPIF
    11ce:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
    11d0:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    11d2:	0d b4       	in	r0, 0x2d	; 45
    11d4:	07 fe       	sbrs	r0, 7
    11d6:	fd cf       	rjmp	.-6      	; 0x11d2 <__vector_7+0x776>
	byteword=SPDR;
    11d8:	6e b5       	in	r22, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
    11da:	8b b1       	in	r24, 0x0b	; 11
    11dc:	80 6f       	ori	r24, 0xF0	; 240
    11de:	8b b9       	out	0x0b, r24	; 11
	uint8_t u8_msb = 0;
	uint8_t u8_lsb = 0;
	
	u8_msb = SPIread(0x01, ch);
	u8_lsb = SPIread(0x02, ch);
	adc_code = (((u8_msb << 8) | u8_lsb) >> 1);
    11e0:	70 e0       	ldi	r23, 0x00	; 0
    11e2:	79 2b       	or	r23, r25
    11e4:	75 95       	asr	r23
    11e6:	67 95       	ror	r22
	return ((float)adc_code / 32.0 - 256.0);
    11e8:	07 2e       	mov	r0, r23
    11ea:	00 0c       	add	r0, r0
    11ec:	88 0b       	sbc	r24, r24
    11ee:	99 0b       	sbc	r25, r25
    11f0:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <__floatsisf>
    11f4:	20 e0       	ldi	r18, 0x00	; 0
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	40 e0       	ldi	r20, 0x00	; 0
    11fa:	5d e3       	ldi	r21, 0x3D	; 61
    11fc:	0e 94 9c 22 	call	0x4538	; 0x4538 <__mulsf3>
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	40 e8       	ldi	r20, 0x80	; 128
    1206:	53 e4       	ldi	r21, 0x43	; 67
    1208:	0e 94 4c 21 	call	0x4298	; 0x4298 <__subsf3>
	{
		I_ch1 = 0;									// Avoid integral wind-up
	}
	
	// *** Channel 2 ***
	TempSensor2 = ReadTempSensor(3);
    120c:	60 93 ac 01 	sts	0x01AC, r22
    1210:	70 93 ad 01 	sts	0x01AD, r23
    1214:	80 93 ae 01 	sts	0x01AE, r24
    1218:	90 93 af 01 	sts	0x01AF, r25
	
	if(TempSensor2 > (float)maxAllowedTemp)					// Max temperature limit
    121c:	60 91 ac 01 	lds	r22, 0x01AC
    1220:	70 91 ad 01 	lds	r23, 0x01AD
    1224:	80 91 ae 01 	lds	r24, 0x01AE
    1228:	90 91 af 01 	lds	r25, 0x01AF
    122c:	20 e0       	ldi	r18, 0x00	; 0
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	40 ef       	ldi	r20, 0xF0	; 240
    1232:	52 e4       	ldi	r21, 0x42	; 66
    1234:	0e 94 98 22 	call	0x4530	; 0x4530 <__gesf2>
    1238:	18 16       	cp	r1, r24
    123a:	2c f4       	brge	.+10     	; 0x1246 <__vector_7+0x7ea>
	{
		heaterEnableCh2 = false;
    123c:	10 92 b9 01 	sts	0x01B9, r1
		PORTC &= allHeaterOff;
    1240:	88 b1       	in	r24, 0x08	; 8
    1242:	80 7f       	andi	r24, 0xF0	; 240
    1244:	88 b9       	out	0x08, r24	; 8
	}
	
	TempError2[CtrlErrorIdx] = TempSetPoint2 - TempSensor2;			// Control error
    1246:	c0 91 a6 01 	lds	r28, 0x01A6
    124a:	d0 91 a7 01 	lds	r29, 0x01A7
    124e:	60 91 72 01 	lds	r22, 0x0172
    1252:	70 91 73 01 	lds	r23, 0x0173
    1256:	80 91 74 01 	lds	r24, 0x0174
    125a:	90 91 75 01 	lds	r25, 0x0175
    125e:	20 91 ac 01 	lds	r18, 0x01AC
    1262:	30 91 ad 01 	lds	r19, 0x01AD
    1266:	40 91 ae 01 	lds	r20, 0x01AE
    126a:	50 91 af 01 	lds	r21, 0x01AF
    126e:	0e 94 4c 21 	call	0x4298	; 0x4298 <__subsf3>
    1272:	cc 0f       	add	r28, r28
    1274:	dd 1f       	adc	r29, r29
    1276:	cc 0f       	add	r28, r28
    1278:	dd 1f       	adc	r29, r29
    127a:	cf 57       	subi	r28, 0x7F	; 127
    127c:	db 4f       	sbci	r29, 0xFB	; 251
    127e:	68 83       	st	Y, r22
    1280:	79 83       	std	Y+1, r23	; 0x01
    1282:	8a 83       	std	Y+2, r24	; 0x02
    1284:	9b 83       	std	Y+3, r25	; 0x03
		
	P_ch2 = TempError2[CtrlErrorIdx] * Pgain_ch2;					// P error
    1286:	e0 91 a6 01 	lds	r30, 0x01A6
    128a:	f0 91 a7 01 	lds	r31, 0x01A7
    128e:	ee 0f       	add	r30, r30
    1290:	ff 1f       	adc	r31, r31
    1292:	ee 0f       	add	r30, r30
    1294:	ff 1f       	adc	r31, r31
    1296:	ef 57       	subi	r30, 0x7F	; 127
    1298:	fb 4f       	sbci	r31, 0xFB	; 251
    129a:	60 81       	ld	r22, Z
    129c:	71 81       	ldd	r23, Z+1	; 0x01
    129e:	82 81       	ldd	r24, Z+2	; 0x02
    12a0:	93 81       	ldd	r25, Z+3	; 0x03
    12a2:	20 91 6d 04 	lds	r18, 0x046D
    12a6:	30 91 6e 04 	lds	r19, 0x046E
    12aa:	40 91 6f 04 	lds	r20, 0x046F
    12ae:	50 91 70 04 	lds	r21, 0x0470
    12b2:	0e 94 9c 22 	call	0x4538	; 0x4538 <__mulsf3>
    12b6:	60 93 6e 01 	sts	0x016E, r22
    12ba:	70 93 6f 01 	sts	0x016F, r23
    12be:	80 93 70 01 	sts	0x0170, r24
    12c2:	90 93 71 01 	sts	0x0171, r25
	I_ch2 = I_ch2 + (TempError2[CtrlErrorIdx] * Igain_ch2);			// I error
    12c6:	e0 91 a6 01 	lds	r30, 0x01A6
    12ca:	f0 91 a7 01 	lds	r31, 0x01A7
    12ce:	ee 0f       	add	r30, r30
    12d0:	ff 1f       	adc	r31, r31
    12d2:	ee 0f       	add	r30, r30
    12d4:	ff 1f       	adc	r31, r31
    12d6:	ef 57       	subi	r30, 0x7F	; 127
    12d8:	fb 4f       	sbci	r31, 0xFB	; 251
    12da:	60 81       	ld	r22, Z
    12dc:	71 81       	ldd	r23, Z+1	; 0x01
    12de:	82 81       	ldd	r24, Z+2	; 0x02
    12e0:	93 81       	ldd	r25, Z+3	; 0x03
    12e2:	20 91 75 04 	lds	r18, 0x0475
    12e6:	30 91 76 04 	lds	r19, 0x0476
    12ea:	40 91 77 04 	lds	r20, 0x0477
    12ee:	50 91 78 04 	lds	r21, 0x0478
    12f2:	c0 90 6a 01 	lds	r12, 0x016A
    12f6:	d0 90 6b 01 	lds	r13, 0x016B
    12fa:	e0 90 6c 01 	lds	r14, 0x016C
    12fe:	f0 90 6d 01 	lds	r15, 0x016D
    1302:	0e 94 9c 22 	call	0x4538	; 0x4538 <__mulsf3>
    1306:	a7 01       	movw	r20, r14
    1308:	96 01       	movw	r18, r12
    130a:	0e 94 4d 21 	call	0x429a	; 0x429a <__addsf3>
    130e:	60 93 6a 01 	sts	0x016A, r22
    1312:	70 93 6b 01 	sts	0x016B, r23
    1316:	80 93 6c 01 	sts	0x016C, r24
    131a:	90 93 6d 01 	sts	0x016D, r25
	if(I_ch2 > integralErrorLimit)
    131e:	60 91 6a 01 	lds	r22, 0x016A
    1322:	70 91 6b 01 	lds	r23, 0x016B
    1326:	80 91 6c 01 	lds	r24, 0x016C
    132a:	90 91 6d 01 	lds	r25, 0x016D
    132e:	20 e0       	ldi	r18, 0x00	; 0
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	40 e2       	ldi	r20, 0x20	; 32
    1334:	51 e4       	ldi	r21, 0x41	; 65
    1336:	0e 94 98 22 	call	0x4530	; 0x4530 <__gesf2>
    133a:	18 16       	cp	r1, r24
    133c:	64 f4       	brge	.+24     	; 0x1356 <__vector_7+0x8fa>
	{
		I_ch2 = integralErrorLimit;
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	a0 e2       	ldi	r26, 0x20	; 32
    1344:	b1 e4       	ldi	r27, 0x41	; 65
    1346:	80 93 6a 01 	sts	0x016A, r24
    134a:	90 93 6b 01 	sts	0x016B, r25
    134e:	a0 93 6c 01 	sts	0x016C, r26
    1352:	b0 93 6d 01 	sts	0x016D, r27
	}
	if(I_ch2 < -integralErrorLimit)
    1356:	60 91 6a 01 	lds	r22, 0x016A
    135a:	70 91 6b 01 	lds	r23, 0x016B
    135e:	80 91 6c 01 	lds	r24, 0x016C
    1362:	90 91 6d 01 	lds	r25, 0x016D
    1366:	20 e0       	ldi	r18, 0x00	; 0
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	40 e2       	ldi	r20, 0x20	; 32
    136c:	51 ec       	ldi	r21, 0xC1	; 193
    136e:	0e 94 b1 21 	call	0x4362	; 0x4362 <__cmpsf2>
    1372:	88 23       	and	r24, r24
    1374:	64 f4       	brge	.+24     	; 0x138e <__vector_7+0x932>
	{
		I_ch2 = -integralErrorLimit;
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	a0 e2       	ldi	r26, 0x20	; 32
    137c:	b1 ec       	ldi	r27, 0xC1	; 193
    137e:	80 93 6a 01 	sts	0x016A, r24
    1382:	90 93 6b 01 	sts	0x016B, r25
    1386:	a0 93 6c 01 	sts	0x016C, r26
    138a:	b0 93 6d 01 	sts	0x016D, r27
	}
		
	D_ch2 = (TempError2[CtrlErrorIdx] - TempError2[CtrlErrorHistIdx]) * Dgain_ch2; // D error
    138e:	e0 91 a6 01 	lds	r30, 0x01A6
    1392:	f0 91 a7 01 	lds	r31, 0x01A7
    1396:	ee 0f       	add	r30, r30
    1398:	ff 1f       	adc	r31, r31
    139a:	ee 0f       	add	r30, r30
    139c:	ff 1f       	adc	r31, r31
    139e:	ef 57       	subi	r30, 0x7F	; 127
    13a0:	fb 4f       	sbci	r31, 0xFB	; 251
    13a2:	60 81       	ld	r22, Z
    13a4:	71 81       	ldd	r23, Z+1	; 0x01
    13a6:	82 81       	ldd	r24, Z+2	; 0x02
    13a8:	93 81       	ldd	r25, Z+3	; 0x03
    13aa:	e0 91 00 01 	lds	r30, 0x0100
    13ae:	f0 91 01 01 	lds	r31, 0x0101
    13b2:	ee 0f       	add	r30, r30
    13b4:	ff 1f       	adc	r31, r31
    13b6:	ee 0f       	add	r30, r30
    13b8:	ff 1f       	adc	r31, r31
    13ba:	ef 57       	subi	r30, 0x7F	; 127
    13bc:	fb 4f       	sbci	r31, 0xFB	; 251
    13be:	20 81       	ld	r18, Z
    13c0:	31 81       	ldd	r19, Z+1	; 0x01
    13c2:	42 81       	ldd	r20, Z+2	; 0x02
    13c4:	53 81       	ldd	r21, Z+3	; 0x03
    13c6:	c0 90 b2 04 	lds	r12, 0x04B2
    13ca:	d0 90 b3 04 	lds	r13, 0x04B3
    13ce:	e0 90 b4 04 	lds	r14, 0x04B4
    13d2:	f0 90 b5 04 	lds	r15, 0x04B5
    13d6:	0e 94 4c 21 	call	0x4298	; 0x4298 <__subsf3>
    13da:	a7 01       	movw	r20, r14
    13dc:	96 01       	movw	r18, r12
    13de:	0e 94 9c 22 	call	0x4538	; 0x4538 <__mulsf3>
    13e2:	60 93 66 01 	sts	0x0166, r22
    13e6:	70 93 67 01 	sts	0x0167, r23
    13ea:	80 93 68 01 	sts	0x0168, r24
    13ee:	90 93 69 01 	sts	0x0169, r25
		
	Control_ch2_PID = P_ch2 + I_ch2 + D_ch2;
    13f2:	60 91 6e 01 	lds	r22, 0x016E
    13f6:	70 91 6f 01 	lds	r23, 0x016F
    13fa:	80 91 70 01 	lds	r24, 0x0170
    13fe:	90 91 71 01 	lds	r25, 0x0171
    1402:	20 91 6a 01 	lds	r18, 0x016A
    1406:	30 91 6b 01 	lds	r19, 0x016B
    140a:	40 91 6c 01 	lds	r20, 0x016C
    140e:	50 91 6d 01 	lds	r21, 0x016D
    1412:	c0 90 66 01 	lds	r12, 0x0166
    1416:	d0 90 67 01 	lds	r13, 0x0167
    141a:	e0 90 68 01 	lds	r14, 0x0168
    141e:	f0 90 69 01 	lds	r15, 0x0169
    1422:	0e 94 4d 21 	call	0x429a	; 0x429a <__addsf3>
    1426:	a7 01       	movw	r20, r14
    1428:	96 01       	movw	r18, r12
    142a:	0e 94 4d 21 	call	0x429a	; 0x429a <__addsf3>
    142e:	60 93 5e 01 	sts	0x015E, r22
    1432:	70 93 5f 01 	sts	0x015F, r23
    1436:	80 93 60 01 	sts	0x0160, r24
    143a:	90 93 61 01 	sts	0x0161, r25
	Control_ch2 = Control_ch2_PID + TempSetPoint2 * (float)0.21 - 5;
    143e:	60 91 72 01 	lds	r22, 0x0172
    1442:	70 91 73 01 	lds	r23, 0x0173
    1446:	80 91 74 01 	lds	r24, 0x0174
    144a:	90 91 75 01 	lds	r25, 0x0175
    144e:	c0 90 5e 01 	lds	r12, 0x015E
    1452:	d0 90 5f 01 	lds	r13, 0x015F
    1456:	e0 90 60 01 	lds	r14, 0x0160
    145a:	f0 90 61 01 	lds	r15, 0x0161
    145e:	2d e3       	ldi	r18, 0x3D	; 61
    1460:	3a e0       	ldi	r19, 0x0A	; 10
    1462:	47 e5       	ldi	r20, 0x57	; 87
    1464:	5e e3       	ldi	r21, 0x3E	; 62
    1466:	0e 94 9c 22 	call	0x4538	; 0x4538 <__mulsf3>
    146a:	a7 01       	movw	r20, r14
    146c:	96 01       	movw	r18, r12
    146e:	0e 94 4d 21 	call	0x429a	; 0x429a <__addsf3>
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	40 ea       	ldi	r20, 0xA0	; 160
    1478:	50 e4       	ldi	r21, 0x40	; 64
    147a:	0e 94 4c 21 	call	0x4298	; 0x4298 <__subsf3>
    147e:	60 93 62 01 	sts	0x0162, r22
    1482:	70 93 63 01 	sts	0x0163, r23
    1486:	80 93 64 01 	sts	0x0164, r24
    148a:	90 93 65 01 	sts	0x0165, r25
	pwmCh2 = (round(Control_ch2));
    148e:	60 91 62 01 	lds	r22, 0x0162
    1492:	70 91 63 01 	lds	r23, 0x0163
    1496:	80 91 64 01 	lds	r24, 0x0164
    149a:	90 91 65 01 	lds	r25, 0x0165
    149e:	0e 94 ff 22 	call	0x45fe	; 0x45fe <round>
    14a2:	0e 94 b5 21 	call	0x436a	; 0x436a <__fixsfsi>
    14a6:	70 93 bf 01 	sts	0x01BF, r23
    14aa:	60 93 be 01 	sts	0x01BE, r22
		
	if(abs(TempError2[0]) > integralErrorActiveWindow)
    14ae:	60 91 81 04 	lds	r22, 0x0481
    14b2:	70 91 82 04 	lds	r23, 0x0482
    14b6:	80 91 83 04 	lds	r24, 0x0483
    14ba:	90 91 84 04 	lds	r25, 0x0484
    14be:	0e 94 b5 21 	call	0x436a	; 0x436a <__fixsfsi>
    14c2:	9b 01       	movw	r18, r22
    14c4:	77 23       	and	r23, r23
    14c6:	24 f4       	brge	.+8      	; 0x14d0 <__vector_7+0xa74>
    14c8:	22 27       	eor	r18, r18
    14ca:	33 27       	eor	r19, r19
    14cc:	26 1b       	sub	r18, r22
    14ce:	37 0b       	sbc	r19, r23
    14d0:	26 30       	cpi	r18, 0x06	; 6
    14d2:	31 05       	cpc	r19, r1
    14d4:	44 f0       	brlt	.+16     	; 0x14e6 <__vector_7+0xa8a>
	{
		I_ch2 = 0;									// Avoid integral wind-up
    14d6:	10 92 6a 01 	sts	0x016A, r1
    14da:	10 92 6b 01 	sts	0x016B, r1
    14de:	10 92 6c 01 	sts	0x016C, r1
    14e2:	10 92 6d 01 	sts	0x016D, r1
		case 3:
		PORTD &= 0b10111111;	// Set CS3 low
		break;
						
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
    14e6:	5f 98       	cbi	0x0b, 7	; 11
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    14ec:	0d b4       	in	r0, 0x2d	; 45
    14ee:	07 fe       	sbrs	r0, 7
    14f0:	fd cf       	rjmp	.-6      	; 0x14ec <__vector_7+0xa90>
	byteword=SPDR;				//just for clearing SPIF
    14f2:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
    14f4:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    14f6:	0d b4       	in	r0, 0x2d	; 45
    14f8:	07 fe       	sbrs	r0, 7
    14fa:	fd cf       	rjmp	.-6      	; 0x14f6 <__vector_7+0xa9a>
	byteword=SPDR;
    14fc:	9e b5       	in	r25, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
    14fe:	8b b1       	in	r24, 0x0b	; 11
    1500:	80 6f       	ori	r24, 0xF0	; 240
    1502:	8b b9       	out	0x0b, r24	; 11
		case 3:
		PORTD &= 0b10111111;	// Set CS3 low
		break;
						
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
    1504:	5f 98       	cbi	0x0b, 7	; 11
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
    1506:	82 e0       	ldi	r24, 0x02	; 2
    1508:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    150a:	0d b4       	in	r0, 0x2d	; 45
    150c:	07 fe       	sbrs	r0, 7
    150e:	fd cf       	rjmp	.-6      	; 0x150a <__vector_7+0xaae>
	byteword=SPDR;				//just for clearing SPIF
    1510:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
    1512:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    1514:	0d b4       	in	r0, 0x2d	; 45
    1516:	07 fe       	sbrs	r0, 7
    1518:	fd cf       	rjmp	.-6      	; 0x1514 <__vector_7+0xab8>
	byteword=SPDR;
    151a:	6e b5       	in	r22, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
    151c:	8b b1       	in	r24, 0x0b	; 11
    151e:	80 6f       	ori	r24, 0xF0	; 240
    1520:	8b b9       	out	0x0b, r24	; 11
	uint8_t u8_msb = 0;
	uint8_t u8_lsb = 0;
	
	u8_msb = SPIread(0x01, ch);
	u8_lsb = SPIread(0x02, ch);
	adc_code = (((u8_msb << 8) | u8_lsb) >> 1);
    1522:	70 e0       	ldi	r23, 0x00	; 0
    1524:	79 2b       	or	r23, r25
    1526:	75 95       	asr	r23
    1528:	67 95       	ror	r22
	return ((float)adc_code / 32.0 - 256.0);
    152a:	07 2e       	mov	r0, r23
    152c:	00 0c       	add	r0, r0
    152e:	88 0b       	sbc	r24, r24
    1530:	99 0b       	sbc	r25, r25
    1532:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <__floatsisf>
    1536:	20 e0       	ldi	r18, 0x00	; 0
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	40 e0       	ldi	r20, 0x00	; 0
    153c:	5d e3       	ldi	r21, 0x3D	; 61
    153e:	0e 94 9c 22 	call	0x4538	; 0x4538 <__mulsf3>
    1542:	20 e0       	ldi	r18, 0x00	; 0
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	40 e8       	ldi	r20, 0x80	; 128
    1548:	53 e4       	ldi	r21, 0x43	; 67
    154a:	0e 94 4c 21 	call	0x4298	; 0x4298 <__subsf3>
	{
		I_ch2 = 0;									// Avoid integral wind-up
	}

	// *** Channel 3 ***
	TempSensor3 = ReadTempSensor(4);
    154e:	60 93 a8 01 	sts	0x01A8, r22
    1552:	70 93 a9 01 	sts	0x01A9, r23
    1556:	80 93 aa 01 	sts	0x01AA, r24
    155a:	90 93 ab 01 	sts	0x01AB, r25
	
	if(TempSensor3 > (float)maxAllowedTemp)					// Max temperature limit
    155e:	60 91 a8 01 	lds	r22, 0x01A8
    1562:	70 91 a9 01 	lds	r23, 0x01A9
    1566:	80 91 aa 01 	lds	r24, 0x01AA
    156a:	90 91 ab 01 	lds	r25, 0x01AB
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	40 ef       	ldi	r20, 0xF0	; 240
    1574:	52 e4       	ldi	r21, 0x42	; 66
    1576:	0e 94 98 22 	call	0x4530	; 0x4530 <__gesf2>
    157a:	18 16       	cp	r1, r24
    157c:	2c f4       	brge	.+10     	; 0x1588 <__vector_7+0xb2c>
	{
		heaterEnableCh3 = false;
    157e:	10 92 b8 01 	sts	0x01B8, r1
		PORTC &= allHeaterOff;
    1582:	88 b1       	in	r24, 0x08	; 8
    1584:	80 7f       	andi	r24, 0xF0	; 240
    1586:	88 b9       	out	0x08, r24	; 8
	}
	
	TempError3[CtrlErrorIdx] = TempSetPoint3 - TempSensor3;			// Control error
    1588:	c0 91 a6 01 	lds	r28, 0x01A6
    158c:	d0 91 a7 01 	lds	r29, 0x01A7
    1590:	60 91 5a 01 	lds	r22, 0x015A
    1594:	70 91 5b 01 	lds	r23, 0x015B
    1598:	80 91 5c 01 	lds	r24, 0x015C
    159c:	90 91 5d 01 	lds	r25, 0x015D
    15a0:	20 91 a8 01 	lds	r18, 0x01A8
    15a4:	30 91 a9 01 	lds	r19, 0x01A9
    15a8:	40 91 aa 01 	lds	r20, 0x01AA
    15ac:	50 91 ab 01 	lds	r21, 0x01AB
    15b0:	0e 94 4c 21 	call	0x4298	; 0x4298 <__subsf3>
    15b4:	cc 0f       	add	r28, r28
    15b6:	dd 1f       	adc	r29, r29
    15b8:	cc 0f       	add	r28, r28
    15ba:	dd 1f       	adc	r29, r29
    15bc:	c7 5c       	subi	r28, 0xC7	; 199
    15be:	db 4f       	sbci	r29, 0xFB	; 251
    15c0:	68 83       	st	Y, r22
    15c2:	79 83       	std	Y+1, r23	; 0x01
    15c4:	8a 83       	std	Y+2, r24	; 0x02
    15c6:	9b 83       	std	Y+3, r25	; 0x03
	
	P_ch3 = TempError3[CtrlErrorIdx] * Pgain_ch3;					// P error
    15c8:	e0 91 a6 01 	lds	r30, 0x01A6
    15cc:	f0 91 a7 01 	lds	r31, 0x01A7
    15d0:	ee 0f       	add	r30, r30
    15d2:	ff 1f       	adc	r31, r31
    15d4:	ee 0f       	add	r30, r30
    15d6:	ff 1f       	adc	r31, r31
    15d8:	e7 5c       	subi	r30, 0xC7	; 199
    15da:	fb 4f       	sbci	r31, 0xFB	; 251
    15dc:	60 81       	ld	r22, Z
    15de:	71 81       	ldd	r23, Z+1	; 0x01
    15e0:	82 81       	ldd	r24, Z+2	; 0x02
    15e2:	93 81       	ldd	r25, Z+3	; 0x03
    15e4:	20 91 0a 03 	lds	r18, 0x030A
    15e8:	30 91 0b 03 	lds	r19, 0x030B
    15ec:	40 91 0c 03 	lds	r20, 0x030C
    15f0:	50 91 0d 03 	lds	r21, 0x030D
    15f4:	0e 94 9c 22 	call	0x4538	; 0x4538 <__mulsf3>
    15f8:	60 93 56 01 	sts	0x0156, r22
    15fc:	70 93 57 01 	sts	0x0157, r23
    1600:	80 93 58 01 	sts	0x0158, r24
    1604:	90 93 59 01 	sts	0x0159, r25
	I_ch3 = I_ch3 + (TempError3[CtrlErrorIdx] * Igain_ch3);			// I error
    1608:	e0 91 a6 01 	lds	r30, 0x01A6
    160c:	f0 91 a7 01 	lds	r31, 0x01A7
    1610:	ee 0f       	add	r30, r30
    1612:	ff 1f       	adc	r31, r31
    1614:	ee 0f       	add	r30, r30
    1616:	ff 1f       	adc	r31, r31
    1618:	e7 5c       	subi	r30, 0xC7	; 199
    161a:	fb 4f       	sbci	r31, 0xFB	; 251
    161c:	60 81       	ld	r22, Z
    161e:	71 81       	ldd	r23, Z+1	; 0x01
    1620:	82 81       	ldd	r24, Z+2	; 0x02
    1622:	93 81       	ldd	r25, Z+3	; 0x03
    1624:	20 91 fb 01 	lds	r18, 0x01FB
    1628:	30 91 fc 01 	lds	r19, 0x01FC
    162c:	40 91 fd 01 	lds	r20, 0x01FD
    1630:	50 91 fe 01 	lds	r21, 0x01FE
    1634:	c0 90 52 01 	lds	r12, 0x0152
    1638:	d0 90 53 01 	lds	r13, 0x0153
    163c:	e0 90 54 01 	lds	r14, 0x0154
    1640:	f0 90 55 01 	lds	r15, 0x0155
    1644:	0e 94 9c 22 	call	0x4538	; 0x4538 <__mulsf3>
    1648:	a7 01       	movw	r20, r14
    164a:	96 01       	movw	r18, r12
    164c:	0e 94 4d 21 	call	0x429a	; 0x429a <__addsf3>
    1650:	60 93 52 01 	sts	0x0152, r22
    1654:	70 93 53 01 	sts	0x0153, r23
    1658:	80 93 54 01 	sts	0x0154, r24
    165c:	90 93 55 01 	sts	0x0155, r25
	if(I_ch3 > integralErrorLimit)
    1660:	60 91 52 01 	lds	r22, 0x0152
    1664:	70 91 53 01 	lds	r23, 0x0153
    1668:	80 91 54 01 	lds	r24, 0x0154
    166c:	90 91 55 01 	lds	r25, 0x0155
    1670:	20 e0       	ldi	r18, 0x00	; 0
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	40 e2       	ldi	r20, 0x20	; 32
    1676:	51 e4       	ldi	r21, 0x41	; 65
    1678:	0e 94 98 22 	call	0x4530	; 0x4530 <__gesf2>
    167c:	18 16       	cp	r1, r24
    167e:	64 f4       	brge	.+24     	; 0x1698 <__vector_7+0xc3c>
	{
		I_ch3 = integralErrorLimit;
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	a0 e2       	ldi	r26, 0x20	; 32
    1686:	b1 e4       	ldi	r27, 0x41	; 65
    1688:	80 93 52 01 	sts	0x0152, r24
    168c:	90 93 53 01 	sts	0x0153, r25
    1690:	a0 93 54 01 	sts	0x0154, r26
    1694:	b0 93 55 01 	sts	0x0155, r27
	}
	if(I_ch3 < -integralErrorLimit)
    1698:	60 91 52 01 	lds	r22, 0x0152
    169c:	70 91 53 01 	lds	r23, 0x0153
    16a0:	80 91 54 01 	lds	r24, 0x0154
    16a4:	90 91 55 01 	lds	r25, 0x0155
    16a8:	20 e0       	ldi	r18, 0x00	; 0
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	40 e2       	ldi	r20, 0x20	; 32
    16ae:	51 ec       	ldi	r21, 0xC1	; 193
    16b0:	0e 94 b1 21 	call	0x4362	; 0x4362 <__cmpsf2>
    16b4:	88 23       	and	r24, r24
    16b6:	64 f4       	brge	.+24     	; 0x16d0 <__vector_7+0xc74>
	{
		I_ch3 = -integralErrorLimit;
    16b8:	80 e0       	ldi	r24, 0x00	; 0
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	a0 e2       	ldi	r26, 0x20	; 32
    16be:	b1 ec       	ldi	r27, 0xC1	; 193
    16c0:	80 93 52 01 	sts	0x0152, r24
    16c4:	90 93 53 01 	sts	0x0153, r25
    16c8:	a0 93 54 01 	sts	0x0154, r26
    16cc:	b0 93 55 01 	sts	0x0155, r27
	}
	
	D_ch3 = (TempError3[CtrlErrorIdx] - TempError3[CtrlErrorHistIdx]) * Dgain_ch3; // D error
    16d0:	e0 91 a6 01 	lds	r30, 0x01A6
    16d4:	f0 91 a7 01 	lds	r31, 0x01A7
    16d8:	ee 0f       	add	r30, r30
    16da:	ff 1f       	adc	r31, r31
    16dc:	ee 0f       	add	r30, r30
    16de:	ff 1f       	adc	r31, r31
    16e0:	e7 5c       	subi	r30, 0xC7	; 199
    16e2:	fb 4f       	sbci	r31, 0xFB	; 251
    16e4:	60 81       	ld	r22, Z
    16e6:	71 81       	ldd	r23, Z+1	; 0x01
    16e8:	82 81       	ldd	r24, Z+2	; 0x02
    16ea:	93 81       	ldd	r25, Z+3	; 0x03
    16ec:	e0 91 00 01 	lds	r30, 0x0100
    16f0:	f0 91 01 01 	lds	r31, 0x0101
    16f4:	ee 0f       	add	r30, r30
    16f6:	ff 1f       	adc	r31, r31
    16f8:	ee 0f       	add	r30, r30
    16fa:	ff 1f       	adc	r31, r31
    16fc:	e7 5c       	subi	r30, 0xC7	; 199
    16fe:	fb 4f       	sbci	r31, 0xFB	; 251
    1700:	20 81       	ld	r18, Z
    1702:	31 81       	ldd	r19, Z+1	; 0x01
    1704:	42 81       	ldd	r20, Z+2	; 0x02
    1706:	53 81       	ldd	r21, Z+3	; 0x03
    1708:	c0 90 79 04 	lds	r12, 0x0479
    170c:	d0 90 7a 04 	lds	r13, 0x047A
    1710:	e0 90 7b 04 	lds	r14, 0x047B
    1714:	f0 90 7c 04 	lds	r15, 0x047C
    1718:	0e 94 4c 21 	call	0x4298	; 0x4298 <__subsf3>
    171c:	a7 01       	movw	r20, r14
    171e:	96 01       	movw	r18, r12
    1720:	0e 94 9c 22 	call	0x4538	; 0x4538 <__mulsf3>
    1724:	60 93 4e 01 	sts	0x014E, r22
    1728:	70 93 4f 01 	sts	0x014F, r23
    172c:	80 93 50 01 	sts	0x0150, r24
    1730:	90 93 51 01 	sts	0x0151, r25
	
	Control_ch3_PID = P_ch3 + I_ch3 + D_ch3;
    1734:	60 91 56 01 	lds	r22, 0x0156
    1738:	70 91 57 01 	lds	r23, 0x0157
    173c:	80 91 58 01 	lds	r24, 0x0158
    1740:	90 91 59 01 	lds	r25, 0x0159
    1744:	20 91 52 01 	lds	r18, 0x0152
    1748:	30 91 53 01 	lds	r19, 0x0153
    174c:	40 91 54 01 	lds	r20, 0x0154
    1750:	50 91 55 01 	lds	r21, 0x0155
    1754:	c0 90 4e 01 	lds	r12, 0x014E
    1758:	d0 90 4f 01 	lds	r13, 0x014F
    175c:	e0 90 50 01 	lds	r14, 0x0150
    1760:	f0 90 51 01 	lds	r15, 0x0151
    1764:	0e 94 4d 21 	call	0x429a	; 0x429a <__addsf3>
    1768:	a7 01       	movw	r20, r14
    176a:	96 01       	movw	r18, r12
    176c:	0e 94 4d 21 	call	0x429a	; 0x429a <__addsf3>
    1770:	60 93 46 01 	sts	0x0146, r22
    1774:	70 93 47 01 	sts	0x0147, r23
    1778:	80 93 48 01 	sts	0x0148, r24
    177c:	90 93 49 01 	sts	0x0149, r25
	Control_ch3 = Control_ch3_PID + TempSetPoint3 * (float)0.21 - 5;
    1780:	60 91 5a 01 	lds	r22, 0x015A
    1784:	70 91 5b 01 	lds	r23, 0x015B
    1788:	80 91 5c 01 	lds	r24, 0x015C
    178c:	90 91 5d 01 	lds	r25, 0x015D
    1790:	c0 90 46 01 	lds	r12, 0x0146
    1794:	d0 90 47 01 	lds	r13, 0x0147
    1798:	e0 90 48 01 	lds	r14, 0x0148
    179c:	f0 90 49 01 	lds	r15, 0x0149
    17a0:	2d e3       	ldi	r18, 0x3D	; 61
    17a2:	3a e0       	ldi	r19, 0x0A	; 10
    17a4:	47 e5       	ldi	r20, 0x57	; 87
    17a6:	5e e3       	ldi	r21, 0x3E	; 62
    17a8:	0e 94 9c 22 	call	0x4538	; 0x4538 <__mulsf3>
    17ac:	a7 01       	movw	r20, r14
    17ae:	96 01       	movw	r18, r12
    17b0:	0e 94 4d 21 	call	0x429a	; 0x429a <__addsf3>
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	40 ea       	ldi	r20, 0xA0	; 160
    17ba:	50 e4       	ldi	r21, 0x40	; 64
    17bc:	0e 94 4c 21 	call	0x4298	; 0x4298 <__subsf3>
    17c0:	60 93 4a 01 	sts	0x014A, r22
    17c4:	70 93 4b 01 	sts	0x014B, r23
    17c8:	80 93 4c 01 	sts	0x014C, r24
    17cc:	90 93 4d 01 	sts	0x014D, r25
	pwmCh3 = (round(Control_ch3));
    17d0:	60 91 4a 01 	lds	r22, 0x014A
    17d4:	70 91 4b 01 	lds	r23, 0x014B
    17d8:	80 91 4c 01 	lds	r24, 0x014C
    17dc:	90 91 4d 01 	lds	r25, 0x014D
    17e0:	0e 94 ff 22 	call	0x45fe	; 0x45fe <round>
    17e4:	0e 94 b5 21 	call	0x436a	; 0x436a <__fixsfsi>
    17e8:	70 93 bd 01 	sts	0x01BD, r23
    17ec:	60 93 bc 01 	sts	0x01BC, r22
	
	if(abs(TempError3[0]) > integralErrorActiveWindow)
    17f0:	60 91 39 04 	lds	r22, 0x0439
    17f4:	70 91 3a 04 	lds	r23, 0x043A
    17f8:	80 91 3b 04 	lds	r24, 0x043B
    17fc:	90 91 3c 04 	lds	r25, 0x043C
    1800:	0e 94 b5 21 	call	0x436a	; 0x436a <__fixsfsi>
    1804:	9b 01       	movw	r18, r22
    1806:	77 23       	and	r23, r23
    1808:	24 f4       	brge	.+8      	; 0x1812 <__vector_7+0xdb6>
    180a:	22 27       	eor	r18, r18
    180c:	33 27       	eor	r19, r19
    180e:	26 1b       	sub	r18, r22
    1810:	37 0b       	sbc	r19, r23
    1812:	26 30       	cpi	r18, 0x06	; 6
    1814:	31 05       	cpc	r19, r1
    1816:	44 f0       	brlt	.+16     	; 0x1828 <__vector_7+0xdcc>
	{
		I_ch3 = 0;									// Avoid integral wind-up
    1818:	10 92 52 01 	sts	0x0152, r1
    181c:	10 92 53 01 	sts	0x0153, r1
    1820:	10 92 54 01 	sts	0x0154, r1
    1824:	10 92 55 01 	sts	0x0155, r1
	}	

	CtrlErrorIdx ++;							// Control error ring buffer index
    1828:	80 91 a6 01 	lds	r24, 0x01A6
    182c:	90 91 a7 01 	lds	r25, 0x01A7
    1830:	01 96       	adiw	r24, 0x01	; 1
    1832:	90 93 a7 01 	sts	0x01A7, r25
    1836:	80 93 a6 01 	sts	0x01A6, r24
	if(CtrlErrorIdx > errorHistory)
    183a:	80 91 a6 01 	lds	r24, 0x01A6
    183e:	90 91 a7 01 	lds	r25, 0x01A7
    1842:	0b 97       	sbiw	r24, 0x0b	; 11
    1844:	24 f0       	brlt	.+8      	; 0x184e <__vector_7+0xdf2>
	{
		CtrlErrorIdx = 0;
    1846:	10 92 a7 01 	sts	0x01A7, r1
    184a:	10 92 a6 01 	sts	0x01A6, r1
	}
	CtrlErrorHistIdx = CtrlErrorIdx + 1;
    184e:	80 91 a6 01 	lds	r24, 0x01A6
    1852:	90 91 a7 01 	lds	r25, 0x01A7
    1856:	01 96       	adiw	r24, 0x01	; 1
    1858:	90 93 01 01 	sts	0x0101, r25
    185c:	80 93 00 01 	sts	0x0100, r24
	if(CtrlErrorHistIdx > errorHistory)
    1860:	80 91 00 01 	lds	r24, 0x0100
    1864:	90 91 01 01 	lds	r25, 0x0101
    1868:	0b 97       	sbiw	r24, 0x0b	; 11
    186a:	24 f0       	brlt	.+8      	; 0x1874 <__vector_7+0xe18>
	{
		CtrlErrorHistIdx = 0;
    186c:	10 92 01 01 	sts	0x0101, r1
    1870:	10 92 00 01 	sts	0x0100, r1
	}		

	PORTD &= 0b11110111;						// Turn off LED on PCB (irq call freq: 16MHz / 1024 / 255 = 61.3 Hz )
    1874:	5b 98       	cbi	0x0b, 3	; 11
}
    1876:	ff 91       	pop	r31
    1878:	ef 91       	pop	r30
    187a:	df 91       	pop	r29
    187c:	cf 91       	pop	r28
    187e:	bf 91       	pop	r27
    1880:	af 91       	pop	r26
    1882:	9f 91       	pop	r25
    1884:	8f 91       	pop	r24
    1886:	7f 91       	pop	r23
    1888:	6f 91       	pop	r22
    188a:	5f 91       	pop	r21
    188c:	4f 91       	pop	r20
    188e:	3f 91       	pop	r19
    1890:	2f 91       	pop	r18
    1892:	ff 90       	pop	r15
    1894:	ef 90       	pop	r14
    1896:	df 90       	pop	r13
    1898:	cf 90       	pop	r12
    189a:	0f 90       	pop	r0
    189c:	0f be       	out	0x3f, r0	; 63
    189e:	0f 90       	pop	r0
    18a0:	1f 90       	pop	r1
    18a2:	18 95       	reti

000018a4 <ftoa>:
	printStatus("IntiRead: ");
	printStatus(data);
}

void ftoa(float num, char *str)
{
    18a4:	8f 92       	push	r8
    18a6:	9f 92       	push	r9
    18a8:	af 92       	push	r10
    18aa:	bf 92       	push	r11
    18ac:	cf 92       	push	r12
    18ae:	df 92       	push	r13
    18b0:	ef 92       	push	r14
    18b2:	ff 92       	push	r15
    18b4:	0f 93       	push	r16
    18b6:	1f 93       	push	r17
    18b8:	cf 93       	push	r28
    18ba:	df 93       	push	r29
    18bc:	cd b7       	in	r28, 0x3d	; 61
    18be:	de b7       	in	r29, 0x3e	; 62
    18c0:	64 97       	sbiw	r28, 0x14	; 20
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	f8 94       	cli
    18c6:	de bf       	out	0x3e, r29	; 62
    18c8:	0f be       	out	0x3f, r0	; 63
    18ca:	cd bf       	out	0x3d, r28	; 61
    18cc:	4b 01       	movw	r8, r22
    18ce:	5c 01       	movw	r10, r24
    18d0:	8a 01       	movw	r16, r20
	int intpart = num;
    18d2:	0e 94 b5 21 	call	0x436a	; 0x436a <__fixsfsi>
    18d6:	6b 01       	movw	r12, r22
    18d8:	7c 01       	movw	r14, r24
	int i;
	float decimal_part;
	char decimal[20];
	int PRECISION = 3;						// Decimal precision

	memset(str, 0x0, 20);
    18da:	84 e1       	ldi	r24, 0x14	; 20
    18dc:	f8 01       	movw	r30, r16
    18de:	11 92       	st	Z+, r1
    18e0:	8a 95       	dec	r24
    18e2:	e9 f7       	brne	.-6      	; 0x18de <ftoa+0x3a>
    18e4:	4a e0       	ldi	r20, 0x0A	; 10
    18e6:	b8 01       	movw	r22, r16
    18e8:	c6 01       	movw	r24, r12
    18ea:	0e 94 ab 23 	call	0x4756	; 0x4756 <__itoa_ncheck>
	itoa(num, str, 10);

	strcat(str, ".");
    18ee:	f8 01       	movw	r30, r16
    18f0:	01 90       	ld	r0, Z+
    18f2:	00 20       	and	r0, r0
    18f4:	e9 f7       	brne	.-6      	; 0x18f0 <ftoa+0x4c>
    18f6:	31 97       	sbiw	r30, 0x01	; 1
    18f8:	8e e2       	ldi	r24, 0x2E	; 46
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	91 83       	std	Z+1, r25	; 0x01
    18fe:	80 83       	st	Z, r24

	decimal_part = num - intpart;
    1900:	b6 01       	movw	r22, r12
    1902:	dd 0c       	add	r13, r13
    1904:	88 0b       	sbc	r24, r24
    1906:	99 0b       	sbc	r25, r25
    1908:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <__floatsisf>
    190c:	9b 01       	movw	r18, r22
    190e:	ac 01       	movw	r20, r24
    1910:	c5 01       	movw	r24, r10
    1912:	b4 01       	movw	r22, r8
    1914:	0e 94 4c 21 	call	0x4298	; 0x4298 <__subsf3>
	intdecimal = decimal_part * 1000;		// If decimal precision is 3 then 1000, 2 -> 100, 1 -> 10 ...;
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	4a e7       	ldi	r20, 0x7A	; 122
    191e:	54 e4       	ldi	r21, 0x44	; 68
    1920:	0e 94 9c 22 	call	0x4538	; 0x4538 <__mulsf3>
    1924:	0e 94 b5 21 	call	0x436a	; 0x436a <__fixsfsi>
    1928:	9b 01       	movw	r18, r22
    192a:	77 23       	and	r23, r23
    192c:	24 f4       	brge	.+8      	; 0x1936 <ftoa+0x92>
    192e:	22 27       	eor	r18, r18
    1930:	33 27       	eor	r19, r19
    1932:	26 1b       	sub	r18, r22
    1934:	37 0b       	sbc	r19, r23
    1936:	4a e0       	ldi	r20, 0x0A	; 10
    1938:	be 01       	movw	r22, r28
    193a:	6f 5f       	subi	r22, 0xFF	; 255
    193c:	7f 4f       	sbci	r23, 0xFF	; 255
    193e:	c9 01       	movw	r24, r18
    1940:	0e 94 ab 23 	call	0x4756	; 0x4756 <__itoa_ncheck>
	if(intdecimal < 0)
	{
		intdecimal = -intdecimal;
	}
	itoa(intdecimal, decimal, 10);
	for(i =0;i < (PRECISION - strlen(decimal));i++)
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	de 01       	movw	r26, r28
    194a:	11 96       	adiw	r26, 0x01	; 1
    194c:	23 e0       	ldi	r18, 0x03	; 3
    194e:	30 e0       	ldi	r19, 0x00	; 0
	{
		strcat(str, "0");
    1950:	40 e3       	ldi	r20, 0x30	; 48
    1952:	50 e0       	ldi	r21, 0x00	; 0
	if(intdecimal < 0)
	{
		intdecimal = -intdecimal;
	}
	itoa(intdecimal, decimal, 10);
	for(i =0;i < (PRECISION - strlen(decimal));i++)
    1954:	08 c0       	rjmp	.+16     	; 0x1966 <ftoa+0xc2>
	{
		strcat(str, "0");
    1956:	f8 01       	movw	r30, r16
    1958:	01 90       	ld	r0, Z+
    195a:	00 20       	and	r0, r0
    195c:	e9 f7       	brne	.-6      	; 0x1958 <ftoa+0xb4>
    195e:	31 97       	sbiw	r30, 0x01	; 1
    1960:	51 83       	std	Z+1, r21	; 0x01
    1962:	40 83       	st	Z, r20
	if(intdecimal < 0)
	{
		intdecimal = -intdecimal;
	}
	itoa(intdecimal, decimal, 10);
	for(i =0;i < (PRECISION - strlen(decimal));i++)
    1964:	01 96       	adiw	r24, 0x01	; 1
    1966:	fd 01       	movw	r30, r26
    1968:	01 90       	ld	r0, Z+
    196a:	00 20       	and	r0, r0
    196c:	e9 f7       	brne	.-6      	; 0x1968 <ftoa+0xc4>
    196e:	31 97       	sbiw	r30, 0x01	; 1
    1970:	ea 1b       	sub	r30, r26
    1972:	fb 0b       	sbc	r31, r27
    1974:	b9 01       	movw	r22, r18
    1976:	6e 1b       	sub	r22, r30
    1978:	7f 0b       	sbc	r23, r31
    197a:	86 17       	cp	r24, r22
    197c:	97 07       	cpc	r25, r23
    197e:	58 f3       	brcs	.-42     	; 0x1956 <ftoa+0xb2>
	{
		strcat(str, "0");
	}
	strcat(str, decimal);
    1980:	be 01       	movw	r22, r28
    1982:	6f 5f       	subi	r22, 0xFF	; 255
    1984:	7f 4f       	sbci	r23, 0xFF	; 255
    1986:	c8 01       	movw	r24, r16
    1988:	0e 94 77 23 	call	0x46ee	; 0x46ee <strcat>
}
    198c:	64 96       	adiw	r28, 0x14	; 20
    198e:	0f b6       	in	r0, 0x3f	; 63
    1990:	f8 94       	cli
    1992:	de bf       	out	0x3e, r29	; 62
    1994:	0f be       	out	0x3f, r0	; 63
    1996:	cd bf       	out	0x3d, r28	; 61
    1998:	df 91       	pop	r29
    199a:	cf 91       	pop	r28
    199c:	1f 91       	pop	r17
    199e:	0f 91       	pop	r16
    19a0:	ff 90       	pop	r15
    19a2:	ef 90       	pop	r14
    19a4:	df 90       	pop	r13
    19a6:	cf 90       	pop	r12
    19a8:	bf 90       	pop	r11
    19aa:	af 90       	pop	r10
    19ac:	9f 90       	pop	r9
    19ae:	8f 90       	pop	r8
    19b0:	08 95       	ret

000019b2 <main>:
	eeprom_write_float( (float*)eepromAdr_IgainCh3, Igain_ch3 );
	eeprom_write_float( (float*)eepromAdr_DgainCh3, Dgain_ch3 );			
}

int main(void)
{
    19b2:	cf 93       	push	r28
    19b4:	df 93       	push	r29
    19b6:	cd b7       	in	r28, 0x3d	; 61
    19b8:	de b7       	in	r29, 0x3e	; 62
    19ba:	cf 55       	subi	r28, 0x5F	; 95
    19bc:	d1 09       	sbc	r29, r1
    19be:	0f b6       	in	r0, 0x3f	; 63
    19c0:	f8 94       	cli
    19c2:	de bf       	out	0x3e, r29	; 62
    19c4:	0f be       	out	0x3f, r0	; 63
    19c6:	cd bf       	out	0x3d, r28	; 61
	char requestID[4];
	char s_string[20] = "C2CA SA ADP 1.0";
    19c8:	80 e1       	ldi	r24, 0x10	; 16
    19ca:	e8 e0       	ldi	r30, 0x08	; 8
    19cc:	f1 e0       	ldi	r31, 0x01	; 1
    19ce:	de 01       	movw	r26, r28
    19d0:	15 96       	adiw	r26, 0x05	; 5
    19d2:	01 90       	ld	r0, Z+
    19d4:	0d 92       	st	X+, r0
    19d6:	8a 95       	dec	r24
    19d8:	e1 f7       	brne	.-8      	; 0x19d2 <main+0x20>
    19da:	1d 8a       	std	Y+21, r1	; 0x15
    19dc:	1e 8a       	std	Y+22, r1	; 0x16
    19de:	1f 8a       	std	Y+23, r1	; 0x17
    19e0:	18 8e       	std	Y+24, r1	; 0x18
	char *pos;
	char inCrC_string[5];
	int i;
	int var;
	
	cli();
    19e2:	f8 94       	cli
	uart_init();
    19e4:	0e 94 a4 01 	call	0x348	; 0x348 <uart_init>
	sei();
    19e8:	78 94       	sei
/************************************************
SPI INITIALISATION
*************************************************/
static inline void SPIinit(void)
{
	SPI_DDR &= 0b11101111;							// PB4 = Input = MISO
    19ea:	24 98       	cbi	0x04, 4	; 4
	SPI_DDR = (1<<PORTB3)|(1<<PORTB5|(1<<PORTB2));	// Set MOSI, SCK and SS as output
    19ec:	8c e2       	ldi	r24, 0x2C	; 44
    19ee:	84 b9       	out	0x04, r24	; 4
	
	
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0)|(1<<CPHA)|(1<<CPOL); // Enable SPI, Master, set clock rate fck/16
    19f0:	8d e5       	ldi	r24, 0x5D	; 93
    19f2:	8c bd       	out	0x2c, r24	; 44
	cli();
	uart_init();
	sei();
	SPIinit();

	pwmCh0 = 1;
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	90 93 c3 01 	sts	0x01C3, r25
    19fc:	80 93 c2 01 	sts	0x01C2, r24
	pwmCh1 = 1;
    1a00:	90 93 c1 01 	sts	0x01C1, r25
    1a04:	80 93 c0 01 	sts	0x01C0, r24
	pwmCh2 = 1;
    1a08:	90 93 bf 01 	sts	0x01BF, r25
    1a0c:	80 93 be 01 	sts	0x01BE, r24
	pwmCh3 = 1;
    1a10:	90 93 bd 01 	sts	0x01BD, r25
    1a14:	80 93 bc 01 	sts	0x01BC, r24

	DDRD = 0b11111000;			// 1 = output 0 = input
    1a18:	88 ef       	ldi	r24, 0xF8	; 248
    1a1a:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0b00001111;
    1a1c:	8f e0       	ldi	r24, 0x0F	; 15
    1a1e:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1<<PORTB1);		// Set stepper Dir to output
    1a20:	21 9a       	sbi	0x04, 1	; 4
	
	PORTD |=(1<<PORTD7)|(1<<PORTD6)|(1<<PORTD5)|(1<<PORTD4);	// Set initially all CS high
    1a22:	8b b1       	in	r24, 0x0b	; 11
    1a24:	80 6f       	ori	r24, 0xF0	; 240
    1a26:	8b b9       	out	0x0b, r24	; 11
	}
}

static inline void ReadParmEEPROM()
{
	TempSetPoint0 = eeprom_read_float((float*)eepromAdr_TempSetPoint0);
    1a28:	80 e0       	ldi	r24, 0x00	; 0
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	0e 94 68 25 	call	0x4ad0	; 0x4ad0 <eeprom_read_dword>
    1a30:	60 93 a2 01 	sts	0x01A2, r22
    1a34:	70 93 a3 01 	sts	0x01A3, r23
    1a38:	80 93 a4 01 	sts	0x01A4, r24
    1a3c:	90 93 a5 01 	sts	0x01A5, r25
	Pgain_ch0 = eeprom_read_float((float*)eepromAdr_PgainCh0);
    1a40:	84 e0       	ldi	r24, 0x04	; 4
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	0e 94 68 25 	call	0x4ad0	; 0x4ad0 <eeprom_read_dword>
    1a48:	60 93 06 03 	sts	0x0306, r22
    1a4c:	70 93 07 03 	sts	0x0307, r23
    1a50:	80 93 08 03 	sts	0x0308, r24
    1a54:	90 93 09 03 	sts	0x0309, r25
	Igain_ch0 = eeprom_read_float((float*)eepromAdr_IgainCh0);
    1a58:	88 e0       	ldi	r24, 0x08	; 8
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	0e 94 68 25 	call	0x4ad0	; 0x4ad0 <eeprom_read_dword>
    1a60:	60 93 ba 04 	sts	0x04BA, r22
    1a64:	70 93 bb 04 	sts	0x04BB, r23
    1a68:	80 93 bc 04 	sts	0x04BC, r24
    1a6c:	90 93 bd 04 	sts	0x04BD, r25
	Dgain_ch0 = eeprom_read_float((float*)eepromAdr_DgainCh0);
    1a70:	8c e0       	ldi	r24, 0x0C	; 12
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	0e 94 68 25 	call	0x4ad0	; 0x4ad0 <eeprom_read_dword>
    1a78:	60 93 03 02 	sts	0x0203, r22
    1a7c:	70 93 04 02 	sts	0x0204, r23
    1a80:	80 93 05 02 	sts	0x0205, r24
    1a84:	90 93 06 02 	sts	0x0206, r25
	
	TempSetPoint1 = eeprom_read_float((float*)eepromAdr_TempSetPoint1);
    1a88:	80 e1       	ldi	r24, 0x10	; 16
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	0e 94 68 25 	call	0x4ad0	; 0x4ad0 <eeprom_read_dword>
    1a90:	60 93 8a 01 	sts	0x018A, r22
    1a94:	70 93 8b 01 	sts	0x018B, r23
    1a98:	80 93 8c 01 	sts	0x018C, r24
    1a9c:	90 93 8d 01 	sts	0x018D, r25
	Pgain_ch1 = eeprom_read_float((float*)eepromAdr_PgainCh1);
    1aa0:	84 e1       	ldi	r24, 0x14	; 20
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	0e 94 68 25 	call	0x4ad0	; 0x4ad0 <eeprom_read_dword>
    1aa8:	60 93 71 04 	sts	0x0471, r22
    1aac:	70 93 72 04 	sts	0x0472, r23
    1ab0:	80 93 73 04 	sts	0x0473, r24
    1ab4:	90 93 74 04 	sts	0x0474, r25
	Igain_ch1 = eeprom_read_float((float*)eepromAdr_IgainCh1);
    1ab8:	88 e1       	ldi	r24, 0x18	; 24
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	0e 94 68 25 	call	0x4ad0	; 0x4ad0 <eeprom_read_dword>
    1ac0:	60 93 c6 01 	sts	0x01C6, r22
    1ac4:	70 93 c7 01 	sts	0x01C7, r23
    1ac8:	80 93 c8 01 	sts	0x01C8, r24
    1acc:	90 93 c9 01 	sts	0x01C9, r25
	Dgain_ch1 = eeprom_read_float((float*)eepromAdr_DgainCh1);
    1ad0:	8c e1       	ldi	r24, 0x1C	; 28
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	0e 94 68 25 	call	0x4ad0	; 0x4ad0 <eeprom_read_dword>
    1ad8:	60 93 b6 04 	sts	0x04B6, r22
    1adc:	70 93 b7 04 	sts	0x04B7, r23
    1ae0:	80 93 b8 04 	sts	0x04B8, r24
    1ae4:	90 93 b9 04 	sts	0x04B9, r25
	
	TempSetPoint2 = eeprom_read_float((float*)eepromAdr_TempSetPoint2);
    1ae8:	80 e2       	ldi	r24, 0x20	; 32
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	0e 94 68 25 	call	0x4ad0	; 0x4ad0 <eeprom_read_dword>
    1af0:	60 93 72 01 	sts	0x0172, r22
    1af4:	70 93 73 01 	sts	0x0173, r23
    1af8:	80 93 74 01 	sts	0x0174, r24
    1afc:	90 93 75 01 	sts	0x0175, r25
	Pgain_ch2 = eeprom_read_float((float*)eepromAdr_PgainCh2);
    1b00:	84 e2       	ldi	r24, 0x24	; 36
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	0e 94 68 25 	call	0x4ad0	; 0x4ad0 <eeprom_read_dword>
    1b08:	60 93 6d 04 	sts	0x046D, r22
    1b0c:	70 93 6e 04 	sts	0x046E, r23
    1b10:	80 93 6f 04 	sts	0x046F, r24
    1b14:	90 93 70 04 	sts	0x0470, r25
	Igain_ch2 = eeprom_read_float((float*)eepromAdr_IgainCh2);
    1b18:	88 e2       	ldi	r24, 0x28	; 40
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	0e 94 68 25 	call	0x4ad0	; 0x4ad0 <eeprom_read_dword>
    1b20:	60 93 75 04 	sts	0x0475, r22
    1b24:	70 93 76 04 	sts	0x0476, r23
    1b28:	80 93 77 04 	sts	0x0477, r24
    1b2c:	90 93 78 04 	sts	0x0478, r25
	Dgain_ch2 = eeprom_read_float((float*)eepromAdr_DgainCh2);
    1b30:	8c e2       	ldi	r24, 0x2C	; 44
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	0e 94 68 25 	call	0x4ad0	; 0x4ad0 <eeprom_read_dword>
    1b38:	60 93 b2 04 	sts	0x04B2, r22
    1b3c:	70 93 b3 04 	sts	0x04B3, r23
    1b40:	80 93 b4 04 	sts	0x04B4, r24
    1b44:	90 93 b5 04 	sts	0x04B5, r25
	
	TempSetPoint3 = eeprom_read_float((float*)eepromAdr_TempSetPoint3);
    1b48:	80 e3       	ldi	r24, 0x30	; 48
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	0e 94 68 25 	call	0x4ad0	; 0x4ad0 <eeprom_read_dword>
    1b50:	60 93 5a 01 	sts	0x015A, r22
    1b54:	70 93 5b 01 	sts	0x015B, r23
    1b58:	80 93 5c 01 	sts	0x015C, r24
    1b5c:	90 93 5d 01 	sts	0x015D, r25
	Pgain_ch3 = eeprom_read_float((float*)eepromAdr_PgainCh3);
    1b60:	84 e3       	ldi	r24, 0x34	; 52
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	0e 94 68 25 	call	0x4ad0	; 0x4ad0 <eeprom_read_dword>
    1b68:	60 93 0a 03 	sts	0x030A, r22
    1b6c:	70 93 0b 03 	sts	0x030B, r23
    1b70:	80 93 0c 03 	sts	0x030C, r24
    1b74:	90 93 0d 03 	sts	0x030D, r25
	Igain_ch3 = eeprom_read_float((float*)eepromAdr_IgainCh3);
    1b78:	88 e3       	ldi	r24, 0x38	; 56
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	0e 94 68 25 	call	0x4ad0	; 0x4ad0 <eeprom_read_dword>
    1b80:	60 93 fb 01 	sts	0x01FB, r22
    1b84:	70 93 fc 01 	sts	0x01FC, r23
    1b88:	80 93 fd 01 	sts	0x01FD, r24
    1b8c:	90 93 fe 01 	sts	0x01FE, r25
	Dgain_ch3 = eeprom_read_float((float*)eepromAdr_DgainCh3);			
    1b90:	8c e3       	ldi	r24, 0x3C	; 60
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	0e 94 68 25 	call	0x4ad0	; 0x4ad0 <eeprom_read_dword>
    1b98:	60 93 79 04 	sts	0x0479, r22
    1b9c:	70 93 7a 04 	sts	0x047A, r23
    1ba0:	80 93 7b 04 	sts	0x047B, r24
    1ba4:	90 93 7c 04 	sts	0x047C, r25
	printStatus(data);
}

static inline void MAX31865initAuto(uint8_t ch)
{
	MaxRTDinit(0xC3, ch);
    1ba8:	61 e0       	ldi	r22, 0x01	; 1
    1baa:	83 ec       	ldi	r24, 0xC3	; 195
    1bac:	0e 94 0c 02 	call	0x418	; 0x418 <MaxRTDinit>
    1bb0:	62 e0       	ldi	r22, 0x02	; 2
    1bb2:	83 ec       	ldi	r24, 0xC3	; 195
    1bb4:	0e 94 0c 02 	call	0x418	; 0x418 <MaxRTDinit>
    1bb8:	63 e0       	ldi	r22, 0x03	; 3
    1bba:	83 ec       	ldi	r24, 0xC3	; 195
    1bbc:	0e 94 0c 02 	call	0x418	; 0x418 <MaxRTDinit>
    1bc0:	64 e0       	ldi	r22, 0x04	; 4
    1bc2:	83 ec       	ldi	r24, 0xC3	; 195
    1bc4:	0e 94 0c 02 	call	0x418	; 0x418 <MaxRTDinit>
}

static inline void TimerInit(void)
{
	// Timer0 PWM output
	TIMSK0 = _BV(OCIE0A);				// Enable Interrupt TimerCounter0 Compare Match A (TIMER0_COMPA_vect)
    1bc8:	82 e0       	ldi	r24, 0x02	; 2
    1bca:	80 93 6e 00 	sts	0x006E, r24
	TCCR0A = _BV(WGM01);				// Mode = CTC (Clear Timer on Compare)
    1bce:	84 bd       	out	0x24, r24	; 36
	TCCR0B = _BV(CS02) | _BV(CS00);		// 16MHz/1024, 0.000064 seconds per tick
    1bd0:	95 e0       	ldi	r25, 0x05	; 5
    1bd2:	95 bd       	out	0x25, r25	; 37
	OCR0A = 16;							// TIMER0_COMPA_vect will be triggered each 0.000064 x 16 = 0.001024 s (976.5 Hz)
    1bd4:	90 e1       	ldi	r25, 0x10	; 16
    1bd6:	97 bd       	out	0x27, r25	; 39

	// Timer2 PID controller	
	TIMSK2 = _BV(OCIE2A);				// Enable Interrupt TimerCounter2 Compare Match A (TIMER2_COMPA_vect)
    1bd8:	80 93 70 00 	sts	0x0070, r24
	TCCR2A = _BV(WGM21);				// Mode = CTC (Clear Timer on Compare)
    1bdc:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B = _BV(CS22) | _BV(CS21) | _BV(CS20);		// 16MHz/1024, 0.000064 seconds per tick
    1be0:	87 e0       	ldi	r24, 0x07	; 7
    1be2:	80 93 b1 00 	sts	0x00B1, r24
	OCR2A = 255;						// TIMER2_COMPA_vect will be triggered each 0.000064 x 255 = 0.01632 s (61.3 Hz)
    1be6:	8f ef       	ldi	r24, 0xFF	; 255
    1be8:	80 93 b3 00 	sts	0x00B3, r24
	
	sei();
    1bec:	78 94       	sei
	*	PC:		#12A?VR104
	*	ATMega:	!12A70.0006DCA
	***********************************************************/
	while(1)
	{
		memset(rx_string, 0x00, rx_size);			// Purge rx_string
    1bee:	0f 2e       	mov	r0, r31
    1bf0:	fe eb       	ldi	r31, 0xBE	; 190
    1bf2:	af 2e       	mov	r10, r31
    1bf4:	f4 e0       	ldi	r31, 0x04	; 4
    1bf6:	bf 2e       	mov	r11, r31
    1bf8:	f0 2d       	mov	r31, r0
 * \returns next data byte in buffer
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
    1bfa:	0f 2e       	mov	r0, r31
    1bfc:	fd ea       	ldi	r31, 0xAD	; 173
    1bfe:	4f 2e       	mov	r4, r31
    1c00:	f4 e0       	ldi	r31, 0x04	; 4
    1c02:	5f 2e       	mov	r5, r31
    1c04:	f0 2d       	mov	r31, r0
    1c06:	0f 2e       	mov	r0, r31
    1c08:	fc ed       	ldi	r31, 0xDC	; 220
    1c0a:	2f 2e       	mov	r2, r31
    1c0c:	f4 e0       	ldi	r31, 0x04	; 4
    1c0e:	3f 2e       	mov	r3, r31
    1c10:	f0 2d       	mov	r31, r0
		ftoa(Igain_ch3, tx_string);
		printStatus(tx_string);
		break;
		
		case 407:	// Send Dgain ch3
		ftoa(Dgain_ch3, tx_string);
    1c12:	9e 01       	movw	r18, r28
    1c14:	2a 5b       	subi	r18, 0xBA	; 186
    1c16:	3f 4f       	sbci	r19, 0xFF	; 255
    1c18:	6c 96       	adiw	r28, 0x1c	; 28
    1c1a:	3f af       	std	Y+63, r19	; 0x3f
    1c1c:	2e af       	std	Y+62, r18	; 0x3e
    1c1e:	6c 97       	sbiw	r28, 0x1c	; 28
	*	PC:		#12A?VR104
	*	ATMega:	!12A70.0006DCA
	***********************************************************/
	while(1)
	{
		memset(rx_string, 0x00, rx_size);			// Purge rx_string
    1c20:	6d 96       	adiw	r28, 0x1d	; 29
    1c22:	af ae       	std	Y+63, r10	; 0x3f
    1c24:	6d 97       	sbiw	r28, 0x1d	; 29
    1c26:	6e 96       	adiw	r28, 0x1e	; 30
    1c28:	bf ae       	std	Y+63, r11	; 0x3f
    1c2a:	6e 97       	sbiw	r28, 0x1e	; 30
    1c2c:	6f 96       	adiw	r28, 0x1f	; 31
    1c2e:	af ae       	std	Y+63, r10	; 0x3f
    1c30:	6f 97       	sbiw	r28, 0x1f	; 31
    1c32:	a0 96       	adiw	r28, 0x20	; 32
    1c34:	bf ae       	std	Y+63, r11	; 0x3f
    1c36:	a0 97       	sbiw	r28, 0x20	; 32
		ftoa(Igain_ch3, tx_string);
		printStatus(tx_string);
		break;
		
		case 407:	// Send Dgain ch3
		ftoa(Dgain_ch3, tx_string);
    1c38:	6b 96       	adiw	r28, 0x1b	; 27
    1c3a:	8f ac       	ldd	r8, Y+63	; 0x3f
    1c3c:	6b 97       	sbiw	r28, 0x1b	; 27
    1c3e:	6c 96       	adiw	r28, 0x1c	; 28
    1c40:	9f ac       	ldd	r9, Y+63	; 0x3f
    1c42:	6c 97       	sbiw	r28, 0x1c	; 28
    1c44:	68 2c       	mov	r6, r8
    1c46:	79 2c       	mov	r7, r9
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    1c48:	0f 2e       	mov	r0, r31
    1c4a:	fc ed       	ldi	r31, 0xDC	; 220
    1c4c:	8f 2e       	mov	r8, r31
    1c4e:	f4 e0       	ldi	r31, 0x04	; 4
    1c50:	9f 2e       	mov	r9, r31
    1c52:	f0 2d       	mov	r31, r0
	*	PC:		#12A?VR104
	*	ATMega:	!12A70.0006DCA
	***********************************************************/
	while(1)
	{
		memset(rx_string, 0x00, rx_size);			// Purge rx_string
    1c54:	0e e1       	ldi	r16, 0x1E	; 30
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    1c56:	10 e0       	ldi	r17, 0x00	; 0
    1c58:	d5 01       	movw	r26, r10
    1c5a:	e0 2f       	mov	r30, r16
    1c5c:	1d 92       	st	X+, r1
    1c5e:	ea 95       	dec	r30
    1c60:	e9 f7       	brne	.-6      	; 0x1c5c <main+0x2aa>
 * \returns next data byte in buffer
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
    1c62:	d2 01       	movw	r26, r4
    1c64:	13 96       	adiw	r26, 0x03	; 3
    1c66:	4d 91       	ld	r20, X+
    1c68:	5c 91       	ld	r21, X
    1c6a:	14 97       	sbiw	r26, 0x04	; 4
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    1c6c:	12 96       	adiw	r26, 0x02	; 2
    1c6e:	2c 91       	ld	r18, X
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	21 50       	subi	r18, 0x01	; 1
    1c74:	31 09       	sbc	r19, r1
    1c76:	6f 96       	adiw	r28, 0x1f	; 31
    1c78:	ef ad       	ldd	r30, Y+63	; 0x3f
    1c7a:	6f 97       	sbiw	r28, 0x1f	; 31
    1c7c:	a0 96       	adiw	r28, 0x20	; 32
    1c7e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1c80:	a0 97       	sbiw	r28, 0x20	; 32
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    1c82:	d2 01       	movw	r26, r4
    1c84:	11 96       	adiw	r26, 0x01	; 1
    1c86:	8c 91       	ld	r24, X
    1c88:	11 97       	sbiw	r26, 0x01	; 1
    1c8a:	9c 91       	ld	r25, X

		for(i = 0; i < rx_size; i++)
		{
			while(!uart_char_waiting());
    1c8c:	98 17       	cp	r25, r24
    1c8e:	c9 f3       	breq	.-14     	; 0x1c82 <main+0x2d0>
 * \returns next data byte in buffer
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
    1c90:	11 96       	adiw	r26, 0x01	; 1
    1c92:	8c 91       	ld	r24, X
    1c94:	da 01       	movw	r26, r20
    1c96:	a8 0f       	add	r26, r24
    1c98:	b1 1d       	adc	r27, r1
    1c9a:	9c 91       	ld	r25, X
 *
 * \returns the next read offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_read(const struct ring_buffer *ring)
{
	return get_next(ring->read_offset, ring->size);
    1c9c:	d2 01       	movw	r26, r4
    1c9e:	11 96       	adiw	r26, 0x01	; 1
    1ca0:	8c 91       	ld	r24, X
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    1ca2:	68 2f       	mov	r22, r24
    1ca4:	70 e0       	ldi	r23, 0x00	; 0
    1ca6:	62 17       	cp	r22, r18
    1ca8:	73 07       	cpc	r23, r19
    1caa:	11 f0       	breq	.+4      	; 0x1cb0 <main+0x2fe>
    1cac:	8f 5f       	subi	r24, 0xFF	; 255
    1cae:	01 c0       	rjmp	.+2      	; 0x1cb2 <main+0x300>
    1cb0:	81 2f       	mov	r24, r17
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
	ring->read_offset = ring_buffer_get_next_read(ring);
    1cb2:	d2 01       	movw	r26, r4
    1cb4:	11 96       	adiw	r26, 0x01	; 1
    1cb6:	8c 93       	st	X, r24
			rx_string[i] = uart_getchar();			// Collect the message
    1cb8:	91 93       	st	Z+, r25
			if(rx_string[i] == 0x0D)				// Terminate acquisition if <CR> received
    1cba:	9d 30       	cpi	r25, 0x0D	; 13
    1cbc:	19 f0       	breq	.+6      	; 0x1cc4 <main+0x312>
	***********************************************************/
	while(1)
	{
		memset(rx_string, 0x00, rx_size);			// Purge rx_string

		for(i = 0; i < rx_size; i++)
    1cbe:	e2 15       	cp	r30, r2
    1cc0:	f3 05       	cpc	r31, r3
    1cc2:	f9 f6       	brne	.-66     	; 0x1c82 <main+0x2d0>
			{
				break;
			}	
		}

		if(rx_string[0] == '#')
    1cc4:	f5 01       	movw	r30, r10
    1cc6:	80 81       	ld	r24, Z
    1cc8:	83 32       	cpi	r24, 0x23	; 35
    1cca:	31 f6       	brne	.-116    	; 0x1c58 <main+0x2a6>
		{
			pos = NULL;
			pos = strchr(rx_string, '?');
    1ccc:	6f e3       	ldi	r22, 0x3F	; 63
    1cce:	70 e0       	ldi	r23, 0x00	; 0
    1cd0:	6d 96       	adiw	r28, 0x1d	; 29
    1cd2:	8f ad       	ldd	r24, Y+63	; 0x3f
    1cd4:	6d 97       	sbiw	r28, 0x1d	; 29
    1cd6:	6e 96       	adiw	r28, 0x1e	; 30
    1cd8:	9f ad       	ldd	r25, Y+63	; 0x3f
    1cda:	6e 97       	sbiw	r28, 0x1e	; 30
    1cdc:	0e 94 82 23 	call	0x4704	; 0x4704 <strchr>
    1ce0:	8c 01       	movw	r16, r24
			if(pos != NULL)							
    1ce2:	00 97       	sbiw	r24, 0x00	; 0
    1ce4:	09 f4       	brne	.+2      	; 0x1ce8 <main+0x336>
    1ce6:	fc c7       	rjmp	.+4088   	; 0x2ce0 <main+0x132e>
			{
				requestCmd[0] = *(pos + 1);			// Parse request command	
    1ce8:	ec ec       	ldi	r30, 0xCC	; 204
    1cea:	f1 e0       	ldi	r31, 0x01	; 1
    1cec:	dc 01       	movw	r26, r24
    1cee:	11 96       	adiw	r26, 0x01	; 1
    1cf0:	8c 91       	ld	r24, X
    1cf2:	11 97       	sbiw	r26, 0x01	; 1
    1cf4:	80 83       	st	Z, r24
				requestCmd[1] = *(pos + 2);
    1cf6:	12 96       	adiw	r26, 0x02	; 2
    1cf8:	8c 91       	ld	r24, X
    1cfa:	81 83       	std	Z+1, r24	; 0x01

				if(strcmp(requestCmd, "IF") == 0)
    1cfc:	6c e1       	ldi	r22, 0x1C	; 28
    1cfe:	71 e0       	ldi	r23, 0x01	; 1
    1d00:	cf 01       	movw	r24, r30
    1d02:	0e 94 8d 23 	call	0x471a	; 0x471a <strcmp>
    1d06:	89 2b       	or	r24, r25
    1d08:	09 f0       	breq	.+2      	; 0x1d0c <main+0x35a>
    1d0a:	3f c0       	rjmp	.+126    	; 0x1d8a <main+0x3d8>
				{
					crc[0] = *(pos + 3);			// Parse incoming crc
    1d0c:	e8 e6       	ldi	r30, 0x68	; 104
    1d0e:	f4 e0       	ldi	r31, 0x04	; 4
    1d10:	d8 01       	movw	r26, r16
    1d12:	13 96       	adiw	r26, 0x03	; 3
    1d14:	8c 91       	ld	r24, X
    1d16:	13 97       	sbiw	r26, 0x03	; 3
    1d18:	80 83       	st	Z, r24
					crc[1] = *(pos + 4);
    1d1a:	14 96       	adiw	r26, 0x04	; 4
    1d1c:	8c 91       	ld	r24, X
    1d1e:	14 97       	sbiw	r26, 0x04	; 4
    1d20:	81 83       	std	Z+1, r24	; 0x01
					crc[2] = *(pos + 5);
    1d22:	15 96       	adiw	r26, 0x05	; 5
    1d24:	8c 91       	ld	r24, X
    1d26:	15 97       	sbiw	r26, 0x05	; 5
    1d28:	82 83       	std	Z+2, r24	; 0x02
					crc[3] = *(pos + 6);
    1d2a:	16 96       	adiw	r26, 0x06	; 6
    1d2c:	8c 91       	ld	r24, X
    1d2e:	83 83       	std	Z+3, r24	; 0x03

					itoa(GenCrc16(rx_string, (int)strnlen(rx_string, rx_size)-5), inCrC_string, 16);
    1d30:	6e e1       	ldi	r22, 0x1E	; 30
    1d32:	70 e0       	ldi	r23, 0x00	; 0
    1d34:	6d 96       	adiw	r28, 0x1d	; 29
    1d36:	8f ad       	ldd	r24, Y+63	; 0x3f
    1d38:	6d 97       	sbiw	r28, 0x1d	; 29
    1d3a:	6e 96       	adiw	r28, 0x1e	; 30
    1d3c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d3e:	6e 97       	sbiw	r28, 0x1e	; 30
    1d40:	0e 94 96 23 	call	0x472c	; 0x472c <strnlen>
    1d44:	bc 01       	movw	r22, r24
    1d46:	65 50       	subi	r22, 0x05	; 5
    1d48:	71 09       	sbc	r23, r1
    1d4a:	6d 96       	adiw	r28, 0x1d	; 29
    1d4c:	8f ad       	ldd	r24, Y+63	; 0x3f
    1d4e:	6d 97       	sbiw	r28, 0x1d	; 29
    1d50:	6e 96       	adiw	r28, 0x1e	; 30
    1d52:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d54:	6e 97       	sbiw	r28, 0x1e	; 30
    1d56:	0e 94 2d 02 	call	0x45a	; 0x45a <GenCrc16>
    1d5a:	40 e1       	ldi	r20, 0x10	; 16
    1d5c:	be 01       	movw	r22, r28
    1d5e:	67 5e       	subi	r22, 0xE7	; 231
    1d60:	7f 4f       	sbci	r23, 0xFF	; 255
    1d62:	0e 94 ab 23 	call	0x4756	; 0x4756 <__itoa_ncheck>
					if(CrcCompare(crc, inCrC_string) == true)
    1d66:	be 01       	movw	r22, r28
    1d68:	67 5e       	subi	r22, 0xE7	; 231
    1d6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d6c:	88 e6       	ldi	r24, 0x68	; 104
    1d6e:	94 e0       	ldi	r25, 0x04	; 4
    1d70:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <CrcCompare>
    1d74:	88 23       	and	r24, r24
    1d76:	29 f0       	breq	.+10     	; 0x1d82 <main+0x3d0>
					{
						printStatus(s_string);	
    1d78:	ce 01       	movw	r24, r28
    1d7a:	05 96       	adiw	r24, 0x05	; 5
    1d7c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    1d80:	04 c0       	rjmp	.+8      	; 0x1d8a <main+0x3d8>
					}
					else
					{
						printStatus("CRC error");
    1d82:	8f e1       	ldi	r24, 0x1F	; 31
    1d84:	91 e0       	ldi	r25, 0x01	; 1
    1d86:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
						//printStatus(rx_string);
					}
				}
					
				if(strcmp(requestCmd, "VR") == 0)
    1d8a:	69 e2       	ldi	r22, 0x29	; 41
    1d8c:	71 e0       	ldi	r23, 0x01	; 1
    1d8e:	8c ec       	ldi	r24, 0xCC	; 204
    1d90:	91 e0       	ldi	r25, 0x01	; 1
    1d92:	0e 94 8d 23 	call	0x471a	; 0x471a <strcmp>
    1d96:	89 2b       	or	r24, r25
    1d98:	09 f0       	breq	.+2      	; 0x1d9c <main+0x3ea>
    1d9a:	a2 c7       	rjmp	.+3908   	; 0x2ce0 <main+0x132e>
				{
					requestID[0] = *(pos + 3);		// Parse request ID
    1d9c:	f8 01       	movw	r30, r16
    1d9e:	83 81       	ldd	r24, Z+3	; 0x03
    1da0:	89 83       	std	Y+1, r24	; 0x01
					requestID[1] = *(pos + 4);
    1da2:	84 81       	ldd	r24, Z+4	; 0x04
    1da4:	8a 83       	std	Y+2, r24	; 0x02
					requestID[2] = *(pos + 5);
    1da6:	85 81       	ldd	r24, Z+5	; 0x05
    1da8:	8b 83       	std	Y+3, r24	; 0x03
					crc[0] = *(pos + 6);			// Parse incoming crc
    1daa:	e8 e6       	ldi	r30, 0x68	; 104
    1dac:	f4 e0       	ldi	r31, 0x04	; 4
    1dae:	d8 01       	movw	r26, r16
    1db0:	16 96       	adiw	r26, 0x06	; 6
    1db2:	8c 91       	ld	r24, X
    1db4:	16 97       	sbiw	r26, 0x06	; 6
    1db6:	80 83       	st	Z, r24
					crc[1] = *(pos + 7);
    1db8:	17 96       	adiw	r26, 0x07	; 7
    1dba:	8c 91       	ld	r24, X
    1dbc:	17 97       	sbiw	r26, 0x07	; 7
    1dbe:	81 83       	std	Z+1, r24	; 0x01
					crc[2] = *(pos + 8);
    1dc0:	18 96       	adiw	r26, 0x08	; 8
    1dc2:	8c 91       	ld	r24, X
    1dc4:	18 97       	sbiw	r26, 0x08	; 8
    1dc6:	82 83       	std	Z+2, r24	; 0x02
					crc[3] = *(pos + 9);
    1dc8:	19 96       	adiw	r26, 0x09	; 9
    1dca:	8c 91       	ld	r24, X
    1dcc:	83 83       	std	Z+3, r24	; 0x03
					
					itoa(GenCrc16(rx_string, (int)strnlen(rx_string, rx_size)-5), inCrC_string, 16);
    1dce:	6e e1       	ldi	r22, 0x1E	; 30
    1dd0:	70 e0       	ldi	r23, 0x00	; 0
    1dd2:	6d 96       	adiw	r28, 0x1d	; 29
    1dd4:	8f ad       	ldd	r24, Y+63	; 0x3f
    1dd6:	6d 97       	sbiw	r28, 0x1d	; 29
    1dd8:	6e 96       	adiw	r28, 0x1e	; 30
    1dda:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ddc:	6e 97       	sbiw	r28, 0x1e	; 30
    1dde:	0e 94 96 23 	call	0x472c	; 0x472c <strnlen>
    1de2:	bc 01       	movw	r22, r24
    1de4:	65 50       	subi	r22, 0x05	; 5
    1de6:	71 09       	sbc	r23, r1
    1de8:	6d 96       	adiw	r28, 0x1d	; 29
    1dea:	8f ad       	ldd	r24, Y+63	; 0x3f
    1dec:	6d 97       	sbiw	r28, 0x1d	; 29
    1dee:	6e 96       	adiw	r28, 0x1e	; 30
    1df0:	9f ad       	ldd	r25, Y+63	; 0x3f
    1df2:	6e 97       	sbiw	r28, 0x1e	; 30
    1df4:	0e 94 2d 02 	call	0x45a	; 0x45a <GenCrc16>
    1df8:	40 e1       	ldi	r20, 0x10	; 16
    1dfa:	be 01       	movw	r22, r28
    1dfc:	67 5e       	subi	r22, 0xE7	; 231
    1dfe:	7f 4f       	sbci	r23, 0xFF	; 255
    1e00:	0e 94 ab 23 	call	0x4756	; 0x4756 <__itoa_ncheck>
					if(CrcCompare(crc, inCrC_string) == true)
    1e04:	be 01       	movw	r22, r28
    1e06:	67 5e       	subi	r22, 0xE7	; 231
    1e08:	7f 4f       	sbci	r23, 0xFF	; 255
    1e0a:	88 e6       	ldi	r24, 0x68	; 104
    1e0c:	94 e0       	ldi	r25, 0x04	; 4
    1e0e:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <CrcCompare>
    1e12:	88 23       	and	r24, r24
    1e14:	09 f4       	brne	.+2      	; 0x1e18 <main+0x466>
    1e16:	60 c7       	rjmp	.+3776   	; 0x2cd8 <main+0x1326>
					{					
						var = atol(requestID);
    1e18:	ce 01       	movw	r24, r28
    1e1a:	01 96       	adiw	r24, 0x01	; 1
    1e1c:	0e 94 51 23 	call	0x46a2	; 0x46a2 <atol>

static inline void ReadParameter(int id)
{
	char tx_string[20];

	switch(id)
    1e20:	cb 01       	movw	r24, r22
    1e22:	77 0f       	add	r23, r23
    1e24:	aa 0b       	sbc	r26, r26
    1e26:	bb 0b       	sbc	r27, r27
    1e28:	fc 01       	movw	r30, r24
    1e2a:	e4 56       	subi	r30, 0x64	; 100
    1e2c:	f1 09       	sbc	r31, r1
    1e2e:	e4 33       	cpi	r30, 0x34	; 52
    1e30:	b1 e0       	ldi	r27, 0x01	; 1
    1e32:	fb 07       	cpc	r31, r27
    1e34:	08 f0       	brcs	.+2      	; 0x1e38 <main+0x486>
    1e36:	4b c7       	rjmp	.+3734   	; 0x2cce <main+0x131c>
    1e38:	ec 5c       	subi	r30, 0xCC	; 204
    1e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3c:	0c 94 48 23 	jmp	0x4690	; 0x4690 <__tablejump2__>
	{
		// *** Channel 0 ***
		case 100:	// Send sensor 1 temperature		
		ftoa(TempSensor0, tx_string);
    1e40:	60 91 b4 01 	lds	r22, 0x01B4
    1e44:	70 91 b5 01 	lds	r23, 0x01B5
    1e48:	80 91 b6 01 	lds	r24, 0x01B6
    1e4c:	90 91 b7 01 	lds	r25, 0x01B7
    1e50:	46 2d       	mov	r20, r6
    1e52:	57 2d       	mov	r21, r7
    1e54:	27 dd       	rcall	.-1458   	; 0x18a4 <ftoa>
		printStatus(tx_string);
    1e56:	86 2d       	mov	r24, r6
    1e58:	97 2d       	mov	r25, r7
    1e5a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    1e5e:	40 c7       	rjmp	.+3712   	; 0x2ce0 <main+0x132e>
		break;
		
		case 101:	// Send P part of PID-controller 1
		ftoa(P_ch0, tx_string);
    1e60:	60 91 9e 01 	lds	r22, 0x019E
    1e64:	70 91 9f 01 	lds	r23, 0x019F
    1e68:	80 91 a0 01 	lds	r24, 0x01A0
    1e6c:	90 91 a1 01 	lds	r25, 0x01A1
    1e70:	46 2d       	mov	r20, r6
    1e72:	57 2d       	mov	r21, r7
    1e74:	17 dd       	rcall	.-1490   	; 0x18a4 <ftoa>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    1e76:	81 e2       	ldi	r24, 0x21	; 33
    1e78:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    1e7a:	f5 01       	movw	r30, r10
    1e7c:	81 81       	ldd	r24, Z+1	; 0x01
    1e7e:	8f 8f       	std	Y+31, r24	; 0x1f
    1e80:	82 81       	ldd	r24, Z+2	; 0x02
    1e82:	88 a3       	std	Y+32, r24	; 0x20
    1e84:	83 81       	ldd	r24, Z+3	; 0x03
    1e86:	89 a3       	std	Y+33, r24	; 0x21
    1e88:	e6 2d       	mov	r30, r6
    1e8a:	f7 2d       	mov	r31, r7
    1e8c:	de 01       	movw	r26, r28
    1e8e:	92 96       	adiw	r26, 0x22	; 34
    1e90:	00 e0       	ldi	r16, 0x00	; 0
    1e92:	10 e0       	ldi	r17, 0x00	; 0
    1e94:	af 01       	movw	r20, r30
    1e96:	06 c0       	rjmp	.+12     	; 0x1ea4 <main+0x4f2>
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    1e98:	fa 01       	movw	r30, r20
    1e9a:	81 91       	ld	r24, Z+
    1e9c:	af 01       	movw	r20, r30
    1e9e:	8d 93       	st	X+, r24
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    1ea0:	0f 5f       	subi	r16, 0xFF	; 255
    1ea2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ea4:	6c 96       	adiw	r28, 0x1c	; 28
    1ea6:	ee ad       	ldd	r30, Y+62	; 0x3e
    1ea8:	ff ad       	ldd	r31, Y+63	; 0x3f
    1eaa:	6c 97       	sbiw	r28, 0x1c	; 28
    1eac:	01 90       	ld	r0, Z+
    1eae:	00 20       	and	r0, r0
    1eb0:	e9 f7       	brne	.-6      	; 0x1eac <main+0x4fa>
    1eb2:	cf 01       	movw	r24, r30
    1eb4:	6c 96       	adiw	r28, 0x1c	; 28
    1eb6:	2e ad       	ldd	r18, Y+62	; 0x3e
    1eb8:	3f ad       	ldd	r19, Y+63	; 0x3f
    1eba:	6c 97       	sbiw	r28, 0x1c	; 28
    1ebc:	82 1b       	sub	r24, r18
    1ebe:	93 0b       	sbc	r25, r19
    1ec0:	02 96       	adiw	r24, 0x02	; 2
    1ec2:	08 17       	cp	r16, r24
    1ec4:	19 07       	cpc	r17, r25
    1ec6:	40 f3       	brcs	.-48     	; 0x1e98 <main+0x4e6>
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    1ec8:	78 01       	movw	r14, r16
    1eca:	3f ef       	ldi	r19, 0xFF	; 255
    1ecc:	e3 1a       	sub	r14, r19
    1ece:	f3 0a       	sbc	r15, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    1ed0:	1e 14       	cp	r1, r14
    1ed2:	1f 04       	cpc	r1, r15
    1ed4:	14 f0       	brlt	.+4      	; 0x1eda <main+0x528>
    1ed6:	0c 94 0b 21 	jmp	0x4216	; 0x4216 <main+0x2864>
    1eda:	de 01       	movw	r26, r28
    1edc:	5e 96       	adiw	r26, 0x1e	; 30
    1ede:	67 01       	movw	r12, r14
    1ee0:	ca 0e       	add	r12, r26
    1ee2:	db 1e       	adc	r13, r27
    1ee4:	e0 e0       	ldi	r30, 0x00	; 0
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    1ee8:	98 e0       	ldi	r25, 0x08	; 8
    1eea:	80 e0       	ldi	r24, 0x00	; 0
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    1eec:	4d 91       	ld	r20, X+
		tmp = (int)((CRC >> 8) ^ int_c);
    1eee:	2f 2f       	mov	r18, r31
    1ef0:	33 27       	eor	r19, r19
    1ef2:	27 fd       	sbrc	r18, 7
    1ef4:	3a 95       	dec	r19
    1ef6:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    1ef8:	32 2f       	mov	r19, r18
    1efa:	22 27       	eor	r18, r18
    1efc:	49 2f       	mov	r20, r25
    1efe:	58 2f       	mov	r21, r24
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    1f00:	33 23       	and	r19, r19
    1f02:	3c f4       	brge	.+14     	; 0x1f12 <main+0x560>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    1f04:	22 0f       	add	r18, r18
    1f06:	33 1f       	adc	r19, r19
    1f08:	61 e2       	ldi	r22, 0x21	; 33
    1f0a:	26 27       	eor	r18, r22
    1f0c:	60 e1       	ldi	r22, 0x10	; 16
    1f0e:	36 27       	eor	r19, r22
    1f10:	02 c0       	rjmp	.+4      	; 0x1f16 <main+0x564>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    1f12:	22 0f       	add	r18, r18
    1f14:	33 1f       	adc	r19, r19
    1f16:	41 50       	subi	r20, 0x01	; 1
    1f18:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    1f1a:	91 f7       	brne	.-28     	; 0x1f00 <main+0x54e>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    1f1c:	fe 2f       	mov	r31, r30
    1f1e:	ee 27       	eor	r30, r30
    1f20:	e2 27       	eor	r30, r18
    1f22:	f3 27       	eor	r31, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    1f24:	ac 15       	cp	r26, r12
    1f26:	bd 05       	cpc	r27, r13
    1f28:	09 f7       	brne	.-62     	; 0x1eec <main+0x53a>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    1f2a:	6f 01       	movw	r12, r30
    1f2c:	40 e1       	ldi	r20, 0x10	; 16
    1f2e:	68 e6       	ldi	r22, 0x68	; 104
    1f30:	74 e0       	ldi	r23, 0x04	; 4
    1f32:	cf 01       	movw	r24, r30
    1f34:	0e 94 ab 23 	call	0x4756	; 0x4756 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    1f38:	88 e6       	ldi	r24, 0x68	; 104
    1f3a:	94 e0       	ldi	r25, 0x04	; 4
    1f3c:	0e 94 a1 23 	call	0x4742	; 0x4742 <strupr>
	if(crcXmodem < 0x10)
    1f40:	80 e1       	ldi	r24, 0x10	; 16
    1f42:	c8 16       	cp	r12, r24
    1f44:	d1 04       	cpc	r13, r1
    1f46:	98 f4       	brcc	.+38     	; 0x1f6e <main+0x5bc>
	{
		tx_string[cnt+4] = crc[0];
    1f48:	80 91 68 04 	lds	r24, 0x0468
    1f4c:	fe 01       	movw	r30, r28
    1f4e:	e0 0f       	add	r30, r16
    1f50:	f1 1f       	adc	r31, r17
    1f52:	82 a3       	std	Z+34, r24	; 0x22
		tx_string[cnt+3] = '0';
    1f54:	80 e3       	ldi	r24, 0x30	; 48
    1f56:	fe 01       	movw	r30, r28
    1f58:	e0 0f       	add	r30, r16
    1f5a:	f1 1f       	adc	r31, r17
    1f5c:	81 a3       	std	Z+33, r24	; 0x21
		tx_string[cnt+2] = '0';
    1f5e:	fe 01       	movw	r30, r28
    1f60:	e0 0f       	add	r30, r16
    1f62:	f1 1f       	adc	r31, r17
    1f64:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';
    1f66:	fe 01       	movw	r30, r28
    1f68:	ee 0d       	add	r30, r14
    1f6a:	ff 1d       	adc	r31, r15
    1f6c:	86 8f       	std	Z+30, r24	; 0x1e
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    1f6e:	c6 01       	movw	r24, r12
    1f70:	40 97       	sbiw	r24, 0x10	; 16
    1f72:	80 3f       	cpi	r24, 0xF0	; 240
    1f74:	91 05       	cpc	r25, r1
    1f76:	b8 f4       	brcc	.+46     	; 0x1fa6 <main+0x5f4>
	{
		tx_string[cnt+4] = crc[1];
    1f78:	a8 e6       	ldi	r26, 0x68	; 104
    1f7a:	b4 e0       	ldi	r27, 0x04	; 4
    1f7c:	11 96       	adiw	r26, 0x01	; 1
    1f7e:	8c 91       	ld	r24, X
    1f80:	11 97       	sbiw	r26, 0x01	; 1
    1f82:	fe 01       	movw	r30, r28
    1f84:	e0 0f       	add	r30, r16
    1f86:	f1 1f       	adc	r31, r17
    1f88:	82 a3       	std	Z+34, r24	; 0x22
		tx_string[cnt+3] = crc[0];
    1f8a:	8c 91       	ld	r24, X
    1f8c:	fe 01       	movw	r30, r28
    1f8e:	e0 0f       	add	r30, r16
    1f90:	f1 1f       	adc	r31, r17
    1f92:	81 a3       	std	Z+33, r24	; 0x21
		tx_string[cnt+2] = '0';
    1f94:	80 e3       	ldi	r24, 0x30	; 48
    1f96:	fe 01       	movw	r30, r28
    1f98:	e0 0f       	add	r30, r16
    1f9a:	f1 1f       	adc	r31, r17
    1f9c:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';		
    1f9e:	fe 01       	movw	r30, r28
    1fa0:	ee 0d       	add	r30, r14
    1fa2:	ff 1d       	adc	r31, r15
    1fa4:	86 8f       	std	Z+30, r24	; 0x1e
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    1fa6:	c6 01       	movw	r24, r12
    1fa8:	9a 95       	dec	r25
    1faa:	81 15       	cp	r24, r1
    1fac:	9f 40       	sbci	r25, 0x0F	; 15
    1fae:	b8 f4       	brcc	.+46     	; 0x1fde <main+0x62c>
	{
		tx_string[cnt+4] = crc[2];
    1fb0:	e8 e6       	ldi	r30, 0x68	; 104
    1fb2:	f4 e0       	ldi	r31, 0x04	; 4
    1fb4:	82 81       	ldd	r24, Z+2	; 0x02
    1fb6:	de 01       	movw	r26, r28
    1fb8:	a0 0f       	add	r26, r16
    1fba:	b1 1f       	adc	r27, r17
    1fbc:	92 96       	adiw	r26, 0x22	; 34
    1fbe:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[1];
    1fc0:	81 81       	ldd	r24, Z+1	; 0x01
    1fc2:	de 01       	movw	r26, r28
    1fc4:	a0 0f       	add	r26, r16
    1fc6:	b1 1f       	adc	r27, r17
    1fc8:	91 96       	adiw	r26, 0x21	; 33
    1fca:	8c 93       	st	X, r24
    1fcc:	91 97       	sbiw	r26, 0x21	; 33
		tx_string[cnt+2] = crc[0];
    1fce:	80 81       	ld	r24, Z
    1fd0:	fd 01       	movw	r30, r26
    1fd2:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';		
    1fd4:	80 e3       	ldi	r24, 0x30	; 48
    1fd6:	fe 01       	movw	r30, r28
    1fd8:	ee 0d       	add	r30, r14
    1fda:	ff 1d       	adc	r31, r15
    1fdc:	86 8f       	std	Z+30, r24	; 0x1e
	}
	if(crcXmodem >= 0x1000)
    1fde:	c1 14       	cp	r12, r1
    1fe0:	b0 e1       	ldi	r27, 0x10	; 16
    1fe2:	db 06       	cpc	r13, r27
    1fe4:	c0 f0       	brcs	.+48     	; 0x2016 <main+0x664>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    1fe6:	de 01       	movw	r26, r28
    1fe8:	ae 0d       	add	r26, r14
    1fea:	bf 1d       	adc	r27, r15
    1fec:	e8 e6       	ldi	r30, 0x68	; 104
    1fee:	f4 e0       	ldi	r31, 0x04	; 4
    1ff0:	80 81       	ld	r24, Z
    1ff2:	5e 96       	adiw	r26, 0x1e	; 30
    1ff4:	8c 93       	st	X, r24
		tx_string[cnt+2] = crc[1];
    1ff6:	81 81       	ldd	r24, Z+1	; 0x01
    1ff8:	de 01       	movw	r26, r28
    1ffa:	a0 0f       	add	r26, r16
    1ffc:	b1 1f       	adc	r27, r17
    1ffe:	90 96       	adiw	r26, 0x20	; 32
    2000:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[2];
    2002:	82 81       	ldd	r24, Z+2	; 0x02
    2004:	de 01       	movw	r26, r28
    2006:	a0 0f       	add	r26, r16
    2008:	b1 1f       	adc	r27, r17
    200a:	91 96       	adiw	r26, 0x21	; 33
    200c:	8c 93       	st	X, r24
    200e:	91 97       	sbiw	r26, 0x21	; 33
		tx_string[cnt+4] = crc[3];
    2010:	83 81       	ldd	r24, Z+3	; 0x03
    2012:	fd 01       	movw	r30, r26
    2014:	82 a3       	std	Z+34, r24	; 0x22
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    2016:	c8 01       	movw	r24, r16
    2018:	05 96       	adiw	r24, 0x05	; 5
    201a:	fe 01       	movw	r30, r28
    201c:	e8 0f       	add	r30, r24
    201e:	f9 1f       	adc	r31, r25
    2020:	2d e0       	ldi	r18, 0x0D	; 13
    2022:	26 8f       	std	Z+30, r18	; 0x1e
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    2024:	99 23       	and	r25, r25
    2026:	0c f4       	brge	.+2      	; 0x202a <main+0x678>
    2028:	5b c6       	rjmp	.+3254   	; 0x2ce0 <main+0x132e>
    202a:	fe 01       	movw	r30, r28
    202c:	7e 96       	adiw	r30, 0x1e	; 30
    202e:	a8 01       	movw	r20, r16
    2030:	4a 5f       	subi	r20, 0xFA	; 250
    2032:	5f 4f       	sbci	r21, 0xFF	; 255
    2034:	4e 0f       	add	r20, r30
    2036:	5f 1f       	adc	r21, r31
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    2038:	90 e0       	ldi	r25, 0x00	; 0
	{
		uart_putchar(tx_string[i]);
    203a:	21 91       	ld	r18, Z+
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    203c:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    203e:	d4 01       	movw	r26, r8
    2040:	11 96       	adiw	r26, 0x01	; 1
    2042:	3c 91       	ld	r19, X
    2044:	11 97       	sbiw	r26, 0x01	; 1
    2046:	8c 91       	ld	r24, X
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    2048:	38 13       	cpse	r19, r24
    204a:	05 c0       	rjmp	.+10     	; 0x2056 <main+0x6a4>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    204c:	a1 ec       	ldi	r26, 0xC1	; 193
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	8c 91       	ld	r24, X
    2052:	80 62       	ori	r24, 0x20	; 32
    2054:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    2056:	d4 01       	movw	r26, r8
    2058:	8c 91       	ld	r24, X
    205a:	13 96       	adiw	r26, 0x03	; 3
    205c:	6d 91       	ld	r22, X+
    205e:	7c 91       	ld	r23, X
    2060:	14 97       	sbiw	r26, 0x04	; 4
    2062:	db 01       	movw	r26, r22
    2064:	a8 0f       	add	r26, r24
    2066:	b1 1d       	adc	r27, r1
    2068:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    206a:	d4 01       	movw	r26, r8
    206c:	8c 91       	ld	r24, X
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    206e:	68 2f       	mov	r22, r24
    2070:	70 e0       	ldi	r23, 0x00	; 0
    2072:	12 96       	adiw	r26, 0x02	; 2
    2074:	2c 91       	ld	r18, X
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	21 50       	subi	r18, 0x01	; 1
    207a:	31 09       	sbc	r19, r1
    207c:	62 17       	cp	r22, r18
    207e:	73 07       	cpc	r23, r19
    2080:	11 f0       	breq	.+4      	; 0x2086 <main+0x6d4>
    2082:	8f 5f       	subi	r24, 0xFF	; 255
    2084:	01 c0       	rjmp	.+2      	; 0x2088 <main+0x6d6>
    2086:	89 2f       	mov	r24, r25
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    2088:	d4 01       	movw	r26, r8
    208a:	8c 93       	st	X, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    208c:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    208e:	e4 17       	cp	r30, r20
    2090:	f5 07       	cpc	r31, r21
    2092:	99 f6       	brne	.-90     	; 0x203a <main+0x688>
    2094:	25 c6       	rjmp	.+3146   	; 0x2ce0 <main+0x132e>
		ftoa(P_ch0, tx_string);
		printStatus(tx_string);
		break;
		
		case 102:	// Send I part of PID-controller 1
		ftoa(I_ch0, tx_string);
    2096:	60 91 9a 01 	lds	r22, 0x019A
    209a:	70 91 9b 01 	lds	r23, 0x019B
    209e:	80 91 9c 01 	lds	r24, 0x019C
    20a2:	90 91 9d 01 	lds	r25, 0x019D
    20a6:	46 2d       	mov	r20, r6
    20a8:	57 2d       	mov	r21, r7
    20aa:	fc db       	rcall	.-2056   	; 0x18a4 <ftoa>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    20ac:	81 e2       	ldi	r24, 0x21	; 33
    20ae:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    20b0:	f5 01       	movw	r30, r10
    20b2:	81 81       	ldd	r24, Z+1	; 0x01
    20b4:	8f 8f       	std	Y+31, r24	; 0x1f
    20b6:	82 81       	ldd	r24, Z+2	; 0x02
    20b8:	88 a3       	std	Y+32, r24	; 0x20
    20ba:	83 81       	ldd	r24, Z+3	; 0x03
    20bc:	89 a3       	std	Y+33, r24	; 0x21
    20be:	e6 2d       	mov	r30, r6
    20c0:	f7 2d       	mov	r31, r7
    20c2:	de 01       	movw	r26, r28
    20c4:	92 96       	adiw	r26, 0x22	; 34
    20c6:	00 e0       	ldi	r16, 0x00	; 0
    20c8:	10 e0       	ldi	r17, 0x00	; 0
    20ca:	af 01       	movw	r20, r30
    20cc:	06 c0       	rjmp	.+12     	; 0x20da <main+0x728>
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    20ce:	fa 01       	movw	r30, r20
    20d0:	81 91       	ld	r24, Z+
    20d2:	af 01       	movw	r20, r30
    20d4:	8d 93       	st	X+, r24
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    20d6:	0f 5f       	subi	r16, 0xFF	; 255
    20d8:	1f 4f       	sbci	r17, 0xFF	; 255
    20da:	6c 96       	adiw	r28, 0x1c	; 28
    20dc:	ee ad       	ldd	r30, Y+62	; 0x3e
    20de:	ff ad       	ldd	r31, Y+63	; 0x3f
    20e0:	6c 97       	sbiw	r28, 0x1c	; 28
    20e2:	01 90       	ld	r0, Z+
    20e4:	00 20       	and	r0, r0
    20e6:	e9 f7       	brne	.-6      	; 0x20e2 <main+0x730>
    20e8:	cf 01       	movw	r24, r30
    20ea:	6c 96       	adiw	r28, 0x1c	; 28
    20ec:	2e ad       	ldd	r18, Y+62	; 0x3e
    20ee:	3f ad       	ldd	r19, Y+63	; 0x3f
    20f0:	6c 97       	sbiw	r28, 0x1c	; 28
    20f2:	82 1b       	sub	r24, r18
    20f4:	93 0b       	sbc	r25, r19
    20f6:	02 96       	adiw	r24, 0x02	; 2
    20f8:	08 17       	cp	r16, r24
    20fa:	19 07       	cpc	r17, r25
    20fc:	40 f3       	brcs	.-48     	; 0x20ce <main+0x71c>
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    20fe:	78 01       	movw	r14, r16
    2100:	3f ef       	ldi	r19, 0xFF	; 255
    2102:	e3 1a       	sub	r14, r19
    2104:	f3 0a       	sbc	r15, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    2106:	1e 14       	cp	r1, r14
    2108:	1f 04       	cpc	r1, r15
    210a:	14 f0       	brlt	.+4      	; 0x2110 <main+0x75e>
    210c:	0c 94 18 21 	jmp	0x4230	; 0x4230 <main+0x287e>
    2110:	de 01       	movw	r26, r28
    2112:	5e 96       	adiw	r26, 0x1e	; 30
    2114:	67 01       	movw	r12, r14
    2116:	ca 0e       	add	r12, r26
    2118:	db 1e       	adc	r13, r27
    211a:	e0 e0       	ldi	r30, 0x00	; 0
    211c:	f0 e0       	ldi	r31, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    211e:	98 e0       	ldi	r25, 0x08	; 8
    2120:	80 e0       	ldi	r24, 0x00	; 0
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    2122:	4d 91       	ld	r20, X+
		tmp = (int)((CRC >> 8) ^ int_c);
    2124:	2f 2f       	mov	r18, r31
    2126:	33 27       	eor	r19, r19
    2128:	27 fd       	sbrc	r18, 7
    212a:	3a 95       	dec	r19
    212c:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    212e:	32 2f       	mov	r19, r18
    2130:	22 27       	eor	r18, r18
    2132:	49 2f       	mov	r20, r25
    2134:	58 2f       	mov	r21, r24
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    2136:	33 23       	and	r19, r19
    2138:	3c f4       	brge	.+14     	; 0x2148 <main+0x796>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    213a:	22 0f       	add	r18, r18
    213c:	33 1f       	adc	r19, r19
    213e:	61 e2       	ldi	r22, 0x21	; 33
    2140:	26 27       	eor	r18, r22
    2142:	60 e1       	ldi	r22, 0x10	; 16
    2144:	36 27       	eor	r19, r22
    2146:	02 c0       	rjmp	.+4      	; 0x214c <main+0x79a>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    2148:	22 0f       	add	r18, r18
    214a:	33 1f       	adc	r19, r19
    214c:	41 50       	subi	r20, 0x01	; 1
    214e:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    2150:	91 f7       	brne	.-28     	; 0x2136 <main+0x784>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    2152:	fe 2f       	mov	r31, r30
    2154:	ee 27       	eor	r30, r30
    2156:	e2 27       	eor	r30, r18
    2158:	f3 27       	eor	r31, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    215a:	ac 15       	cp	r26, r12
    215c:	bd 05       	cpc	r27, r13
    215e:	09 f7       	brne	.-62     	; 0x2122 <main+0x770>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    2160:	6f 01       	movw	r12, r30
    2162:	40 e1       	ldi	r20, 0x10	; 16
    2164:	68 e6       	ldi	r22, 0x68	; 104
    2166:	74 e0       	ldi	r23, 0x04	; 4
    2168:	cf 01       	movw	r24, r30
    216a:	0e 94 ab 23 	call	0x4756	; 0x4756 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    216e:	88 e6       	ldi	r24, 0x68	; 104
    2170:	94 e0       	ldi	r25, 0x04	; 4
    2172:	0e 94 a1 23 	call	0x4742	; 0x4742 <strupr>
	if(crcXmodem < 0x10)
    2176:	80 e1       	ldi	r24, 0x10	; 16
    2178:	c8 16       	cp	r12, r24
    217a:	d1 04       	cpc	r13, r1
    217c:	98 f4       	brcc	.+38     	; 0x21a4 <main+0x7f2>
	{
		tx_string[cnt+4] = crc[0];
    217e:	80 91 68 04 	lds	r24, 0x0468
    2182:	fe 01       	movw	r30, r28
    2184:	e0 0f       	add	r30, r16
    2186:	f1 1f       	adc	r31, r17
    2188:	82 a3       	std	Z+34, r24	; 0x22
		tx_string[cnt+3] = '0';
    218a:	80 e3       	ldi	r24, 0x30	; 48
    218c:	fe 01       	movw	r30, r28
    218e:	e0 0f       	add	r30, r16
    2190:	f1 1f       	adc	r31, r17
    2192:	81 a3       	std	Z+33, r24	; 0x21
		tx_string[cnt+2] = '0';
    2194:	fe 01       	movw	r30, r28
    2196:	e0 0f       	add	r30, r16
    2198:	f1 1f       	adc	r31, r17
    219a:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';
    219c:	fe 01       	movw	r30, r28
    219e:	ee 0d       	add	r30, r14
    21a0:	ff 1d       	adc	r31, r15
    21a2:	86 8f       	std	Z+30, r24	; 0x1e
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    21a4:	c6 01       	movw	r24, r12
    21a6:	40 97       	sbiw	r24, 0x10	; 16
    21a8:	80 3f       	cpi	r24, 0xF0	; 240
    21aa:	91 05       	cpc	r25, r1
    21ac:	b8 f4       	brcc	.+46     	; 0x21dc <main+0x82a>
	{
		tx_string[cnt+4] = crc[1];
    21ae:	a8 e6       	ldi	r26, 0x68	; 104
    21b0:	b4 e0       	ldi	r27, 0x04	; 4
    21b2:	11 96       	adiw	r26, 0x01	; 1
    21b4:	8c 91       	ld	r24, X
    21b6:	11 97       	sbiw	r26, 0x01	; 1
    21b8:	fe 01       	movw	r30, r28
    21ba:	e0 0f       	add	r30, r16
    21bc:	f1 1f       	adc	r31, r17
    21be:	82 a3       	std	Z+34, r24	; 0x22
		tx_string[cnt+3] = crc[0];
    21c0:	8c 91       	ld	r24, X
    21c2:	fe 01       	movw	r30, r28
    21c4:	e0 0f       	add	r30, r16
    21c6:	f1 1f       	adc	r31, r17
    21c8:	81 a3       	std	Z+33, r24	; 0x21
		tx_string[cnt+2] = '0';
    21ca:	80 e3       	ldi	r24, 0x30	; 48
    21cc:	fe 01       	movw	r30, r28
    21ce:	e0 0f       	add	r30, r16
    21d0:	f1 1f       	adc	r31, r17
    21d2:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';		
    21d4:	fe 01       	movw	r30, r28
    21d6:	ee 0d       	add	r30, r14
    21d8:	ff 1d       	adc	r31, r15
    21da:	86 8f       	std	Z+30, r24	; 0x1e
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    21dc:	c6 01       	movw	r24, r12
    21de:	9a 95       	dec	r25
    21e0:	81 15       	cp	r24, r1
    21e2:	9f 40       	sbci	r25, 0x0F	; 15
    21e4:	b8 f4       	brcc	.+46     	; 0x2214 <main+0x862>
	{
		tx_string[cnt+4] = crc[2];
    21e6:	e8 e6       	ldi	r30, 0x68	; 104
    21e8:	f4 e0       	ldi	r31, 0x04	; 4
    21ea:	82 81       	ldd	r24, Z+2	; 0x02
    21ec:	de 01       	movw	r26, r28
    21ee:	a0 0f       	add	r26, r16
    21f0:	b1 1f       	adc	r27, r17
    21f2:	92 96       	adiw	r26, 0x22	; 34
    21f4:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[1];
    21f6:	81 81       	ldd	r24, Z+1	; 0x01
    21f8:	de 01       	movw	r26, r28
    21fa:	a0 0f       	add	r26, r16
    21fc:	b1 1f       	adc	r27, r17
    21fe:	91 96       	adiw	r26, 0x21	; 33
    2200:	8c 93       	st	X, r24
    2202:	91 97       	sbiw	r26, 0x21	; 33
		tx_string[cnt+2] = crc[0];
    2204:	80 81       	ld	r24, Z
    2206:	fd 01       	movw	r30, r26
    2208:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';		
    220a:	80 e3       	ldi	r24, 0x30	; 48
    220c:	fe 01       	movw	r30, r28
    220e:	ee 0d       	add	r30, r14
    2210:	ff 1d       	adc	r31, r15
    2212:	86 8f       	std	Z+30, r24	; 0x1e
	}
	if(crcXmodem >= 0x1000)
    2214:	c1 14       	cp	r12, r1
    2216:	b0 e1       	ldi	r27, 0x10	; 16
    2218:	db 06       	cpc	r13, r27
    221a:	c0 f0       	brcs	.+48     	; 0x224c <main+0x89a>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    221c:	de 01       	movw	r26, r28
    221e:	ae 0d       	add	r26, r14
    2220:	bf 1d       	adc	r27, r15
    2222:	e8 e6       	ldi	r30, 0x68	; 104
    2224:	f4 e0       	ldi	r31, 0x04	; 4
    2226:	80 81       	ld	r24, Z
    2228:	5e 96       	adiw	r26, 0x1e	; 30
    222a:	8c 93       	st	X, r24
		tx_string[cnt+2] = crc[1];
    222c:	81 81       	ldd	r24, Z+1	; 0x01
    222e:	de 01       	movw	r26, r28
    2230:	a0 0f       	add	r26, r16
    2232:	b1 1f       	adc	r27, r17
    2234:	90 96       	adiw	r26, 0x20	; 32
    2236:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[2];
    2238:	82 81       	ldd	r24, Z+2	; 0x02
    223a:	de 01       	movw	r26, r28
    223c:	a0 0f       	add	r26, r16
    223e:	b1 1f       	adc	r27, r17
    2240:	91 96       	adiw	r26, 0x21	; 33
    2242:	8c 93       	st	X, r24
    2244:	91 97       	sbiw	r26, 0x21	; 33
		tx_string[cnt+4] = crc[3];
    2246:	83 81       	ldd	r24, Z+3	; 0x03
    2248:	fd 01       	movw	r30, r26
    224a:	82 a3       	std	Z+34, r24	; 0x22
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    224c:	c8 01       	movw	r24, r16
    224e:	05 96       	adiw	r24, 0x05	; 5
    2250:	fe 01       	movw	r30, r28
    2252:	e8 0f       	add	r30, r24
    2254:	f9 1f       	adc	r31, r25
    2256:	2d e0       	ldi	r18, 0x0D	; 13
    2258:	26 8f       	std	Z+30, r18	; 0x1e
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    225a:	99 23       	and	r25, r25
    225c:	0c f4       	brge	.+2      	; 0x2260 <main+0x8ae>
    225e:	40 c5       	rjmp	.+2688   	; 0x2ce0 <main+0x132e>
    2260:	fe 01       	movw	r30, r28
    2262:	7e 96       	adiw	r30, 0x1e	; 30
    2264:	a8 01       	movw	r20, r16
    2266:	4a 5f       	subi	r20, 0xFA	; 250
    2268:	5f 4f       	sbci	r21, 0xFF	; 255
    226a:	4e 0f       	add	r20, r30
    226c:	5f 1f       	adc	r21, r31
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    226e:	90 e0       	ldi	r25, 0x00	; 0
	{
		uart_putchar(tx_string[i]);
    2270:	21 91       	ld	r18, Z+
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    2272:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    2274:	d4 01       	movw	r26, r8
    2276:	11 96       	adiw	r26, 0x01	; 1
    2278:	3c 91       	ld	r19, X
    227a:	11 97       	sbiw	r26, 0x01	; 1
    227c:	8c 91       	ld	r24, X
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    227e:	38 13       	cpse	r19, r24
    2280:	05 c0       	rjmp	.+10     	; 0x228c <main+0x8da>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    2282:	a1 ec       	ldi	r26, 0xC1	; 193
    2284:	b0 e0       	ldi	r27, 0x00	; 0
    2286:	8c 91       	ld	r24, X
    2288:	80 62       	ori	r24, 0x20	; 32
    228a:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    228c:	d4 01       	movw	r26, r8
    228e:	8c 91       	ld	r24, X
    2290:	13 96       	adiw	r26, 0x03	; 3
    2292:	6d 91       	ld	r22, X+
    2294:	7c 91       	ld	r23, X
    2296:	14 97       	sbiw	r26, 0x04	; 4
    2298:	db 01       	movw	r26, r22
    229a:	a8 0f       	add	r26, r24
    229c:	b1 1d       	adc	r27, r1
    229e:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    22a0:	d4 01       	movw	r26, r8
    22a2:	8c 91       	ld	r24, X
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    22a4:	68 2f       	mov	r22, r24
    22a6:	70 e0       	ldi	r23, 0x00	; 0
    22a8:	12 96       	adiw	r26, 0x02	; 2
    22aa:	2c 91       	ld	r18, X
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	21 50       	subi	r18, 0x01	; 1
    22b0:	31 09       	sbc	r19, r1
    22b2:	62 17       	cp	r22, r18
    22b4:	73 07       	cpc	r23, r19
    22b6:	11 f0       	breq	.+4      	; 0x22bc <main+0x90a>
    22b8:	8f 5f       	subi	r24, 0xFF	; 255
    22ba:	01 c0       	rjmp	.+2      	; 0x22be <main+0x90c>
    22bc:	89 2f       	mov	r24, r25
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    22be:	d4 01       	movw	r26, r8
    22c0:	8c 93       	st	X, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    22c2:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    22c4:	e4 17       	cp	r30, r20
    22c6:	f5 07       	cpc	r31, r21
    22c8:	99 f6       	brne	.-90     	; 0x2270 <main+0x8be>
    22ca:	0a c5       	rjmp	.+2580   	; 0x2ce0 <main+0x132e>
		ftoa(I_ch0, tx_string);
		printStatus(tx_string);
		break;
				
		case 103:	// Send D part of PID-controller 1
		ftoa(D_ch0, tx_string);
    22cc:	60 91 96 01 	lds	r22, 0x0196
    22d0:	70 91 97 01 	lds	r23, 0x0197
    22d4:	80 91 98 01 	lds	r24, 0x0198
    22d8:	90 91 99 01 	lds	r25, 0x0199
    22dc:	46 2d       	mov	r20, r6
    22de:	57 2d       	mov	r21, r7
    22e0:	e1 da       	rcall	.-2622   	; 0x18a4 <ftoa>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    22e2:	81 e2       	ldi	r24, 0x21	; 33
    22e4:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    22e6:	f5 01       	movw	r30, r10
    22e8:	81 81       	ldd	r24, Z+1	; 0x01
    22ea:	8f 8f       	std	Y+31, r24	; 0x1f
    22ec:	82 81       	ldd	r24, Z+2	; 0x02
    22ee:	88 a3       	std	Y+32, r24	; 0x20
    22f0:	83 81       	ldd	r24, Z+3	; 0x03
    22f2:	89 a3       	std	Y+33, r24	; 0x21
    22f4:	e6 2d       	mov	r30, r6
    22f6:	f7 2d       	mov	r31, r7
    22f8:	de 01       	movw	r26, r28
    22fa:	92 96       	adiw	r26, 0x22	; 34
    22fc:	00 e0       	ldi	r16, 0x00	; 0
    22fe:	10 e0       	ldi	r17, 0x00	; 0
    2300:	af 01       	movw	r20, r30
    2302:	06 c0       	rjmp	.+12     	; 0x2310 <main+0x95e>
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    2304:	fa 01       	movw	r30, r20
    2306:	81 91       	ld	r24, Z+
    2308:	af 01       	movw	r20, r30
    230a:	8d 93       	st	X+, r24
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    230c:	0f 5f       	subi	r16, 0xFF	; 255
    230e:	1f 4f       	sbci	r17, 0xFF	; 255
    2310:	6c 96       	adiw	r28, 0x1c	; 28
    2312:	ee ad       	ldd	r30, Y+62	; 0x3e
    2314:	ff ad       	ldd	r31, Y+63	; 0x3f
    2316:	6c 97       	sbiw	r28, 0x1c	; 28
    2318:	01 90       	ld	r0, Z+
    231a:	00 20       	and	r0, r0
    231c:	e9 f7       	brne	.-6      	; 0x2318 <main+0x966>
    231e:	cf 01       	movw	r24, r30
    2320:	6c 96       	adiw	r28, 0x1c	; 28
    2322:	2e ad       	ldd	r18, Y+62	; 0x3e
    2324:	3f ad       	ldd	r19, Y+63	; 0x3f
    2326:	6c 97       	sbiw	r28, 0x1c	; 28
    2328:	82 1b       	sub	r24, r18
    232a:	93 0b       	sbc	r25, r19
    232c:	02 96       	adiw	r24, 0x02	; 2
    232e:	08 17       	cp	r16, r24
    2330:	19 07       	cpc	r17, r25
    2332:	40 f3       	brcs	.-48     	; 0x2304 <main+0x952>
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    2334:	78 01       	movw	r14, r16
    2336:	3f ef       	ldi	r19, 0xFF	; 255
    2338:	e3 1a       	sub	r14, r19
    233a:	f3 0a       	sbc	r15, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    233c:	1e 14       	cp	r1, r14
    233e:	1f 04       	cpc	r1, r15
    2340:	14 f0       	brlt	.+4      	; 0x2346 <main+0x994>
    2342:	0c 94 25 21 	jmp	0x424a	; 0x424a <main+0x2898>
    2346:	de 01       	movw	r26, r28
    2348:	5e 96       	adiw	r26, 0x1e	; 30
    234a:	67 01       	movw	r12, r14
    234c:	ca 0e       	add	r12, r26
    234e:	db 1e       	adc	r13, r27
    2350:	e0 e0       	ldi	r30, 0x00	; 0
    2352:	f0 e0       	ldi	r31, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    2354:	98 e0       	ldi	r25, 0x08	; 8
    2356:	80 e0       	ldi	r24, 0x00	; 0
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    2358:	4d 91       	ld	r20, X+
		tmp = (int)((CRC >> 8) ^ int_c);
    235a:	2f 2f       	mov	r18, r31
    235c:	33 27       	eor	r19, r19
    235e:	27 fd       	sbrc	r18, 7
    2360:	3a 95       	dec	r19
    2362:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    2364:	32 2f       	mov	r19, r18
    2366:	22 27       	eor	r18, r18
    2368:	49 2f       	mov	r20, r25
    236a:	58 2f       	mov	r21, r24
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    236c:	33 23       	and	r19, r19
    236e:	3c f4       	brge	.+14     	; 0x237e <main+0x9cc>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    2370:	22 0f       	add	r18, r18
    2372:	33 1f       	adc	r19, r19
    2374:	61 e2       	ldi	r22, 0x21	; 33
    2376:	26 27       	eor	r18, r22
    2378:	60 e1       	ldi	r22, 0x10	; 16
    237a:	36 27       	eor	r19, r22
    237c:	02 c0       	rjmp	.+4      	; 0x2382 <main+0x9d0>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    237e:	22 0f       	add	r18, r18
    2380:	33 1f       	adc	r19, r19
    2382:	41 50       	subi	r20, 0x01	; 1
    2384:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    2386:	91 f7       	brne	.-28     	; 0x236c <main+0x9ba>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    2388:	fe 2f       	mov	r31, r30
    238a:	ee 27       	eor	r30, r30
    238c:	e2 27       	eor	r30, r18
    238e:	f3 27       	eor	r31, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    2390:	ac 15       	cp	r26, r12
    2392:	bd 05       	cpc	r27, r13
    2394:	09 f7       	brne	.-62     	; 0x2358 <main+0x9a6>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    2396:	6f 01       	movw	r12, r30
    2398:	40 e1       	ldi	r20, 0x10	; 16
    239a:	68 e6       	ldi	r22, 0x68	; 104
    239c:	74 e0       	ldi	r23, 0x04	; 4
    239e:	cf 01       	movw	r24, r30
    23a0:	0e 94 ab 23 	call	0x4756	; 0x4756 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    23a4:	88 e6       	ldi	r24, 0x68	; 104
    23a6:	94 e0       	ldi	r25, 0x04	; 4
    23a8:	0e 94 a1 23 	call	0x4742	; 0x4742 <strupr>
	if(crcXmodem < 0x10)
    23ac:	80 e1       	ldi	r24, 0x10	; 16
    23ae:	c8 16       	cp	r12, r24
    23b0:	d1 04       	cpc	r13, r1
    23b2:	98 f4       	brcc	.+38     	; 0x23da <main+0xa28>
	{
		tx_string[cnt+4] = crc[0];
    23b4:	80 91 68 04 	lds	r24, 0x0468
    23b8:	fe 01       	movw	r30, r28
    23ba:	e0 0f       	add	r30, r16
    23bc:	f1 1f       	adc	r31, r17
    23be:	82 a3       	std	Z+34, r24	; 0x22
		tx_string[cnt+3] = '0';
    23c0:	80 e3       	ldi	r24, 0x30	; 48
    23c2:	fe 01       	movw	r30, r28
    23c4:	e0 0f       	add	r30, r16
    23c6:	f1 1f       	adc	r31, r17
    23c8:	81 a3       	std	Z+33, r24	; 0x21
		tx_string[cnt+2] = '0';
    23ca:	fe 01       	movw	r30, r28
    23cc:	e0 0f       	add	r30, r16
    23ce:	f1 1f       	adc	r31, r17
    23d0:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';
    23d2:	fe 01       	movw	r30, r28
    23d4:	ee 0d       	add	r30, r14
    23d6:	ff 1d       	adc	r31, r15
    23d8:	86 8f       	std	Z+30, r24	; 0x1e
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    23da:	c6 01       	movw	r24, r12
    23dc:	40 97       	sbiw	r24, 0x10	; 16
    23de:	80 3f       	cpi	r24, 0xF0	; 240
    23e0:	91 05       	cpc	r25, r1
    23e2:	b8 f4       	brcc	.+46     	; 0x2412 <main+0xa60>
	{
		tx_string[cnt+4] = crc[1];
    23e4:	a8 e6       	ldi	r26, 0x68	; 104
    23e6:	b4 e0       	ldi	r27, 0x04	; 4
    23e8:	11 96       	adiw	r26, 0x01	; 1
    23ea:	8c 91       	ld	r24, X
    23ec:	11 97       	sbiw	r26, 0x01	; 1
    23ee:	fe 01       	movw	r30, r28
    23f0:	e0 0f       	add	r30, r16
    23f2:	f1 1f       	adc	r31, r17
    23f4:	82 a3       	std	Z+34, r24	; 0x22
		tx_string[cnt+3] = crc[0];
    23f6:	8c 91       	ld	r24, X
    23f8:	fe 01       	movw	r30, r28
    23fa:	e0 0f       	add	r30, r16
    23fc:	f1 1f       	adc	r31, r17
    23fe:	81 a3       	std	Z+33, r24	; 0x21
		tx_string[cnt+2] = '0';
    2400:	80 e3       	ldi	r24, 0x30	; 48
    2402:	fe 01       	movw	r30, r28
    2404:	e0 0f       	add	r30, r16
    2406:	f1 1f       	adc	r31, r17
    2408:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';		
    240a:	fe 01       	movw	r30, r28
    240c:	ee 0d       	add	r30, r14
    240e:	ff 1d       	adc	r31, r15
    2410:	86 8f       	std	Z+30, r24	; 0x1e
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    2412:	c6 01       	movw	r24, r12
    2414:	9a 95       	dec	r25
    2416:	81 15       	cp	r24, r1
    2418:	9f 40       	sbci	r25, 0x0F	; 15
    241a:	b8 f4       	brcc	.+46     	; 0x244a <main+0xa98>
	{
		tx_string[cnt+4] = crc[2];
    241c:	e8 e6       	ldi	r30, 0x68	; 104
    241e:	f4 e0       	ldi	r31, 0x04	; 4
    2420:	82 81       	ldd	r24, Z+2	; 0x02
    2422:	de 01       	movw	r26, r28
    2424:	a0 0f       	add	r26, r16
    2426:	b1 1f       	adc	r27, r17
    2428:	92 96       	adiw	r26, 0x22	; 34
    242a:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[1];
    242c:	81 81       	ldd	r24, Z+1	; 0x01
    242e:	de 01       	movw	r26, r28
    2430:	a0 0f       	add	r26, r16
    2432:	b1 1f       	adc	r27, r17
    2434:	91 96       	adiw	r26, 0x21	; 33
    2436:	8c 93       	st	X, r24
    2438:	91 97       	sbiw	r26, 0x21	; 33
		tx_string[cnt+2] = crc[0];
    243a:	80 81       	ld	r24, Z
    243c:	fd 01       	movw	r30, r26
    243e:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';		
    2440:	80 e3       	ldi	r24, 0x30	; 48
    2442:	fe 01       	movw	r30, r28
    2444:	ee 0d       	add	r30, r14
    2446:	ff 1d       	adc	r31, r15
    2448:	86 8f       	std	Z+30, r24	; 0x1e
	}
	if(crcXmodem >= 0x1000)
    244a:	c1 14       	cp	r12, r1
    244c:	b0 e1       	ldi	r27, 0x10	; 16
    244e:	db 06       	cpc	r13, r27
    2450:	c0 f0       	brcs	.+48     	; 0x2482 <main+0xad0>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    2452:	de 01       	movw	r26, r28
    2454:	ae 0d       	add	r26, r14
    2456:	bf 1d       	adc	r27, r15
    2458:	e8 e6       	ldi	r30, 0x68	; 104
    245a:	f4 e0       	ldi	r31, 0x04	; 4
    245c:	80 81       	ld	r24, Z
    245e:	5e 96       	adiw	r26, 0x1e	; 30
    2460:	8c 93       	st	X, r24
		tx_string[cnt+2] = crc[1];
    2462:	81 81       	ldd	r24, Z+1	; 0x01
    2464:	de 01       	movw	r26, r28
    2466:	a0 0f       	add	r26, r16
    2468:	b1 1f       	adc	r27, r17
    246a:	90 96       	adiw	r26, 0x20	; 32
    246c:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[2];
    246e:	82 81       	ldd	r24, Z+2	; 0x02
    2470:	de 01       	movw	r26, r28
    2472:	a0 0f       	add	r26, r16
    2474:	b1 1f       	adc	r27, r17
    2476:	91 96       	adiw	r26, 0x21	; 33
    2478:	8c 93       	st	X, r24
    247a:	91 97       	sbiw	r26, 0x21	; 33
		tx_string[cnt+4] = crc[3];
    247c:	83 81       	ldd	r24, Z+3	; 0x03
    247e:	fd 01       	movw	r30, r26
    2480:	82 a3       	std	Z+34, r24	; 0x22
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    2482:	c8 01       	movw	r24, r16
    2484:	05 96       	adiw	r24, 0x05	; 5
    2486:	fe 01       	movw	r30, r28
    2488:	e8 0f       	add	r30, r24
    248a:	f9 1f       	adc	r31, r25
    248c:	2d e0       	ldi	r18, 0x0D	; 13
    248e:	26 8f       	std	Z+30, r18	; 0x1e
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    2490:	99 23       	and	r25, r25
    2492:	0c f4       	brge	.+2      	; 0x2496 <main+0xae4>
    2494:	25 c4       	rjmp	.+2122   	; 0x2ce0 <main+0x132e>
    2496:	fe 01       	movw	r30, r28
    2498:	7e 96       	adiw	r30, 0x1e	; 30
    249a:	a8 01       	movw	r20, r16
    249c:	4a 5f       	subi	r20, 0xFA	; 250
    249e:	5f 4f       	sbci	r21, 0xFF	; 255
    24a0:	4e 0f       	add	r20, r30
    24a2:	5f 1f       	adc	r21, r31
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    24a4:	90 e0       	ldi	r25, 0x00	; 0
	{
		uart_putchar(tx_string[i]);
    24a6:	21 91       	ld	r18, Z+
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    24a8:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    24aa:	d4 01       	movw	r26, r8
    24ac:	11 96       	adiw	r26, 0x01	; 1
    24ae:	3c 91       	ld	r19, X
    24b0:	11 97       	sbiw	r26, 0x01	; 1
    24b2:	8c 91       	ld	r24, X
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    24b4:	38 13       	cpse	r19, r24
    24b6:	05 c0       	rjmp	.+10     	; 0x24c2 <main+0xb10>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    24b8:	a1 ec       	ldi	r26, 0xC1	; 193
    24ba:	b0 e0       	ldi	r27, 0x00	; 0
    24bc:	8c 91       	ld	r24, X
    24be:	80 62       	ori	r24, 0x20	; 32
    24c0:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    24c2:	d4 01       	movw	r26, r8
    24c4:	8c 91       	ld	r24, X
    24c6:	13 96       	adiw	r26, 0x03	; 3
    24c8:	6d 91       	ld	r22, X+
    24ca:	7c 91       	ld	r23, X
    24cc:	14 97       	sbiw	r26, 0x04	; 4
    24ce:	db 01       	movw	r26, r22
    24d0:	a8 0f       	add	r26, r24
    24d2:	b1 1d       	adc	r27, r1
    24d4:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    24d6:	d4 01       	movw	r26, r8
    24d8:	8c 91       	ld	r24, X
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    24da:	68 2f       	mov	r22, r24
    24dc:	70 e0       	ldi	r23, 0x00	; 0
    24de:	12 96       	adiw	r26, 0x02	; 2
    24e0:	2c 91       	ld	r18, X
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	21 50       	subi	r18, 0x01	; 1
    24e6:	31 09       	sbc	r19, r1
    24e8:	62 17       	cp	r22, r18
    24ea:	73 07       	cpc	r23, r19
    24ec:	11 f0       	breq	.+4      	; 0x24f2 <main+0xb40>
    24ee:	8f 5f       	subi	r24, 0xFF	; 255
    24f0:	01 c0       	rjmp	.+2      	; 0x24f4 <main+0xb42>
    24f2:	89 2f       	mov	r24, r25
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    24f4:	d4 01       	movw	r26, r8
    24f6:	8c 93       	st	X, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    24f8:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    24fa:	e4 17       	cp	r30, r20
    24fc:	f5 07       	cpc	r31, r21
    24fe:	99 f6       	brne	.-90     	; 0x24a6 <main+0xaf4>
    2500:	ef c3       	rjmp	.+2014   	; 0x2ce0 <main+0x132e>
		ftoa(D_ch0, tx_string);
		printStatus(tx_string);
		break;
		
		case 104:	// Send TempSetPoint0
		ftoa(TempSetPoint0, tx_string);
    2502:	60 91 a2 01 	lds	r22, 0x01A2
    2506:	70 91 a3 01 	lds	r23, 0x01A3
    250a:	80 91 a4 01 	lds	r24, 0x01A4
    250e:	90 91 a5 01 	lds	r25, 0x01A5
    2512:	46 2d       	mov	r20, r6
    2514:	57 2d       	mov	r21, r7
    2516:	c6 d9       	rcall	.-3188   	; 0x18a4 <ftoa>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    2518:	81 e2       	ldi	r24, 0x21	; 33
    251a:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    251c:	f5 01       	movw	r30, r10
    251e:	81 81       	ldd	r24, Z+1	; 0x01
    2520:	8f 8f       	std	Y+31, r24	; 0x1f
    2522:	82 81       	ldd	r24, Z+2	; 0x02
    2524:	88 a3       	std	Y+32, r24	; 0x20
    2526:	83 81       	ldd	r24, Z+3	; 0x03
    2528:	89 a3       	std	Y+33, r24	; 0x21
    252a:	e6 2d       	mov	r30, r6
    252c:	f7 2d       	mov	r31, r7
    252e:	de 01       	movw	r26, r28
    2530:	92 96       	adiw	r26, 0x22	; 34
    2532:	00 e0       	ldi	r16, 0x00	; 0
    2534:	10 e0       	ldi	r17, 0x00	; 0
    2536:	af 01       	movw	r20, r30
    2538:	06 c0       	rjmp	.+12     	; 0x2546 <main+0xb94>
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    253a:	fa 01       	movw	r30, r20
    253c:	81 91       	ld	r24, Z+
    253e:	af 01       	movw	r20, r30
    2540:	8d 93       	st	X+, r24
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    2542:	0f 5f       	subi	r16, 0xFF	; 255
    2544:	1f 4f       	sbci	r17, 0xFF	; 255
    2546:	6c 96       	adiw	r28, 0x1c	; 28
    2548:	ee ad       	ldd	r30, Y+62	; 0x3e
    254a:	ff ad       	ldd	r31, Y+63	; 0x3f
    254c:	6c 97       	sbiw	r28, 0x1c	; 28
    254e:	01 90       	ld	r0, Z+
    2550:	00 20       	and	r0, r0
    2552:	e9 f7       	brne	.-6      	; 0x254e <main+0xb9c>
    2554:	cf 01       	movw	r24, r30
    2556:	6c 96       	adiw	r28, 0x1c	; 28
    2558:	2e ad       	ldd	r18, Y+62	; 0x3e
    255a:	3f ad       	ldd	r19, Y+63	; 0x3f
    255c:	6c 97       	sbiw	r28, 0x1c	; 28
    255e:	82 1b       	sub	r24, r18
    2560:	93 0b       	sbc	r25, r19
    2562:	02 96       	adiw	r24, 0x02	; 2
    2564:	08 17       	cp	r16, r24
    2566:	19 07       	cpc	r17, r25
    2568:	40 f3       	brcs	.-48     	; 0x253a <main+0xb88>
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    256a:	78 01       	movw	r14, r16
    256c:	3f ef       	ldi	r19, 0xFF	; 255
    256e:	e3 1a       	sub	r14, r19
    2570:	f3 0a       	sbc	r15, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    2572:	1e 14       	cp	r1, r14
    2574:	1f 04       	cpc	r1, r15
    2576:	14 f0       	brlt	.+4      	; 0x257c <main+0xbca>
    2578:	0c 94 32 21 	jmp	0x4264	; 0x4264 <main+0x28b2>
    257c:	de 01       	movw	r26, r28
    257e:	5e 96       	adiw	r26, 0x1e	; 30
    2580:	67 01       	movw	r12, r14
    2582:	ca 0e       	add	r12, r26
    2584:	db 1e       	adc	r13, r27
    2586:	e0 e0       	ldi	r30, 0x00	; 0
    2588:	f0 e0       	ldi	r31, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    258a:	98 e0       	ldi	r25, 0x08	; 8
    258c:	80 e0       	ldi	r24, 0x00	; 0
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    258e:	4d 91       	ld	r20, X+
		tmp = (int)((CRC >> 8) ^ int_c);
    2590:	2f 2f       	mov	r18, r31
    2592:	33 27       	eor	r19, r19
    2594:	27 fd       	sbrc	r18, 7
    2596:	3a 95       	dec	r19
    2598:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    259a:	32 2f       	mov	r19, r18
    259c:	22 27       	eor	r18, r18
    259e:	49 2f       	mov	r20, r25
    25a0:	58 2f       	mov	r21, r24
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    25a2:	33 23       	and	r19, r19
    25a4:	3c f4       	brge	.+14     	; 0x25b4 <main+0xc02>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    25a6:	22 0f       	add	r18, r18
    25a8:	33 1f       	adc	r19, r19
    25aa:	61 e2       	ldi	r22, 0x21	; 33
    25ac:	26 27       	eor	r18, r22
    25ae:	60 e1       	ldi	r22, 0x10	; 16
    25b0:	36 27       	eor	r19, r22
    25b2:	02 c0       	rjmp	.+4      	; 0x25b8 <main+0xc06>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    25b4:	22 0f       	add	r18, r18
    25b6:	33 1f       	adc	r19, r19
    25b8:	41 50       	subi	r20, 0x01	; 1
    25ba:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    25bc:	91 f7       	brne	.-28     	; 0x25a2 <main+0xbf0>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    25be:	fe 2f       	mov	r31, r30
    25c0:	ee 27       	eor	r30, r30
    25c2:	e2 27       	eor	r30, r18
    25c4:	f3 27       	eor	r31, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    25c6:	ac 15       	cp	r26, r12
    25c8:	bd 05       	cpc	r27, r13
    25ca:	09 f7       	brne	.-62     	; 0x258e <main+0xbdc>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    25cc:	6f 01       	movw	r12, r30
    25ce:	40 e1       	ldi	r20, 0x10	; 16
    25d0:	68 e6       	ldi	r22, 0x68	; 104
    25d2:	74 e0       	ldi	r23, 0x04	; 4
    25d4:	cf 01       	movw	r24, r30
    25d6:	0e 94 ab 23 	call	0x4756	; 0x4756 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    25da:	88 e6       	ldi	r24, 0x68	; 104
    25dc:	94 e0       	ldi	r25, 0x04	; 4
    25de:	0e 94 a1 23 	call	0x4742	; 0x4742 <strupr>
	if(crcXmodem < 0x10)
    25e2:	80 e1       	ldi	r24, 0x10	; 16
    25e4:	c8 16       	cp	r12, r24
    25e6:	d1 04       	cpc	r13, r1
    25e8:	98 f4       	brcc	.+38     	; 0x2610 <main+0xc5e>
	{
		tx_string[cnt+4] = crc[0];
    25ea:	80 91 68 04 	lds	r24, 0x0468
    25ee:	fe 01       	movw	r30, r28
    25f0:	e0 0f       	add	r30, r16
    25f2:	f1 1f       	adc	r31, r17
    25f4:	82 a3       	std	Z+34, r24	; 0x22
		tx_string[cnt+3] = '0';
    25f6:	80 e3       	ldi	r24, 0x30	; 48
    25f8:	fe 01       	movw	r30, r28
    25fa:	e0 0f       	add	r30, r16
    25fc:	f1 1f       	adc	r31, r17
    25fe:	81 a3       	std	Z+33, r24	; 0x21
		tx_string[cnt+2] = '0';
    2600:	fe 01       	movw	r30, r28
    2602:	e0 0f       	add	r30, r16
    2604:	f1 1f       	adc	r31, r17
    2606:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';
    2608:	fe 01       	movw	r30, r28
    260a:	ee 0d       	add	r30, r14
    260c:	ff 1d       	adc	r31, r15
    260e:	86 8f       	std	Z+30, r24	; 0x1e
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    2610:	c6 01       	movw	r24, r12
    2612:	40 97       	sbiw	r24, 0x10	; 16
    2614:	80 3f       	cpi	r24, 0xF0	; 240
    2616:	91 05       	cpc	r25, r1
    2618:	b8 f4       	brcc	.+46     	; 0x2648 <main+0xc96>
	{
		tx_string[cnt+4] = crc[1];
    261a:	a8 e6       	ldi	r26, 0x68	; 104
    261c:	b4 e0       	ldi	r27, 0x04	; 4
    261e:	11 96       	adiw	r26, 0x01	; 1
    2620:	8c 91       	ld	r24, X
    2622:	11 97       	sbiw	r26, 0x01	; 1
    2624:	fe 01       	movw	r30, r28
    2626:	e0 0f       	add	r30, r16
    2628:	f1 1f       	adc	r31, r17
    262a:	82 a3       	std	Z+34, r24	; 0x22
		tx_string[cnt+3] = crc[0];
    262c:	8c 91       	ld	r24, X
    262e:	fe 01       	movw	r30, r28
    2630:	e0 0f       	add	r30, r16
    2632:	f1 1f       	adc	r31, r17
    2634:	81 a3       	std	Z+33, r24	; 0x21
		tx_string[cnt+2] = '0';
    2636:	80 e3       	ldi	r24, 0x30	; 48
    2638:	fe 01       	movw	r30, r28
    263a:	e0 0f       	add	r30, r16
    263c:	f1 1f       	adc	r31, r17
    263e:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';		
    2640:	fe 01       	movw	r30, r28
    2642:	ee 0d       	add	r30, r14
    2644:	ff 1d       	adc	r31, r15
    2646:	86 8f       	std	Z+30, r24	; 0x1e
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    2648:	c6 01       	movw	r24, r12
    264a:	9a 95       	dec	r25
    264c:	81 15       	cp	r24, r1
    264e:	9f 40       	sbci	r25, 0x0F	; 15
    2650:	b8 f4       	brcc	.+46     	; 0x2680 <main+0xcce>
	{
		tx_string[cnt+4] = crc[2];
    2652:	e8 e6       	ldi	r30, 0x68	; 104
    2654:	f4 e0       	ldi	r31, 0x04	; 4
    2656:	82 81       	ldd	r24, Z+2	; 0x02
    2658:	de 01       	movw	r26, r28
    265a:	a0 0f       	add	r26, r16
    265c:	b1 1f       	adc	r27, r17
    265e:	92 96       	adiw	r26, 0x22	; 34
    2660:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[1];
    2662:	81 81       	ldd	r24, Z+1	; 0x01
    2664:	de 01       	movw	r26, r28
    2666:	a0 0f       	add	r26, r16
    2668:	b1 1f       	adc	r27, r17
    266a:	91 96       	adiw	r26, 0x21	; 33
    266c:	8c 93       	st	X, r24
    266e:	91 97       	sbiw	r26, 0x21	; 33
		tx_string[cnt+2] = crc[0];
    2670:	80 81       	ld	r24, Z
    2672:	fd 01       	movw	r30, r26
    2674:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';		
    2676:	80 e3       	ldi	r24, 0x30	; 48
    2678:	fe 01       	movw	r30, r28
    267a:	ee 0d       	add	r30, r14
    267c:	ff 1d       	adc	r31, r15
    267e:	86 8f       	std	Z+30, r24	; 0x1e
	}
	if(crcXmodem >= 0x1000)
    2680:	c1 14       	cp	r12, r1
    2682:	b0 e1       	ldi	r27, 0x10	; 16
    2684:	db 06       	cpc	r13, r27
    2686:	c0 f0       	brcs	.+48     	; 0x26b8 <main+0xd06>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    2688:	de 01       	movw	r26, r28
    268a:	ae 0d       	add	r26, r14
    268c:	bf 1d       	adc	r27, r15
    268e:	e8 e6       	ldi	r30, 0x68	; 104
    2690:	f4 e0       	ldi	r31, 0x04	; 4
    2692:	80 81       	ld	r24, Z
    2694:	5e 96       	adiw	r26, 0x1e	; 30
    2696:	8c 93       	st	X, r24
		tx_string[cnt+2] = crc[1];
    2698:	81 81       	ldd	r24, Z+1	; 0x01
    269a:	de 01       	movw	r26, r28
    269c:	a0 0f       	add	r26, r16
    269e:	b1 1f       	adc	r27, r17
    26a0:	90 96       	adiw	r26, 0x20	; 32
    26a2:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[2];
    26a4:	82 81       	ldd	r24, Z+2	; 0x02
    26a6:	de 01       	movw	r26, r28
    26a8:	a0 0f       	add	r26, r16
    26aa:	b1 1f       	adc	r27, r17
    26ac:	91 96       	adiw	r26, 0x21	; 33
    26ae:	8c 93       	st	X, r24
    26b0:	91 97       	sbiw	r26, 0x21	; 33
		tx_string[cnt+4] = crc[3];
    26b2:	83 81       	ldd	r24, Z+3	; 0x03
    26b4:	fd 01       	movw	r30, r26
    26b6:	82 a3       	std	Z+34, r24	; 0x22
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    26b8:	c8 01       	movw	r24, r16
    26ba:	05 96       	adiw	r24, 0x05	; 5
    26bc:	fe 01       	movw	r30, r28
    26be:	e8 0f       	add	r30, r24
    26c0:	f9 1f       	adc	r31, r25
    26c2:	2d e0       	ldi	r18, 0x0D	; 13
    26c4:	26 8f       	std	Z+30, r18	; 0x1e
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    26c6:	99 23       	and	r25, r25
    26c8:	0c f4       	brge	.+2      	; 0x26cc <main+0xd1a>
    26ca:	0a c3       	rjmp	.+1556   	; 0x2ce0 <main+0x132e>
    26cc:	fe 01       	movw	r30, r28
    26ce:	7e 96       	adiw	r30, 0x1e	; 30
    26d0:	a8 01       	movw	r20, r16
    26d2:	4a 5f       	subi	r20, 0xFA	; 250
    26d4:	5f 4f       	sbci	r21, 0xFF	; 255
    26d6:	4e 0f       	add	r20, r30
    26d8:	5f 1f       	adc	r21, r31
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    26da:	90 e0       	ldi	r25, 0x00	; 0
	{
		uart_putchar(tx_string[i]);
    26dc:	21 91       	ld	r18, Z+
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    26de:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    26e0:	d4 01       	movw	r26, r8
    26e2:	11 96       	adiw	r26, 0x01	; 1
    26e4:	3c 91       	ld	r19, X
    26e6:	11 97       	sbiw	r26, 0x01	; 1
    26e8:	8c 91       	ld	r24, X
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    26ea:	38 13       	cpse	r19, r24
    26ec:	05 c0       	rjmp	.+10     	; 0x26f8 <main+0xd46>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    26ee:	a1 ec       	ldi	r26, 0xC1	; 193
    26f0:	b0 e0       	ldi	r27, 0x00	; 0
    26f2:	8c 91       	ld	r24, X
    26f4:	80 62       	ori	r24, 0x20	; 32
    26f6:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    26f8:	d4 01       	movw	r26, r8
    26fa:	8c 91       	ld	r24, X
    26fc:	13 96       	adiw	r26, 0x03	; 3
    26fe:	6d 91       	ld	r22, X+
    2700:	7c 91       	ld	r23, X
    2702:	14 97       	sbiw	r26, 0x04	; 4
    2704:	db 01       	movw	r26, r22
    2706:	a8 0f       	add	r26, r24
    2708:	b1 1d       	adc	r27, r1
    270a:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    270c:	d4 01       	movw	r26, r8
    270e:	8c 91       	ld	r24, X
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    2710:	68 2f       	mov	r22, r24
    2712:	70 e0       	ldi	r23, 0x00	; 0
    2714:	12 96       	adiw	r26, 0x02	; 2
    2716:	2c 91       	ld	r18, X
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	21 50       	subi	r18, 0x01	; 1
    271c:	31 09       	sbc	r19, r1
    271e:	62 17       	cp	r22, r18
    2720:	73 07       	cpc	r23, r19
    2722:	11 f0       	breq	.+4      	; 0x2728 <main+0xd76>
    2724:	8f 5f       	subi	r24, 0xFF	; 255
    2726:	01 c0       	rjmp	.+2      	; 0x272a <main+0xd78>
    2728:	89 2f       	mov	r24, r25
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    272a:	d4 01       	movw	r26, r8
    272c:	8c 93       	st	X, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    272e:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    2730:	e4 17       	cp	r30, r20
    2732:	f5 07       	cpc	r31, r21
    2734:	99 f6       	brne	.-90     	; 0x26dc <main+0xd2a>
    2736:	d4 c2       	rjmp	.+1448   	; 0x2ce0 <main+0x132e>
		ftoa(TempSetPoint0, tx_string);
		printStatus(tx_string);
		break;
		
		case 105:	// Send Pgain ch0
		ftoa(Pgain_ch0, tx_string);
    2738:	60 91 06 03 	lds	r22, 0x0306
    273c:	70 91 07 03 	lds	r23, 0x0307
    2740:	80 91 08 03 	lds	r24, 0x0308
    2744:	90 91 09 03 	lds	r25, 0x0309
    2748:	46 2d       	mov	r20, r6
    274a:	57 2d       	mov	r21, r7
    274c:	ab d8       	rcall	.-3754   	; 0x18a4 <ftoa>
		printStatus(tx_string);
    274e:	86 2d       	mov	r24, r6
    2750:	97 2d       	mov	r25, r7
    2752:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2756:	c4 c2       	rjmp	.+1416   	; 0x2ce0 <main+0x132e>
		break;								
		
		case 106:	// Send Igain ch0
		ftoa(Igain_ch0, tx_string);
    2758:	60 91 ba 04 	lds	r22, 0x04BA
    275c:	70 91 bb 04 	lds	r23, 0x04BB
    2760:	80 91 bc 04 	lds	r24, 0x04BC
    2764:	90 91 bd 04 	lds	r25, 0x04BD
    2768:	46 2d       	mov	r20, r6
    276a:	57 2d       	mov	r21, r7
    276c:	9b d8       	rcall	.-3786   	; 0x18a4 <ftoa>
		printStatus(tx_string);
    276e:	86 2d       	mov	r24, r6
    2770:	97 2d       	mov	r25, r7
    2772:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2776:	b4 c2       	rjmp	.+1384   	; 0x2ce0 <main+0x132e>
		break;
		
		case 107:	// Send Dgain ch0
		ftoa(Dgain_ch0, tx_string);
    2778:	60 91 03 02 	lds	r22, 0x0203
    277c:	70 91 04 02 	lds	r23, 0x0204
    2780:	80 91 05 02 	lds	r24, 0x0205
    2784:	90 91 06 02 	lds	r25, 0x0206
    2788:	46 2d       	mov	r20, r6
    278a:	57 2d       	mov	r21, r7
    278c:	8b d8       	rcall	.-3818   	; 0x18a4 <ftoa>
		printStatus(tx_string);
    278e:	86 2d       	mov	r24, r6
    2790:	97 2d       	mov	r25, r7
    2792:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2796:	a4 c2       	rjmp	.+1352   	; 0x2ce0 <main+0x132e>
		break;
		
		// *** Channel 1 ***
		case 200:	// Send sensor 1 temperature
		ftoa(TempSensor1, tx_string);
    2798:	60 91 b0 01 	lds	r22, 0x01B0
    279c:	70 91 b1 01 	lds	r23, 0x01B1
    27a0:	80 91 b2 01 	lds	r24, 0x01B2
    27a4:	90 91 b3 01 	lds	r25, 0x01B3
    27a8:	46 2d       	mov	r20, r6
    27aa:	57 2d       	mov	r21, r7
    27ac:	7b d8       	rcall	.-3850   	; 0x18a4 <ftoa>
		printStatus(tx_string);
    27ae:	86 2d       	mov	r24, r6
    27b0:	97 2d       	mov	r25, r7
    27b2:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    27b6:	94 c2       	rjmp	.+1320   	; 0x2ce0 <main+0x132e>
		break;
		
		case 201:	// Send P part of PID-controller 1
		ftoa(P_ch1, tx_string);
    27b8:	60 91 86 01 	lds	r22, 0x0186
    27bc:	70 91 87 01 	lds	r23, 0x0187
    27c0:	80 91 88 01 	lds	r24, 0x0188
    27c4:	90 91 89 01 	lds	r25, 0x0189
    27c8:	46 2d       	mov	r20, r6
    27ca:	57 2d       	mov	r21, r7
    27cc:	6b d8       	rcall	.-3882   	; 0x18a4 <ftoa>
		printStatus(tx_string);
    27ce:	86 2d       	mov	r24, r6
    27d0:	97 2d       	mov	r25, r7
    27d2:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    27d6:	84 c2       	rjmp	.+1288   	; 0x2ce0 <main+0x132e>
		break;
		
		case 202:	// Send I part of PID-controller 1
		ftoa(I_ch1, tx_string);
    27d8:	60 91 82 01 	lds	r22, 0x0182
    27dc:	70 91 83 01 	lds	r23, 0x0183
    27e0:	80 91 84 01 	lds	r24, 0x0184
    27e4:	90 91 85 01 	lds	r25, 0x0185
    27e8:	46 2d       	mov	r20, r6
    27ea:	57 2d       	mov	r21, r7
    27ec:	5b d8       	rcall	.-3914   	; 0x18a4 <ftoa>
		printStatus(tx_string);
    27ee:	86 2d       	mov	r24, r6
    27f0:	97 2d       	mov	r25, r7
    27f2:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    27f6:	74 c2       	rjmp	.+1256   	; 0x2ce0 <main+0x132e>
		break;
				
		case 203:	// Send D part of PID-controller 1
		ftoa(D_ch1, tx_string);
    27f8:	60 91 7e 01 	lds	r22, 0x017E
    27fc:	70 91 7f 01 	lds	r23, 0x017F
    2800:	80 91 80 01 	lds	r24, 0x0180
    2804:	90 91 81 01 	lds	r25, 0x0181
    2808:	46 2d       	mov	r20, r6
    280a:	57 2d       	mov	r21, r7
    280c:	4b d8       	rcall	.-3946   	; 0x18a4 <ftoa>
		printStatus(tx_string);
    280e:	86 2d       	mov	r24, r6
    2810:	97 2d       	mov	r25, r7
    2812:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2816:	64 c2       	rjmp	.+1224   	; 0x2ce0 <main+0x132e>
		break;
		
		case 204:	// Send TempSetPoint1
		ftoa(TempSetPoint1, tx_string);
    2818:	60 91 8a 01 	lds	r22, 0x018A
    281c:	70 91 8b 01 	lds	r23, 0x018B
    2820:	80 91 8c 01 	lds	r24, 0x018C
    2824:	90 91 8d 01 	lds	r25, 0x018D
    2828:	46 2d       	mov	r20, r6
    282a:	57 2d       	mov	r21, r7
    282c:	3b d8       	rcall	.-3978   	; 0x18a4 <ftoa>
		printStatus(tx_string);
    282e:	86 2d       	mov	r24, r6
    2830:	97 2d       	mov	r25, r7
    2832:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2836:	54 c2       	rjmp	.+1192   	; 0x2ce0 <main+0x132e>
		break;
		
		case 205:	// Send Pgain ch1
		ftoa(Pgain_ch1, tx_string);
    2838:	60 91 71 04 	lds	r22, 0x0471
    283c:	70 91 72 04 	lds	r23, 0x0472
    2840:	80 91 73 04 	lds	r24, 0x0473
    2844:	90 91 74 04 	lds	r25, 0x0474
    2848:	46 2d       	mov	r20, r6
    284a:	57 2d       	mov	r21, r7
    284c:	2b d8       	rcall	.-4010   	; 0x18a4 <ftoa>
		printStatus(tx_string);
    284e:	86 2d       	mov	r24, r6
    2850:	97 2d       	mov	r25, r7
    2852:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2856:	44 c2       	rjmp	.+1160   	; 0x2ce0 <main+0x132e>
		break;
		
		case 206:	// Send Igain ch1
		ftoa(Igain_ch1, tx_string);
    2858:	60 91 c6 01 	lds	r22, 0x01C6
    285c:	70 91 c7 01 	lds	r23, 0x01C7
    2860:	80 91 c8 01 	lds	r24, 0x01C8
    2864:	90 91 c9 01 	lds	r25, 0x01C9
    2868:	46 2d       	mov	r20, r6
    286a:	57 2d       	mov	r21, r7
    286c:	1b d8       	rcall	.-4042   	; 0x18a4 <ftoa>
		printStatus(tx_string);
    286e:	86 2d       	mov	r24, r6
    2870:	97 2d       	mov	r25, r7
    2872:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2876:	34 c2       	rjmp	.+1128   	; 0x2ce0 <main+0x132e>
		break;
		
		case 207:	// Send Dgain ch1
		ftoa(Dgain_ch1, tx_string);
    2878:	60 91 b6 04 	lds	r22, 0x04B6
    287c:	70 91 b7 04 	lds	r23, 0x04B7
    2880:	80 91 b8 04 	lds	r24, 0x04B8
    2884:	90 91 b9 04 	lds	r25, 0x04B9
    2888:	46 2d       	mov	r20, r6
    288a:	57 2d       	mov	r21, r7
    288c:	0b d8       	rcall	.-4074   	; 0x18a4 <ftoa>
		printStatus(tx_string);
    288e:	86 2d       	mov	r24, r6
    2890:	97 2d       	mov	r25, r7
    2892:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2896:	24 c2       	rjmp	.+1096   	; 0x2ce0 <main+0x132e>
		break;

		// *** Channel 2 ***		
		case 300:	// Send sensor 2 temperature
		ftoa(TempSensor2, tx_string);
    2898:	60 91 ac 01 	lds	r22, 0x01AC
    289c:	70 91 ad 01 	lds	r23, 0x01AD
    28a0:	80 91 ae 01 	lds	r24, 0x01AE
    28a4:	90 91 af 01 	lds	r25, 0x01AF
    28a8:	46 2d       	mov	r20, r6
    28aa:	57 2d       	mov	r21, r7
    28ac:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <ftoa>
		printStatus(tx_string);
    28b0:	86 2d       	mov	r24, r6
    28b2:	97 2d       	mov	r25, r7
    28b4:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    28b8:	13 c2       	rjmp	.+1062   	; 0x2ce0 <main+0x132e>
		break;
		
		case 301:	// Send P part of PID-controller 2
		ftoa(P_ch2, tx_string);
    28ba:	60 91 6e 01 	lds	r22, 0x016E
    28be:	70 91 6f 01 	lds	r23, 0x016F
    28c2:	80 91 70 01 	lds	r24, 0x0170
    28c6:	90 91 71 01 	lds	r25, 0x0171
    28ca:	46 2d       	mov	r20, r6
    28cc:	57 2d       	mov	r21, r7
    28ce:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <ftoa>
		printStatus(tx_string);
    28d2:	86 2d       	mov	r24, r6
    28d4:	97 2d       	mov	r25, r7
    28d6:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    28da:	02 c2       	rjmp	.+1028   	; 0x2ce0 <main+0x132e>
		break;
		
		case 302:	// Send I part of PID-controller 2
		ftoa(I_ch2, tx_string);
    28dc:	60 91 6a 01 	lds	r22, 0x016A
    28e0:	70 91 6b 01 	lds	r23, 0x016B
    28e4:	80 91 6c 01 	lds	r24, 0x016C
    28e8:	90 91 6d 01 	lds	r25, 0x016D
    28ec:	46 2d       	mov	r20, r6
    28ee:	57 2d       	mov	r21, r7
    28f0:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <ftoa>
		printStatus(tx_string);
    28f4:	86 2d       	mov	r24, r6
    28f6:	97 2d       	mov	r25, r7
    28f8:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    28fc:	f1 c1       	rjmp	.+994    	; 0x2ce0 <main+0x132e>
		break;
		
		case 303:	// Send D part of PID-controller 2
		ftoa(D_ch2, tx_string);
    28fe:	60 91 66 01 	lds	r22, 0x0166
    2902:	70 91 67 01 	lds	r23, 0x0167
    2906:	80 91 68 01 	lds	r24, 0x0168
    290a:	90 91 69 01 	lds	r25, 0x0169
    290e:	46 2d       	mov	r20, r6
    2910:	57 2d       	mov	r21, r7
    2912:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <ftoa>
		printStatus(tx_string);
    2916:	86 2d       	mov	r24, r6
    2918:	97 2d       	mov	r25, r7
    291a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    291e:	e0 c1       	rjmp	.+960    	; 0x2ce0 <main+0x132e>
		break;
		
		case 304:	// Send TempSetPoint2
		ftoa(TempSetPoint2, tx_string);
    2920:	60 91 72 01 	lds	r22, 0x0172
    2924:	70 91 73 01 	lds	r23, 0x0173
    2928:	80 91 74 01 	lds	r24, 0x0174
    292c:	90 91 75 01 	lds	r25, 0x0175
    2930:	46 2d       	mov	r20, r6
    2932:	57 2d       	mov	r21, r7
    2934:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <ftoa>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    2938:	81 e2       	ldi	r24, 0x21	; 33
    293a:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    293c:	f5 01       	movw	r30, r10
    293e:	81 81       	ldd	r24, Z+1	; 0x01
    2940:	8f 8f       	std	Y+31, r24	; 0x1f
    2942:	82 81       	ldd	r24, Z+2	; 0x02
    2944:	88 a3       	std	Y+32, r24	; 0x20
    2946:	83 81       	ldd	r24, Z+3	; 0x03
    2948:	89 a3       	std	Y+33, r24	; 0x21
    294a:	e6 2d       	mov	r30, r6
    294c:	f7 2d       	mov	r31, r7
    294e:	de 01       	movw	r26, r28
    2950:	92 96       	adiw	r26, 0x22	; 34
    2952:	00 e0       	ldi	r16, 0x00	; 0
    2954:	10 e0       	ldi	r17, 0x00	; 0
    2956:	af 01       	movw	r20, r30
    2958:	06 c0       	rjmp	.+12     	; 0x2966 <main+0xfb4>
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    295a:	fa 01       	movw	r30, r20
    295c:	81 91       	ld	r24, Z+
    295e:	af 01       	movw	r20, r30
    2960:	8d 93       	st	X+, r24
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    2962:	0f 5f       	subi	r16, 0xFF	; 255
    2964:	1f 4f       	sbci	r17, 0xFF	; 255
    2966:	6c 96       	adiw	r28, 0x1c	; 28
    2968:	ee ad       	ldd	r30, Y+62	; 0x3e
    296a:	ff ad       	ldd	r31, Y+63	; 0x3f
    296c:	6c 97       	sbiw	r28, 0x1c	; 28
    296e:	01 90       	ld	r0, Z+
    2970:	00 20       	and	r0, r0
    2972:	e9 f7       	brne	.-6      	; 0x296e <main+0xfbc>
    2974:	cf 01       	movw	r24, r30
    2976:	6c 96       	adiw	r28, 0x1c	; 28
    2978:	2e ad       	ldd	r18, Y+62	; 0x3e
    297a:	3f ad       	ldd	r19, Y+63	; 0x3f
    297c:	6c 97       	sbiw	r28, 0x1c	; 28
    297e:	82 1b       	sub	r24, r18
    2980:	93 0b       	sbc	r25, r19
    2982:	02 96       	adiw	r24, 0x02	; 2
    2984:	08 17       	cp	r16, r24
    2986:	19 07       	cpc	r17, r25
    2988:	40 f3       	brcs	.-48     	; 0x295a <main+0xfa8>
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    298a:	78 01       	movw	r14, r16
    298c:	3f ef       	ldi	r19, 0xFF	; 255
    298e:	e3 1a       	sub	r14, r19
    2990:	f3 0a       	sbc	r15, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    2992:	1e 14       	cp	r1, r14
    2994:	1f 04       	cpc	r1, r15
    2996:	14 f0       	brlt	.+4      	; 0x299c <main+0xfea>
    2998:	0c 94 3f 21 	jmp	0x427e	; 0x427e <main+0x28cc>
    299c:	de 01       	movw	r26, r28
    299e:	5e 96       	adiw	r26, 0x1e	; 30
    29a0:	67 01       	movw	r12, r14
    29a2:	ca 0e       	add	r12, r26
    29a4:	db 1e       	adc	r13, r27
    29a6:	e0 e0       	ldi	r30, 0x00	; 0
    29a8:	f0 e0       	ldi	r31, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    29aa:	98 e0       	ldi	r25, 0x08	; 8
    29ac:	80 e0       	ldi	r24, 0x00	; 0
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    29ae:	4d 91       	ld	r20, X+
		tmp = (int)((CRC >> 8) ^ int_c);
    29b0:	2f 2f       	mov	r18, r31
    29b2:	33 27       	eor	r19, r19
    29b4:	27 fd       	sbrc	r18, 7
    29b6:	3a 95       	dec	r19
    29b8:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    29ba:	32 2f       	mov	r19, r18
    29bc:	22 27       	eor	r18, r18
    29be:	49 2f       	mov	r20, r25
    29c0:	58 2f       	mov	r21, r24
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    29c2:	33 23       	and	r19, r19
    29c4:	3c f4       	brge	.+14     	; 0x29d4 <main+0x1022>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    29c6:	22 0f       	add	r18, r18
    29c8:	33 1f       	adc	r19, r19
    29ca:	61 e2       	ldi	r22, 0x21	; 33
    29cc:	26 27       	eor	r18, r22
    29ce:	60 e1       	ldi	r22, 0x10	; 16
    29d0:	36 27       	eor	r19, r22
    29d2:	02 c0       	rjmp	.+4      	; 0x29d8 <main+0x1026>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    29d4:	22 0f       	add	r18, r18
    29d6:	33 1f       	adc	r19, r19
    29d8:	41 50       	subi	r20, 0x01	; 1
    29da:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    29dc:	91 f7       	brne	.-28     	; 0x29c2 <main+0x1010>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    29de:	fe 2f       	mov	r31, r30
    29e0:	ee 27       	eor	r30, r30
    29e2:	e2 27       	eor	r30, r18
    29e4:	f3 27       	eor	r31, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    29e6:	ac 15       	cp	r26, r12
    29e8:	bd 05       	cpc	r27, r13
    29ea:	09 f7       	brne	.-62     	; 0x29ae <main+0xffc>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    29ec:	6f 01       	movw	r12, r30
    29ee:	40 e1       	ldi	r20, 0x10	; 16
    29f0:	68 e6       	ldi	r22, 0x68	; 104
    29f2:	74 e0       	ldi	r23, 0x04	; 4
    29f4:	cf 01       	movw	r24, r30
    29f6:	0e 94 ab 23 	call	0x4756	; 0x4756 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    29fa:	88 e6       	ldi	r24, 0x68	; 104
    29fc:	94 e0       	ldi	r25, 0x04	; 4
    29fe:	0e 94 a1 23 	call	0x4742	; 0x4742 <strupr>
	if(crcXmodem < 0x10)
    2a02:	80 e1       	ldi	r24, 0x10	; 16
    2a04:	c8 16       	cp	r12, r24
    2a06:	d1 04       	cpc	r13, r1
    2a08:	98 f4       	brcc	.+38     	; 0x2a30 <main+0x107e>
	{
		tx_string[cnt+4] = crc[0];
    2a0a:	80 91 68 04 	lds	r24, 0x0468
    2a0e:	fe 01       	movw	r30, r28
    2a10:	e0 0f       	add	r30, r16
    2a12:	f1 1f       	adc	r31, r17
    2a14:	82 a3       	std	Z+34, r24	; 0x22
		tx_string[cnt+3] = '0';
    2a16:	80 e3       	ldi	r24, 0x30	; 48
    2a18:	fe 01       	movw	r30, r28
    2a1a:	e0 0f       	add	r30, r16
    2a1c:	f1 1f       	adc	r31, r17
    2a1e:	81 a3       	std	Z+33, r24	; 0x21
		tx_string[cnt+2] = '0';
    2a20:	fe 01       	movw	r30, r28
    2a22:	e0 0f       	add	r30, r16
    2a24:	f1 1f       	adc	r31, r17
    2a26:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';
    2a28:	fe 01       	movw	r30, r28
    2a2a:	ee 0d       	add	r30, r14
    2a2c:	ff 1d       	adc	r31, r15
    2a2e:	86 8f       	std	Z+30, r24	; 0x1e
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    2a30:	c6 01       	movw	r24, r12
    2a32:	40 97       	sbiw	r24, 0x10	; 16
    2a34:	80 3f       	cpi	r24, 0xF0	; 240
    2a36:	91 05       	cpc	r25, r1
    2a38:	b8 f4       	brcc	.+46     	; 0x2a68 <main+0x10b6>
	{
		tx_string[cnt+4] = crc[1];
    2a3a:	a8 e6       	ldi	r26, 0x68	; 104
    2a3c:	b4 e0       	ldi	r27, 0x04	; 4
    2a3e:	11 96       	adiw	r26, 0x01	; 1
    2a40:	8c 91       	ld	r24, X
    2a42:	11 97       	sbiw	r26, 0x01	; 1
    2a44:	fe 01       	movw	r30, r28
    2a46:	e0 0f       	add	r30, r16
    2a48:	f1 1f       	adc	r31, r17
    2a4a:	82 a3       	std	Z+34, r24	; 0x22
		tx_string[cnt+3] = crc[0];
    2a4c:	8c 91       	ld	r24, X
    2a4e:	fe 01       	movw	r30, r28
    2a50:	e0 0f       	add	r30, r16
    2a52:	f1 1f       	adc	r31, r17
    2a54:	81 a3       	std	Z+33, r24	; 0x21
		tx_string[cnt+2] = '0';
    2a56:	80 e3       	ldi	r24, 0x30	; 48
    2a58:	fe 01       	movw	r30, r28
    2a5a:	e0 0f       	add	r30, r16
    2a5c:	f1 1f       	adc	r31, r17
    2a5e:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';		
    2a60:	fe 01       	movw	r30, r28
    2a62:	ee 0d       	add	r30, r14
    2a64:	ff 1d       	adc	r31, r15
    2a66:	86 8f       	std	Z+30, r24	; 0x1e
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    2a68:	c6 01       	movw	r24, r12
    2a6a:	9a 95       	dec	r25
    2a6c:	81 15       	cp	r24, r1
    2a6e:	9f 40       	sbci	r25, 0x0F	; 15
    2a70:	b8 f4       	brcc	.+46     	; 0x2aa0 <main+0x10ee>
	{
		tx_string[cnt+4] = crc[2];
    2a72:	e8 e6       	ldi	r30, 0x68	; 104
    2a74:	f4 e0       	ldi	r31, 0x04	; 4
    2a76:	82 81       	ldd	r24, Z+2	; 0x02
    2a78:	de 01       	movw	r26, r28
    2a7a:	a0 0f       	add	r26, r16
    2a7c:	b1 1f       	adc	r27, r17
    2a7e:	92 96       	adiw	r26, 0x22	; 34
    2a80:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[1];
    2a82:	81 81       	ldd	r24, Z+1	; 0x01
    2a84:	de 01       	movw	r26, r28
    2a86:	a0 0f       	add	r26, r16
    2a88:	b1 1f       	adc	r27, r17
    2a8a:	91 96       	adiw	r26, 0x21	; 33
    2a8c:	8c 93       	st	X, r24
    2a8e:	91 97       	sbiw	r26, 0x21	; 33
		tx_string[cnt+2] = crc[0];
    2a90:	80 81       	ld	r24, Z
    2a92:	fd 01       	movw	r30, r26
    2a94:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';		
    2a96:	80 e3       	ldi	r24, 0x30	; 48
    2a98:	fe 01       	movw	r30, r28
    2a9a:	ee 0d       	add	r30, r14
    2a9c:	ff 1d       	adc	r31, r15
    2a9e:	86 8f       	std	Z+30, r24	; 0x1e
	}
	if(crcXmodem >= 0x1000)
    2aa0:	c1 14       	cp	r12, r1
    2aa2:	b0 e1       	ldi	r27, 0x10	; 16
    2aa4:	db 06       	cpc	r13, r27
    2aa6:	c0 f0       	brcs	.+48     	; 0x2ad8 <main+0x1126>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    2aa8:	de 01       	movw	r26, r28
    2aaa:	ae 0d       	add	r26, r14
    2aac:	bf 1d       	adc	r27, r15
    2aae:	e8 e6       	ldi	r30, 0x68	; 104
    2ab0:	f4 e0       	ldi	r31, 0x04	; 4
    2ab2:	80 81       	ld	r24, Z
    2ab4:	5e 96       	adiw	r26, 0x1e	; 30
    2ab6:	8c 93       	st	X, r24
		tx_string[cnt+2] = crc[1];
    2ab8:	81 81       	ldd	r24, Z+1	; 0x01
    2aba:	de 01       	movw	r26, r28
    2abc:	a0 0f       	add	r26, r16
    2abe:	b1 1f       	adc	r27, r17
    2ac0:	90 96       	adiw	r26, 0x20	; 32
    2ac2:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[2];
    2ac4:	82 81       	ldd	r24, Z+2	; 0x02
    2ac6:	de 01       	movw	r26, r28
    2ac8:	a0 0f       	add	r26, r16
    2aca:	b1 1f       	adc	r27, r17
    2acc:	91 96       	adiw	r26, 0x21	; 33
    2ace:	8c 93       	st	X, r24
    2ad0:	91 97       	sbiw	r26, 0x21	; 33
		tx_string[cnt+4] = crc[3];
    2ad2:	83 81       	ldd	r24, Z+3	; 0x03
    2ad4:	fd 01       	movw	r30, r26
    2ad6:	82 a3       	std	Z+34, r24	; 0x22
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    2ad8:	c8 01       	movw	r24, r16
    2ada:	05 96       	adiw	r24, 0x05	; 5
    2adc:	fe 01       	movw	r30, r28
    2ade:	e8 0f       	add	r30, r24
    2ae0:	f9 1f       	adc	r31, r25
    2ae2:	2d e0       	ldi	r18, 0x0D	; 13
    2ae4:	26 8f       	std	Z+30, r18	; 0x1e
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    2ae6:	99 23       	and	r25, r25
    2ae8:	0c f4       	brge	.+2      	; 0x2aec <main+0x113a>
    2aea:	fa c0       	rjmp	.+500    	; 0x2ce0 <main+0x132e>
    2aec:	fe 01       	movw	r30, r28
    2aee:	7e 96       	adiw	r30, 0x1e	; 30
    2af0:	a8 01       	movw	r20, r16
    2af2:	4a 5f       	subi	r20, 0xFA	; 250
    2af4:	5f 4f       	sbci	r21, 0xFF	; 255
    2af6:	4e 0f       	add	r20, r30
    2af8:	5f 1f       	adc	r21, r31
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    2afa:	90 e0       	ldi	r25, 0x00	; 0
	{
		uart_putchar(tx_string[i]);
    2afc:	21 91       	ld	r18, Z+
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    2afe:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    2b00:	d4 01       	movw	r26, r8
    2b02:	11 96       	adiw	r26, 0x01	; 1
    2b04:	3c 91       	ld	r19, X
    2b06:	11 97       	sbiw	r26, 0x01	; 1
    2b08:	8c 91       	ld	r24, X
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    2b0a:	38 13       	cpse	r19, r24
    2b0c:	05 c0       	rjmp	.+10     	; 0x2b18 <main+0x1166>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    2b0e:	a1 ec       	ldi	r26, 0xC1	; 193
    2b10:	b0 e0       	ldi	r27, 0x00	; 0
    2b12:	8c 91       	ld	r24, X
    2b14:	80 62       	ori	r24, 0x20	; 32
    2b16:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    2b18:	d4 01       	movw	r26, r8
    2b1a:	8c 91       	ld	r24, X
    2b1c:	13 96       	adiw	r26, 0x03	; 3
    2b1e:	6d 91       	ld	r22, X+
    2b20:	7c 91       	ld	r23, X
    2b22:	14 97       	sbiw	r26, 0x04	; 4
    2b24:	db 01       	movw	r26, r22
    2b26:	a8 0f       	add	r26, r24
    2b28:	b1 1d       	adc	r27, r1
    2b2a:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    2b2c:	d4 01       	movw	r26, r8
    2b2e:	8c 91       	ld	r24, X
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    2b30:	68 2f       	mov	r22, r24
    2b32:	70 e0       	ldi	r23, 0x00	; 0
    2b34:	12 96       	adiw	r26, 0x02	; 2
    2b36:	2c 91       	ld	r18, X
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	21 50       	subi	r18, 0x01	; 1
    2b3c:	31 09       	sbc	r19, r1
    2b3e:	62 17       	cp	r22, r18
    2b40:	73 07       	cpc	r23, r19
    2b42:	11 f0       	breq	.+4      	; 0x2b48 <main+0x1196>
    2b44:	8f 5f       	subi	r24, 0xFF	; 255
    2b46:	01 c0       	rjmp	.+2      	; 0x2b4a <main+0x1198>
    2b48:	89 2f       	mov	r24, r25
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    2b4a:	d4 01       	movw	r26, r8
    2b4c:	8c 93       	st	X, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    2b4e:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    2b50:	e4 17       	cp	r30, r20
    2b52:	f5 07       	cpc	r31, r21
    2b54:	99 f6       	brne	.-90     	; 0x2afc <main+0x114a>
    2b56:	c4 c0       	rjmp	.+392    	; 0x2ce0 <main+0x132e>
		ftoa(TempSetPoint2, tx_string);
		printStatus(tx_string);
		break;
		
		case 305:	// Send Pgain ch2
		ftoa(Pgain_ch2, tx_string);
    2b58:	60 91 6d 04 	lds	r22, 0x046D
    2b5c:	70 91 6e 04 	lds	r23, 0x046E
    2b60:	80 91 6f 04 	lds	r24, 0x046F
    2b64:	90 91 70 04 	lds	r25, 0x0470
    2b68:	46 2d       	mov	r20, r6
    2b6a:	57 2d       	mov	r21, r7
    2b6c:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <ftoa>
		printStatus(tx_string);
    2b70:	86 2d       	mov	r24, r6
    2b72:	97 2d       	mov	r25, r7
    2b74:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2b78:	b3 c0       	rjmp	.+358    	; 0x2ce0 <main+0x132e>
		break;
		
		case 306:	// Send Igain ch2
		ftoa(Igain_ch2, tx_string);
    2b7a:	60 91 75 04 	lds	r22, 0x0475
    2b7e:	70 91 76 04 	lds	r23, 0x0476
    2b82:	80 91 77 04 	lds	r24, 0x0477
    2b86:	90 91 78 04 	lds	r25, 0x0478
    2b8a:	46 2d       	mov	r20, r6
    2b8c:	57 2d       	mov	r21, r7
    2b8e:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <ftoa>
		printStatus(tx_string);
    2b92:	86 2d       	mov	r24, r6
    2b94:	97 2d       	mov	r25, r7
    2b96:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2b9a:	a2 c0       	rjmp	.+324    	; 0x2ce0 <main+0x132e>
		break;
		
		case 307:	// Send Dgain ch2
		ftoa(Dgain_ch2, tx_string);
    2b9c:	60 91 b2 04 	lds	r22, 0x04B2
    2ba0:	70 91 b3 04 	lds	r23, 0x04B3
    2ba4:	80 91 b4 04 	lds	r24, 0x04B4
    2ba8:	90 91 b5 04 	lds	r25, 0x04B5
    2bac:	46 2d       	mov	r20, r6
    2bae:	57 2d       	mov	r21, r7
    2bb0:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <ftoa>
		printStatus(tx_string);
    2bb4:	86 2d       	mov	r24, r6
    2bb6:	97 2d       	mov	r25, r7
    2bb8:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2bbc:	91 c0       	rjmp	.+290    	; 0x2ce0 <main+0x132e>
		break;
		
		// *** Channel 3 ***
		case 400:	// Send sensor 3 temperature
		ftoa(TempSensor3, tx_string);
    2bbe:	60 91 a8 01 	lds	r22, 0x01A8
    2bc2:	70 91 a9 01 	lds	r23, 0x01A9
    2bc6:	80 91 aa 01 	lds	r24, 0x01AA
    2bca:	90 91 ab 01 	lds	r25, 0x01AB
    2bce:	46 2d       	mov	r20, r6
    2bd0:	57 2d       	mov	r21, r7
    2bd2:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <ftoa>
		printStatus(tx_string);
    2bd6:	86 2d       	mov	r24, r6
    2bd8:	97 2d       	mov	r25, r7
    2bda:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2bde:	80 c0       	rjmp	.+256    	; 0x2ce0 <main+0x132e>
		break;
		
		case 401:	// Send P part of PID-controller 3
		ftoa(P_ch3, tx_string);
    2be0:	60 91 56 01 	lds	r22, 0x0156
    2be4:	70 91 57 01 	lds	r23, 0x0157
    2be8:	80 91 58 01 	lds	r24, 0x0158
    2bec:	90 91 59 01 	lds	r25, 0x0159
    2bf0:	46 2d       	mov	r20, r6
    2bf2:	57 2d       	mov	r21, r7
    2bf4:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <ftoa>
		printStatus(tx_string);
    2bf8:	86 2d       	mov	r24, r6
    2bfa:	97 2d       	mov	r25, r7
    2bfc:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2c00:	6f c0       	rjmp	.+222    	; 0x2ce0 <main+0x132e>
		break;
		
		case 402:	// Send I part of PID-controller 3
		ftoa(I_ch3, tx_string);
    2c02:	60 91 52 01 	lds	r22, 0x0152
    2c06:	70 91 53 01 	lds	r23, 0x0153
    2c0a:	80 91 54 01 	lds	r24, 0x0154
    2c0e:	90 91 55 01 	lds	r25, 0x0155
    2c12:	46 2d       	mov	r20, r6
    2c14:	57 2d       	mov	r21, r7
    2c16:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <ftoa>
		printStatus(tx_string);
    2c1a:	86 2d       	mov	r24, r6
    2c1c:	97 2d       	mov	r25, r7
    2c1e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2c22:	5e c0       	rjmp	.+188    	; 0x2ce0 <main+0x132e>
		break;
		
		case 403:	// Send D part of PID-controller 3
		ftoa(D_ch3, tx_string);
    2c24:	60 91 4e 01 	lds	r22, 0x014E
    2c28:	70 91 4f 01 	lds	r23, 0x014F
    2c2c:	80 91 50 01 	lds	r24, 0x0150
    2c30:	90 91 51 01 	lds	r25, 0x0151
    2c34:	46 2d       	mov	r20, r6
    2c36:	57 2d       	mov	r21, r7
    2c38:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <ftoa>
		printStatus(tx_string);
    2c3c:	86 2d       	mov	r24, r6
    2c3e:	97 2d       	mov	r25, r7
    2c40:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2c44:	4d c0       	rjmp	.+154    	; 0x2ce0 <main+0x132e>
		break;
		
		case 404:	// Send TempSetPoint3
		ftoa(TempSetPoint3, tx_string);
    2c46:	60 91 5a 01 	lds	r22, 0x015A
    2c4a:	70 91 5b 01 	lds	r23, 0x015B
    2c4e:	80 91 5c 01 	lds	r24, 0x015C
    2c52:	90 91 5d 01 	lds	r25, 0x015D
    2c56:	46 2d       	mov	r20, r6
    2c58:	57 2d       	mov	r21, r7
    2c5a:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <ftoa>
		printStatus(tx_string);
    2c5e:	86 2d       	mov	r24, r6
    2c60:	97 2d       	mov	r25, r7
    2c62:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2c66:	3c c0       	rjmp	.+120    	; 0x2ce0 <main+0x132e>
		break;
		
		case 405:	// Send Pgain ch3
		ftoa(Pgain_ch3, tx_string);
    2c68:	60 91 0a 03 	lds	r22, 0x030A
    2c6c:	70 91 0b 03 	lds	r23, 0x030B
    2c70:	80 91 0c 03 	lds	r24, 0x030C
    2c74:	90 91 0d 03 	lds	r25, 0x030D
    2c78:	46 2d       	mov	r20, r6
    2c7a:	57 2d       	mov	r21, r7
    2c7c:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <ftoa>
		printStatus(tx_string);
    2c80:	86 2d       	mov	r24, r6
    2c82:	97 2d       	mov	r25, r7
    2c84:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2c88:	2b c0       	rjmp	.+86     	; 0x2ce0 <main+0x132e>
		break;
		
		case 406:	// Send Igain ch3
		ftoa(Igain_ch3, tx_string);
    2c8a:	60 91 fb 01 	lds	r22, 0x01FB
    2c8e:	70 91 fc 01 	lds	r23, 0x01FC
    2c92:	80 91 fd 01 	lds	r24, 0x01FD
    2c96:	90 91 fe 01 	lds	r25, 0x01FE
    2c9a:	46 2d       	mov	r20, r6
    2c9c:	57 2d       	mov	r21, r7
    2c9e:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <ftoa>
		printStatus(tx_string);
    2ca2:	86 2d       	mov	r24, r6
    2ca4:	97 2d       	mov	r25, r7
    2ca6:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2caa:	1a c0       	rjmp	.+52     	; 0x2ce0 <main+0x132e>
		break;
		
		case 407:	// Send Dgain ch3
		ftoa(Dgain_ch3, tx_string);
    2cac:	60 91 79 04 	lds	r22, 0x0479
    2cb0:	70 91 7a 04 	lds	r23, 0x047A
    2cb4:	80 91 7b 04 	lds	r24, 0x047B
    2cb8:	90 91 7c 04 	lds	r25, 0x047C
    2cbc:	46 2d       	mov	r20, r6
    2cbe:	57 2d       	mov	r21, r7
    2cc0:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <ftoa>
		printStatus(tx_string);
    2cc4:	86 2d       	mov	r24, r6
    2cc6:	97 2d       	mov	r25, r7
    2cc8:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2ccc:	09 c0       	rjmp	.+18     	; 0x2ce0 <main+0x132e>
		break;						
		
		default:
		printStatus("VRerror");
    2cce:	8c e2       	ldi	r24, 0x2C	; 44
    2cd0:	91 e0       	ldi	r25, 0x01	; 1
    2cd2:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2cd6:	04 c0       	rjmp	.+8      	; 0x2ce0 <main+0x132e>
						var = atol(requestID);
						ReadParameter(var);
					}
					else
					{
						printStatus("CRC error");
    2cd8:	8f e1       	ldi	r24, 0x1F	; 31
    2cda:	91 e0       	ldi	r25, 0x01	; 1
    2cdc:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
					}
				}
			}	
			
			pos = NULL;
			pos = strchr(rx_string, '&');
    2ce0:	66 e2       	ldi	r22, 0x26	; 38
    2ce2:	70 e0       	ldi	r23, 0x00	; 0
    2ce4:	6d 96       	adiw	r28, 0x1d	; 29
    2ce6:	8f ad       	ldd	r24, Y+63	; 0x3f
    2ce8:	6d 97       	sbiw	r28, 0x1d	; 29
    2cea:	6e 96       	adiw	r28, 0x1e	; 30
    2cec:	9f ad       	ldd	r25, Y+63	; 0x3f
    2cee:	6e 97       	sbiw	r28, 0x1e	; 30
    2cf0:	0e 94 82 23 	call	0x4704	; 0x4704 <strchr>
			if(pos != NULL)
    2cf4:	00 97       	sbiw	r24, 0x00	; 0
    2cf6:	11 f4       	brne	.+4      	; 0x2cfc <main+0x134a>
    2cf8:	0c 94 2a 0e 	jmp	0x1c54	; 0x1c54 <main+0x2a2>
    2cfc:	fc 01       	movw	r30, r24
			{
				setCmd[0] = *(pos + 1);					// Parse set command
    2cfe:	a5 e6       	ldi	r26, 0x65	; 101
    2d00:	b4 e0       	ldi	r27, 0x04	; 4
    2d02:	81 81       	ldd	r24, Z+1	; 0x01
    2d04:	8c 93       	st	X, r24
				setCmd[1] = *(pos + 2);
    2d06:	82 81       	ldd	r24, Z+2	; 0x02
    2d08:	11 96       	adiw	r26, 0x01	; 1
    2d0a:	8c 93       	st	X, r24
    2d0c:	11 97       	sbiw	r26, 0x01	; 1
				requestID[0] = *(pos + 3);				// Parse request ID
    2d0e:	83 81       	ldd	r24, Z+3	; 0x03
    2d10:	89 83       	std	Y+1, r24	; 0x01
				requestID[1] = *(pos + 4);
    2d12:	84 81       	ldd	r24, Z+4	; 0x04
    2d14:	8a 83       	std	Y+2, r24	; 0x02
				requestID[2] = *(pos + 5);				
    2d16:	85 81       	ldd	r24, Z+5	; 0x05
    2d18:	8b 83       	std	Y+3, r24	; 0x03
				
				if(strcmp(setCmd, "VS") == 0)
    2d1a:	64 e3       	ldi	r22, 0x34	; 52
    2d1c:	71 e0       	ldi	r23, 0x01	; 1
    2d1e:	cd 01       	movw	r24, r26
    2d20:	0e 94 8d 23 	call	0x471a	; 0x471a <strcmp>
    2d24:	89 2b       	or	r24, r25
    2d26:	11 f0       	breq	.+4      	; 0x2d2c <main+0x137a>
    2d28:	0c 94 24 0e 	jmp	0x1c48	; 0x1c48 <main+0x296>
				{
					pos = strchr(rx_string, 0x0D);		// Find end of message
    2d2c:	6d e0       	ldi	r22, 0x0D	; 13
    2d2e:	70 e0       	ldi	r23, 0x00	; 0
    2d30:	c5 01       	movw	r24, r10
    2d32:	0e 94 82 23 	call	0x4704	; 0x4704 <strchr>
					crc[0] = *(pos - 4);				// Parse incoming crc
    2d36:	e8 e6       	ldi	r30, 0x68	; 104
    2d38:	f4 e0       	ldi	r31, 0x04	; 4
    2d3a:	dc 01       	movw	r26, r24
    2d3c:	14 97       	sbiw	r26, 0x04	; 4
    2d3e:	2c 91       	ld	r18, X
    2d40:	20 83       	st	Z, r18
					crc[1] = *(pos - 3);
    2d42:	11 96       	adiw	r26, 0x01	; 1
    2d44:	2c 91       	ld	r18, X
    2d46:	21 83       	std	Z+1, r18	; 0x01
					crc[2] = *(pos - 2);
    2d48:	11 96       	adiw	r26, 0x01	; 1
    2d4a:	2c 91       	ld	r18, X
    2d4c:	22 83       	std	Z+2, r18	; 0x02
					crc[3] = *(pos - 1);
    2d4e:	11 96       	adiw	r26, 0x01	; 1
    2d50:	8c 91       	ld	r24, X
    2d52:	83 83       	std	Z+3, r24	; 0x03
					
					itoa(GenCrc16(rx_string, (int)strnlen(rx_string, rx_size)-5), inCrC_string, 16);
    2d54:	6e e1       	ldi	r22, 0x1E	; 30
    2d56:	70 e0       	ldi	r23, 0x00	; 0
    2d58:	c5 01       	movw	r24, r10
    2d5a:	0e 94 96 23 	call	0x472c	; 0x472c <strnlen>
    2d5e:	bc 01       	movw	r22, r24
    2d60:	65 50       	subi	r22, 0x05	; 5
    2d62:	71 09       	sbc	r23, r1
    2d64:	c5 01       	movw	r24, r10
    2d66:	0e 94 2d 02 	call	0x45a	; 0x45a <GenCrc16>
    2d6a:	40 e1       	ldi	r20, 0x10	; 16
    2d6c:	be 01       	movw	r22, r28
    2d6e:	67 5e       	subi	r22, 0xE7	; 231
    2d70:	7f 4f       	sbci	r23, 0xFF	; 255
    2d72:	0e 94 ab 23 	call	0x4756	; 0x4756 <__itoa_ncheck>
					if(CrcCompare(crc, inCrC_string) == true)
    2d76:	be 01       	movw	r22, r28
    2d78:	67 5e       	subi	r22, 0xE7	; 231
    2d7a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d7c:	88 e6       	ldi	r24, 0x68	; 104
    2d7e:	94 e0       	ldi	r25, 0x04	; 4
    2d80:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <CrcCompare>
    2d84:	88 23       	and	r24, r24
    2d86:	11 f4       	brne	.+4      	; 0x2d8c <main+0x13da>
    2d88:	0c 94 05 21 	jmp	0x420a	; 0x420a <main+0x2858>
					{
						var = atol(requestID);
						SetParameter(atol(requestID));
    2d8c:	ce 01       	movw	r24, r28
    2d8e:	01 96       	adiw	r24, 0x01	; 1
    2d90:	0e 94 51 23 	call	0x46a2	; 0x46a2 <atol>

static inline void SetParameter(int id)
{
	char param[20];
	
	switch(id)
    2d94:	6e 35       	cpi	r22, 0x5E	; 94
    2d96:	b1 e0       	ldi	r27, 0x01	; 1
    2d98:	7b 07       	cpc	r23, r27
    2d9a:	09 f4       	brne	.+2      	; 0x2d9e <main+0x13ec>
    2d9c:	01 c5       	rjmp	.+2562   	; 0x37a0 <main+0x1dee>
    2d9e:	9c f5       	brge	.+102    	; 0x2e06 <main+0x1454>
    2da0:	6a 39       	cpi	r22, 0x9A	; 154
    2da2:	71 05       	cpc	r23, r1
    2da4:	09 f4       	brne	.+2      	; 0x2da8 <main+0x13f6>
    2da6:	54 c2       	rjmp	.+1192   	; 0x3250 <main+0x189e>
    2da8:	ac f4       	brge	.+42     	; 0x2dd4 <main+0x1422>
    2daa:	67 39       	cpi	r22, 0x97	; 151
    2dac:	71 05       	cpc	r23, r1
    2dae:	09 f4       	brne	.+2      	; 0x2db2 <main+0x1400>
    2db0:	87 c0       	rjmp	.+270    	; 0x2ec0 <main+0x150e>
    2db2:	34 f4       	brge	.+12     	; 0x2dc0 <main+0x140e>
    2db4:	66 39       	cpi	r22, 0x96	; 150
    2db6:	71 05       	cpc	r23, r1
    2db8:	09 f4       	brne	.+2      	; 0x2dbc <main+0x140a>
    2dba:	59 c0       	rjmp	.+178    	; 0x2e6e <main+0x14bc>
    2dbc:	0c 94 55 20 	jmp	0x40aa	; 0x40aa <main+0x26f8>
    2dc0:	68 39       	cpi	r22, 0x98	; 152
    2dc2:	71 05       	cpc	r23, r1
    2dc4:	09 f4       	brne	.+2      	; 0x2dc8 <main+0x1416>
    2dc6:	a5 c0       	rjmp	.+330    	; 0x2f12 <main+0x1560>
    2dc8:	69 39       	cpi	r22, 0x99	; 153
    2dca:	71 05       	cpc	r23, r1
    2dcc:	09 f4       	brne	.+2      	; 0x2dd0 <main+0x141e>
    2dce:	73 c1       	rjmp	.+742    	; 0x30b6 <main+0x1704>
    2dd0:	0c 94 55 20 	jmp	0x40aa	; 0x40aa <main+0x26f8>
    2dd4:	6c 3f       	cpi	r22, 0xFC	; 252
    2dd6:	71 05       	cpc	r23, r1
    2dd8:	09 f4       	brne	.+2      	; 0x2ddc <main+0x142a>
    2dda:	99 c4       	rjmp	.+2354   	; 0x370e <main+0x1d5c>
    2ddc:	54 f4       	brge	.+20     	; 0x2df2 <main+0x1440>
    2dde:	6a 3f       	cpi	r22, 0xFA	; 250
    2de0:	71 05       	cpc	r23, r1
    2de2:	09 f4       	brne	.+2      	; 0x2de6 <main+0x1434>
    2de4:	9f c3       	rjmp	.+1854   	; 0x3524 <main+0x1b72>
    2de6:	6b 3f       	cpi	r22, 0xFB	; 251
    2de8:	71 05       	cpc	r23, r1
    2dea:	09 f4       	brne	.+2      	; 0x2dee <main+0x143c>
    2dec:	68 c4       	rjmp	.+2256   	; 0x36be <main+0x1d0c>
    2dee:	0c 94 55 20 	jmp	0x40aa	; 0x40aa <main+0x26f8>
    2df2:	6d 3f       	cpi	r22, 0xFD	; 253
    2df4:	71 05       	cpc	r23, r1
    2df6:	09 f4       	brne	.+2      	; 0x2dfa <main+0x1448>
    2df8:	a2 c4       	rjmp	.+2372   	; 0x373e <main+0x1d8c>
    2dfa:	6e 3f       	cpi	r22, 0xFE	; 254
    2dfc:	71 05       	cpc	r23, r1
    2dfe:	09 f4       	brne	.+2      	; 0x2e02 <main+0x1450>
    2e00:	b6 c4       	rjmp	.+2412   	; 0x376e <main+0x1dbc>
    2e02:	0c 94 55 20 	jmp	0x40aa	; 0x40aa <main+0x26f8>
    2e06:	62 3c       	cpi	r22, 0xC2	; 194
    2e08:	f1 e0       	ldi	r31, 0x01	; 1
    2e0a:	7f 07       	cpc	r23, r31
    2e0c:	09 f4       	brne	.+2      	; 0x2e10 <main+0x145e>
    2e0e:	7e c5       	rjmp	.+2812   	; 0x390c <main+0x1f5a>
    2e10:	94 f4       	brge	.+36     	; 0x2e36 <main+0x1484>
    2e12:	60 36       	cpi	r22, 0x60	; 96
    2e14:	31 e0       	ldi	r19, 0x01	; 1
    2e16:	73 07       	cpc	r23, r19
    2e18:	09 f4       	brne	.+2      	; 0x2e1c <main+0x146a>
    2e1a:	10 c5       	rjmp	.+2592   	; 0x383c <main+0x1e8a>
    2e1c:	0c f4       	brge	.+2      	; 0x2e20 <main+0x146e>
    2e1e:	e7 c4       	rjmp	.+2510   	; 0x37ee <main+0x1e3c>
    2e20:	61 36       	cpi	r22, 0x61	; 97
    2e22:	b1 e0       	ldi	r27, 0x01	; 1
    2e24:	7b 07       	cpc	r23, r27
    2e26:	09 f4       	brne	.+2      	; 0x2e2a <main+0x1478>
    2e28:	30 c5       	rjmp	.+2656   	; 0x388a <main+0x1ed8>
    2e2a:	62 36       	cpi	r22, 0x62	; 98
    2e2c:	71 40       	sbci	r23, 0x01	; 1
    2e2e:	09 f4       	brne	.+2      	; 0x2e32 <main+0x1480>
    2e30:	53 c5       	rjmp	.+2726   	; 0x38d8 <main+0x1f26>
    2e32:	0c 94 55 20 	jmp	0x40aa	; 0x40aa <main+0x26f8>
    2e36:	65 3c       	cpi	r22, 0xC5	; 197
    2e38:	f1 e0       	ldi	r31, 0x01	; 1
    2e3a:	7f 07       	cpc	r23, r31
    2e3c:	09 f4       	brne	.+2      	; 0x2e40 <main+0x148e>
    2e3e:	ae c5       	rjmp	.+2908   	; 0x399c <main+0x1fea>
    2e40:	5c f4       	brge	.+22     	; 0x2e58 <main+0x14a6>
    2e42:	63 3c       	cpi	r22, 0xC3	; 195
    2e44:	31 e0       	ldi	r19, 0x01	; 1
    2e46:	73 07       	cpc	r23, r19
    2e48:	09 f4       	brne	.+2      	; 0x2e4c <main+0x149a>
    2e4a:	78 c5       	rjmp	.+2800   	; 0x393c <main+0x1f8a>
    2e4c:	64 3c       	cpi	r22, 0xC4	; 196
    2e4e:	71 40       	sbci	r23, 0x01	; 1
    2e50:	09 f4       	brne	.+2      	; 0x2e54 <main+0x14a2>
    2e52:	8c c5       	rjmp	.+2840   	; 0x396c <main+0x1fba>
    2e54:	0c 94 55 20 	jmp	0x40aa	; 0x40aa <main+0x26f8>
    2e58:	66 3c       	cpi	r22, 0xC6	; 198
    2e5a:	b1 e0       	ldi	r27, 0x01	; 1
    2e5c:	7b 07       	cpc	r23, r27
    2e5e:	09 f4       	brne	.+2      	; 0x2e62 <main+0x14b0>
    2e60:	66 c6       	rjmp	.+3276   	; 0x3b2e <main+0x217c>
    2e62:	64 3f       	cpi	r22, 0xF4	; 244
    2e64:	71 40       	sbci	r23, 0x01	; 1
    2e66:	09 f4       	brne	.+2      	; 0x2e6a <main+0x14b8>
    2e68:	c8 c7       	rjmp	.+3984   	; 0x3dfa <main+0x2448>
    2e6a:	0c 94 55 20 	jmp	0x40aa	; 0x40aa <main+0x26f8>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    2e6e:	6e e1       	ldi	r22, 0x1E	; 30
    2e70:	70 e0       	ldi	r23, 0x00	; 0
    2e72:	c5 01       	movw	r24, r10
    2e74:	0e 94 96 23 	call	0x472c	; 0x472c <strnlen>
    2e78:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    2e7a:	8b 30       	cpi	r24, 0x0B	; 11
    2e7c:	91 05       	cpc	r25, r1
    2e7e:	6c f0       	brlt	.+26     	; 0x2e9a <main+0x14e8>
    2e80:	e8 ec       	ldi	r30, 0xC8	; 200
    2e82:	f4 e0       	ldi	r31, 0x04	; 4
    2e84:	de 01       	movw	r26, r28
    2e86:	aa 5b       	subi	r26, 0xBA	; 186
    2e88:	bf 4f       	sbci	r27, 0xFF	; 255
    2e8a:	82 54       	subi	r24, 0x42	; 66
    2e8c:	9b 4f       	sbci	r25, 0xFB	; 251
    2e8e:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    2e90:	91 91       	ld	r25, Z+
    2e92:	9d 93       	st	X+, r25
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    2e94:	e2 17       	cp	r30, r18
    2e96:	f3 07       	cpc	r31, r19
    2e98:	d9 f7       	brne	.-10     	; 0x2e90 <main+0x14de>
	switch(id)
	{
		// *** Channel 0 ***
		case 150:	// TempSetPoint0
		ParamParse(rx_string, param);
		TempSetPoint0 = atof(param);
    2e9a:	ce 01       	movw	r24, r28
    2e9c:	8a 5b       	subi	r24, 0xBA	; 186
    2e9e:	9f 4f       	sbci	r25, 0xFF	; 255
    2ea0:	0e 94 4e 23 	call	0x469c	; 0x469c <atof>
    2ea4:	60 93 a2 01 	sts	0x01A2, r22
    2ea8:	70 93 a3 01 	sts	0x01A3, r23
    2eac:	80 93 a4 01 	sts	0x01A4, r24
    2eb0:	90 93 a5 01 	sts	0x01A5, r25
		printStatus("");
    2eb4:	8d e3       	ldi	r24, 0x3D	; 61
    2eb6:	91 e0       	ldi	r25, 0x01	; 1
    2eb8:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2ebc:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <main+0x286>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    2ec0:	6e e1       	ldi	r22, 0x1E	; 30
    2ec2:	70 e0       	ldi	r23, 0x00	; 0
    2ec4:	c5 01       	movw	r24, r10
    2ec6:	0e 94 96 23 	call	0x472c	; 0x472c <strnlen>
    2eca:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    2ecc:	8b 30       	cpi	r24, 0x0B	; 11
    2ece:	91 05       	cpc	r25, r1
    2ed0:	6c f0       	brlt	.+26     	; 0x2eec <main+0x153a>
    2ed2:	e8 ec       	ldi	r30, 0xC8	; 200
    2ed4:	f4 e0       	ldi	r31, 0x04	; 4
    2ed6:	de 01       	movw	r26, r28
    2ed8:	aa 5b       	subi	r26, 0xBA	; 186
    2eda:	bf 4f       	sbci	r27, 0xFF	; 255
    2edc:	82 54       	subi	r24, 0x42	; 66
    2ede:	9b 4f       	sbci	r25, 0xFB	; 251
    2ee0:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    2ee2:	91 91       	ld	r25, Z+
    2ee4:	9d 93       	st	X+, r25
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    2ee6:	e2 17       	cp	r30, r18
    2ee8:	f3 07       	cpc	r31, r19
    2eea:	d9 f7       	brne	.-10     	; 0x2ee2 <main+0x1530>
		printStatus("");
		break;
		
		case 151:	// SetPgainCh0
		ParamParse(rx_string, param);
		Pgain_ch0 = atof(param);
    2eec:	ce 01       	movw	r24, r28
    2eee:	8a 5b       	subi	r24, 0xBA	; 186
    2ef0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ef2:	0e 94 4e 23 	call	0x469c	; 0x469c <atof>
    2ef6:	60 93 06 03 	sts	0x0306, r22
    2efa:	70 93 07 03 	sts	0x0307, r23
    2efe:	80 93 08 03 	sts	0x0308, r24
    2f02:	90 93 09 03 	sts	0x0309, r25
		printStatus("");
    2f06:	8d e3       	ldi	r24, 0x3D	; 61
    2f08:	91 e0       	ldi	r25, 0x01	; 1
    2f0a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2f0e:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <main+0x286>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    2f12:	6e e1       	ldi	r22, 0x1E	; 30
    2f14:	70 e0       	ldi	r23, 0x00	; 0
    2f16:	c5 01       	movw	r24, r10
    2f18:	0e 94 96 23 	call	0x472c	; 0x472c <strnlen>
    2f1c:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    2f1e:	8b 30       	cpi	r24, 0x0B	; 11
    2f20:	91 05       	cpc	r25, r1
    2f22:	6c f0       	brlt	.+26     	; 0x2f3e <main+0x158c>
    2f24:	e8 ec       	ldi	r30, 0xC8	; 200
    2f26:	f4 e0       	ldi	r31, 0x04	; 4
    2f28:	de 01       	movw	r26, r28
    2f2a:	aa 5b       	subi	r26, 0xBA	; 186
    2f2c:	bf 4f       	sbci	r27, 0xFF	; 255
    2f2e:	82 54       	subi	r24, 0x42	; 66
    2f30:	9b 4f       	sbci	r25, 0xFB	; 251
    2f32:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    2f34:	91 91       	ld	r25, Z+
    2f36:	9d 93       	st	X+, r25
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    2f38:	e2 17       	cp	r30, r18
    2f3a:	f3 07       	cpc	r31, r19
    2f3c:	d9 f7       	brne	.-10     	; 0x2f34 <main+0x1582>
		printStatus("");
		break;
		
		case 152:	// SetIgainCh0
		ParamParse(rx_string, param);
		Igain_ch0 = atof(param);
    2f3e:	ce 01       	movw	r24, r28
    2f40:	8a 5b       	subi	r24, 0xBA	; 186
    2f42:	9f 4f       	sbci	r25, 0xFF	; 255
    2f44:	0e 94 4e 23 	call	0x469c	; 0x469c <atof>
    2f48:	60 93 ba 04 	sts	0x04BA, r22
    2f4c:	70 93 bb 04 	sts	0x04BB, r23
    2f50:	80 93 bc 04 	sts	0x04BC, r24
    2f54:	90 93 bd 04 	sts	0x04BD, r25
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    2f58:	81 e2       	ldi	r24, 0x21	; 33
    2f5a:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    2f5c:	d5 01       	movw	r26, r10
    2f5e:	11 96       	adiw	r26, 0x01	; 1
    2f60:	8c 91       	ld	r24, X
    2f62:	11 97       	sbiw	r26, 0x01	; 1
    2f64:	8f 8f       	std	Y+31, r24	; 0x1f
    2f66:	12 96       	adiw	r26, 0x02	; 2
    2f68:	8c 91       	ld	r24, X
    2f6a:	12 97       	sbiw	r26, 0x02	; 2
    2f6c:	88 a3       	std	Y+32, r24	; 0x20
    2f6e:	13 96       	adiw	r26, 0x03	; 3
    2f70:	8c 91       	ld	r24, X
    2f72:	89 a3       	std	Y+33, r24	; 0x21
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    2f74:	1a a2       	std	Y+34, r1	; 0x22
    2f76:	1b a2       	std	Y+35, r1	; 0x23
    2f78:	1c a2       	std	Y+36, r1	; 0x24
    2f7a:	8e 01       	movw	r16, r28
    2f7c:	02 5e       	subi	r16, 0xE2	; 226
    2f7e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f80:	ae 01       	movw	r20, r28
    2f82:	4e 5d       	subi	r20, 0xDE	; 222
    2f84:	5f 4f       	sbci	r21, 0xFF	; 255
    2f86:	f8 01       	movw	r30, r16
    2f88:	80 e0       	ldi	r24, 0x00	; 0
    2f8a:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    2f8c:	b8 e0       	ldi	r27, 0x08	; 8
    2f8e:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    2f90:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    2f92:	29 2f       	mov	r18, r25
    2f94:	33 27       	eor	r19, r19
    2f96:	27 fd       	sbrc	r18, 7
    2f98:	3a 95       	dec	r19
    2f9a:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
    2f9c:	32 2f       	mov	r19, r18
    2f9e:	22 27       	eor	r18, r18
    2fa0:	6b 2f       	mov	r22, r27
    2fa2:	7f 2d       	mov	r23, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    2fa4:	33 23       	and	r19, r19
    2fa6:	3c f4       	brge	.+14     	; 0x2fb6 <main+0x1604>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    2fa8:	22 0f       	add	r18, r18
    2faa:	33 1f       	adc	r19, r19
    2fac:	a1 e2       	ldi	r26, 0x21	; 33
    2fae:	2a 27       	eor	r18, r26
    2fb0:	a0 e1       	ldi	r26, 0x10	; 16
    2fb2:	3a 27       	eor	r19, r26
    2fb4:	02 c0       	rjmp	.+4      	; 0x2fba <main+0x1608>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    2fb6:	22 0f       	add	r18, r18
    2fb8:	33 1f       	adc	r19, r19
    2fba:	61 50       	subi	r22, 0x01	; 1
    2fbc:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    2fbe:	91 f7       	brne	.-28     	; 0x2fa4 <main+0x15f2>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    2fc0:	98 2f       	mov	r25, r24
    2fc2:	88 27       	eor	r24, r24
    2fc4:	82 27       	eor	r24, r18
    2fc6:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    2fc8:	e4 17       	cp	r30, r20
    2fca:	f5 07       	cpc	r31, r21
    2fcc:	09 f7       	brne	.-62     	; 0x2f90 <main+0x15de>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    2fce:	7c 01       	movw	r14, r24
    2fd0:	40 e1       	ldi	r20, 0x10	; 16
    2fd2:	68 e6       	ldi	r22, 0x68	; 104
    2fd4:	74 e0       	ldi	r23, 0x04	; 4
    2fd6:	0e 94 ab 23 	call	0x4756	; 0x4756 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    2fda:	88 e6       	ldi	r24, 0x68	; 104
    2fdc:	94 e0       	ldi	r25, 0x04	; 4
    2fde:	0e 94 a1 23 	call	0x4742	; 0x4742 <strupr>
	if(crcXmodem < 0x10)
    2fe2:	b0 e1       	ldi	r27, 0x10	; 16
    2fe4:	eb 16       	cp	r14, r27
    2fe6:	f1 04       	cpc	r15, r1
    2fe8:	38 f4       	brcc	.+14     	; 0x2ff8 <main+0x1646>
	{
		tx_string[cnt+4] = crc[0];
    2fea:	80 91 68 04 	lds	r24, 0x0468
    2fee:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = '0';
    2ff0:	80 e3       	ldi	r24, 0x30	; 48
    2ff2:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = '0';
    2ff4:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';
    2ff6:	8a a3       	std	Y+34, r24	; 0x22
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    2ff8:	c7 01       	movw	r24, r14
    2ffa:	40 97       	sbiw	r24, 0x10	; 16
    2ffc:	80 3f       	cpi	r24, 0xF0	; 240
    2ffe:	91 05       	cpc	r25, r1
    3000:	48 f4       	brcc	.+18     	; 0x3014 <main+0x1662>
	{
		tx_string[cnt+4] = crc[1];
    3002:	e8 e6       	ldi	r30, 0x68	; 104
    3004:	f4 e0       	ldi	r31, 0x04	; 4
    3006:	81 81       	ldd	r24, Z+1	; 0x01
    3008:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[0];
    300a:	80 81       	ld	r24, Z
    300c:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = '0';
    300e:	80 e3       	ldi	r24, 0x30	; 48
    3010:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';		
    3012:	8a a3       	std	Y+34, r24	; 0x22
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    3014:	c7 01       	movw	r24, r14
    3016:	9a 95       	dec	r25
    3018:	81 15       	cp	r24, r1
    301a:	9f 40       	sbci	r25, 0x0F	; 15
    301c:	50 f4       	brcc	.+20     	; 0x3032 <main+0x1680>
	{
		tx_string[cnt+4] = crc[2];
    301e:	e8 e6       	ldi	r30, 0x68	; 104
    3020:	f4 e0       	ldi	r31, 0x04	; 4
    3022:	82 81       	ldd	r24, Z+2	; 0x02
    3024:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[1];
    3026:	81 81       	ldd	r24, Z+1	; 0x01
    3028:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = crc[0];
    302a:	80 81       	ld	r24, Z
    302c:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';		
    302e:	80 e3       	ldi	r24, 0x30	; 48
    3030:	8a a3       	std	Y+34, r24	; 0x22
	}
	if(crcXmodem >= 0x1000)
    3032:	e1 14       	cp	r14, r1
    3034:	f0 e1       	ldi	r31, 0x10	; 16
    3036:	ff 06       	cpc	r15, r31
    3038:	50 f0       	brcs	.+20     	; 0x304e <main+0x169c>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    303a:	e8 e6       	ldi	r30, 0x68	; 104
    303c:	f4 e0       	ldi	r31, 0x04	; 4
    303e:	80 81       	ld	r24, Z
    3040:	8a a3       	std	Y+34, r24	; 0x22
		tx_string[cnt+2] = crc[1];
    3042:	81 81       	ldd	r24, Z+1	; 0x01
    3044:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+3] = crc[2];
    3046:	82 81       	ldd	r24, Z+2	; 0x02
    3048:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+4] = crc[3];
    304a:	83 81       	ldd	r24, Z+3	; 0x03
    304c:	8d a3       	std	Y+37, r24	; 0x25
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    304e:	8d e0       	ldi	r24, 0x0D	; 13
    3050:	8e a3       	std	Y+38, r24	; 0x26
    3052:	ae 01       	movw	r20, r28
    3054:	49 5d       	subi	r20, 0xD9	; 217
    3056:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3058:	ec ed       	ldi	r30, 0xDC	; 220
    305a:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    305c:	0f 2e       	mov	r0, r31
    305e:	f1 ec       	ldi	r31, 0xC1	; 193
    3060:	cf 2e       	mov	r12, r31
    3062:	d1 2c       	mov	r13, r1
    3064:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3066:	f1 2c       	mov	r15, r1
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    3068:	d8 01       	movw	r26, r16
    306a:	2d 91       	ld	r18, X+
    306c:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    306e:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3070:	91 81       	ldd	r25, Z+1	; 0x01
    3072:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    3074:	98 13       	cpse	r25, r24
    3076:	04 c0       	rjmp	.+8      	; 0x3080 <main+0x16ce>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3078:	d6 01       	movw	r26, r12
    307a:	8c 91       	ld	r24, X
    307c:	80 62       	ori	r24, 0x20	; 32
    307e:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    3080:	30 81       	ld	r19, Z
    3082:	83 81       	ldd	r24, Z+3	; 0x03
    3084:	94 81       	ldd	r25, Z+4	; 0x04
    3086:	83 0f       	add	r24, r19
    3088:	91 1d       	adc	r25, r1
    308a:	dc 01       	movw	r26, r24
    308c:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    308e:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3090:	68 2f       	mov	r22, r24
    3092:	70 e0       	ldi	r23, 0x00	; 0
    3094:	22 81       	ldd	r18, Z+2	; 0x02
    3096:	30 e0       	ldi	r19, 0x00	; 0
    3098:	21 50       	subi	r18, 0x01	; 1
    309a:	31 09       	sbc	r19, r1
    309c:	62 17       	cp	r22, r18
    309e:	73 07       	cpc	r23, r19
    30a0:	11 f0       	breq	.+4      	; 0x30a6 <main+0x16f4>
    30a2:	8f 5f       	subi	r24, 0xFF	; 255
    30a4:	01 c0       	rjmp	.+2      	; 0x30a8 <main+0x16f6>
    30a6:	8f 2d       	mov	r24, r15
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    30a8:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    30aa:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    30ac:	04 17       	cp	r16, r20
    30ae:	15 07       	cpc	r17, r21
    30b0:	d9 f6       	brne	.-74     	; 0x3068 <main+0x16b6>
    30b2:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <main+0x286>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    30b6:	6e e1       	ldi	r22, 0x1E	; 30
    30b8:	70 e0       	ldi	r23, 0x00	; 0
    30ba:	c5 01       	movw	r24, r10
    30bc:	0e 94 96 23 	call	0x472c	; 0x472c <strnlen>
    30c0:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    30c2:	8b 30       	cpi	r24, 0x0B	; 11
    30c4:	91 05       	cpc	r25, r1
    30c6:	6c f0       	brlt	.+26     	; 0x30e2 <main+0x1730>
    30c8:	e8 ec       	ldi	r30, 0xC8	; 200
    30ca:	f4 e0       	ldi	r31, 0x04	; 4
    30cc:	de 01       	movw	r26, r28
    30ce:	aa 5b       	subi	r26, 0xBA	; 186
    30d0:	bf 4f       	sbci	r27, 0xFF	; 255
    30d2:	82 54       	subi	r24, 0x42	; 66
    30d4:	9b 4f       	sbci	r25, 0xFB	; 251
    30d6:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    30d8:	91 91       	ld	r25, Z+
    30da:	9d 93       	st	X+, r25
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    30dc:	e2 17       	cp	r30, r18
    30de:	f3 07       	cpc	r31, r19
    30e0:	d9 f7       	brne	.-10     	; 0x30d8 <main+0x1726>
		printStatus("");
		break;
		
		case 153:	// SetDgain_ch0
		ParamParse(rx_string, param);
		Dgain_ch0 = atof(param);
    30e2:	ce 01       	movw	r24, r28
    30e4:	8a 5b       	subi	r24, 0xBA	; 186
    30e6:	9f 4f       	sbci	r25, 0xFF	; 255
    30e8:	0e 94 4e 23 	call	0x469c	; 0x469c <atof>
    30ec:	60 93 03 02 	sts	0x0203, r22
    30f0:	70 93 04 02 	sts	0x0204, r23
    30f4:	80 93 05 02 	sts	0x0205, r24
    30f8:	90 93 06 02 	sts	0x0206, r25
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    30fc:	81 e2       	ldi	r24, 0x21	; 33
    30fe:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    3100:	f5 01       	movw	r30, r10
    3102:	81 81       	ldd	r24, Z+1	; 0x01
    3104:	8f 8f       	std	Y+31, r24	; 0x1f
    3106:	82 81       	ldd	r24, Z+2	; 0x02
    3108:	88 a3       	std	Y+32, r24	; 0x20
    310a:	83 81       	ldd	r24, Z+3	; 0x03
    310c:	89 a3       	std	Y+33, r24	; 0x21
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    310e:	1a a2       	std	Y+34, r1	; 0x22
    3110:	1b a2       	std	Y+35, r1	; 0x23
    3112:	1c a2       	std	Y+36, r1	; 0x24
    3114:	8e 01       	movw	r16, r28
    3116:	02 5e       	subi	r16, 0xE2	; 226
    3118:	1f 4f       	sbci	r17, 0xFF	; 255
    311a:	ae 01       	movw	r20, r28
    311c:	4e 5d       	subi	r20, 0xDE	; 222
    311e:	5f 4f       	sbci	r21, 0xFF	; 255
    3120:	f8 01       	movw	r30, r16
    3122:	80 e0       	ldi	r24, 0x00	; 0
    3124:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    3126:	b8 e0       	ldi	r27, 0x08	; 8
    3128:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    312a:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    312c:	29 2f       	mov	r18, r25
    312e:	33 27       	eor	r19, r19
    3130:	27 fd       	sbrc	r18, 7
    3132:	3a 95       	dec	r19
    3134:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
    3136:	32 2f       	mov	r19, r18
    3138:	22 27       	eor	r18, r18
    313a:	6b 2f       	mov	r22, r27
    313c:	7f 2d       	mov	r23, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    313e:	33 23       	and	r19, r19
    3140:	3c f4       	brge	.+14     	; 0x3150 <main+0x179e>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    3142:	22 0f       	add	r18, r18
    3144:	33 1f       	adc	r19, r19
    3146:	a1 e2       	ldi	r26, 0x21	; 33
    3148:	2a 27       	eor	r18, r26
    314a:	a0 e1       	ldi	r26, 0x10	; 16
    314c:	3a 27       	eor	r19, r26
    314e:	02 c0       	rjmp	.+4      	; 0x3154 <main+0x17a2>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    3150:	22 0f       	add	r18, r18
    3152:	33 1f       	adc	r19, r19
    3154:	61 50       	subi	r22, 0x01	; 1
    3156:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    3158:	91 f7       	brne	.-28     	; 0x313e <main+0x178c>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    315a:	98 2f       	mov	r25, r24
    315c:	88 27       	eor	r24, r24
    315e:	82 27       	eor	r24, r18
    3160:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    3162:	e4 17       	cp	r30, r20
    3164:	f5 07       	cpc	r31, r21
    3166:	09 f7       	brne	.-62     	; 0x312a <main+0x1778>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    3168:	7c 01       	movw	r14, r24
    316a:	40 e1       	ldi	r20, 0x10	; 16
    316c:	68 e6       	ldi	r22, 0x68	; 104
    316e:	74 e0       	ldi	r23, 0x04	; 4
    3170:	0e 94 ab 23 	call	0x4756	; 0x4756 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    3174:	88 e6       	ldi	r24, 0x68	; 104
    3176:	94 e0       	ldi	r25, 0x04	; 4
    3178:	0e 94 a1 23 	call	0x4742	; 0x4742 <strupr>
	if(crcXmodem < 0x10)
    317c:	b0 e1       	ldi	r27, 0x10	; 16
    317e:	eb 16       	cp	r14, r27
    3180:	f1 04       	cpc	r15, r1
    3182:	38 f4       	brcc	.+14     	; 0x3192 <main+0x17e0>
	{
		tx_string[cnt+4] = crc[0];
    3184:	80 91 68 04 	lds	r24, 0x0468
    3188:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = '0';
    318a:	80 e3       	ldi	r24, 0x30	; 48
    318c:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = '0';
    318e:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';
    3190:	8a a3       	std	Y+34, r24	; 0x22
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    3192:	c7 01       	movw	r24, r14
    3194:	40 97       	sbiw	r24, 0x10	; 16
    3196:	80 3f       	cpi	r24, 0xF0	; 240
    3198:	91 05       	cpc	r25, r1
    319a:	48 f4       	brcc	.+18     	; 0x31ae <main+0x17fc>
	{
		tx_string[cnt+4] = crc[1];
    319c:	e8 e6       	ldi	r30, 0x68	; 104
    319e:	f4 e0       	ldi	r31, 0x04	; 4
    31a0:	81 81       	ldd	r24, Z+1	; 0x01
    31a2:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[0];
    31a4:	80 81       	ld	r24, Z
    31a6:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = '0';
    31a8:	80 e3       	ldi	r24, 0x30	; 48
    31aa:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';		
    31ac:	8a a3       	std	Y+34, r24	; 0x22
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    31ae:	c7 01       	movw	r24, r14
    31b0:	9a 95       	dec	r25
    31b2:	81 15       	cp	r24, r1
    31b4:	9f 40       	sbci	r25, 0x0F	; 15
    31b6:	50 f4       	brcc	.+20     	; 0x31cc <main+0x181a>
	{
		tx_string[cnt+4] = crc[2];
    31b8:	e8 e6       	ldi	r30, 0x68	; 104
    31ba:	f4 e0       	ldi	r31, 0x04	; 4
    31bc:	82 81       	ldd	r24, Z+2	; 0x02
    31be:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[1];
    31c0:	81 81       	ldd	r24, Z+1	; 0x01
    31c2:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = crc[0];
    31c4:	80 81       	ld	r24, Z
    31c6:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';		
    31c8:	80 e3       	ldi	r24, 0x30	; 48
    31ca:	8a a3       	std	Y+34, r24	; 0x22
	}
	if(crcXmodem >= 0x1000)
    31cc:	e1 14       	cp	r14, r1
    31ce:	f0 e1       	ldi	r31, 0x10	; 16
    31d0:	ff 06       	cpc	r15, r31
    31d2:	50 f0       	brcs	.+20     	; 0x31e8 <main+0x1836>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    31d4:	e8 e6       	ldi	r30, 0x68	; 104
    31d6:	f4 e0       	ldi	r31, 0x04	; 4
    31d8:	80 81       	ld	r24, Z
    31da:	8a a3       	std	Y+34, r24	; 0x22
		tx_string[cnt+2] = crc[1];
    31dc:	81 81       	ldd	r24, Z+1	; 0x01
    31de:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+3] = crc[2];
    31e0:	82 81       	ldd	r24, Z+2	; 0x02
    31e2:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+4] = crc[3];
    31e4:	83 81       	ldd	r24, Z+3	; 0x03
    31e6:	8d a3       	std	Y+37, r24	; 0x25
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    31e8:	8d e0       	ldi	r24, 0x0D	; 13
    31ea:	8e a3       	std	Y+38, r24	; 0x26
    31ec:	ae 01       	movw	r20, r28
    31ee:	49 5d       	subi	r20, 0xD9	; 217
    31f0:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    31f2:	ec ed       	ldi	r30, 0xDC	; 220
    31f4:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    31f6:	0f 2e       	mov	r0, r31
    31f8:	f1 ec       	ldi	r31, 0xC1	; 193
    31fa:	cf 2e       	mov	r12, r31
    31fc:	d1 2c       	mov	r13, r1
    31fe:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3200:	f1 2c       	mov	r15, r1
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    3202:	d8 01       	movw	r26, r16
    3204:	2d 91       	ld	r18, X+
    3206:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    3208:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    320a:	91 81       	ldd	r25, Z+1	; 0x01
    320c:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    320e:	98 13       	cpse	r25, r24
    3210:	04 c0       	rjmp	.+8      	; 0x321a <main+0x1868>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3212:	d6 01       	movw	r26, r12
    3214:	8c 91       	ld	r24, X
    3216:	80 62       	ori	r24, 0x20	; 32
    3218:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    321a:	30 81       	ld	r19, Z
    321c:	83 81       	ldd	r24, Z+3	; 0x03
    321e:	94 81       	ldd	r25, Z+4	; 0x04
    3220:	83 0f       	add	r24, r19
    3222:	91 1d       	adc	r25, r1
    3224:	dc 01       	movw	r26, r24
    3226:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    3228:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    322a:	68 2f       	mov	r22, r24
    322c:	70 e0       	ldi	r23, 0x00	; 0
    322e:	22 81       	ldd	r18, Z+2	; 0x02
    3230:	30 e0       	ldi	r19, 0x00	; 0
    3232:	21 50       	subi	r18, 0x01	; 1
    3234:	31 09       	sbc	r19, r1
    3236:	62 17       	cp	r22, r18
    3238:	73 07       	cpc	r23, r19
    323a:	11 f0       	breq	.+4      	; 0x3240 <main+0x188e>
    323c:	8f 5f       	subi	r24, 0xFF	; 255
    323e:	01 c0       	rjmp	.+2      	; 0x3242 <main+0x1890>
    3240:	8f 2d       	mov	r24, r15
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    3242:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    3244:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    3246:	04 17       	cp	r16, r20
    3248:	15 07       	cpc	r17, r21
    324a:	d9 f6       	brne	.-74     	; 0x3202 <main+0x1850>
    324c:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <main+0x286>
		Dgain_ch0 = atof(param);
		printStatus("");
		break;	
		
		case 154:	// Set heater on/off ch0
		if(rx_string[10] == '1')
    3250:	f5 01       	movw	r30, r10
    3252:	82 85       	ldd	r24, Z+10	; 0x0a
    3254:	81 33       	cpi	r24, 0x31	; 49
    3256:	09 f0       	breq	.+2      	; 0x325a <main+0x18a8>
    3258:	b0 c0       	rjmp	.+352    	; 0x33ba <main+0x1a08>
		{
			heaterEnableCh0 = true;
    325a:	81 e0       	ldi	r24, 0x01	; 1
    325c:	80 93 bb 01 	sts	0x01BB, r24
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    3260:	81 e2       	ldi	r24, 0x21	; 33
    3262:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    3264:	81 81       	ldd	r24, Z+1	; 0x01
    3266:	8f 8f       	std	Y+31, r24	; 0x1f
    3268:	82 81       	ldd	r24, Z+2	; 0x02
    326a:	88 a3       	std	Y+32, r24	; 0x20
    326c:	83 81       	ldd	r24, Z+3	; 0x03
    326e:	89 a3       	std	Y+33, r24	; 0x21
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    3270:	8f e4       	ldi	r24, 0x4F	; 79
    3272:	8a a3       	std	Y+34, r24	; 0x22
    3274:	8e e4       	ldi	r24, 0x4E	; 78
    3276:	8b a3       	std	Y+35, r24	; 0x23
    3278:	1c a2       	std	Y+36, r1	; 0x24
    327a:	1d a2       	std	Y+37, r1	; 0x25
    327c:	1e a2       	std	Y+38, r1	; 0x26
    327e:	8e 01       	movw	r16, r28
    3280:	02 5e       	subi	r16, 0xE2	; 226
    3282:	1f 4f       	sbci	r17, 0xFF	; 255
    3284:	ae 01       	movw	r20, r28
    3286:	4c 5d       	subi	r20, 0xDC	; 220
    3288:	5f 4f       	sbci	r21, 0xFF	; 255
    328a:	f8 01       	movw	r30, r16
    328c:	80 e0       	ldi	r24, 0x00	; 0
    328e:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    3290:	b8 e0       	ldi	r27, 0x08	; 8
    3292:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    3294:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    3296:	29 2f       	mov	r18, r25
    3298:	33 27       	eor	r19, r19
    329a:	27 fd       	sbrc	r18, 7
    329c:	3a 95       	dec	r19
    329e:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
    32a0:	32 2f       	mov	r19, r18
    32a2:	22 27       	eor	r18, r18
    32a4:	6b 2f       	mov	r22, r27
    32a6:	7f 2d       	mov	r23, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    32a8:	33 23       	and	r19, r19
    32aa:	3c f4       	brge	.+14     	; 0x32ba <main+0x1908>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    32ac:	22 0f       	add	r18, r18
    32ae:	33 1f       	adc	r19, r19
    32b0:	a1 e2       	ldi	r26, 0x21	; 33
    32b2:	2a 27       	eor	r18, r26
    32b4:	a0 e1       	ldi	r26, 0x10	; 16
    32b6:	3a 27       	eor	r19, r26
    32b8:	02 c0       	rjmp	.+4      	; 0x32be <main+0x190c>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    32ba:	22 0f       	add	r18, r18
    32bc:	33 1f       	adc	r19, r19
    32be:	61 50       	subi	r22, 0x01	; 1
    32c0:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    32c2:	91 f7       	brne	.-28     	; 0x32a8 <main+0x18f6>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    32c4:	98 2f       	mov	r25, r24
    32c6:	88 27       	eor	r24, r24
    32c8:	82 27       	eor	r24, r18
    32ca:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    32cc:	e4 17       	cp	r30, r20
    32ce:	f5 07       	cpc	r31, r21
    32d0:	09 f7       	brne	.-62     	; 0x3294 <main+0x18e2>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    32d2:	7c 01       	movw	r14, r24
    32d4:	40 e1       	ldi	r20, 0x10	; 16
    32d6:	68 e6       	ldi	r22, 0x68	; 104
    32d8:	74 e0       	ldi	r23, 0x04	; 4
    32da:	0e 94 ab 23 	call	0x4756	; 0x4756 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    32de:	88 e6       	ldi	r24, 0x68	; 104
    32e0:	94 e0       	ldi	r25, 0x04	; 4
    32e2:	0e 94 a1 23 	call	0x4742	; 0x4742 <strupr>
	if(crcXmodem < 0x10)
    32e6:	b0 e1       	ldi	r27, 0x10	; 16
    32e8:	eb 16       	cp	r14, r27
    32ea:	f1 04       	cpc	r15, r1
    32ec:	38 f4       	brcc	.+14     	; 0x32fc <main+0x194a>
	{
		tx_string[cnt+4] = crc[0];
    32ee:	80 91 68 04 	lds	r24, 0x0468
    32f2:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+3] = '0';
    32f4:	80 e3       	ldi	r24, 0x30	; 48
    32f6:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+2] = '0';
    32f8:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+1] = '0';
    32fa:	8c a3       	std	Y+36, r24	; 0x24
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    32fc:	c7 01       	movw	r24, r14
    32fe:	40 97       	sbiw	r24, 0x10	; 16
    3300:	80 3f       	cpi	r24, 0xF0	; 240
    3302:	91 05       	cpc	r25, r1
    3304:	48 f4       	brcc	.+18     	; 0x3318 <main+0x1966>
	{
		tx_string[cnt+4] = crc[1];
    3306:	e8 e6       	ldi	r30, 0x68	; 104
    3308:	f4 e0       	ldi	r31, 0x04	; 4
    330a:	81 81       	ldd	r24, Z+1	; 0x01
    330c:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+3] = crc[0];
    330e:	80 81       	ld	r24, Z
    3310:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+2] = '0';
    3312:	80 e3       	ldi	r24, 0x30	; 48
    3314:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+1] = '0';		
    3316:	8c a3       	std	Y+36, r24	; 0x24
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    3318:	c7 01       	movw	r24, r14
    331a:	9a 95       	dec	r25
    331c:	81 15       	cp	r24, r1
    331e:	9f 40       	sbci	r25, 0x0F	; 15
    3320:	50 f4       	brcc	.+20     	; 0x3336 <main+0x1984>
	{
		tx_string[cnt+4] = crc[2];
    3322:	e8 e6       	ldi	r30, 0x68	; 104
    3324:	f4 e0       	ldi	r31, 0x04	; 4
    3326:	82 81       	ldd	r24, Z+2	; 0x02
    3328:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+3] = crc[1];
    332a:	81 81       	ldd	r24, Z+1	; 0x01
    332c:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+2] = crc[0];
    332e:	80 81       	ld	r24, Z
    3330:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+1] = '0';		
    3332:	80 e3       	ldi	r24, 0x30	; 48
    3334:	8c a3       	std	Y+36, r24	; 0x24
	}
	if(crcXmodem >= 0x1000)
    3336:	e1 14       	cp	r14, r1
    3338:	f0 e1       	ldi	r31, 0x10	; 16
    333a:	ff 06       	cpc	r15, r31
    333c:	50 f0       	brcs	.+20     	; 0x3352 <main+0x19a0>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    333e:	e8 e6       	ldi	r30, 0x68	; 104
    3340:	f4 e0       	ldi	r31, 0x04	; 4
    3342:	80 81       	ld	r24, Z
    3344:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = crc[1];
    3346:	81 81       	ldd	r24, Z+1	; 0x01
    3348:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[2];
    334a:	82 81       	ldd	r24, Z+2	; 0x02
    334c:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+4] = crc[3];
    334e:	83 81       	ldd	r24, Z+3	; 0x03
    3350:	8f a3       	std	Y+39, r24	; 0x27
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    3352:	8d e0       	ldi	r24, 0x0D	; 13
    3354:	88 a7       	std	Y+40, r24	; 0x28
    3356:	ae 01       	movw	r20, r28
    3358:	47 5d       	subi	r20, 0xD7	; 215
    335a:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    335c:	ec ed       	ldi	r30, 0xDC	; 220
    335e:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3360:	0f 2e       	mov	r0, r31
    3362:	f1 ec       	ldi	r31, 0xC1	; 193
    3364:	cf 2e       	mov	r12, r31
    3366:	d1 2c       	mov	r13, r1
    3368:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    336a:	f1 2c       	mov	r15, r1
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    336c:	d8 01       	movw	r26, r16
    336e:	2d 91       	ld	r18, X+
    3370:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    3372:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3374:	91 81       	ldd	r25, Z+1	; 0x01
    3376:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    3378:	98 13       	cpse	r25, r24
    337a:	04 c0       	rjmp	.+8      	; 0x3384 <main+0x19d2>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    337c:	d6 01       	movw	r26, r12
    337e:	8c 91       	ld	r24, X
    3380:	80 62       	ori	r24, 0x20	; 32
    3382:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    3384:	30 81       	ld	r19, Z
    3386:	83 81       	ldd	r24, Z+3	; 0x03
    3388:	94 81       	ldd	r25, Z+4	; 0x04
    338a:	83 0f       	add	r24, r19
    338c:	91 1d       	adc	r25, r1
    338e:	dc 01       	movw	r26, r24
    3390:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    3392:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3394:	68 2f       	mov	r22, r24
    3396:	70 e0       	ldi	r23, 0x00	; 0
    3398:	22 81       	ldd	r18, Z+2	; 0x02
    339a:	30 e0       	ldi	r19, 0x00	; 0
    339c:	21 50       	subi	r18, 0x01	; 1
    339e:	31 09       	sbc	r19, r1
    33a0:	62 17       	cp	r22, r18
    33a2:	73 07       	cpc	r23, r19
    33a4:	11 f0       	breq	.+4      	; 0x33aa <main+0x19f8>
    33a6:	8f 5f       	subi	r24, 0xFF	; 255
    33a8:	01 c0       	rjmp	.+2      	; 0x33ac <main+0x19fa>
    33aa:	8f 2d       	mov	r24, r15
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    33ac:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    33ae:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    33b0:	04 17       	cp	r16, r20
    33b2:	15 07       	cpc	r17, r21
    33b4:	d9 f6       	brne	.-74     	; 0x336c <main+0x19ba>
    33b6:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <main+0x286>
		if(rx_string[10] == '1')
		{
			heaterEnableCh0 = true;
			printStatus("ON");
		}
		else if(rx_string[10] == '0')
    33ba:	80 33       	cpi	r24, 0x30	; 48
    33bc:	11 f0       	breq	.+4      	; 0x33c2 <main+0x1a10>
    33be:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <main+0x286>
		{
			heaterEnableCh0 = false;
    33c2:	10 92 bb 01 	sts	0x01BB, r1
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    33c6:	81 e2       	ldi	r24, 0x21	; 33
    33c8:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    33ca:	f5 01       	movw	r30, r10
    33cc:	81 81       	ldd	r24, Z+1	; 0x01
    33ce:	8f 8f       	std	Y+31, r24	; 0x1f
    33d0:	82 81       	ldd	r24, Z+2	; 0x02
    33d2:	88 a3       	std	Y+32, r24	; 0x20
    33d4:	83 81       	ldd	r24, Z+3	; 0x03
    33d6:	89 a3       	std	Y+33, r24	; 0x21
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    33d8:	8f e4       	ldi	r24, 0x4F	; 79
    33da:	8a a3       	std	Y+34, r24	; 0x22
    33dc:	86 e4       	ldi	r24, 0x46	; 70
    33de:	8b a3       	std	Y+35, r24	; 0x23
    33e0:	8c a3       	std	Y+36, r24	; 0x24
    33e2:	1d a2       	std	Y+37, r1	; 0x25
    33e4:	1e a2       	std	Y+38, r1	; 0x26
    33e6:	1f a2       	std	Y+39, r1	; 0x27
    33e8:	8e 01       	movw	r16, r28
    33ea:	02 5e       	subi	r16, 0xE2	; 226
    33ec:	1f 4f       	sbci	r17, 0xFF	; 255
    33ee:	ae 01       	movw	r20, r28
    33f0:	4b 5d       	subi	r20, 0xDB	; 219
    33f2:	5f 4f       	sbci	r21, 0xFF	; 255
    33f4:	f8 01       	movw	r30, r16
    33f6:	80 e0       	ldi	r24, 0x00	; 0
    33f8:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    33fa:	b8 e0       	ldi	r27, 0x08	; 8
    33fc:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    33fe:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    3400:	29 2f       	mov	r18, r25
    3402:	33 27       	eor	r19, r19
    3404:	27 fd       	sbrc	r18, 7
    3406:	3a 95       	dec	r19
    3408:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
    340a:	32 2f       	mov	r19, r18
    340c:	22 27       	eor	r18, r18
    340e:	6b 2f       	mov	r22, r27
    3410:	7f 2d       	mov	r23, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    3412:	33 23       	and	r19, r19
    3414:	3c f4       	brge	.+14     	; 0x3424 <main+0x1a72>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    3416:	22 0f       	add	r18, r18
    3418:	33 1f       	adc	r19, r19
    341a:	a1 e2       	ldi	r26, 0x21	; 33
    341c:	2a 27       	eor	r18, r26
    341e:	a0 e1       	ldi	r26, 0x10	; 16
    3420:	3a 27       	eor	r19, r26
    3422:	02 c0       	rjmp	.+4      	; 0x3428 <main+0x1a76>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    3424:	22 0f       	add	r18, r18
    3426:	33 1f       	adc	r19, r19
    3428:	61 50       	subi	r22, 0x01	; 1
    342a:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    342c:	91 f7       	brne	.-28     	; 0x3412 <main+0x1a60>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    342e:	98 2f       	mov	r25, r24
    3430:	88 27       	eor	r24, r24
    3432:	82 27       	eor	r24, r18
    3434:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    3436:	e4 17       	cp	r30, r20
    3438:	f5 07       	cpc	r31, r21
    343a:	09 f7       	brne	.-62     	; 0x33fe <main+0x1a4c>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    343c:	7c 01       	movw	r14, r24
    343e:	40 e1       	ldi	r20, 0x10	; 16
    3440:	68 e6       	ldi	r22, 0x68	; 104
    3442:	74 e0       	ldi	r23, 0x04	; 4
    3444:	0e 94 ab 23 	call	0x4756	; 0x4756 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    3448:	88 e6       	ldi	r24, 0x68	; 104
    344a:	94 e0       	ldi	r25, 0x04	; 4
    344c:	0e 94 a1 23 	call	0x4742	; 0x4742 <strupr>
	if(crcXmodem < 0x10)
    3450:	b0 e1       	ldi	r27, 0x10	; 16
    3452:	eb 16       	cp	r14, r27
    3454:	f1 04       	cpc	r15, r1
    3456:	38 f4       	brcc	.+14     	; 0x3466 <main+0x1ab4>
	{
		tx_string[cnt+4] = crc[0];
    3458:	80 91 68 04 	lds	r24, 0x0468
    345c:	88 a7       	std	Y+40, r24	; 0x28
		tx_string[cnt+3] = '0';
    345e:	80 e3       	ldi	r24, 0x30	; 48
    3460:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+2] = '0';
    3462:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+1] = '0';
    3464:	8d a3       	std	Y+37, r24	; 0x25
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    3466:	c7 01       	movw	r24, r14
    3468:	40 97       	sbiw	r24, 0x10	; 16
    346a:	80 3f       	cpi	r24, 0xF0	; 240
    346c:	91 05       	cpc	r25, r1
    346e:	48 f4       	brcc	.+18     	; 0x3482 <main+0x1ad0>
	{
		tx_string[cnt+4] = crc[1];
    3470:	e8 e6       	ldi	r30, 0x68	; 104
    3472:	f4 e0       	ldi	r31, 0x04	; 4
    3474:	81 81       	ldd	r24, Z+1	; 0x01
    3476:	88 a7       	std	Y+40, r24	; 0x28
		tx_string[cnt+3] = crc[0];
    3478:	80 81       	ld	r24, Z
    347a:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+2] = '0';
    347c:	80 e3       	ldi	r24, 0x30	; 48
    347e:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+1] = '0';		
    3480:	8d a3       	std	Y+37, r24	; 0x25
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    3482:	c7 01       	movw	r24, r14
    3484:	9a 95       	dec	r25
    3486:	81 15       	cp	r24, r1
    3488:	9f 40       	sbci	r25, 0x0F	; 15
    348a:	50 f4       	brcc	.+20     	; 0x34a0 <main+0x1aee>
	{
		tx_string[cnt+4] = crc[2];
    348c:	e8 e6       	ldi	r30, 0x68	; 104
    348e:	f4 e0       	ldi	r31, 0x04	; 4
    3490:	82 81       	ldd	r24, Z+2	; 0x02
    3492:	88 a7       	std	Y+40, r24	; 0x28
		tx_string[cnt+3] = crc[1];
    3494:	81 81       	ldd	r24, Z+1	; 0x01
    3496:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+2] = crc[0];
    3498:	80 81       	ld	r24, Z
    349a:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+1] = '0';		
    349c:	80 e3       	ldi	r24, 0x30	; 48
    349e:	8d a3       	std	Y+37, r24	; 0x25
	}
	if(crcXmodem >= 0x1000)
    34a0:	e1 14       	cp	r14, r1
    34a2:	f0 e1       	ldi	r31, 0x10	; 16
    34a4:	ff 06       	cpc	r15, r31
    34a6:	50 f0       	brcs	.+20     	; 0x34bc <main+0x1b0a>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    34a8:	e8 e6       	ldi	r30, 0x68	; 104
    34aa:	f4 e0       	ldi	r31, 0x04	; 4
    34ac:	80 81       	ld	r24, Z
    34ae:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+2] = crc[1];
    34b0:	81 81       	ldd	r24, Z+1	; 0x01
    34b2:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+3] = crc[2];
    34b4:	82 81       	ldd	r24, Z+2	; 0x02
    34b6:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+4] = crc[3];
    34b8:	83 81       	ldd	r24, Z+3	; 0x03
    34ba:	88 a7       	std	Y+40, r24	; 0x28
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    34bc:	8d e0       	ldi	r24, 0x0D	; 13
    34be:	89 a7       	std	Y+41, r24	; 0x29
    34c0:	ae 01       	movw	r20, r28
    34c2:	46 5d       	subi	r20, 0xD6	; 214
    34c4:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    34c6:	ec ed       	ldi	r30, 0xDC	; 220
    34c8:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    34ca:	0f 2e       	mov	r0, r31
    34cc:	f1 ec       	ldi	r31, 0xC1	; 193
    34ce:	cf 2e       	mov	r12, r31
    34d0:	d1 2c       	mov	r13, r1
    34d2:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    34d4:	f1 2c       	mov	r15, r1
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    34d6:	d8 01       	movw	r26, r16
    34d8:	2d 91       	ld	r18, X+
    34da:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    34dc:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    34de:	91 81       	ldd	r25, Z+1	; 0x01
    34e0:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    34e2:	98 13       	cpse	r25, r24
    34e4:	04 c0       	rjmp	.+8      	; 0x34ee <main+0x1b3c>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    34e6:	d6 01       	movw	r26, r12
    34e8:	8c 91       	ld	r24, X
    34ea:	80 62       	ori	r24, 0x20	; 32
    34ec:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    34ee:	30 81       	ld	r19, Z
    34f0:	83 81       	ldd	r24, Z+3	; 0x03
    34f2:	94 81       	ldd	r25, Z+4	; 0x04
    34f4:	83 0f       	add	r24, r19
    34f6:	91 1d       	adc	r25, r1
    34f8:	dc 01       	movw	r26, r24
    34fa:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    34fc:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    34fe:	68 2f       	mov	r22, r24
    3500:	70 e0       	ldi	r23, 0x00	; 0
    3502:	22 81       	ldd	r18, Z+2	; 0x02
    3504:	30 e0       	ldi	r19, 0x00	; 0
    3506:	21 50       	subi	r18, 0x01	; 1
    3508:	31 09       	sbc	r19, r1
    350a:	62 17       	cp	r22, r18
    350c:	73 07       	cpc	r23, r19
    350e:	11 f0       	breq	.+4      	; 0x3514 <main+0x1b62>
    3510:	8f 5f       	subi	r24, 0xFF	; 255
    3512:	01 c0       	rjmp	.+2      	; 0x3516 <main+0x1b64>
    3514:	8f 2d       	mov	r24, r15
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    3516:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    3518:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    351a:	04 17       	cp	r16, r20
    351c:	15 07       	cpc	r17, r21
    351e:	d9 f6       	brne	.-74     	; 0x34d6 <main+0x1b24>
    3520:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <main+0x286>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    3524:	6e e1       	ldi	r22, 0x1E	; 30
    3526:	70 e0       	ldi	r23, 0x00	; 0
    3528:	c5 01       	movw	r24, r10
    352a:	0e 94 96 23 	call	0x472c	; 0x472c <strnlen>
    352e:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    3530:	8b 30       	cpi	r24, 0x0B	; 11
    3532:	91 05       	cpc	r25, r1
    3534:	6c f0       	brlt	.+26     	; 0x3550 <main+0x1b9e>
    3536:	e8 ec       	ldi	r30, 0xC8	; 200
    3538:	f4 e0       	ldi	r31, 0x04	; 4
    353a:	de 01       	movw	r26, r28
    353c:	aa 5b       	subi	r26, 0xBA	; 186
    353e:	bf 4f       	sbci	r27, 0xFF	; 255
    3540:	82 54       	subi	r24, 0x42	; 66
    3542:	9b 4f       	sbci	r25, 0xFB	; 251
    3544:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    3546:	91 91       	ld	r25, Z+
    3548:	9d 93       	st	X+, r25
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    354a:	e2 17       	cp	r30, r18
    354c:	f3 07       	cpc	r31, r19
    354e:	d9 f7       	brne	.-10     	; 0x3546 <main+0x1b94>
		break;	
		
		// *** Channel 1 ***
		case 250:	// TempSetPoint1
		ParamParse(rx_string, param);
		TempSetPoint1 = atof(param);
    3550:	ce 01       	movw	r24, r28
    3552:	8a 5b       	subi	r24, 0xBA	; 186
    3554:	9f 4f       	sbci	r25, 0xFF	; 255
    3556:	0e 94 4e 23 	call	0x469c	; 0x469c <atof>
    355a:	60 93 8a 01 	sts	0x018A, r22
    355e:	70 93 8b 01 	sts	0x018B, r23
    3562:	80 93 8c 01 	sts	0x018C, r24
    3566:	90 93 8d 01 	sts	0x018D, r25
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    356a:	81 e2       	ldi	r24, 0x21	; 33
    356c:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    356e:	f5 01       	movw	r30, r10
    3570:	81 81       	ldd	r24, Z+1	; 0x01
    3572:	8f 8f       	std	Y+31, r24	; 0x1f
    3574:	82 81       	ldd	r24, Z+2	; 0x02
    3576:	88 a3       	std	Y+32, r24	; 0x20
    3578:	83 81       	ldd	r24, Z+3	; 0x03
    357a:	89 a3       	std	Y+33, r24	; 0x21
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    357c:	1a a2       	std	Y+34, r1	; 0x22
    357e:	1b a2       	std	Y+35, r1	; 0x23
    3580:	1c a2       	std	Y+36, r1	; 0x24
    3582:	8e 01       	movw	r16, r28
    3584:	02 5e       	subi	r16, 0xE2	; 226
    3586:	1f 4f       	sbci	r17, 0xFF	; 255
    3588:	ae 01       	movw	r20, r28
    358a:	4e 5d       	subi	r20, 0xDE	; 222
    358c:	5f 4f       	sbci	r21, 0xFF	; 255
    358e:	f8 01       	movw	r30, r16
    3590:	80 e0       	ldi	r24, 0x00	; 0
    3592:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    3594:	b8 e0       	ldi	r27, 0x08	; 8
    3596:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    3598:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    359a:	29 2f       	mov	r18, r25
    359c:	33 27       	eor	r19, r19
    359e:	27 fd       	sbrc	r18, 7
    35a0:	3a 95       	dec	r19
    35a2:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
    35a4:	32 2f       	mov	r19, r18
    35a6:	22 27       	eor	r18, r18
    35a8:	6b 2f       	mov	r22, r27
    35aa:	7f 2d       	mov	r23, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    35ac:	33 23       	and	r19, r19
    35ae:	3c f4       	brge	.+14     	; 0x35be <main+0x1c0c>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    35b0:	22 0f       	add	r18, r18
    35b2:	33 1f       	adc	r19, r19
    35b4:	a1 e2       	ldi	r26, 0x21	; 33
    35b6:	2a 27       	eor	r18, r26
    35b8:	a0 e1       	ldi	r26, 0x10	; 16
    35ba:	3a 27       	eor	r19, r26
    35bc:	02 c0       	rjmp	.+4      	; 0x35c2 <main+0x1c10>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    35be:	22 0f       	add	r18, r18
    35c0:	33 1f       	adc	r19, r19
    35c2:	61 50       	subi	r22, 0x01	; 1
    35c4:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    35c6:	91 f7       	brne	.-28     	; 0x35ac <main+0x1bfa>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    35c8:	98 2f       	mov	r25, r24
    35ca:	88 27       	eor	r24, r24
    35cc:	82 27       	eor	r24, r18
    35ce:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    35d0:	e4 17       	cp	r30, r20
    35d2:	f5 07       	cpc	r31, r21
    35d4:	09 f7       	brne	.-62     	; 0x3598 <main+0x1be6>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    35d6:	7c 01       	movw	r14, r24
    35d8:	40 e1       	ldi	r20, 0x10	; 16
    35da:	68 e6       	ldi	r22, 0x68	; 104
    35dc:	74 e0       	ldi	r23, 0x04	; 4
    35de:	0e 94 ab 23 	call	0x4756	; 0x4756 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    35e2:	88 e6       	ldi	r24, 0x68	; 104
    35e4:	94 e0       	ldi	r25, 0x04	; 4
    35e6:	0e 94 a1 23 	call	0x4742	; 0x4742 <strupr>
	if(crcXmodem < 0x10)
    35ea:	b0 e1       	ldi	r27, 0x10	; 16
    35ec:	eb 16       	cp	r14, r27
    35ee:	f1 04       	cpc	r15, r1
    35f0:	38 f4       	brcc	.+14     	; 0x3600 <main+0x1c4e>
	{
		tx_string[cnt+4] = crc[0];
    35f2:	80 91 68 04 	lds	r24, 0x0468
    35f6:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = '0';
    35f8:	80 e3       	ldi	r24, 0x30	; 48
    35fa:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = '0';
    35fc:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';
    35fe:	8a a3       	std	Y+34, r24	; 0x22
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    3600:	c7 01       	movw	r24, r14
    3602:	40 97       	sbiw	r24, 0x10	; 16
    3604:	80 3f       	cpi	r24, 0xF0	; 240
    3606:	91 05       	cpc	r25, r1
    3608:	48 f4       	brcc	.+18     	; 0x361c <main+0x1c6a>
	{
		tx_string[cnt+4] = crc[1];
    360a:	e8 e6       	ldi	r30, 0x68	; 104
    360c:	f4 e0       	ldi	r31, 0x04	; 4
    360e:	81 81       	ldd	r24, Z+1	; 0x01
    3610:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[0];
    3612:	80 81       	ld	r24, Z
    3614:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = '0';
    3616:	80 e3       	ldi	r24, 0x30	; 48
    3618:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';		
    361a:	8a a3       	std	Y+34, r24	; 0x22
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    361c:	c7 01       	movw	r24, r14
    361e:	9a 95       	dec	r25
    3620:	81 15       	cp	r24, r1
    3622:	9f 40       	sbci	r25, 0x0F	; 15
    3624:	50 f4       	brcc	.+20     	; 0x363a <main+0x1c88>
	{
		tx_string[cnt+4] = crc[2];
    3626:	e8 e6       	ldi	r30, 0x68	; 104
    3628:	f4 e0       	ldi	r31, 0x04	; 4
    362a:	82 81       	ldd	r24, Z+2	; 0x02
    362c:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[1];
    362e:	81 81       	ldd	r24, Z+1	; 0x01
    3630:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = crc[0];
    3632:	80 81       	ld	r24, Z
    3634:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';		
    3636:	80 e3       	ldi	r24, 0x30	; 48
    3638:	8a a3       	std	Y+34, r24	; 0x22
	}
	if(crcXmodem >= 0x1000)
    363a:	e1 14       	cp	r14, r1
    363c:	f0 e1       	ldi	r31, 0x10	; 16
    363e:	ff 06       	cpc	r15, r31
    3640:	50 f0       	brcs	.+20     	; 0x3656 <main+0x1ca4>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    3642:	e8 e6       	ldi	r30, 0x68	; 104
    3644:	f4 e0       	ldi	r31, 0x04	; 4
    3646:	80 81       	ld	r24, Z
    3648:	8a a3       	std	Y+34, r24	; 0x22
		tx_string[cnt+2] = crc[1];
    364a:	81 81       	ldd	r24, Z+1	; 0x01
    364c:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+3] = crc[2];
    364e:	82 81       	ldd	r24, Z+2	; 0x02
    3650:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+4] = crc[3];
    3652:	83 81       	ldd	r24, Z+3	; 0x03
    3654:	8d a3       	std	Y+37, r24	; 0x25
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    3656:	8d e0       	ldi	r24, 0x0D	; 13
    3658:	8e a3       	std	Y+38, r24	; 0x26
    365a:	ae 01       	movw	r20, r28
    365c:	49 5d       	subi	r20, 0xD9	; 217
    365e:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3660:	ec ed       	ldi	r30, 0xDC	; 220
    3662:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3664:	0f 2e       	mov	r0, r31
    3666:	f1 ec       	ldi	r31, 0xC1	; 193
    3668:	cf 2e       	mov	r12, r31
    366a:	d1 2c       	mov	r13, r1
    366c:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    366e:	f1 2c       	mov	r15, r1
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    3670:	d8 01       	movw	r26, r16
    3672:	2d 91       	ld	r18, X+
    3674:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    3676:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3678:	91 81       	ldd	r25, Z+1	; 0x01
    367a:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    367c:	98 13       	cpse	r25, r24
    367e:	04 c0       	rjmp	.+8      	; 0x3688 <main+0x1cd6>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3680:	d6 01       	movw	r26, r12
    3682:	8c 91       	ld	r24, X
    3684:	80 62       	ori	r24, 0x20	; 32
    3686:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    3688:	30 81       	ld	r19, Z
    368a:	83 81       	ldd	r24, Z+3	; 0x03
    368c:	94 81       	ldd	r25, Z+4	; 0x04
    368e:	83 0f       	add	r24, r19
    3690:	91 1d       	adc	r25, r1
    3692:	dc 01       	movw	r26, r24
    3694:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    3696:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3698:	68 2f       	mov	r22, r24
    369a:	70 e0       	ldi	r23, 0x00	; 0
    369c:	22 81       	ldd	r18, Z+2	; 0x02
    369e:	30 e0       	ldi	r19, 0x00	; 0
    36a0:	21 50       	subi	r18, 0x01	; 1
    36a2:	31 09       	sbc	r19, r1
    36a4:	62 17       	cp	r22, r18
    36a6:	73 07       	cpc	r23, r19
    36a8:	11 f0       	breq	.+4      	; 0x36ae <main+0x1cfc>
    36aa:	8f 5f       	subi	r24, 0xFF	; 255
    36ac:	01 c0       	rjmp	.+2      	; 0x36b0 <main+0x1cfe>
    36ae:	8f 2d       	mov	r24, r15
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    36b0:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    36b2:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    36b4:	04 17       	cp	r16, r20
    36b6:	15 07       	cpc	r17, r21
    36b8:	d9 f6       	brne	.-74     	; 0x3670 <main+0x1cbe>
    36ba:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <main+0x286>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    36be:	6e e1       	ldi	r22, 0x1E	; 30
    36c0:	70 e0       	ldi	r23, 0x00	; 0
    36c2:	c5 01       	movw	r24, r10
    36c4:	0e 94 96 23 	call	0x472c	; 0x472c <strnlen>
    36c8:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    36ca:	8b 30       	cpi	r24, 0x0B	; 11
    36cc:	91 05       	cpc	r25, r1
    36ce:	6c f0       	brlt	.+26     	; 0x36ea <main+0x1d38>
    36d0:	e8 ec       	ldi	r30, 0xC8	; 200
    36d2:	f4 e0       	ldi	r31, 0x04	; 4
    36d4:	de 01       	movw	r26, r28
    36d6:	aa 5b       	subi	r26, 0xBA	; 186
    36d8:	bf 4f       	sbci	r27, 0xFF	; 255
    36da:	82 54       	subi	r24, 0x42	; 66
    36dc:	9b 4f       	sbci	r25, 0xFB	; 251
    36de:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    36e0:	91 91       	ld	r25, Z+
    36e2:	9d 93       	st	X+, r25
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    36e4:	e2 17       	cp	r30, r18
    36e6:	f3 07       	cpc	r31, r19
    36e8:	d9 f7       	brne	.-10     	; 0x36e0 <main+0x1d2e>
		printStatus("");
		break;
		
		case 251:	// SetPgainCh1
		ParamParse(rx_string, param);
		Pgain_ch1 = atof(param);
    36ea:	ce 01       	movw	r24, r28
    36ec:	8a 5b       	subi	r24, 0xBA	; 186
    36ee:	9f 4f       	sbci	r25, 0xFF	; 255
    36f0:	d5 d7       	rcall	.+4010   	; 0x469c <atof>
    36f2:	60 93 71 04 	sts	0x0471, r22
    36f6:	70 93 72 04 	sts	0x0472, r23
    36fa:	80 93 73 04 	sts	0x0473, r24
    36fe:	90 93 74 04 	sts	0x0474, r25
		printStatus("");
    3702:	8d e3       	ldi	r24, 0x3D	; 61
    3704:	91 e0       	ldi	r25, 0x01	; 1
    3706:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    370a:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <main+0x286>
		break;
		
		case 252:	// SetIgainCh1
		ParamParse(rx_string, param);
    370e:	be 01       	movw	r22, r28
    3710:	6a 5b       	subi	r22, 0xBA	; 186
    3712:	7f 4f       	sbci	r23, 0xFF	; 255
    3714:	c5 01       	movw	r24, r10
    3716:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <ParamParse>
		Igain_ch1 = atof(param);
    371a:	ce 01       	movw	r24, r28
    371c:	8a 5b       	subi	r24, 0xBA	; 186
    371e:	9f 4f       	sbci	r25, 0xFF	; 255
    3720:	bd d7       	rcall	.+3962   	; 0x469c <atof>
    3722:	60 93 c6 01 	sts	0x01C6, r22
    3726:	70 93 c7 01 	sts	0x01C7, r23
    372a:	80 93 c8 01 	sts	0x01C8, r24
    372e:	90 93 c9 01 	sts	0x01C9, r25
		printStatus("");
    3732:	8d e3       	ldi	r24, 0x3D	; 61
    3734:	91 e0       	ldi	r25, 0x01	; 1
    3736:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    373a:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <main+0x286>
		break;
		
		case 253:	// SetDgain_ch1
		ParamParse(rx_string, param);
    373e:	be 01       	movw	r22, r28
    3740:	6a 5b       	subi	r22, 0xBA	; 186
    3742:	7f 4f       	sbci	r23, 0xFF	; 255
    3744:	c5 01       	movw	r24, r10
    3746:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <ParamParse>
		Dgain_ch1 = atof(param);
    374a:	ce 01       	movw	r24, r28
    374c:	8a 5b       	subi	r24, 0xBA	; 186
    374e:	9f 4f       	sbci	r25, 0xFF	; 255
    3750:	a5 d7       	rcall	.+3914   	; 0x469c <atof>
    3752:	60 93 b6 04 	sts	0x04B6, r22
    3756:	70 93 b7 04 	sts	0x04B7, r23
    375a:	80 93 b8 04 	sts	0x04B8, r24
    375e:	90 93 b9 04 	sts	0x04B9, r25
		printStatus("");
    3762:	8d e3       	ldi	r24, 0x3D	; 61
    3764:	91 e0       	ldi	r25, 0x01	; 1
    3766:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    376a:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <main+0x286>
		break;
		
		case 254:	// Set heater on/off ch1
		if(rx_string[10] == '1')
    376e:	f5 01       	movw	r30, r10
    3770:	82 85       	ldd	r24, Z+10	; 0x0a
    3772:	81 33       	cpi	r24, 0x31	; 49
    3774:	49 f4       	brne	.+18     	; 0x3788 <main+0x1dd6>
		{
			heaterEnableCh1 = true;
    3776:	81 e0       	ldi	r24, 0x01	; 1
    3778:	80 93 ba 01 	sts	0x01BA, r24
			printStatus("ON");
    377c:	87 e3       	ldi	r24, 0x37	; 55
    377e:	91 e0       	ldi	r25, 0x01	; 1
    3780:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    3784:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <main+0x286>
		}
		else if(rx_string[10] == '0')
    3788:	80 33       	cpi	r24, 0x30	; 48
    378a:	11 f0       	breq	.+4      	; 0x3790 <main+0x1dde>
    378c:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <main+0x286>
		{
			heaterEnableCh1 = false;
    3790:	10 92 ba 01 	sts	0x01BA, r1
			printStatus("OFF");
    3794:	8a e3       	ldi	r24, 0x3A	; 58
    3796:	91 e0       	ldi	r25, 0x01	; 1
    3798:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    379c:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <main+0x286>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    37a0:	6e e1       	ldi	r22, 0x1E	; 30
    37a2:	70 e0       	ldi	r23, 0x00	; 0
    37a4:	c5 01       	movw	r24, r10
    37a6:	c2 d7       	rcall	.+3972   	; 0x472c <strnlen>
    37a8:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    37aa:	8b 30       	cpi	r24, 0x0B	; 11
    37ac:	91 05       	cpc	r25, r1
    37ae:	6c f0       	brlt	.+26     	; 0x37ca <main+0x1e18>
    37b0:	e8 ec       	ldi	r30, 0xC8	; 200
    37b2:	f4 e0       	ldi	r31, 0x04	; 4
    37b4:	de 01       	movw	r26, r28
    37b6:	aa 5b       	subi	r26, 0xBA	; 186
    37b8:	bf 4f       	sbci	r27, 0xFF	; 255
    37ba:	82 54       	subi	r24, 0x42	; 66
    37bc:	9b 4f       	sbci	r25, 0xFB	; 251
    37be:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    37c0:	91 91       	ld	r25, Z+
    37c2:	9d 93       	st	X+, r25
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    37c4:	e2 17       	cp	r30, r18
    37c6:	f3 07       	cpc	r31, r19
    37c8:	d9 f7       	brne	.-10     	; 0x37c0 <main+0x1e0e>
		break;
		
		// *** Channel 2 ***
		case 350:	// TempSetPoint2
		ParamParse(rx_string, param);
		TempSetPoint2 = atof(param);
    37ca:	ce 01       	movw	r24, r28
    37cc:	8a 5b       	subi	r24, 0xBA	; 186
    37ce:	9f 4f       	sbci	r25, 0xFF	; 255
    37d0:	65 d7       	rcall	.+3786   	; 0x469c <atof>
    37d2:	60 93 72 01 	sts	0x0172, r22
    37d6:	70 93 73 01 	sts	0x0173, r23
    37da:	80 93 74 01 	sts	0x0174, r24
    37de:	90 93 75 01 	sts	0x0175, r25
		printStatus("");
    37e2:	8d e3       	ldi	r24, 0x3D	; 61
    37e4:	91 e0       	ldi	r25, 0x01	; 1
    37e6:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    37ea:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <main+0x286>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    37ee:	6e e1       	ldi	r22, 0x1E	; 30
    37f0:	70 e0       	ldi	r23, 0x00	; 0
    37f2:	c5 01       	movw	r24, r10
    37f4:	9b d7       	rcall	.+3894   	; 0x472c <strnlen>
    37f6:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    37f8:	8b 30       	cpi	r24, 0x0B	; 11
    37fa:	91 05       	cpc	r25, r1
    37fc:	6c f0       	brlt	.+26     	; 0x3818 <main+0x1e66>
    37fe:	e8 ec       	ldi	r30, 0xC8	; 200
    3800:	f4 e0       	ldi	r31, 0x04	; 4
    3802:	de 01       	movw	r26, r28
    3804:	aa 5b       	subi	r26, 0xBA	; 186
    3806:	bf 4f       	sbci	r27, 0xFF	; 255
    3808:	82 54       	subi	r24, 0x42	; 66
    380a:	9b 4f       	sbci	r25, 0xFB	; 251
    380c:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    380e:	91 91       	ld	r25, Z+
    3810:	9d 93       	st	X+, r25
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    3812:	e2 17       	cp	r30, r18
    3814:	f3 07       	cpc	r31, r19
    3816:	d9 f7       	brne	.-10     	; 0x380e <main+0x1e5c>
		printStatus("");
		break;
		
		case 351:	// SetPgainCh2
		ParamParse(rx_string, param);
		Pgain_ch2 = atof(param);
    3818:	ce 01       	movw	r24, r28
    381a:	8a 5b       	subi	r24, 0xBA	; 186
    381c:	9f 4f       	sbci	r25, 0xFF	; 255
    381e:	3e d7       	rcall	.+3708   	; 0x469c <atof>
    3820:	60 93 6d 04 	sts	0x046D, r22
    3824:	70 93 6e 04 	sts	0x046E, r23
    3828:	80 93 6f 04 	sts	0x046F, r24
    382c:	90 93 70 04 	sts	0x0470, r25
		printStatus("");
    3830:	8d e3       	ldi	r24, 0x3D	; 61
    3832:	91 e0       	ldi	r25, 0x01	; 1
    3834:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    3838:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <main+0x286>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    383c:	6e e1       	ldi	r22, 0x1E	; 30
    383e:	70 e0       	ldi	r23, 0x00	; 0
    3840:	c5 01       	movw	r24, r10
    3842:	74 d7       	rcall	.+3816   	; 0x472c <strnlen>
    3844:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    3846:	8b 30       	cpi	r24, 0x0B	; 11
    3848:	91 05       	cpc	r25, r1
    384a:	6c f0       	brlt	.+26     	; 0x3866 <main+0x1eb4>
    384c:	e8 ec       	ldi	r30, 0xC8	; 200
    384e:	f4 e0       	ldi	r31, 0x04	; 4
    3850:	de 01       	movw	r26, r28
    3852:	aa 5b       	subi	r26, 0xBA	; 186
    3854:	bf 4f       	sbci	r27, 0xFF	; 255
    3856:	82 54       	subi	r24, 0x42	; 66
    3858:	9b 4f       	sbci	r25, 0xFB	; 251
    385a:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    385c:	91 91       	ld	r25, Z+
    385e:	9d 93       	st	X+, r25
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    3860:	e2 17       	cp	r30, r18
    3862:	f3 07       	cpc	r31, r19
    3864:	d9 f7       	brne	.-10     	; 0x385c <main+0x1eaa>
		printStatus("");
		break;
		
		case 352:	// SetIgainCh2
		ParamParse(rx_string, param);
		Igain_ch2 = atof(param);
    3866:	ce 01       	movw	r24, r28
    3868:	8a 5b       	subi	r24, 0xBA	; 186
    386a:	9f 4f       	sbci	r25, 0xFF	; 255
    386c:	17 d7       	rcall	.+3630   	; 0x469c <atof>
    386e:	60 93 75 04 	sts	0x0475, r22
    3872:	70 93 76 04 	sts	0x0476, r23
    3876:	80 93 77 04 	sts	0x0477, r24
    387a:	90 93 78 04 	sts	0x0478, r25
		printStatus("");
    387e:	8d e3       	ldi	r24, 0x3D	; 61
    3880:	91 e0       	ldi	r25, 0x01	; 1
    3882:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    3886:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <main+0x286>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    388a:	6e e1       	ldi	r22, 0x1E	; 30
    388c:	70 e0       	ldi	r23, 0x00	; 0
    388e:	c5 01       	movw	r24, r10
    3890:	4d d7       	rcall	.+3738   	; 0x472c <strnlen>
    3892:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    3894:	8b 30       	cpi	r24, 0x0B	; 11
    3896:	91 05       	cpc	r25, r1
    3898:	6c f0       	brlt	.+26     	; 0x38b4 <main+0x1f02>
    389a:	e8 ec       	ldi	r30, 0xC8	; 200
    389c:	f4 e0       	ldi	r31, 0x04	; 4
    389e:	de 01       	movw	r26, r28
    38a0:	aa 5b       	subi	r26, 0xBA	; 186
    38a2:	bf 4f       	sbci	r27, 0xFF	; 255
    38a4:	82 54       	subi	r24, 0x42	; 66
    38a6:	9b 4f       	sbci	r25, 0xFB	; 251
    38a8:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    38aa:	91 91       	ld	r25, Z+
    38ac:	9d 93       	st	X+, r25
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    38ae:	e2 17       	cp	r30, r18
    38b0:	f3 07       	cpc	r31, r19
    38b2:	d9 f7       	brne	.-10     	; 0x38aa <main+0x1ef8>
		printStatus("");
		break;
		
		case 353:	// SetDgain_ch2
		ParamParse(rx_string, param);
		Dgain_ch2 = atof(param);
    38b4:	ce 01       	movw	r24, r28
    38b6:	8a 5b       	subi	r24, 0xBA	; 186
    38b8:	9f 4f       	sbci	r25, 0xFF	; 255
    38ba:	f0 d6       	rcall	.+3552   	; 0x469c <atof>
    38bc:	60 93 b2 04 	sts	0x04B2, r22
    38c0:	70 93 b3 04 	sts	0x04B3, r23
    38c4:	80 93 b4 04 	sts	0x04B4, r24
    38c8:	90 93 b5 04 	sts	0x04B5, r25
		printStatus("");
    38cc:	8d e3       	ldi	r24, 0x3D	; 61
    38ce:	91 e0       	ldi	r25, 0x01	; 1
    38d0:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    38d4:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <main+0x286>
		break;
		
		case 354:	// Set heater on/off ch2
		if(rx_string[10] == '1')
    38d8:	d5 01       	movw	r26, r10
    38da:	1a 96       	adiw	r26, 0x0a	; 10
    38dc:	8c 91       	ld	r24, X
    38de:	81 33       	cpi	r24, 0x31	; 49
    38e0:	49 f4       	brne	.+18     	; 0x38f4 <main+0x1f42>
		{
			heaterEnableCh2 = true;
    38e2:	81 e0       	ldi	r24, 0x01	; 1
    38e4:	80 93 b9 01 	sts	0x01B9, r24
			printStatus("ON");
    38e8:	87 e3       	ldi	r24, 0x37	; 55
    38ea:	91 e0       	ldi	r25, 0x01	; 1
    38ec:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    38f0:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <main+0x286>
		}
		else if(rx_string[10] == '0')
    38f4:	80 33       	cpi	r24, 0x30	; 48
    38f6:	11 f0       	breq	.+4      	; 0x38fc <main+0x1f4a>
    38f8:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <main+0x286>
		{
			heaterEnableCh2 = false;
    38fc:	10 92 b9 01 	sts	0x01B9, r1
			printStatus("OFF");
    3900:	8a e3       	ldi	r24, 0x3A	; 58
    3902:	91 e0       	ldi	r25, 0x01	; 1
    3904:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    3908:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <main+0x286>
		}
		break;
		
		// *** Channel 4 ***
		case 450:	// TempSetPoint3
		ParamParse(rx_string, param);
    390c:	be 01       	movw	r22, r28
    390e:	6a 5b       	subi	r22, 0xBA	; 186
    3910:	7f 4f       	sbci	r23, 0xFF	; 255
    3912:	c5 01       	movw	r24, r10
    3914:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <ParamParse>
		TempSetPoint3 = atof(param);
    3918:	ce 01       	movw	r24, r28
    391a:	8a 5b       	subi	r24, 0xBA	; 186
    391c:	9f 4f       	sbci	r25, 0xFF	; 255
    391e:	be d6       	rcall	.+3452   	; 0x469c <atof>
    3920:	60 93 5a 01 	sts	0x015A, r22
    3924:	70 93 5b 01 	sts	0x015B, r23
    3928:	80 93 5c 01 	sts	0x015C, r24
    392c:	90 93 5d 01 	sts	0x015D, r25
		printStatus("");
    3930:	8d e3       	ldi	r24, 0x3D	; 61
    3932:	91 e0       	ldi	r25, 0x01	; 1
    3934:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    3938:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <main+0x286>
		break;
		
		case 451:	// SetPgainCh3
		ParamParse(rx_string, param);
    393c:	be 01       	movw	r22, r28
    393e:	6a 5b       	subi	r22, 0xBA	; 186
    3940:	7f 4f       	sbci	r23, 0xFF	; 255
    3942:	c5 01       	movw	r24, r10
    3944:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <ParamParse>
		Pgain_ch3 = atof(param);
    3948:	ce 01       	movw	r24, r28
    394a:	8a 5b       	subi	r24, 0xBA	; 186
    394c:	9f 4f       	sbci	r25, 0xFF	; 255
    394e:	a6 d6       	rcall	.+3404   	; 0x469c <atof>
    3950:	60 93 0a 03 	sts	0x030A, r22
    3954:	70 93 0b 03 	sts	0x030B, r23
    3958:	80 93 0c 03 	sts	0x030C, r24
    395c:	90 93 0d 03 	sts	0x030D, r25
		printStatus("");
    3960:	8d e3       	ldi	r24, 0x3D	; 61
    3962:	91 e0       	ldi	r25, 0x01	; 1
    3964:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    3968:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <main+0x286>
		break;
		
		case 452:	// SetIgainCh3
		ParamParse(rx_string, param);
    396c:	be 01       	movw	r22, r28
    396e:	6a 5b       	subi	r22, 0xBA	; 186
    3970:	7f 4f       	sbci	r23, 0xFF	; 255
    3972:	c5 01       	movw	r24, r10
    3974:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <ParamParse>
		Igain_ch3 = atof(param);
    3978:	ce 01       	movw	r24, r28
    397a:	8a 5b       	subi	r24, 0xBA	; 186
    397c:	9f 4f       	sbci	r25, 0xFF	; 255
    397e:	8e d6       	rcall	.+3356   	; 0x469c <atof>
    3980:	60 93 fb 01 	sts	0x01FB, r22
    3984:	70 93 fc 01 	sts	0x01FC, r23
    3988:	80 93 fd 01 	sts	0x01FD, r24
    398c:	90 93 fe 01 	sts	0x01FE, r25
		printStatus("");
    3990:	8d e3       	ldi	r24, 0x3D	; 61
    3992:	91 e0       	ldi	r25, 0x01	; 1
    3994:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    3998:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <main+0x286>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    399c:	6e e1       	ldi	r22, 0x1E	; 30
    399e:	70 e0       	ldi	r23, 0x00	; 0
    39a0:	c5 01       	movw	r24, r10
    39a2:	c4 d6       	rcall	.+3464   	; 0x472c <strnlen>
    39a4:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    39a6:	8b 30       	cpi	r24, 0x0B	; 11
    39a8:	91 05       	cpc	r25, r1
    39aa:	6c f0       	brlt	.+26     	; 0x39c6 <main+0x2014>
    39ac:	e8 ec       	ldi	r30, 0xC8	; 200
    39ae:	f4 e0       	ldi	r31, 0x04	; 4
    39b0:	de 01       	movw	r26, r28
    39b2:	aa 5b       	subi	r26, 0xBA	; 186
    39b4:	bf 4f       	sbci	r27, 0xFF	; 255
    39b6:	82 54       	subi	r24, 0x42	; 66
    39b8:	9b 4f       	sbci	r25, 0xFB	; 251
    39ba:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    39bc:	91 91       	ld	r25, Z+
    39be:	9d 93       	st	X+, r25
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    39c0:	e2 17       	cp	r30, r18
    39c2:	f3 07       	cpc	r31, r19
    39c4:	d9 f7       	brne	.-10     	; 0x39bc <main+0x200a>
		printStatus("");
		break;
		
		case 453:	// SetDgain_ch3
		ParamParse(rx_string, param);
		Dgain_ch3 = atof(param);
    39c6:	ce 01       	movw	r24, r28
    39c8:	8a 5b       	subi	r24, 0xBA	; 186
    39ca:	9f 4f       	sbci	r25, 0xFF	; 255
    39cc:	67 d6       	rcall	.+3278   	; 0x469c <atof>
    39ce:	60 93 79 04 	sts	0x0479, r22
    39d2:	70 93 7a 04 	sts	0x047A, r23
    39d6:	80 93 7b 04 	sts	0x047B, r24
    39da:	90 93 7c 04 	sts	0x047C, r25
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    39de:	81 e2       	ldi	r24, 0x21	; 33
    39e0:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    39e2:	f5 01       	movw	r30, r10
    39e4:	81 81       	ldd	r24, Z+1	; 0x01
    39e6:	8f 8f       	std	Y+31, r24	; 0x1f
    39e8:	82 81       	ldd	r24, Z+2	; 0x02
    39ea:	88 a3       	std	Y+32, r24	; 0x20
    39ec:	83 81       	ldd	r24, Z+3	; 0x03
    39ee:	89 a3       	std	Y+33, r24	; 0x21
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    39f0:	1a a2       	std	Y+34, r1	; 0x22
    39f2:	1b a2       	std	Y+35, r1	; 0x23
    39f4:	1c a2       	std	Y+36, r1	; 0x24
    39f6:	8e 01       	movw	r16, r28
    39f8:	02 5e       	subi	r16, 0xE2	; 226
    39fa:	1f 4f       	sbci	r17, 0xFF	; 255
    39fc:	ae 01       	movw	r20, r28
    39fe:	4e 5d       	subi	r20, 0xDE	; 222
    3a00:	5f 4f       	sbci	r21, 0xFF	; 255
    3a02:	f8 01       	movw	r30, r16
    3a04:	80 e0       	ldi	r24, 0x00	; 0
    3a06:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    3a08:	b8 e0       	ldi	r27, 0x08	; 8
    3a0a:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    3a0c:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    3a0e:	29 2f       	mov	r18, r25
    3a10:	33 27       	eor	r19, r19
    3a12:	27 fd       	sbrc	r18, 7
    3a14:	3a 95       	dec	r19
    3a16:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
    3a18:	32 2f       	mov	r19, r18
    3a1a:	22 27       	eor	r18, r18
    3a1c:	6b 2f       	mov	r22, r27
    3a1e:	7f 2d       	mov	r23, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    3a20:	33 23       	and	r19, r19
    3a22:	3c f4       	brge	.+14     	; 0x3a32 <main+0x2080>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    3a24:	22 0f       	add	r18, r18
    3a26:	33 1f       	adc	r19, r19
    3a28:	a1 e2       	ldi	r26, 0x21	; 33
    3a2a:	2a 27       	eor	r18, r26
    3a2c:	a0 e1       	ldi	r26, 0x10	; 16
    3a2e:	3a 27       	eor	r19, r26
    3a30:	02 c0       	rjmp	.+4      	; 0x3a36 <main+0x2084>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    3a32:	22 0f       	add	r18, r18
    3a34:	33 1f       	adc	r19, r19
    3a36:	61 50       	subi	r22, 0x01	; 1
    3a38:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    3a3a:	91 f7       	brne	.-28     	; 0x3a20 <main+0x206e>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    3a3c:	98 2f       	mov	r25, r24
    3a3e:	88 27       	eor	r24, r24
    3a40:	82 27       	eor	r24, r18
    3a42:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    3a44:	e4 17       	cp	r30, r20
    3a46:	f5 07       	cpc	r31, r21
    3a48:	09 f7       	brne	.-62     	; 0x3a0c <main+0x205a>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    3a4a:	7c 01       	movw	r14, r24
    3a4c:	40 e1       	ldi	r20, 0x10	; 16
    3a4e:	68 e6       	ldi	r22, 0x68	; 104
    3a50:	74 e0       	ldi	r23, 0x04	; 4
    3a52:	81 d6       	rcall	.+3330   	; 0x4756 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    3a54:	88 e6       	ldi	r24, 0x68	; 104
    3a56:	94 e0       	ldi	r25, 0x04	; 4
    3a58:	74 d6       	rcall	.+3304   	; 0x4742 <strupr>
	if(crcXmodem < 0x10)
    3a5a:	b0 e1       	ldi	r27, 0x10	; 16
    3a5c:	eb 16       	cp	r14, r27
    3a5e:	f1 04       	cpc	r15, r1
    3a60:	38 f4       	brcc	.+14     	; 0x3a70 <main+0x20be>
	{
		tx_string[cnt+4] = crc[0];
    3a62:	80 91 68 04 	lds	r24, 0x0468
    3a66:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = '0';
    3a68:	80 e3       	ldi	r24, 0x30	; 48
    3a6a:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = '0';
    3a6c:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';
    3a6e:	8a a3       	std	Y+34, r24	; 0x22
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    3a70:	c7 01       	movw	r24, r14
    3a72:	40 97       	sbiw	r24, 0x10	; 16
    3a74:	80 3f       	cpi	r24, 0xF0	; 240
    3a76:	91 05       	cpc	r25, r1
    3a78:	48 f4       	brcc	.+18     	; 0x3a8c <main+0x20da>
	{
		tx_string[cnt+4] = crc[1];
    3a7a:	e8 e6       	ldi	r30, 0x68	; 104
    3a7c:	f4 e0       	ldi	r31, 0x04	; 4
    3a7e:	81 81       	ldd	r24, Z+1	; 0x01
    3a80:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[0];
    3a82:	80 81       	ld	r24, Z
    3a84:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = '0';
    3a86:	80 e3       	ldi	r24, 0x30	; 48
    3a88:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';		
    3a8a:	8a a3       	std	Y+34, r24	; 0x22
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    3a8c:	c7 01       	movw	r24, r14
    3a8e:	9a 95       	dec	r25
    3a90:	81 15       	cp	r24, r1
    3a92:	9f 40       	sbci	r25, 0x0F	; 15
    3a94:	50 f4       	brcc	.+20     	; 0x3aaa <main+0x20f8>
	{
		tx_string[cnt+4] = crc[2];
    3a96:	e8 e6       	ldi	r30, 0x68	; 104
    3a98:	f4 e0       	ldi	r31, 0x04	; 4
    3a9a:	82 81       	ldd	r24, Z+2	; 0x02
    3a9c:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[1];
    3a9e:	81 81       	ldd	r24, Z+1	; 0x01
    3aa0:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = crc[0];
    3aa2:	80 81       	ld	r24, Z
    3aa4:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';		
    3aa6:	80 e3       	ldi	r24, 0x30	; 48
    3aa8:	8a a3       	std	Y+34, r24	; 0x22
	}
	if(crcXmodem >= 0x1000)
    3aaa:	e1 14       	cp	r14, r1
    3aac:	f0 e1       	ldi	r31, 0x10	; 16
    3aae:	ff 06       	cpc	r15, r31
    3ab0:	50 f0       	brcs	.+20     	; 0x3ac6 <main+0x2114>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    3ab2:	e8 e6       	ldi	r30, 0x68	; 104
    3ab4:	f4 e0       	ldi	r31, 0x04	; 4
    3ab6:	80 81       	ld	r24, Z
    3ab8:	8a a3       	std	Y+34, r24	; 0x22
		tx_string[cnt+2] = crc[1];
    3aba:	81 81       	ldd	r24, Z+1	; 0x01
    3abc:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+3] = crc[2];
    3abe:	82 81       	ldd	r24, Z+2	; 0x02
    3ac0:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+4] = crc[3];
    3ac2:	83 81       	ldd	r24, Z+3	; 0x03
    3ac4:	8d a3       	std	Y+37, r24	; 0x25
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    3ac6:	8d e0       	ldi	r24, 0x0D	; 13
    3ac8:	8e a3       	std	Y+38, r24	; 0x26
    3aca:	ae 01       	movw	r20, r28
    3acc:	49 5d       	subi	r20, 0xD9	; 217
    3ace:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3ad0:	ec ed       	ldi	r30, 0xDC	; 220
    3ad2:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3ad4:	0f 2e       	mov	r0, r31
    3ad6:	f1 ec       	ldi	r31, 0xC1	; 193
    3ad8:	cf 2e       	mov	r12, r31
    3ada:	d1 2c       	mov	r13, r1
    3adc:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3ade:	f1 2c       	mov	r15, r1
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    3ae0:	d8 01       	movw	r26, r16
    3ae2:	2d 91       	ld	r18, X+
    3ae4:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    3ae6:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3ae8:	91 81       	ldd	r25, Z+1	; 0x01
    3aea:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    3aec:	98 13       	cpse	r25, r24
    3aee:	04 c0       	rjmp	.+8      	; 0x3af8 <main+0x2146>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3af0:	d6 01       	movw	r26, r12
    3af2:	8c 91       	ld	r24, X
    3af4:	80 62       	ori	r24, 0x20	; 32
    3af6:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    3af8:	30 81       	ld	r19, Z
    3afa:	83 81       	ldd	r24, Z+3	; 0x03
    3afc:	94 81       	ldd	r25, Z+4	; 0x04
    3afe:	83 0f       	add	r24, r19
    3b00:	91 1d       	adc	r25, r1
    3b02:	dc 01       	movw	r26, r24
    3b04:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    3b06:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3b08:	68 2f       	mov	r22, r24
    3b0a:	70 e0       	ldi	r23, 0x00	; 0
    3b0c:	22 81       	ldd	r18, Z+2	; 0x02
    3b0e:	30 e0       	ldi	r19, 0x00	; 0
    3b10:	21 50       	subi	r18, 0x01	; 1
    3b12:	31 09       	sbc	r19, r1
    3b14:	62 17       	cp	r22, r18
    3b16:	73 07       	cpc	r23, r19
    3b18:	11 f0       	breq	.+4      	; 0x3b1e <main+0x216c>
    3b1a:	8f 5f       	subi	r24, 0xFF	; 255
    3b1c:	01 c0       	rjmp	.+2      	; 0x3b20 <main+0x216e>
    3b1e:	8f 2d       	mov	r24, r15
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    3b20:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    3b22:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    3b24:	04 17       	cp	r16, r20
    3b26:	15 07       	cpc	r17, r21
    3b28:	d9 f6       	brne	.-74     	; 0x3ae0 <main+0x212e>
    3b2a:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <main+0x286>
		Dgain_ch3 = atof(param);
		printStatus("");
		break;
		
		case 454:	// Set heater on/off ch3
		if(rx_string[10] == '1')
    3b2e:	f5 01       	movw	r30, r10
    3b30:	82 85       	ldd	r24, Z+10	; 0x0a
    3b32:	81 33       	cpi	r24, 0x31	; 49
    3b34:	09 f0       	breq	.+2      	; 0x3b38 <main+0x2186>
    3b36:	ae c0       	rjmp	.+348    	; 0x3c94 <main+0x22e2>
		{
			heaterEnableCh3 = true;
    3b38:	81 e0       	ldi	r24, 0x01	; 1
    3b3a:	80 93 b8 01 	sts	0x01B8, r24
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    3b3e:	81 e2       	ldi	r24, 0x21	; 33
    3b40:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    3b42:	81 81       	ldd	r24, Z+1	; 0x01
    3b44:	8f 8f       	std	Y+31, r24	; 0x1f
    3b46:	82 81       	ldd	r24, Z+2	; 0x02
    3b48:	88 a3       	std	Y+32, r24	; 0x20
    3b4a:	83 81       	ldd	r24, Z+3	; 0x03
    3b4c:	89 a3       	std	Y+33, r24	; 0x21
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    3b4e:	8f e4       	ldi	r24, 0x4F	; 79
    3b50:	8a a3       	std	Y+34, r24	; 0x22
    3b52:	8e e4       	ldi	r24, 0x4E	; 78
    3b54:	8b a3       	std	Y+35, r24	; 0x23
    3b56:	1c a2       	std	Y+36, r1	; 0x24
    3b58:	1d a2       	std	Y+37, r1	; 0x25
    3b5a:	1e a2       	std	Y+38, r1	; 0x26
    3b5c:	8e 01       	movw	r16, r28
    3b5e:	02 5e       	subi	r16, 0xE2	; 226
    3b60:	1f 4f       	sbci	r17, 0xFF	; 255
    3b62:	ae 01       	movw	r20, r28
    3b64:	4c 5d       	subi	r20, 0xDC	; 220
    3b66:	5f 4f       	sbci	r21, 0xFF	; 255
    3b68:	f8 01       	movw	r30, r16
    3b6a:	80 e0       	ldi	r24, 0x00	; 0
    3b6c:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    3b6e:	b8 e0       	ldi	r27, 0x08	; 8
    3b70:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    3b72:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    3b74:	29 2f       	mov	r18, r25
    3b76:	33 27       	eor	r19, r19
    3b78:	27 fd       	sbrc	r18, 7
    3b7a:	3a 95       	dec	r19
    3b7c:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
    3b7e:	32 2f       	mov	r19, r18
    3b80:	22 27       	eor	r18, r18
    3b82:	6b 2f       	mov	r22, r27
    3b84:	7f 2d       	mov	r23, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    3b86:	33 23       	and	r19, r19
    3b88:	3c f4       	brge	.+14     	; 0x3b98 <main+0x21e6>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    3b8a:	22 0f       	add	r18, r18
    3b8c:	33 1f       	adc	r19, r19
    3b8e:	a1 e2       	ldi	r26, 0x21	; 33
    3b90:	2a 27       	eor	r18, r26
    3b92:	a0 e1       	ldi	r26, 0x10	; 16
    3b94:	3a 27       	eor	r19, r26
    3b96:	02 c0       	rjmp	.+4      	; 0x3b9c <main+0x21ea>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    3b98:	22 0f       	add	r18, r18
    3b9a:	33 1f       	adc	r19, r19
    3b9c:	61 50       	subi	r22, 0x01	; 1
    3b9e:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    3ba0:	91 f7       	brne	.-28     	; 0x3b86 <main+0x21d4>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    3ba2:	98 2f       	mov	r25, r24
    3ba4:	88 27       	eor	r24, r24
    3ba6:	82 27       	eor	r24, r18
    3ba8:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    3baa:	e4 17       	cp	r30, r20
    3bac:	f5 07       	cpc	r31, r21
    3bae:	09 f7       	brne	.-62     	; 0x3b72 <main+0x21c0>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    3bb0:	7c 01       	movw	r14, r24
    3bb2:	40 e1       	ldi	r20, 0x10	; 16
    3bb4:	68 e6       	ldi	r22, 0x68	; 104
    3bb6:	74 e0       	ldi	r23, 0x04	; 4
    3bb8:	ce d5       	rcall	.+2972   	; 0x4756 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    3bba:	88 e6       	ldi	r24, 0x68	; 104
    3bbc:	94 e0       	ldi	r25, 0x04	; 4
    3bbe:	c1 d5       	rcall	.+2946   	; 0x4742 <strupr>
	if(crcXmodem < 0x10)
    3bc0:	b0 e1       	ldi	r27, 0x10	; 16
    3bc2:	eb 16       	cp	r14, r27
    3bc4:	f1 04       	cpc	r15, r1
    3bc6:	38 f4       	brcc	.+14     	; 0x3bd6 <main+0x2224>
	{
		tx_string[cnt+4] = crc[0];
    3bc8:	80 91 68 04 	lds	r24, 0x0468
    3bcc:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+3] = '0';
    3bce:	80 e3       	ldi	r24, 0x30	; 48
    3bd0:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+2] = '0';
    3bd2:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+1] = '0';
    3bd4:	8c a3       	std	Y+36, r24	; 0x24
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    3bd6:	c7 01       	movw	r24, r14
    3bd8:	40 97       	sbiw	r24, 0x10	; 16
    3bda:	80 3f       	cpi	r24, 0xF0	; 240
    3bdc:	91 05       	cpc	r25, r1
    3bde:	48 f4       	brcc	.+18     	; 0x3bf2 <main+0x2240>
	{
		tx_string[cnt+4] = crc[1];
    3be0:	e8 e6       	ldi	r30, 0x68	; 104
    3be2:	f4 e0       	ldi	r31, 0x04	; 4
    3be4:	81 81       	ldd	r24, Z+1	; 0x01
    3be6:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+3] = crc[0];
    3be8:	80 81       	ld	r24, Z
    3bea:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+2] = '0';
    3bec:	80 e3       	ldi	r24, 0x30	; 48
    3bee:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+1] = '0';		
    3bf0:	8c a3       	std	Y+36, r24	; 0x24
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    3bf2:	c7 01       	movw	r24, r14
    3bf4:	9a 95       	dec	r25
    3bf6:	81 15       	cp	r24, r1
    3bf8:	9f 40       	sbci	r25, 0x0F	; 15
    3bfa:	50 f4       	brcc	.+20     	; 0x3c10 <main+0x225e>
	{
		tx_string[cnt+4] = crc[2];
    3bfc:	e8 e6       	ldi	r30, 0x68	; 104
    3bfe:	f4 e0       	ldi	r31, 0x04	; 4
    3c00:	82 81       	ldd	r24, Z+2	; 0x02
    3c02:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+3] = crc[1];
    3c04:	81 81       	ldd	r24, Z+1	; 0x01
    3c06:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+2] = crc[0];
    3c08:	80 81       	ld	r24, Z
    3c0a:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+1] = '0';		
    3c0c:	80 e3       	ldi	r24, 0x30	; 48
    3c0e:	8c a3       	std	Y+36, r24	; 0x24
	}
	if(crcXmodem >= 0x1000)
    3c10:	e1 14       	cp	r14, r1
    3c12:	f0 e1       	ldi	r31, 0x10	; 16
    3c14:	ff 06       	cpc	r15, r31
    3c16:	50 f0       	brcs	.+20     	; 0x3c2c <main+0x227a>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    3c18:	e8 e6       	ldi	r30, 0x68	; 104
    3c1a:	f4 e0       	ldi	r31, 0x04	; 4
    3c1c:	80 81       	ld	r24, Z
    3c1e:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = crc[1];
    3c20:	81 81       	ldd	r24, Z+1	; 0x01
    3c22:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[2];
    3c24:	82 81       	ldd	r24, Z+2	; 0x02
    3c26:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+4] = crc[3];
    3c28:	83 81       	ldd	r24, Z+3	; 0x03
    3c2a:	8f a3       	std	Y+39, r24	; 0x27
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    3c2c:	8d e0       	ldi	r24, 0x0D	; 13
    3c2e:	88 a7       	std	Y+40, r24	; 0x28
    3c30:	ae 01       	movw	r20, r28
    3c32:	47 5d       	subi	r20, 0xD7	; 215
    3c34:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3c36:	ec ed       	ldi	r30, 0xDC	; 220
    3c38:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3c3a:	0f 2e       	mov	r0, r31
    3c3c:	f1 ec       	ldi	r31, 0xC1	; 193
    3c3e:	cf 2e       	mov	r12, r31
    3c40:	d1 2c       	mov	r13, r1
    3c42:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3c44:	f1 2c       	mov	r15, r1
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    3c46:	d8 01       	movw	r26, r16
    3c48:	2d 91       	ld	r18, X+
    3c4a:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    3c4c:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3c4e:	91 81       	ldd	r25, Z+1	; 0x01
    3c50:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    3c52:	98 13       	cpse	r25, r24
    3c54:	04 c0       	rjmp	.+8      	; 0x3c5e <main+0x22ac>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3c56:	d6 01       	movw	r26, r12
    3c58:	8c 91       	ld	r24, X
    3c5a:	80 62       	ori	r24, 0x20	; 32
    3c5c:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    3c5e:	30 81       	ld	r19, Z
    3c60:	83 81       	ldd	r24, Z+3	; 0x03
    3c62:	94 81       	ldd	r25, Z+4	; 0x04
    3c64:	83 0f       	add	r24, r19
    3c66:	91 1d       	adc	r25, r1
    3c68:	dc 01       	movw	r26, r24
    3c6a:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    3c6c:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3c6e:	68 2f       	mov	r22, r24
    3c70:	70 e0       	ldi	r23, 0x00	; 0
    3c72:	22 81       	ldd	r18, Z+2	; 0x02
    3c74:	30 e0       	ldi	r19, 0x00	; 0
    3c76:	21 50       	subi	r18, 0x01	; 1
    3c78:	31 09       	sbc	r19, r1
    3c7a:	62 17       	cp	r22, r18
    3c7c:	73 07       	cpc	r23, r19
    3c7e:	11 f0       	breq	.+4      	; 0x3c84 <main+0x22d2>
    3c80:	8f 5f       	subi	r24, 0xFF	; 255
    3c82:	01 c0       	rjmp	.+2      	; 0x3c86 <main+0x22d4>
    3c84:	8f 2d       	mov	r24, r15
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    3c86:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    3c88:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    3c8a:	04 17       	cp	r16, r20
    3c8c:	15 07       	cpc	r17, r21
    3c8e:	d9 f6       	brne	.-74     	; 0x3c46 <main+0x2294>
    3c90:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <main+0x286>
		if(rx_string[10] == '1')
		{
			heaterEnableCh3 = true;
			printStatus("ON");
		}
		else if(rx_string[10] == '0')
    3c94:	80 33       	cpi	r24, 0x30	; 48
    3c96:	11 f0       	breq	.+4      	; 0x3c9c <main+0x22ea>
    3c98:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <main+0x286>
		{
			heaterEnableCh3 = false;
    3c9c:	10 92 b8 01 	sts	0x01B8, r1
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    3ca0:	81 e2       	ldi	r24, 0x21	; 33
    3ca2:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    3ca4:	f5 01       	movw	r30, r10
    3ca6:	81 81       	ldd	r24, Z+1	; 0x01
    3ca8:	8f 8f       	std	Y+31, r24	; 0x1f
    3caa:	82 81       	ldd	r24, Z+2	; 0x02
    3cac:	88 a3       	std	Y+32, r24	; 0x20
    3cae:	83 81       	ldd	r24, Z+3	; 0x03
    3cb0:	89 a3       	std	Y+33, r24	; 0x21
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    3cb2:	8f e4       	ldi	r24, 0x4F	; 79
    3cb4:	8a a3       	std	Y+34, r24	; 0x22
    3cb6:	86 e4       	ldi	r24, 0x46	; 70
    3cb8:	8b a3       	std	Y+35, r24	; 0x23
    3cba:	8c a3       	std	Y+36, r24	; 0x24
    3cbc:	1d a2       	std	Y+37, r1	; 0x25
    3cbe:	1e a2       	std	Y+38, r1	; 0x26
    3cc0:	1f a2       	std	Y+39, r1	; 0x27
    3cc2:	8e 01       	movw	r16, r28
    3cc4:	02 5e       	subi	r16, 0xE2	; 226
    3cc6:	1f 4f       	sbci	r17, 0xFF	; 255
    3cc8:	ae 01       	movw	r20, r28
    3cca:	4b 5d       	subi	r20, 0xDB	; 219
    3ccc:	5f 4f       	sbci	r21, 0xFF	; 255
    3cce:	f8 01       	movw	r30, r16
    3cd0:	80 e0       	ldi	r24, 0x00	; 0
    3cd2:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    3cd4:	b8 e0       	ldi	r27, 0x08	; 8
    3cd6:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    3cd8:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    3cda:	29 2f       	mov	r18, r25
    3cdc:	33 27       	eor	r19, r19
    3cde:	27 fd       	sbrc	r18, 7
    3ce0:	3a 95       	dec	r19
    3ce2:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
    3ce4:	32 2f       	mov	r19, r18
    3ce6:	22 27       	eor	r18, r18
    3ce8:	6b 2f       	mov	r22, r27
    3cea:	7f 2d       	mov	r23, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    3cec:	33 23       	and	r19, r19
    3cee:	3c f4       	brge	.+14     	; 0x3cfe <main+0x234c>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    3cf0:	22 0f       	add	r18, r18
    3cf2:	33 1f       	adc	r19, r19
    3cf4:	a1 e2       	ldi	r26, 0x21	; 33
    3cf6:	2a 27       	eor	r18, r26
    3cf8:	a0 e1       	ldi	r26, 0x10	; 16
    3cfa:	3a 27       	eor	r19, r26
    3cfc:	02 c0       	rjmp	.+4      	; 0x3d02 <main+0x2350>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    3cfe:	22 0f       	add	r18, r18
    3d00:	33 1f       	adc	r19, r19
    3d02:	61 50       	subi	r22, 0x01	; 1
    3d04:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    3d06:	91 f7       	brne	.-28     	; 0x3cec <main+0x233a>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    3d08:	98 2f       	mov	r25, r24
    3d0a:	88 27       	eor	r24, r24
    3d0c:	82 27       	eor	r24, r18
    3d0e:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    3d10:	e4 17       	cp	r30, r20
    3d12:	f5 07       	cpc	r31, r21
    3d14:	09 f7       	brne	.-62     	; 0x3cd8 <main+0x2326>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    3d16:	7c 01       	movw	r14, r24
    3d18:	40 e1       	ldi	r20, 0x10	; 16
    3d1a:	68 e6       	ldi	r22, 0x68	; 104
    3d1c:	74 e0       	ldi	r23, 0x04	; 4
    3d1e:	1b d5       	rcall	.+2614   	; 0x4756 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    3d20:	88 e6       	ldi	r24, 0x68	; 104
    3d22:	94 e0       	ldi	r25, 0x04	; 4
    3d24:	0e d5       	rcall	.+2588   	; 0x4742 <strupr>
	if(crcXmodem < 0x10)
    3d26:	b0 e1       	ldi	r27, 0x10	; 16
    3d28:	eb 16       	cp	r14, r27
    3d2a:	f1 04       	cpc	r15, r1
    3d2c:	38 f4       	brcc	.+14     	; 0x3d3c <main+0x238a>
	{
		tx_string[cnt+4] = crc[0];
    3d2e:	80 91 68 04 	lds	r24, 0x0468
    3d32:	88 a7       	std	Y+40, r24	; 0x28
		tx_string[cnt+3] = '0';
    3d34:	80 e3       	ldi	r24, 0x30	; 48
    3d36:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+2] = '0';
    3d38:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+1] = '0';
    3d3a:	8d a3       	std	Y+37, r24	; 0x25
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    3d3c:	c7 01       	movw	r24, r14
    3d3e:	40 97       	sbiw	r24, 0x10	; 16
    3d40:	80 3f       	cpi	r24, 0xF0	; 240
    3d42:	91 05       	cpc	r25, r1
    3d44:	48 f4       	brcc	.+18     	; 0x3d58 <main+0x23a6>
	{
		tx_string[cnt+4] = crc[1];
    3d46:	e8 e6       	ldi	r30, 0x68	; 104
    3d48:	f4 e0       	ldi	r31, 0x04	; 4
    3d4a:	81 81       	ldd	r24, Z+1	; 0x01
    3d4c:	88 a7       	std	Y+40, r24	; 0x28
		tx_string[cnt+3] = crc[0];
    3d4e:	80 81       	ld	r24, Z
    3d50:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+2] = '0';
    3d52:	80 e3       	ldi	r24, 0x30	; 48
    3d54:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+1] = '0';		
    3d56:	8d a3       	std	Y+37, r24	; 0x25
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    3d58:	c7 01       	movw	r24, r14
    3d5a:	9a 95       	dec	r25
    3d5c:	81 15       	cp	r24, r1
    3d5e:	9f 40       	sbci	r25, 0x0F	; 15
    3d60:	50 f4       	brcc	.+20     	; 0x3d76 <main+0x23c4>
	{
		tx_string[cnt+4] = crc[2];
    3d62:	e8 e6       	ldi	r30, 0x68	; 104
    3d64:	f4 e0       	ldi	r31, 0x04	; 4
    3d66:	82 81       	ldd	r24, Z+2	; 0x02
    3d68:	88 a7       	std	Y+40, r24	; 0x28
		tx_string[cnt+3] = crc[1];
    3d6a:	81 81       	ldd	r24, Z+1	; 0x01
    3d6c:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+2] = crc[0];
    3d6e:	80 81       	ld	r24, Z
    3d70:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+1] = '0';		
    3d72:	80 e3       	ldi	r24, 0x30	; 48
    3d74:	8d a3       	std	Y+37, r24	; 0x25
	}
	if(crcXmodem >= 0x1000)
    3d76:	e1 14       	cp	r14, r1
    3d78:	f0 e1       	ldi	r31, 0x10	; 16
    3d7a:	ff 06       	cpc	r15, r31
    3d7c:	50 f0       	brcs	.+20     	; 0x3d92 <main+0x23e0>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    3d7e:	e8 e6       	ldi	r30, 0x68	; 104
    3d80:	f4 e0       	ldi	r31, 0x04	; 4
    3d82:	80 81       	ld	r24, Z
    3d84:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+2] = crc[1];
    3d86:	81 81       	ldd	r24, Z+1	; 0x01
    3d88:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+3] = crc[2];
    3d8a:	82 81       	ldd	r24, Z+2	; 0x02
    3d8c:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+4] = crc[3];
    3d8e:	83 81       	ldd	r24, Z+3	; 0x03
    3d90:	88 a7       	std	Y+40, r24	; 0x28
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    3d92:	8d e0       	ldi	r24, 0x0D	; 13
    3d94:	89 a7       	std	Y+41, r24	; 0x29
    3d96:	ae 01       	movw	r20, r28
    3d98:	46 5d       	subi	r20, 0xD6	; 214
    3d9a:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3d9c:	ec ed       	ldi	r30, 0xDC	; 220
    3d9e:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3da0:	0f 2e       	mov	r0, r31
    3da2:	f1 ec       	ldi	r31, 0xC1	; 193
    3da4:	cf 2e       	mov	r12, r31
    3da6:	d1 2c       	mov	r13, r1
    3da8:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3daa:	f1 2c       	mov	r15, r1
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    3dac:	d8 01       	movw	r26, r16
    3dae:	2d 91       	ld	r18, X+
    3db0:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    3db2:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3db4:	91 81       	ldd	r25, Z+1	; 0x01
    3db6:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    3db8:	98 13       	cpse	r25, r24
    3dba:	04 c0       	rjmp	.+8      	; 0x3dc4 <main+0x2412>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3dbc:	d6 01       	movw	r26, r12
    3dbe:	8c 91       	ld	r24, X
    3dc0:	80 62       	ori	r24, 0x20	; 32
    3dc2:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    3dc4:	30 81       	ld	r19, Z
    3dc6:	83 81       	ldd	r24, Z+3	; 0x03
    3dc8:	94 81       	ldd	r25, Z+4	; 0x04
    3dca:	83 0f       	add	r24, r19
    3dcc:	91 1d       	adc	r25, r1
    3dce:	dc 01       	movw	r26, r24
    3dd0:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    3dd2:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3dd4:	68 2f       	mov	r22, r24
    3dd6:	70 e0       	ldi	r23, 0x00	; 0
    3dd8:	22 81       	ldd	r18, Z+2	; 0x02
    3dda:	30 e0       	ldi	r19, 0x00	; 0
    3ddc:	21 50       	subi	r18, 0x01	; 1
    3dde:	31 09       	sbc	r19, r1
    3de0:	62 17       	cp	r22, r18
    3de2:	73 07       	cpc	r23, r19
    3de4:	11 f0       	breq	.+4      	; 0x3dea <main+0x2438>
    3de6:	8f 5f       	subi	r24, 0xFF	; 255
    3de8:	01 c0       	rjmp	.+2      	; 0x3dec <main+0x243a>
    3dea:	8f 2d       	mov	r24, r15
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    3dec:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    3dee:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    3df0:	04 17       	cp	r16, r20
    3df2:	15 07       	cpc	r17, r21
    3df4:	d9 f6       	brne	.-74     	; 0x3dac <main+0x23fa>
    3df6:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <main+0x286>
	Dgain_ch3 = eeprom_read_float((float*)eepromAdr_DgainCh3);			
}

static inline void WriteParamToEEPROM()
{
	eeprom_write_float( (float*)eepromAdr_TempSetPoint0, TempSetPoint0 );
    3dfa:	40 91 a2 01 	lds	r20, 0x01A2
    3dfe:	50 91 a3 01 	lds	r21, 0x01A3
    3e02:	60 91 a4 01 	lds	r22, 0x01A4
    3e06:	70 91 a5 01 	lds	r23, 0x01A5
    3e0a:	80 e0       	ldi	r24, 0x00	; 0
    3e0c:	90 e0       	ldi	r25, 0x00	; 0
    3e0e:	65 d6       	rcall	.+3274   	; 0x4ada <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_PgainCh0, Pgain_ch0 );
    3e10:	40 91 06 03 	lds	r20, 0x0306
    3e14:	50 91 07 03 	lds	r21, 0x0307
    3e18:	60 91 08 03 	lds	r22, 0x0308
    3e1c:	70 91 09 03 	lds	r23, 0x0309
    3e20:	84 e0       	ldi	r24, 0x04	; 4
    3e22:	90 e0       	ldi	r25, 0x00	; 0
    3e24:	5a d6       	rcall	.+3252   	; 0x4ada <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_IgainCh0, Igain_ch0 );
    3e26:	40 91 ba 04 	lds	r20, 0x04BA
    3e2a:	50 91 bb 04 	lds	r21, 0x04BB
    3e2e:	60 91 bc 04 	lds	r22, 0x04BC
    3e32:	70 91 bd 04 	lds	r23, 0x04BD
    3e36:	88 e0       	ldi	r24, 0x08	; 8
    3e38:	90 e0       	ldi	r25, 0x00	; 0
    3e3a:	4f d6       	rcall	.+3230   	; 0x4ada <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_DgainCh0, Dgain_ch0 );
    3e3c:	40 91 03 02 	lds	r20, 0x0203
    3e40:	50 91 04 02 	lds	r21, 0x0204
    3e44:	60 91 05 02 	lds	r22, 0x0205
    3e48:	70 91 06 02 	lds	r23, 0x0206
    3e4c:	8c e0       	ldi	r24, 0x0C	; 12
    3e4e:	90 e0       	ldi	r25, 0x00	; 0
    3e50:	44 d6       	rcall	.+3208   	; 0x4ada <eeprom_write_dword>
	
	eeprom_write_float( (float*)eepromAdr_TempSetPoint1, TempSetPoint1 );
    3e52:	40 91 8a 01 	lds	r20, 0x018A
    3e56:	50 91 8b 01 	lds	r21, 0x018B
    3e5a:	60 91 8c 01 	lds	r22, 0x018C
    3e5e:	70 91 8d 01 	lds	r23, 0x018D
    3e62:	80 e1       	ldi	r24, 0x10	; 16
    3e64:	90 e0       	ldi	r25, 0x00	; 0
    3e66:	39 d6       	rcall	.+3186   	; 0x4ada <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_PgainCh1, Pgain_ch1 );
    3e68:	40 91 71 04 	lds	r20, 0x0471
    3e6c:	50 91 72 04 	lds	r21, 0x0472
    3e70:	60 91 73 04 	lds	r22, 0x0473
    3e74:	70 91 74 04 	lds	r23, 0x0474
    3e78:	84 e1       	ldi	r24, 0x14	; 20
    3e7a:	90 e0       	ldi	r25, 0x00	; 0
    3e7c:	2e d6       	rcall	.+3164   	; 0x4ada <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_IgainCh1, Igain_ch1 );
    3e7e:	40 91 c6 01 	lds	r20, 0x01C6
    3e82:	50 91 c7 01 	lds	r21, 0x01C7
    3e86:	60 91 c8 01 	lds	r22, 0x01C8
    3e8a:	70 91 c9 01 	lds	r23, 0x01C9
    3e8e:	88 e1       	ldi	r24, 0x18	; 24
    3e90:	90 e0       	ldi	r25, 0x00	; 0
    3e92:	23 d6       	rcall	.+3142   	; 0x4ada <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_DgainCh1, Dgain_ch1 );
    3e94:	40 91 b6 04 	lds	r20, 0x04B6
    3e98:	50 91 b7 04 	lds	r21, 0x04B7
    3e9c:	60 91 b8 04 	lds	r22, 0x04B8
    3ea0:	70 91 b9 04 	lds	r23, 0x04B9
    3ea4:	8c e1       	ldi	r24, 0x1C	; 28
    3ea6:	90 e0       	ldi	r25, 0x00	; 0
    3ea8:	18 d6       	rcall	.+3120   	; 0x4ada <eeprom_write_dword>
	
	eeprom_write_float( (float*)eepromAdr_TempSetPoint2, TempSetPoint2 );
    3eaa:	40 91 72 01 	lds	r20, 0x0172
    3eae:	50 91 73 01 	lds	r21, 0x0173
    3eb2:	60 91 74 01 	lds	r22, 0x0174
    3eb6:	70 91 75 01 	lds	r23, 0x0175
    3eba:	80 e2       	ldi	r24, 0x20	; 32
    3ebc:	90 e0       	ldi	r25, 0x00	; 0
    3ebe:	0d d6       	rcall	.+3098   	; 0x4ada <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_PgainCh2, Pgain_ch2 );
    3ec0:	40 91 6d 04 	lds	r20, 0x046D
    3ec4:	50 91 6e 04 	lds	r21, 0x046E
    3ec8:	60 91 6f 04 	lds	r22, 0x046F
    3ecc:	70 91 70 04 	lds	r23, 0x0470
    3ed0:	84 e2       	ldi	r24, 0x24	; 36
    3ed2:	90 e0       	ldi	r25, 0x00	; 0
    3ed4:	02 d6       	rcall	.+3076   	; 0x4ada <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_IgainCh2, Igain_ch2 );
    3ed6:	40 91 75 04 	lds	r20, 0x0475
    3eda:	50 91 76 04 	lds	r21, 0x0476
    3ede:	60 91 77 04 	lds	r22, 0x0477
    3ee2:	70 91 78 04 	lds	r23, 0x0478
    3ee6:	88 e2       	ldi	r24, 0x28	; 40
    3ee8:	90 e0       	ldi	r25, 0x00	; 0
    3eea:	f7 d5       	rcall	.+3054   	; 0x4ada <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_DgainCh2, Dgain_ch2 );
    3eec:	40 91 b2 04 	lds	r20, 0x04B2
    3ef0:	50 91 b3 04 	lds	r21, 0x04B3
    3ef4:	60 91 b4 04 	lds	r22, 0x04B4
    3ef8:	70 91 b5 04 	lds	r23, 0x04B5
    3efc:	8c e2       	ldi	r24, 0x2C	; 44
    3efe:	90 e0       	ldi	r25, 0x00	; 0
    3f00:	ec d5       	rcall	.+3032   	; 0x4ada <eeprom_write_dword>
	
	eeprom_write_float( (float*)eepromAdr_TempSetPoint3, TempSetPoint3 );
    3f02:	40 91 5a 01 	lds	r20, 0x015A
    3f06:	50 91 5b 01 	lds	r21, 0x015B
    3f0a:	60 91 5c 01 	lds	r22, 0x015C
    3f0e:	70 91 5d 01 	lds	r23, 0x015D
    3f12:	80 e3       	ldi	r24, 0x30	; 48
    3f14:	90 e0       	ldi	r25, 0x00	; 0
    3f16:	e1 d5       	rcall	.+3010   	; 0x4ada <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_PgainCh3, Pgain_ch3 );
    3f18:	40 91 0a 03 	lds	r20, 0x030A
    3f1c:	50 91 0b 03 	lds	r21, 0x030B
    3f20:	60 91 0c 03 	lds	r22, 0x030C
    3f24:	70 91 0d 03 	lds	r23, 0x030D
    3f28:	84 e3       	ldi	r24, 0x34	; 52
    3f2a:	90 e0       	ldi	r25, 0x00	; 0
    3f2c:	d6 d5       	rcall	.+2988   	; 0x4ada <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_IgainCh3, Igain_ch3 );
    3f2e:	40 91 fb 01 	lds	r20, 0x01FB
    3f32:	50 91 fc 01 	lds	r21, 0x01FC
    3f36:	60 91 fd 01 	lds	r22, 0x01FD
    3f3a:	70 91 fe 01 	lds	r23, 0x01FE
    3f3e:	88 e3       	ldi	r24, 0x38	; 56
    3f40:	90 e0       	ldi	r25, 0x00	; 0
    3f42:	cb d5       	rcall	.+2966   	; 0x4ada <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_DgainCh3, Dgain_ch3 );			
    3f44:	40 91 79 04 	lds	r20, 0x0479
    3f48:	50 91 7a 04 	lds	r21, 0x047A
    3f4c:	60 91 7b 04 	lds	r22, 0x047B
    3f50:	70 91 7c 04 	lds	r23, 0x047C
    3f54:	8c e3       	ldi	r24, 0x3C	; 60
    3f56:	90 e0       	ldi	r25, 0x00	; 0
    3f58:	c0 d5       	rcall	.+2944   	; 0x4ada <eeprom_write_dword>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    3f5a:	81 e2       	ldi	r24, 0x21	; 33
    3f5c:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    3f5e:	f5 01       	movw	r30, r10
    3f60:	81 81       	ldd	r24, Z+1	; 0x01
    3f62:	8f 8f       	std	Y+31, r24	; 0x1f
    3f64:	82 81       	ldd	r24, Z+2	; 0x02
    3f66:	88 a3       	std	Y+32, r24	; 0x20
    3f68:	83 81       	ldd	r24, Z+3	; 0x03
    3f6a:	89 a3       	std	Y+33, r24	; 0x21
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    3f6c:	1a a2       	std	Y+34, r1	; 0x22
    3f6e:	1b a2       	std	Y+35, r1	; 0x23
    3f70:	1c a2       	std	Y+36, r1	; 0x24
    3f72:	8e 01       	movw	r16, r28
    3f74:	02 5e       	subi	r16, 0xE2	; 226
    3f76:	1f 4f       	sbci	r17, 0xFF	; 255
    3f78:	ae 01       	movw	r20, r28
    3f7a:	4e 5d       	subi	r20, 0xDE	; 222
    3f7c:	5f 4f       	sbci	r21, 0xFF	; 255
    3f7e:	f8 01       	movw	r30, r16
    3f80:	80 e0       	ldi	r24, 0x00	; 0
    3f82:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    3f84:	b8 e0       	ldi	r27, 0x08	; 8
    3f86:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    3f88:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    3f8a:	29 2f       	mov	r18, r25
    3f8c:	33 27       	eor	r19, r19
    3f8e:	27 fd       	sbrc	r18, 7
    3f90:	3a 95       	dec	r19
    3f92:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
    3f94:	32 2f       	mov	r19, r18
    3f96:	22 27       	eor	r18, r18
    3f98:	6b 2f       	mov	r22, r27
    3f9a:	7f 2d       	mov	r23, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    3f9c:	33 23       	and	r19, r19
    3f9e:	3c f4       	brge	.+14     	; 0x3fae <main+0x25fc>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    3fa0:	22 0f       	add	r18, r18
    3fa2:	33 1f       	adc	r19, r19
    3fa4:	a1 e2       	ldi	r26, 0x21	; 33
    3fa6:	2a 27       	eor	r18, r26
    3fa8:	a0 e1       	ldi	r26, 0x10	; 16
    3faa:	3a 27       	eor	r19, r26
    3fac:	02 c0       	rjmp	.+4      	; 0x3fb2 <main+0x2600>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    3fae:	22 0f       	add	r18, r18
    3fb0:	33 1f       	adc	r19, r19
    3fb2:	61 50       	subi	r22, 0x01	; 1
    3fb4:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    3fb6:	91 f7       	brne	.-28     	; 0x3f9c <main+0x25ea>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    3fb8:	98 2f       	mov	r25, r24
    3fba:	88 27       	eor	r24, r24
    3fbc:	82 27       	eor	r24, r18
    3fbe:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    3fc0:	e4 17       	cp	r30, r20
    3fc2:	f5 07       	cpc	r31, r21
    3fc4:	09 f7       	brne	.-62     	; 0x3f88 <main+0x25d6>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    3fc6:	7c 01       	movw	r14, r24
    3fc8:	40 e1       	ldi	r20, 0x10	; 16
    3fca:	68 e6       	ldi	r22, 0x68	; 104
    3fcc:	74 e0       	ldi	r23, 0x04	; 4
    3fce:	c3 d3       	rcall	.+1926   	; 0x4756 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    3fd0:	88 e6       	ldi	r24, 0x68	; 104
    3fd2:	94 e0       	ldi	r25, 0x04	; 4
    3fd4:	b6 d3       	rcall	.+1900   	; 0x4742 <strupr>
	if(crcXmodem < 0x10)
    3fd6:	b0 e1       	ldi	r27, 0x10	; 16
    3fd8:	eb 16       	cp	r14, r27
    3fda:	f1 04       	cpc	r15, r1
    3fdc:	38 f4       	brcc	.+14     	; 0x3fec <main+0x263a>
	{
		tx_string[cnt+4] = crc[0];
    3fde:	80 91 68 04 	lds	r24, 0x0468
    3fe2:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = '0';
    3fe4:	80 e3       	ldi	r24, 0x30	; 48
    3fe6:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = '0';
    3fe8:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';
    3fea:	8a a3       	std	Y+34, r24	; 0x22
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    3fec:	c7 01       	movw	r24, r14
    3fee:	40 97       	sbiw	r24, 0x10	; 16
    3ff0:	80 3f       	cpi	r24, 0xF0	; 240
    3ff2:	91 05       	cpc	r25, r1
    3ff4:	48 f4       	brcc	.+18     	; 0x4008 <main+0x2656>
	{
		tx_string[cnt+4] = crc[1];
    3ff6:	e8 e6       	ldi	r30, 0x68	; 104
    3ff8:	f4 e0       	ldi	r31, 0x04	; 4
    3ffa:	81 81       	ldd	r24, Z+1	; 0x01
    3ffc:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[0];
    3ffe:	80 81       	ld	r24, Z
    4000:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = '0';
    4002:	80 e3       	ldi	r24, 0x30	; 48
    4004:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';		
    4006:	8a a3       	std	Y+34, r24	; 0x22
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    4008:	c7 01       	movw	r24, r14
    400a:	9a 95       	dec	r25
    400c:	81 15       	cp	r24, r1
    400e:	9f 40       	sbci	r25, 0x0F	; 15
    4010:	50 f4       	brcc	.+20     	; 0x4026 <main+0x2674>
	{
		tx_string[cnt+4] = crc[2];
    4012:	e8 e6       	ldi	r30, 0x68	; 104
    4014:	f4 e0       	ldi	r31, 0x04	; 4
    4016:	82 81       	ldd	r24, Z+2	; 0x02
    4018:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[1];
    401a:	81 81       	ldd	r24, Z+1	; 0x01
    401c:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = crc[0];
    401e:	80 81       	ld	r24, Z
    4020:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';		
    4022:	80 e3       	ldi	r24, 0x30	; 48
    4024:	8a a3       	std	Y+34, r24	; 0x22
	}
	if(crcXmodem >= 0x1000)
    4026:	e1 14       	cp	r14, r1
    4028:	f0 e1       	ldi	r31, 0x10	; 16
    402a:	ff 06       	cpc	r15, r31
    402c:	50 f0       	brcs	.+20     	; 0x4042 <main+0x2690>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    402e:	e8 e6       	ldi	r30, 0x68	; 104
    4030:	f4 e0       	ldi	r31, 0x04	; 4
    4032:	80 81       	ld	r24, Z
    4034:	8a a3       	std	Y+34, r24	; 0x22
		tx_string[cnt+2] = crc[1];
    4036:	81 81       	ldd	r24, Z+1	; 0x01
    4038:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+3] = crc[2];
    403a:	82 81       	ldd	r24, Z+2	; 0x02
    403c:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+4] = crc[3];
    403e:	83 81       	ldd	r24, Z+3	; 0x03
    4040:	8d a3       	std	Y+37, r24	; 0x25
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    4042:	8d e0       	ldi	r24, 0x0D	; 13
    4044:	8e a3       	std	Y+38, r24	; 0x26
    4046:	ae 01       	movw	r20, r28
    4048:	49 5d       	subi	r20, 0xD9	; 217
    404a:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    404c:	ec ed       	ldi	r30, 0xDC	; 220
    404e:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    4050:	0f 2e       	mov	r0, r31
    4052:	f1 ec       	ldi	r31, 0xC1	; 193
    4054:	cf 2e       	mov	r12, r31
    4056:	d1 2c       	mov	r13, r1
    4058:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    405a:	f1 2c       	mov	r15, r1
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    405c:	d8 01       	movw	r26, r16
    405e:	2d 91       	ld	r18, X+
    4060:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    4062:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    4064:	91 81       	ldd	r25, Z+1	; 0x01
    4066:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    4068:	98 13       	cpse	r25, r24
    406a:	04 c0       	rjmp	.+8      	; 0x4074 <main+0x26c2>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    406c:	d6 01       	movw	r26, r12
    406e:	8c 91       	ld	r24, X
    4070:	80 62       	ori	r24, 0x20	; 32
    4072:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    4074:	30 81       	ld	r19, Z
    4076:	83 81       	ldd	r24, Z+3	; 0x03
    4078:	94 81       	ldd	r25, Z+4	; 0x04
    407a:	83 0f       	add	r24, r19
    407c:	91 1d       	adc	r25, r1
    407e:	dc 01       	movw	r26, r24
    4080:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    4082:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    4084:	68 2f       	mov	r22, r24
    4086:	70 e0       	ldi	r23, 0x00	; 0
    4088:	22 81       	ldd	r18, Z+2	; 0x02
    408a:	30 e0       	ldi	r19, 0x00	; 0
    408c:	21 50       	subi	r18, 0x01	; 1
    408e:	31 09       	sbc	r19, r1
    4090:	62 17       	cp	r22, r18
    4092:	73 07       	cpc	r23, r19
    4094:	11 f0       	breq	.+4      	; 0x409a <main+0x26e8>
    4096:	8f 5f       	subi	r24, 0xFF	; 255
    4098:	01 c0       	rjmp	.+2      	; 0x409c <main+0x26ea>
    409a:	8f 2d       	mov	r24, r15
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    409c:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    409e:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    40a0:	04 17       	cp	r16, r20
    40a2:	15 07       	cpc	r17, r21
    40a4:	d9 f6       	brne	.-74     	; 0x405c <main+0x26aa>
    40a6:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <main+0x286>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    40aa:	81 e2       	ldi	r24, 0x21	; 33
    40ac:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    40ae:	f5 01       	movw	r30, r10
    40b0:	81 81       	ldd	r24, Z+1	; 0x01
    40b2:	8f 8f       	std	Y+31, r24	; 0x1f
    40b4:	82 81       	ldd	r24, Z+2	; 0x02
    40b6:	88 a3       	std	Y+32, r24	; 0x20
    40b8:	83 81       	ldd	r24, Z+3	; 0x03
    40ba:	89 a3       	std	Y+33, r24	; 0x21
    40bc:	ee e3       	ldi	r30, 0x3E	; 62
    40be:	f1 e0       	ldi	r31, 0x01	; 1
    40c0:	de 01       	movw	r26, r28
    40c2:	92 96       	adiw	r26, 0x22	; 34
    40c4:	88 e4       	ldi	r24, 0x48	; 72
    40c6:	91 e0       	ldi	r25, 0x01	; 1
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    40c8:	21 91       	ld	r18, Z+
    40ca:	2d 93       	st	X+, r18
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    40cc:	e8 17       	cp	r30, r24
    40ce:	f9 07       	cpc	r31, r25
    40d0:	d9 f7       	brne	.-10     	; 0x40c8 <main+0x2716>
    40d2:	8e 01       	movw	r16, r28
    40d4:	02 5e       	subi	r16, 0xE2	; 226
    40d6:	1f 4f       	sbci	r17, 0xFF	; 255
    40d8:	ae 01       	movw	r20, r28
    40da:	47 5d       	subi	r20, 0xD7	; 215
    40dc:	5f 4f       	sbci	r21, 0xFF	; 255
    40de:	f8 01       	movw	r30, r16
    40e0:	80 e0       	ldi	r24, 0x00	; 0
    40e2:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    40e4:	b8 e0       	ldi	r27, 0x08	; 8
    40e6:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    40e8:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    40ea:	29 2f       	mov	r18, r25
    40ec:	33 27       	eor	r19, r19
    40ee:	27 fd       	sbrc	r18, 7
    40f0:	3a 95       	dec	r19
    40f2:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
    40f4:	32 2f       	mov	r19, r18
    40f6:	22 27       	eor	r18, r18
    40f8:	6b 2f       	mov	r22, r27
    40fa:	7f 2d       	mov	r23, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    40fc:	33 23       	and	r19, r19
    40fe:	3c f4       	brge	.+14     	; 0x410e <main+0x275c>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    4100:	22 0f       	add	r18, r18
    4102:	33 1f       	adc	r19, r19
    4104:	a1 e2       	ldi	r26, 0x21	; 33
    4106:	2a 27       	eor	r18, r26
    4108:	a0 e1       	ldi	r26, 0x10	; 16
    410a:	3a 27       	eor	r19, r26
    410c:	02 c0       	rjmp	.+4      	; 0x4112 <main+0x2760>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    410e:	22 0f       	add	r18, r18
    4110:	33 1f       	adc	r19, r19
    4112:	61 50       	subi	r22, 0x01	; 1
    4114:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    4116:	91 f7       	brne	.-28     	; 0x40fc <main+0x274a>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    4118:	98 2f       	mov	r25, r24
    411a:	88 27       	eor	r24, r24
    411c:	82 27       	eor	r24, r18
    411e:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    4120:	e4 17       	cp	r30, r20
    4122:	f5 07       	cpc	r31, r21
    4124:	09 f7       	brne	.-62     	; 0x40e8 <main+0x2736>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    4126:	7c 01       	movw	r14, r24
    4128:	40 e1       	ldi	r20, 0x10	; 16
    412a:	68 e6       	ldi	r22, 0x68	; 104
    412c:	74 e0       	ldi	r23, 0x04	; 4
    412e:	13 d3       	rcall	.+1574   	; 0x4756 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    4130:	88 e6       	ldi	r24, 0x68	; 104
    4132:	94 e0       	ldi	r25, 0x04	; 4
    4134:	06 d3       	rcall	.+1548   	; 0x4742 <strupr>
	if(crcXmodem < 0x10)
    4136:	b0 e1       	ldi	r27, 0x10	; 16
    4138:	eb 16       	cp	r14, r27
    413a:	f1 04       	cpc	r15, r1
    413c:	38 f4       	brcc	.+14     	; 0x414c <main+0x279a>
	{
		tx_string[cnt+4] = crc[0];
    413e:	80 91 68 04 	lds	r24, 0x0468
    4142:	8c a7       	std	Y+44, r24	; 0x2c
		tx_string[cnt+3] = '0';
    4144:	80 e3       	ldi	r24, 0x30	; 48
    4146:	8b a7       	std	Y+43, r24	; 0x2b
		tx_string[cnt+2] = '0';
    4148:	8a a7       	std	Y+42, r24	; 0x2a
		tx_string[cnt+1] = '0';
    414a:	89 a7       	std	Y+41, r24	; 0x29
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    414c:	c7 01       	movw	r24, r14
    414e:	40 97       	sbiw	r24, 0x10	; 16
    4150:	80 3f       	cpi	r24, 0xF0	; 240
    4152:	91 05       	cpc	r25, r1
    4154:	48 f4       	brcc	.+18     	; 0x4168 <main+0x27b6>
	{
		tx_string[cnt+4] = crc[1];
    4156:	e8 e6       	ldi	r30, 0x68	; 104
    4158:	f4 e0       	ldi	r31, 0x04	; 4
    415a:	81 81       	ldd	r24, Z+1	; 0x01
    415c:	8c a7       	std	Y+44, r24	; 0x2c
		tx_string[cnt+3] = crc[0];
    415e:	80 81       	ld	r24, Z
    4160:	8b a7       	std	Y+43, r24	; 0x2b
		tx_string[cnt+2] = '0';
    4162:	80 e3       	ldi	r24, 0x30	; 48
    4164:	8a a7       	std	Y+42, r24	; 0x2a
		tx_string[cnt+1] = '0';		
    4166:	89 a7       	std	Y+41, r24	; 0x29
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    4168:	c7 01       	movw	r24, r14
    416a:	9a 95       	dec	r25
    416c:	81 15       	cp	r24, r1
    416e:	9f 40       	sbci	r25, 0x0F	; 15
    4170:	50 f4       	brcc	.+20     	; 0x4186 <main+0x27d4>
	{
		tx_string[cnt+4] = crc[2];
    4172:	e8 e6       	ldi	r30, 0x68	; 104
    4174:	f4 e0       	ldi	r31, 0x04	; 4
    4176:	82 81       	ldd	r24, Z+2	; 0x02
    4178:	8c a7       	std	Y+44, r24	; 0x2c
		tx_string[cnt+3] = crc[1];
    417a:	81 81       	ldd	r24, Z+1	; 0x01
    417c:	8b a7       	std	Y+43, r24	; 0x2b
		tx_string[cnt+2] = crc[0];
    417e:	80 81       	ld	r24, Z
    4180:	8a a7       	std	Y+42, r24	; 0x2a
		tx_string[cnt+1] = '0';		
    4182:	80 e3       	ldi	r24, 0x30	; 48
    4184:	89 a7       	std	Y+41, r24	; 0x29
	}
	if(crcXmodem >= 0x1000)
    4186:	e1 14       	cp	r14, r1
    4188:	f0 e1       	ldi	r31, 0x10	; 16
    418a:	ff 06       	cpc	r15, r31
    418c:	50 f0       	brcs	.+20     	; 0x41a2 <main+0x27f0>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    418e:	e8 e6       	ldi	r30, 0x68	; 104
    4190:	f4 e0       	ldi	r31, 0x04	; 4
    4192:	80 81       	ld	r24, Z
    4194:	89 a7       	std	Y+41, r24	; 0x29
		tx_string[cnt+2] = crc[1];
    4196:	81 81       	ldd	r24, Z+1	; 0x01
    4198:	8a a7       	std	Y+42, r24	; 0x2a
		tx_string[cnt+3] = crc[2];
    419a:	82 81       	ldd	r24, Z+2	; 0x02
    419c:	8b a7       	std	Y+43, r24	; 0x2b
		tx_string[cnt+4] = crc[3];
    419e:	83 81       	ldd	r24, Z+3	; 0x03
    41a0:	8c a7       	std	Y+44, r24	; 0x2c
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    41a2:	8d e0       	ldi	r24, 0x0D	; 13
    41a4:	8d a7       	std	Y+45, r24	; 0x2d
    41a6:	ae 01       	movw	r20, r28
    41a8:	42 5d       	subi	r20, 0xD2	; 210
    41aa:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    41ac:	ec ed       	ldi	r30, 0xDC	; 220
    41ae:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    41b0:	0f 2e       	mov	r0, r31
    41b2:	f1 ec       	ldi	r31, 0xC1	; 193
    41b4:	cf 2e       	mov	r12, r31
    41b6:	d1 2c       	mov	r13, r1
    41b8:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    41ba:	f1 2c       	mov	r15, r1
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    41bc:	d8 01       	movw	r26, r16
    41be:	2d 91       	ld	r18, X+
    41c0:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    41c2:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    41c4:	91 81       	ldd	r25, Z+1	; 0x01
    41c6:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    41c8:	98 13       	cpse	r25, r24
    41ca:	04 c0       	rjmp	.+8      	; 0x41d4 <main+0x2822>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    41cc:	d6 01       	movw	r26, r12
    41ce:	8c 91       	ld	r24, X
    41d0:	80 62       	ori	r24, 0x20	; 32
    41d2:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    41d4:	30 81       	ld	r19, Z
    41d6:	83 81       	ldd	r24, Z+3	; 0x03
    41d8:	94 81       	ldd	r25, Z+4	; 0x04
    41da:	83 0f       	add	r24, r19
    41dc:	91 1d       	adc	r25, r1
    41de:	dc 01       	movw	r26, r24
    41e0:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    41e2:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    41e4:	68 2f       	mov	r22, r24
    41e6:	70 e0       	ldi	r23, 0x00	; 0
    41e8:	22 81       	ldd	r18, Z+2	; 0x02
    41ea:	30 e0       	ldi	r19, 0x00	; 0
    41ec:	21 50       	subi	r18, 0x01	; 1
    41ee:	31 09       	sbc	r19, r1
    41f0:	62 17       	cp	r22, r18
    41f2:	73 07       	cpc	r23, r19
    41f4:	11 f0       	breq	.+4      	; 0x41fa <main+0x2848>
    41f6:	8f 5f       	subi	r24, 0xFF	; 255
    41f8:	01 c0       	rjmp	.+2      	; 0x41fc <main+0x284a>
    41fa:	8f 2d       	mov	r24, r15
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    41fc:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    41fe:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    4200:	04 17       	cp	r16, r20
    4202:	15 07       	cpc	r17, r21
    4204:	d9 f6       	brne	.-74     	; 0x41bc <main+0x280a>
    4206:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <main+0x286>
						var = atol(requestID);
						SetParameter(atol(requestID));
					}
					else
					{
						printStatus("CRC error");
    420a:	8f e1       	ldi	r24, 0x1F	; 31
    420c:	91 e0       	ldi	r25, 0x01	; 1
    420e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    4212:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <main+0x286>
    4216:	40 e1       	ldi	r20, 0x10	; 16
    4218:	68 e6       	ldi	r22, 0x68	; 104
    421a:	74 e0       	ldi	r23, 0x04	; 4
    421c:	80 e0       	ldi	r24, 0x00	; 0
    421e:	90 e0       	ldi	r25, 0x00	; 0
    4220:	9a d2       	rcall	.+1332   	; 0x4756 <__itoa_ncheck>
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    4222:	88 e6       	ldi	r24, 0x68	; 104
    4224:	94 e0       	ldi	r25, 0x04	; 4
    4226:	8d d2       	rcall	.+1306   	; 0x4742 <strupr>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    4228:	c1 2c       	mov	r12, r1
    422a:	d1 2c       	mov	r13, r1
    422c:	0c 94 a4 0f 	jmp	0x1f48	; 0x1f48 <main+0x596>
    4230:	40 e1       	ldi	r20, 0x10	; 16
    4232:	68 e6       	ldi	r22, 0x68	; 104
    4234:	74 e0       	ldi	r23, 0x04	; 4
    4236:	80 e0       	ldi	r24, 0x00	; 0
    4238:	90 e0       	ldi	r25, 0x00	; 0
    423a:	8d d2       	rcall	.+1306   	; 0x4756 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    423c:	88 e6       	ldi	r24, 0x68	; 104
    423e:	94 e0       	ldi	r25, 0x04	; 4
    4240:	80 d2       	rcall	.+1280   	; 0x4742 <strupr>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    4242:	c1 2c       	mov	r12, r1
    4244:	d1 2c       	mov	r13, r1
    4246:	0c 94 bf 10 	jmp	0x217e	; 0x217e <main+0x7cc>
    424a:	40 e1       	ldi	r20, 0x10	; 16
    424c:	68 e6       	ldi	r22, 0x68	; 104
    424e:	74 e0       	ldi	r23, 0x04	; 4
    4250:	80 e0       	ldi	r24, 0x00	; 0
    4252:	90 e0       	ldi	r25, 0x00	; 0
    4254:	80 d2       	rcall	.+1280   	; 0x4756 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    4256:	88 e6       	ldi	r24, 0x68	; 104
    4258:	94 e0       	ldi	r25, 0x04	; 4
    425a:	73 d2       	rcall	.+1254   	; 0x4742 <strupr>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    425c:	c1 2c       	mov	r12, r1
    425e:	d1 2c       	mov	r13, r1
    4260:	0c 94 da 11 	jmp	0x23b4	; 0x23b4 <main+0xa02>
    4264:	40 e1       	ldi	r20, 0x10	; 16
    4266:	68 e6       	ldi	r22, 0x68	; 104
    4268:	74 e0       	ldi	r23, 0x04	; 4
    426a:	80 e0       	ldi	r24, 0x00	; 0
    426c:	90 e0       	ldi	r25, 0x00	; 0
    426e:	73 d2       	rcall	.+1254   	; 0x4756 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    4270:	88 e6       	ldi	r24, 0x68	; 104
    4272:	94 e0       	ldi	r25, 0x04	; 4
    4274:	66 d2       	rcall	.+1228   	; 0x4742 <strupr>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    4276:	c1 2c       	mov	r12, r1
    4278:	d1 2c       	mov	r13, r1
    427a:	0c 94 f5 12 	jmp	0x25ea	; 0x25ea <main+0xc38>
    427e:	40 e1       	ldi	r20, 0x10	; 16
    4280:	68 e6       	ldi	r22, 0x68	; 104
    4282:	74 e0       	ldi	r23, 0x04	; 4
    4284:	80 e0       	ldi	r24, 0x00	; 0
    4286:	90 e0       	ldi	r25, 0x00	; 0
    4288:	66 d2       	rcall	.+1228   	; 0x4756 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    428a:	88 e6       	ldi	r24, 0x68	; 104
    428c:	94 e0       	ldi	r25, 0x04	; 4
    428e:	59 d2       	rcall	.+1202   	; 0x4742 <strupr>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    4290:	c1 2c       	mov	r12, r1
    4292:	d1 2c       	mov	r13, r1
    4294:	0c 94 05 15 	jmp	0x2a0a	; 0x2a0a <main+0x1058>

00004298 <__subsf3>:
    4298:	50 58       	subi	r21, 0x80	; 128

0000429a <__addsf3>:
    429a:	bb 27       	eor	r27, r27
    429c:	aa 27       	eor	r26, r26
    429e:	0e d0       	rcall	.+28     	; 0x42bc <__addsf3x>
    42a0:	0d c1       	rjmp	.+538    	; 0x44bc <__fp_round>
    42a2:	fe d0       	rcall	.+508    	; 0x44a0 <__fp_pscA>
    42a4:	30 f0       	brcs	.+12     	; 0x42b2 <__addsf3+0x18>
    42a6:	03 d1       	rcall	.+518    	; 0x44ae <__fp_pscB>
    42a8:	20 f0       	brcs	.+8      	; 0x42b2 <__addsf3+0x18>
    42aa:	31 f4       	brne	.+12     	; 0x42b8 <__addsf3+0x1e>
    42ac:	9f 3f       	cpi	r25, 0xFF	; 255
    42ae:	11 f4       	brne	.+4      	; 0x42b4 <__addsf3+0x1a>
    42b0:	1e f4       	brtc	.+6      	; 0x42b8 <__addsf3+0x1e>
    42b2:	f3 c0       	rjmp	.+486    	; 0x449a <__fp_nan>
    42b4:	0e f4       	brtc	.+2      	; 0x42b8 <__addsf3+0x1e>
    42b6:	e0 95       	com	r30
    42b8:	e7 fb       	bst	r30, 7
    42ba:	e9 c0       	rjmp	.+466    	; 0x448e <__fp_inf>

000042bc <__addsf3x>:
    42bc:	e9 2f       	mov	r30, r25
    42be:	0f d1       	rcall	.+542    	; 0x44de <__fp_split3>
    42c0:	80 f3       	brcs	.-32     	; 0x42a2 <__addsf3+0x8>
    42c2:	ba 17       	cp	r27, r26
    42c4:	62 07       	cpc	r22, r18
    42c6:	73 07       	cpc	r23, r19
    42c8:	84 07       	cpc	r24, r20
    42ca:	95 07       	cpc	r25, r21
    42cc:	18 f0       	brcs	.+6      	; 0x42d4 <__addsf3x+0x18>
    42ce:	71 f4       	brne	.+28     	; 0x42ec <__addsf3x+0x30>
    42d0:	9e f5       	brtc	.+102    	; 0x4338 <__addsf3x+0x7c>
    42d2:	27 c1       	rjmp	.+590    	; 0x4522 <__fp_zero>
    42d4:	0e f4       	brtc	.+2      	; 0x42d8 <__addsf3x+0x1c>
    42d6:	e0 95       	com	r30
    42d8:	0b 2e       	mov	r0, r27
    42da:	ba 2f       	mov	r27, r26
    42dc:	a0 2d       	mov	r26, r0
    42de:	0b 01       	movw	r0, r22
    42e0:	b9 01       	movw	r22, r18
    42e2:	90 01       	movw	r18, r0
    42e4:	0c 01       	movw	r0, r24
    42e6:	ca 01       	movw	r24, r20
    42e8:	a0 01       	movw	r20, r0
    42ea:	11 24       	eor	r1, r1
    42ec:	ff 27       	eor	r31, r31
    42ee:	59 1b       	sub	r21, r25
    42f0:	99 f0       	breq	.+38     	; 0x4318 <__addsf3x+0x5c>
    42f2:	59 3f       	cpi	r21, 0xF9	; 249
    42f4:	50 f4       	brcc	.+20     	; 0x430a <__addsf3x+0x4e>
    42f6:	50 3e       	cpi	r21, 0xE0	; 224
    42f8:	68 f1       	brcs	.+90     	; 0x4354 <__addsf3x+0x98>
    42fa:	1a 16       	cp	r1, r26
    42fc:	f0 40       	sbci	r31, 0x00	; 0
    42fe:	a2 2f       	mov	r26, r18
    4300:	23 2f       	mov	r18, r19
    4302:	34 2f       	mov	r19, r20
    4304:	44 27       	eor	r20, r20
    4306:	58 5f       	subi	r21, 0xF8	; 248
    4308:	f3 cf       	rjmp	.-26     	; 0x42f0 <__addsf3x+0x34>
    430a:	46 95       	lsr	r20
    430c:	37 95       	ror	r19
    430e:	27 95       	ror	r18
    4310:	a7 95       	ror	r26
    4312:	f0 40       	sbci	r31, 0x00	; 0
    4314:	53 95       	inc	r21
    4316:	c9 f7       	brne	.-14     	; 0x430a <__addsf3x+0x4e>
    4318:	7e f4       	brtc	.+30     	; 0x4338 <__addsf3x+0x7c>
    431a:	1f 16       	cp	r1, r31
    431c:	ba 0b       	sbc	r27, r26
    431e:	62 0b       	sbc	r22, r18
    4320:	73 0b       	sbc	r23, r19
    4322:	84 0b       	sbc	r24, r20
    4324:	ba f0       	brmi	.+46     	; 0x4354 <__addsf3x+0x98>
    4326:	91 50       	subi	r25, 0x01	; 1
    4328:	a1 f0       	breq	.+40     	; 0x4352 <__addsf3x+0x96>
    432a:	ff 0f       	add	r31, r31
    432c:	bb 1f       	adc	r27, r27
    432e:	66 1f       	adc	r22, r22
    4330:	77 1f       	adc	r23, r23
    4332:	88 1f       	adc	r24, r24
    4334:	c2 f7       	brpl	.-16     	; 0x4326 <__addsf3x+0x6a>
    4336:	0e c0       	rjmp	.+28     	; 0x4354 <__addsf3x+0x98>
    4338:	ba 0f       	add	r27, r26
    433a:	62 1f       	adc	r22, r18
    433c:	73 1f       	adc	r23, r19
    433e:	84 1f       	adc	r24, r20
    4340:	48 f4       	brcc	.+18     	; 0x4354 <__addsf3x+0x98>
    4342:	87 95       	ror	r24
    4344:	77 95       	ror	r23
    4346:	67 95       	ror	r22
    4348:	b7 95       	ror	r27
    434a:	f7 95       	ror	r31
    434c:	9e 3f       	cpi	r25, 0xFE	; 254
    434e:	08 f0       	brcs	.+2      	; 0x4352 <__addsf3x+0x96>
    4350:	b3 cf       	rjmp	.-154    	; 0x42b8 <__addsf3+0x1e>
    4352:	93 95       	inc	r25
    4354:	88 0f       	add	r24, r24
    4356:	08 f0       	brcs	.+2      	; 0x435a <__addsf3x+0x9e>
    4358:	99 27       	eor	r25, r25
    435a:	ee 0f       	add	r30, r30
    435c:	97 95       	ror	r25
    435e:	87 95       	ror	r24
    4360:	08 95       	ret

00004362 <__cmpsf2>:
    4362:	71 d0       	rcall	.+226    	; 0x4446 <__fp_cmp>
    4364:	08 f4       	brcc	.+2      	; 0x4368 <__cmpsf2+0x6>
    4366:	81 e0       	ldi	r24, 0x01	; 1
    4368:	08 95       	ret

0000436a <__fixsfsi>:
    436a:	04 d0       	rcall	.+8      	; 0x4374 <__fixunssfsi>
    436c:	68 94       	set
    436e:	b1 11       	cpse	r27, r1
    4370:	d9 c0       	rjmp	.+434    	; 0x4524 <__fp_szero>
    4372:	08 95       	ret

00004374 <__fixunssfsi>:
    4374:	bc d0       	rcall	.+376    	; 0x44ee <__fp_splitA>
    4376:	88 f0       	brcs	.+34     	; 0x439a <__fixunssfsi+0x26>
    4378:	9f 57       	subi	r25, 0x7F	; 127
    437a:	90 f0       	brcs	.+36     	; 0x43a0 <__fixunssfsi+0x2c>
    437c:	b9 2f       	mov	r27, r25
    437e:	99 27       	eor	r25, r25
    4380:	b7 51       	subi	r27, 0x17	; 23
    4382:	a0 f0       	brcs	.+40     	; 0x43ac <__fixunssfsi+0x38>
    4384:	d1 f0       	breq	.+52     	; 0x43ba <__fixunssfsi+0x46>
    4386:	66 0f       	add	r22, r22
    4388:	77 1f       	adc	r23, r23
    438a:	88 1f       	adc	r24, r24
    438c:	99 1f       	adc	r25, r25
    438e:	1a f0       	brmi	.+6      	; 0x4396 <__fixunssfsi+0x22>
    4390:	ba 95       	dec	r27
    4392:	c9 f7       	brne	.-14     	; 0x4386 <__fixunssfsi+0x12>
    4394:	12 c0       	rjmp	.+36     	; 0x43ba <__fixunssfsi+0x46>
    4396:	b1 30       	cpi	r27, 0x01	; 1
    4398:	81 f0       	breq	.+32     	; 0x43ba <__fixunssfsi+0x46>
    439a:	c3 d0       	rcall	.+390    	; 0x4522 <__fp_zero>
    439c:	b1 e0       	ldi	r27, 0x01	; 1
    439e:	08 95       	ret
    43a0:	c0 c0       	rjmp	.+384    	; 0x4522 <__fp_zero>
    43a2:	67 2f       	mov	r22, r23
    43a4:	78 2f       	mov	r23, r24
    43a6:	88 27       	eor	r24, r24
    43a8:	b8 5f       	subi	r27, 0xF8	; 248
    43aa:	39 f0       	breq	.+14     	; 0x43ba <__fixunssfsi+0x46>
    43ac:	b9 3f       	cpi	r27, 0xF9	; 249
    43ae:	cc f3       	brlt	.-14     	; 0x43a2 <__fixunssfsi+0x2e>
    43b0:	86 95       	lsr	r24
    43b2:	77 95       	ror	r23
    43b4:	67 95       	ror	r22
    43b6:	b3 95       	inc	r27
    43b8:	d9 f7       	brne	.-10     	; 0x43b0 <__fixunssfsi+0x3c>
    43ba:	3e f4       	brtc	.+14     	; 0x43ca <__fixunssfsi+0x56>
    43bc:	90 95       	com	r25
    43be:	80 95       	com	r24
    43c0:	70 95       	com	r23
    43c2:	61 95       	neg	r22
    43c4:	7f 4f       	sbci	r23, 0xFF	; 255
    43c6:	8f 4f       	sbci	r24, 0xFF	; 255
    43c8:	9f 4f       	sbci	r25, 0xFF	; 255
    43ca:	08 95       	ret

000043cc <__floatunsisf>:
    43cc:	e8 94       	clt
    43ce:	09 c0       	rjmp	.+18     	; 0x43e2 <__floatsisf+0x12>

000043d0 <__floatsisf>:
    43d0:	97 fb       	bst	r25, 7
    43d2:	3e f4       	brtc	.+14     	; 0x43e2 <__floatsisf+0x12>
    43d4:	90 95       	com	r25
    43d6:	80 95       	com	r24
    43d8:	70 95       	com	r23
    43da:	61 95       	neg	r22
    43dc:	7f 4f       	sbci	r23, 0xFF	; 255
    43de:	8f 4f       	sbci	r24, 0xFF	; 255
    43e0:	9f 4f       	sbci	r25, 0xFF	; 255
    43e2:	99 23       	and	r25, r25
    43e4:	a9 f0       	breq	.+42     	; 0x4410 <__floatsisf+0x40>
    43e6:	f9 2f       	mov	r31, r25
    43e8:	96 e9       	ldi	r25, 0x96	; 150
    43ea:	bb 27       	eor	r27, r27
    43ec:	93 95       	inc	r25
    43ee:	f6 95       	lsr	r31
    43f0:	87 95       	ror	r24
    43f2:	77 95       	ror	r23
    43f4:	67 95       	ror	r22
    43f6:	b7 95       	ror	r27
    43f8:	f1 11       	cpse	r31, r1
    43fa:	f8 cf       	rjmp	.-16     	; 0x43ec <__floatsisf+0x1c>
    43fc:	fa f4       	brpl	.+62     	; 0x443c <__floatsisf+0x6c>
    43fe:	bb 0f       	add	r27, r27
    4400:	11 f4       	brne	.+4      	; 0x4406 <__floatsisf+0x36>
    4402:	60 ff       	sbrs	r22, 0
    4404:	1b c0       	rjmp	.+54     	; 0x443c <__floatsisf+0x6c>
    4406:	6f 5f       	subi	r22, 0xFF	; 255
    4408:	7f 4f       	sbci	r23, 0xFF	; 255
    440a:	8f 4f       	sbci	r24, 0xFF	; 255
    440c:	9f 4f       	sbci	r25, 0xFF	; 255
    440e:	16 c0       	rjmp	.+44     	; 0x443c <__floatsisf+0x6c>
    4410:	88 23       	and	r24, r24
    4412:	11 f0       	breq	.+4      	; 0x4418 <__floatsisf+0x48>
    4414:	96 e9       	ldi	r25, 0x96	; 150
    4416:	11 c0       	rjmp	.+34     	; 0x443a <__floatsisf+0x6a>
    4418:	77 23       	and	r23, r23
    441a:	21 f0       	breq	.+8      	; 0x4424 <__floatsisf+0x54>
    441c:	9e e8       	ldi	r25, 0x8E	; 142
    441e:	87 2f       	mov	r24, r23
    4420:	76 2f       	mov	r23, r22
    4422:	05 c0       	rjmp	.+10     	; 0x442e <__floatsisf+0x5e>
    4424:	66 23       	and	r22, r22
    4426:	71 f0       	breq	.+28     	; 0x4444 <__floatsisf+0x74>
    4428:	96 e8       	ldi	r25, 0x86	; 134
    442a:	86 2f       	mov	r24, r22
    442c:	70 e0       	ldi	r23, 0x00	; 0
    442e:	60 e0       	ldi	r22, 0x00	; 0
    4430:	2a f0       	brmi	.+10     	; 0x443c <__floatsisf+0x6c>
    4432:	9a 95       	dec	r25
    4434:	66 0f       	add	r22, r22
    4436:	77 1f       	adc	r23, r23
    4438:	88 1f       	adc	r24, r24
    443a:	da f7       	brpl	.-10     	; 0x4432 <__floatsisf+0x62>
    443c:	88 0f       	add	r24, r24
    443e:	96 95       	lsr	r25
    4440:	87 95       	ror	r24
    4442:	97 f9       	bld	r25, 7
    4444:	08 95       	ret

00004446 <__fp_cmp>:
    4446:	99 0f       	add	r25, r25
    4448:	00 08       	sbc	r0, r0
    444a:	55 0f       	add	r21, r21
    444c:	aa 0b       	sbc	r26, r26
    444e:	e0 e8       	ldi	r30, 0x80	; 128
    4450:	fe ef       	ldi	r31, 0xFE	; 254
    4452:	16 16       	cp	r1, r22
    4454:	17 06       	cpc	r1, r23
    4456:	e8 07       	cpc	r30, r24
    4458:	f9 07       	cpc	r31, r25
    445a:	c0 f0       	brcs	.+48     	; 0x448c <__fp_cmp+0x46>
    445c:	12 16       	cp	r1, r18
    445e:	13 06       	cpc	r1, r19
    4460:	e4 07       	cpc	r30, r20
    4462:	f5 07       	cpc	r31, r21
    4464:	98 f0       	brcs	.+38     	; 0x448c <__fp_cmp+0x46>
    4466:	62 1b       	sub	r22, r18
    4468:	73 0b       	sbc	r23, r19
    446a:	84 0b       	sbc	r24, r20
    446c:	95 0b       	sbc	r25, r21
    446e:	39 f4       	brne	.+14     	; 0x447e <__fp_cmp+0x38>
    4470:	0a 26       	eor	r0, r26
    4472:	61 f0       	breq	.+24     	; 0x448c <__fp_cmp+0x46>
    4474:	23 2b       	or	r18, r19
    4476:	24 2b       	or	r18, r20
    4478:	25 2b       	or	r18, r21
    447a:	21 f4       	brne	.+8      	; 0x4484 <__fp_cmp+0x3e>
    447c:	08 95       	ret
    447e:	0a 26       	eor	r0, r26
    4480:	09 f4       	brne	.+2      	; 0x4484 <__fp_cmp+0x3e>
    4482:	a1 40       	sbci	r26, 0x01	; 1
    4484:	a6 95       	lsr	r26
    4486:	8f ef       	ldi	r24, 0xFF	; 255
    4488:	81 1d       	adc	r24, r1
    448a:	81 1d       	adc	r24, r1
    448c:	08 95       	ret

0000448e <__fp_inf>:
    448e:	97 f9       	bld	r25, 7
    4490:	9f 67       	ori	r25, 0x7F	; 127
    4492:	80 e8       	ldi	r24, 0x80	; 128
    4494:	70 e0       	ldi	r23, 0x00	; 0
    4496:	60 e0       	ldi	r22, 0x00	; 0
    4498:	08 95       	ret

0000449a <__fp_nan>:
    449a:	9f ef       	ldi	r25, 0xFF	; 255
    449c:	80 ec       	ldi	r24, 0xC0	; 192
    449e:	08 95       	ret

000044a0 <__fp_pscA>:
    44a0:	00 24       	eor	r0, r0
    44a2:	0a 94       	dec	r0
    44a4:	16 16       	cp	r1, r22
    44a6:	17 06       	cpc	r1, r23
    44a8:	18 06       	cpc	r1, r24
    44aa:	09 06       	cpc	r0, r25
    44ac:	08 95       	ret

000044ae <__fp_pscB>:
    44ae:	00 24       	eor	r0, r0
    44b0:	0a 94       	dec	r0
    44b2:	12 16       	cp	r1, r18
    44b4:	13 06       	cpc	r1, r19
    44b6:	14 06       	cpc	r1, r20
    44b8:	05 06       	cpc	r0, r21
    44ba:	08 95       	ret

000044bc <__fp_round>:
    44bc:	09 2e       	mov	r0, r25
    44be:	03 94       	inc	r0
    44c0:	00 0c       	add	r0, r0
    44c2:	11 f4       	brne	.+4      	; 0x44c8 <__fp_round+0xc>
    44c4:	88 23       	and	r24, r24
    44c6:	52 f0       	brmi	.+20     	; 0x44dc <__fp_round+0x20>
    44c8:	bb 0f       	add	r27, r27
    44ca:	40 f4       	brcc	.+16     	; 0x44dc <__fp_round+0x20>
    44cc:	bf 2b       	or	r27, r31
    44ce:	11 f4       	brne	.+4      	; 0x44d4 <__fp_round+0x18>
    44d0:	60 ff       	sbrs	r22, 0
    44d2:	04 c0       	rjmp	.+8      	; 0x44dc <__fp_round+0x20>
    44d4:	6f 5f       	subi	r22, 0xFF	; 255
    44d6:	7f 4f       	sbci	r23, 0xFF	; 255
    44d8:	8f 4f       	sbci	r24, 0xFF	; 255
    44da:	9f 4f       	sbci	r25, 0xFF	; 255
    44dc:	08 95       	ret

000044de <__fp_split3>:
    44de:	57 fd       	sbrc	r21, 7
    44e0:	90 58       	subi	r25, 0x80	; 128
    44e2:	44 0f       	add	r20, r20
    44e4:	55 1f       	adc	r21, r21
    44e6:	59 f0       	breq	.+22     	; 0x44fe <__fp_splitA+0x10>
    44e8:	5f 3f       	cpi	r21, 0xFF	; 255
    44ea:	71 f0       	breq	.+28     	; 0x4508 <__fp_splitA+0x1a>
    44ec:	47 95       	ror	r20

000044ee <__fp_splitA>:
    44ee:	88 0f       	add	r24, r24
    44f0:	97 fb       	bst	r25, 7
    44f2:	99 1f       	adc	r25, r25
    44f4:	61 f0       	breq	.+24     	; 0x450e <__fp_splitA+0x20>
    44f6:	9f 3f       	cpi	r25, 0xFF	; 255
    44f8:	79 f0       	breq	.+30     	; 0x4518 <__fp_splitA+0x2a>
    44fa:	87 95       	ror	r24
    44fc:	08 95       	ret
    44fe:	12 16       	cp	r1, r18
    4500:	13 06       	cpc	r1, r19
    4502:	14 06       	cpc	r1, r20
    4504:	55 1f       	adc	r21, r21
    4506:	f2 cf       	rjmp	.-28     	; 0x44ec <__fp_split3+0xe>
    4508:	46 95       	lsr	r20
    450a:	f1 df       	rcall	.-30     	; 0x44ee <__fp_splitA>
    450c:	08 c0       	rjmp	.+16     	; 0x451e <__fp_splitA+0x30>
    450e:	16 16       	cp	r1, r22
    4510:	17 06       	cpc	r1, r23
    4512:	18 06       	cpc	r1, r24
    4514:	99 1f       	adc	r25, r25
    4516:	f1 cf       	rjmp	.-30     	; 0x44fa <__fp_splitA+0xc>
    4518:	86 95       	lsr	r24
    451a:	71 05       	cpc	r23, r1
    451c:	61 05       	cpc	r22, r1
    451e:	08 94       	sec
    4520:	08 95       	ret

00004522 <__fp_zero>:
    4522:	e8 94       	clt

00004524 <__fp_szero>:
    4524:	bb 27       	eor	r27, r27
    4526:	66 27       	eor	r22, r22
    4528:	77 27       	eor	r23, r23
    452a:	cb 01       	movw	r24, r22
    452c:	97 f9       	bld	r25, 7
    452e:	08 95       	ret

00004530 <__gesf2>:
    4530:	8a df       	rcall	.-236    	; 0x4446 <__fp_cmp>
    4532:	08 f4       	brcc	.+2      	; 0x4536 <__gesf2+0x6>
    4534:	8f ef       	ldi	r24, 0xFF	; 255
    4536:	08 95       	ret

00004538 <__mulsf3>:
    4538:	0b d0       	rcall	.+22     	; 0x4550 <__mulsf3x>
    453a:	c0 cf       	rjmp	.-128    	; 0x44bc <__fp_round>
    453c:	b1 df       	rcall	.-158    	; 0x44a0 <__fp_pscA>
    453e:	28 f0       	brcs	.+10     	; 0x454a <__mulsf3+0x12>
    4540:	b6 df       	rcall	.-148    	; 0x44ae <__fp_pscB>
    4542:	18 f0       	brcs	.+6      	; 0x454a <__mulsf3+0x12>
    4544:	95 23       	and	r25, r21
    4546:	09 f0       	breq	.+2      	; 0x454a <__mulsf3+0x12>
    4548:	a2 cf       	rjmp	.-188    	; 0x448e <__fp_inf>
    454a:	a7 cf       	rjmp	.-178    	; 0x449a <__fp_nan>
    454c:	11 24       	eor	r1, r1
    454e:	ea cf       	rjmp	.-44     	; 0x4524 <__fp_szero>

00004550 <__mulsf3x>:
    4550:	c6 df       	rcall	.-116    	; 0x44de <__fp_split3>
    4552:	a0 f3       	brcs	.-24     	; 0x453c <__mulsf3+0x4>

00004554 <__mulsf3_pse>:
    4554:	95 9f       	mul	r25, r21
    4556:	d1 f3       	breq	.-12     	; 0x454c <__mulsf3+0x14>
    4558:	95 0f       	add	r25, r21
    455a:	50 e0       	ldi	r21, 0x00	; 0
    455c:	55 1f       	adc	r21, r21
    455e:	62 9f       	mul	r22, r18
    4560:	f0 01       	movw	r30, r0
    4562:	72 9f       	mul	r23, r18
    4564:	bb 27       	eor	r27, r27
    4566:	f0 0d       	add	r31, r0
    4568:	b1 1d       	adc	r27, r1
    456a:	63 9f       	mul	r22, r19
    456c:	aa 27       	eor	r26, r26
    456e:	f0 0d       	add	r31, r0
    4570:	b1 1d       	adc	r27, r1
    4572:	aa 1f       	adc	r26, r26
    4574:	64 9f       	mul	r22, r20
    4576:	66 27       	eor	r22, r22
    4578:	b0 0d       	add	r27, r0
    457a:	a1 1d       	adc	r26, r1
    457c:	66 1f       	adc	r22, r22
    457e:	82 9f       	mul	r24, r18
    4580:	22 27       	eor	r18, r18
    4582:	b0 0d       	add	r27, r0
    4584:	a1 1d       	adc	r26, r1
    4586:	62 1f       	adc	r22, r18
    4588:	73 9f       	mul	r23, r19
    458a:	b0 0d       	add	r27, r0
    458c:	a1 1d       	adc	r26, r1
    458e:	62 1f       	adc	r22, r18
    4590:	83 9f       	mul	r24, r19
    4592:	a0 0d       	add	r26, r0
    4594:	61 1d       	adc	r22, r1
    4596:	22 1f       	adc	r18, r18
    4598:	74 9f       	mul	r23, r20
    459a:	33 27       	eor	r19, r19
    459c:	a0 0d       	add	r26, r0
    459e:	61 1d       	adc	r22, r1
    45a0:	23 1f       	adc	r18, r19
    45a2:	84 9f       	mul	r24, r20
    45a4:	60 0d       	add	r22, r0
    45a6:	21 1d       	adc	r18, r1
    45a8:	82 2f       	mov	r24, r18
    45aa:	76 2f       	mov	r23, r22
    45ac:	6a 2f       	mov	r22, r26
    45ae:	11 24       	eor	r1, r1
    45b0:	9f 57       	subi	r25, 0x7F	; 127
    45b2:	50 40       	sbci	r21, 0x00	; 0
    45b4:	8a f0       	brmi	.+34     	; 0x45d8 <__mulsf3_pse+0x84>
    45b6:	e1 f0       	breq	.+56     	; 0x45f0 <__mulsf3_pse+0x9c>
    45b8:	88 23       	and	r24, r24
    45ba:	4a f0       	brmi	.+18     	; 0x45ce <__mulsf3_pse+0x7a>
    45bc:	ee 0f       	add	r30, r30
    45be:	ff 1f       	adc	r31, r31
    45c0:	bb 1f       	adc	r27, r27
    45c2:	66 1f       	adc	r22, r22
    45c4:	77 1f       	adc	r23, r23
    45c6:	88 1f       	adc	r24, r24
    45c8:	91 50       	subi	r25, 0x01	; 1
    45ca:	50 40       	sbci	r21, 0x00	; 0
    45cc:	a9 f7       	brne	.-22     	; 0x45b8 <__mulsf3_pse+0x64>
    45ce:	9e 3f       	cpi	r25, 0xFE	; 254
    45d0:	51 05       	cpc	r21, r1
    45d2:	70 f0       	brcs	.+28     	; 0x45f0 <__mulsf3_pse+0x9c>
    45d4:	5c cf       	rjmp	.-328    	; 0x448e <__fp_inf>
    45d6:	a6 cf       	rjmp	.-180    	; 0x4524 <__fp_szero>
    45d8:	5f 3f       	cpi	r21, 0xFF	; 255
    45da:	ec f3       	brlt	.-6      	; 0x45d6 <__mulsf3_pse+0x82>
    45dc:	98 3e       	cpi	r25, 0xE8	; 232
    45de:	dc f3       	brlt	.-10     	; 0x45d6 <__mulsf3_pse+0x82>
    45e0:	86 95       	lsr	r24
    45e2:	77 95       	ror	r23
    45e4:	67 95       	ror	r22
    45e6:	b7 95       	ror	r27
    45e8:	f7 95       	ror	r31
    45ea:	e7 95       	ror	r30
    45ec:	9f 5f       	subi	r25, 0xFF	; 255
    45ee:	c1 f7       	brne	.-16     	; 0x45e0 <__mulsf3_pse+0x8c>
    45f0:	fe 2b       	or	r31, r30
    45f2:	88 0f       	add	r24, r24
    45f4:	91 1d       	adc	r25, r1
    45f6:	96 95       	lsr	r25
    45f8:	87 95       	ror	r24
    45fa:	97 f9       	bld	r25, 7
    45fc:	08 95       	ret

000045fe <round>:
    45fe:	77 df       	rcall	.-274    	; 0x44ee <__fp_splitA>
    4600:	e0 f0       	brcs	.+56     	; 0x463a <round+0x3c>
    4602:	9e 37       	cpi	r25, 0x7E	; 126
    4604:	d8 f0       	brcs	.+54     	; 0x463c <round+0x3e>
    4606:	96 39       	cpi	r25, 0x96	; 150
    4608:	b8 f4       	brcc	.+46     	; 0x4638 <round+0x3a>
    460a:	9e 38       	cpi	r25, 0x8E	; 142
    460c:	48 f4       	brcc	.+18     	; 0x4620 <round+0x22>
    460e:	67 2f       	mov	r22, r23
    4610:	78 2f       	mov	r23, r24
    4612:	88 27       	eor	r24, r24
    4614:	98 5f       	subi	r25, 0xF8	; 248
    4616:	f9 cf       	rjmp	.-14     	; 0x460a <round+0xc>
    4618:	86 95       	lsr	r24
    461a:	77 95       	ror	r23
    461c:	67 95       	ror	r22
    461e:	93 95       	inc	r25
    4620:	95 39       	cpi	r25, 0x95	; 149
    4622:	d0 f3       	brcs	.-12     	; 0x4618 <round+0x1a>
    4624:	b6 2f       	mov	r27, r22
    4626:	b1 70       	andi	r27, 0x01	; 1
    4628:	6b 0f       	add	r22, r27
    462a:	71 1d       	adc	r23, r1
    462c:	81 1d       	adc	r24, r1
    462e:	20 f4       	brcc	.+8      	; 0x4638 <round+0x3a>
    4630:	87 95       	ror	r24
    4632:	77 95       	ror	r23
    4634:	67 95       	ror	r22
    4636:	93 95       	inc	r25
    4638:	02 c0       	rjmp	.+4      	; 0x463e <__fp_mintl>
    463a:	1c c0       	rjmp	.+56     	; 0x4674 <__fp_mpack>
    463c:	73 cf       	rjmp	.-282    	; 0x4524 <__fp_szero>

0000463e <__fp_mintl>:
    463e:	88 23       	and	r24, r24
    4640:	71 f4       	brne	.+28     	; 0x465e <__fp_mintl+0x20>
    4642:	77 23       	and	r23, r23
    4644:	21 f0       	breq	.+8      	; 0x464e <__fp_mintl+0x10>
    4646:	98 50       	subi	r25, 0x08	; 8
    4648:	87 2b       	or	r24, r23
    464a:	76 2f       	mov	r23, r22
    464c:	07 c0       	rjmp	.+14     	; 0x465c <__fp_mintl+0x1e>
    464e:	66 23       	and	r22, r22
    4650:	11 f4       	brne	.+4      	; 0x4656 <__fp_mintl+0x18>
    4652:	99 27       	eor	r25, r25
    4654:	0d c0       	rjmp	.+26     	; 0x4670 <__fp_mintl+0x32>
    4656:	90 51       	subi	r25, 0x10	; 16
    4658:	86 2b       	or	r24, r22
    465a:	70 e0       	ldi	r23, 0x00	; 0
    465c:	60 e0       	ldi	r22, 0x00	; 0
    465e:	2a f0       	brmi	.+10     	; 0x466a <__fp_mintl+0x2c>
    4660:	9a 95       	dec	r25
    4662:	66 0f       	add	r22, r22
    4664:	77 1f       	adc	r23, r23
    4666:	88 1f       	adc	r24, r24
    4668:	da f7       	brpl	.-10     	; 0x4660 <__fp_mintl+0x22>
    466a:	88 0f       	add	r24, r24
    466c:	96 95       	lsr	r25
    466e:	87 95       	ror	r24
    4670:	97 f9       	bld	r25, 7
    4672:	08 95       	ret

00004674 <__fp_mpack>:
    4674:	9f 3f       	cpi	r25, 0xFF	; 255
    4676:	31 f0       	breq	.+12     	; 0x4684 <__fp_mpack_finite+0xc>

00004678 <__fp_mpack_finite>:
    4678:	91 50       	subi	r25, 0x01	; 1
    467a:	20 f4       	brcc	.+8      	; 0x4684 <__fp_mpack_finite+0xc>
    467c:	87 95       	ror	r24
    467e:	77 95       	ror	r23
    4680:	67 95       	ror	r22
    4682:	b7 95       	ror	r27
    4684:	88 0f       	add	r24, r24
    4686:	91 1d       	adc	r25, r1
    4688:	96 95       	lsr	r25
    468a:	87 95       	ror	r24
    468c:	97 f9       	bld	r25, 7
    468e:	08 95       	ret

00004690 <__tablejump2__>:
    4690:	ee 0f       	add	r30, r30
    4692:	ff 1f       	adc	r31, r31
    4694:	05 90       	lpm	r0, Z+
    4696:	f4 91       	lpm	r31, Z
    4698:	e0 2d       	mov	r30, r0
    469a:	09 94       	ijmp

0000469c <atof>:
    469c:	66 27       	eor	r22, r22
    469e:	77 27       	eor	r23, r23
    46a0:	92 c0       	rjmp	.+292    	; 0x47c6 <strtod>

000046a2 <atol>:
    46a2:	1f 93       	push	r17
    46a4:	fc 01       	movw	r30, r24
    46a6:	99 27       	eor	r25, r25
    46a8:	88 27       	eor	r24, r24
    46aa:	bc 01       	movw	r22, r24
    46ac:	e8 94       	clt
    46ae:	11 91       	ld	r17, Z+
    46b0:	10 32       	cpi	r17, 0x20	; 32
    46b2:	e9 f3       	breq	.-6      	; 0x46ae <atol+0xc>
    46b4:	19 30       	cpi	r17, 0x09	; 9
    46b6:	10 f0       	brcs	.+4      	; 0x46bc <atol+0x1a>
    46b8:	1e 30       	cpi	r17, 0x0E	; 14
    46ba:	c8 f3       	brcs	.-14     	; 0x46ae <atol+0xc>
    46bc:	1b 32       	cpi	r17, 0x2B	; 43
    46be:	49 f0       	breq	.+18     	; 0x46d2 <atol+0x30>
    46c0:	1d 32       	cpi	r17, 0x2D	; 45
    46c2:	41 f4       	brne	.+16     	; 0x46d4 <atol+0x32>
    46c4:	68 94       	set
    46c6:	05 c0       	rjmp	.+10     	; 0x46d2 <atol+0x30>
    46c8:	50 d0       	rcall	.+160    	; 0x476a <__mulsi_const_10>
    46ca:	61 0f       	add	r22, r17
    46cc:	71 1d       	adc	r23, r1
    46ce:	81 1d       	adc	r24, r1
    46d0:	91 1d       	adc	r25, r1
    46d2:	11 91       	ld	r17, Z+
    46d4:	10 53       	subi	r17, 0x30	; 48
    46d6:	1a 30       	cpi	r17, 0x0A	; 10
    46d8:	b8 f3       	brcs	.-18     	; 0x46c8 <atol+0x26>
    46da:	3e f4       	brtc	.+14     	; 0x46ea <atol+0x48>
    46dc:	90 95       	com	r25
    46de:	80 95       	com	r24
    46e0:	70 95       	com	r23
    46e2:	61 95       	neg	r22
    46e4:	7f 4f       	sbci	r23, 0xFF	; 255
    46e6:	8f 4f       	sbci	r24, 0xFF	; 255
    46e8:	9f 4f       	sbci	r25, 0xFF	; 255
    46ea:	1f 91       	pop	r17
    46ec:	08 95       	ret

000046ee <strcat>:
    46ee:	fb 01       	movw	r30, r22
    46f0:	dc 01       	movw	r26, r24
    46f2:	0d 90       	ld	r0, X+
    46f4:	00 20       	and	r0, r0
    46f6:	e9 f7       	brne	.-6      	; 0x46f2 <strcat+0x4>
    46f8:	11 97       	sbiw	r26, 0x01	; 1
    46fa:	01 90       	ld	r0, Z+
    46fc:	0d 92       	st	X+, r0
    46fe:	00 20       	and	r0, r0
    4700:	e1 f7       	brne	.-8      	; 0x46fa <strcat+0xc>
    4702:	08 95       	ret

00004704 <strchr>:
    4704:	fc 01       	movw	r30, r24
    4706:	81 91       	ld	r24, Z+
    4708:	86 17       	cp	r24, r22
    470a:	21 f0       	breq	.+8      	; 0x4714 <strchr+0x10>
    470c:	88 23       	and	r24, r24
    470e:	d9 f7       	brne	.-10     	; 0x4706 <strchr+0x2>
    4710:	99 27       	eor	r25, r25
    4712:	08 95       	ret
    4714:	31 97       	sbiw	r30, 0x01	; 1
    4716:	cf 01       	movw	r24, r30
    4718:	08 95       	ret

0000471a <strcmp>:
    471a:	fb 01       	movw	r30, r22
    471c:	dc 01       	movw	r26, r24
    471e:	8d 91       	ld	r24, X+
    4720:	01 90       	ld	r0, Z+
    4722:	80 19       	sub	r24, r0
    4724:	01 10       	cpse	r0, r1
    4726:	d9 f3       	breq	.-10     	; 0x471e <strcmp+0x4>
    4728:	99 0b       	sbc	r25, r25
    472a:	08 95       	ret

0000472c <strnlen>:
    472c:	fc 01       	movw	r30, r24
    472e:	61 50       	subi	r22, 0x01	; 1
    4730:	70 40       	sbci	r23, 0x00	; 0
    4732:	01 90       	ld	r0, Z+
    4734:	01 10       	cpse	r0, r1
    4736:	d8 f7       	brcc	.-10     	; 0x472e <strnlen+0x2>
    4738:	80 95       	com	r24
    473a:	90 95       	com	r25
    473c:	8e 0f       	add	r24, r30
    473e:	9f 1f       	adc	r25, r31
    4740:	08 95       	ret

00004742 <strupr>:
    4742:	dc 01       	movw	r26, r24
    4744:	6c 91       	ld	r22, X
    4746:	61 56       	subi	r22, 0x61	; 97
    4748:	6a 31       	cpi	r22, 0x1A	; 26
    474a:	08 f0       	brcs	.+2      	; 0x474e <strupr+0xc>
    474c:	60 5e       	subi	r22, 0xE0	; 224
    474e:	6f 5b       	subi	r22, 0xBF	; 191
    4750:	6d 93       	st	X+, r22
    4752:	c1 f7       	brne	.-16     	; 0x4744 <strupr+0x2>
    4754:	08 95       	ret

00004756 <__itoa_ncheck>:
    4756:	bb 27       	eor	r27, r27
    4758:	4a 30       	cpi	r20, 0x0A	; 10
    475a:	31 f4       	brne	.+12     	; 0x4768 <__itoa_ncheck+0x12>
    475c:	99 23       	and	r25, r25
    475e:	22 f4       	brpl	.+8      	; 0x4768 <__itoa_ncheck+0x12>
    4760:	bd e2       	ldi	r27, 0x2D	; 45
    4762:	90 95       	com	r25
    4764:	81 95       	neg	r24
    4766:	9f 4f       	sbci	r25, 0xFF	; 255
    4768:	16 c0       	rjmp	.+44     	; 0x4796 <__utoa_common>

0000476a <__mulsi_const_10>:
    476a:	59 2f       	mov	r21, r25
    476c:	48 2f       	mov	r20, r24
    476e:	37 2f       	mov	r19, r23
    4770:	26 2f       	mov	r18, r22
    4772:	66 0f       	add	r22, r22
    4774:	77 1f       	adc	r23, r23
    4776:	88 1f       	adc	r24, r24
    4778:	99 1f       	adc	r25, r25
    477a:	66 0f       	add	r22, r22
    477c:	77 1f       	adc	r23, r23
    477e:	88 1f       	adc	r24, r24
    4780:	99 1f       	adc	r25, r25
    4782:	62 0f       	add	r22, r18
    4784:	73 1f       	adc	r23, r19
    4786:	84 1f       	adc	r24, r20
    4788:	95 1f       	adc	r25, r21
    478a:	66 0f       	add	r22, r22
    478c:	77 1f       	adc	r23, r23
    478e:	88 1f       	adc	r24, r24
    4790:	99 1f       	adc	r25, r25
    4792:	08 95       	ret

00004794 <__utoa_ncheck>:
    4794:	bb 27       	eor	r27, r27

00004796 <__utoa_common>:
    4796:	fb 01       	movw	r30, r22
    4798:	55 27       	eor	r21, r21
    479a:	aa 27       	eor	r26, r26
    479c:	88 0f       	add	r24, r24
    479e:	99 1f       	adc	r25, r25
    47a0:	aa 1f       	adc	r26, r26
    47a2:	a4 17       	cp	r26, r20
    47a4:	10 f0       	brcs	.+4      	; 0x47aa <__utoa_common+0x14>
    47a6:	a4 1b       	sub	r26, r20
    47a8:	83 95       	inc	r24
    47aa:	50 51       	subi	r21, 0x10	; 16
    47ac:	b9 f7       	brne	.-18     	; 0x479c <__utoa_common+0x6>
    47ae:	a0 5d       	subi	r26, 0xD0	; 208
    47b0:	aa 33       	cpi	r26, 0x3A	; 58
    47b2:	08 f0       	brcs	.+2      	; 0x47b6 <__utoa_common+0x20>
    47b4:	a9 5d       	subi	r26, 0xD9	; 217
    47b6:	a1 93       	st	Z+, r26
    47b8:	00 97       	sbiw	r24, 0x00	; 0
    47ba:	79 f7       	brne	.-34     	; 0x479a <__utoa_common+0x4>
    47bc:	b1 11       	cpse	r27, r1
    47be:	b1 93       	st	Z+, r27
    47c0:	11 92       	st	Z+, r1
    47c2:	cb 01       	movw	r24, r22
    47c4:	72 c1       	rjmp	.+740    	; 0x4aaa <strrev>

000047c6 <strtod>:
    47c6:	a0 e0       	ldi	r26, 0x00	; 0
    47c8:	b0 e0       	ldi	r27, 0x00	; 0
    47ca:	e8 ee       	ldi	r30, 0xE8	; 232
    47cc:	f3 e2       	ldi	r31, 0x23	; 35
    47ce:	b9 c1       	rjmp	.+882    	; 0x4b42 <__prologue_saves__+0x8>
    47d0:	ec 01       	movw	r28, r24
    47d2:	7b 01       	movw	r14, r22
    47d4:	61 15       	cp	r22, r1
    47d6:	71 05       	cpc	r23, r1
    47d8:	19 f0       	breq	.+6      	; 0x47e0 <strtod+0x1a>
    47da:	db 01       	movw	r26, r22
    47dc:	8d 93       	st	X+, r24
    47de:	9c 93       	st	X, r25
    47e0:	8e 01       	movw	r16, r28
    47e2:	0f 5f       	subi	r16, 0xFF	; 255
    47e4:	1f 4f       	sbci	r17, 0xFF	; 255
    47e6:	78 80       	ld	r7, Y
    47e8:	87 2d       	mov	r24, r7
    47ea:	90 e0       	ldi	r25, 0x00	; 0
    47ec:	3e d1       	rcall	.+636    	; 0x4a6a <isspace>
    47ee:	89 2b       	or	r24, r25
    47f0:	11 f0       	breq	.+4      	; 0x47f6 <strtod+0x30>
    47f2:	e8 01       	movw	r28, r16
    47f4:	f5 cf       	rjmp	.-22     	; 0x47e0 <strtod+0x1a>
    47f6:	bd e2       	ldi	r27, 0x2D	; 45
    47f8:	7b 12       	cpse	r7, r27
    47fa:	05 c0       	rjmp	.+10     	; 0x4806 <strtod+0x40>
    47fc:	0f 5f       	subi	r16, 0xFF	; 255
    47fe:	1f 4f       	sbci	r17, 0xFF	; 255
    4800:	79 80       	ldd	r7, Y+1	; 0x01
    4802:	c1 e0       	ldi	r28, 0x01	; 1
    4804:	08 c0       	rjmp	.+16     	; 0x4816 <strtod+0x50>
    4806:	eb e2       	ldi	r30, 0x2B	; 43
    4808:	7e 12       	cpse	r7, r30
    480a:	04 c0       	rjmp	.+8      	; 0x4814 <strtod+0x4e>
    480c:	8e 01       	movw	r16, r28
    480e:	0e 5f       	subi	r16, 0xFE	; 254
    4810:	1f 4f       	sbci	r17, 0xFF	; 255
    4812:	79 80       	ldd	r7, Y+1	; 0x01
    4814:	c0 e0       	ldi	r28, 0x00	; 0
    4816:	68 01       	movw	r12, r16
    4818:	f1 e0       	ldi	r31, 0x01	; 1
    481a:	cf 1a       	sub	r12, r31
    481c:	d1 08       	sbc	r13, r1
    481e:	43 e0       	ldi	r20, 0x03	; 3
    4820:	50 e0       	ldi	r21, 0x00	; 0
    4822:	68 ed       	ldi	r22, 0xD8	; 216
    4824:	72 e0       	ldi	r23, 0x02	; 2
    4826:	c6 01       	movw	r24, r12
    4828:	28 d1       	rcall	.+592    	; 0x4a7a <strncasecmp_P>
    482a:	89 2b       	or	r24, r25
    482c:	e9 f4       	brne	.+58     	; 0x4868 <strtod+0xa2>
    482e:	68 01       	movw	r12, r16
    4830:	22 e0       	ldi	r18, 0x02	; 2
    4832:	c2 0e       	add	r12, r18
    4834:	d1 1c       	adc	r13, r1
    4836:	45 e0       	ldi	r20, 0x05	; 5
    4838:	50 e0       	ldi	r21, 0x00	; 0
    483a:	63 ed       	ldi	r22, 0xD3	; 211
    483c:	72 e0       	ldi	r23, 0x02	; 2
    483e:	c6 01       	movw	r24, r12
    4840:	1c d1       	rcall	.+568    	; 0x4a7a <strncasecmp_P>
    4842:	89 2b       	or	r24, r25
    4844:	21 f4       	brne	.+8      	; 0x484e <strtod+0x88>
    4846:	68 01       	movw	r12, r16
    4848:	87 e0       	ldi	r24, 0x07	; 7
    484a:	c8 0e       	add	r12, r24
    484c:	d1 1c       	adc	r13, r1
    484e:	e1 14       	cp	r14, r1
    4850:	f1 04       	cpc	r15, r1
    4852:	19 f0       	breq	.+6      	; 0x485a <strtod+0x94>
    4854:	d7 01       	movw	r26, r14
    4856:	cd 92       	st	X+, r12
    4858:	dc 92       	st	X, r13
    485a:	c1 11       	cpse	r28, r1
    485c:	f9 c0       	rjmp	.+498    	; 0x4a50 <strtod+0x28a>
    485e:	60 e0       	ldi	r22, 0x00	; 0
    4860:	70 e0       	ldi	r23, 0x00	; 0
    4862:	80 e8       	ldi	r24, 0x80	; 128
    4864:	9f e7       	ldi	r25, 0x7F	; 127
    4866:	fd c0       	rjmp	.+506    	; 0x4a62 <strtod+0x29c>
    4868:	43 e0       	ldi	r20, 0x03	; 3
    486a:	50 e0       	ldi	r21, 0x00	; 0
    486c:	60 ed       	ldi	r22, 0xD0	; 208
    486e:	72 e0       	ldi	r23, 0x02	; 2
    4870:	c6 01       	movw	r24, r12
    4872:	03 d1       	rcall	.+518    	; 0x4a7a <strncasecmp_P>
    4874:	89 2b       	or	r24, r25
    4876:	51 f4       	brne	.+20     	; 0x488c <strtod+0xc6>
    4878:	e1 14       	cp	r14, r1
    487a:	f1 04       	cpc	r15, r1
    487c:	09 f4       	brne	.+2      	; 0x4880 <strtod+0xba>
    487e:	ed c0       	rjmp	.+474    	; 0x4a5a <strtod+0x294>
    4880:	0e 5f       	subi	r16, 0xFE	; 254
    4882:	1f 4f       	sbci	r17, 0xFF	; 255
    4884:	f7 01       	movw	r30, r14
    4886:	11 83       	std	Z+1, r17	; 0x01
    4888:	00 83       	st	Z, r16
    488a:	e7 c0       	rjmp	.+462    	; 0x4a5a <strtod+0x294>
    488c:	68 01       	movw	r12, r16
    488e:	60 e0       	ldi	r22, 0x00	; 0
    4890:	70 e0       	ldi	r23, 0x00	; 0
    4892:	cb 01       	movw	r24, r22
    4894:	00 e0       	ldi	r16, 0x00	; 0
    4896:	10 e0       	ldi	r17, 0x00	; 0
    4898:	f6 01       	movw	r30, r12
    489a:	d0 ed       	ldi	r29, 0xD0	; 208
    489c:	d7 0d       	add	r29, r7
    489e:	da 30       	cpi	r29, 0x0A	; 10
    48a0:	50 f5       	brcc	.+84     	; 0x48f6 <strtod+0x130>
    48a2:	2c 2f       	mov	r18, r28
    48a4:	22 60       	ori	r18, 0x02	; 2
    48a6:	62 2e       	mov	r6, r18
    48a8:	2c 2f       	mov	r18, r28
    48aa:	28 70       	andi	r18, 0x08	; 8
    48ac:	c2 ff       	sbrs	r28, 2
    48ae:	05 c0       	rjmp	.+10     	; 0x48ba <strtod+0xf4>
    48b0:	21 11       	cpse	r18, r1
    48b2:	27 c0       	rjmp	.+78     	; 0x4902 <strtod+0x13c>
    48b4:	0f 5f       	subi	r16, 0xFF	; 255
    48b6:	1f 4f       	sbci	r17, 0xFF	; 255
    48b8:	24 c0       	rjmp	.+72     	; 0x4902 <strtod+0x13c>
    48ba:	22 23       	and	r18, r18
    48bc:	11 f0       	breq	.+4      	; 0x48c2 <strtod+0xfc>
    48be:	01 50       	subi	r16, 0x01	; 1
    48c0:	11 09       	sbc	r17, r1
    48c2:	a5 e0       	ldi	r26, 0x05	; 5
    48c4:	b0 e0       	ldi	r27, 0x00	; 0
    48c6:	9b 01       	movw	r18, r22
    48c8:	ac 01       	movw	r20, r24
    48ca:	2d d1       	rcall	.+602    	; 0x4b26 <__muluhisi3>
    48cc:	4b 01       	movw	r8, r22
    48ce:	5c 01       	movw	r10, r24
    48d0:	88 0c       	add	r8, r8
    48d2:	99 1c       	adc	r9, r9
    48d4:	aa 1c       	adc	r10, r10
    48d6:	bb 1c       	adc	r11, r11
    48d8:	c5 01       	movw	r24, r10
    48da:	b4 01       	movw	r22, r8
    48dc:	6d 0f       	add	r22, r29
    48de:	71 1d       	adc	r23, r1
    48e0:	81 1d       	adc	r24, r1
    48e2:	91 1d       	adc	r25, r1
    48e4:	68 39       	cpi	r22, 0x98	; 152
    48e6:	a9 e9       	ldi	r26, 0x99	; 153
    48e8:	7a 07       	cpc	r23, r26
    48ea:	8a 07       	cpc	r24, r26
    48ec:	a9 e1       	ldi	r26, 0x19	; 25
    48ee:	9a 07       	cpc	r25, r26
    48f0:	40 f0       	brcs	.+16     	; 0x4902 <strtod+0x13c>
    48f2:	c6 60       	ori	r28, 0x06	; 6
    48f4:	05 c0       	rjmp	.+10     	; 0x4900 <strtod+0x13a>
    48f6:	de 3f       	cpi	r29, 0xFE	; 254
    48f8:	51 f4       	brne	.+20     	; 0x490e <strtod+0x148>
    48fa:	c3 fd       	sbrc	r28, 3
    48fc:	44 c0       	rjmp	.+136    	; 0x4986 <strtod+0x1c0>
    48fe:	c8 60       	ori	r28, 0x08	; 8
    4900:	6c 2e       	mov	r6, r28
    4902:	bf ef       	ldi	r27, 0xFF	; 255
    4904:	cb 1a       	sub	r12, r27
    4906:	db 0a       	sbc	r13, r27
    4908:	70 80       	ld	r7, Z
    490a:	c6 2d       	mov	r28, r6
    490c:	c5 cf       	rjmp	.-118    	; 0x4898 <strtod+0xd2>
    490e:	2d 2f       	mov	r18, r29
    4910:	2f 7d       	andi	r18, 0xDF	; 223
    4912:	25 31       	cpi	r18, 0x15	; 21
    4914:	c1 f5       	brne	.+112    	; 0x4986 <strtod+0x1c0>
    4916:	40 81       	ld	r20, Z
    4918:	4d 32       	cpi	r20, 0x2D	; 45
    491a:	11 f4       	brne	.+4      	; 0x4920 <strtod+0x15a>
    491c:	c0 61       	ori	r28, 0x10	; 16
    491e:	06 c0       	rjmp	.+12     	; 0x492c <strtod+0x166>
    4920:	4b 32       	cpi	r20, 0x2B	; 43
    4922:	21 f0       	breq	.+8      	; 0x492c <strtod+0x166>
    4924:	31 96       	adiw	r30, 0x01	; 1
    4926:	21 e0       	ldi	r18, 0x01	; 1
    4928:	30 e0       	ldi	r19, 0x00	; 0
    492a:	06 c0       	rjmp	.+12     	; 0x4938 <strtod+0x172>
    492c:	32 96       	adiw	r30, 0x02	; 2
    492e:	d6 01       	movw	r26, r12
    4930:	11 96       	adiw	r26, 0x01	; 1
    4932:	4c 91       	ld	r20, X
    4934:	22 e0       	ldi	r18, 0x02	; 2
    4936:	30 e0       	ldi	r19, 0x00	; 0
    4938:	a0 ed       	ldi	r26, 0xD0	; 208
    493a:	a4 0f       	add	r26, r20
    493c:	aa 30       	cpi	r26, 0x0A	; 10
    493e:	18 f0       	brcs	.+6      	; 0x4946 <strtod+0x180>
    4940:	e2 1b       	sub	r30, r18
    4942:	f3 0b       	sbc	r31, r19
    4944:	20 c0       	rjmp	.+64     	; 0x4986 <strtod+0x1c0>
    4946:	40 e0       	ldi	r20, 0x00	; 0
    4948:	50 e0       	ldi	r21, 0x00	; 0
    494a:	40 38       	cpi	r20, 0x80	; 128
    494c:	bc e0       	ldi	r27, 0x0C	; 12
    494e:	5b 07       	cpc	r21, r27
    4950:	5c f4       	brge	.+22     	; 0x4968 <strtod+0x1a2>
    4952:	9a 01       	movw	r18, r20
    4954:	22 0f       	add	r18, r18
    4956:	33 1f       	adc	r19, r19
    4958:	22 0f       	add	r18, r18
    495a:	33 1f       	adc	r19, r19
    495c:	42 0f       	add	r20, r18
    495e:	53 1f       	adc	r21, r19
    4960:	44 0f       	add	r20, r20
    4962:	55 1f       	adc	r21, r21
    4964:	4a 0f       	add	r20, r26
    4966:	51 1d       	adc	r21, r1
    4968:	31 96       	adiw	r30, 0x01	; 1
    496a:	df 01       	movw	r26, r30
    496c:	11 97       	sbiw	r26, 0x01	; 1
    496e:	2c 91       	ld	r18, X
    4970:	a0 ed       	ldi	r26, 0xD0	; 208
    4972:	a2 0f       	add	r26, r18
    4974:	aa 30       	cpi	r26, 0x0A	; 10
    4976:	48 f3       	brcs	.-46     	; 0x494a <strtod+0x184>
    4978:	c4 ff       	sbrs	r28, 4
    497a:	03 c0       	rjmp	.+6      	; 0x4982 <strtod+0x1bc>
    497c:	51 95       	neg	r21
    497e:	41 95       	neg	r20
    4980:	51 09       	sbc	r21, r1
    4982:	04 0f       	add	r16, r20
    4984:	15 1f       	adc	r17, r21
    4986:	c1 ff       	sbrs	r28, 1
    4988:	07 c0       	rjmp	.+14     	; 0x4998 <strtod+0x1d2>
    498a:	e1 14       	cp	r14, r1
    498c:	f1 04       	cpc	r15, r1
    498e:	21 f0       	breq	.+8      	; 0x4998 <strtod+0x1d2>
    4990:	31 97       	sbiw	r30, 0x01	; 1
    4992:	d7 01       	movw	r26, r14
    4994:	ed 93       	st	X+, r30
    4996:	fc 93       	st	X, r31
    4998:	19 dd       	rcall	.-1486   	; 0x43cc <__floatunsisf>
    499a:	c3 70       	andi	r28, 0x03	; 3
    499c:	c3 30       	cpi	r28, 0x03	; 3
    499e:	19 f0       	breq	.+6      	; 0x49a6 <strtod+0x1e0>
    49a0:	6b 01       	movw	r12, r22
    49a2:	7c 01       	movw	r14, r24
    49a4:	06 c0       	rjmp	.+12     	; 0x49b2 <strtod+0x1ec>
    49a6:	6b 01       	movw	r12, r22
    49a8:	7c 01       	movw	r14, r24
    49aa:	f7 fa       	bst	r15, 7
    49ac:	f0 94       	com	r15
    49ae:	f7 f8       	bld	r15, 7
    49b0:	f0 94       	com	r15
    49b2:	20 e0       	ldi	r18, 0x00	; 0
    49b4:	30 e0       	ldi	r19, 0x00	; 0
    49b6:	a9 01       	movw	r20, r18
    49b8:	c7 01       	movw	r24, r14
    49ba:	b6 01       	movw	r22, r12
    49bc:	d2 dc       	rcall	.-1628   	; 0x4362 <__cmpsf2>
    49be:	88 23       	and	r24, r24
    49c0:	09 f4       	brne	.+2      	; 0x49c4 <strtod+0x1fe>
    49c2:	43 c0       	rjmp	.+134    	; 0x4a4a <strtod+0x284>
    49c4:	17 ff       	sbrs	r17, 7
    49c6:	06 c0       	rjmp	.+12     	; 0x49d4 <strtod+0x20e>
    49c8:	11 95       	neg	r17
    49ca:	01 95       	neg	r16
    49cc:	11 09       	sbc	r17, r1
    49ce:	cf ee       	ldi	r28, 0xEF	; 239
    49d0:	d2 e0       	ldi	r29, 0x02	; 2
    49d2:	02 c0       	rjmp	.+4      	; 0x49d8 <strtod+0x212>
    49d4:	c7 e0       	ldi	r28, 0x07	; 7
    49d6:	d3 e0       	ldi	r29, 0x03	; 3
    49d8:	5e 01       	movw	r10, r28
    49da:	b8 e1       	ldi	r27, 0x18	; 24
    49dc:	ab 1a       	sub	r10, r27
    49de:	b1 08       	sbc	r11, r1
    49e0:	46 01       	movw	r8, r12
    49e2:	be 2d       	mov	r27, r14
    49e4:	af 2d       	mov	r26, r15
    49e6:	90 e2       	ldi	r25, 0x20	; 32
    49e8:	e9 2e       	mov	r14, r25
    49ea:	f1 2c       	mov	r15, r1
    49ec:	0e 15       	cp	r16, r14
    49ee:	1f 05       	cpc	r17, r15
    49f0:	7c f0       	brlt	.+30     	; 0x4a10 <strtod+0x24a>
    49f2:	fe 01       	movw	r30, r28
    49f4:	25 91       	lpm	r18, Z+
    49f6:	35 91       	lpm	r19, Z+
    49f8:	45 91       	lpm	r20, Z+
    49fa:	54 91       	lpm	r21, Z
    49fc:	b4 01       	movw	r22, r8
    49fe:	8b 2f       	mov	r24, r27
    4a00:	9a 2f       	mov	r25, r26
    4a02:	9a dd       	rcall	.-1228   	; 0x4538 <__mulsf3>
    4a04:	4b 01       	movw	r8, r22
    4a06:	b8 2f       	mov	r27, r24
    4a08:	a9 2f       	mov	r26, r25
    4a0a:	0e 19       	sub	r16, r14
    4a0c:	1f 09       	sbc	r17, r15
    4a0e:	ee cf       	rjmp	.-36     	; 0x49ec <strtod+0x226>
    4a10:	24 97       	sbiw	r28, 0x04	; 4
    4a12:	f5 94       	asr	r15
    4a14:	e7 94       	ror	r14
    4a16:	ca 15       	cp	r28, r10
    4a18:	db 05       	cpc	r29, r11
    4a1a:	41 f7       	brne	.-48     	; 0x49ec <strtod+0x226>
    4a1c:	64 01       	movw	r12, r8
    4a1e:	eb 2e       	mov	r14, r27
    4a20:	fa 2e       	mov	r15, r26
    4a22:	8e 2d       	mov	r24, r14
    4a24:	88 0f       	add	r24, r24
    4a26:	8f 2d       	mov	r24, r15
    4a28:	88 1f       	adc	r24, r24
    4a2a:	8f 3f       	cpi	r24, 0xFF	; 255
    4a2c:	41 f0       	breq	.+16     	; 0x4a3e <strtod+0x278>
    4a2e:	20 e0       	ldi	r18, 0x00	; 0
    4a30:	30 e0       	ldi	r19, 0x00	; 0
    4a32:	a9 01       	movw	r20, r18
    4a34:	c7 01       	movw	r24, r14
    4a36:	b6 01       	movw	r22, r12
    4a38:	94 dc       	rcall	.-1752   	; 0x4362 <__cmpsf2>
    4a3a:	81 11       	cpse	r24, r1
    4a3c:	06 c0       	rjmp	.+12     	; 0x4a4a <strtod+0x284>
    4a3e:	82 e2       	ldi	r24, 0x22	; 34
    4a40:	90 e0       	ldi	r25, 0x00	; 0
    4a42:	90 93 e2 04 	sts	0x04E2, r25
    4a46:	80 93 e1 04 	sts	0x04E1, r24
    4a4a:	c7 01       	movw	r24, r14
    4a4c:	b6 01       	movw	r22, r12
    4a4e:	09 c0       	rjmp	.+18     	; 0x4a62 <strtod+0x29c>
    4a50:	60 e0       	ldi	r22, 0x00	; 0
    4a52:	70 e0       	ldi	r23, 0x00	; 0
    4a54:	80 e8       	ldi	r24, 0x80	; 128
    4a56:	9f ef       	ldi	r25, 0xFF	; 255
    4a58:	04 c0       	rjmp	.+8      	; 0x4a62 <strtod+0x29c>
    4a5a:	60 e0       	ldi	r22, 0x00	; 0
    4a5c:	70 e0       	ldi	r23, 0x00	; 0
    4a5e:	80 ec       	ldi	r24, 0xC0	; 192
    4a60:	9f e7       	ldi	r25, 0x7F	; 127
    4a62:	cd b7       	in	r28, 0x3d	; 61
    4a64:	de b7       	in	r29, 0x3e	; 62
    4a66:	ee e0       	ldi	r30, 0x0E	; 14
    4a68:	88 c0       	rjmp	.+272    	; 0x4b7a <__epilogue_restores__+0x8>

00004a6a <isspace>:
    4a6a:	91 11       	cpse	r25, r1
    4a6c:	2e c0       	rjmp	.+92     	; 0x4aca <__ctype_isfalse>
    4a6e:	80 32       	cpi	r24, 0x20	; 32
    4a70:	19 f0       	breq	.+6      	; 0x4a78 <isspace+0xe>
    4a72:	89 50       	subi	r24, 0x09	; 9
    4a74:	85 50       	subi	r24, 0x05	; 5
    4a76:	d0 f7       	brcc	.-12     	; 0x4a6c <isspace+0x2>
    4a78:	08 95       	ret

00004a7a <strncasecmp_P>:
    4a7a:	fb 01       	movw	r30, r22
    4a7c:	dc 01       	movw	r26, r24
    4a7e:	41 50       	subi	r20, 0x01	; 1
    4a80:	50 40       	sbci	r21, 0x00	; 0
    4a82:	88 f0       	brcs	.+34     	; 0x4aa6 <strncasecmp_P+0x2c>
    4a84:	8d 91       	ld	r24, X+
    4a86:	81 34       	cpi	r24, 0x41	; 65
    4a88:	1c f0       	brlt	.+6      	; 0x4a90 <strncasecmp_P+0x16>
    4a8a:	8b 35       	cpi	r24, 0x5B	; 91
    4a8c:	0c f4       	brge	.+2      	; 0x4a90 <strncasecmp_P+0x16>
    4a8e:	80 5e       	subi	r24, 0xE0	; 224
    4a90:	65 91       	lpm	r22, Z+
    4a92:	61 34       	cpi	r22, 0x41	; 65
    4a94:	1c f0       	brlt	.+6      	; 0x4a9c <strncasecmp_P+0x22>
    4a96:	6b 35       	cpi	r22, 0x5B	; 91
    4a98:	0c f4       	brge	.+2      	; 0x4a9c <strncasecmp_P+0x22>
    4a9a:	60 5e       	subi	r22, 0xE0	; 224
    4a9c:	86 1b       	sub	r24, r22
    4a9e:	61 11       	cpse	r22, r1
    4aa0:	71 f3       	breq	.-36     	; 0x4a7e <strncasecmp_P+0x4>
    4aa2:	99 0b       	sbc	r25, r25
    4aa4:	08 95       	ret
    4aa6:	88 1b       	sub	r24, r24
    4aa8:	fc cf       	rjmp	.-8      	; 0x4aa2 <strncasecmp_P+0x28>

00004aaa <strrev>:
    4aaa:	dc 01       	movw	r26, r24
    4aac:	fc 01       	movw	r30, r24
    4aae:	67 2f       	mov	r22, r23
    4ab0:	71 91       	ld	r23, Z+
    4ab2:	77 23       	and	r23, r23
    4ab4:	e1 f7       	brne	.-8      	; 0x4aae <strrev+0x4>
    4ab6:	32 97       	sbiw	r30, 0x02	; 2
    4ab8:	04 c0       	rjmp	.+8      	; 0x4ac2 <strrev+0x18>
    4aba:	7c 91       	ld	r23, X
    4abc:	6d 93       	st	X+, r22
    4abe:	70 83       	st	Z, r23
    4ac0:	62 91       	ld	r22, -Z
    4ac2:	ae 17       	cp	r26, r30
    4ac4:	bf 07       	cpc	r27, r31
    4ac6:	c8 f3       	brcs	.-14     	; 0x4aba <strrev+0x10>
    4ac8:	08 95       	ret

00004aca <__ctype_isfalse>:
    4aca:	99 27       	eor	r25, r25
    4acc:	88 27       	eor	r24, r24

00004ace <__ctype_istrue>:
    4ace:	08 95       	ret

00004ad0 <eeprom_read_dword>:
    4ad0:	a6 e1       	ldi	r26, 0x16	; 22
    4ad2:	b0 e0       	ldi	r27, 0x00	; 0
    4ad4:	44 e0       	ldi	r20, 0x04	; 4
    4ad6:	50 e0       	ldi	r21, 0x00	; 0
    4ad8:	0a c0       	rjmp	.+20     	; 0x4aee <eeprom_read_blraw>

00004ada <eeprom_write_dword>:
    4ada:	24 2f       	mov	r18, r20
    4adc:	17 d0       	rcall	.+46     	; 0x4b0c <eeprom_write_r18>
    4ade:	25 2f       	mov	r18, r21
    4ae0:	15 d0       	rcall	.+42     	; 0x4b0c <eeprom_write_r18>
    4ae2:	00 c0       	rjmp	.+0      	; 0x4ae4 <eeprom_write_word>

00004ae4 <eeprom_write_word>:
    4ae4:	12 d0       	rcall	.+36     	; 0x4b0a <eeprom_write_byte>
    4ae6:	27 2f       	mov	r18, r23
    4ae8:	11 c0       	rjmp	.+34     	; 0x4b0c <eeprom_write_r18>

00004aea <eeprom_read_block>:
    4aea:	dc 01       	movw	r26, r24
    4aec:	cb 01       	movw	r24, r22

00004aee <eeprom_read_blraw>:
    4aee:	fc 01       	movw	r30, r24
    4af0:	f9 99       	sbic	0x1f, 1	; 31
    4af2:	fe cf       	rjmp	.-4      	; 0x4af0 <eeprom_read_blraw+0x2>
    4af4:	06 c0       	rjmp	.+12     	; 0x4b02 <eeprom_read_blraw+0x14>
    4af6:	f2 bd       	out	0x22, r31	; 34
    4af8:	e1 bd       	out	0x21, r30	; 33
    4afa:	f8 9a       	sbi	0x1f, 0	; 31
    4afc:	31 96       	adiw	r30, 0x01	; 1
    4afe:	00 b4       	in	r0, 0x20	; 32
    4b00:	0d 92       	st	X+, r0
    4b02:	41 50       	subi	r20, 0x01	; 1
    4b04:	50 40       	sbci	r21, 0x00	; 0
    4b06:	b8 f7       	brcc	.-18     	; 0x4af6 <eeprom_read_blraw+0x8>
    4b08:	08 95       	ret

00004b0a <eeprom_write_byte>:
    4b0a:	26 2f       	mov	r18, r22

00004b0c <eeprom_write_r18>:
    4b0c:	f9 99       	sbic	0x1f, 1	; 31
    4b0e:	fe cf       	rjmp	.-4      	; 0x4b0c <eeprom_write_r18>
    4b10:	1f ba       	out	0x1f, r1	; 31
    4b12:	92 bd       	out	0x22, r25	; 34
    4b14:	81 bd       	out	0x21, r24	; 33
    4b16:	20 bd       	out	0x20, r18	; 32
    4b18:	0f b6       	in	r0, 0x3f	; 63
    4b1a:	f8 94       	cli
    4b1c:	fa 9a       	sbi	0x1f, 2	; 31
    4b1e:	f9 9a       	sbi	0x1f, 1	; 31
    4b20:	0f be       	out	0x3f, r0	; 63
    4b22:	01 96       	adiw	r24, 0x01	; 1
    4b24:	08 95       	ret

00004b26 <__muluhisi3>:
    4b26:	40 d0       	rcall	.+128    	; 0x4ba8 <__umulhisi3>
    4b28:	a5 9f       	mul	r26, r21
    4b2a:	90 0d       	add	r25, r0
    4b2c:	b4 9f       	mul	r27, r20
    4b2e:	90 0d       	add	r25, r0
    4b30:	a4 9f       	mul	r26, r20
    4b32:	80 0d       	add	r24, r0
    4b34:	91 1d       	adc	r25, r1
    4b36:	11 24       	eor	r1, r1
    4b38:	08 95       	ret

00004b3a <__prologue_saves__>:
    4b3a:	2f 92       	push	r2
    4b3c:	3f 92       	push	r3
    4b3e:	4f 92       	push	r4
    4b40:	5f 92       	push	r5
    4b42:	6f 92       	push	r6
    4b44:	7f 92       	push	r7
    4b46:	8f 92       	push	r8
    4b48:	9f 92       	push	r9
    4b4a:	af 92       	push	r10
    4b4c:	bf 92       	push	r11
    4b4e:	cf 92       	push	r12
    4b50:	df 92       	push	r13
    4b52:	ef 92       	push	r14
    4b54:	ff 92       	push	r15
    4b56:	0f 93       	push	r16
    4b58:	1f 93       	push	r17
    4b5a:	cf 93       	push	r28
    4b5c:	df 93       	push	r29
    4b5e:	cd b7       	in	r28, 0x3d	; 61
    4b60:	de b7       	in	r29, 0x3e	; 62
    4b62:	ca 1b       	sub	r28, r26
    4b64:	db 0b       	sbc	r29, r27
    4b66:	0f b6       	in	r0, 0x3f	; 63
    4b68:	f8 94       	cli
    4b6a:	de bf       	out	0x3e, r29	; 62
    4b6c:	0f be       	out	0x3f, r0	; 63
    4b6e:	cd bf       	out	0x3d, r28	; 61
    4b70:	09 94       	ijmp

00004b72 <__epilogue_restores__>:
    4b72:	2a 88       	ldd	r2, Y+18	; 0x12
    4b74:	39 88       	ldd	r3, Y+17	; 0x11
    4b76:	48 88       	ldd	r4, Y+16	; 0x10
    4b78:	5f 84       	ldd	r5, Y+15	; 0x0f
    4b7a:	6e 84       	ldd	r6, Y+14	; 0x0e
    4b7c:	7d 84       	ldd	r7, Y+13	; 0x0d
    4b7e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4b80:	9b 84       	ldd	r9, Y+11	; 0x0b
    4b82:	aa 84       	ldd	r10, Y+10	; 0x0a
    4b84:	b9 84       	ldd	r11, Y+9	; 0x09
    4b86:	c8 84       	ldd	r12, Y+8	; 0x08
    4b88:	df 80       	ldd	r13, Y+7	; 0x07
    4b8a:	ee 80       	ldd	r14, Y+6	; 0x06
    4b8c:	fd 80       	ldd	r15, Y+5	; 0x05
    4b8e:	0c 81       	ldd	r16, Y+4	; 0x04
    4b90:	1b 81       	ldd	r17, Y+3	; 0x03
    4b92:	aa 81       	ldd	r26, Y+2	; 0x02
    4b94:	b9 81       	ldd	r27, Y+1	; 0x01
    4b96:	ce 0f       	add	r28, r30
    4b98:	d1 1d       	adc	r29, r1
    4b9a:	0f b6       	in	r0, 0x3f	; 63
    4b9c:	f8 94       	cli
    4b9e:	de bf       	out	0x3e, r29	; 62
    4ba0:	0f be       	out	0x3f, r0	; 63
    4ba2:	cd bf       	out	0x3d, r28	; 61
    4ba4:	ed 01       	movw	r28, r26
    4ba6:	08 95       	ret

00004ba8 <__umulhisi3>:
    4ba8:	a2 9f       	mul	r26, r18
    4baa:	b0 01       	movw	r22, r0
    4bac:	b3 9f       	mul	r27, r19
    4bae:	c0 01       	movw	r24, r0
    4bb0:	a3 9f       	mul	r26, r19
    4bb2:	70 0d       	add	r23, r0
    4bb4:	81 1d       	adc	r24, r1
    4bb6:	11 24       	eor	r1, r1
    4bb8:	91 1d       	adc	r25, r1
    4bba:	b2 9f       	mul	r27, r18
    4bbc:	70 0d       	add	r23, r0
    4bbe:	81 1d       	adc	r24, r1
    4bc0:	11 24       	eor	r1, r1
    4bc2:	91 1d       	adc	r25, r1
    4bc4:	08 95       	ret

00004bc6 <_exit>:
    4bc6:	f8 94       	cli

00004bc8 <__stop_program>:
    4bc8:	ff cf       	rjmp	.-2      	; 0x4bc8 <__stop_program>

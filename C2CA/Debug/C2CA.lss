
C2CA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  00004bcc  00004c60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004bcc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003c1  00800140  00800140  00004ca0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004ca0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004cfc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00004d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000044ad  00000000  00000000  00004db4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000428  00000000  00000000  00009261  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002a3e  00000000  00000000  00009689  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a4  00000000  00000000  0000c0c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00010532  00000000  00000000  0000c36c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004da5  00000000  00000000  0001c89e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000960  00000000  00000000  00021643  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00000624  00000000  00000000  00021fa3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	85 c1       	rjmp	.+778    	; 0x30c <__ctors_end>
       2:	00 00       	nop
       4:	a0 c1       	rjmp	.+832    	; 0x346 <__bad_interrupt>
       6:	00 00       	nop
       8:	9e c1       	rjmp	.+828    	; 0x346 <__bad_interrupt>
       a:	00 00       	nop
       c:	9c c1       	rjmp	.+824    	; 0x346 <__bad_interrupt>
       e:	00 00       	nop
      10:	9a c1       	rjmp	.+820    	; 0x346 <__bad_interrupt>
      12:	00 00       	nop
      14:	98 c1       	rjmp	.+816    	; 0x346 <__bad_interrupt>
      16:	00 00       	nop
      18:	96 c1       	rjmp	.+812    	; 0x346 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	13 c5       	rjmp	.+2598   	; 0xa44 <__vector_7>
      1e:	00 00       	nop
      20:	92 c1       	rjmp	.+804    	; 0x346 <__bad_interrupt>
      22:	00 00       	nop
      24:	90 c1       	rjmp	.+800    	; 0x346 <__bad_interrupt>
      26:	00 00       	nop
      28:	8e c1       	rjmp	.+796    	; 0x346 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8c c1       	rjmp	.+792    	; 0x346 <__bad_interrupt>
      2e:	00 00       	nop
      30:	8a c1       	rjmp	.+788    	; 0x346 <__bad_interrupt>
      32:	00 00       	nop
      34:	88 c1       	rjmp	.+784    	; 0x346 <__bad_interrupt>
      36:	00 00       	nop
      38:	67 c4       	rjmp	.+2254   	; 0x908 <__vector_14>
      3a:	00 00       	nop
      3c:	84 c1       	rjmp	.+776    	; 0x346 <__bad_interrupt>
      3e:	00 00       	nop
      40:	82 c1       	rjmp	.+772    	; 0x346 <__bad_interrupt>
      42:	00 00       	nop
      44:	80 c1       	rjmp	.+768    	; 0x346 <__bad_interrupt>
      46:	00 00       	nop
      48:	2b c4       	rjmp	.+2134   	; 0x8a0 <__vector_18>
      4a:	00 00       	nop
      4c:	e9 c3       	rjmp	.+2002   	; 0x820 <__vector_19>
      4e:	00 00       	nop
      50:	7a c1       	rjmp	.+756    	; 0x346 <__bad_interrupt>
      52:	00 00       	nop
      54:	78 c1       	rjmp	.+752    	; 0x346 <__bad_interrupt>
      56:	00 00       	nop
      58:	76 c1       	rjmp	.+748    	; 0x346 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	74 c1       	rjmp	.+744    	; 0x346 <__bad_interrupt>
      5e:	00 00       	nop
      60:	72 c1       	rjmp	.+740    	; 0x346 <__bad_interrupt>
      62:	00 00       	nop
      64:	70 c1       	rjmp	.+736    	; 0x346 <__bad_interrupt>
      66:	00 00       	nop
      68:	bb 0e       	add	r11, r27
      6a:	d6 0f       	add	r29, r22
      6c:	f1 10       	cpse	r15, r1
      6e:	0c 12       	cpse	r0, r28
      70:	27 13       	cpse	r18, r23
      72:	42 14       	cp	r4, r2
      74:	53 14       	cp	r5, r3
      76:	64 14       	cp	r6, r4
      78:	18 17       	cp	r17, r24
      7a:	18 17       	cp	r17, r24
      7c:	18 17       	cp	r17, r24
      7e:	18 17       	cp	r17, r24
      80:	18 17       	cp	r17, r24
      82:	18 17       	cp	r17, r24
      84:	18 17       	cp	r17, r24
      86:	18 17       	cp	r17, r24
      88:	18 17       	cp	r17, r24
      8a:	18 17       	cp	r17, r24
      8c:	18 17       	cp	r17, r24
      8e:	18 17       	cp	r17, r24
      90:	18 17       	cp	r17, r24
      92:	18 17       	cp	r17, r24
      94:	18 17       	cp	r17, r24
      96:	18 17       	cp	r17, r24
      98:	18 17       	cp	r17, r24
      9a:	18 17       	cp	r17, r24
      9c:	18 17       	cp	r17, r24
      9e:	18 17       	cp	r17, r24
      a0:	18 17       	cp	r17, r24
      a2:	18 17       	cp	r17, r24
      a4:	18 17       	cp	r17, r24
      a6:	18 17       	cp	r17, r24
      a8:	18 17       	cp	r17, r24
      aa:	18 17       	cp	r17, r24
      ac:	18 17       	cp	r17, r24
      ae:	18 17       	cp	r17, r24
      b0:	18 17       	cp	r17, r24
      b2:	18 17       	cp	r17, r24
      b4:	18 17       	cp	r17, r24
      b6:	18 17       	cp	r17, r24
      b8:	18 17       	cp	r17, r24
      ba:	18 17       	cp	r17, r24
      bc:	18 17       	cp	r17, r24
      be:	18 17       	cp	r17, r24
      c0:	18 17       	cp	r17, r24
      c2:	18 17       	cp	r17, r24
      c4:	18 17       	cp	r17, r24
      c6:	18 17       	cp	r17, r24
      c8:	18 17       	cp	r17, r24
      ca:	18 17       	cp	r17, r24
      cc:	18 17       	cp	r17, r24
      ce:	18 17       	cp	r17, r24
      d0:	18 17       	cp	r17, r24
      d2:	18 17       	cp	r17, r24
      d4:	18 17       	cp	r17, r24
      d6:	18 17       	cp	r17, r24
      d8:	18 17       	cp	r17, r24
      da:	18 17       	cp	r17, r24
      dc:	18 17       	cp	r17, r24
      de:	18 17       	cp	r17, r24
      e0:	18 17       	cp	r17, r24
      e2:	18 17       	cp	r17, r24
      e4:	18 17       	cp	r17, r24
      e6:	18 17       	cp	r17, r24
      e8:	18 17       	cp	r17, r24
      ea:	18 17       	cp	r17, r24
      ec:	18 17       	cp	r17, r24
      ee:	18 17       	cp	r17, r24
      f0:	18 17       	cp	r17, r24
      f2:	18 17       	cp	r17, r24
      f4:	18 17       	cp	r17, r24
      f6:	18 17       	cp	r17, r24
      f8:	18 17       	cp	r17, r24
      fa:	18 17       	cp	r17, r24
      fc:	18 17       	cp	r17, r24
      fe:	18 17       	cp	r17, r24
     100:	18 17       	cp	r17, r24
     102:	18 17       	cp	r17, r24
     104:	18 17       	cp	r17, r24
     106:	18 17       	cp	r17, r24
     108:	18 17       	cp	r17, r24
     10a:	18 17       	cp	r17, r24
     10c:	18 17       	cp	r17, r24
     10e:	18 17       	cp	r17, r24
     110:	18 17       	cp	r17, r24
     112:	18 17       	cp	r17, r24
     114:	18 17       	cp	r17, r24
     116:	18 17       	cp	r17, r24
     118:	18 17       	cp	r17, r24
     11a:	18 17       	cp	r17, r24
     11c:	18 17       	cp	r17, r24
     11e:	18 17       	cp	r17, r24
     120:	18 17       	cp	r17, r24
     122:	18 17       	cp	r17, r24
     124:	18 17       	cp	r17, r24
     126:	18 17       	cp	r17, r24
     128:	18 17       	cp	r17, r24
     12a:	18 17       	cp	r17, r24
     12c:	18 17       	cp	r17, r24
     12e:	18 17       	cp	r17, r24
     130:	75 14       	cp	r7, r5
     132:	86 14       	cp	r8, r6
     134:	97 14       	cp	r9, r7
     136:	a8 14       	cp	r10, r8
     138:	b9 14       	cp	r11, r9
     13a:	ca 14       	cp	r12, r10
     13c:	db 14       	cp	r13, r11
     13e:	ec 14       	cp	r14, r12
     140:	18 17       	cp	r17, r24
     142:	18 17       	cp	r17, r24
     144:	18 17       	cp	r17, r24
     146:	18 17       	cp	r17, r24
     148:	18 17       	cp	r17, r24
     14a:	18 17       	cp	r17, r24
     14c:	18 17       	cp	r17, r24
     14e:	18 17       	cp	r17, r24
     150:	18 17       	cp	r17, r24
     152:	18 17       	cp	r17, r24
     154:	18 17       	cp	r17, r24
     156:	18 17       	cp	r17, r24
     158:	18 17       	cp	r17, r24
     15a:	18 17       	cp	r17, r24
     15c:	18 17       	cp	r17, r24
     15e:	18 17       	cp	r17, r24
     160:	18 17       	cp	r17, r24
     162:	18 17       	cp	r17, r24
     164:	18 17       	cp	r17, r24
     166:	18 17       	cp	r17, r24
     168:	18 17       	cp	r17, r24
     16a:	18 17       	cp	r17, r24
     16c:	18 17       	cp	r17, r24
     16e:	18 17       	cp	r17, r24
     170:	18 17       	cp	r17, r24
     172:	18 17       	cp	r17, r24
     174:	18 17       	cp	r17, r24
     176:	18 17       	cp	r17, r24
     178:	18 17       	cp	r17, r24
     17a:	18 17       	cp	r17, r24
     17c:	18 17       	cp	r17, r24
     17e:	18 17       	cp	r17, r24
     180:	18 17       	cp	r17, r24
     182:	18 17       	cp	r17, r24
     184:	18 17       	cp	r17, r24
     186:	18 17       	cp	r17, r24
     188:	18 17       	cp	r17, r24
     18a:	18 17       	cp	r17, r24
     18c:	18 17       	cp	r17, r24
     18e:	18 17       	cp	r17, r24
     190:	18 17       	cp	r17, r24
     192:	18 17       	cp	r17, r24
     194:	18 17       	cp	r17, r24
     196:	18 17       	cp	r17, r24
     198:	18 17       	cp	r17, r24
     19a:	18 17       	cp	r17, r24
     19c:	18 17       	cp	r17, r24
     19e:	18 17       	cp	r17, r24
     1a0:	18 17       	cp	r17, r24
     1a2:	18 17       	cp	r17, r24
     1a4:	18 17       	cp	r17, r24
     1a6:	18 17       	cp	r17, r24
     1a8:	18 17       	cp	r17, r24
     1aa:	18 17       	cp	r17, r24
     1ac:	18 17       	cp	r17, r24
     1ae:	18 17       	cp	r17, r24
     1b0:	18 17       	cp	r17, r24
     1b2:	18 17       	cp	r17, r24
     1b4:	18 17       	cp	r17, r24
     1b6:	18 17       	cp	r17, r24
     1b8:	18 17       	cp	r17, r24
     1ba:	18 17       	cp	r17, r24
     1bc:	18 17       	cp	r17, r24
     1be:	18 17       	cp	r17, r24
     1c0:	18 17       	cp	r17, r24
     1c2:	18 17       	cp	r17, r24
     1c4:	18 17       	cp	r17, r24
     1c6:	18 17       	cp	r17, r24
     1c8:	18 17       	cp	r17, r24
     1ca:	18 17       	cp	r17, r24
     1cc:	18 17       	cp	r17, r24
     1ce:	18 17       	cp	r17, r24
     1d0:	18 17       	cp	r17, r24
     1d2:	18 17       	cp	r17, r24
     1d4:	18 17       	cp	r17, r24
     1d6:	18 17       	cp	r17, r24
     1d8:	18 17       	cp	r17, r24
     1da:	18 17       	cp	r17, r24
     1dc:	18 17       	cp	r17, r24
     1de:	18 17       	cp	r17, r24
     1e0:	18 17       	cp	r17, r24
     1e2:	18 17       	cp	r17, r24
     1e4:	18 17       	cp	r17, r24
     1e6:	18 17       	cp	r17, r24
     1e8:	18 17       	cp	r17, r24
     1ea:	18 17       	cp	r17, r24
     1ec:	18 17       	cp	r17, r24
     1ee:	18 17       	cp	r17, r24
     1f0:	18 17       	cp	r17, r24
     1f2:	18 17       	cp	r17, r24
     1f4:	18 17       	cp	r17, r24
     1f6:	18 17       	cp	r17, r24
     1f8:	fd 14       	cp	r15, r13
     1fa:	0e 15       	cp	r16, r14
     1fc:	1f 15       	cp	r17, r15
     1fe:	30 15       	cp	r19, r0
     200:	41 15       	cp	r20, r1
     202:	52 15       	cp	r21, r2
     204:	6e 16       	cp	r6, r30
     206:	7f 16       	cp	r7, r31
     208:	18 17       	cp	r17, r24
     20a:	18 17       	cp	r17, r24
     20c:	18 17       	cp	r17, r24
     20e:	18 17       	cp	r17, r24
     210:	18 17       	cp	r17, r24
     212:	18 17       	cp	r17, r24
     214:	18 17       	cp	r17, r24
     216:	18 17       	cp	r17, r24
     218:	18 17       	cp	r17, r24
     21a:	18 17       	cp	r17, r24
     21c:	18 17       	cp	r17, r24
     21e:	18 17       	cp	r17, r24
     220:	18 17       	cp	r17, r24
     222:	18 17       	cp	r17, r24
     224:	18 17       	cp	r17, r24
     226:	18 17       	cp	r17, r24
     228:	18 17       	cp	r17, r24
     22a:	18 17       	cp	r17, r24
     22c:	18 17       	cp	r17, r24
     22e:	18 17       	cp	r17, r24
     230:	18 17       	cp	r17, r24
     232:	18 17       	cp	r17, r24
     234:	18 17       	cp	r17, r24
     236:	18 17       	cp	r17, r24
     238:	18 17       	cp	r17, r24
     23a:	18 17       	cp	r17, r24
     23c:	18 17       	cp	r17, r24
     23e:	18 17       	cp	r17, r24
     240:	18 17       	cp	r17, r24
     242:	18 17       	cp	r17, r24
     244:	18 17       	cp	r17, r24
     246:	18 17       	cp	r17, r24
     248:	18 17       	cp	r17, r24
     24a:	18 17       	cp	r17, r24
     24c:	18 17       	cp	r17, r24
     24e:	18 17       	cp	r17, r24
     250:	18 17       	cp	r17, r24
     252:	18 17       	cp	r17, r24
     254:	18 17       	cp	r17, r24
     256:	18 17       	cp	r17, r24
     258:	18 17       	cp	r17, r24
     25a:	18 17       	cp	r17, r24
     25c:	18 17       	cp	r17, r24
     25e:	18 17       	cp	r17, r24
     260:	18 17       	cp	r17, r24
     262:	18 17       	cp	r17, r24
     264:	18 17       	cp	r17, r24
     266:	18 17       	cp	r17, r24
     268:	18 17       	cp	r17, r24
     26a:	18 17       	cp	r17, r24
     26c:	18 17       	cp	r17, r24
     26e:	18 17       	cp	r17, r24
     270:	18 17       	cp	r17, r24
     272:	18 17       	cp	r17, r24
     274:	18 17       	cp	r17, r24
     276:	18 17       	cp	r17, r24
     278:	18 17       	cp	r17, r24
     27a:	18 17       	cp	r17, r24
     27c:	18 17       	cp	r17, r24
     27e:	18 17       	cp	r17, r24
     280:	18 17       	cp	r17, r24
     282:	18 17       	cp	r17, r24
     284:	18 17       	cp	r17, r24
     286:	18 17       	cp	r17, r24
     288:	18 17       	cp	r17, r24
     28a:	18 17       	cp	r17, r24
     28c:	18 17       	cp	r17, r24
     28e:	18 17       	cp	r17, r24
     290:	18 17       	cp	r17, r24
     292:	18 17       	cp	r17, r24
     294:	18 17       	cp	r17, r24
     296:	18 17       	cp	r17, r24
     298:	18 17       	cp	r17, r24
     29a:	18 17       	cp	r17, r24
     29c:	18 17       	cp	r17, r24
     29e:	18 17       	cp	r17, r24
     2a0:	18 17       	cp	r17, r24
     2a2:	18 17       	cp	r17, r24
     2a4:	18 17       	cp	r17, r24
     2a6:	18 17       	cp	r17, r24
     2a8:	18 17       	cp	r17, r24
     2aa:	18 17       	cp	r17, r24
     2ac:	18 17       	cp	r17, r24
     2ae:	18 17       	cp	r17, r24
     2b0:	18 17       	cp	r17, r24
     2b2:	18 17       	cp	r17, r24
     2b4:	18 17       	cp	r17, r24
     2b6:	18 17       	cp	r17, r24
     2b8:	18 17       	cp	r17, r24
     2ba:	18 17       	cp	r17, r24
     2bc:	18 17       	cp	r17, r24
     2be:	18 17       	cp	r17, r24
     2c0:	90 16       	cp	r9, r16
     2c2:	a1 16       	cp	r10, r17
     2c4:	b2 16       	cp	r11, r18
     2c6:	c3 16       	cp	r12, r19
     2c8:	d4 16       	cp	r13, r20
     2ca:	e5 16       	cp	r14, r21
     2cc:	f6 16       	cp	r15, r22
     2ce:	07 17       	cp	r16, r23

000002d0 <__trampolines_end>:
     2d0:	4e 41       	sbci	r20, 0x1E	; 30
     2d2:	4e 49       	sbci	r20, 0x9E	; 158

000002d3 <pstr_inity>:
     2d3:	49 4e 49 54 59                                      INITY

000002d8 <pstr_inf>:
     2d8:	49 4e 46                                            INF

000002db <pwr_m10>:
     2db:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     2eb:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000002f3 <pwr_p10>:
     2f3:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     303:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

0000030c <__ctors_end>:
     30c:	11 24       	eor	r1, r1
     30e:	1f be       	out	0x3f, r1	; 63
     310:	cf ef       	ldi	r28, 0xFF	; 255
     312:	d8 e0       	ldi	r29, 0x08	; 8
     314:	de bf       	out	0x3e, r29	; 62
     316:	cd bf       	out	0x3d, r28	; 61

00000318 <__do_copy_data>:
     318:	11 e0       	ldi	r17, 0x01	; 1
     31a:	a0 e0       	ldi	r26, 0x00	; 0
     31c:	b1 e0       	ldi	r27, 0x01	; 1
     31e:	ec ec       	ldi	r30, 0xCC	; 204
     320:	fb e4       	ldi	r31, 0x4B	; 75
     322:	02 c0       	rjmp	.+4      	; 0x328 <__do_copy_data+0x10>
     324:	05 90       	lpm	r0, Z+
     326:	0d 92       	st	X+, r0
     328:	a0 34       	cpi	r26, 0x40	; 64
     32a:	b1 07       	cpc	r27, r17
     32c:	d9 f7       	brne	.-10     	; 0x324 <__do_copy_data+0xc>

0000032e <__do_clear_bss>:
     32e:	25 e0       	ldi	r18, 0x05	; 5
     330:	a0 e4       	ldi	r26, 0x40	; 64
     332:	b1 e0       	ldi	r27, 0x01	; 1
     334:	01 c0       	rjmp	.+2      	; 0x338 <.do_clear_bss_start>

00000336 <.do_clear_bss_loop>:
     336:	1d 92       	st	X+, r1

00000338 <.do_clear_bss_start>:
     338:	a1 30       	cpi	r26, 0x01	; 1
     33a:	b2 07       	cpc	r27, r18
     33c:	e1 f7       	brne	.-8      	; 0x336 <.do_clear_bss_loop>
     33e:	0e 94 80 0c 	call	0x1900	; 0x1900 <main>
     342:	0c 94 e4 25 	jmp	0x4bc8	; 0x4bc8 <_exit>

00000346 <__bad_interrupt>:
     346:	5c ce       	rjmp	.-840    	; 0x0 <__vectors>

00000348 <uart_init>:
 * This function will initialize the UART baud rate registers with the correct
 * values using the AVR libc setbaud utility. In addition set the UART to
 * 8-bit, 1 stop and no parity.
 */
static void uart_init(void)
{
     348:	cf 93       	push	r28
     34a:	df 93       	push	r29
     34c:	cd b7       	in	r28, 0x3d	; 61
     34e:	de b7       	in	r29, 0x3e	; 62
     350:	69 97       	sbiw	r28, 0x19	; 25
     352:	0f b6       	in	r0, 0x3f	; 63
     354:	f8 94       	cli
     356:	de bf       	out	0x3e, r29	; 62
     358:	0f be       	out	0x3f, r0	; 63
     35a:	cd bf       	out	0x3d, r28	; 61
#if defined UBRR0H
	// get the values from the setbaud tool
	UBRR0H = UBRRH_VALUE;
     35c:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBRRL_VALUE;
     360:	82 e2       	ldi	r24, 0x22	; 34
     362:	80 93 c4 00 	sts	0x00C4, r24
#else
#error "Device is not supported by the driver"
#endif

#if USE_2X
	UCSR0A |= (1 << U2X0);
     366:	e0 ec       	ldi	r30, 0xC0	; 192
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	80 81       	ld	r24, Z
     36c:	82 60       	ori	r24, 0x02	; 2
     36e:	80 83       	st	Z, r24
#endif

	// enable RX and TX and set interrupts on rx complete
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
     370:	88 e9       	ldi	r24, 0x98	; 152
     372:	80 93 c1 00 	sts	0x00C1, r24

	// 8-bit, 1 stop bit, no parity, asynchronous UART
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00) | (0 << USBS0) |
     376:	86 e0       	ldi	r24, 0x06	; 6
     378:	80 93 c2 00 	sts	0x00C2, r24
 * \retval struct ring_buffer a struct containing the ring buffer
 */
static inline struct ring_buffer ring_buffer_init(uint8_t *buffer, uint8_t size)
{
	struct ring_buffer ring;
	ring.write_offset = 0;
     37c:	1d 8a       	std	Y+21, r1	; 0x15
	ring.read_offset = 0;
     37e:	1e 8a       	std	Y+22, r1	; 0x16
	ring.size = size;
     380:	8f ef       	ldi	r24, 0xFF	; 255
     382:	8f 8b       	std	Y+23, r24	; 0x17
	ring.buffer = buffer;
     384:	28 ea       	ldi	r18, 0xA8	; 168
     386:	31 e0       	ldi	r19, 0x01	; 1
     388:	39 8f       	std	Y+25, r19	; 0x19
     38a:	28 8f       	std	Y+24, r18	; 0x18
	return ring;
     38c:	95 e0       	ldi	r25, 0x05	; 5
     38e:	fe 01       	movw	r30, r28
     390:	75 96       	adiw	r30, 0x15	; 21
     392:	de 01       	movw	r26, r28
     394:	1b 96       	adiw	r26, 0x0b	; 11
     396:	01 90       	ld	r0, Z+
     398:	0d 92       	st	X+, r0
     39a:	9a 95       	dec	r25
     39c:	e1 f7       	brne	.-8      	; 0x396 <uart_init+0x4e>
     39e:	95 e0       	ldi	r25, 0x05	; 5
     3a0:	fe 01       	movw	r30, r28
     3a2:	3b 96       	adiw	r30, 0x0b	; 11
     3a4:	de 01       	movw	r26, r28
     3a6:	50 96       	adiw	r26, 0x10	; 16
     3a8:	01 90       	ld	r0, Z+
     3aa:	0d 92       	st	X+, r0
     3ac:	9a 95       	dec	r25
     3ae:	e1 f7       	brne	.-8      	; 0x3a8 <uart_init+0x60>
			(0 << UPM01) | (0 << UPM00) | (0 << UMSEL01) |
			(0 << UMSEL00);

	// initialize the in and out buffer for the UART
	ring_buffer_out = ring_buffer_init(out_buffer, BUFFER_SIZE);
     3b0:	95 e0       	ldi	r25, 0x05	; 5
     3b2:	fe 01       	movw	r30, r28
     3b4:	70 96       	adiw	r30, 0x10	; 16
     3b6:	aa ef       	ldi	r26, 0xFA	; 250
     3b8:	b4 e0       	ldi	r27, 0x04	; 4
     3ba:	01 90       	ld	r0, Z+
     3bc:	0d 92       	st	X+, r0
     3be:	9a 95       	dec	r25
     3c0:	e1 f7       	brne	.-8      	; 0x3ba <uart_init+0x72>
 * \retval struct ring_buffer a struct containing the ring buffer
 */
static inline struct ring_buffer ring_buffer_init(uint8_t *buffer, uint8_t size)
{
	struct ring_buffer ring;
	ring.write_offset = 0;
     3c2:	1d 8a       	std	Y+21, r1	; 0x15
	ring.read_offset = 0;
     3c4:	1e 8a       	std	Y+22, r1	; 0x16
	ring.size = size;
     3c6:	8f 8b       	std	Y+23, r24	; 0x17
	ring.buffer = buffer;
     3c8:	8a e0       	ldi	r24, 0x0A	; 10
     3ca:	93 e0       	ldi	r25, 0x03	; 3
     3cc:	99 8f       	std	Y+25, r25	; 0x19
     3ce:	88 8f       	std	Y+24, r24	; 0x18
	return ring;
     3d0:	85 e0       	ldi	r24, 0x05	; 5
     3d2:	fe 01       	movw	r30, r28
     3d4:	75 96       	adiw	r30, 0x15	; 21
     3d6:	de 01       	movw	r26, r28
     3d8:	11 96       	adiw	r26, 0x01	; 1
     3da:	01 90       	ld	r0, Z+
     3dc:	0d 92       	st	X+, r0
     3de:	8a 95       	dec	r24
     3e0:	e1 f7       	brne	.-8      	; 0x3da <uart_init+0x92>
     3e2:	85 e0       	ldi	r24, 0x05	; 5
     3e4:	fe 01       	movw	r30, r28
     3e6:	31 96       	adiw	r30, 0x01	; 1
     3e8:	de 01       	movw	r26, r28
     3ea:	16 96       	adiw	r26, 0x06	; 6
     3ec:	01 90       	ld	r0, Z+
     3ee:	0d 92       	st	X+, r0
     3f0:	8a 95       	dec	r24
     3f2:	e1 f7       	brne	.-8      	; 0x3ec <uart_init+0xa4>
	ring_buffer_in = ring_buffer_init(in_buffer, BUFFER_SIZE);
     3f4:	85 e0       	ldi	r24, 0x05	; 5
     3f6:	fe 01       	movw	r30, r28
     3f8:	36 96       	adiw	r30, 0x06	; 6
     3fa:	a1 e1       	ldi	r26, 0x11	; 17
     3fc:	b4 e0       	ldi	r27, 0x04	; 4
     3fe:	01 90       	ld	r0, Z+
     400:	0d 92       	st	X+, r0
     402:	8a 95       	dec	r24
     404:	e1 f7       	brne	.-8      	; 0x3fe <uart_init+0xb6>
}
     406:	69 96       	adiw	r28, 0x19	; 25
     408:	0f b6       	in	r0, 0x3f	; 63
     40a:	f8 94       	cli
     40c:	de bf       	out	0x3e, r29	; 62
     40e:	0f be       	out	0x3f, r0	; 63
     410:	cd bf       	out	0x3d, r28	; 61
     412:	df 91       	pop	r29
     414:	cf 91       	pop	r28
     416:	08 95       	ret

00000418 <MaxRTDinit>:
*************************************************/
static inline void MaxRTDinit( unsigned char dataWrite, unsigned char ch)
{
	unsigned char dummy;

	switch (ch)
     418:	62 30       	cpi	r22, 0x02	; 2
     41a:	59 f0       	breq	.+22     	; 0x432 <MaxRTDinit+0x1a>
     41c:	18 f4       	brcc	.+6      	; 0x424 <MaxRTDinit+0xc>
     41e:	61 30       	cpi	r22, 0x01	; 1
     420:	31 f0       	breq	.+12     	; 0x42e <MaxRTDinit+0x16>
     422:	0c c0       	rjmp	.+24     	; 0x43c <MaxRTDinit+0x24>
     424:	63 30       	cpi	r22, 0x03	; 3
     426:	39 f0       	breq	.+14     	; 0x436 <MaxRTDinit+0x1e>
     428:	64 30       	cpi	r22, 0x04	; 4
     42a:	39 f0       	breq	.+14     	; 0x43a <MaxRTDinit+0x22>
     42c:	07 c0       	rjmp	.+14     	; 0x43c <MaxRTDinit+0x24>
	{
		case 1:
		PORTD &= 0b11101111;	// Set CS1 low
     42e:	5c 98       	cbi	0x0b, 4	; 11
		break;
     430:	05 c0       	rjmp	.+10     	; 0x43c <MaxRTDinit+0x24>
		
		case 2:
		PORTD &= 0b11011111;	// Set CS2 low
     432:	5d 98       	cbi	0x0b, 5	; 11
		break;
     434:	03 c0       	rjmp	.+6      	; 0x43c <MaxRTDinit+0x24>
		
		case 3:
		PORTD &= 0b10111111;	// Set CS3 low
     436:	5e 98       	cbi	0x0b, 6	; 11
		break;
     438:	01 c0       	rjmp	.+2      	; 0x43c <MaxRTDinit+0x24>
		
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
     43a:	5f 98       	cbi	0x0b, 7	; 11
		break;
	}
	SPDR = 0x80;				// Configuration
     43c:	90 e8       	ldi	r25, 0x80	; 128
     43e:	9e bd       	out	0x2e, r25	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     440:	0d b4       	in	r0, 0x2d	; 45
     442:	07 fe       	sbrs	r0, 7
     444:	fd cf       	rjmp	.-6      	; 0x440 <MaxRTDinit+0x28>
	dummy = SPDR;				//just for clearing SPIF
     446:	9e b5       	in	r25, 0x2e	; 46
	SPDR = dataWrite;
     448:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     44a:	0d b4       	in	r0, 0x2d	; 45
     44c:	07 fe       	sbrs	r0, 7
     44e:	fd cf       	rjmp	.-6      	; 0x44a <MaxRTDinit+0x32>
	dummy = SPDR;
     450:	8e b5       	in	r24, 0x2e	; 46
	
	PORTD |= 0b11110000;		// Set all CS High
     452:	8b b1       	in	r24, 0x0b	; 11
     454:	80 6f       	ori	r24, 0xF0	; 240
     456:	8b b9       	out	0x0b, r24	; 11
     458:	08 95       	ret

0000045a <GenCrc16>:
		idx ++;
	}	
}

static inline int GenCrc16(char c[], int nByte)	// CRC-CCITT (XModem)
{
     45a:	cf 93       	push	r28
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
     45c:	16 16       	cp	r1, r22
     45e:	17 06       	cpc	r1, r23
     460:	3c f5       	brge	.+78     	; 0x4b0 <GenCrc16+0x56>
     462:	fc 01       	movw	r30, r24
     464:	68 0f       	add	r22, r24
     466:	79 1f       	adc	r23, r25
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	90 e0       	ldi	r25, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
     46c:	b8 e0       	ldi	r27, 0x08	; 8
     46e:	a0 e0       	ldi	r26, 0x00	; 0
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
     470:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
     472:	29 2f       	mov	r18, r25
     474:	33 27       	eor	r19, r19
     476:	27 fd       	sbrc	r18, 7
     478:	3a 95       	dec	r19
     47a:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
     47c:	32 2f       	mov	r19, r18
     47e:	22 27       	eor	r18, r18
     480:	4b 2f       	mov	r20, r27
     482:	5a 2f       	mov	r21, r26
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
     484:	33 23       	and	r19, r19
     486:	3c f4       	brge	.+14     	; 0x496 <GenCrc16+0x3c>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
     488:	22 0f       	add	r18, r18
     48a:	33 1f       	adc	r19, r19
     48c:	c1 e2       	ldi	r28, 0x21	; 33
     48e:	2c 27       	eor	r18, r28
     490:	c0 e1       	ldi	r28, 0x10	; 16
     492:	3c 27       	eor	r19, r28
     494:	02 c0       	rjmp	.+4      	; 0x49a <GenCrc16+0x40>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
     496:	22 0f       	add	r18, r18
     498:	33 1f       	adc	r19, r19
     49a:	41 50       	subi	r20, 0x01	; 1
     49c:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
     49e:	91 f7       	brne	.-28     	; 0x484 <GenCrc16+0x2a>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
     4a0:	98 2f       	mov	r25, r24
     4a2:	88 27       	eor	r24, r24
     4a4:	82 27       	eor	r24, r18
     4a6:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
     4a8:	e6 17       	cp	r30, r22
     4aa:	f7 07       	cpc	r31, r23
     4ac:	09 f7       	brne	.-62     	; 0x470 <GenCrc16+0x16>
     4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <GenCrc16+0x5a>
{
	int Polynominal = 0x1021;
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	90 e0       	ldi	r25, 0x00	; 0
		}
		CRC = (int)((CRC << 8) ^ Remainder);
		index++;
	}
	return CRC;
}
     4b4:	cf 91       	pop	r28
     4b6:	08 95       	ret

000004b8 <ParamParse>:
		printStatus("VSerror");
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
     4b8:	0f 93       	push	r16
     4ba:	1f 93       	push	r17
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	ec 01       	movw	r28, r24
     4c2:	06 2f       	mov	r16, r22
     4c4:	17 2f       	mov	r17, r23
	int s_len = strnlen(stringToParse, rx_size) - 5;
     4c6:	6e e1       	ldi	r22, 0x1E	; 30
     4c8:	70 e0       	ldi	r23, 0x00	; 0
     4ca:	0e 94 97 23 	call	0x472e	; 0x472e <strnlen>
     4ce:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
     4d0:	8b 30       	cpi	r24, 0x0B	; 11
     4d2:	91 05       	cpc	r25, r1
     4d4:	64 f0       	brlt	.+24     	; 0x4ee <ParamParse+0x36>
     4d6:	fe 01       	movw	r30, r28
     4d8:	3a 96       	adiw	r30, 0x0a	; 10
     4da:	a0 2f       	mov	r26, r16
     4dc:	b1 2f       	mov	r27, r17
     4de:	9e 01       	movw	r18, r28
     4e0:	28 0f       	add	r18, r24
     4e2:	39 1f       	adc	r19, r25
	{
		param[idx] = stringToParse[i];
     4e4:	91 91       	ld	r25, Z+
     4e6:	9d 93       	st	X+, r25
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
     4e8:	e2 17       	cp	r30, r18
     4ea:	f3 07       	cpc	r31, r19
     4ec:	d9 f7       	brne	.-10     	; 0x4e4 <ParamParse+0x2c>
	{
		param[idx] = stringToParse[i];
		idx ++;
	}	
}
     4ee:	df 91       	pop	r29
     4f0:	cf 91       	pop	r28
     4f2:	1f 91       	pop	r17
     4f4:	0f 91       	pop	r16
     4f6:	08 95       	ret

000004f8 <CrcCompare>:
	}
	return CRC;
}

static inline bool CrcCompare(char *crc_in, char *crc_calc)
{
     4f8:	0f 93       	push	r16
     4fa:	1f 93       	push	r17
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	ec 01       	movw	r28, r24
     502:	8b 01       	movw	r16, r22
	strupr(crc_in);
     504:	0e 94 a2 23 	call	0x4744	; 0x4744 <strupr>
	strupr(crc_calc);
     508:	c8 01       	movw	r24, r16
     50a:	0e 94 a2 23 	call	0x4744	; 0x4744 <strupr>
	
	if(crc_in[0] == '0' && crc_in[1] == '0' && crc_in[2] == '0')
     50e:	88 81       	ld	r24, Y
     510:	80 33       	cpi	r24, 0x30	; 48
     512:	19 f5       	brne	.+70     	; 0x55a <CrcCompare+0x62>
     514:	89 81       	ldd	r24, Y+1	; 0x01
     516:	80 33       	cpi	r24, 0x30	; 48
     518:	09 f0       	breq	.+2      	; 0x51c <CrcCompare+0x24>
     51a:	41 c0       	rjmp	.+130    	; 0x59e <CrcCompare+0xa6>
     51c:	8a 81       	ldd	r24, Y+2	; 0x02
     51e:	80 33       	cpi	r24, 0x30	; 48
     520:	b9 f5       	brne	.+110    	; 0x590 <CrcCompare+0x98>
	{
			if(crc_in[3] == crc_calc[0])
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	2b 81       	ldd	r18, Y+3	; 0x03
     526:	f8 01       	movw	r30, r16
     528:	90 81       	ld	r25, Z
     52a:	29 17       	cp	r18, r25
     52c:	e9 f1       	breq	.+122    	; 0x5a8 <CrcCompare+0xb0>
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	3b c0       	rjmp	.+118    	; 0x5a8 <CrcCompare+0xb0>
			}
	}

	if(crc_in[0] == '0' && crc_in[1] == '0')
	{
		if((crc_in[2] == crc_calc[0]) && (crc_in[3] == crc_calc[1]))
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	2b 81       	ldd	r18, Y+3	; 0x03
     536:	f8 01       	movw	r30, r16
     538:	91 81       	ldd	r25, Z+1	; 0x01
     53a:	29 17       	cp	r18, r25
     53c:	a9 f1       	breq	.+106    	; 0x5a8 <CrcCompare+0xb0>
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	33 c0       	rjmp	.+102    	; 0x5a8 <CrcCompare+0xb0>
		}
	}
	
	if(crc_in[0] == '0')
	{
		if((crc_in[1] == crc_calc[0]) && (crc_in[2] == crc_calc[1]) &&
     542:	9a 81       	ldd	r25, Y+2	; 0x02
     544:	f8 01       	movw	r30, r16
     546:	81 81       	ldd	r24, Z+1	; 0x01
     548:	98 13       	cpse	r25, r24
     54a:	1a c0       	rjmp	.+52     	; 0x580 <CrcCompare+0x88>
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	2b 81       	ldd	r18, Y+3	; 0x03
     550:	92 81       	ldd	r25, Z+2	; 0x02
     552:	29 17       	cp	r18, r25
     554:	49 f1       	breq	.+82     	; 0x5a8 <CrcCompare+0xb0>
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	27 c0       	rjmp	.+78     	; 0x5a8 <CrcCompare+0xb0>
			return false;
		}
	}	
	else
	{
		if((crc_in[0] == crc_calc[0]) && (crc_in[1] == crc_calc[1]) &&
     55a:	f8 01       	movw	r30, r16
     55c:	90 81       	ld	r25, Z
     55e:	89 13       	cpse	r24, r25
     560:	11 c0       	rjmp	.+34     	; 0x584 <CrcCompare+0x8c>
     562:	99 81       	ldd	r25, Y+1	; 0x01
     564:	81 81       	ldd	r24, Z+1	; 0x01
     566:	98 13       	cpse	r25, r24
     568:	0f c0       	rjmp	.+30     	; 0x588 <CrcCompare+0x90>
     56a:	9a 81       	ldd	r25, Y+2	; 0x02
     56c:	82 81       	ldd	r24, Z+2	; 0x02
     56e:	98 13       	cpse	r25, r24
     570:	0d c0       	rjmp	.+26     	; 0x58c <CrcCompare+0x94>
			(crc_in[2] == crc_calc[2]) && (crc_in[3] == crc_calc[3]))
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	2b 81       	ldd	r18, Y+3	; 0x03
     576:	93 81       	ldd	r25, Z+3	; 0x03
     578:	29 17       	cp	r18, r25
     57a:	b1 f0       	breq	.+44     	; 0x5a8 <CrcCompare+0xb0>
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	14 c0       	rjmp	.+40     	; 0x5a8 <CrcCompare+0xb0>
		{
			return true;
		}
		else
		{
			return false;
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	12 c0       	rjmp	.+36     	; 0x5a8 <CrcCompare+0xb0>
			{
				return true;
			}
			else
			{
				return false;
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	10 c0       	rjmp	.+32     	; 0x5a8 <CrcCompare+0xb0>
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	0e c0       	rjmp	.+28     	; 0x5a8 <CrcCompare+0xb0>
     58c:	80 e0       	ldi	r24, 0x00	; 0
     58e:	0c c0       	rjmp	.+24     	; 0x5a8 <CrcCompare+0xb0>
			}
	}

	if(crc_in[0] == '0' && crc_in[1] == '0')
	{
		if((crc_in[2] == crc_calc[0]) && (crc_in[3] == crc_calc[1]))
     590:	9a 81       	ldd	r25, Y+2	; 0x02
     592:	f8 01       	movw	r30, r16
     594:	80 81       	ld	r24, Z
     596:	98 17       	cp	r25, r24
     598:	61 f2       	breq	.-104    	; 0x532 <CrcCompare+0x3a>
		{
			return true;
		}
		else
		{
			return false;
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	05 c0       	rjmp	.+10     	; 0x5a8 <CrcCompare+0xb0>
		}
	}
	
	if(crc_in[0] == '0')
	{
		if((crc_in[1] == crc_calc[0]) && (crc_in[2] == crc_calc[1]) &&
     59e:	f8 01       	movw	r30, r16
     5a0:	90 81       	ld	r25, Z
     5a2:	89 17       	cp	r24, r25
     5a4:	71 f2       	breq	.-100    	; 0x542 <CrcCompare+0x4a>
		{
			return true;
		}
		else
		{
			return false;
     5a6:	80 e0       	ldi	r24, 0x00	; 0
			else
			{
				return false;
			}
	}
}
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	1f 91       	pop	r17
     5ae:	0f 91       	pop	r16
     5b0:	08 95       	ret

000005b2 <printStatus>:
	
	PORTD |= 0b11110000;		// Set all CS High
}

static inline void printStatus (char msg_string[])	// Send string on UART
{
     5b2:	cf 92       	push	r12
     5b4:	df 92       	push	r13
     5b6:	ef 92       	push	r14
     5b8:	ff 92       	push	r15
     5ba:	0f 93       	push	r16
     5bc:	1f 93       	push	r17
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
     5c2:	cd b7       	in	r28, 0x3d	; 61
     5c4:	de b7       	in	r29, 0x3e	; 62
     5c6:	a8 97       	sbiw	r28, 0x28	; 40
     5c8:	0f b6       	in	r0, 0x3f	; 63
     5ca:	f8 94       	cli
     5cc:	de bf       	out	0x3e, r29	; 62
     5ce:	0f be       	out	0x3f, r0	; 63
     5d0:	cd bf       	out	0x3d, r28	; 61
     5d2:	fc 01       	movw	r30, r24
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
     5d4:	81 e2       	ldi	r24, 0x21	; 33
     5d6:	89 83       	std	Y+1, r24	; 0x01
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
     5d8:	ac ed       	ldi	r26, 0xDC	; 220
     5da:	b4 e0       	ldi	r27, 0x04	; 4
     5dc:	11 96       	adiw	r26, 0x01	; 1
     5de:	8c 91       	ld	r24, X
     5e0:	11 97       	sbiw	r26, 0x01	; 1
     5e2:	8a 83       	std	Y+2, r24	; 0x02
     5e4:	12 96       	adiw	r26, 0x02	; 2
     5e6:	8c 91       	ld	r24, X
     5e8:	12 97       	sbiw	r26, 0x02	; 2
     5ea:	8b 83       	std	Y+3, r24	; 0x03
     5ec:	13 96       	adiw	r26, 0x03	; 3
     5ee:	8c 91       	ld	r24, X
     5f0:	8c 83       	std	Y+4, r24	; 0x04
     5f2:	cf 01       	movw	r24, r30
     5f4:	ae 01       	movw	r20, r28
     5f6:	4b 5f       	subi	r20, 0xFB	; 251
     5f8:	5f 4f       	sbci	r21, 0xFF	; 255
     5fa:	00 e0       	ldi	r16, 0x00	; 0
     5fc:	10 e0       	ldi	r17, 0x00	; 0
     5fe:	08 c0       	rjmp	.+16     	; 0x610 <printStatus+0x5e>
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
     600:	dc 01       	movw	r26, r24
     602:	2d 91       	ld	r18, X+
     604:	cd 01       	movw	r24, r26
     606:	da 01       	movw	r26, r20
     608:	2d 93       	st	X+, r18
     60a:	ad 01       	movw	r20, r26
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
     60c:	0f 5f       	subi	r16, 0xFF	; 255
     60e:	1f 4f       	sbci	r17, 0xFF	; 255
     610:	df 01       	movw	r26, r30
     612:	0d 90       	ld	r0, X+
     614:	00 20       	and	r0, r0
     616:	e9 f7       	brne	.-6      	; 0x612 <printStatus+0x60>
     618:	9d 01       	movw	r18, r26
     61a:	2e 1b       	sub	r18, r30
     61c:	3f 0b       	sbc	r19, r31
     61e:	2e 5f       	subi	r18, 0xFE	; 254
     620:	3f 4f       	sbci	r19, 0xFF	; 255
     622:	02 17       	cp	r16, r18
     624:	13 07       	cpc	r17, r19
     626:	60 f3       	brcs	.-40     	; 0x600 <printStatus+0x4e>
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
     628:	78 01       	movw	r14, r16
     62a:	bf ef       	ldi	r27, 0xFF	; 255
     62c:	eb 1a       	sub	r14, r27
     62e:	fb 0a       	sbc	r15, r27
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
     630:	1e 14       	cp	r1, r14
     632:	1f 04       	cpc	r1, r15
     634:	0c f0       	brlt	.+2      	; 0x638 <printStatus+0x86>
     636:	d7 c0       	rjmp	.+430    	; 0x7e6 <printStatus+0x234>
     638:	fe 01       	movw	r30, r28
     63a:	31 96       	adiw	r30, 0x01	; 1
     63c:	a7 01       	movw	r20, r14
     63e:	4e 0f       	add	r20, r30
     640:	5f 1f       	adc	r21, r31
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	90 e0       	ldi	r25, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
     646:	b8 e0       	ldi	r27, 0x08	; 8
     648:	d1 2c       	mov	r13, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
     64a:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
     64c:	29 2f       	mov	r18, r25
     64e:	33 27       	eor	r19, r19
     650:	27 fd       	sbrc	r18, 7
     652:	3a 95       	dec	r19
     654:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
     656:	32 2f       	mov	r19, r18
     658:	22 27       	eor	r18, r18
     65a:	6b 2f       	mov	r22, r27
     65c:	7d 2d       	mov	r23, r13
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
     65e:	33 23       	and	r19, r19
     660:	3c f4       	brge	.+14     	; 0x670 <printStatus+0xbe>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
     662:	22 0f       	add	r18, r18
     664:	33 1f       	adc	r19, r19
     666:	a1 e2       	ldi	r26, 0x21	; 33
     668:	2a 27       	eor	r18, r26
     66a:	a0 e1       	ldi	r26, 0x10	; 16
     66c:	3a 27       	eor	r19, r26
     66e:	02 c0       	rjmp	.+4      	; 0x674 <printStatus+0xc2>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
     670:	22 0f       	add	r18, r18
     672:	33 1f       	adc	r19, r19
     674:	61 50       	subi	r22, 0x01	; 1
     676:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
     678:	91 f7       	brne	.-28     	; 0x65e <printStatus+0xac>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
     67a:	98 2f       	mov	r25, r24
     67c:	88 27       	eor	r24, r24
     67e:	82 27       	eor	r24, r18
     680:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
     682:	e4 17       	cp	r30, r20
     684:	f5 07       	cpc	r31, r21
     686:	09 f7       	brne	.-62     	; 0x64a <printStatus+0x98>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
     688:	6c 01       	movw	r12, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     68a:	40 e1       	ldi	r20, 0x10	; 16
     68c:	6c e0       	ldi	r22, 0x0C	; 12
     68e:	74 e0       	ldi	r23, 0x04	; 4
     690:	0e 94 ac 23 	call	0x4758	; 0x4758 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
     694:	8c e0       	ldi	r24, 0x0C	; 12
     696:	94 e0       	ldi	r25, 0x04	; 4
     698:	0e 94 a2 23 	call	0x4744	; 0x4744 <strupr>
	if(crcXmodem < 0x10)
     69c:	b0 e1       	ldi	r27, 0x10	; 16
     69e:	cb 16       	cp	r12, r27
     6a0:	d1 04       	cpc	r13, r1
     6a2:	98 f4       	brcc	.+38     	; 0x6ca <printStatus+0x118>
	{
		tx_string[cnt+4] = crc[0];
     6a4:	80 91 0c 04 	lds	r24, 0x040C
     6a8:	fe 01       	movw	r30, r28
     6aa:	e0 0f       	add	r30, r16
     6ac:	f1 1f       	adc	r31, r17
     6ae:	85 83       	std	Z+5, r24	; 0x05
		tx_string[cnt+3] = '0';
     6b0:	80 e3       	ldi	r24, 0x30	; 48
     6b2:	fe 01       	movw	r30, r28
     6b4:	e0 0f       	add	r30, r16
     6b6:	f1 1f       	adc	r31, r17
     6b8:	84 83       	std	Z+4, r24	; 0x04
		tx_string[cnt+2] = '0';
     6ba:	fe 01       	movw	r30, r28
     6bc:	e0 0f       	add	r30, r16
     6be:	f1 1f       	adc	r31, r17
     6c0:	83 83       	std	Z+3, r24	; 0x03
		tx_string[cnt+1] = '0';
     6c2:	fe 01       	movw	r30, r28
     6c4:	ee 0d       	add	r30, r14
     6c6:	ff 1d       	adc	r31, r15
     6c8:	81 83       	std	Z+1, r24	; 0x01
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
     6ca:	c6 01       	movw	r24, r12
     6cc:	40 97       	sbiw	r24, 0x10	; 16
     6ce:	80 3f       	cpi	r24, 0xF0	; 240
     6d0:	91 05       	cpc	r25, r1
     6d2:	b8 f4       	brcc	.+46     	; 0x702 <printStatus+0x150>
	{
		tx_string[cnt+4] = crc[1];
     6d4:	ac e0       	ldi	r26, 0x0C	; 12
     6d6:	b4 e0       	ldi	r27, 0x04	; 4
     6d8:	11 96       	adiw	r26, 0x01	; 1
     6da:	8c 91       	ld	r24, X
     6dc:	11 97       	sbiw	r26, 0x01	; 1
     6de:	fe 01       	movw	r30, r28
     6e0:	e0 0f       	add	r30, r16
     6e2:	f1 1f       	adc	r31, r17
     6e4:	85 83       	std	Z+5, r24	; 0x05
		tx_string[cnt+3] = crc[0];
     6e6:	8c 91       	ld	r24, X
     6e8:	fe 01       	movw	r30, r28
     6ea:	e0 0f       	add	r30, r16
     6ec:	f1 1f       	adc	r31, r17
     6ee:	84 83       	std	Z+4, r24	; 0x04
		tx_string[cnt+2] = '0';
     6f0:	80 e3       	ldi	r24, 0x30	; 48
     6f2:	fe 01       	movw	r30, r28
     6f4:	e0 0f       	add	r30, r16
     6f6:	f1 1f       	adc	r31, r17
     6f8:	83 83       	std	Z+3, r24	; 0x03
		tx_string[cnt+1] = '0';		
     6fa:	fe 01       	movw	r30, r28
     6fc:	ee 0d       	add	r30, r14
     6fe:	ff 1d       	adc	r31, r15
     700:	81 83       	std	Z+1, r24	; 0x01
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
     702:	c6 01       	movw	r24, r12
     704:	9a 95       	dec	r25
     706:	81 15       	cp	r24, r1
     708:	9f 40       	sbci	r25, 0x0F	; 15
     70a:	b8 f4       	brcc	.+46     	; 0x73a <printStatus+0x188>
	{
		tx_string[cnt+4] = crc[2];
     70c:	ec e0       	ldi	r30, 0x0C	; 12
     70e:	f4 e0       	ldi	r31, 0x04	; 4
     710:	82 81       	ldd	r24, Z+2	; 0x02
     712:	de 01       	movw	r26, r28
     714:	a0 0f       	add	r26, r16
     716:	b1 1f       	adc	r27, r17
     718:	15 96       	adiw	r26, 0x05	; 5
     71a:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[1];
     71c:	81 81       	ldd	r24, Z+1	; 0x01
     71e:	de 01       	movw	r26, r28
     720:	a0 0f       	add	r26, r16
     722:	b1 1f       	adc	r27, r17
     724:	14 96       	adiw	r26, 0x04	; 4
     726:	8c 93       	st	X, r24
     728:	14 97       	sbiw	r26, 0x04	; 4
		tx_string[cnt+2] = crc[0];
     72a:	80 81       	ld	r24, Z
     72c:	fd 01       	movw	r30, r26
     72e:	83 83       	std	Z+3, r24	; 0x03
		tx_string[cnt+1] = '0';		
     730:	80 e3       	ldi	r24, 0x30	; 48
     732:	fe 01       	movw	r30, r28
     734:	ee 0d       	add	r30, r14
     736:	ff 1d       	adc	r31, r15
     738:	81 83       	std	Z+1, r24	; 0x01
	}
	if(crcXmodem >= 0x1000)
     73a:	c1 14       	cp	r12, r1
     73c:	80 e1       	ldi	r24, 0x10	; 16
     73e:	d8 06       	cpc	r13, r24
     740:	c0 f0       	brcs	.+48     	; 0x772 <printStatus+0x1c0>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
     742:	de 01       	movw	r26, r28
     744:	ae 0d       	add	r26, r14
     746:	bf 1d       	adc	r27, r15
     748:	ec e0       	ldi	r30, 0x0C	; 12
     74a:	f4 e0       	ldi	r31, 0x04	; 4
     74c:	80 81       	ld	r24, Z
     74e:	11 96       	adiw	r26, 0x01	; 1
     750:	8c 93       	st	X, r24
		tx_string[cnt+2] = crc[1];
     752:	81 81       	ldd	r24, Z+1	; 0x01
     754:	de 01       	movw	r26, r28
     756:	a0 0f       	add	r26, r16
     758:	b1 1f       	adc	r27, r17
     75a:	13 96       	adiw	r26, 0x03	; 3
     75c:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[2];
     75e:	82 81       	ldd	r24, Z+2	; 0x02
     760:	de 01       	movw	r26, r28
     762:	a0 0f       	add	r26, r16
     764:	b1 1f       	adc	r27, r17
     766:	14 96       	adiw	r26, 0x04	; 4
     768:	8c 93       	st	X, r24
     76a:	14 97       	sbiw	r26, 0x04	; 4
		tx_string[cnt+4] = crc[3];
     76c:	83 81       	ldd	r24, Z+3	; 0x03
     76e:	fd 01       	movw	r30, r26
     770:	85 83       	std	Z+5, r24	; 0x05
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
     772:	c8 01       	movw	r24, r16
     774:	05 96       	adiw	r24, 0x05	; 5
     776:	fe 01       	movw	r30, r28
     778:	e8 0f       	add	r30, r24
     77a:	f9 1f       	adc	r31, r25
     77c:	2d e0       	ldi	r18, 0x0D	; 13
     77e:	21 83       	std	Z+1, r18	; 0x01
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
     780:	99 23       	and	r25, r25
     782:	0c f4       	brge	.+2      	; 0x786 <printStatus+0x1d4>
     784:	3e c0       	rjmp	.+124    	; 0x802 <printStatus+0x250>
     786:	ae 01       	movw	r20, r28
     788:	4f 5f       	subi	r20, 0xFF	; 255
     78a:	5f 4f       	sbci	r21, 0xFF	; 255
     78c:	0a 5f       	subi	r16, 0xFA	; 250
     78e:	1f 4f       	sbci	r17, 0xFF	; 255
     790:	04 0f       	add	r16, r20
     792:	15 1f       	adc	r17, r21
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
     794:	ea ef       	ldi	r30, 0xFA	; 250
     796:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
     798:	61 ec       	ldi	r22, 0xC1	; 193
     79a:	70 e0       	ldi	r23, 0x00	; 0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     79c:	30 e0       	ldi	r19, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
     79e:	da 01       	movw	r26, r20
     7a0:	8d 91       	ld	r24, X+
     7a2:	ad 01       	movw	r20, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
     7a4:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
     7a6:	21 81       	ldd	r18, Z+1	; 0x01
     7a8:	90 81       	ld	r25, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
     7aa:	29 13       	cpse	r18, r25
     7ac:	04 c0       	rjmp	.+8      	; 0x7b6 <printStatus+0x204>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
     7ae:	db 01       	movw	r26, r22
     7b0:	9c 91       	ld	r25, X
     7b2:	90 62       	ori	r25, 0x20	; 32
     7b4:	9c 93       	st	X, r25
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
     7b6:	90 81       	ld	r25, Z
     7b8:	a3 81       	ldd	r26, Z+3	; 0x03
     7ba:	b4 81       	ldd	r27, Z+4	; 0x04
     7bc:	a9 0f       	add	r26, r25
     7be:	b1 1d       	adc	r27, r1
     7c0:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
     7c2:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     7c4:	a2 2f       	mov	r26, r18
     7c6:	b0 e0       	ldi	r27, 0x00	; 0
     7c8:	82 81       	ldd	r24, Z+2	; 0x02
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	01 97       	sbiw	r24, 0x01	; 1
     7ce:	a8 17       	cp	r26, r24
     7d0:	b9 07       	cpc	r27, r25
     7d2:	11 f0       	breq	.+4      	; 0x7d8 <printStatus+0x226>
     7d4:	2f 5f       	subi	r18, 0xFF	; 255
     7d6:	01 c0       	rjmp	.+2      	; 0x7da <printStatus+0x228>
     7d8:	23 2f       	mov	r18, r19
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
     7da:	20 83       	st	Z, r18
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
     7dc:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
     7de:	40 17       	cp	r20, r16
     7e0:	51 07       	cpc	r21, r17
     7e2:	e9 f6       	brne	.-70     	; 0x79e <printStatus+0x1ec>
     7e4:	0e c0       	rjmp	.+28     	; 0x802 <printStatus+0x250>
     7e6:	40 e1       	ldi	r20, 0x10	; 16
     7e8:	6c e0       	ldi	r22, 0x0C	; 12
     7ea:	74 e0       	ldi	r23, 0x04	; 4
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	0e 94 ac 23 	call	0x4758	; 0x4758 <__itoa_ncheck>
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
     7f4:	8c e0       	ldi	r24, 0x0C	; 12
     7f6:	94 e0       	ldi	r25, 0x04	; 4
     7f8:	0e 94 a2 23 	call	0x4744	; 0x4744 <strupr>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
     7fc:	c1 2c       	mov	r12, r1
     7fe:	d1 2c       	mov	r13, r1
     800:	51 cf       	rjmp	.-350    	; 0x6a4 <printStatus+0xf2>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
	}	
}
     802:	a8 96       	adiw	r28, 0x28	; 40
     804:	0f b6       	in	r0, 0x3f	; 63
     806:	f8 94       	cli
     808:	de bf       	out	0x3e, r29	; 62
     80a:	0f be       	out	0x3f, r0	; 63
     80c:	cd bf       	out	0x3d, r28	; 61
     80e:	df 91       	pop	r29
     810:	cf 91       	pop	r28
     812:	1f 91       	pop	r17
     814:	0f 91       	pop	r16
     816:	ff 90       	pop	r15
     818:	ef 90       	pop	r14
     81a:	df 90       	pop	r13
     81c:	cf 90       	pop	r12
     81e:	08 95       	ret

00000820 <__vector_19>:
 *
 * This handler is called each time the UART data register is available for
 * sending data.
 */
ISR(UART0_DATA_EMPTY_IRQ)
{
     820:	1f 92       	push	r1
     822:	0f 92       	push	r0
     824:	0f b6       	in	r0, 0x3f	; 63
     826:	0f 92       	push	r0
     828:	11 24       	eor	r1, r1
     82a:	2f 93       	push	r18
     82c:	3f 93       	push	r19
     82e:	4f 93       	push	r20
     830:	5f 93       	push	r21
     832:	8f 93       	push	r24
     834:	9f 93       	push	r25
     836:	af 93       	push	r26
     838:	bf 93       	push	r27
     83a:	ef 93       	push	r30
     83c:	ff 93       	push	r31
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
     83e:	ea ef       	ldi	r30, 0xFA	; 250
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	91 81       	ldd	r25, Z+1	; 0x01
     844:	80 81       	ld	r24, Z
	// if there is data in the ring buffer, fetch it and send it
	if (!ring_buffer_is_empty(&ring_buffer_out))
     846:	98 17       	cp	r25, r24
     848:	b9 f0       	breq	.+46     	; 0x878 <__vector_19+0x58>
 * \returns next data byte in buffer
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
     84a:	81 81       	ldd	r24, Z+1	; 0x01
     84c:	a3 81       	ldd	r26, Z+3	; 0x03
     84e:	b4 81       	ldd	r27, Z+4	; 0x04
     850:	a8 0f       	add	r26, r24
     852:	b1 1d       	adc	r27, r1
     854:	3c 91       	ld	r19, X
 *
 * \returns the next read offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_read(const struct ring_buffer *ring)
{
	return get_next(ring->read_offset, ring->size);
     856:	21 81       	ldd	r18, Z+1	; 0x01
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     858:	42 2f       	mov	r20, r18
     85a:	50 e0       	ldi	r21, 0x00	; 0
     85c:	82 81       	ldd	r24, Z+2	; 0x02
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	01 97       	sbiw	r24, 0x01	; 1
     862:	48 17       	cp	r20, r24
     864:	59 07       	cpc	r21, r25
     866:	11 f0       	breq	.+4      	; 0x86c <__vector_19+0x4c>
     868:	2f 5f       	subi	r18, 0xFF	; 255
     86a:	01 c0       	rjmp	.+2      	; 0x86e <__vector_19+0x4e>
     86c:	20 e0       	ldi	r18, 0x00	; 0
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
	ring->read_offset = ring_buffer_get_next_read(ring);
     86e:	20 93 fb 04 	sts	0x04FB, r18
	{
		UDR0 = ring_buffer_get(&ring_buffer_out);
     872:	30 93 c6 00 	sts	0x00C6, r19
     876:	05 c0       	rjmp	.+10     	; 0x882 <__vector_19+0x62>
	}
	else 
	{
		// no more data to send, turn off data ready interrupt
		UCSR0B &= ~(1 << UDRIE0);
     878:	e1 ec       	ldi	r30, 0xC1	; 193
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	80 81       	ld	r24, Z
     87e:	8f 7d       	andi	r24, 0xDF	; 223
     880:	80 83       	st	Z, r24
	}
}
     882:	ff 91       	pop	r31
     884:	ef 91       	pop	r30
     886:	bf 91       	pop	r27
     888:	af 91       	pop	r26
     88a:	9f 91       	pop	r25
     88c:	8f 91       	pop	r24
     88e:	5f 91       	pop	r21
     890:	4f 91       	pop	r20
     892:	3f 91       	pop	r19
     894:	2f 91       	pop	r18
     896:	0f 90       	pop	r0
     898:	0f be       	out	0x3f, r0	; 63
     89a:	0f 90       	pop	r0
     89c:	1f 90       	pop	r1
     89e:	18 95       	reti

000008a0 <__vector_18>:
 * \brief Data RX interrupt handler
 *
 * This is the handler for UART receive data
 */
ISR(UART0_RX_IRQ)
{
     8a0:	1f 92       	push	r1
     8a2:	0f 92       	push	r0
     8a4:	0f b6       	in	r0, 0x3f	; 63
     8a6:	0f 92       	push	r0
     8a8:	11 24       	eor	r1, r1
     8aa:	2f 93       	push	r18
     8ac:	4f 93       	push	r20
     8ae:	5f 93       	push	r21
     8b0:	8f 93       	push	r24
     8b2:	9f 93       	push	r25
     8b4:	af 93       	push	r26
     8b6:	bf 93       	push	r27
     8b8:	ef 93       	push	r30
     8ba:	ff 93       	push	r31
	ring_buffer_put(&ring_buffer_in, UDR0);
     8bc:	80 91 c6 00 	lds	r24, 0x00C6
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
     8c0:	e1 e1       	ldi	r30, 0x11	; 17
     8c2:	f4 e0       	ldi	r31, 0x04	; 4
     8c4:	90 81       	ld	r25, Z
     8c6:	a3 81       	ldd	r26, Z+3	; 0x03
     8c8:	b4 81       	ldd	r27, Z+4	; 0x04
     8ca:	a9 0f       	add	r26, r25
     8cc:	b1 1d       	adc	r27, r1
     8ce:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
     8d0:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     8d2:	42 2f       	mov	r20, r18
     8d4:	50 e0       	ldi	r21, 0x00	; 0
     8d6:	82 81       	ldd	r24, Z+2	; 0x02
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	01 97       	sbiw	r24, 0x01	; 1
     8dc:	48 17       	cp	r20, r24
     8de:	59 07       	cpc	r21, r25
     8e0:	11 f0       	breq	.+4      	; 0x8e6 <__vector_18+0x46>
     8e2:	2f 5f       	subi	r18, 0xFF	; 255
     8e4:	01 c0       	rjmp	.+2      	; 0x8e8 <__vector_18+0x48>
     8e6:	20 e0       	ldi	r18, 0x00	; 0
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
     8e8:	20 93 11 04 	sts	0x0411, r18
}
     8ec:	ff 91       	pop	r31
     8ee:	ef 91       	pop	r30
     8f0:	bf 91       	pop	r27
     8f2:	af 91       	pop	r26
     8f4:	9f 91       	pop	r25
     8f6:	8f 91       	pop	r24
     8f8:	5f 91       	pop	r21
     8fa:	4f 91       	pop	r20
     8fc:	2f 91       	pop	r18
     8fe:	0f 90       	pop	r0
     900:	0f be       	out	0x3f, r0	; 63
     902:	0f 90       	pop	r0
     904:	1f 90       	pop	r1
     906:	18 95       	reti

00000908 <__vector_14>:
	
	sei();
}

ISR(TIMER0_COMPA_vect)	// PWM output Irq
{
     908:	1f 92       	push	r1
     90a:	0f 92       	push	r0
     90c:	0f b6       	in	r0, 0x3f	; 63
     90e:	0f 92       	push	r0
     910:	11 24       	eor	r1, r1
     912:	2f 93       	push	r18
     914:	3f 93       	push	r19
     916:	8f 93       	push	r24
     918:	9f 93       	push	r25
     91a:	ef 93       	push	r30
     91c:	ff 93       	push	r31
	ch0.pwmCnt++;
     91e:	e4 e7       	ldi	r30, 0x74	; 116
     920:	f4 e0       	ldi	r31, 0x04	; 4
     922:	80 81       	ld	r24, Z
     924:	91 81       	ldd	r25, Z+1	; 0x01
     926:	01 96       	adiw	r24, 0x01	; 1
     928:	91 83       	std	Z+1, r25	; 0x01
     92a:	80 83       	st	Z, r24
	if(ch0.pwmCnt < ch0.pwm )
     92c:	20 81       	ld	r18, Z
     92e:	31 81       	ldd	r19, Z+1	; 0x01
     930:	80 91 76 04 	lds	r24, 0x0476
     934:	90 91 77 04 	lds	r25, 0x0477
     938:	28 17       	cp	r18, r24
     93a:	39 07       	cpc	r19, r25
     93c:	34 f4       	brge	.+12     	; 0x94a <__vector_14+0x42>
static inline void SetHeaterOutputON(uint8_t ch)
{
	switch (ch)
	{
		case 0:
			if(ch0.heaterEnable)
     93e:	80 91 78 04 	lds	r24, 0x0478
     942:	88 23       	and	r24, r24
     944:	19 f0       	breq	.+6      	; 0x94c <__vector_14+0x44>
			{
				PORTC |= 0b00000001;
     946:	40 9a       	sbi	0x08, 0	; 8
     948:	01 c0       	rjmp	.+2      	; 0x94c <__vector_14+0x44>
	{
		SetHeaterOutputON(0);
	}
	else
	{
		PORTC &= 0b11111110;
     94a:	40 98       	cbi	0x08, 0	; 8
	}
	if(ch0.pwmCnt >= 100)
     94c:	80 91 74 04 	lds	r24, 0x0474
     950:	90 91 75 04 	lds	r25, 0x0475
     954:	84 36       	cpi	r24, 0x64	; 100
     956:	91 05       	cpc	r25, r1
     958:	24 f0       	brlt	.+8      	; 0x962 <__vector_14+0x5a>
	{
		ch0.pwmCnt = 0;
     95a:	10 92 75 04 	sts	0x0475, r1
     95e:	10 92 74 04 	sts	0x0474, r1
	}
	
	ch1.pwmCnt++;
     962:	e7 ed       	ldi	r30, 0xD7	; 215
     964:	f4 e0       	ldi	r31, 0x04	; 4
     966:	80 81       	ld	r24, Z
     968:	91 81       	ldd	r25, Z+1	; 0x01
     96a:	01 96       	adiw	r24, 0x01	; 1
     96c:	91 83       	std	Z+1, r25	; 0x01
     96e:	80 83       	st	Z, r24
	if(ch1.pwmCnt < ch1.pwm )
     970:	20 81       	ld	r18, Z
     972:	31 81       	ldd	r19, Z+1	; 0x01
     974:	80 91 d9 04 	lds	r24, 0x04D9
     978:	90 91 da 04 	lds	r25, 0x04DA
     97c:	28 17       	cp	r18, r24
     97e:	39 07       	cpc	r19, r25
     980:	34 f4       	brge	.+12     	; 0x98e <__vector_14+0x86>
				PORTC |= 0b00000001;
			}
			break;
	
		case 1:
			if(ch1.heaterEnable)
     982:	80 91 db 04 	lds	r24, 0x04DB
     986:	88 23       	and	r24, r24
     988:	19 f0       	breq	.+6      	; 0x990 <__vector_14+0x88>
			{
				PORTC |= 0b00000010;	
     98a:	41 9a       	sbi	0x08, 1	; 8
     98c:	01 c0       	rjmp	.+2      	; 0x990 <__vector_14+0x88>
	{
		SetHeaterOutputON(1);
	}
	else
	{
		PORTC &= 0b11111101;
     98e:	41 98       	cbi	0x08, 1	; 8
	}
	if(ch1.pwmCnt >= 100)
     990:	80 91 d7 04 	lds	r24, 0x04D7
     994:	90 91 d8 04 	lds	r25, 0x04D8
     998:	84 36       	cpi	r24, 0x64	; 100
     99a:	91 05       	cpc	r25, r1
     99c:	24 f0       	brlt	.+8      	; 0x9a6 <__vector_14+0x9e>
	{
		ch1.pwmCnt = 0;
     99e:	10 92 d8 04 	sts	0x04D8, r1
     9a2:	10 92 d7 04 	sts	0x04D7, r1
	}
	
	ch2.pwmCnt++;
     9a6:	e5 e0       	ldi	r30, 0x05	; 5
     9a8:	f3 e0       	ldi	r31, 0x03	; 3
     9aa:	80 81       	ld	r24, Z
     9ac:	91 81       	ldd	r25, Z+1	; 0x01
     9ae:	01 96       	adiw	r24, 0x01	; 1
     9b0:	91 83       	std	Z+1, r25	; 0x01
     9b2:	80 83       	st	Z, r24
	if(ch2.pwmCnt < ch2.pwm )
     9b4:	20 81       	ld	r18, Z
     9b6:	31 81       	ldd	r19, Z+1	; 0x01
     9b8:	80 91 07 03 	lds	r24, 0x0307
     9bc:	90 91 08 03 	lds	r25, 0x0308
     9c0:	28 17       	cp	r18, r24
     9c2:	39 07       	cpc	r19, r25
     9c4:	34 f4       	brge	.+12     	; 0x9d2 <__vector_14+0xca>
				PORTC |= 0b00000010;	
			}
			break;

		case 2:
			if(ch2.heaterEnable)
     9c6:	80 91 09 03 	lds	r24, 0x0309
     9ca:	88 23       	and	r24, r24
     9cc:	19 f0       	breq	.+6      	; 0x9d4 <__vector_14+0xcc>
			{
				PORTC |= 0b00000100;
     9ce:	42 9a       	sbi	0x08, 2	; 8
     9d0:	01 c0       	rjmp	.+2      	; 0x9d4 <__vector_14+0xcc>
	{
		SetHeaterOutputON(2);
	}
	else
	{
		PORTC &= 0b11111011;
     9d2:	42 98       	cbi	0x08, 2	; 8
	}
	if(ch2.pwmCnt >= 100)
     9d4:	80 91 05 03 	lds	r24, 0x0305
     9d8:	90 91 06 03 	lds	r25, 0x0306
     9dc:	84 36       	cpi	r24, 0x64	; 100
     9de:	91 05       	cpc	r25, r1
     9e0:	24 f0       	brlt	.+8      	; 0x9ea <__vector_14+0xe2>
	{
		ch2.pwmCnt = 0;
     9e2:	10 92 06 03 	sts	0x0306, r1
     9e6:	10 92 05 03 	sts	0x0305, r1
	}
	
	ch3.pwmCnt++;
     9ea:	e0 ea       	ldi	r30, 0xA0	; 160
     9ec:	f1 e0       	ldi	r31, 0x01	; 1
     9ee:	80 81       	ld	r24, Z
     9f0:	91 81       	ldd	r25, Z+1	; 0x01
     9f2:	01 96       	adiw	r24, 0x01	; 1
     9f4:	91 83       	std	Z+1, r25	; 0x01
     9f6:	80 83       	st	Z, r24
	if(ch3.pwmCnt < ch3.pwm )
     9f8:	20 81       	ld	r18, Z
     9fa:	31 81       	ldd	r19, Z+1	; 0x01
     9fc:	80 91 a2 01 	lds	r24, 0x01A2
     a00:	90 91 a3 01 	lds	r25, 0x01A3
     a04:	28 17       	cp	r18, r24
     a06:	39 07       	cpc	r19, r25
     a08:	34 f4       	brge	.+12     	; 0xa16 <__vector_14+0x10e>
				PORTC |= 0b00000100;
			}
			break;

		case 3:
			if(ch3.heaterEnable)
     a0a:	80 91 a4 01 	lds	r24, 0x01A4
     a0e:	88 23       	and	r24, r24
     a10:	19 f0       	breq	.+6      	; 0xa18 <__vector_14+0x110>
			{
				PORTC |= 0b00001000;	
     a12:	43 9a       	sbi	0x08, 3	; 8
     a14:	01 c0       	rjmp	.+2      	; 0xa18 <__vector_14+0x110>
	{
		SetHeaterOutputON(3);
	}
	else
	{
		PORTC &= 0b11110111;
     a16:	43 98       	cbi	0x08, 3	; 8
	}
	if(ch3.pwmCnt >= 100)
     a18:	80 91 a0 01 	lds	r24, 0x01A0
     a1c:	90 91 a1 01 	lds	r25, 0x01A1
     a20:	84 36       	cpi	r24, 0x64	; 100
     a22:	91 05       	cpc	r25, r1
     a24:	24 f0       	brlt	.+8      	; 0xa2e <__vector_14+0x126>
	{
		ch3.pwmCnt = 0;
     a26:	10 92 a1 01 	sts	0x01A1, r1
     a2a:	10 92 a0 01 	sts	0x01A0, r1
	}

}
     a2e:	ff 91       	pop	r31
     a30:	ef 91       	pop	r30
     a32:	9f 91       	pop	r25
     a34:	8f 91       	pop	r24
     a36:	3f 91       	pop	r19
     a38:	2f 91       	pop	r18
     a3a:	0f 90       	pop	r0
     a3c:	0f be       	out	0x3f, r0	; 63
     a3e:	0f 90       	pop	r0
     a40:	1f 90       	pop	r1
     a42:	18 95       	reti

00000a44 <__vector_7>:

ISR(TIMER2_COMPA_vect)	// PID Controller Irq
{
     a44:	1f 92       	push	r1
     a46:	0f 92       	push	r0
     a48:	0f b6       	in	r0, 0x3f	; 63
     a4a:	0f 92       	push	r0
     a4c:	11 24       	eor	r1, r1
     a4e:	cf 92       	push	r12
     a50:	df 92       	push	r13
     a52:	ef 92       	push	r14
     a54:	ff 92       	push	r15
     a56:	0f 93       	push	r16
     a58:	1f 93       	push	r17
     a5a:	2f 93       	push	r18
     a5c:	3f 93       	push	r19
     a5e:	4f 93       	push	r20
     a60:	5f 93       	push	r21
     a62:	6f 93       	push	r22
     a64:	7f 93       	push	r23
     a66:	8f 93       	push	r24
     a68:	9f 93       	push	r25
     a6a:	af 93       	push	r26
     a6c:	bf 93       	push	r27
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
     a72:	ef 93       	push	r30
     a74:	ff 93       	push	r31
	sei();	// Enable nested interrupt
     a76:	78 94       	sei
	PORTD |= statusLed;
     a78:	5b 9a       	sbi	0x0b, 3	; 11
static inline unsigned char SPIread( unsigned char byteword, unsigned char ch)
{
	switch (ch)
	{
		case 1:
		PORTD &= 0b11101111;	// Set CS1 low
     a7a:	5c 98       	cbi	0x0b, 4	; 11
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     a80:	0d b4       	in	r0, 0x2d	; 45
     a82:	07 fe       	sbrs	r0, 7
     a84:	fd cf       	rjmp	.-6      	; 0xa80 <__vector_7+0x3c>
	byteword=SPDR;				//just for clearing SPIF
     a86:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
     a88:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     a8a:	0d b4       	in	r0, 0x2d	; 45
     a8c:	07 fe       	sbrs	r0, 7
     a8e:	fd cf       	rjmp	.-6      	; 0xa8a <__vector_7+0x46>
	byteword=SPDR;
     a90:	9e b5       	in	r25, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
     a92:	8b b1       	in	r24, 0x0b	; 11
     a94:	80 6f       	ori	r24, 0xF0	; 240
     a96:	8b b9       	out	0x0b, r24	; 11
static inline unsigned char SPIread( unsigned char byteword, unsigned char ch)
{
	switch (ch)
	{
		case 1:
		PORTD &= 0b11101111;	// Set CS1 low
     a98:	5c 98       	cbi	0x0b, 4	; 11
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
     a9a:	82 e0       	ldi	r24, 0x02	; 2
     a9c:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     a9e:	0d b4       	in	r0, 0x2d	; 45
     aa0:	07 fe       	sbrs	r0, 7
     aa2:	fd cf       	rjmp	.-6      	; 0xa9e <__vector_7+0x5a>
	byteword=SPDR;				//just for clearing SPIF
     aa4:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
     aa6:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     aa8:	0d b4       	in	r0, 0x2d	; 45
     aaa:	07 fe       	sbrs	r0, 7
     aac:	fd cf       	rjmp	.-6      	; 0xaa8 <__vector_7+0x64>
	byteword=SPDR;
     aae:	6e b5       	in	r22, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
     ab0:	8b b1       	in	r24, 0x0b	; 11
     ab2:	80 6f       	ori	r24, 0xF0	; 240
     ab4:	8b b9       	out	0x0b, r24	; 11
	uint8_t u8_msb = 0;
	uint8_t u8_lsb = 0;
	
	u8_msb = SPIread(0x01, ch);
	u8_lsb = SPIread(0x02, ch);
	adc_code = (((u8_msb << 8) | u8_lsb) >> 1);
     ab6:	70 e0       	ldi	r23, 0x00	; 0
     ab8:	79 2b       	or	r23, r25
     aba:	75 95       	asr	r23
     abc:	67 95       	ror	r22
	return ((float)adc_code / 32.0 - 256.0);
     abe:	07 2e       	mov	r0, r23
     ac0:	00 0c       	add	r0, r0
     ac2:	88 0b       	sbc	r24, r24
     ac4:	99 0b       	sbc	r25, r25
     ac6:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__floatsisf>
     aca:	20 e0       	ldi	r18, 0x00	; 0
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	40 e0       	ldi	r20, 0x00	; 0
     ad0:	5d e3       	ldi	r21, 0x3D	; 61
     ad2:	0e 94 9d 22 	call	0x453a	; 0x453a <__mulsf3>
     ad6:	20 e0       	ldi	r18, 0x00	; 0
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	40 e8       	ldi	r20, 0x80	; 128
     adc:	53 e4       	ldi	r21, 0x43	; 67
     ade:	0e 94 4d 21 	call	0x429a	; 0x429a <__subsf3>
	PORTD &= 0b11110111;						// Turn off LED on PCB (Irq call freq: 16MHz / 1024 / 255 = 61.3 Hz )
}

static inline void PIDctrl(channel *ch, int tempSensor)
{
	ch->TempSensor = ReadTempSensor(tempSensor);
     ae2:	e6 e1       	ldi	r30, 0x16	; 22
     ae4:	f4 e0       	ldi	r31, 0x04	; 4
     ae6:	64 83       	std	Z+4, r22	; 0x04
     ae8:	75 83       	std	Z+5, r23	; 0x05
     aea:	86 83       	std	Z+6, r24	; 0x06
     aec:	97 83       	std	Z+7, r25	; 0x07
	if(ch->TempSensor > (float)maxAllowedTemp)					// Max temperature limit
     aee:	64 81       	ldd	r22, Z+4	; 0x04
     af0:	75 81       	ldd	r23, Z+5	; 0x05
     af2:	86 81       	ldd	r24, Z+6	; 0x06
     af4:	97 81       	ldd	r25, Z+7	; 0x07
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	40 ef       	ldi	r20, 0xF0	; 240
     afc:	52 e4       	ldi	r21, 0x42	; 66
     afe:	0e 94 99 22 	call	0x4532	; 0x4532 <__gesf2>
     b02:	18 16       	cp	r1, r24
     b04:	2c f4       	brge	.+10     	; 0xb10 <__vector_7+0xcc>
	{
		ch->heaterEnable = false;
     b06:	10 92 78 04 	sts	0x0478, r1
		PORTC &= allHeaterOff;
     b0a:	88 b1       	in	r24, 0x08	; 8
     b0c:	80 7f       	andi	r24, 0xF0	; 240
     b0e:	88 b9       	out	0x08, r24	; 8
	}

	ch->TempError[CtrlErrorIdx] = ch->TempSetPoint - ch->TempSensor;			// Control error
     b10:	00 91 40 01 	lds	r16, 0x0140
     b14:	10 91 41 01 	lds	r17, 0x0141
     b18:	c6 e1       	ldi	r28, 0x16	; 22
     b1a:	d4 e0       	ldi	r29, 0x04	; 4
     b1c:	68 81       	ld	r22, Y
     b1e:	79 81       	ldd	r23, Y+1	; 0x01
     b20:	8a 81       	ldd	r24, Y+2	; 0x02
     b22:	9b 81       	ldd	r25, Y+3	; 0x03
     b24:	2c 81       	ldd	r18, Y+4	; 0x04
     b26:	3d 81       	ldd	r19, Y+5	; 0x05
     b28:	4e 81       	ldd	r20, Y+6	; 0x06
     b2a:	5f 81       	ldd	r21, Y+7	; 0x07
     b2c:	0e 94 4d 21 	call	0x429a	; 0x429a <__subsf3>
     b30:	00 0f       	add	r16, r16
     b32:	11 1f       	adc	r17, r17
     b34:	00 0f       	add	r16, r16
     b36:	11 1f       	adc	r17, r17
     b38:	f8 01       	movw	r30, r16
     b3a:	e2 5c       	subi	r30, 0xC2	; 194
     b3c:	fb 4f       	sbci	r31, 0xFB	; 251
     b3e:	60 83       	st	Z, r22
     b40:	71 83       	std	Z+1, r23	; 0x01
     b42:	82 83       	std	Z+2, r24	; 0x02
     b44:	93 83       	std	Z+3, r25	; 0x03
	
	ch->P_err = ch->TempError[CtrlErrorIdx] * ch->Pgain;					// P error
     b46:	e0 91 40 01 	lds	r30, 0x0140
     b4a:	f0 91 41 01 	lds	r31, 0x0141
     b4e:	ee 0f       	add	r30, r30
     b50:	ff 1f       	adc	r31, r31
     b52:	ee 0f       	add	r30, r30
     b54:	ff 1f       	adc	r31, r31
     b56:	e2 5c       	subi	r30, 0xC2	; 194
     b58:	fb 4f       	sbci	r31, 0xFB	; 251
     b5a:	60 81       	ld	r22, Z
     b5c:	71 81       	ldd	r23, Z+1	; 0x01
     b5e:	82 81       	ldd	r24, Z+2	; 0x02
     b60:	93 81       	ldd	r25, Z+3	; 0x03
     b62:	2c 8d       	ldd	r18, Y+28	; 0x1c
     b64:	3d 8d       	ldd	r19, Y+29	; 0x1d
     b66:	4e 8d       	ldd	r20, Y+30	; 0x1e
     b68:	5f 8d       	ldd	r21, Y+31	; 0x1f
     b6a:	0e 94 9d 22 	call	0x453a	; 0x453a <__mulsf3>
     b6e:	68 87       	std	Y+8, r22	; 0x08
     b70:	79 87       	std	Y+9, r23	; 0x09
     b72:	8a 87       	std	Y+10, r24	; 0x0a
     b74:	9b 87       	std	Y+11, r25	; 0x0b
	ch->I_err = ch->I_err + (ch->TempError[CtrlErrorIdx] * ch->Igain);			// I error
     b76:	cc 84       	ldd	r12, Y+12	; 0x0c
     b78:	dd 84       	ldd	r13, Y+13	; 0x0d
     b7a:	ee 84       	ldd	r14, Y+14	; 0x0e
     b7c:	ff 84       	ldd	r15, Y+15	; 0x0f
     b7e:	e0 91 40 01 	lds	r30, 0x0140
     b82:	f0 91 41 01 	lds	r31, 0x0141
     b86:	ee 0f       	add	r30, r30
     b88:	ff 1f       	adc	r31, r31
     b8a:	ee 0f       	add	r30, r30
     b8c:	ff 1f       	adc	r31, r31
     b8e:	e2 5c       	subi	r30, 0xC2	; 194
     b90:	fb 4f       	sbci	r31, 0xFB	; 251
     b92:	60 81       	ld	r22, Z
     b94:	71 81       	ldd	r23, Z+1	; 0x01
     b96:	82 81       	ldd	r24, Z+2	; 0x02
     b98:	93 81       	ldd	r25, Z+3	; 0x03
     b9a:	28 a1       	ldd	r18, Y+32	; 0x20
     b9c:	39 a1       	ldd	r19, Y+33	; 0x21
     b9e:	4a a1       	ldd	r20, Y+34	; 0x22
     ba0:	5b a1       	ldd	r21, Y+35	; 0x23
     ba2:	0e 94 9d 22 	call	0x453a	; 0x453a <__mulsf3>
     ba6:	9b 01       	movw	r18, r22
     ba8:	ac 01       	movw	r20, r24
     baa:	c7 01       	movw	r24, r14
     bac:	b6 01       	movw	r22, r12
     bae:	0e 94 4e 21 	call	0x429c	; 0x429c <__addsf3>
     bb2:	6c 87       	std	Y+12, r22	; 0x0c
     bb4:	7d 87       	std	Y+13, r23	; 0x0d
     bb6:	8e 87       	std	Y+14, r24	; 0x0e
     bb8:	9f 87       	std	Y+15, r25	; 0x0f
	if(ch->I_err > integralErrorLimit)
     bba:	6c 85       	ldd	r22, Y+12	; 0x0c
     bbc:	7d 85       	ldd	r23, Y+13	; 0x0d
     bbe:	8e 85       	ldd	r24, Y+14	; 0x0e
     bc0:	9f 85       	ldd	r25, Y+15	; 0x0f
     bc2:	20 e0       	ldi	r18, 0x00	; 0
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	40 e2       	ldi	r20, 0x20	; 32
     bc8:	51 e4       	ldi	r21, 0x41	; 65
     bca:	0e 94 99 22 	call	0x4532	; 0x4532 <__gesf2>
     bce:	18 16       	cp	r1, r24
     bd0:	64 f4       	brge	.+24     	; 0xbea <__vector_7+0x1a6>
	{
		ch->I_err = integralErrorLimit;
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	a0 e2       	ldi	r26, 0x20	; 32
     bd8:	b1 e4       	ldi	r27, 0x41	; 65
     bda:	80 93 22 04 	sts	0x0422, r24
     bde:	90 93 23 04 	sts	0x0423, r25
     be2:	a0 93 24 04 	sts	0x0424, r26
     be6:	b0 93 25 04 	sts	0x0425, r27
	}
	if(ch->I_err < -integralErrorLimit)
     bea:	60 91 22 04 	lds	r22, 0x0422
     bee:	70 91 23 04 	lds	r23, 0x0423
     bf2:	80 91 24 04 	lds	r24, 0x0424
     bf6:	90 91 25 04 	lds	r25, 0x0425
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	40 e2       	ldi	r20, 0x20	; 32
     c00:	51 ec       	ldi	r21, 0xC1	; 193
     c02:	0e 94 b2 21 	call	0x4364	; 0x4364 <__cmpsf2>
     c06:	88 23       	and	r24, r24
     c08:	64 f4       	brge	.+24     	; 0xc22 <__vector_7+0x1de>
	{
		ch->I_err = -integralErrorLimit;
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	a0 e2       	ldi	r26, 0x20	; 32
     c10:	b1 ec       	ldi	r27, 0xC1	; 193
     c12:	80 93 22 04 	sts	0x0422, r24
     c16:	90 93 23 04 	sts	0x0423, r25
     c1a:	a0 93 24 04 	sts	0x0424, r26
     c1e:	b0 93 25 04 	sts	0x0425, r27
	}
	
	ch->D_err = (ch->TempError[CtrlErrorIdx] - ch->TempError[CtrlErrorHistIdx]) * ch->Dgain; // D error
     c22:	e0 91 40 01 	lds	r30, 0x0140
     c26:	f0 91 41 01 	lds	r31, 0x0141
     c2a:	c6 e1       	ldi	r28, 0x16	; 22
     c2c:	d4 e0       	ldi	r29, 0x04	; 4
     c2e:	ee 0f       	add	r30, r30
     c30:	ff 1f       	adc	r31, r31
     c32:	ee 0f       	add	r30, r30
     c34:	ff 1f       	adc	r31, r31
     c36:	e2 5c       	subi	r30, 0xC2	; 194
     c38:	fb 4f       	sbci	r31, 0xFB	; 251
     c3a:	60 81       	ld	r22, Z
     c3c:	71 81       	ldd	r23, Z+1	; 0x01
     c3e:	82 81       	ldd	r24, Z+2	; 0x02
     c40:	93 81       	ldd	r25, Z+3	; 0x03
     c42:	e0 91 00 01 	lds	r30, 0x0100
     c46:	f0 91 01 01 	lds	r31, 0x0101
     c4a:	ee 0f       	add	r30, r30
     c4c:	ff 1f       	adc	r31, r31
     c4e:	ee 0f       	add	r30, r30
     c50:	ff 1f       	adc	r31, r31
     c52:	e2 5c       	subi	r30, 0xC2	; 194
     c54:	fb 4f       	sbci	r31, 0xFB	; 251
     c56:	20 81       	ld	r18, Z
     c58:	31 81       	ldd	r19, Z+1	; 0x01
     c5a:	42 81       	ldd	r20, Z+2	; 0x02
     c5c:	53 81       	ldd	r21, Z+3	; 0x03
     c5e:	cc a0       	ldd	r12, Y+36	; 0x24
     c60:	dd a0       	ldd	r13, Y+37	; 0x25
     c62:	ee a0       	ldd	r14, Y+38	; 0x26
     c64:	ff a0       	ldd	r15, Y+39	; 0x27
     c66:	0e 94 4d 21 	call	0x429a	; 0x429a <__subsf3>
     c6a:	a7 01       	movw	r20, r14
     c6c:	96 01       	movw	r18, r12
     c6e:	0e 94 9d 22 	call	0x453a	; 0x453a <__mulsf3>
     c72:	68 8b       	std	Y+16, r22	; 0x10
     c74:	79 8b       	std	Y+17, r23	; 0x11
     c76:	8a 8b       	std	Y+18, r24	; 0x12
     c78:	9b 8b       	std	Y+19, r25	; 0x13
	
	ch->Control_PID = ch->P_err + ch->I_err + ch->D_err;
     c7a:	68 85       	ldd	r22, Y+8	; 0x08
     c7c:	79 85       	ldd	r23, Y+9	; 0x09
     c7e:	8a 85       	ldd	r24, Y+10	; 0x0a
     c80:	9b 85       	ldd	r25, Y+11	; 0x0b
     c82:	2c 85       	ldd	r18, Y+12	; 0x0c
     c84:	3d 85       	ldd	r19, Y+13	; 0x0d
     c86:	4e 85       	ldd	r20, Y+14	; 0x0e
     c88:	5f 85       	ldd	r21, Y+15	; 0x0f
     c8a:	c8 88       	ldd	r12, Y+16	; 0x10
     c8c:	d9 88       	ldd	r13, Y+17	; 0x11
     c8e:	ea 88       	ldd	r14, Y+18	; 0x12
     c90:	fb 88       	ldd	r15, Y+19	; 0x13
     c92:	0e 94 4e 21 	call	0x429c	; 0x429c <__addsf3>
     c96:	a7 01       	movw	r20, r14
     c98:	96 01       	movw	r18, r12
     c9a:	0e 94 4e 21 	call	0x429c	; 0x429c <__addsf3>
     c9e:	68 8f       	std	Y+24, r22	; 0x18
     ca0:	79 8f       	std	Y+25, r23	; 0x19
     ca2:	8a 8f       	std	Y+26, r24	; 0x1a
     ca4:	9b 8f       	std	Y+27, r25	; 0x1b
	ch->Control = ch->Control_PID + ch->TempSetPoint * (float)0.21 - 5;
     ca6:	c8 8c       	ldd	r12, Y+24	; 0x18
     ca8:	d9 8c       	ldd	r13, Y+25	; 0x19
     caa:	ea 8c       	ldd	r14, Y+26	; 0x1a
     cac:	fb 8c       	ldd	r15, Y+27	; 0x1b
     cae:	68 81       	ld	r22, Y
     cb0:	79 81       	ldd	r23, Y+1	; 0x01
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	9b 81       	ldd	r25, Y+3	; 0x03
     cb6:	2d e3       	ldi	r18, 0x3D	; 61
     cb8:	3a e0       	ldi	r19, 0x0A	; 10
     cba:	47 e5       	ldi	r20, 0x57	; 87
     cbc:	5e e3       	ldi	r21, 0x3E	; 62
     cbe:	0e 94 9d 22 	call	0x453a	; 0x453a <__mulsf3>
     cc2:	9b 01       	movw	r18, r22
     cc4:	ac 01       	movw	r20, r24
     cc6:	c7 01       	movw	r24, r14
     cc8:	b6 01       	movw	r22, r12
     cca:	0e 94 4e 21 	call	0x429c	; 0x429c <__addsf3>
     cce:	20 e0       	ldi	r18, 0x00	; 0
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	40 ea       	ldi	r20, 0xA0	; 160
     cd4:	50 e4       	ldi	r21, 0x40	; 64
     cd6:	0e 94 4d 21 	call	0x429a	; 0x429a <__subsf3>
     cda:	6c 8b       	std	Y+20, r22	; 0x14
     cdc:	7d 8b       	std	Y+21, r23	; 0x15
     cde:	8e 8b       	std	Y+22, r24	; 0x16
     ce0:	9f 8b       	std	Y+23, r25	; 0x17
	ch->pwm = (round(ch->Control));
     ce2:	6c 89       	ldd	r22, Y+20	; 0x14
     ce4:	7d 89       	ldd	r23, Y+21	; 0x15
     ce6:	8e 89       	ldd	r24, Y+22	; 0x16
     ce8:	9f 89       	ldd	r25, Y+23	; 0x17
     cea:	0e 94 00 23 	call	0x4600	; 0x4600 <round>
     cee:	0e 94 b6 21 	call	0x436c	; 0x436c <__fixsfsi>
     cf2:	70 93 77 04 	sts	0x0477, r23
     cf6:	60 93 76 04 	sts	0x0476, r22
	
	if(abs(ch->TempError[0]) > integralErrorActiveWindow)
     cfa:	68 a5       	ldd	r22, Y+40	; 0x28
     cfc:	79 a5       	ldd	r23, Y+41	; 0x29
     cfe:	8a a5       	ldd	r24, Y+42	; 0x2a
     d00:	9b a5       	ldd	r25, Y+43	; 0x2b
     d02:	0e 94 b6 21 	call	0x436c	; 0x436c <__fixsfsi>
     d06:	9b 01       	movw	r18, r22
     d08:	77 23       	and	r23, r23
     d0a:	24 f4       	brge	.+8      	; 0xd14 <__vector_7+0x2d0>
     d0c:	22 27       	eor	r18, r18
     d0e:	33 27       	eor	r19, r19
     d10:	26 1b       	sub	r18, r22
     d12:	37 0b       	sbc	r19, r23
     d14:	26 30       	cpi	r18, 0x06	; 6
     d16:	31 05       	cpc	r19, r1
     d18:	44 f0       	brlt	.+16     	; 0xd2a <__vector_7+0x2e6>
	{
		ch->I_err = 0;									// Avoid integral wind-up
     d1a:	10 92 22 04 	sts	0x0422, r1
     d1e:	10 92 23 04 	sts	0x0423, r1
     d22:	10 92 24 04 	sts	0x0424, r1
     d26:	10 92 25 04 	sts	0x0425, r1
	}
	
	if(abs(ch->TempError[0]) <= ch->tempErrorWin)
     d2a:	60 91 3e 04 	lds	r22, 0x043E
     d2e:	70 91 3f 04 	lds	r23, 0x043F
     d32:	80 91 40 04 	lds	r24, 0x0440
     d36:	90 91 41 04 	lds	r25, 0x0441
     d3a:	c0 90 6a 04 	lds	r12, 0x046A
     d3e:	d0 90 6b 04 	lds	r13, 0x046B
     d42:	e0 90 6c 04 	lds	r14, 0x046C
     d46:	f0 90 6d 04 	lds	r15, 0x046D
     d4a:	0e 94 b6 21 	call	0x436c	; 0x436c <__fixsfsi>
     d4e:	9b 01       	movw	r18, r22
     d50:	77 23       	and	r23, r23
     d52:	24 f4       	brge	.+8      	; 0xd5c <__vector_7+0x318>
     d54:	22 27       	eor	r18, r18
     d56:	33 27       	eor	r19, r19
     d58:	26 1b       	sub	r18, r22
     d5a:	37 0b       	sbc	r19, r23
     d5c:	b9 01       	movw	r22, r18
     d5e:	33 0f       	add	r19, r19
     d60:	88 0b       	sbc	r24, r24
     d62:	99 0b       	sbc	r25, r25
     d64:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__floatsisf>
     d68:	a7 01       	movw	r20, r14
     d6a:	96 01       	movw	r18, r12
     d6c:	0e 94 b2 21 	call	0x4364	; 0x4364 <__cmpsf2>
     d70:	18 16       	cp	r1, r24
     d72:	44 f0       	brlt	.+16     	; 0xd84 <__vector_7+0x340>
	{
		ch->tempSettleCnt ++;
     d74:	ee e6       	ldi	r30, 0x6E	; 110
     d76:	f4 e0       	ldi	r31, 0x04	; 4
     d78:	80 81       	ld	r24, Z
     d7a:	91 81       	ldd	r25, Z+1	; 0x01
     d7c:	01 96       	adiw	r24, 0x01	; 1
     d7e:	91 83       	std	Z+1, r25	; 0x01
     d80:	80 83       	st	Z, r24
     d82:	04 c0       	rjmp	.+8      	; 0xd8c <__vector_7+0x348>
	}
	else
	{
		ch->tempSettleCnt = 0;
     d84:	10 92 6f 04 	sts	0x046F, r1
     d88:	10 92 6e 04 	sts	0x046E, r1
	}
	if(ch->tempSettleCnt >= ch->tempSettleTime)
     d8c:	20 91 6e 04 	lds	r18, 0x046E
     d90:	30 91 6f 04 	lds	r19, 0x046F
     d94:	80 91 70 04 	lds	r24, 0x0470
     d98:	90 91 71 04 	lds	r25, 0x0471
     d9c:	28 17       	cp	r18, r24
     d9e:	39 07       	cpc	r19, r25
     da0:	3c f0       	brlt	.+14     	; 0xdb0 <__vector_7+0x36c>
	{
		ch->tempStable = 1;
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	90 93 73 04 	sts	0x0473, r25
     daa:	80 93 72 04 	sts	0x0472, r24
     dae:	04 c0       	rjmp	.+8      	; 0xdb8 <__vector_7+0x374>
	}
	else
	{
		ch->tempStable = 0;
     db0:	10 92 73 04 	sts	0x0473, r1
     db4:	10 92 72 04 	sts	0x0472, r1
		case 1:
		PORTD &= 0b11101111;	// Set CS1 low
		break;
		
		case 2:
		PORTD &= 0b11011111;	// Set CS2 low
     db8:	5d 98       	cbi	0x0b, 5	; 11
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     dbe:	0d b4       	in	r0, 0x2d	; 45
     dc0:	07 fe       	sbrs	r0, 7
     dc2:	fd cf       	rjmp	.-6      	; 0xdbe <__vector_7+0x37a>
	byteword=SPDR;				//just for clearing SPIF
     dc4:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
     dc6:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     dc8:	0d b4       	in	r0, 0x2d	; 45
     dca:	07 fe       	sbrs	r0, 7
     dcc:	fd cf       	rjmp	.-6      	; 0xdc8 <__vector_7+0x384>
	byteword=SPDR;
     dce:	9e b5       	in	r25, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
     dd0:	8b b1       	in	r24, 0x0b	; 11
     dd2:	80 6f       	ori	r24, 0xF0	; 240
     dd4:	8b b9       	out	0x0b, r24	; 11
		case 1:
		PORTD &= 0b11101111;	// Set CS1 low
		break;
		
		case 2:
		PORTD &= 0b11011111;	// Set CS2 low
     dd6:	5d 98       	cbi	0x0b, 5	; 11
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
     dd8:	82 e0       	ldi	r24, 0x02	; 2
     dda:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     ddc:	0d b4       	in	r0, 0x2d	; 45
     dde:	07 fe       	sbrs	r0, 7
     de0:	fd cf       	rjmp	.-6      	; 0xddc <__vector_7+0x398>
	byteword=SPDR;				//just for clearing SPIF
     de2:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
     de4:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     de6:	0d b4       	in	r0, 0x2d	; 45
     de8:	07 fe       	sbrs	r0, 7
     dea:	fd cf       	rjmp	.-6      	; 0xde6 <__vector_7+0x3a2>
	byteword=SPDR;
     dec:	6e b5       	in	r22, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
     dee:	8b b1       	in	r24, 0x0b	; 11
     df0:	80 6f       	ori	r24, 0xF0	; 240
     df2:	8b b9       	out	0x0b, r24	; 11
	uint8_t u8_msb = 0;
	uint8_t u8_lsb = 0;
	
	u8_msb = SPIread(0x01, ch);
	u8_lsb = SPIread(0x02, ch);
	adc_code = (((u8_msb << 8) | u8_lsb) >> 1);
     df4:	70 e0       	ldi	r23, 0x00	; 0
     df6:	79 2b       	or	r23, r25
     df8:	75 95       	asr	r23
     dfa:	67 95       	ror	r22
	return ((float)adc_code / 32.0 - 256.0);
     dfc:	07 2e       	mov	r0, r23
     dfe:	00 0c       	add	r0, r0
     e00:	88 0b       	sbc	r24, r24
     e02:	99 0b       	sbc	r25, r25
     e04:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__floatsisf>
     e08:	20 e0       	ldi	r18, 0x00	; 0
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	40 e0       	ldi	r20, 0x00	; 0
     e0e:	5d e3       	ldi	r21, 0x3D	; 61
     e10:	0e 94 9d 22 	call	0x453a	; 0x453a <__mulsf3>
     e14:	20 e0       	ldi	r18, 0x00	; 0
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	40 e8       	ldi	r20, 0x80	; 128
     e1a:	53 e4       	ldi	r21, 0x43	; 67
     e1c:	0e 94 4d 21 	call	0x429a	; 0x429a <__subsf3>
	PORTD &= 0b11110111;						// Turn off LED on PCB (Irq call freq: 16MHz / 1024 / 255 = 61.3 Hz )
}

static inline void PIDctrl(channel *ch, int tempSensor)
{
	ch->TempSensor = ReadTempSensor(tempSensor);
     e20:	e9 e7       	ldi	r30, 0x79	; 121
     e22:	f4 e0       	ldi	r31, 0x04	; 4
     e24:	64 83       	std	Z+4, r22	; 0x04
     e26:	75 83       	std	Z+5, r23	; 0x05
     e28:	86 83       	std	Z+6, r24	; 0x06
     e2a:	97 83       	std	Z+7, r25	; 0x07
	if(ch->TempSensor > (float)maxAllowedTemp)					// Max temperature limit
     e2c:	64 81       	ldd	r22, Z+4	; 0x04
     e2e:	75 81       	ldd	r23, Z+5	; 0x05
     e30:	86 81       	ldd	r24, Z+6	; 0x06
     e32:	97 81       	ldd	r25, Z+7	; 0x07
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	40 ef       	ldi	r20, 0xF0	; 240
     e3a:	52 e4       	ldi	r21, 0x42	; 66
     e3c:	0e 94 99 22 	call	0x4532	; 0x4532 <__gesf2>
     e40:	18 16       	cp	r1, r24
     e42:	2c f4       	brge	.+10     	; 0xe4e <__vector_7+0x40a>
	{
		ch->heaterEnable = false;
     e44:	10 92 db 04 	sts	0x04DB, r1
		PORTC &= allHeaterOff;
     e48:	88 b1       	in	r24, 0x08	; 8
     e4a:	80 7f       	andi	r24, 0xF0	; 240
     e4c:	88 b9       	out	0x08, r24	; 8
	}

	ch->TempError[CtrlErrorIdx] = ch->TempSetPoint - ch->TempSensor;			// Control error
     e4e:	00 91 40 01 	lds	r16, 0x0140
     e52:	10 91 41 01 	lds	r17, 0x0141
     e56:	c9 e7       	ldi	r28, 0x79	; 121
     e58:	d4 e0       	ldi	r29, 0x04	; 4
     e5a:	68 81       	ld	r22, Y
     e5c:	79 81       	ldd	r23, Y+1	; 0x01
     e5e:	8a 81       	ldd	r24, Y+2	; 0x02
     e60:	9b 81       	ldd	r25, Y+3	; 0x03
     e62:	2c 81       	ldd	r18, Y+4	; 0x04
     e64:	3d 81       	ldd	r19, Y+5	; 0x05
     e66:	4e 81       	ldd	r20, Y+6	; 0x06
     e68:	5f 81       	ldd	r21, Y+7	; 0x07
     e6a:	0e 94 4d 21 	call	0x429a	; 0x429a <__subsf3>
     e6e:	00 0f       	add	r16, r16
     e70:	11 1f       	adc	r17, r17
     e72:	00 0f       	add	r16, r16
     e74:	11 1f       	adc	r17, r17
     e76:	f8 01       	movw	r30, r16
     e78:	ef 55       	subi	r30, 0x5F	; 95
     e7a:	fb 4f       	sbci	r31, 0xFB	; 251
     e7c:	60 83       	st	Z, r22
     e7e:	71 83       	std	Z+1, r23	; 0x01
     e80:	82 83       	std	Z+2, r24	; 0x02
     e82:	93 83       	std	Z+3, r25	; 0x03
	
	ch->P_err = ch->TempError[CtrlErrorIdx] * ch->Pgain;					// P error
     e84:	e0 91 40 01 	lds	r30, 0x0140
     e88:	f0 91 41 01 	lds	r31, 0x0141
     e8c:	ee 0f       	add	r30, r30
     e8e:	ff 1f       	adc	r31, r31
     e90:	ee 0f       	add	r30, r30
     e92:	ff 1f       	adc	r31, r31
     e94:	ef 55       	subi	r30, 0x5F	; 95
     e96:	fb 4f       	sbci	r31, 0xFB	; 251
     e98:	60 81       	ld	r22, Z
     e9a:	71 81       	ldd	r23, Z+1	; 0x01
     e9c:	82 81       	ldd	r24, Z+2	; 0x02
     e9e:	93 81       	ldd	r25, Z+3	; 0x03
     ea0:	2c 8d       	ldd	r18, Y+28	; 0x1c
     ea2:	3d 8d       	ldd	r19, Y+29	; 0x1d
     ea4:	4e 8d       	ldd	r20, Y+30	; 0x1e
     ea6:	5f 8d       	ldd	r21, Y+31	; 0x1f
     ea8:	0e 94 9d 22 	call	0x453a	; 0x453a <__mulsf3>
     eac:	68 87       	std	Y+8, r22	; 0x08
     eae:	79 87       	std	Y+9, r23	; 0x09
     eb0:	8a 87       	std	Y+10, r24	; 0x0a
     eb2:	9b 87       	std	Y+11, r25	; 0x0b
	ch->I_err = ch->I_err + (ch->TempError[CtrlErrorIdx] * ch->Igain);			// I error
     eb4:	cc 84       	ldd	r12, Y+12	; 0x0c
     eb6:	dd 84       	ldd	r13, Y+13	; 0x0d
     eb8:	ee 84       	ldd	r14, Y+14	; 0x0e
     eba:	ff 84       	ldd	r15, Y+15	; 0x0f
     ebc:	e0 91 40 01 	lds	r30, 0x0140
     ec0:	f0 91 41 01 	lds	r31, 0x0141
     ec4:	ee 0f       	add	r30, r30
     ec6:	ff 1f       	adc	r31, r31
     ec8:	ee 0f       	add	r30, r30
     eca:	ff 1f       	adc	r31, r31
     ecc:	ef 55       	subi	r30, 0x5F	; 95
     ece:	fb 4f       	sbci	r31, 0xFB	; 251
     ed0:	60 81       	ld	r22, Z
     ed2:	71 81       	ldd	r23, Z+1	; 0x01
     ed4:	82 81       	ldd	r24, Z+2	; 0x02
     ed6:	93 81       	ldd	r25, Z+3	; 0x03
     ed8:	28 a1       	ldd	r18, Y+32	; 0x20
     eda:	39 a1       	ldd	r19, Y+33	; 0x21
     edc:	4a a1       	ldd	r20, Y+34	; 0x22
     ede:	5b a1       	ldd	r21, Y+35	; 0x23
     ee0:	0e 94 9d 22 	call	0x453a	; 0x453a <__mulsf3>
     ee4:	9b 01       	movw	r18, r22
     ee6:	ac 01       	movw	r20, r24
     ee8:	c7 01       	movw	r24, r14
     eea:	b6 01       	movw	r22, r12
     eec:	0e 94 4e 21 	call	0x429c	; 0x429c <__addsf3>
     ef0:	6c 87       	std	Y+12, r22	; 0x0c
     ef2:	7d 87       	std	Y+13, r23	; 0x0d
     ef4:	8e 87       	std	Y+14, r24	; 0x0e
     ef6:	9f 87       	std	Y+15, r25	; 0x0f
	if(ch->I_err > integralErrorLimit)
     ef8:	6c 85       	ldd	r22, Y+12	; 0x0c
     efa:	7d 85       	ldd	r23, Y+13	; 0x0d
     efc:	8e 85       	ldd	r24, Y+14	; 0x0e
     efe:	9f 85       	ldd	r25, Y+15	; 0x0f
     f00:	20 e0       	ldi	r18, 0x00	; 0
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	40 e2       	ldi	r20, 0x20	; 32
     f06:	51 e4       	ldi	r21, 0x41	; 65
     f08:	0e 94 99 22 	call	0x4532	; 0x4532 <__gesf2>
     f0c:	18 16       	cp	r1, r24
     f0e:	64 f4       	brge	.+24     	; 0xf28 <__vector_7+0x4e4>
	{
		ch->I_err = integralErrorLimit;
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	a0 e2       	ldi	r26, 0x20	; 32
     f16:	b1 e4       	ldi	r27, 0x41	; 65
     f18:	80 93 85 04 	sts	0x0485, r24
     f1c:	90 93 86 04 	sts	0x0486, r25
     f20:	a0 93 87 04 	sts	0x0487, r26
     f24:	b0 93 88 04 	sts	0x0488, r27
	}
	if(ch->I_err < -integralErrorLimit)
     f28:	60 91 85 04 	lds	r22, 0x0485
     f2c:	70 91 86 04 	lds	r23, 0x0486
     f30:	80 91 87 04 	lds	r24, 0x0487
     f34:	90 91 88 04 	lds	r25, 0x0488
     f38:	20 e0       	ldi	r18, 0x00	; 0
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	40 e2       	ldi	r20, 0x20	; 32
     f3e:	51 ec       	ldi	r21, 0xC1	; 193
     f40:	0e 94 b2 21 	call	0x4364	; 0x4364 <__cmpsf2>
     f44:	88 23       	and	r24, r24
     f46:	64 f4       	brge	.+24     	; 0xf60 <__vector_7+0x51c>
	{
		ch->I_err = -integralErrorLimit;
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	a0 e2       	ldi	r26, 0x20	; 32
     f4e:	b1 ec       	ldi	r27, 0xC1	; 193
     f50:	80 93 85 04 	sts	0x0485, r24
     f54:	90 93 86 04 	sts	0x0486, r25
     f58:	a0 93 87 04 	sts	0x0487, r26
     f5c:	b0 93 88 04 	sts	0x0488, r27
	}
	
	ch->D_err = (ch->TempError[CtrlErrorIdx] - ch->TempError[CtrlErrorHistIdx]) * ch->Dgain; // D error
     f60:	e0 91 40 01 	lds	r30, 0x0140
     f64:	f0 91 41 01 	lds	r31, 0x0141
     f68:	c9 e7       	ldi	r28, 0x79	; 121
     f6a:	d4 e0       	ldi	r29, 0x04	; 4
     f6c:	ee 0f       	add	r30, r30
     f6e:	ff 1f       	adc	r31, r31
     f70:	ee 0f       	add	r30, r30
     f72:	ff 1f       	adc	r31, r31
     f74:	ef 55       	subi	r30, 0x5F	; 95
     f76:	fb 4f       	sbci	r31, 0xFB	; 251
     f78:	60 81       	ld	r22, Z
     f7a:	71 81       	ldd	r23, Z+1	; 0x01
     f7c:	82 81       	ldd	r24, Z+2	; 0x02
     f7e:	93 81       	ldd	r25, Z+3	; 0x03
     f80:	e0 91 00 01 	lds	r30, 0x0100
     f84:	f0 91 01 01 	lds	r31, 0x0101
     f88:	ee 0f       	add	r30, r30
     f8a:	ff 1f       	adc	r31, r31
     f8c:	ee 0f       	add	r30, r30
     f8e:	ff 1f       	adc	r31, r31
     f90:	ef 55       	subi	r30, 0x5F	; 95
     f92:	fb 4f       	sbci	r31, 0xFB	; 251
     f94:	20 81       	ld	r18, Z
     f96:	31 81       	ldd	r19, Z+1	; 0x01
     f98:	42 81       	ldd	r20, Z+2	; 0x02
     f9a:	53 81       	ldd	r21, Z+3	; 0x03
     f9c:	cc a0       	ldd	r12, Y+36	; 0x24
     f9e:	dd a0       	ldd	r13, Y+37	; 0x25
     fa0:	ee a0       	ldd	r14, Y+38	; 0x26
     fa2:	ff a0       	ldd	r15, Y+39	; 0x27
     fa4:	0e 94 4d 21 	call	0x429a	; 0x429a <__subsf3>
     fa8:	a7 01       	movw	r20, r14
     faa:	96 01       	movw	r18, r12
     fac:	0e 94 9d 22 	call	0x453a	; 0x453a <__mulsf3>
     fb0:	68 8b       	std	Y+16, r22	; 0x10
     fb2:	79 8b       	std	Y+17, r23	; 0x11
     fb4:	8a 8b       	std	Y+18, r24	; 0x12
     fb6:	9b 8b       	std	Y+19, r25	; 0x13
	
	ch->Control_PID = ch->P_err + ch->I_err + ch->D_err;
     fb8:	68 85       	ldd	r22, Y+8	; 0x08
     fba:	79 85       	ldd	r23, Y+9	; 0x09
     fbc:	8a 85       	ldd	r24, Y+10	; 0x0a
     fbe:	9b 85       	ldd	r25, Y+11	; 0x0b
     fc0:	2c 85       	ldd	r18, Y+12	; 0x0c
     fc2:	3d 85       	ldd	r19, Y+13	; 0x0d
     fc4:	4e 85       	ldd	r20, Y+14	; 0x0e
     fc6:	5f 85       	ldd	r21, Y+15	; 0x0f
     fc8:	c8 88       	ldd	r12, Y+16	; 0x10
     fca:	d9 88       	ldd	r13, Y+17	; 0x11
     fcc:	ea 88       	ldd	r14, Y+18	; 0x12
     fce:	fb 88       	ldd	r15, Y+19	; 0x13
     fd0:	0e 94 4e 21 	call	0x429c	; 0x429c <__addsf3>
     fd4:	a7 01       	movw	r20, r14
     fd6:	96 01       	movw	r18, r12
     fd8:	0e 94 4e 21 	call	0x429c	; 0x429c <__addsf3>
     fdc:	68 8f       	std	Y+24, r22	; 0x18
     fde:	79 8f       	std	Y+25, r23	; 0x19
     fe0:	8a 8f       	std	Y+26, r24	; 0x1a
     fe2:	9b 8f       	std	Y+27, r25	; 0x1b
	ch->Control = ch->Control_PID + ch->TempSetPoint * (float)0.21 - 5;
     fe4:	c8 8c       	ldd	r12, Y+24	; 0x18
     fe6:	d9 8c       	ldd	r13, Y+25	; 0x19
     fe8:	ea 8c       	ldd	r14, Y+26	; 0x1a
     fea:	fb 8c       	ldd	r15, Y+27	; 0x1b
     fec:	68 81       	ld	r22, Y
     fee:	79 81       	ldd	r23, Y+1	; 0x01
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
     ff2:	9b 81       	ldd	r25, Y+3	; 0x03
     ff4:	2d e3       	ldi	r18, 0x3D	; 61
     ff6:	3a e0       	ldi	r19, 0x0A	; 10
     ff8:	47 e5       	ldi	r20, 0x57	; 87
     ffa:	5e e3       	ldi	r21, 0x3E	; 62
     ffc:	0e 94 9d 22 	call	0x453a	; 0x453a <__mulsf3>
    1000:	9b 01       	movw	r18, r22
    1002:	ac 01       	movw	r20, r24
    1004:	c7 01       	movw	r24, r14
    1006:	b6 01       	movw	r22, r12
    1008:	0e 94 4e 21 	call	0x429c	; 0x429c <__addsf3>
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	40 ea       	ldi	r20, 0xA0	; 160
    1012:	50 e4       	ldi	r21, 0x40	; 64
    1014:	0e 94 4d 21 	call	0x429a	; 0x429a <__subsf3>
    1018:	6c 8b       	std	Y+20, r22	; 0x14
    101a:	7d 8b       	std	Y+21, r23	; 0x15
    101c:	8e 8b       	std	Y+22, r24	; 0x16
    101e:	9f 8b       	std	Y+23, r25	; 0x17
	ch->pwm = (round(ch->Control));
    1020:	6c 89       	ldd	r22, Y+20	; 0x14
    1022:	7d 89       	ldd	r23, Y+21	; 0x15
    1024:	8e 89       	ldd	r24, Y+22	; 0x16
    1026:	9f 89       	ldd	r25, Y+23	; 0x17
    1028:	0e 94 00 23 	call	0x4600	; 0x4600 <round>
    102c:	0e 94 b6 21 	call	0x436c	; 0x436c <__fixsfsi>
    1030:	70 93 da 04 	sts	0x04DA, r23
    1034:	60 93 d9 04 	sts	0x04D9, r22
	
	if(abs(ch->TempError[0]) > integralErrorActiveWindow)
    1038:	68 a5       	ldd	r22, Y+40	; 0x28
    103a:	79 a5       	ldd	r23, Y+41	; 0x29
    103c:	8a a5       	ldd	r24, Y+42	; 0x2a
    103e:	9b a5       	ldd	r25, Y+43	; 0x2b
    1040:	0e 94 b6 21 	call	0x436c	; 0x436c <__fixsfsi>
    1044:	9b 01       	movw	r18, r22
    1046:	77 23       	and	r23, r23
    1048:	24 f4       	brge	.+8      	; 0x1052 <__vector_7+0x60e>
    104a:	22 27       	eor	r18, r18
    104c:	33 27       	eor	r19, r19
    104e:	26 1b       	sub	r18, r22
    1050:	37 0b       	sbc	r19, r23
    1052:	26 30       	cpi	r18, 0x06	; 6
    1054:	31 05       	cpc	r19, r1
    1056:	44 f0       	brlt	.+16     	; 0x1068 <__vector_7+0x624>
	{
		ch->I_err = 0;									// Avoid integral wind-up
    1058:	10 92 85 04 	sts	0x0485, r1
    105c:	10 92 86 04 	sts	0x0486, r1
    1060:	10 92 87 04 	sts	0x0487, r1
    1064:	10 92 88 04 	sts	0x0488, r1
	}
	
	if(abs(ch->TempError[0]) <= ch->tempErrorWin)
    1068:	60 91 a1 04 	lds	r22, 0x04A1
    106c:	70 91 a2 04 	lds	r23, 0x04A2
    1070:	80 91 a3 04 	lds	r24, 0x04A3
    1074:	90 91 a4 04 	lds	r25, 0x04A4
    1078:	c0 90 cd 04 	lds	r12, 0x04CD
    107c:	d0 90 ce 04 	lds	r13, 0x04CE
    1080:	e0 90 cf 04 	lds	r14, 0x04CF
    1084:	f0 90 d0 04 	lds	r15, 0x04D0
    1088:	0e 94 b6 21 	call	0x436c	; 0x436c <__fixsfsi>
    108c:	9b 01       	movw	r18, r22
    108e:	77 23       	and	r23, r23
    1090:	24 f4       	brge	.+8      	; 0x109a <__vector_7+0x656>
    1092:	22 27       	eor	r18, r18
    1094:	33 27       	eor	r19, r19
    1096:	26 1b       	sub	r18, r22
    1098:	37 0b       	sbc	r19, r23
    109a:	b9 01       	movw	r22, r18
    109c:	33 0f       	add	r19, r19
    109e:	88 0b       	sbc	r24, r24
    10a0:	99 0b       	sbc	r25, r25
    10a2:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__floatsisf>
    10a6:	a7 01       	movw	r20, r14
    10a8:	96 01       	movw	r18, r12
    10aa:	0e 94 b2 21 	call	0x4364	; 0x4364 <__cmpsf2>
    10ae:	18 16       	cp	r1, r24
    10b0:	44 f0       	brlt	.+16     	; 0x10c2 <__vector_7+0x67e>
	{
		ch->tempSettleCnt ++;
    10b2:	e1 ed       	ldi	r30, 0xD1	; 209
    10b4:	f4 e0       	ldi	r31, 0x04	; 4
    10b6:	80 81       	ld	r24, Z
    10b8:	91 81       	ldd	r25, Z+1	; 0x01
    10ba:	01 96       	adiw	r24, 0x01	; 1
    10bc:	91 83       	std	Z+1, r25	; 0x01
    10be:	80 83       	st	Z, r24
    10c0:	04 c0       	rjmp	.+8      	; 0x10ca <__vector_7+0x686>
	}
	else
	{
		ch->tempSettleCnt = 0;
    10c2:	10 92 d2 04 	sts	0x04D2, r1
    10c6:	10 92 d1 04 	sts	0x04D1, r1
	}
	if(ch->tempSettleCnt >= ch->tempSettleTime)
    10ca:	20 91 d1 04 	lds	r18, 0x04D1
    10ce:	30 91 d2 04 	lds	r19, 0x04D2
    10d2:	80 91 d3 04 	lds	r24, 0x04D3
    10d6:	90 91 d4 04 	lds	r25, 0x04D4
    10da:	28 17       	cp	r18, r24
    10dc:	39 07       	cpc	r19, r25
    10de:	3c f0       	brlt	.+14     	; 0x10ee <__vector_7+0x6aa>
	{
		ch->tempStable = 1;
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	90 93 d6 04 	sts	0x04D6, r25
    10e8:	80 93 d5 04 	sts	0x04D5, r24
    10ec:	04 c0       	rjmp	.+8      	; 0x10f6 <__vector_7+0x6b2>
	}
	else
	{
		ch->tempStable = 0;
    10ee:	10 92 d6 04 	sts	0x04D6, r1
    10f2:	10 92 d5 04 	sts	0x04D5, r1
		case 2:
		PORTD &= 0b11011111;	// Set CS2 low
		break;
				
		case 3:
		PORTD &= 0b10111111;	// Set CS3 low
    10f6:	5e 98       	cbi	0x0b, 6	; 11
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    10fc:	0d b4       	in	r0, 0x2d	; 45
    10fe:	07 fe       	sbrs	r0, 7
    1100:	fd cf       	rjmp	.-6      	; 0x10fc <__vector_7+0x6b8>
	byteword=SPDR;				//just for clearing SPIF
    1102:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
    1104:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    1106:	0d b4       	in	r0, 0x2d	; 45
    1108:	07 fe       	sbrs	r0, 7
    110a:	fd cf       	rjmp	.-6      	; 0x1106 <__vector_7+0x6c2>
	byteword=SPDR;
    110c:	9e b5       	in	r25, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
    110e:	8b b1       	in	r24, 0x0b	; 11
    1110:	80 6f       	ori	r24, 0xF0	; 240
    1112:	8b b9       	out	0x0b, r24	; 11
		case 2:
		PORTD &= 0b11011111;	// Set CS2 low
		break;
				
		case 3:
		PORTD &= 0b10111111;	// Set CS3 low
    1114:	5e 98       	cbi	0x0b, 6	; 11
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
    1116:	82 e0       	ldi	r24, 0x02	; 2
    1118:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    111a:	0d b4       	in	r0, 0x2d	; 45
    111c:	07 fe       	sbrs	r0, 7
    111e:	fd cf       	rjmp	.-6      	; 0x111a <__vector_7+0x6d6>
	byteword=SPDR;				//just for clearing SPIF
    1120:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
    1122:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    1124:	0d b4       	in	r0, 0x2d	; 45
    1126:	07 fe       	sbrs	r0, 7
    1128:	fd cf       	rjmp	.-6      	; 0x1124 <__vector_7+0x6e0>
	byteword=SPDR;
    112a:	6e b5       	in	r22, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
    112c:	8b b1       	in	r24, 0x0b	; 11
    112e:	80 6f       	ori	r24, 0xF0	; 240
    1130:	8b b9       	out	0x0b, r24	; 11
	uint8_t u8_msb = 0;
	uint8_t u8_lsb = 0;
	
	u8_msb = SPIread(0x01, ch);
	u8_lsb = SPIread(0x02, ch);
	adc_code = (((u8_msb << 8) | u8_lsb) >> 1);
    1132:	70 e0       	ldi	r23, 0x00	; 0
    1134:	79 2b       	or	r23, r25
    1136:	75 95       	asr	r23
    1138:	67 95       	ror	r22
	return ((float)adc_code / 32.0 - 256.0);
    113a:	07 2e       	mov	r0, r23
    113c:	00 0c       	add	r0, r0
    113e:	88 0b       	sbc	r24, r24
    1140:	99 0b       	sbc	r25, r25
    1142:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__floatsisf>
    1146:	20 e0       	ldi	r18, 0x00	; 0
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	40 e0       	ldi	r20, 0x00	; 0
    114c:	5d e3       	ldi	r21, 0x3D	; 61
    114e:	0e 94 9d 22 	call	0x453a	; 0x453a <__mulsf3>
    1152:	20 e0       	ldi	r18, 0x00	; 0
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	40 e8       	ldi	r20, 0x80	; 128
    1158:	53 e4       	ldi	r21, 0x43	; 67
    115a:	0e 94 4d 21 	call	0x429a	; 0x429a <__subsf3>
	PORTD &= 0b11110111;						// Turn off LED on PCB (Irq call freq: 16MHz / 1024 / 255 = 61.3 Hz )
}

static inline void PIDctrl(channel *ch, int tempSensor)
{
	ch->TempSensor = ReadTempSensor(tempSensor);
    115e:	e7 ea       	ldi	r30, 0xA7	; 167
    1160:	f2 e0       	ldi	r31, 0x02	; 2
    1162:	64 83       	std	Z+4, r22	; 0x04
    1164:	75 83       	std	Z+5, r23	; 0x05
    1166:	86 83       	std	Z+6, r24	; 0x06
    1168:	97 83       	std	Z+7, r25	; 0x07
	if(ch->TempSensor > (float)maxAllowedTemp)					// Max temperature limit
    116a:	64 81       	ldd	r22, Z+4	; 0x04
    116c:	75 81       	ldd	r23, Z+5	; 0x05
    116e:	86 81       	ldd	r24, Z+6	; 0x06
    1170:	97 81       	ldd	r25, Z+7	; 0x07
    1172:	20 e0       	ldi	r18, 0x00	; 0
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	40 ef       	ldi	r20, 0xF0	; 240
    1178:	52 e4       	ldi	r21, 0x42	; 66
    117a:	0e 94 99 22 	call	0x4532	; 0x4532 <__gesf2>
    117e:	18 16       	cp	r1, r24
    1180:	2c f4       	brge	.+10     	; 0x118c <__vector_7+0x748>
	{
		ch->heaterEnable = false;
    1182:	10 92 09 03 	sts	0x0309, r1
		PORTC &= allHeaterOff;
    1186:	88 b1       	in	r24, 0x08	; 8
    1188:	80 7f       	andi	r24, 0xF0	; 240
    118a:	88 b9       	out	0x08, r24	; 8
	}

	ch->TempError[CtrlErrorIdx] = ch->TempSetPoint - ch->TempSensor;			// Control error
    118c:	00 91 40 01 	lds	r16, 0x0140
    1190:	10 91 41 01 	lds	r17, 0x0141
    1194:	c7 ea       	ldi	r28, 0xA7	; 167
    1196:	d2 e0       	ldi	r29, 0x02	; 2
    1198:	68 81       	ld	r22, Y
    119a:	79 81       	ldd	r23, Y+1	; 0x01
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	9b 81       	ldd	r25, Y+3	; 0x03
    11a0:	2c 81       	ldd	r18, Y+4	; 0x04
    11a2:	3d 81       	ldd	r19, Y+5	; 0x05
    11a4:	4e 81       	ldd	r20, Y+6	; 0x06
    11a6:	5f 81       	ldd	r21, Y+7	; 0x07
    11a8:	0e 94 4d 21 	call	0x429a	; 0x429a <__subsf3>
    11ac:	00 0f       	add	r16, r16
    11ae:	11 1f       	adc	r17, r17
    11b0:	00 0f       	add	r16, r16
    11b2:	11 1f       	adc	r17, r17
    11b4:	f8 01       	movw	r30, r16
    11b6:	e1 53       	subi	r30, 0x31	; 49
    11b8:	fd 4f       	sbci	r31, 0xFD	; 253
    11ba:	60 83       	st	Z, r22
    11bc:	71 83       	std	Z+1, r23	; 0x01
    11be:	82 83       	std	Z+2, r24	; 0x02
    11c0:	93 83       	std	Z+3, r25	; 0x03
	
	ch->P_err = ch->TempError[CtrlErrorIdx] * ch->Pgain;					// P error
    11c2:	e0 91 40 01 	lds	r30, 0x0140
    11c6:	f0 91 41 01 	lds	r31, 0x0141
    11ca:	ee 0f       	add	r30, r30
    11cc:	ff 1f       	adc	r31, r31
    11ce:	ee 0f       	add	r30, r30
    11d0:	ff 1f       	adc	r31, r31
    11d2:	e1 53       	subi	r30, 0x31	; 49
    11d4:	fd 4f       	sbci	r31, 0xFD	; 253
    11d6:	60 81       	ld	r22, Z
    11d8:	71 81       	ldd	r23, Z+1	; 0x01
    11da:	82 81       	ldd	r24, Z+2	; 0x02
    11dc:	93 81       	ldd	r25, Z+3	; 0x03
    11de:	2c 8d       	ldd	r18, Y+28	; 0x1c
    11e0:	3d 8d       	ldd	r19, Y+29	; 0x1d
    11e2:	4e 8d       	ldd	r20, Y+30	; 0x1e
    11e4:	5f 8d       	ldd	r21, Y+31	; 0x1f
    11e6:	0e 94 9d 22 	call	0x453a	; 0x453a <__mulsf3>
    11ea:	68 87       	std	Y+8, r22	; 0x08
    11ec:	79 87       	std	Y+9, r23	; 0x09
    11ee:	8a 87       	std	Y+10, r24	; 0x0a
    11f0:	9b 87       	std	Y+11, r25	; 0x0b
	ch->I_err = ch->I_err + (ch->TempError[CtrlErrorIdx] * ch->Igain);			// I error
    11f2:	cc 84       	ldd	r12, Y+12	; 0x0c
    11f4:	dd 84       	ldd	r13, Y+13	; 0x0d
    11f6:	ee 84       	ldd	r14, Y+14	; 0x0e
    11f8:	ff 84       	ldd	r15, Y+15	; 0x0f
    11fa:	e0 91 40 01 	lds	r30, 0x0140
    11fe:	f0 91 41 01 	lds	r31, 0x0141
    1202:	ee 0f       	add	r30, r30
    1204:	ff 1f       	adc	r31, r31
    1206:	ee 0f       	add	r30, r30
    1208:	ff 1f       	adc	r31, r31
    120a:	e1 53       	subi	r30, 0x31	; 49
    120c:	fd 4f       	sbci	r31, 0xFD	; 253
    120e:	60 81       	ld	r22, Z
    1210:	71 81       	ldd	r23, Z+1	; 0x01
    1212:	82 81       	ldd	r24, Z+2	; 0x02
    1214:	93 81       	ldd	r25, Z+3	; 0x03
    1216:	28 a1       	ldd	r18, Y+32	; 0x20
    1218:	39 a1       	ldd	r19, Y+33	; 0x21
    121a:	4a a1       	ldd	r20, Y+34	; 0x22
    121c:	5b a1       	ldd	r21, Y+35	; 0x23
    121e:	0e 94 9d 22 	call	0x453a	; 0x453a <__mulsf3>
    1222:	9b 01       	movw	r18, r22
    1224:	ac 01       	movw	r20, r24
    1226:	c7 01       	movw	r24, r14
    1228:	b6 01       	movw	r22, r12
    122a:	0e 94 4e 21 	call	0x429c	; 0x429c <__addsf3>
    122e:	6c 87       	std	Y+12, r22	; 0x0c
    1230:	7d 87       	std	Y+13, r23	; 0x0d
    1232:	8e 87       	std	Y+14, r24	; 0x0e
    1234:	9f 87       	std	Y+15, r25	; 0x0f
	if(ch->I_err > integralErrorLimit)
    1236:	6c 85       	ldd	r22, Y+12	; 0x0c
    1238:	7d 85       	ldd	r23, Y+13	; 0x0d
    123a:	8e 85       	ldd	r24, Y+14	; 0x0e
    123c:	9f 85       	ldd	r25, Y+15	; 0x0f
    123e:	20 e0       	ldi	r18, 0x00	; 0
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	40 e2       	ldi	r20, 0x20	; 32
    1244:	51 e4       	ldi	r21, 0x41	; 65
    1246:	0e 94 99 22 	call	0x4532	; 0x4532 <__gesf2>
    124a:	18 16       	cp	r1, r24
    124c:	64 f4       	brge	.+24     	; 0x1266 <__vector_7+0x822>
	{
		ch->I_err = integralErrorLimit;
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	a0 e2       	ldi	r26, 0x20	; 32
    1254:	b1 e4       	ldi	r27, 0x41	; 65
    1256:	80 93 b3 02 	sts	0x02B3, r24
    125a:	90 93 b4 02 	sts	0x02B4, r25
    125e:	a0 93 b5 02 	sts	0x02B5, r26
    1262:	b0 93 b6 02 	sts	0x02B6, r27
	}
	if(ch->I_err < -integralErrorLimit)
    1266:	60 91 b3 02 	lds	r22, 0x02B3
    126a:	70 91 b4 02 	lds	r23, 0x02B4
    126e:	80 91 b5 02 	lds	r24, 0x02B5
    1272:	90 91 b6 02 	lds	r25, 0x02B6
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	40 e2       	ldi	r20, 0x20	; 32
    127c:	51 ec       	ldi	r21, 0xC1	; 193
    127e:	0e 94 b2 21 	call	0x4364	; 0x4364 <__cmpsf2>
    1282:	88 23       	and	r24, r24
    1284:	64 f4       	brge	.+24     	; 0x129e <__vector_7+0x85a>
	{
		ch->I_err = -integralErrorLimit;
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	a0 e2       	ldi	r26, 0x20	; 32
    128c:	b1 ec       	ldi	r27, 0xC1	; 193
    128e:	80 93 b3 02 	sts	0x02B3, r24
    1292:	90 93 b4 02 	sts	0x02B4, r25
    1296:	a0 93 b5 02 	sts	0x02B5, r26
    129a:	b0 93 b6 02 	sts	0x02B6, r27
	}
	
	ch->D_err = (ch->TempError[CtrlErrorIdx] - ch->TempError[CtrlErrorHistIdx]) * ch->Dgain; // D error
    129e:	e0 91 40 01 	lds	r30, 0x0140
    12a2:	f0 91 41 01 	lds	r31, 0x0141
    12a6:	c7 ea       	ldi	r28, 0xA7	; 167
    12a8:	d2 e0       	ldi	r29, 0x02	; 2
    12aa:	ee 0f       	add	r30, r30
    12ac:	ff 1f       	adc	r31, r31
    12ae:	ee 0f       	add	r30, r30
    12b0:	ff 1f       	adc	r31, r31
    12b2:	e1 53       	subi	r30, 0x31	; 49
    12b4:	fd 4f       	sbci	r31, 0xFD	; 253
    12b6:	60 81       	ld	r22, Z
    12b8:	71 81       	ldd	r23, Z+1	; 0x01
    12ba:	82 81       	ldd	r24, Z+2	; 0x02
    12bc:	93 81       	ldd	r25, Z+3	; 0x03
    12be:	e0 91 00 01 	lds	r30, 0x0100
    12c2:	f0 91 01 01 	lds	r31, 0x0101
    12c6:	ee 0f       	add	r30, r30
    12c8:	ff 1f       	adc	r31, r31
    12ca:	ee 0f       	add	r30, r30
    12cc:	ff 1f       	adc	r31, r31
    12ce:	e1 53       	subi	r30, 0x31	; 49
    12d0:	fd 4f       	sbci	r31, 0xFD	; 253
    12d2:	20 81       	ld	r18, Z
    12d4:	31 81       	ldd	r19, Z+1	; 0x01
    12d6:	42 81       	ldd	r20, Z+2	; 0x02
    12d8:	53 81       	ldd	r21, Z+3	; 0x03
    12da:	cc a0       	ldd	r12, Y+36	; 0x24
    12dc:	dd a0       	ldd	r13, Y+37	; 0x25
    12de:	ee a0       	ldd	r14, Y+38	; 0x26
    12e0:	ff a0       	ldd	r15, Y+39	; 0x27
    12e2:	0e 94 4d 21 	call	0x429a	; 0x429a <__subsf3>
    12e6:	a7 01       	movw	r20, r14
    12e8:	96 01       	movw	r18, r12
    12ea:	0e 94 9d 22 	call	0x453a	; 0x453a <__mulsf3>
    12ee:	68 8b       	std	Y+16, r22	; 0x10
    12f0:	79 8b       	std	Y+17, r23	; 0x11
    12f2:	8a 8b       	std	Y+18, r24	; 0x12
    12f4:	9b 8b       	std	Y+19, r25	; 0x13
	
	ch->Control_PID = ch->P_err + ch->I_err + ch->D_err;
    12f6:	68 85       	ldd	r22, Y+8	; 0x08
    12f8:	79 85       	ldd	r23, Y+9	; 0x09
    12fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    12fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    12fe:	2c 85       	ldd	r18, Y+12	; 0x0c
    1300:	3d 85       	ldd	r19, Y+13	; 0x0d
    1302:	4e 85       	ldd	r20, Y+14	; 0x0e
    1304:	5f 85       	ldd	r21, Y+15	; 0x0f
    1306:	c8 88       	ldd	r12, Y+16	; 0x10
    1308:	d9 88       	ldd	r13, Y+17	; 0x11
    130a:	ea 88       	ldd	r14, Y+18	; 0x12
    130c:	fb 88       	ldd	r15, Y+19	; 0x13
    130e:	0e 94 4e 21 	call	0x429c	; 0x429c <__addsf3>
    1312:	a7 01       	movw	r20, r14
    1314:	96 01       	movw	r18, r12
    1316:	0e 94 4e 21 	call	0x429c	; 0x429c <__addsf3>
    131a:	68 8f       	std	Y+24, r22	; 0x18
    131c:	79 8f       	std	Y+25, r23	; 0x19
    131e:	8a 8f       	std	Y+26, r24	; 0x1a
    1320:	9b 8f       	std	Y+27, r25	; 0x1b
	ch->Control = ch->Control_PID + ch->TempSetPoint * (float)0.21 - 5;
    1322:	c8 8c       	ldd	r12, Y+24	; 0x18
    1324:	d9 8c       	ldd	r13, Y+25	; 0x19
    1326:	ea 8c       	ldd	r14, Y+26	; 0x1a
    1328:	fb 8c       	ldd	r15, Y+27	; 0x1b
    132a:	68 81       	ld	r22, Y
    132c:	79 81       	ldd	r23, Y+1	; 0x01
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	9b 81       	ldd	r25, Y+3	; 0x03
    1332:	2d e3       	ldi	r18, 0x3D	; 61
    1334:	3a e0       	ldi	r19, 0x0A	; 10
    1336:	47 e5       	ldi	r20, 0x57	; 87
    1338:	5e e3       	ldi	r21, 0x3E	; 62
    133a:	0e 94 9d 22 	call	0x453a	; 0x453a <__mulsf3>
    133e:	9b 01       	movw	r18, r22
    1340:	ac 01       	movw	r20, r24
    1342:	c7 01       	movw	r24, r14
    1344:	b6 01       	movw	r22, r12
    1346:	0e 94 4e 21 	call	0x429c	; 0x429c <__addsf3>
    134a:	20 e0       	ldi	r18, 0x00	; 0
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	40 ea       	ldi	r20, 0xA0	; 160
    1350:	50 e4       	ldi	r21, 0x40	; 64
    1352:	0e 94 4d 21 	call	0x429a	; 0x429a <__subsf3>
    1356:	6c 8b       	std	Y+20, r22	; 0x14
    1358:	7d 8b       	std	Y+21, r23	; 0x15
    135a:	8e 8b       	std	Y+22, r24	; 0x16
    135c:	9f 8b       	std	Y+23, r25	; 0x17
	ch->pwm = (round(ch->Control));
    135e:	6c 89       	ldd	r22, Y+20	; 0x14
    1360:	7d 89       	ldd	r23, Y+21	; 0x15
    1362:	8e 89       	ldd	r24, Y+22	; 0x16
    1364:	9f 89       	ldd	r25, Y+23	; 0x17
    1366:	0e 94 00 23 	call	0x4600	; 0x4600 <round>
    136a:	0e 94 b6 21 	call	0x436c	; 0x436c <__fixsfsi>
    136e:	70 93 08 03 	sts	0x0308, r23
    1372:	60 93 07 03 	sts	0x0307, r22
	
	if(abs(ch->TempError[0]) > integralErrorActiveWindow)
    1376:	68 a5       	ldd	r22, Y+40	; 0x28
    1378:	79 a5       	ldd	r23, Y+41	; 0x29
    137a:	8a a5       	ldd	r24, Y+42	; 0x2a
    137c:	9b a5       	ldd	r25, Y+43	; 0x2b
    137e:	0e 94 b6 21 	call	0x436c	; 0x436c <__fixsfsi>
    1382:	9b 01       	movw	r18, r22
    1384:	77 23       	and	r23, r23
    1386:	24 f4       	brge	.+8      	; 0x1390 <__vector_7+0x94c>
    1388:	22 27       	eor	r18, r18
    138a:	33 27       	eor	r19, r19
    138c:	26 1b       	sub	r18, r22
    138e:	37 0b       	sbc	r19, r23
    1390:	26 30       	cpi	r18, 0x06	; 6
    1392:	31 05       	cpc	r19, r1
    1394:	44 f0       	brlt	.+16     	; 0x13a6 <__vector_7+0x962>
	{
		ch->I_err = 0;									// Avoid integral wind-up
    1396:	10 92 b3 02 	sts	0x02B3, r1
    139a:	10 92 b4 02 	sts	0x02B4, r1
    139e:	10 92 b5 02 	sts	0x02B5, r1
    13a2:	10 92 b6 02 	sts	0x02B6, r1
	}
	
	if(abs(ch->TempError[0]) <= ch->tempErrorWin)
    13a6:	60 91 cf 02 	lds	r22, 0x02CF
    13aa:	70 91 d0 02 	lds	r23, 0x02D0
    13ae:	80 91 d1 02 	lds	r24, 0x02D1
    13b2:	90 91 d2 02 	lds	r25, 0x02D2
    13b6:	c0 90 fb 02 	lds	r12, 0x02FB
    13ba:	d0 90 fc 02 	lds	r13, 0x02FC
    13be:	e0 90 fd 02 	lds	r14, 0x02FD
    13c2:	f0 90 fe 02 	lds	r15, 0x02FE
    13c6:	0e 94 b6 21 	call	0x436c	; 0x436c <__fixsfsi>
    13ca:	9b 01       	movw	r18, r22
    13cc:	77 23       	and	r23, r23
    13ce:	24 f4       	brge	.+8      	; 0x13d8 <__vector_7+0x994>
    13d0:	22 27       	eor	r18, r18
    13d2:	33 27       	eor	r19, r19
    13d4:	26 1b       	sub	r18, r22
    13d6:	37 0b       	sbc	r19, r23
    13d8:	b9 01       	movw	r22, r18
    13da:	33 0f       	add	r19, r19
    13dc:	88 0b       	sbc	r24, r24
    13de:	99 0b       	sbc	r25, r25
    13e0:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__floatsisf>
    13e4:	a7 01       	movw	r20, r14
    13e6:	96 01       	movw	r18, r12
    13e8:	0e 94 b2 21 	call	0x4364	; 0x4364 <__cmpsf2>
    13ec:	18 16       	cp	r1, r24
    13ee:	44 f0       	brlt	.+16     	; 0x1400 <__vector_7+0x9bc>
	{
		ch->tempSettleCnt ++;
    13f0:	ef ef       	ldi	r30, 0xFF	; 255
    13f2:	f2 e0       	ldi	r31, 0x02	; 2
    13f4:	80 81       	ld	r24, Z
    13f6:	91 81       	ldd	r25, Z+1	; 0x01
    13f8:	01 96       	adiw	r24, 0x01	; 1
    13fa:	91 83       	std	Z+1, r25	; 0x01
    13fc:	80 83       	st	Z, r24
    13fe:	04 c0       	rjmp	.+8      	; 0x1408 <__vector_7+0x9c4>
	}
	else
	{
		ch->tempSettleCnt = 0;
    1400:	10 92 00 03 	sts	0x0300, r1
    1404:	10 92 ff 02 	sts	0x02FF, r1
	}
	if(ch->tempSettleCnt >= ch->tempSettleTime)
    1408:	20 91 ff 02 	lds	r18, 0x02FF
    140c:	30 91 00 03 	lds	r19, 0x0300
    1410:	80 91 01 03 	lds	r24, 0x0301
    1414:	90 91 02 03 	lds	r25, 0x0302
    1418:	28 17       	cp	r18, r24
    141a:	39 07       	cpc	r19, r25
    141c:	3c f0       	brlt	.+14     	; 0x142c <__vector_7+0x9e8>
	{
		ch->tempStable = 1;
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	90 93 04 03 	sts	0x0304, r25
    1426:	80 93 03 03 	sts	0x0303, r24
    142a:	04 c0       	rjmp	.+8      	; 0x1434 <__vector_7+0x9f0>
	}
	else
	{
		ch->tempStable = 0;
    142c:	10 92 04 03 	sts	0x0304, r1
    1430:	10 92 03 03 	sts	0x0303, r1
		case 3:
		PORTD &= 0b10111111;	// Set CS3 low
		break;
						
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
    1434:	5f 98       	cbi	0x0b, 7	; 11
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    143a:	0d b4       	in	r0, 0x2d	; 45
    143c:	07 fe       	sbrs	r0, 7
    143e:	fd cf       	rjmp	.-6      	; 0x143a <__vector_7+0x9f6>
	byteword=SPDR;				//just for clearing SPIF
    1440:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
    1442:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    1444:	0d b4       	in	r0, 0x2d	; 45
    1446:	07 fe       	sbrs	r0, 7
    1448:	fd cf       	rjmp	.-6      	; 0x1444 <__vector_7+0xa00>
	byteword=SPDR;
    144a:	9e b5       	in	r25, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
    144c:	8b b1       	in	r24, 0x0b	; 11
    144e:	80 6f       	ori	r24, 0xF0	; 240
    1450:	8b b9       	out	0x0b, r24	; 11
		case 3:
		PORTD &= 0b10111111;	// Set CS3 low
		break;
						
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
    1452:	5f 98       	cbi	0x0b, 7	; 11
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
    1454:	82 e0       	ldi	r24, 0x02	; 2
    1456:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    1458:	0d b4       	in	r0, 0x2d	; 45
    145a:	07 fe       	sbrs	r0, 7
    145c:	fd cf       	rjmp	.-6      	; 0x1458 <__vector_7+0xa14>
	byteword=SPDR;				//just for clearing SPIF
    145e:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
    1460:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    1462:	0d b4       	in	r0, 0x2d	; 45
    1464:	07 fe       	sbrs	r0, 7
    1466:	fd cf       	rjmp	.-6      	; 0x1462 <__vector_7+0xa1e>
	byteword=SPDR;
    1468:	6e b5       	in	r22, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
    146a:	8b b1       	in	r24, 0x0b	; 11
    146c:	80 6f       	ori	r24, 0xF0	; 240
    146e:	8b b9       	out	0x0b, r24	; 11
	uint8_t u8_msb = 0;
	uint8_t u8_lsb = 0;
	
	u8_msb = SPIread(0x01, ch);
	u8_lsb = SPIread(0x02, ch);
	adc_code = (((u8_msb << 8) | u8_lsb) >> 1);
    1470:	70 e0       	ldi	r23, 0x00	; 0
    1472:	79 2b       	or	r23, r25
    1474:	75 95       	asr	r23
    1476:	67 95       	ror	r22
	return ((float)adc_code / 32.0 - 256.0);
    1478:	07 2e       	mov	r0, r23
    147a:	00 0c       	add	r0, r0
    147c:	88 0b       	sbc	r24, r24
    147e:	99 0b       	sbc	r25, r25
    1480:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__floatsisf>
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	40 e0       	ldi	r20, 0x00	; 0
    148a:	5d e3       	ldi	r21, 0x3D	; 61
    148c:	0e 94 9d 22 	call	0x453a	; 0x453a <__mulsf3>
    1490:	20 e0       	ldi	r18, 0x00	; 0
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	40 e8       	ldi	r20, 0x80	; 128
    1496:	53 e4       	ldi	r21, 0x43	; 67
    1498:	0e 94 4d 21 	call	0x429a	; 0x429a <__subsf3>
	PORTD &= 0b11110111;						// Turn off LED on PCB (Irq call freq: 16MHz / 1024 / 255 = 61.3 Hz )
}

static inline void PIDctrl(channel *ch, int tempSensor)
{
	ch->TempSensor = ReadTempSensor(tempSensor);
    149c:	e2 e4       	ldi	r30, 0x42	; 66
    149e:	f1 e0       	ldi	r31, 0x01	; 1
    14a0:	64 83       	std	Z+4, r22	; 0x04
    14a2:	75 83       	std	Z+5, r23	; 0x05
    14a4:	86 83       	std	Z+6, r24	; 0x06
    14a6:	97 83       	std	Z+7, r25	; 0x07
	if(ch->TempSensor > (float)maxAllowedTemp)					// Max temperature limit
    14a8:	64 81       	ldd	r22, Z+4	; 0x04
    14aa:	75 81       	ldd	r23, Z+5	; 0x05
    14ac:	86 81       	ldd	r24, Z+6	; 0x06
    14ae:	97 81       	ldd	r25, Z+7	; 0x07
    14b0:	20 e0       	ldi	r18, 0x00	; 0
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	40 ef       	ldi	r20, 0xF0	; 240
    14b6:	52 e4       	ldi	r21, 0x42	; 66
    14b8:	0e 94 99 22 	call	0x4532	; 0x4532 <__gesf2>
    14bc:	18 16       	cp	r1, r24
    14be:	2c f4       	brge	.+10     	; 0x14ca <__vector_7+0xa86>
	{
		ch->heaterEnable = false;
    14c0:	10 92 a4 01 	sts	0x01A4, r1
		PORTC &= allHeaterOff;
    14c4:	88 b1       	in	r24, 0x08	; 8
    14c6:	80 7f       	andi	r24, 0xF0	; 240
    14c8:	88 b9       	out	0x08, r24	; 8
	}

	ch->TempError[CtrlErrorIdx] = ch->TempSetPoint - ch->TempSensor;			// Control error
    14ca:	00 91 40 01 	lds	r16, 0x0140
    14ce:	10 91 41 01 	lds	r17, 0x0141
    14d2:	c2 e4       	ldi	r28, 0x42	; 66
    14d4:	d1 e0       	ldi	r29, 0x01	; 1
    14d6:	68 81       	ld	r22, Y
    14d8:	79 81       	ldd	r23, Y+1	; 0x01
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	9b 81       	ldd	r25, Y+3	; 0x03
    14de:	2c 81       	ldd	r18, Y+4	; 0x04
    14e0:	3d 81       	ldd	r19, Y+5	; 0x05
    14e2:	4e 81       	ldd	r20, Y+6	; 0x06
    14e4:	5f 81       	ldd	r21, Y+7	; 0x07
    14e6:	0e 94 4d 21 	call	0x429a	; 0x429a <__subsf3>
    14ea:	00 0f       	add	r16, r16
    14ec:	11 1f       	adc	r17, r17
    14ee:	00 0f       	add	r16, r16
    14f0:	11 1f       	adc	r17, r17
    14f2:	f8 01       	movw	r30, r16
    14f4:	e6 59       	subi	r30, 0x96	; 150
    14f6:	fe 4f       	sbci	r31, 0xFE	; 254
    14f8:	60 83       	st	Z, r22
    14fa:	71 83       	std	Z+1, r23	; 0x01
    14fc:	82 83       	std	Z+2, r24	; 0x02
    14fe:	93 83       	std	Z+3, r25	; 0x03
	
	ch->P_err = ch->TempError[CtrlErrorIdx] * ch->Pgain;					// P error
    1500:	e0 91 40 01 	lds	r30, 0x0140
    1504:	f0 91 41 01 	lds	r31, 0x0141
    1508:	ee 0f       	add	r30, r30
    150a:	ff 1f       	adc	r31, r31
    150c:	ee 0f       	add	r30, r30
    150e:	ff 1f       	adc	r31, r31
    1510:	e6 59       	subi	r30, 0x96	; 150
    1512:	fe 4f       	sbci	r31, 0xFE	; 254
    1514:	60 81       	ld	r22, Z
    1516:	71 81       	ldd	r23, Z+1	; 0x01
    1518:	82 81       	ldd	r24, Z+2	; 0x02
    151a:	93 81       	ldd	r25, Z+3	; 0x03
    151c:	2c 8d       	ldd	r18, Y+28	; 0x1c
    151e:	3d 8d       	ldd	r19, Y+29	; 0x1d
    1520:	4e 8d       	ldd	r20, Y+30	; 0x1e
    1522:	5f 8d       	ldd	r21, Y+31	; 0x1f
    1524:	0e 94 9d 22 	call	0x453a	; 0x453a <__mulsf3>
    1528:	68 87       	std	Y+8, r22	; 0x08
    152a:	79 87       	std	Y+9, r23	; 0x09
    152c:	8a 87       	std	Y+10, r24	; 0x0a
    152e:	9b 87       	std	Y+11, r25	; 0x0b
	ch->I_err = ch->I_err + (ch->TempError[CtrlErrorIdx] * ch->Igain);			// I error
    1530:	cc 84       	ldd	r12, Y+12	; 0x0c
    1532:	dd 84       	ldd	r13, Y+13	; 0x0d
    1534:	ee 84       	ldd	r14, Y+14	; 0x0e
    1536:	ff 84       	ldd	r15, Y+15	; 0x0f
    1538:	e0 91 40 01 	lds	r30, 0x0140
    153c:	f0 91 41 01 	lds	r31, 0x0141
    1540:	ee 0f       	add	r30, r30
    1542:	ff 1f       	adc	r31, r31
    1544:	ee 0f       	add	r30, r30
    1546:	ff 1f       	adc	r31, r31
    1548:	e6 59       	subi	r30, 0x96	; 150
    154a:	fe 4f       	sbci	r31, 0xFE	; 254
    154c:	60 81       	ld	r22, Z
    154e:	71 81       	ldd	r23, Z+1	; 0x01
    1550:	82 81       	ldd	r24, Z+2	; 0x02
    1552:	93 81       	ldd	r25, Z+3	; 0x03
    1554:	28 a1       	ldd	r18, Y+32	; 0x20
    1556:	39 a1       	ldd	r19, Y+33	; 0x21
    1558:	4a a1       	ldd	r20, Y+34	; 0x22
    155a:	5b a1       	ldd	r21, Y+35	; 0x23
    155c:	0e 94 9d 22 	call	0x453a	; 0x453a <__mulsf3>
    1560:	9b 01       	movw	r18, r22
    1562:	ac 01       	movw	r20, r24
    1564:	c7 01       	movw	r24, r14
    1566:	b6 01       	movw	r22, r12
    1568:	0e 94 4e 21 	call	0x429c	; 0x429c <__addsf3>
    156c:	6c 87       	std	Y+12, r22	; 0x0c
    156e:	7d 87       	std	Y+13, r23	; 0x0d
    1570:	8e 87       	std	Y+14, r24	; 0x0e
    1572:	9f 87       	std	Y+15, r25	; 0x0f
	if(ch->I_err > integralErrorLimit)
    1574:	6c 85       	ldd	r22, Y+12	; 0x0c
    1576:	7d 85       	ldd	r23, Y+13	; 0x0d
    1578:	8e 85       	ldd	r24, Y+14	; 0x0e
    157a:	9f 85       	ldd	r25, Y+15	; 0x0f
    157c:	20 e0       	ldi	r18, 0x00	; 0
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	40 e2       	ldi	r20, 0x20	; 32
    1582:	51 e4       	ldi	r21, 0x41	; 65
    1584:	0e 94 99 22 	call	0x4532	; 0x4532 <__gesf2>
    1588:	18 16       	cp	r1, r24
    158a:	64 f4       	brge	.+24     	; 0x15a4 <__vector_7+0xb60>
	{
		ch->I_err = integralErrorLimit;
    158c:	80 e0       	ldi	r24, 0x00	; 0
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	a0 e2       	ldi	r26, 0x20	; 32
    1592:	b1 e4       	ldi	r27, 0x41	; 65
    1594:	80 93 4e 01 	sts	0x014E, r24
    1598:	90 93 4f 01 	sts	0x014F, r25
    159c:	a0 93 50 01 	sts	0x0150, r26
    15a0:	b0 93 51 01 	sts	0x0151, r27
	}
	if(ch->I_err < -integralErrorLimit)
    15a4:	60 91 4e 01 	lds	r22, 0x014E
    15a8:	70 91 4f 01 	lds	r23, 0x014F
    15ac:	80 91 50 01 	lds	r24, 0x0150
    15b0:	90 91 51 01 	lds	r25, 0x0151
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	40 e2       	ldi	r20, 0x20	; 32
    15ba:	51 ec       	ldi	r21, 0xC1	; 193
    15bc:	0e 94 b2 21 	call	0x4364	; 0x4364 <__cmpsf2>
    15c0:	88 23       	and	r24, r24
    15c2:	64 f4       	brge	.+24     	; 0x15dc <__vector_7+0xb98>
	{
		ch->I_err = -integralErrorLimit;
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	a0 e2       	ldi	r26, 0x20	; 32
    15ca:	b1 ec       	ldi	r27, 0xC1	; 193
    15cc:	80 93 4e 01 	sts	0x014E, r24
    15d0:	90 93 4f 01 	sts	0x014F, r25
    15d4:	a0 93 50 01 	sts	0x0150, r26
    15d8:	b0 93 51 01 	sts	0x0151, r27
	}
	
	ch->D_err = (ch->TempError[CtrlErrorIdx] - ch->TempError[CtrlErrorHistIdx]) * ch->Dgain; // D error
    15dc:	e0 91 40 01 	lds	r30, 0x0140
    15e0:	f0 91 41 01 	lds	r31, 0x0141
    15e4:	c2 e4       	ldi	r28, 0x42	; 66
    15e6:	d1 e0       	ldi	r29, 0x01	; 1
    15e8:	ee 0f       	add	r30, r30
    15ea:	ff 1f       	adc	r31, r31
    15ec:	ee 0f       	add	r30, r30
    15ee:	ff 1f       	adc	r31, r31
    15f0:	e6 59       	subi	r30, 0x96	; 150
    15f2:	fe 4f       	sbci	r31, 0xFE	; 254
    15f4:	60 81       	ld	r22, Z
    15f6:	71 81       	ldd	r23, Z+1	; 0x01
    15f8:	82 81       	ldd	r24, Z+2	; 0x02
    15fa:	93 81       	ldd	r25, Z+3	; 0x03
    15fc:	e0 91 00 01 	lds	r30, 0x0100
    1600:	f0 91 01 01 	lds	r31, 0x0101
    1604:	ee 0f       	add	r30, r30
    1606:	ff 1f       	adc	r31, r31
    1608:	ee 0f       	add	r30, r30
    160a:	ff 1f       	adc	r31, r31
    160c:	e6 59       	subi	r30, 0x96	; 150
    160e:	fe 4f       	sbci	r31, 0xFE	; 254
    1610:	20 81       	ld	r18, Z
    1612:	31 81       	ldd	r19, Z+1	; 0x01
    1614:	42 81       	ldd	r20, Z+2	; 0x02
    1616:	53 81       	ldd	r21, Z+3	; 0x03
    1618:	cc a0       	ldd	r12, Y+36	; 0x24
    161a:	dd a0       	ldd	r13, Y+37	; 0x25
    161c:	ee a0       	ldd	r14, Y+38	; 0x26
    161e:	ff a0       	ldd	r15, Y+39	; 0x27
    1620:	0e 94 4d 21 	call	0x429a	; 0x429a <__subsf3>
    1624:	a7 01       	movw	r20, r14
    1626:	96 01       	movw	r18, r12
    1628:	0e 94 9d 22 	call	0x453a	; 0x453a <__mulsf3>
    162c:	68 8b       	std	Y+16, r22	; 0x10
    162e:	79 8b       	std	Y+17, r23	; 0x11
    1630:	8a 8b       	std	Y+18, r24	; 0x12
    1632:	9b 8b       	std	Y+19, r25	; 0x13
	
	ch->Control_PID = ch->P_err + ch->I_err + ch->D_err;
    1634:	68 85       	ldd	r22, Y+8	; 0x08
    1636:	79 85       	ldd	r23, Y+9	; 0x09
    1638:	8a 85       	ldd	r24, Y+10	; 0x0a
    163a:	9b 85       	ldd	r25, Y+11	; 0x0b
    163c:	2c 85       	ldd	r18, Y+12	; 0x0c
    163e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1640:	4e 85       	ldd	r20, Y+14	; 0x0e
    1642:	5f 85       	ldd	r21, Y+15	; 0x0f
    1644:	c8 88       	ldd	r12, Y+16	; 0x10
    1646:	d9 88       	ldd	r13, Y+17	; 0x11
    1648:	ea 88       	ldd	r14, Y+18	; 0x12
    164a:	fb 88       	ldd	r15, Y+19	; 0x13
    164c:	0e 94 4e 21 	call	0x429c	; 0x429c <__addsf3>
    1650:	a7 01       	movw	r20, r14
    1652:	96 01       	movw	r18, r12
    1654:	0e 94 4e 21 	call	0x429c	; 0x429c <__addsf3>
    1658:	68 8f       	std	Y+24, r22	; 0x18
    165a:	79 8f       	std	Y+25, r23	; 0x19
    165c:	8a 8f       	std	Y+26, r24	; 0x1a
    165e:	9b 8f       	std	Y+27, r25	; 0x1b
	ch->Control = ch->Control_PID + ch->TempSetPoint * (float)0.21 - 5;
    1660:	c8 8c       	ldd	r12, Y+24	; 0x18
    1662:	d9 8c       	ldd	r13, Y+25	; 0x19
    1664:	ea 8c       	ldd	r14, Y+26	; 0x1a
    1666:	fb 8c       	ldd	r15, Y+27	; 0x1b
    1668:	68 81       	ld	r22, Y
    166a:	79 81       	ldd	r23, Y+1	; 0x01
    166c:	8a 81       	ldd	r24, Y+2	; 0x02
    166e:	9b 81       	ldd	r25, Y+3	; 0x03
    1670:	2d e3       	ldi	r18, 0x3D	; 61
    1672:	3a e0       	ldi	r19, 0x0A	; 10
    1674:	47 e5       	ldi	r20, 0x57	; 87
    1676:	5e e3       	ldi	r21, 0x3E	; 62
    1678:	0e 94 9d 22 	call	0x453a	; 0x453a <__mulsf3>
    167c:	9b 01       	movw	r18, r22
    167e:	ac 01       	movw	r20, r24
    1680:	c7 01       	movw	r24, r14
    1682:	b6 01       	movw	r22, r12
    1684:	0e 94 4e 21 	call	0x429c	; 0x429c <__addsf3>
    1688:	20 e0       	ldi	r18, 0x00	; 0
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	40 ea       	ldi	r20, 0xA0	; 160
    168e:	50 e4       	ldi	r21, 0x40	; 64
    1690:	0e 94 4d 21 	call	0x429a	; 0x429a <__subsf3>
    1694:	6c 8b       	std	Y+20, r22	; 0x14
    1696:	7d 8b       	std	Y+21, r23	; 0x15
    1698:	8e 8b       	std	Y+22, r24	; 0x16
    169a:	9f 8b       	std	Y+23, r25	; 0x17
	ch->pwm = (round(ch->Control));
    169c:	6c 89       	ldd	r22, Y+20	; 0x14
    169e:	7d 89       	ldd	r23, Y+21	; 0x15
    16a0:	8e 89       	ldd	r24, Y+22	; 0x16
    16a2:	9f 89       	ldd	r25, Y+23	; 0x17
    16a4:	0e 94 00 23 	call	0x4600	; 0x4600 <round>
    16a8:	0e 94 b6 21 	call	0x436c	; 0x436c <__fixsfsi>
    16ac:	70 93 a3 01 	sts	0x01A3, r23
    16b0:	60 93 a2 01 	sts	0x01A2, r22
	
	if(abs(ch->TempError[0]) > integralErrorActiveWindow)
    16b4:	68 a5       	ldd	r22, Y+40	; 0x28
    16b6:	79 a5       	ldd	r23, Y+41	; 0x29
    16b8:	8a a5       	ldd	r24, Y+42	; 0x2a
    16ba:	9b a5       	ldd	r25, Y+43	; 0x2b
    16bc:	0e 94 b6 21 	call	0x436c	; 0x436c <__fixsfsi>
    16c0:	9b 01       	movw	r18, r22
    16c2:	77 23       	and	r23, r23
    16c4:	24 f4       	brge	.+8      	; 0x16ce <__vector_7+0xc8a>
    16c6:	22 27       	eor	r18, r18
    16c8:	33 27       	eor	r19, r19
    16ca:	26 1b       	sub	r18, r22
    16cc:	37 0b       	sbc	r19, r23
    16ce:	26 30       	cpi	r18, 0x06	; 6
    16d0:	31 05       	cpc	r19, r1
    16d2:	44 f0       	brlt	.+16     	; 0x16e4 <__vector_7+0xca0>
	{
		ch->I_err = 0;									// Avoid integral wind-up
    16d4:	10 92 4e 01 	sts	0x014E, r1
    16d8:	10 92 4f 01 	sts	0x014F, r1
    16dc:	10 92 50 01 	sts	0x0150, r1
    16e0:	10 92 51 01 	sts	0x0151, r1
	}
	
	if(abs(ch->TempError[0]) <= ch->tempErrorWin)
    16e4:	60 91 6a 01 	lds	r22, 0x016A
    16e8:	70 91 6b 01 	lds	r23, 0x016B
    16ec:	80 91 6c 01 	lds	r24, 0x016C
    16f0:	90 91 6d 01 	lds	r25, 0x016D
    16f4:	c0 90 96 01 	lds	r12, 0x0196
    16f8:	d0 90 97 01 	lds	r13, 0x0197
    16fc:	e0 90 98 01 	lds	r14, 0x0198
    1700:	f0 90 99 01 	lds	r15, 0x0199
    1704:	0e 94 b6 21 	call	0x436c	; 0x436c <__fixsfsi>
    1708:	9b 01       	movw	r18, r22
    170a:	77 23       	and	r23, r23
    170c:	24 f4       	brge	.+8      	; 0x1716 <__vector_7+0xcd2>
    170e:	22 27       	eor	r18, r18
    1710:	33 27       	eor	r19, r19
    1712:	26 1b       	sub	r18, r22
    1714:	37 0b       	sbc	r19, r23
    1716:	b9 01       	movw	r22, r18
    1718:	33 0f       	add	r19, r19
    171a:	88 0b       	sbc	r24, r24
    171c:	99 0b       	sbc	r25, r25
    171e:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__floatsisf>
    1722:	a7 01       	movw	r20, r14
    1724:	96 01       	movw	r18, r12
    1726:	0e 94 b2 21 	call	0x4364	; 0x4364 <__cmpsf2>
    172a:	18 16       	cp	r1, r24
    172c:	44 f0       	brlt	.+16     	; 0x173e <__vector_7+0xcfa>
	{
		ch->tempSettleCnt ++;
    172e:	ea e9       	ldi	r30, 0x9A	; 154
    1730:	f1 e0       	ldi	r31, 0x01	; 1
    1732:	80 81       	ld	r24, Z
    1734:	91 81       	ldd	r25, Z+1	; 0x01
    1736:	01 96       	adiw	r24, 0x01	; 1
    1738:	91 83       	std	Z+1, r25	; 0x01
    173a:	80 83       	st	Z, r24
    173c:	04 c0       	rjmp	.+8      	; 0x1746 <__vector_7+0xd02>
	}
	else
	{
		ch->tempSettleCnt = 0;
    173e:	10 92 9b 01 	sts	0x019B, r1
    1742:	10 92 9a 01 	sts	0x019A, r1
	}
	if(ch->tempSettleCnt >= ch->tempSettleTime)
    1746:	20 91 9a 01 	lds	r18, 0x019A
    174a:	30 91 9b 01 	lds	r19, 0x019B
    174e:	80 91 9c 01 	lds	r24, 0x019C
    1752:	90 91 9d 01 	lds	r25, 0x019D
    1756:	28 17       	cp	r18, r24
    1758:	39 07       	cpc	r19, r25
    175a:	3c f0       	brlt	.+14     	; 0x176a <__vector_7+0xd26>
	{
		ch->tempStable = 1;
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	90 93 9f 01 	sts	0x019F, r25
    1764:	80 93 9e 01 	sts	0x019E, r24
    1768:	04 c0       	rjmp	.+8      	; 0x1772 <__vector_7+0xd2e>
	}
	else
	{
		ch->tempStable = 0;
    176a:	10 92 9f 01 	sts	0x019F, r1
    176e:	10 92 9e 01 	sts	0x019E, r1
	PIDctrl(&ch0, 1);
	PIDctrl(&ch1, 2);
	PIDctrl(&ch2, 3);
	PIDctrl(&ch3, 4);

	CtrlErrorIdx ++;							// Control error ring buffer index
    1772:	80 91 40 01 	lds	r24, 0x0140
    1776:	90 91 41 01 	lds	r25, 0x0141
    177a:	01 96       	adiw	r24, 0x01	; 1
    177c:	90 93 41 01 	sts	0x0141, r25
    1780:	80 93 40 01 	sts	0x0140, r24
	if(CtrlErrorIdx > errorHistory)
    1784:	80 91 40 01 	lds	r24, 0x0140
    1788:	90 91 41 01 	lds	r25, 0x0141
    178c:	0b 97       	sbiw	r24, 0x0b	; 11
    178e:	24 f0       	brlt	.+8      	; 0x1798 <__vector_7+0xd54>
	{
		CtrlErrorIdx = 0;
    1790:	10 92 41 01 	sts	0x0141, r1
    1794:	10 92 40 01 	sts	0x0140, r1
	}
	CtrlErrorHistIdx = CtrlErrorIdx + 1;
    1798:	80 91 40 01 	lds	r24, 0x0140
    179c:	90 91 41 01 	lds	r25, 0x0141
    17a0:	01 96       	adiw	r24, 0x01	; 1
    17a2:	90 93 01 01 	sts	0x0101, r25
    17a6:	80 93 00 01 	sts	0x0100, r24
	if(CtrlErrorHistIdx > errorHistory)
    17aa:	80 91 00 01 	lds	r24, 0x0100
    17ae:	90 91 01 01 	lds	r25, 0x0101
    17b2:	0b 97       	sbiw	r24, 0x0b	; 11
    17b4:	24 f0       	brlt	.+8      	; 0x17be <__vector_7+0xd7a>
	{
		CtrlErrorHistIdx = 0;
    17b6:	10 92 01 01 	sts	0x0101, r1
    17ba:	10 92 00 01 	sts	0x0100, r1
	}		

	PORTD &= 0b11110111;						// Turn off LED on PCB (Irq call freq: 16MHz / 1024 / 255 = 61.3 Hz )
    17be:	5b 98       	cbi	0x0b, 3	; 11
}
    17c0:	ff 91       	pop	r31
    17c2:	ef 91       	pop	r30
    17c4:	df 91       	pop	r29
    17c6:	cf 91       	pop	r28
    17c8:	bf 91       	pop	r27
    17ca:	af 91       	pop	r26
    17cc:	9f 91       	pop	r25
    17ce:	8f 91       	pop	r24
    17d0:	7f 91       	pop	r23
    17d2:	6f 91       	pop	r22
    17d4:	5f 91       	pop	r21
    17d6:	4f 91       	pop	r20
    17d8:	3f 91       	pop	r19
    17da:	2f 91       	pop	r18
    17dc:	1f 91       	pop	r17
    17de:	0f 91       	pop	r16
    17e0:	ff 90       	pop	r15
    17e2:	ef 90       	pop	r14
    17e4:	df 90       	pop	r13
    17e6:	cf 90       	pop	r12
    17e8:	0f 90       	pop	r0
    17ea:	0f be       	out	0x3f, r0	; 63
    17ec:	0f 90       	pop	r0
    17ee:	1f 90       	pop	r1
    17f0:	18 95       	reti

000017f2 <ftoa>:
	printStatus("IntiRead: ");
	printStatus(data);
}

void ftoa(float num, char *str)
{
    17f2:	8f 92       	push	r8
    17f4:	9f 92       	push	r9
    17f6:	af 92       	push	r10
    17f8:	bf 92       	push	r11
    17fa:	cf 92       	push	r12
    17fc:	df 92       	push	r13
    17fe:	ef 92       	push	r14
    1800:	ff 92       	push	r15
    1802:	0f 93       	push	r16
    1804:	1f 93       	push	r17
    1806:	cf 93       	push	r28
    1808:	df 93       	push	r29
    180a:	cd b7       	in	r28, 0x3d	; 61
    180c:	de b7       	in	r29, 0x3e	; 62
    180e:	64 97       	sbiw	r28, 0x14	; 20
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	f8 94       	cli
    1814:	de bf       	out	0x3e, r29	; 62
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	cd bf       	out	0x3d, r28	; 61
    181a:	4b 01       	movw	r8, r22
    181c:	5c 01       	movw	r10, r24
    181e:	8a 01       	movw	r16, r20
	int intpart = num;
    1820:	0e 94 b6 21 	call	0x436c	; 0x436c <__fixsfsi>
    1824:	6b 01       	movw	r12, r22
    1826:	7c 01       	movw	r14, r24
	int i;
	float decimal_part;
	char decimal[20];
	int PRECISION = 3;						// Decimal precision

	memset(str, 0x0, 20);
    1828:	84 e1       	ldi	r24, 0x14	; 20
    182a:	f8 01       	movw	r30, r16
    182c:	11 92       	st	Z+, r1
    182e:	8a 95       	dec	r24
    1830:	e9 f7       	brne	.-6      	; 0x182c <ftoa+0x3a>
    1832:	4a e0       	ldi	r20, 0x0A	; 10
    1834:	b8 01       	movw	r22, r16
    1836:	c6 01       	movw	r24, r12
    1838:	0e 94 ac 23 	call	0x4758	; 0x4758 <__itoa_ncheck>
	itoa(num, str, 10);

	strcat(str, ".");
    183c:	f8 01       	movw	r30, r16
    183e:	01 90       	ld	r0, Z+
    1840:	00 20       	and	r0, r0
    1842:	e9 f7       	brne	.-6      	; 0x183e <ftoa+0x4c>
    1844:	31 97       	sbiw	r30, 0x01	; 1
    1846:	8e e2       	ldi	r24, 0x2E	; 46
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	91 83       	std	Z+1, r25	; 0x01
    184c:	80 83       	st	Z, r24

	decimal_part = num - intpart;
    184e:	b6 01       	movw	r22, r12
    1850:	dd 0c       	add	r13, r13
    1852:	88 0b       	sbc	r24, r24
    1854:	99 0b       	sbc	r25, r25
    1856:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__floatsisf>
    185a:	9b 01       	movw	r18, r22
    185c:	ac 01       	movw	r20, r24
    185e:	c5 01       	movw	r24, r10
    1860:	b4 01       	movw	r22, r8
    1862:	0e 94 4d 21 	call	0x429a	; 0x429a <__subsf3>
	intdecimal = decimal_part * 1000;		// If decimal precision is 3 then 1000, 2 -> 100, 1 -> 10 ...;
    1866:	20 e0       	ldi	r18, 0x00	; 0
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	4a e7       	ldi	r20, 0x7A	; 122
    186c:	54 e4       	ldi	r21, 0x44	; 68
    186e:	0e 94 9d 22 	call	0x453a	; 0x453a <__mulsf3>
    1872:	0e 94 b6 21 	call	0x436c	; 0x436c <__fixsfsi>
    1876:	9b 01       	movw	r18, r22
    1878:	77 23       	and	r23, r23
    187a:	24 f4       	brge	.+8      	; 0x1884 <ftoa+0x92>
    187c:	22 27       	eor	r18, r18
    187e:	33 27       	eor	r19, r19
    1880:	26 1b       	sub	r18, r22
    1882:	37 0b       	sbc	r19, r23
    1884:	4a e0       	ldi	r20, 0x0A	; 10
    1886:	be 01       	movw	r22, r28
    1888:	6f 5f       	subi	r22, 0xFF	; 255
    188a:	7f 4f       	sbci	r23, 0xFF	; 255
    188c:	c9 01       	movw	r24, r18
    188e:	0e 94 ac 23 	call	0x4758	; 0x4758 <__itoa_ncheck>
	if(intdecimal < 0)
	{
		intdecimal = -intdecimal;
	}
	itoa(intdecimal, decimal, 10);
	for(i =0;i < (PRECISION - strlen(decimal));i++)
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	de 01       	movw	r26, r28
    1898:	11 96       	adiw	r26, 0x01	; 1
    189a:	23 e0       	ldi	r18, 0x03	; 3
    189c:	30 e0       	ldi	r19, 0x00	; 0
	{
		strcat(str, "0");
    189e:	40 e3       	ldi	r20, 0x30	; 48
    18a0:	50 e0       	ldi	r21, 0x00	; 0
	if(intdecimal < 0)
	{
		intdecimal = -intdecimal;
	}
	itoa(intdecimal, decimal, 10);
	for(i =0;i < (PRECISION - strlen(decimal));i++)
    18a2:	08 c0       	rjmp	.+16     	; 0x18b4 <ftoa+0xc2>
	{
		strcat(str, "0");
    18a4:	f8 01       	movw	r30, r16
    18a6:	01 90       	ld	r0, Z+
    18a8:	00 20       	and	r0, r0
    18aa:	e9 f7       	brne	.-6      	; 0x18a6 <ftoa+0xb4>
    18ac:	31 97       	sbiw	r30, 0x01	; 1
    18ae:	51 83       	std	Z+1, r21	; 0x01
    18b0:	40 83       	st	Z, r20
	if(intdecimal < 0)
	{
		intdecimal = -intdecimal;
	}
	itoa(intdecimal, decimal, 10);
	for(i =0;i < (PRECISION - strlen(decimal));i++)
    18b2:	01 96       	adiw	r24, 0x01	; 1
    18b4:	fd 01       	movw	r30, r26
    18b6:	01 90       	ld	r0, Z+
    18b8:	00 20       	and	r0, r0
    18ba:	e9 f7       	brne	.-6      	; 0x18b6 <ftoa+0xc4>
    18bc:	31 97       	sbiw	r30, 0x01	; 1
    18be:	ea 1b       	sub	r30, r26
    18c0:	fb 0b       	sbc	r31, r27
    18c2:	b9 01       	movw	r22, r18
    18c4:	6e 1b       	sub	r22, r30
    18c6:	7f 0b       	sbc	r23, r31
    18c8:	86 17       	cp	r24, r22
    18ca:	97 07       	cpc	r25, r23
    18cc:	58 f3       	brcs	.-42     	; 0x18a4 <ftoa+0xb2>
	{
		strcat(str, "0");
	}
	strcat(str, decimal);
    18ce:	be 01       	movw	r22, r28
    18d0:	6f 5f       	subi	r22, 0xFF	; 255
    18d2:	7f 4f       	sbci	r23, 0xFF	; 255
    18d4:	c8 01       	movw	r24, r16
    18d6:	0e 94 78 23 	call	0x46f0	; 0x46f0 <strcat>
}
    18da:	64 96       	adiw	r28, 0x14	; 20
    18dc:	0f b6       	in	r0, 0x3f	; 63
    18de:	f8 94       	cli
    18e0:	de bf       	out	0x3e, r29	; 62
    18e2:	0f be       	out	0x3f, r0	; 63
    18e4:	cd bf       	out	0x3d, r28	; 61
    18e6:	df 91       	pop	r29
    18e8:	cf 91       	pop	r28
    18ea:	1f 91       	pop	r17
    18ec:	0f 91       	pop	r16
    18ee:	ff 90       	pop	r15
    18f0:	ef 90       	pop	r14
    18f2:	df 90       	pop	r13
    18f4:	cf 90       	pop	r12
    18f6:	bf 90       	pop	r11
    18f8:	af 90       	pop	r10
    18fa:	9f 90       	pop	r9
    18fc:	8f 90       	pop	r8
    18fe:	08 95       	ret

00001900 <main>:
	eeprom_write_float( (float*)eepromAdr_IgainCh3, ch3.Igain );
	eeprom_write_float( (float*)eepromAdr_DgainCh3, ch3.Dgain );			
}

int main(void)
{
    1900:	cf 93       	push	r28
    1902:	df 93       	push	r29
    1904:	cd b7       	in	r28, 0x3d	; 61
    1906:	de b7       	in	r29, 0x3e	; 62
    1908:	cf 55       	subi	r28, 0x5F	; 95
    190a:	d1 09       	sbc	r29, r1
    190c:	0f b6       	in	r0, 0x3f	; 63
    190e:	f8 94       	cli
    1910:	de bf       	out	0x3e, r29	; 62
    1912:	0f be       	out	0x3f, r0	; 63
    1914:	cd bf       	out	0x3d, r28	; 61
	char requestID[4];
	char s_string[20] = "C2CA SA ADP 1.0";
    1916:	80 e1       	ldi	r24, 0x10	; 16
    1918:	e2 e0       	ldi	r30, 0x02	; 2
    191a:	f1 e0       	ldi	r31, 0x01	; 1
    191c:	de 01       	movw	r26, r28
    191e:	15 96       	adiw	r26, 0x05	; 5
    1920:	01 90       	ld	r0, Z+
    1922:	0d 92       	st	X+, r0
    1924:	8a 95       	dec	r24
    1926:	e1 f7       	brne	.-8      	; 0x1920 <main+0x20>
    1928:	1d 8a       	std	Y+21, r1	; 0x15
    192a:	1e 8a       	std	Y+22, r1	; 0x16
    192c:	1f 8a       	std	Y+23, r1	; 0x17
    192e:	18 8e       	std	Y+24, r1	; 0x18
	char *pos;
	char inCrC_string[5];
	int i;
	int var;
	
	cli();
    1930:	f8 94       	cli
	uart_init();
    1932:	0e 94 a4 01 	call	0x348	; 0x348 <uart_init>
	sei();
    1936:	78 94       	sei
/************************************************
SPI INITIALISATION
*************************************************/
static inline void SPIinit(void)
{
	SPI_DDR &= 0b11101111;							// PB4 = Input = MISO
    1938:	24 98       	cbi	0x04, 4	; 4
	SPI_DDR = (1<<PORTB3)|(1<<PORTB5|(1<<PORTB2));	// Set MOSI, SCK and SS as output
    193a:	8c e2       	ldi	r24, 0x2C	; 44
    193c:	84 b9       	out	0x04, r24	; 4
	
	
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0)|(1<<CPHA)|(1<<CPOL); // Enable SPI, Master, set clock rate fck/16
    193e:	8d e5       	ldi	r24, 0x5D	; 93
    1940:	8c bd       	out	0x2c, r24	; 44
	cli();
	uart_init();
	sei();
	SPIinit();

	ch0.pwm = 1;
    1942:	0f 2e       	mov	r0, r31
    1944:	f6 e1       	ldi	r31, 0x16	; 22
    1946:	af 2e       	mov	r10, r31
    1948:	f4 e0       	ldi	r31, 0x04	; 4
    194a:	bf 2e       	mov	r11, r31
    194c:	f0 2d       	mov	r31, r0
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	90 93 77 04 	sts	0x0477, r25
    1956:	80 93 76 04 	sts	0x0476, r24
	ch1.pwm = 1;
    195a:	0f 2e       	mov	r0, r31
    195c:	f9 e7       	ldi	r31, 0x79	; 121
    195e:	cf 2e       	mov	r12, r31
    1960:	f4 e0       	ldi	r31, 0x04	; 4
    1962:	df 2e       	mov	r13, r31
    1964:	f0 2d       	mov	r31, r0
    1966:	90 93 da 04 	sts	0x04DA, r25
    196a:	80 93 d9 04 	sts	0x04D9, r24
	ch2.pwm = 1;
    196e:	0f 2e       	mov	r0, r31
    1970:	f7 ea       	ldi	r31, 0xA7	; 167
    1972:	ef 2e       	mov	r14, r31
    1974:	f2 e0       	ldi	r31, 0x02	; 2
    1976:	ff 2e       	mov	r15, r31
    1978:	f0 2d       	mov	r31, r0
    197a:	90 93 08 03 	sts	0x0308, r25
    197e:	80 93 07 03 	sts	0x0307, r24
	ch3.pwm = 1;
    1982:	02 e4       	ldi	r16, 0x42	; 66
    1984:	11 e0       	ldi	r17, 0x01	; 1
    1986:	90 93 a3 01 	sts	0x01A3, r25
    198a:	80 93 a2 01 	sts	0x01A2, r24

	DDRD = 0b11111000;			// 1 = output 0 = input
    198e:	88 ef       	ldi	r24, 0xF8	; 248
    1990:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0b00001111;
    1992:	8f e0       	ldi	r24, 0x0F	; 15
    1994:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1<<PORTB1);		// Set stepper Dir to output
    1996:	21 9a       	sbi	0x04, 1	; 4
	
	PORTD |=(1<<PORTD7)|(1<<PORTD6)|(1<<PORTD5)|(1<<PORTD4);	// Set initially all CS high
    1998:	8b b1       	in	r24, 0x0b	; 11
    199a:	80 6f       	ori	r24, 0xF0	; 240
    199c:	8b b9       	out	0x0b, r24	; 11
	}
}

static inline void ReadParmEEPROM()
{
	ch0.TempSetPoint = eeprom_read_float((float*)eepromAdr_TempSetPoint0);
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <eeprom_read_dword>
    19a6:	d5 01       	movw	r26, r10
    19a8:	6d 93       	st	X+, r22
    19aa:	7d 93       	st	X+, r23
    19ac:	8d 93       	st	X+, r24
    19ae:	9c 93       	st	X, r25
    19b0:	13 97       	sbiw	r26, 0x03	; 3
	ch0.Pgain = eeprom_read_float((float*)eepromAdr_PgainCh0);
    19b2:	84 e0       	ldi	r24, 0x04	; 4
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <eeprom_read_dword>
    19ba:	f5 01       	movw	r30, r10
    19bc:	64 8f       	std	Z+28, r22	; 0x1c
    19be:	75 8f       	std	Z+29, r23	; 0x1d
    19c0:	86 8f       	std	Z+30, r24	; 0x1e
    19c2:	97 8f       	std	Z+31, r25	; 0x1f
	ch0.Igain = eeprom_read_float((float*)eepromAdr_IgainCh0);
    19c4:	88 e0       	ldi	r24, 0x08	; 8
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <eeprom_read_dword>
    19cc:	d5 01       	movw	r26, r10
    19ce:	90 96       	adiw	r26, 0x20	; 32
    19d0:	6d 93       	st	X+, r22
    19d2:	7d 93       	st	X+, r23
    19d4:	8d 93       	st	X+, r24
    19d6:	9c 93       	st	X, r25
    19d8:	93 97       	sbiw	r26, 0x23	; 35
	ch0.Dgain = eeprom_read_float((float*)eepromAdr_DgainCh0);
    19da:	8c e0       	ldi	r24, 0x0C	; 12
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <eeprom_read_dword>
    19e2:	f5 01       	movw	r30, r10
    19e4:	64 a3       	std	Z+36, r22	; 0x24
    19e6:	75 a3       	std	Z+37, r23	; 0x25
    19e8:	86 a3       	std	Z+38, r24	; 0x26
    19ea:	97 a3       	std	Z+39, r25	; 0x27
	
	ch1.TempSetPoint = eeprom_read_float((float*)eepromAdr_TempSetPoint1);
    19ec:	80 e1       	ldi	r24, 0x10	; 16
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <eeprom_read_dword>
    19f4:	d6 01       	movw	r26, r12
    19f6:	6d 93       	st	X+, r22
    19f8:	7d 93       	st	X+, r23
    19fa:	8d 93       	st	X+, r24
    19fc:	9c 93       	st	X, r25
    19fe:	13 97       	sbiw	r26, 0x03	; 3
	ch1.Pgain = eeprom_read_float((float*)eepromAdr_PgainCh1);
    1a00:	84 e1       	ldi	r24, 0x14	; 20
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <eeprom_read_dword>
    1a08:	f6 01       	movw	r30, r12
    1a0a:	64 8f       	std	Z+28, r22	; 0x1c
    1a0c:	75 8f       	std	Z+29, r23	; 0x1d
    1a0e:	86 8f       	std	Z+30, r24	; 0x1e
    1a10:	97 8f       	std	Z+31, r25	; 0x1f
	ch1.Igain = eeprom_read_float((float*)eepromAdr_IgainCh1);
    1a12:	88 e1       	ldi	r24, 0x18	; 24
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <eeprom_read_dword>
    1a1a:	d6 01       	movw	r26, r12
    1a1c:	90 96       	adiw	r26, 0x20	; 32
    1a1e:	6d 93       	st	X+, r22
    1a20:	7d 93       	st	X+, r23
    1a22:	8d 93       	st	X+, r24
    1a24:	9c 93       	st	X, r25
    1a26:	93 97       	sbiw	r26, 0x23	; 35
	ch1.Dgain = eeprom_read_float((float*)eepromAdr_DgainCh1);
    1a28:	8c e1       	ldi	r24, 0x1C	; 28
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <eeprom_read_dword>
    1a30:	f6 01       	movw	r30, r12
    1a32:	64 a3       	std	Z+36, r22	; 0x24
    1a34:	75 a3       	std	Z+37, r23	; 0x25
    1a36:	86 a3       	std	Z+38, r24	; 0x26
    1a38:	97 a3       	std	Z+39, r25	; 0x27
	
	ch2.TempSetPoint = eeprom_read_float((float*)eepromAdr_TempSetPoint2);
    1a3a:	80 e2       	ldi	r24, 0x20	; 32
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <eeprom_read_dword>
    1a42:	d7 01       	movw	r26, r14
    1a44:	6d 93       	st	X+, r22
    1a46:	7d 93       	st	X+, r23
    1a48:	8d 93       	st	X+, r24
    1a4a:	9c 93       	st	X, r25
    1a4c:	13 97       	sbiw	r26, 0x03	; 3
	ch2.Pgain = eeprom_read_float((float*)eepromAdr_PgainCh2);
    1a4e:	84 e2       	ldi	r24, 0x24	; 36
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <eeprom_read_dword>
    1a56:	f7 01       	movw	r30, r14
    1a58:	64 8f       	std	Z+28, r22	; 0x1c
    1a5a:	75 8f       	std	Z+29, r23	; 0x1d
    1a5c:	86 8f       	std	Z+30, r24	; 0x1e
    1a5e:	97 8f       	std	Z+31, r25	; 0x1f
	ch2.Igain = eeprom_read_float((float*)eepromAdr_IgainCh2);
    1a60:	88 e2       	ldi	r24, 0x28	; 40
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <eeprom_read_dword>
    1a68:	d7 01       	movw	r26, r14
    1a6a:	90 96       	adiw	r26, 0x20	; 32
    1a6c:	6d 93       	st	X+, r22
    1a6e:	7d 93       	st	X+, r23
    1a70:	8d 93       	st	X+, r24
    1a72:	9c 93       	st	X, r25
    1a74:	93 97       	sbiw	r26, 0x23	; 35
	ch2.Dgain = eeprom_read_float((float*)eepromAdr_DgainCh2);
    1a76:	8c e2       	ldi	r24, 0x2C	; 44
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <eeprom_read_dword>
    1a7e:	f7 01       	movw	r30, r14
    1a80:	64 a3       	std	Z+36, r22	; 0x24
    1a82:	75 a3       	std	Z+37, r23	; 0x25
    1a84:	86 a3       	std	Z+38, r24	; 0x26
    1a86:	97 a3       	std	Z+39, r25	; 0x27
	
	ch3.TempSetPoint = eeprom_read_float((float*)eepromAdr_TempSetPoint3);
    1a88:	80 e3       	ldi	r24, 0x30	; 48
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <eeprom_read_dword>
    1a90:	d8 01       	movw	r26, r16
    1a92:	6d 93       	st	X+, r22
    1a94:	7d 93       	st	X+, r23
    1a96:	8d 93       	st	X+, r24
    1a98:	9c 93       	st	X, r25
    1a9a:	13 97       	sbiw	r26, 0x03	; 3
	ch3.Pgain = eeprom_read_float((float*)eepromAdr_PgainCh3);
    1a9c:	84 e3       	ldi	r24, 0x34	; 52
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <eeprom_read_dword>
    1aa4:	f8 01       	movw	r30, r16
    1aa6:	64 8f       	std	Z+28, r22	; 0x1c
    1aa8:	75 8f       	std	Z+29, r23	; 0x1d
    1aaa:	86 8f       	std	Z+30, r24	; 0x1e
    1aac:	97 8f       	std	Z+31, r25	; 0x1f
	ch3.Igain = eeprom_read_float((float*)eepromAdr_IgainCh3);
    1aae:	88 e3       	ldi	r24, 0x38	; 56
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <eeprom_read_dword>
    1ab6:	d8 01       	movw	r26, r16
    1ab8:	90 96       	adiw	r26, 0x20	; 32
    1aba:	6d 93       	st	X+, r22
    1abc:	7d 93       	st	X+, r23
    1abe:	8d 93       	st	X+, r24
    1ac0:	9c 93       	st	X, r25
    1ac2:	93 97       	sbiw	r26, 0x23	; 35
	ch3.Dgain = eeprom_read_float((float*)eepromAdr_DgainCh3);			
    1ac4:	8c e3       	ldi	r24, 0x3C	; 60
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	0e 94 69 25 	call	0x4ad2	; 0x4ad2 <eeprom_read_dword>
    1acc:	f8 01       	movw	r30, r16
    1ace:	64 a3       	std	Z+36, r22	; 0x24
    1ad0:	75 a3       	std	Z+37, r23	; 0x25
    1ad2:	86 a3       	std	Z+38, r24	; 0x26
    1ad4:	97 a3       	std	Z+39, r25	; 0x27
	printStatus(data);
}

static inline void MAX31865initAuto(uint8_t ch)
{
	MaxRTDinit(0xC3, ch);
    1ad6:	61 e0       	ldi	r22, 0x01	; 1
    1ad8:	83 ec       	ldi	r24, 0xC3	; 195
    1ada:	0e 94 0c 02 	call	0x418	; 0x418 <MaxRTDinit>
    1ade:	62 e0       	ldi	r22, 0x02	; 2
    1ae0:	83 ec       	ldi	r24, 0xC3	; 195
    1ae2:	0e 94 0c 02 	call	0x418	; 0x418 <MaxRTDinit>
    1ae6:	63 e0       	ldi	r22, 0x03	; 3
    1ae8:	83 ec       	ldi	r24, 0xC3	; 195
    1aea:	0e 94 0c 02 	call	0x418	; 0x418 <MaxRTDinit>
    1aee:	64 e0       	ldi	r22, 0x04	; 4
    1af0:	83 ec       	ldi	r24, 0xC3	; 195
    1af2:	0e 94 0c 02 	call	0x418	; 0x418 <MaxRTDinit>
}

static inline void TimerInit(void)
{
	// Timer0 PWM output
	TIMSK0 = _BV(OCIE0A);				// Enable Interrupt TimerCounter0 Compare Match A (TIMER0_COMPA_vect)
    1af6:	82 e0       	ldi	r24, 0x02	; 2
    1af8:	80 93 6e 00 	sts	0x006E, r24
	TCCR0A = _BV(WGM01);				// Mode = CTC (Clear Timer on Compare)
    1afc:	84 bd       	out	0x24, r24	; 36
	TCCR0B = _BV(CS02) | _BV(CS00);		// 16MHz/1024, 0.000064 seconds per tick
    1afe:	95 e0       	ldi	r25, 0x05	; 5
    1b00:	95 bd       	out	0x25, r25	; 37
	OCR0A = 16;							// TIMER0_COMPA_vect will be triggered each 0.000064 x 16 = 0.001024 s (976.5 Hz)
    1b02:	90 e1       	ldi	r25, 0x10	; 16
    1b04:	97 bd       	out	0x27, r25	; 39

	// Timer2 PID controller	
	TIMSK2 = _BV(OCIE2A);				// Enable Interrupt TimerCounter2 Compare Match A (TIMER2_COMPA_vect)
    1b06:	80 93 70 00 	sts	0x0070, r24
	TCCR2A = _BV(WGM21);				// Mode = CTC (Clear Timer on Compare)
    1b0a:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B = _BV(CS22) | _BV(CS21) | _BV(CS20);		// 16MHz/1024, 0.000064 seconds per tick
    1b0e:	87 e0       	ldi	r24, 0x07	; 7
    1b10:	80 93 b1 00 	sts	0x00B1, r24
	OCR2A = 255;						// TIMER2_COMPA_vect will be triggered each 0.000064 x 255 = 0.01632 s (61.3 Hz)
    1b14:	8f ef       	ldi	r24, 0xFF	; 255
    1b16:	80 93 b3 00 	sts	0x00B3, r24
	
	sei();
    1b1a:	78 94       	sei
	*	PC:		#12A?VR104
	*	ATMega:	!12A70.0006DCA
	***********************************************************/
	while(1)
	{
		memset(rx_string, 0x00, rx_size);			// Purge rx_string
    1b1c:	0f 2e       	mov	r0, r31
    1b1e:	fc ed       	ldi	r31, 0xDC	; 220
    1b20:	af 2e       	mov	r10, r31
    1b22:	f4 e0       	ldi	r31, 0x04	; 4
    1b24:	bf 2e       	mov	r11, r31
    1b26:	f0 2d       	mov	r31, r0
 * \returns next data byte in buffer
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
    1b28:	0f 2e       	mov	r0, r31
    1b2a:	f1 e1       	ldi	r31, 0x11	; 17
    1b2c:	4f 2e       	mov	r4, r31
    1b2e:	f4 e0       	ldi	r31, 0x04	; 4
    1b30:	5f 2e       	mov	r5, r31
    1b32:	f0 2d       	mov	r31, r0
    1b34:	0f 2e       	mov	r0, r31
    1b36:	fa ef       	ldi	r31, 0xFA	; 250
    1b38:	2f 2e       	mov	r2, r31
    1b3a:	f4 e0       	ldi	r31, 0x04	; 4
    1b3c:	3f 2e       	mov	r3, r31
    1b3e:	f0 2d       	mov	r31, r0
		ftoa(ch3.Igain, tx_string);
		printStatus(tx_string);
		break;
		
		case 407:	// Send Dgain ch3
		ftoa(ch3.Dgain, tx_string);
    1b40:	9e 01       	movw	r18, r28
    1b42:	2a 5b       	subi	r18, 0xBA	; 186
    1b44:	3f 4f       	sbci	r19, 0xFF	; 255
    1b46:	6c 96       	adiw	r28, 0x1c	; 28
    1b48:	3f af       	std	Y+63, r19	; 0x3f
    1b4a:	2e af       	std	Y+62, r18	; 0x3e
    1b4c:	6c 97       	sbiw	r28, 0x1c	; 28
	*	PC:		#12A?VR104
	*	ATMega:	!12A70.0006DCA
	***********************************************************/
	while(1)
	{
		memset(rx_string, 0x00, rx_size);			// Purge rx_string
    1b4e:	6d 96       	adiw	r28, 0x1d	; 29
    1b50:	af ae       	std	Y+63, r10	; 0x3f
    1b52:	6d 97       	sbiw	r28, 0x1d	; 29
    1b54:	6e 96       	adiw	r28, 0x1e	; 30
    1b56:	bf ae       	std	Y+63, r11	; 0x3f
    1b58:	6e 97       	sbiw	r28, 0x1e	; 30
    1b5a:	6f 96       	adiw	r28, 0x1f	; 31
    1b5c:	af ae       	std	Y+63, r10	; 0x3f
    1b5e:	6f 97       	sbiw	r28, 0x1f	; 31
    1b60:	a0 96       	adiw	r28, 0x20	; 32
    1b62:	bf ae       	std	Y+63, r11	; 0x3f
    1b64:	a0 97       	sbiw	r28, 0x20	; 32
		ftoa(ch3.Igain, tx_string);
		printStatus(tx_string);
		break;
		
		case 407:	// Send Dgain ch3
		ftoa(ch3.Dgain, tx_string);
    1b66:	6b 96       	adiw	r28, 0x1b	; 27
    1b68:	cf ac       	ldd	r12, Y+63	; 0x3f
    1b6a:	6b 97       	sbiw	r28, 0x1b	; 27
    1b6c:	6c 96       	adiw	r28, 0x1c	; 28
    1b6e:	df ac       	ldd	r13, Y+63	; 0x3f
    1b70:	6c 97       	sbiw	r28, 0x1c	; 28
    1b72:	6c 2c       	mov	r6, r12
    1b74:	7d 2c       	mov	r7, r13
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    1b76:	0f 2e       	mov	r0, r31
    1b78:	fa ef       	ldi	r31, 0xFA	; 250
    1b7a:	8f 2e       	mov	r8, r31
    1b7c:	f4 e0       	ldi	r31, 0x04	; 4
    1b7e:	9f 2e       	mov	r9, r31
    1b80:	f0 2d       	mov	r31, r0
	*	PC:		#12A?VR104
	*	ATMega:	!12A70.0006DCA
	***********************************************************/
	while(1)
	{
		memset(rx_string, 0x00, rx_size);			// Purge rx_string
    1b82:	0e e1       	ldi	r16, 0x1E	; 30
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    1b84:	10 e0       	ldi	r17, 0x00	; 0
    1b86:	d5 01       	movw	r26, r10
    1b88:	e0 2f       	mov	r30, r16
    1b8a:	1d 92       	st	X+, r1
    1b8c:	ea 95       	dec	r30
    1b8e:	e9 f7       	brne	.-6      	; 0x1b8a <main+0x28a>
 * \returns next data byte in buffer
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
    1b90:	d2 01       	movw	r26, r4
    1b92:	13 96       	adiw	r26, 0x03	; 3
    1b94:	4d 91       	ld	r20, X+
    1b96:	5c 91       	ld	r21, X
    1b98:	14 97       	sbiw	r26, 0x04	; 4
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    1b9a:	12 96       	adiw	r26, 0x02	; 2
    1b9c:	2c 91       	ld	r18, X
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	21 50       	subi	r18, 0x01	; 1
    1ba2:	31 09       	sbc	r19, r1
    1ba4:	6f 96       	adiw	r28, 0x1f	; 31
    1ba6:	ef ad       	ldd	r30, Y+63	; 0x3f
    1ba8:	6f 97       	sbiw	r28, 0x1f	; 31
    1baa:	a0 96       	adiw	r28, 0x20	; 32
    1bac:	ff ad       	ldd	r31, Y+63	; 0x3f
    1bae:	a0 97       	sbiw	r28, 0x20	; 32
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    1bb0:	d2 01       	movw	r26, r4
    1bb2:	11 96       	adiw	r26, 0x01	; 1
    1bb4:	8c 91       	ld	r24, X
    1bb6:	11 97       	sbiw	r26, 0x01	; 1
    1bb8:	9c 91       	ld	r25, X

		for(i = 0; i < rx_size; i++)
		{
			while(!uart_char_waiting());
    1bba:	98 17       	cp	r25, r24
    1bbc:	c9 f3       	breq	.-14     	; 0x1bb0 <main+0x2b0>
 * \returns next data byte in buffer
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
    1bbe:	11 96       	adiw	r26, 0x01	; 1
    1bc0:	8c 91       	ld	r24, X
    1bc2:	da 01       	movw	r26, r20
    1bc4:	a8 0f       	add	r26, r24
    1bc6:	b1 1d       	adc	r27, r1
    1bc8:	9c 91       	ld	r25, X
 *
 * \returns the next read offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_read(const struct ring_buffer *ring)
{
	return get_next(ring->read_offset, ring->size);
    1bca:	d2 01       	movw	r26, r4
    1bcc:	11 96       	adiw	r26, 0x01	; 1
    1bce:	8c 91       	ld	r24, X
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    1bd0:	68 2f       	mov	r22, r24
    1bd2:	70 e0       	ldi	r23, 0x00	; 0
    1bd4:	62 17       	cp	r22, r18
    1bd6:	73 07       	cpc	r23, r19
    1bd8:	11 f0       	breq	.+4      	; 0x1bde <main+0x2de>
    1bda:	8f 5f       	subi	r24, 0xFF	; 255
    1bdc:	01 c0       	rjmp	.+2      	; 0x1be0 <main+0x2e0>
    1bde:	81 2f       	mov	r24, r17
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
	ring->read_offset = ring_buffer_get_next_read(ring);
    1be0:	d2 01       	movw	r26, r4
    1be2:	11 96       	adiw	r26, 0x01	; 1
    1be4:	8c 93       	st	X, r24
			rx_string[i] = uart_getchar();			// Collect the message
    1be6:	91 93       	st	Z+, r25
			if(rx_string[i] == 0x0D)				// Terminate acquisition if <CR> received
    1be8:	9d 30       	cpi	r25, 0x0D	; 13
    1bea:	19 f0       	breq	.+6      	; 0x1bf2 <main+0x2f2>
	***********************************************************/
	while(1)
	{
		memset(rx_string, 0x00, rx_size);			// Purge rx_string

		for(i = 0; i < rx_size; i++)
    1bec:	e2 15       	cp	r30, r2
    1bee:	f3 05       	cpc	r31, r3
    1bf0:	f9 f6       	brne	.-66     	; 0x1bb0 <main+0x2b0>
			{
				break;
			}	
		}

		if(rx_string[0] == '#')
    1bf2:	f5 01       	movw	r30, r10
    1bf4:	80 81       	ld	r24, Z
    1bf6:	83 32       	cpi	r24, 0x23	; 35
    1bf8:	31 f6       	brne	.-116    	; 0x1b86 <main+0x286>
		{
			pos = NULL;
			pos = strchr(rx_string, '?');
    1bfa:	6f e3       	ldi	r22, 0x3F	; 63
    1bfc:	70 e0       	ldi	r23, 0x00	; 0
    1bfe:	6d 96       	adiw	r28, 0x1d	; 29
    1c00:	8f ad       	ldd	r24, Y+63	; 0x3f
    1c02:	6d 97       	sbiw	r28, 0x1d	; 29
    1c04:	6e 96       	adiw	r28, 0x1e	; 30
    1c06:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c08:	6e 97       	sbiw	r28, 0x1e	; 30
    1c0a:	0e 94 83 23 	call	0x4706	; 0x4706 <strchr>
    1c0e:	8c 01       	movw	r16, r24
			if(pos != NULL)							
    1c10:	00 97       	sbiw	r24, 0x00	; 0
    1c12:	11 f4       	brne	.+4      	; 0x1c18 <main+0x318>
    1c14:	0c 94 21 17 	jmp	0x2e42	; 0x2e42 <main+0x1542>
			{
				requestCmd[0] = *(pos + 1);			// Parse request command	
    1c18:	e5 ea       	ldi	r30, 0xA5	; 165
    1c1a:	f1 e0       	ldi	r31, 0x01	; 1
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	11 96       	adiw	r26, 0x01	; 1
    1c20:	8c 91       	ld	r24, X
    1c22:	11 97       	sbiw	r26, 0x01	; 1
    1c24:	80 83       	st	Z, r24
				requestCmd[1] = *(pos + 2);
    1c26:	12 96       	adiw	r26, 0x02	; 2
    1c28:	8c 91       	ld	r24, X
    1c2a:	81 83       	std	Z+1, r24	; 0x01

				if(strcmp(requestCmd, "IF") == 0)
    1c2c:	66 e1       	ldi	r22, 0x16	; 22
    1c2e:	71 e0       	ldi	r23, 0x01	; 1
    1c30:	cf 01       	movw	r24, r30
    1c32:	0e 94 8e 23 	call	0x471c	; 0x471c <strcmp>
    1c36:	89 2b       	or	r24, r25
    1c38:	09 f0       	breq	.+2      	; 0x1c3c <main+0x33c>
    1c3a:	3f c0       	rjmp	.+126    	; 0x1cba <main+0x3ba>
				{
					crc[0] = *(pos + 3);			// Parse incoming crc
    1c3c:	ec e0       	ldi	r30, 0x0C	; 12
    1c3e:	f4 e0       	ldi	r31, 0x04	; 4
    1c40:	d8 01       	movw	r26, r16
    1c42:	13 96       	adiw	r26, 0x03	; 3
    1c44:	8c 91       	ld	r24, X
    1c46:	13 97       	sbiw	r26, 0x03	; 3
    1c48:	80 83       	st	Z, r24
					crc[1] = *(pos + 4);
    1c4a:	14 96       	adiw	r26, 0x04	; 4
    1c4c:	8c 91       	ld	r24, X
    1c4e:	14 97       	sbiw	r26, 0x04	; 4
    1c50:	81 83       	std	Z+1, r24	; 0x01
					crc[2] = *(pos + 5);
    1c52:	15 96       	adiw	r26, 0x05	; 5
    1c54:	8c 91       	ld	r24, X
    1c56:	15 97       	sbiw	r26, 0x05	; 5
    1c58:	82 83       	std	Z+2, r24	; 0x02
					crc[3] = *(pos + 6);
    1c5a:	16 96       	adiw	r26, 0x06	; 6
    1c5c:	8c 91       	ld	r24, X
    1c5e:	83 83       	std	Z+3, r24	; 0x03

					itoa(GenCrc16(rx_string, (int)strnlen(rx_string, rx_size)-5), inCrC_string, 16);
    1c60:	6e e1       	ldi	r22, 0x1E	; 30
    1c62:	70 e0       	ldi	r23, 0x00	; 0
    1c64:	6d 96       	adiw	r28, 0x1d	; 29
    1c66:	8f ad       	ldd	r24, Y+63	; 0x3f
    1c68:	6d 97       	sbiw	r28, 0x1d	; 29
    1c6a:	6e 96       	adiw	r28, 0x1e	; 30
    1c6c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c6e:	6e 97       	sbiw	r28, 0x1e	; 30
    1c70:	0e 94 97 23 	call	0x472e	; 0x472e <strnlen>
    1c74:	bc 01       	movw	r22, r24
    1c76:	65 50       	subi	r22, 0x05	; 5
    1c78:	71 09       	sbc	r23, r1
    1c7a:	6d 96       	adiw	r28, 0x1d	; 29
    1c7c:	8f ad       	ldd	r24, Y+63	; 0x3f
    1c7e:	6d 97       	sbiw	r28, 0x1d	; 29
    1c80:	6e 96       	adiw	r28, 0x1e	; 30
    1c82:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c84:	6e 97       	sbiw	r28, 0x1e	; 30
    1c86:	0e 94 2d 02 	call	0x45a	; 0x45a <GenCrc16>
    1c8a:	40 e1       	ldi	r20, 0x10	; 16
    1c8c:	be 01       	movw	r22, r28
    1c8e:	67 5e       	subi	r22, 0xE7	; 231
    1c90:	7f 4f       	sbci	r23, 0xFF	; 255
    1c92:	0e 94 ac 23 	call	0x4758	; 0x4758 <__itoa_ncheck>
					if(CrcCompare(crc, inCrC_string) == true)
    1c96:	be 01       	movw	r22, r28
    1c98:	67 5e       	subi	r22, 0xE7	; 231
    1c9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c9c:	8c e0       	ldi	r24, 0x0C	; 12
    1c9e:	94 e0       	ldi	r25, 0x04	; 4
    1ca0:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <CrcCompare>
    1ca4:	88 23       	and	r24, r24
    1ca6:	29 f0       	breq	.+10     	; 0x1cb2 <main+0x3b2>
					{
						printStatus(s_string);	
    1ca8:	ce 01       	movw	r24, r28
    1caa:	05 96       	adiw	r24, 0x05	; 5
    1cac:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    1cb0:	04 c0       	rjmp	.+8      	; 0x1cba <main+0x3ba>
					}
					else
					{
						printStatus("CRC error");
    1cb2:	89 e1       	ldi	r24, 0x19	; 25
    1cb4:	91 e0       	ldi	r25, 0x01	; 1
    1cb6:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
						//printStatus(rx_string);
					}
				}
					
				if(strcmp(requestCmd, "VR") == 0)
    1cba:	63 e2       	ldi	r22, 0x23	; 35
    1cbc:	71 e0       	ldi	r23, 0x01	; 1
    1cbe:	85 ea       	ldi	r24, 0xA5	; 165
    1cc0:	91 e0       	ldi	r25, 0x01	; 1
    1cc2:	0e 94 8e 23 	call	0x471c	; 0x471c <strcmp>
    1cc6:	89 2b       	or	r24, r25
    1cc8:	11 f0       	breq	.+4      	; 0x1cce <main+0x3ce>
    1cca:	0c 94 21 17 	jmp	0x2e42	; 0x2e42 <main+0x1542>
				{
					requestID[0] = *(pos + 3);		// Parse request ID
    1cce:	f8 01       	movw	r30, r16
    1cd0:	83 81       	ldd	r24, Z+3	; 0x03
    1cd2:	89 83       	std	Y+1, r24	; 0x01
					requestID[1] = *(pos + 4);
    1cd4:	84 81       	ldd	r24, Z+4	; 0x04
    1cd6:	8a 83       	std	Y+2, r24	; 0x02
					requestID[2] = *(pos + 5);
    1cd8:	85 81       	ldd	r24, Z+5	; 0x05
    1cda:	8b 83       	std	Y+3, r24	; 0x03
					crc[0] = *(pos + 6);			// Parse incoming crc
    1cdc:	ec e0       	ldi	r30, 0x0C	; 12
    1cde:	f4 e0       	ldi	r31, 0x04	; 4
    1ce0:	d8 01       	movw	r26, r16
    1ce2:	16 96       	adiw	r26, 0x06	; 6
    1ce4:	8c 91       	ld	r24, X
    1ce6:	16 97       	sbiw	r26, 0x06	; 6
    1ce8:	80 83       	st	Z, r24
					crc[1] = *(pos + 7);
    1cea:	17 96       	adiw	r26, 0x07	; 7
    1cec:	8c 91       	ld	r24, X
    1cee:	17 97       	sbiw	r26, 0x07	; 7
    1cf0:	81 83       	std	Z+1, r24	; 0x01
					crc[2] = *(pos + 8);
    1cf2:	18 96       	adiw	r26, 0x08	; 8
    1cf4:	8c 91       	ld	r24, X
    1cf6:	18 97       	sbiw	r26, 0x08	; 8
    1cf8:	82 83       	std	Z+2, r24	; 0x02
					crc[3] = *(pos + 9);
    1cfa:	19 96       	adiw	r26, 0x09	; 9
    1cfc:	8c 91       	ld	r24, X
    1cfe:	83 83       	std	Z+3, r24	; 0x03
					
					itoa(GenCrc16(rx_string, (int)strnlen(rx_string, rx_size)-5), inCrC_string, 16);
    1d00:	6e e1       	ldi	r22, 0x1E	; 30
    1d02:	70 e0       	ldi	r23, 0x00	; 0
    1d04:	6d 96       	adiw	r28, 0x1d	; 29
    1d06:	8f ad       	ldd	r24, Y+63	; 0x3f
    1d08:	6d 97       	sbiw	r28, 0x1d	; 29
    1d0a:	6e 96       	adiw	r28, 0x1e	; 30
    1d0c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d0e:	6e 97       	sbiw	r28, 0x1e	; 30
    1d10:	0e 94 97 23 	call	0x472e	; 0x472e <strnlen>
    1d14:	bc 01       	movw	r22, r24
    1d16:	65 50       	subi	r22, 0x05	; 5
    1d18:	71 09       	sbc	r23, r1
    1d1a:	6d 96       	adiw	r28, 0x1d	; 29
    1d1c:	8f ad       	ldd	r24, Y+63	; 0x3f
    1d1e:	6d 97       	sbiw	r28, 0x1d	; 29
    1d20:	6e 96       	adiw	r28, 0x1e	; 30
    1d22:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d24:	6e 97       	sbiw	r28, 0x1e	; 30
    1d26:	0e 94 2d 02 	call	0x45a	; 0x45a <GenCrc16>
    1d2a:	40 e1       	ldi	r20, 0x10	; 16
    1d2c:	be 01       	movw	r22, r28
    1d2e:	67 5e       	subi	r22, 0xE7	; 231
    1d30:	7f 4f       	sbci	r23, 0xFF	; 255
    1d32:	0e 94 ac 23 	call	0x4758	; 0x4758 <__itoa_ncheck>
					if(CrcCompare(crc, inCrC_string) == true)
    1d36:	be 01       	movw	r22, r28
    1d38:	67 5e       	subi	r22, 0xE7	; 231
    1d3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d3c:	8c e0       	ldi	r24, 0x0C	; 12
    1d3e:	94 e0       	ldi	r25, 0x04	; 4
    1d40:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <CrcCompare>
    1d44:	88 23       	and	r24, r24
    1d46:	11 f4       	brne	.+4      	; 0x1d4c <main+0x44c>
    1d48:	0c 94 1d 17 	jmp	0x2e3a	; 0x2e3a <main+0x153a>
					{					
						var = atol(requestID);
    1d4c:	ce 01       	movw	r24, r28
    1d4e:	01 96       	adiw	r24, 0x01	; 1
    1d50:	0e 94 52 23 	call	0x46a4	; 0x46a4 <atol>

static inline void ReadParameter(int id)
{
	char tx_string[20];

	switch(id)
    1d54:	cb 01       	movw	r24, r22
    1d56:	77 0f       	add	r23, r23
    1d58:	aa 0b       	sbc	r26, r26
    1d5a:	bb 0b       	sbc	r27, r27
    1d5c:	fc 01       	movw	r30, r24
    1d5e:	e4 56       	subi	r30, 0x64	; 100
    1d60:	f1 09       	sbc	r31, r1
    1d62:	e4 33       	cpi	r30, 0x34	; 52
    1d64:	b1 e0       	ldi	r27, 0x01	; 1
    1d66:	fb 07       	cpc	r31, r27
    1d68:	10 f0       	brcs	.+4      	; 0x1d6e <main+0x46e>
    1d6a:	0c 94 18 17 	jmp	0x2e30	; 0x2e30 <main+0x1530>
    1d6e:	ec 5c       	subi	r30, 0xCC	; 204
    1d70:	ff 4f       	sbci	r31, 0xFF	; 255
    1d72:	0c 94 49 23 	jmp	0x4692	; 0x4692 <__tablejump2__>
	{
		// *** Channel 0 ***
		case 100:	// Send sensor 1 temperature		
		ftoa(ch0.TempSensor, tx_string);
    1d76:	60 91 1a 04 	lds	r22, 0x041A
    1d7a:	70 91 1b 04 	lds	r23, 0x041B
    1d7e:	80 91 1c 04 	lds	r24, 0x041C
    1d82:	90 91 1d 04 	lds	r25, 0x041D
    1d86:	46 2d       	mov	r20, r6
    1d88:	57 2d       	mov	r21, r7
    1d8a:	33 dd       	rcall	.-1434   	; 0x17f2 <ftoa>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    1d8c:	81 e2       	ldi	r24, 0x21	; 33
    1d8e:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    1d90:	f5 01       	movw	r30, r10
    1d92:	81 81       	ldd	r24, Z+1	; 0x01
    1d94:	8f 8f       	std	Y+31, r24	; 0x1f
    1d96:	82 81       	ldd	r24, Z+2	; 0x02
    1d98:	88 a3       	std	Y+32, r24	; 0x20
    1d9a:	83 81       	ldd	r24, Z+3	; 0x03
    1d9c:	89 a3       	std	Y+33, r24	; 0x21
    1d9e:	e6 2d       	mov	r30, r6
    1da0:	f7 2d       	mov	r31, r7
    1da2:	de 01       	movw	r26, r28
    1da4:	92 96       	adiw	r26, 0x22	; 34
    1da6:	00 e0       	ldi	r16, 0x00	; 0
    1da8:	10 e0       	ldi	r17, 0x00	; 0
    1daa:	af 01       	movw	r20, r30
    1dac:	06 c0       	rjmp	.+12     	; 0x1dba <main+0x4ba>
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    1dae:	fa 01       	movw	r30, r20
    1db0:	81 91       	ld	r24, Z+
    1db2:	af 01       	movw	r20, r30
    1db4:	8d 93       	st	X+, r24
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    1db6:	0f 5f       	subi	r16, 0xFF	; 255
    1db8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dba:	6c 96       	adiw	r28, 0x1c	; 28
    1dbc:	ee ad       	ldd	r30, Y+62	; 0x3e
    1dbe:	ff ad       	ldd	r31, Y+63	; 0x3f
    1dc0:	6c 97       	sbiw	r28, 0x1c	; 28
    1dc2:	01 90       	ld	r0, Z+
    1dc4:	00 20       	and	r0, r0
    1dc6:	e9 f7       	brne	.-6      	; 0x1dc2 <main+0x4c2>
    1dc8:	cf 01       	movw	r24, r30
    1dca:	6c 96       	adiw	r28, 0x1c	; 28
    1dcc:	2e ad       	ldd	r18, Y+62	; 0x3e
    1dce:	3f ad       	ldd	r19, Y+63	; 0x3f
    1dd0:	6c 97       	sbiw	r28, 0x1c	; 28
    1dd2:	82 1b       	sub	r24, r18
    1dd4:	93 0b       	sbc	r25, r19
    1dd6:	02 96       	adiw	r24, 0x02	; 2
    1dd8:	08 17       	cp	r16, r24
    1dda:	19 07       	cpc	r17, r25
    1ddc:	40 f3       	brcs	.-48     	; 0x1dae <main+0x4ae>
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    1dde:	78 01       	movw	r14, r16
    1de0:	3f ef       	ldi	r19, 0xFF	; 255
    1de2:	e3 1a       	sub	r14, r19
    1de4:	f3 0a       	sbc	r15, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    1de6:	1e 14       	cp	r1, r14
    1de8:	1f 04       	cpc	r1, r15
    1dea:	14 f0       	brlt	.+4      	; 0x1df0 <main+0x4f0>
    1dec:	0c 94 ff 20 	jmp	0x41fe	; 0x41fe <main+0x28fe>
    1df0:	de 01       	movw	r26, r28
    1df2:	5e 96       	adiw	r26, 0x1e	; 30
    1df4:	67 01       	movw	r12, r14
    1df6:	ca 0e       	add	r12, r26
    1df8:	db 1e       	adc	r13, r27
    1dfa:	e0 e0       	ldi	r30, 0x00	; 0
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    1dfe:	98 e0       	ldi	r25, 0x08	; 8
    1e00:	80 e0       	ldi	r24, 0x00	; 0
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    1e02:	4d 91       	ld	r20, X+
		tmp = (int)((CRC >> 8) ^ int_c);
    1e04:	2f 2f       	mov	r18, r31
    1e06:	33 27       	eor	r19, r19
    1e08:	27 fd       	sbrc	r18, 7
    1e0a:	3a 95       	dec	r19
    1e0c:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    1e0e:	32 2f       	mov	r19, r18
    1e10:	22 27       	eor	r18, r18
    1e12:	49 2f       	mov	r20, r25
    1e14:	58 2f       	mov	r21, r24
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    1e16:	33 23       	and	r19, r19
    1e18:	3c f4       	brge	.+14     	; 0x1e28 <main+0x528>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    1e1a:	22 0f       	add	r18, r18
    1e1c:	33 1f       	adc	r19, r19
    1e1e:	61 e2       	ldi	r22, 0x21	; 33
    1e20:	26 27       	eor	r18, r22
    1e22:	60 e1       	ldi	r22, 0x10	; 16
    1e24:	36 27       	eor	r19, r22
    1e26:	02 c0       	rjmp	.+4      	; 0x1e2c <main+0x52c>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    1e28:	22 0f       	add	r18, r18
    1e2a:	33 1f       	adc	r19, r19
    1e2c:	41 50       	subi	r20, 0x01	; 1
    1e2e:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    1e30:	91 f7       	brne	.-28     	; 0x1e16 <main+0x516>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    1e32:	fe 2f       	mov	r31, r30
    1e34:	ee 27       	eor	r30, r30
    1e36:	e2 27       	eor	r30, r18
    1e38:	f3 27       	eor	r31, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    1e3a:	ac 15       	cp	r26, r12
    1e3c:	bd 05       	cpc	r27, r13
    1e3e:	09 f7       	brne	.-62     	; 0x1e02 <main+0x502>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    1e40:	6f 01       	movw	r12, r30
    1e42:	40 e1       	ldi	r20, 0x10	; 16
    1e44:	6c e0       	ldi	r22, 0x0C	; 12
    1e46:	74 e0       	ldi	r23, 0x04	; 4
    1e48:	cf 01       	movw	r24, r30
    1e4a:	0e 94 ac 23 	call	0x4758	; 0x4758 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    1e4e:	8c e0       	ldi	r24, 0x0C	; 12
    1e50:	94 e0       	ldi	r25, 0x04	; 4
    1e52:	0e 94 a2 23 	call	0x4744	; 0x4744 <strupr>
	if(crcXmodem < 0x10)
    1e56:	80 e1       	ldi	r24, 0x10	; 16
    1e58:	c8 16       	cp	r12, r24
    1e5a:	d1 04       	cpc	r13, r1
    1e5c:	98 f4       	brcc	.+38     	; 0x1e84 <main+0x584>
	{
		tx_string[cnt+4] = crc[0];
    1e5e:	80 91 0c 04 	lds	r24, 0x040C
    1e62:	fe 01       	movw	r30, r28
    1e64:	e0 0f       	add	r30, r16
    1e66:	f1 1f       	adc	r31, r17
    1e68:	82 a3       	std	Z+34, r24	; 0x22
		tx_string[cnt+3] = '0';
    1e6a:	80 e3       	ldi	r24, 0x30	; 48
    1e6c:	fe 01       	movw	r30, r28
    1e6e:	e0 0f       	add	r30, r16
    1e70:	f1 1f       	adc	r31, r17
    1e72:	81 a3       	std	Z+33, r24	; 0x21
		tx_string[cnt+2] = '0';
    1e74:	fe 01       	movw	r30, r28
    1e76:	e0 0f       	add	r30, r16
    1e78:	f1 1f       	adc	r31, r17
    1e7a:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';
    1e7c:	fe 01       	movw	r30, r28
    1e7e:	ee 0d       	add	r30, r14
    1e80:	ff 1d       	adc	r31, r15
    1e82:	86 8f       	std	Z+30, r24	; 0x1e
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    1e84:	c6 01       	movw	r24, r12
    1e86:	40 97       	sbiw	r24, 0x10	; 16
    1e88:	80 3f       	cpi	r24, 0xF0	; 240
    1e8a:	91 05       	cpc	r25, r1
    1e8c:	b8 f4       	brcc	.+46     	; 0x1ebc <main+0x5bc>
	{
		tx_string[cnt+4] = crc[1];
    1e8e:	ac e0       	ldi	r26, 0x0C	; 12
    1e90:	b4 e0       	ldi	r27, 0x04	; 4
    1e92:	11 96       	adiw	r26, 0x01	; 1
    1e94:	8c 91       	ld	r24, X
    1e96:	11 97       	sbiw	r26, 0x01	; 1
    1e98:	fe 01       	movw	r30, r28
    1e9a:	e0 0f       	add	r30, r16
    1e9c:	f1 1f       	adc	r31, r17
    1e9e:	82 a3       	std	Z+34, r24	; 0x22
		tx_string[cnt+3] = crc[0];
    1ea0:	8c 91       	ld	r24, X
    1ea2:	fe 01       	movw	r30, r28
    1ea4:	e0 0f       	add	r30, r16
    1ea6:	f1 1f       	adc	r31, r17
    1ea8:	81 a3       	std	Z+33, r24	; 0x21
		tx_string[cnt+2] = '0';
    1eaa:	80 e3       	ldi	r24, 0x30	; 48
    1eac:	fe 01       	movw	r30, r28
    1eae:	e0 0f       	add	r30, r16
    1eb0:	f1 1f       	adc	r31, r17
    1eb2:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';		
    1eb4:	fe 01       	movw	r30, r28
    1eb6:	ee 0d       	add	r30, r14
    1eb8:	ff 1d       	adc	r31, r15
    1eba:	86 8f       	std	Z+30, r24	; 0x1e
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    1ebc:	c6 01       	movw	r24, r12
    1ebe:	9a 95       	dec	r25
    1ec0:	81 15       	cp	r24, r1
    1ec2:	9f 40       	sbci	r25, 0x0F	; 15
    1ec4:	b8 f4       	brcc	.+46     	; 0x1ef4 <main+0x5f4>
	{
		tx_string[cnt+4] = crc[2];
    1ec6:	ec e0       	ldi	r30, 0x0C	; 12
    1ec8:	f4 e0       	ldi	r31, 0x04	; 4
    1eca:	82 81       	ldd	r24, Z+2	; 0x02
    1ecc:	de 01       	movw	r26, r28
    1ece:	a0 0f       	add	r26, r16
    1ed0:	b1 1f       	adc	r27, r17
    1ed2:	92 96       	adiw	r26, 0x22	; 34
    1ed4:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[1];
    1ed6:	81 81       	ldd	r24, Z+1	; 0x01
    1ed8:	de 01       	movw	r26, r28
    1eda:	a0 0f       	add	r26, r16
    1edc:	b1 1f       	adc	r27, r17
    1ede:	91 96       	adiw	r26, 0x21	; 33
    1ee0:	8c 93       	st	X, r24
    1ee2:	91 97       	sbiw	r26, 0x21	; 33
		tx_string[cnt+2] = crc[0];
    1ee4:	80 81       	ld	r24, Z
    1ee6:	fd 01       	movw	r30, r26
    1ee8:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';		
    1eea:	80 e3       	ldi	r24, 0x30	; 48
    1eec:	fe 01       	movw	r30, r28
    1eee:	ee 0d       	add	r30, r14
    1ef0:	ff 1d       	adc	r31, r15
    1ef2:	86 8f       	std	Z+30, r24	; 0x1e
	}
	if(crcXmodem >= 0x1000)
    1ef4:	c1 14       	cp	r12, r1
    1ef6:	b0 e1       	ldi	r27, 0x10	; 16
    1ef8:	db 06       	cpc	r13, r27
    1efa:	c0 f0       	brcs	.+48     	; 0x1f2c <main+0x62c>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    1efc:	de 01       	movw	r26, r28
    1efe:	ae 0d       	add	r26, r14
    1f00:	bf 1d       	adc	r27, r15
    1f02:	ec e0       	ldi	r30, 0x0C	; 12
    1f04:	f4 e0       	ldi	r31, 0x04	; 4
    1f06:	80 81       	ld	r24, Z
    1f08:	5e 96       	adiw	r26, 0x1e	; 30
    1f0a:	8c 93       	st	X, r24
		tx_string[cnt+2] = crc[1];
    1f0c:	81 81       	ldd	r24, Z+1	; 0x01
    1f0e:	de 01       	movw	r26, r28
    1f10:	a0 0f       	add	r26, r16
    1f12:	b1 1f       	adc	r27, r17
    1f14:	90 96       	adiw	r26, 0x20	; 32
    1f16:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[2];
    1f18:	82 81       	ldd	r24, Z+2	; 0x02
    1f1a:	de 01       	movw	r26, r28
    1f1c:	a0 0f       	add	r26, r16
    1f1e:	b1 1f       	adc	r27, r17
    1f20:	91 96       	adiw	r26, 0x21	; 33
    1f22:	8c 93       	st	X, r24
    1f24:	91 97       	sbiw	r26, 0x21	; 33
		tx_string[cnt+4] = crc[3];
    1f26:	83 81       	ldd	r24, Z+3	; 0x03
    1f28:	fd 01       	movw	r30, r26
    1f2a:	82 a3       	std	Z+34, r24	; 0x22
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    1f2c:	c8 01       	movw	r24, r16
    1f2e:	05 96       	adiw	r24, 0x05	; 5
    1f30:	fe 01       	movw	r30, r28
    1f32:	e8 0f       	add	r30, r24
    1f34:	f9 1f       	adc	r31, r25
    1f36:	2d e0       	ldi	r18, 0x0D	; 13
    1f38:	26 8f       	std	Z+30, r18	; 0x1e
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    1f3a:	99 23       	and	r25, r25
    1f3c:	0c f4       	brge	.+2      	; 0x1f40 <main+0x640>
    1f3e:	81 c7       	rjmp	.+3842   	; 0x2e42 <main+0x1542>
    1f40:	fe 01       	movw	r30, r28
    1f42:	7e 96       	adiw	r30, 0x1e	; 30
    1f44:	a8 01       	movw	r20, r16
    1f46:	4a 5f       	subi	r20, 0xFA	; 250
    1f48:	5f 4f       	sbci	r21, 0xFF	; 255
    1f4a:	4e 0f       	add	r20, r30
    1f4c:	5f 1f       	adc	r21, r31
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
	{
		uart_putchar(tx_string[i]);
    1f50:	21 91       	ld	r18, Z+
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    1f52:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    1f54:	d4 01       	movw	r26, r8
    1f56:	11 96       	adiw	r26, 0x01	; 1
    1f58:	3c 91       	ld	r19, X
    1f5a:	11 97       	sbiw	r26, 0x01	; 1
    1f5c:	8c 91       	ld	r24, X
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    1f5e:	38 13       	cpse	r19, r24
    1f60:	05 c0       	rjmp	.+10     	; 0x1f6c <main+0x66c>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    1f62:	a1 ec       	ldi	r26, 0xC1	; 193
    1f64:	b0 e0       	ldi	r27, 0x00	; 0
    1f66:	8c 91       	ld	r24, X
    1f68:	80 62       	ori	r24, 0x20	; 32
    1f6a:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    1f6c:	d4 01       	movw	r26, r8
    1f6e:	8c 91       	ld	r24, X
    1f70:	13 96       	adiw	r26, 0x03	; 3
    1f72:	6d 91       	ld	r22, X+
    1f74:	7c 91       	ld	r23, X
    1f76:	14 97       	sbiw	r26, 0x04	; 4
    1f78:	db 01       	movw	r26, r22
    1f7a:	a8 0f       	add	r26, r24
    1f7c:	b1 1d       	adc	r27, r1
    1f7e:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    1f80:	d4 01       	movw	r26, r8
    1f82:	8c 91       	ld	r24, X
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    1f84:	68 2f       	mov	r22, r24
    1f86:	70 e0       	ldi	r23, 0x00	; 0
    1f88:	12 96       	adiw	r26, 0x02	; 2
    1f8a:	2c 91       	ld	r18, X
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	21 50       	subi	r18, 0x01	; 1
    1f90:	31 09       	sbc	r19, r1
    1f92:	62 17       	cp	r22, r18
    1f94:	73 07       	cpc	r23, r19
    1f96:	11 f0       	breq	.+4      	; 0x1f9c <main+0x69c>
    1f98:	8f 5f       	subi	r24, 0xFF	; 255
    1f9a:	01 c0       	rjmp	.+2      	; 0x1f9e <main+0x69e>
    1f9c:	89 2f       	mov	r24, r25
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    1f9e:	d4 01       	movw	r26, r8
    1fa0:	8c 93       	st	X, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    1fa2:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    1fa4:	e4 17       	cp	r30, r20
    1fa6:	f5 07       	cpc	r31, r21
    1fa8:	99 f6       	brne	.-90     	; 0x1f50 <main+0x650>
    1faa:	4b c7       	rjmp	.+3734   	; 0x2e42 <main+0x1542>
		ftoa(ch0.TempSensor, tx_string);
		printStatus(tx_string);
		break;
		
		case 101:	// Send P part of PID-controller 1
		ftoa(ch0.P_err, tx_string);
    1fac:	60 91 1e 04 	lds	r22, 0x041E
    1fb0:	70 91 1f 04 	lds	r23, 0x041F
    1fb4:	80 91 20 04 	lds	r24, 0x0420
    1fb8:	90 91 21 04 	lds	r25, 0x0421
    1fbc:	46 2d       	mov	r20, r6
    1fbe:	57 2d       	mov	r21, r7
    1fc0:	18 dc       	rcall	.-2000   	; 0x17f2 <ftoa>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    1fc2:	81 e2       	ldi	r24, 0x21	; 33
    1fc4:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    1fc6:	f5 01       	movw	r30, r10
    1fc8:	81 81       	ldd	r24, Z+1	; 0x01
    1fca:	8f 8f       	std	Y+31, r24	; 0x1f
    1fcc:	82 81       	ldd	r24, Z+2	; 0x02
    1fce:	88 a3       	std	Y+32, r24	; 0x20
    1fd0:	83 81       	ldd	r24, Z+3	; 0x03
    1fd2:	89 a3       	std	Y+33, r24	; 0x21
    1fd4:	e6 2d       	mov	r30, r6
    1fd6:	f7 2d       	mov	r31, r7
    1fd8:	de 01       	movw	r26, r28
    1fda:	92 96       	adiw	r26, 0x22	; 34
    1fdc:	00 e0       	ldi	r16, 0x00	; 0
    1fde:	10 e0       	ldi	r17, 0x00	; 0
    1fe0:	af 01       	movw	r20, r30
    1fe2:	06 c0       	rjmp	.+12     	; 0x1ff0 <main+0x6f0>
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    1fe4:	fa 01       	movw	r30, r20
    1fe6:	81 91       	ld	r24, Z+
    1fe8:	af 01       	movw	r20, r30
    1fea:	8d 93       	st	X+, r24
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    1fec:	0f 5f       	subi	r16, 0xFF	; 255
    1fee:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff0:	6c 96       	adiw	r28, 0x1c	; 28
    1ff2:	ee ad       	ldd	r30, Y+62	; 0x3e
    1ff4:	ff ad       	ldd	r31, Y+63	; 0x3f
    1ff6:	6c 97       	sbiw	r28, 0x1c	; 28
    1ff8:	01 90       	ld	r0, Z+
    1ffa:	00 20       	and	r0, r0
    1ffc:	e9 f7       	brne	.-6      	; 0x1ff8 <main+0x6f8>
    1ffe:	cf 01       	movw	r24, r30
    2000:	6c 96       	adiw	r28, 0x1c	; 28
    2002:	2e ad       	ldd	r18, Y+62	; 0x3e
    2004:	3f ad       	ldd	r19, Y+63	; 0x3f
    2006:	6c 97       	sbiw	r28, 0x1c	; 28
    2008:	82 1b       	sub	r24, r18
    200a:	93 0b       	sbc	r25, r19
    200c:	02 96       	adiw	r24, 0x02	; 2
    200e:	08 17       	cp	r16, r24
    2010:	19 07       	cpc	r17, r25
    2012:	40 f3       	brcs	.-48     	; 0x1fe4 <main+0x6e4>
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    2014:	78 01       	movw	r14, r16
    2016:	3f ef       	ldi	r19, 0xFF	; 255
    2018:	e3 1a       	sub	r14, r19
    201a:	f3 0a       	sbc	r15, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    201c:	1e 14       	cp	r1, r14
    201e:	1f 04       	cpc	r1, r15
    2020:	14 f0       	brlt	.+4      	; 0x2026 <main+0x726>
    2022:	0c 94 0c 21 	jmp	0x4218	; 0x4218 <main+0x2918>
    2026:	de 01       	movw	r26, r28
    2028:	5e 96       	adiw	r26, 0x1e	; 30
    202a:	67 01       	movw	r12, r14
    202c:	ca 0e       	add	r12, r26
    202e:	db 1e       	adc	r13, r27
    2030:	e0 e0       	ldi	r30, 0x00	; 0
    2032:	f0 e0       	ldi	r31, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    2034:	98 e0       	ldi	r25, 0x08	; 8
    2036:	80 e0       	ldi	r24, 0x00	; 0
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    2038:	4d 91       	ld	r20, X+
		tmp = (int)((CRC >> 8) ^ int_c);
    203a:	2f 2f       	mov	r18, r31
    203c:	33 27       	eor	r19, r19
    203e:	27 fd       	sbrc	r18, 7
    2040:	3a 95       	dec	r19
    2042:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    2044:	32 2f       	mov	r19, r18
    2046:	22 27       	eor	r18, r18
    2048:	49 2f       	mov	r20, r25
    204a:	58 2f       	mov	r21, r24
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    204c:	33 23       	and	r19, r19
    204e:	3c f4       	brge	.+14     	; 0x205e <main+0x75e>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    2050:	22 0f       	add	r18, r18
    2052:	33 1f       	adc	r19, r19
    2054:	61 e2       	ldi	r22, 0x21	; 33
    2056:	26 27       	eor	r18, r22
    2058:	60 e1       	ldi	r22, 0x10	; 16
    205a:	36 27       	eor	r19, r22
    205c:	02 c0       	rjmp	.+4      	; 0x2062 <main+0x762>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    205e:	22 0f       	add	r18, r18
    2060:	33 1f       	adc	r19, r19
    2062:	41 50       	subi	r20, 0x01	; 1
    2064:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    2066:	91 f7       	brne	.-28     	; 0x204c <main+0x74c>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    2068:	fe 2f       	mov	r31, r30
    206a:	ee 27       	eor	r30, r30
    206c:	e2 27       	eor	r30, r18
    206e:	f3 27       	eor	r31, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    2070:	ac 15       	cp	r26, r12
    2072:	bd 05       	cpc	r27, r13
    2074:	09 f7       	brne	.-62     	; 0x2038 <main+0x738>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    2076:	6f 01       	movw	r12, r30
    2078:	40 e1       	ldi	r20, 0x10	; 16
    207a:	6c e0       	ldi	r22, 0x0C	; 12
    207c:	74 e0       	ldi	r23, 0x04	; 4
    207e:	cf 01       	movw	r24, r30
    2080:	0e 94 ac 23 	call	0x4758	; 0x4758 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    2084:	8c e0       	ldi	r24, 0x0C	; 12
    2086:	94 e0       	ldi	r25, 0x04	; 4
    2088:	0e 94 a2 23 	call	0x4744	; 0x4744 <strupr>
	if(crcXmodem < 0x10)
    208c:	80 e1       	ldi	r24, 0x10	; 16
    208e:	c8 16       	cp	r12, r24
    2090:	d1 04       	cpc	r13, r1
    2092:	98 f4       	brcc	.+38     	; 0x20ba <main+0x7ba>
	{
		tx_string[cnt+4] = crc[0];
    2094:	80 91 0c 04 	lds	r24, 0x040C
    2098:	fe 01       	movw	r30, r28
    209a:	e0 0f       	add	r30, r16
    209c:	f1 1f       	adc	r31, r17
    209e:	82 a3       	std	Z+34, r24	; 0x22
		tx_string[cnt+3] = '0';
    20a0:	80 e3       	ldi	r24, 0x30	; 48
    20a2:	fe 01       	movw	r30, r28
    20a4:	e0 0f       	add	r30, r16
    20a6:	f1 1f       	adc	r31, r17
    20a8:	81 a3       	std	Z+33, r24	; 0x21
		tx_string[cnt+2] = '0';
    20aa:	fe 01       	movw	r30, r28
    20ac:	e0 0f       	add	r30, r16
    20ae:	f1 1f       	adc	r31, r17
    20b0:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';
    20b2:	fe 01       	movw	r30, r28
    20b4:	ee 0d       	add	r30, r14
    20b6:	ff 1d       	adc	r31, r15
    20b8:	86 8f       	std	Z+30, r24	; 0x1e
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    20ba:	c6 01       	movw	r24, r12
    20bc:	40 97       	sbiw	r24, 0x10	; 16
    20be:	80 3f       	cpi	r24, 0xF0	; 240
    20c0:	91 05       	cpc	r25, r1
    20c2:	b8 f4       	brcc	.+46     	; 0x20f2 <main+0x7f2>
	{
		tx_string[cnt+4] = crc[1];
    20c4:	ac e0       	ldi	r26, 0x0C	; 12
    20c6:	b4 e0       	ldi	r27, 0x04	; 4
    20c8:	11 96       	adiw	r26, 0x01	; 1
    20ca:	8c 91       	ld	r24, X
    20cc:	11 97       	sbiw	r26, 0x01	; 1
    20ce:	fe 01       	movw	r30, r28
    20d0:	e0 0f       	add	r30, r16
    20d2:	f1 1f       	adc	r31, r17
    20d4:	82 a3       	std	Z+34, r24	; 0x22
		tx_string[cnt+3] = crc[0];
    20d6:	8c 91       	ld	r24, X
    20d8:	fe 01       	movw	r30, r28
    20da:	e0 0f       	add	r30, r16
    20dc:	f1 1f       	adc	r31, r17
    20de:	81 a3       	std	Z+33, r24	; 0x21
		tx_string[cnt+2] = '0';
    20e0:	80 e3       	ldi	r24, 0x30	; 48
    20e2:	fe 01       	movw	r30, r28
    20e4:	e0 0f       	add	r30, r16
    20e6:	f1 1f       	adc	r31, r17
    20e8:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';		
    20ea:	fe 01       	movw	r30, r28
    20ec:	ee 0d       	add	r30, r14
    20ee:	ff 1d       	adc	r31, r15
    20f0:	86 8f       	std	Z+30, r24	; 0x1e
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    20f2:	c6 01       	movw	r24, r12
    20f4:	9a 95       	dec	r25
    20f6:	81 15       	cp	r24, r1
    20f8:	9f 40       	sbci	r25, 0x0F	; 15
    20fa:	b8 f4       	brcc	.+46     	; 0x212a <main+0x82a>
	{
		tx_string[cnt+4] = crc[2];
    20fc:	ec e0       	ldi	r30, 0x0C	; 12
    20fe:	f4 e0       	ldi	r31, 0x04	; 4
    2100:	82 81       	ldd	r24, Z+2	; 0x02
    2102:	de 01       	movw	r26, r28
    2104:	a0 0f       	add	r26, r16
    2106:	b1 1f       	adc	r27, r17
    2108:	92 96       	adiw	r26, 0x22	; 34
    210a:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[1];
    210c:	81 81       	ldd	r24, Z+1	; 0x01
    210e:	de 01       	movw	r26, r28
    2110:	a0 0f       	add	r26, r16
    2112:	b1 1f       	adc	r27, r17
    2114:	91 96       	adiw	r26, 0x21	; 33
    2116:	8c 93       	st	X, r24
    2118:	91 97       	sbiw	r26, 0x21	; 33
		tx_string[cnt+2] = crc[0];
    211a:	80 81       	ld	r24, Z
    211c:	fd 01       	movw	r30, r26
    211e:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';		
    2120:	80 e3       	ldi	r24, 0x30	; 48
    2122:	fe 01       	movw	r30, r28
    2124:	ee 0d       	add	r30, r14
    2126:	ff 1d       	adc	r31, r15
    2128:	86 8f       	std	Z+30, r24	; 0x1e
	}
	if(crcXmodem >= 0x1000)
    212a:	c1 14       	cp	r12, r1
    212c:	b0 e1       	ldi	r27, 0x10	; 16
    212e:	db 06       	cpc	r13, r27
    2130:	c0 f0       	brcs	.+48     	; 0x2162 <main+0x862>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    2132:	de 01       	movw	r26, r28
    2134:	ae 0d       	add	r26, r14
    2136:	bf 1d       	adc	r27, r15
    2138:	ec e0       	ldi	r30, 0x0C	; 12
    213a:	f4 e0       	ldi	r31, 0x04	; 4
    213c:	80 81       	ld	r24, Z
    213e:	5e 96       	adiw	r26, 0x1e	; 30
    2140:	8c 93       	st	X, r24
		tx_string[cnt+2] = crc[1];
    2142:	81 81       	ldd	r24, Z+1	; 0x01
    2144:	de 01       	movw	r26, r28
    2146:	a0 0f       	add	r26, r16
    2148:	b1 1f       	adc	r27, r17
    214a:	90 96       	adiw	r26, 0x20	; 32
    214c:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[2];
    214e:	82 81       	ldd	r24, Z+2	; 0x02
    2150:	de 01       	movw	r26, r28
    2152:	a0 0f       	add	r26, r16
    2154:	b1 1f       	adc	r27, r17
    2156:	91 96       	adiw	r26, 0x21	; 33
    2158:	8c 93       	st	X, r24
    215a:	91 97       	sbiw	r26, 0x21	; 33
		tx_string[cnt+4] = crc[3];
    215c:	83 81       	ldd	r24, Z+3	; 0x03
    215e:	fd 01       	movw	r30, r26
    2160:	82 a3       	std	Z+34, r24	; 0x22
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    2162:	c8 01       	movw	r24, r16
    2164:	05 96       	adiw	r24, 0x05	; 5
    2166:	fe 01       	movw	r30, r28
    2168:	e8 0f       	add	r30, r24
    216a:	f9 1f       	adc	r31, r25
    216c:	2d e0       	ldi	r18, 0x0D	; 13
    216e:	26 8f       	std	Z+30, r18	; 0x1e
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    2170:	99 23       	and	r25, r25
    2172:	0c f4       	brge	.+2      	; 0x2176 <main+0x876>
    2174:	66 c6       	rjmp	.+3276   	; 0x2e42 <main+0x1542>
    2176:	fe 01       	movw	r30, r28
    2178:	7e 96       	adiw	r30, 0x1e	; 30
    217a:	a8 01       	movw	r20, r16
    217c:	4a 5f       	subi	r20, 0xFA	; 250
    217e:	5f 4f       	sbci	r21, 0xFF	; 255
    2180:	4e 0f       	add	r20, r30
    2182:	5f 1f       	adc	r21, r31
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    2184:	90 e0       	ldi	r25, 0x00	; 0
	{
		uart_putchar(tx_string[i]);
    2186:	21 91       	ld	r18, Z+
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    2188:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    218a:	d4 01       	movw	r26, r8
    218c:	11 96       	adiw	r26, 0x01	; 1
    218e:	3c 91       	ld	r19, X
    2190:	11 97       	sbiw	r26, 0x01	; 1
    2192:	8c 91       	ld	r24, X
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    2194:	38 13       	cpse	r19, r24
    2196:	05 c0       	rjmp	.+10     	; 0x21a2 <main+0x8a2>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    2198:	a1 ec       	ldi	r26, 0xC1	; 193
    219a:	b0 e0       	ldi	r27, 0x00	; 0
    219c:	8c 91       	ld	r24, X
    219e:	80 62       	ori	r24, 0x20	; 32
    21a0:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    21a2:	d4 01       	movw	r26, r8
    21a4:	8c 91       	ld	r24, X
    21a6:	13 96       	adiw	r26, 0x03	; 3
    21a8:	6d 91       	ld	r22, X+
    21aa:	7c 91       	ld	r23, X
    21ac:	14 97       	sbiw	r26, 0x04	; 4
    21ae:	db 01       	movw	r26, r22
    21b0:	a8 0f       	add	r26, r24
    21b2:	b1 1d       	adc	r27, r1
    21b4:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    21b6:	d4 01       	movw	r26, r8
    21b8:	8c 91       	ld	r24, X
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    21ba:	68 2f       	mov	r22, r24
    21bc:	70 e0       	ldi	r23, 0x00	; 0
    21be:	12 96       	adiw	r26, 0x02	; 2
    21c0:	2c 91       	ld	r18, X
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	21 50       	subi	r18, 0x01	; 1
    21c6:	31 09       	sbc	r19, r1
    21c8:	62 17       	cp	r22, r18
    21ca:	73 07       	cpc	r23, r19
    21cc:	11 f0       	breq	.+4      	; 0x21d2 <main+0x8d2>
    21ce:	8f 5f       	subi	r24, 0xFF	; 255
    21d0:	01 c0       	rjmp	.+2      	; 0x21d4 <main+0x8d4>
    21d2:	89 2f       	mov	r24, r25
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    21d4:	d4 01       	movw	r26, r8
    21d6:	8c 93       	st	X, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    21d8:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    21da:	e4 17       	cp	r30, r20
    21dc:	f5 07       	cpc	r31, r21
    21de:	99 f6       	brne	.-90     	; 0x2186 <main+0x886>
    21e0:	30 c6       	rjmp	.+3168   	; 0x2e42 <main+0x1542>
		ftoa(ch0.P_err, tx_string);
		printStatus(tx_string);
		break;
		
		case 102:	// Send I part of PID-controller 1
		ftoa(ch0.I_err, tx_string);
    21e2:	60 91 22 04 	lds	r22, 0x0422
    21e6:	70 91 23 04 	lds	r23, 0x0423
    21ea:	80 91 24 04 	lds	r24, 0x0424
    21ee:	90 91 25 04 	lds	r25, 0x0425
    21f2:	46 2d       	mov	r20, r6
    21f4:	57 2d       	mov	r21, r7
    21f6:	fd da       	rcall	.-2566   	; 0x17f2 <ftoa>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    21f8:	81 e2       	ldi	r24, 0x21	; 33
    21fa:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    21fc:	f5 01       	movw	r30, r10
    21fe:	81 81       	ldd	r24, Z+1	; 0x01
    2200:	8f 8f       	std	Y+31, r24	; 0x1f
    2202:	82 81       	ldd	r24, Z+2	; 0x02
    2204:	88 a3       	std	Y+32, r24	; 0x20
    2206:	83 81       	ldd	r24, Z+3	; 0x03
    2208:	89 a3       	std	Y+33, r24	; 0x21
    220a:	e6 2d       	mov	r30, r6
    220c:	f7 2d       	mov	r31, r7
    220e:	de 01       	movw	r26, r28
    2210:	92 96       	adiw	r26, 0x22	; 34
    2212:	00 e0       	ldi	r16, 0x00	; 0
    2214:	10 e0       	ldi	r17, 0x00	; 0
    2216:	af 01       	movw	r20, r30
    2218:	06 c0       	rjmp	.+12     	; 0x2226 <main+0x926>
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    221a:	fa 01       	movw	r30, r20
    221c:	81 91       	ld	r24, Z+
    221e:	af 01       	movw	r20, r30
    2220:	8d 93       	st	X+, r24
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    2222:	0f 5f       	subi	r16, 0xFF	; 255
    2224:	1f 4f       	sbci	r17, 0xFF	; 255
    2226:	6c 96       	adiw	r28, 0x1c	; 28
    2228:	ee ad       	ldd	r30, Y+62	; 0x3e
    222a:	ff ad       	ldd	r31, Y+63	; 0x3f
    222c:	6c 97       	sbiw	r28, 0x1c	; 28
    222e:	01 90       	ld	r0, Z+
    2230:	00 20       	and	r0, r0
    2232:	e9 f7       	brne	.-6      	; 0x222e <main+0x92e>
    2234:	cf 01       	movw	r24, r30
    2236:	6c 96       	adiw	r28, 0x1c	; 28
    2238:	2e ad       	ldd	r18, Y+62	; 0x3e
    223a:	3f ad       	ldd	r19, Y+63	; 0x3f
    223c:	6c 97       	sbiw	r28, 0x1c	; 28
    223e:	82 1b       	sub	r24, r18
    2240:	93 0b       	sbc	r25, r19
    2242:	02 96       	adiw	r24, 0x02	; 2
    2244:	08 17       	cp	r16, r24
    2246:	19 07       	cpc	r17, r25
    2248:	40 f3       	brcs	.-48     	; 0x221a <main+0x91a>
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    224a:	78 01       	movw	r14, r16
    224c:	3f ef       	ldi	r19, 0xFF	; 255
    224e:	e3 1a       	sub	r14, r19
    2250:	f3 0a       	sbc	r15, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    2252:	1e 14       	cp	r1, r14
    2254:	1f 04       	cpc	r1, r15
    2256:	14 f0       	brlt	.+4      	; 0x225c <main+0x95c>
    2258:	0c 94 19 21 	jmp	0x4232	; 0x4232 <main+0x2932>
    225c:	de 01       	movw	r26, r28
    225e:	5e 96       	adiw	r26, 0x1e	; 30
    2260:	67 01       	movw	r12, r14
    2262:	ca 0e       	add	r12, r26
    2264:	db 1e       	adc	r13, r27
    2266:	e0 e0       	ldi	r30, 0x00	; 0
    2268:	f0 e0       	ldi	r31, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    226a:	98 e0       	ldi	r25, 0x08	; 8
    226c:	80 e0       	ldi	r24, 0x00	; 0
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    226e:	4d 91       	ld	r20, X+
		tmp = (int)((CRC >> 8) ^ int_c);
    2270:	2f 2f       	mov	r18, r31
    2272:	33 27       	eor	r19, r19
    2274:	27 fd       	sbrc	r18, 7
    2276:	3a 95       	dec	r19
    2278:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    227a:	32 2f       	mov	r19, r18
    227c:	22 27       	eor	r18, r18
    227e:	49 2f       	mov	r20, r25
    2280:	58 2f       	mov	r21, r24
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    2282:	33 23       	and	r19, r19
    2284:	3c f4       	brge	.+14     	; 0x2294 <main+0x994>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    2286:	22 0f       	add	r18, r18
    2288:	33 1f       	adc	r19, r19
    228a:	61 e2       	ldi	r22, 0x21	; 33
    228c:	26 27       	eor	r18, r22
    228e:	60 e1       	ldi	r22, 0x10	; 16
    2290:	36 27       	eor	r19, r22
    2292:	02 c0       	rjmp	.+4      	; 0x2298 <main+0x998>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    2294:	22 0f       	add	r18, r18
    2296:	33 1f       	adc	r19, r19
    2298:	41 50       	subi	r20, 0x01	; 1
    229a:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    229c:	91 f7       	brne	.-28     	; 0x2282 <main+0x982>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    229e:	fe 2f       	mov	r31, r30
    22a0:	ee 27       	eor	r30, r30
    22a2:	e2 27       	eor	r30, r18
    22a4:	f3 27       	eor	r31, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    22a6:	ac 15       	cp	r26, r12
    22a8:	bd 05       	cpc	r27, r13
    22aa:	09 f7       	brne	.-62     	; 0x226e <main+0x96e>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    22ac:	6f 01       	movw	r12, r30
    22ae:	40 e1       	ldi	r20, 0x10	; 16
    22b0:	6c e0       	ldi	r22, 0x0C	; 12
    22b2:	74 e0       	ldi	r23, 0x04	; 4
    22b4:	cf 01       	movw	r24, r30
    22b6:	0e 94 ac 23 	call	0x4758	; 0x4758 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    22ba:	8c e0       	ldi	r24, 0x0C	; 12
    22bc:	94 e0       	ldi	r25, 0x04	; 4
    22be:	0e 94 a2 23 	call	0x4744	; 0x4744 <strupr>
	if(crcXmodem < 0x10)
    22c2:	80 e1       	ldi	r24, 0x10	; 16
    22c4:	c8 16       	cp	r12, r24
    22c6:	d1 04       	cpc	r13, r1
    22c8:	98 f4       	brcc	.+38     	; 0x22f0 <main+0x9f0>
	{
		tx_string[cnt+4] = crc[0];
    22ca:	80 91 0c 04 	lds	r24, 0x040C
    22ce:	fe 01       	movw	r30, r28
    22d0:	e0 0f       	add	r30, r16
    22d2:	f1 1f       	adc	r31, r17
    22d4:	82 a3       	std	Z+34, r24	; 0x22
		tx_string[cnt+3] = '0';
    22d6:	80 e3       	ldi	r24, 0x30	; 48
    22d8:	fe 01       	movw	r30, r28
    22da:	e0 0f       	add	r30, r16
    22dc:	f1 1f       	adc	r31, r17
    22de:	81 a3       	std	Z+33, r24	; 0x21
		tx_string[cnt+2] = '0';
    22e0:	fe 01       	movw	r30, r28
    22e2:	e0 0f       	add	r30, r16
    22e4:	f1 1f       	adc	r31, r17
    22e6:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';
    22e8:	fe 01       	movw	r30, r28
    22ea:	ee 0d       	add	r30, r14
    22ec:	ff 1d       	adc	r31, r15
    22ee:	86 8f       	std	Z+30, r24	; 0x1e
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    22f0:	c6 01       	movw	r24, r12
    22f2:	40 97       	sbiw	r24, 0x10	; 16
    22f4:	80 3f       	cpi	r24, 0xF0	; 240
    22f6:	91 05       	cpc	r25, r1
    22f8:	b8 f4       	brcc	.+46     	; 0x2328 <main+0xa28>
	{
		tx_string[cnt+4] = crc[1];
    22fa:	ac e0       	ldi	r26, 0x0C	; 12
    22fc:	b4 e0       	ldi	r27, 0x04	; 4
    22fe:	11 96       	adiw	r26, 0x01	; 1
    2300:	8c 91       	ld	r24, X
    2302:	11 97       	sbiw	r26, 0x01	; 1
    2304:	fe 01       	movw	r30, r28
    2306:	e0 0f       	add	r30, r16
    2308:	f1 1f       	adc	r31, r17
    230a:	82 a3       	std	Z+34, r24	; 0x22
		tx_string[cnt+3] = crc[0];
    230c:	8c 91       	ld	r24, X
    230e:	fe 01       	movw	r30, r28
    2310:	e0 0f       	add	r30, r16
    2312:	f1 1f       	adc	r31, r17
    2314:	81 a3       	std	Z+33, r24	; 0x21
		tx_string[cnt+2] = '0';
    2316:	80 e3       	ldi	r24, 0x30	; 48
    2318:	fe 01       	movw	r30, r28
    231a:	e0 0f       	add	r30, r16
    231c:	f1 1f       	adc	r31, r17
    231e:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';		
    2320:	fe 01       	movw	r30, r28
    2322:	ee 0d       	add	r30, r14
    2324:	ff 1d       	adc	r31, r15
    2326:	86 8f       	std	Z+30, r24	; 0x1e
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    2328:	c6 01       	movw	r24, r12
    232a:	9a 95       	dec	r25
    232c:	81 15       	cp	r24, r1
    232e:	9f 40       	sbci	r25, 0x0F	; 15
    2330:	b8 f4       	brcc	.+46     	; 0x2360 <main+0xa60>
	{
		tx_string[cnt+4] = crc[2];
    2332:	ec e0       	ldi	r30, 0x0C	; 12
    2334:	f4 e0       	ldi	r31, 0x04	; 4
    2336:	82 81       	ldd	r24, Z+2	; 0x02
    2338:	de 01       	movw	r26, r28
    233a:	a0 0f       	add	r26, r16
    233c:	b1 1f       	adc	r27, r17
    233e:	92 96       	adiw	r26, 0x22	; 34
    2340:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[1];
    2342:	81 81       	ldd	r24, Z+1	; 0x01
    2344:	de 01       	movw	r26, r28
    2346:	a0 0f       	add	r26, r16
    2348:	b1 1f       	adc	r27, r17
    234a:	91 96       	adiw	r26, 0x21	; 33
    234c:	8c 93       	st	X, r24
    234e:	91 97       	sbiw	r26, 0x21	; 33
		tx_string[cnt+2] = crc[0];
    2350:	80 81       	ld	r24, Z
    2352:	fd 01       	movw	r30, r26
    2354:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';		
    2356:	80 e3       	ldi	r24, 0x30	; 48
    2358:	fe 01       	movw	r30, r28
    235a:	ee 0d       	add	r30, r14
    235c:	ff 1d       	adc	r31, r15
    235e:	86 8f       	std	Z+30, r24	; 0x1e
	}
	if(crcXmodem >= 0x1000)
    2360:	c1 14       	cp	r12, r1
    2362:	b0 e1       	ldi	r27, 0x10	; 16
    2364:	db 06       	cpc	r13, r27
    2366:	c0 f0       	brcs	.+48     	; 0x2398 <main+0xa98>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    2368:	de 01       	movw	r26, r28
    236a:	ae 0d       	add	r26, r14
    236c:	bf 1d       	adc	r27, r15
    236e:	ec e0       	ldi	r30, 0x0C	; 12
    2370:	f4 e0       	ldi	r31, 0x04	; 4
    2372:	80 81       	ld	r24, Z
    2374:	5e 96       	adiw	r26, 0x1e	; 30
    2376:	8c 93       	st	X, r24
		tx_string[cnt+2] = crc[1];
    2378:	81 81       	ldd	r24, Z+1	; 0x01
    237a:	de 01       	movw	r26, r28
    237c:	a0 0f       	add	r26, r16
    237e:	b1 1f       	adc	r27, r17
    2380:	90 96       	adiw	r26, 0x20	; 32
    2382:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[2];
    2384:	82 81       	ldd	r24, Z+2	; 0x02
    2386:	de 01       	movw	r26, r28
    2388:	a0 0f       	add	r26, r16
    238a:	b1 1f       	adc	r27, r17
    238c:	91 96       	adiw	r26, 0x21	; 33
    238e:	8c 93       	st	X, r24
    2390:	91 97       	sbiw	r26, 0x21	; 33
		tx_string[cnt+4] = crc[3];
    2392:	83 81       	ldd	r24, Z+3	; 0x03
    2394:	fd 01       	movw	r30, r26
    2396:	82 a3       	std	Z+34, r24	; 0x22
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    2398:	c8 01       	movw	r24, r16
    239a:	05 96       	adiw	r24, 0x05	; 5
    239c:	fe 01       	movw	r30, r28
    239e:	e8 0f       	add	r30, r24
    23a0:	f9 1f       	adc	r31, r25
    23a2:	2d e0       	ldi	r18, 0x0D	; 13
    23a4:	26 8f       	std	Z+30, r18	; 0x1e
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    23a6:	99 23       	and	r25, r25
    23a8:	0c f4       	brge	.+2      	; 0x23ac <main+0xaac>
    23aa:	4b c5       	rjmp	.+2710   	; 0x2e42 <main+0x1542>
    23ac:	fe 01       	movw	r30, r28
    23ae:	7e 96       	adiw	r30, 0x1e	; 30
    23b0:	a8 01       	movw	r20, r16
    23b2:	4a 5f       	subi	r20, 0xFA	; 250
    23b4:	5f 4f       	sbci	r21, 0xFF	; 255
    23b6:	4e 0f       	add	r20, r30
    23b8:	5f 1f       	adc	r21, r31
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    23ba:	90 e0       	ldi	r25, 0x00	; 0
	{
		uart_putchar(tx_string[i]);
    23bc:	21 91       	ld	r18, Z+
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    23be:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    23c0:	d4 01       	movw	r26, r8
    23c2:	11 96       	adiw	r26, 0x01	; 1
    23c4:	3c 91       	ld	r19, X
    23c6:	11 97       	sbiw	r26, 0x01	; 1
    23c8:	8c 91       	ld	r24, X
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    23ca:	38 13       	cpse	r19, r24
    23cc:	05 c0       	rjmp	.+10     	; 0x23d8 <main+0xad8>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    23ce:	a1 ec       	ldi	r26, 0xC1	; 193
    23d0:	b0 e0       	ldi	r27, 0x00	; 0
    23d2:	8c 91       	ld	r24, X
    23d4:	80 62       	ori	r24, 0x20	; 32
    23d6:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    23d8:	d4 01       	movw	r26, r8
    23da:	8c 91       	ld	r24, X
    23dc:	13 96       	adiw	r26, 0x03	; 3
    23de:	6d 91       	ld	r22, X+
    23e0:	7c 91       	ld	r23, X
    23e2:	14 97       	sbiw	r26, 0x04	; 4
    23e4:	db 01       	movw	r26, r22
    23e6:	a8 0f       	add	r26, r24
    23e8:	b1 1d       	adc	r27, r1
    23ea:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    23ec:	d4 01       	movw	r26, r8
    23ee:	8c 91       	ld	r24, X
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    23f0:	68 2f       	mov	r22, r24
    23f2:	70 e0       	ldi	r23, 0x00	; 0
    23f4:	12 96       	adiw	r26, 0x02	; 2
    23f6:	2c 91       	ld	r18, X
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	21 50       	subi	r18, 0x01	; 1
    23fc:	31 09       	sbc	r19, r1
    23fe:	62 17       	cp	r22, r18
    2400:	73 07       	cpc	r23, r19
    2402:	11 f0       	breq	.+4      	; 0x2408 <main+0xb08>
    2404:	8f 5f       	subi	r24, 0xFF	; 255
    2406:	01 c0       	rjmp	.+2      	; 0x240a <main+0xb0a>
    2408:	89 2f       	mov	r24, r25
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    240a:	d4 01       	movw	r26, r8
    240c:	8c 93       	st	X, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    240e:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    2410:	e4 17       	cp	r30, r20
    2412:	f5 07       	cpc	r31, r21
    2414:	99 f6       	brne	.-90     	; 0x23bc <main+0xabc>
    2416:	15 c5       	rjmp	.+2602   	; 0x2e42 <main+0x1542>
		ftoa(ch0.I_err, tx_string);
		printStatus(tx_string);
		break;
				
		case 103:	// Send D part of PID-controller 1
		ftoa(ch0.D_err, tx_string);
    2418:	60 91 26 04 	lds	r22, 0x0426
    241c:	70 91 27 04 	lds	r23, 0x0427
    2420:	80 91 28 04 	lds	r24, 0x0428
    2424:	90 91 29 04 	lds	r25, 0x0429
    2428:	46 2d       	mov	r20, r6
    242a:	57 2d       	mov	r21, r7
    242c:	e2 d9       	rcall	.-3132   	; 0x17f2 <ftoa>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    242e:	81 e2       	ldi	r24, 0x21	; 33
    2430:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    2432:	f5 01       	movw	r30, r10
    2434:	81 81       	ldd	r24, Z+1	; 0x01
    2436:	8f 8f       	std	Y+31, r24	; 0x1f
    2438:	82 81       	ldd	r24, Z+2	; 0x02
    243a:	88 a3       	std	Y+32, r24	; 0x20
    243c:	83 81       	ldd	r24, Z+3	; 0x03
    243e:	89 a3       	std	Y+33, r24	; 0x21
    2440:	e6 2d       	mov	r30, r6
    2442:	f7 2d       	mov	r31, r7
    2444:	de 01       	movw	r26, r28
    2446:	92 96       	adiw	r26, 0x22	; 34
    2448:	00 e0       	ldi	r16, 0x00	; 0
    244a:	10 e0       	ldi	r17, 0x00	; 0
    244c:	af 01       	movw	r20, r30
    244e:	06 c0       	rjmp	.+12     	; 0x245c <main+0xb5c>
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    2450:	fa 01       	movw	r30, r20
    2452:	81 91       	ld	r24, Z+
    2454:	af 01       	movw	r20, r30
    2456:	8d 93       	st	X+, r24
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    2458:	0f 5f       	subi	r16, 0xFF	; 255
    245a:	1f 4f       	sbci	r17, 0xFF	; 255
    245c:	6c 96       	adiw	r28, 0x1c	; 28
    245e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2460:	ff ad       	ldd	r31, Y+63	; 0x3f
    2462:	6c 97       	sbiw	r28, 0x1c	; 28
    2464:	01 90       	ld	r0, Z+
    2466:	00 20       	and	r0, r0
    2468:	e9 f7       	brne	.-6      	; 0x2464 <main+0xb64>
    246a:	cf 01       	movw	r24, r30
    246c:	6c 96       	adiw	r28, 0x1c	; 28
    246e:	2e ad       	ldd	r18, Y+62	; 0x3e
    2470:	3f ad       	ldd	r19, Y+63	; 0x3f
    2472:	6c 97       	sbiw	r28, 0x1c	; 28
    2474:	82 1b       	sub	r24, r18
    2476:	93 0b       	sbc	r25, r19
    2478:	02 96       	adiw	r24, 0x02	; 2
    247a:	08 17       	cp	r16, r24
    247c:	19 07       	cpc	r17, r25
    247e:	40 f3       	brcs	.-48     	; 0x2450 <main+0xb50>
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    2480:	78 01       	movw	r14, r16
    2482:	3f ef       	ldi	r19, 0xFF	; 255
    2484:	e3 1a       	sub	r14, r19
    2486:	f3 0a       	sbc	r15, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    2488:	1e 14       	cp	r1, r14
    248a:	1f 04       	cpc	r1, r15
    248c:	14 f0       	brlt	.+4      	; 0x2492 <main+0xb92>
    248e:	0c 94 26 21 	jmp	0x424c	; 0x424c <main+0x294c>
    2492:	de 01       	movw	r26, r28
    2494:	5e 96       	adiw	r26, 0x1e	; 30
    2496:	67 01       	movw	r12, r14
    2498:	ca 0e       	add	r12, r26
    249a:	db 1e       	adc	r13, r27
    249c:	e0 e0       	ldi	r30, 0x00	; 0
    249e:	f0 e0       	ldi	r31, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    24a0:	98 e0       	ldi	r25, 0x08	; 8
    24a2:	80 e0       	ldi	r24, 0x00	; 0
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    24a4:	4d 91       	ld	r20, X+
		tmp = (int)((CRC >> 8) ^ int_c);
    24a6:	2f 2f       	mov	r18, r31
    24a8:	33 27       	eor	r19, r19
    24aa:	27 fd       	sbrc	r18, 7
    24ac:	3a 95       	dec	r19
    24ae:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    24b0:	32 2f       	mov	r19, r18
    24b2:	22 27       	eor	r18, r18
    24b4:	49 2f       	mov	r20, r25
    24b6:	58 2f       	mov	r21, r24
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    24b8:	33 23       	and	r19, r19
    24ba:	3c f4       	brge	.+14     	; 0x24ca <main+0xbca>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    24bc:	22 0f       	add	r18, r18
    24be:	33 1f       	adc	r19, r19
    24c0:	61 e2       	ldi	r22, 0x21	; 33
    24c2:	26 27       	eor	r18, r22
    24c4:	60 e1       	ldi	r22, 0x10	; 16
    24c6:	36 27       	eor	r19, r22
    24c8:	02 c0       	rjmp	.+4      	; 0x24ce <main+0xbce>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    24ca:	22 0f       	add	r18, r18
    24cc:	33 1f       	adc	r19, r19
    24ce:	41 50       	subi	r20, 0x01	; 1
    24d0:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    24d2:	91 f7       	brne	.-28     	; 0x24b8 <main+0xbb8>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    24d4:	fe 2f       	mov	r31, r30
    24d6:	ee 27       	eor	r30, r30
    24d8:	e2 27       	eor	r30, r18
    24da:	f3 27       	eor	r31, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    24dc:	ac 15       	cp	r26, r12
    24de:	bd 05       	cpc	r27, r13
    24e0:	09 f7       	brne	.-62     	; 0x24a4 <main+0xba4>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    24e2:	6f 01       	movw	r12, r30
    24e4:	40 e1       	ldi	r20, 0x10	; 16
    24e6:	6c e0       	ldi	r22, 0x0C	; 12
    24e8:	74 e0       	ldi	r23, 0x04	; 4
    24ea:	cf 01       	movw	r24, r30
    24ec:	0e 94 ac 23 	call	0x4758	; 0x4758 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    24f0:	8c e0       	ldi	r24, 0x0C	; 12
    24f2:	94 e0       	ldi	r25, 0x04	; 4
    24f4:	0e 94 a2 23 	call	0x4744	; 0x4744 <strupr>
	if(crcXmodem < 0x10)
    24f8:	80 e1       	ldi	r24, 0x10	; 16
    24fa:	c8 16       	cp	r12, r24
    24fc:	d1 04       	cpc	r13, r1
    24fe:	98 f4       	brcc	.+38     	; 0x2526 <main+0xc26>
	{
		tx_string[cnt+4] = crc[0];
    2500:	80 91 0c 04 	lds	r24, 0x040C
    2504:	fe 01       	movw	r30, r28
    2506:	e0 0f       	add	r30, r16
    2508:	f1 1f       	adc	r31, r17
    250a:	82 a3       	std	Z+34, r24	; 0x22
		tx_string[cnt+3] = '0';
    250c:	80 e3       	ldi	r24, 0x30	; 48
    250e:	fe 01       	movw	r30, r28
    2510:	e0 0f       	add	r30, r16
    2512:	f1 1f       	adc	r31, r17
    2514:	81 a3       	std	Z+33, r24	; 0x21
		tx_string[cnt+2] = '0';
    2516:	fe 01       	movw	r30, r28
    2518:	e0 0f       	add	r30, r16
    251a:	f1 1f       	adc	r31, r17
    251c:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';
    251e:	fe 01       	movw	r30, r28
    2520:	ee 0d       	add	r30, r14
    2522:	ff 1d       	adc	r31, r15
    2524:	86 8f       	std	Z+30, r24	; 0x1e
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    2526:	c6 01       	movw	r24, r12
    2528:	40 97       	sbiw	r24, 0x10	; 16
    252a:	80 3f       	cpi	r24, 0xF0	; 240
    252c:	91 05       	cpc	r25, r1
    252e:	b8 f4       	brcc	.+46     	; 0x255e <main+0xc5e>
	{
		tx_string[cnt+4] = crc[1];
    2530:	ac e0       	ldi	r26, 0x0C	; 12
    2532:	b4 e0       	ldi	r27, 0x04	; 4
    2534:	11 96       	adiw	r26, 0x01	; 1
    2536:	8c 91       	ld	r24, X
    2538:	11 97       	sbiw	r26, 0x01	; 1
    253a:	fe 01       	movw	r30, r28
    253c:	e0 0f       	add	r30, r16
    253e:	f1 1f       	adc	r31, r17
    2540:	82 a3       	std	Z+34, r24	; 0x22
		tx_string[cnt+3] = crc[0];
    2542:	8c 91       	ld	r24, X
    2544:	fe 01       	movw	r30, r28
    2546:	e0 0f       	add	r30, r16
    2548:	f1 1f       	adc	r31, r17
    254a:	81 a3       	std	Z+33, r24	; 0x21
		tx_string[cnt+2] = '0';
    254c:	80 e3       	ldi	r24, 0x30	; 48
    254e:	fe 01       	movw	r30, r28
    2550:	e0 0f       	add	r30, r16
    2552:	f1 1f       	adc	r31, r17
    2554:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';		
    2556:	fe 01       	movw	r30, r28
    2558:	ee 0d       	add	r30, r14
    255a:	ff 1d       	adc	r31, r15
    255c:	86 8f       	std	Z+30, r24	; 0x1e
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    255e:	c6 01       	movw	r24, r12
    2560:	9a 95       	dec	r25
    2562:	81 15       	cp	r24, r1
    2564:	9f 40       	sbci	r25, 0x0F	; 15
    2566:	b8 f4       	brcc	.+46     	; 0x2596 <main+0xc96>
	{
		tx_string[cnt+4] = crc[2];
    2568:	ec e0       	ldi	r30, 0x0C	; 12
    256a:	f4 e0       	ldi	r31, 0x04	; 4
    256c:	82 81       	ldd	r24, Z+2	; 0x02
    256e:	de 01       	movw	r26, r28
    2570:	a0 0f       	add	r26, r16
    2572:	b1 1f       	adc	r27, r17
    2574:	92 96       	adiw	r26, 0x22	; 34
    2576:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[1];
    2578:	81 81       	ldd	r24, Z+1	; 0x01
    257a:	de 01       	movw	r26, r28
    257c:	a0 0f       	add	r26, r16
    257e:	b1 1f       	adc	r27, r17
    2580:	91 96       	adiw	r26, 0x21	; 33
    2582:	8c 93       	st	X, r24
    2584:	91 97       	sbiw	r26, 0x21	; 33
		tx_string[cnt+2] = crc[0];
    2586:	80 81       	ld	r24, Z
    2588:	fd 01       	movw	r30, r26
    258a:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';		
    258c:	80 e3       	ldi	r24, 0x30	; 48
    258e:	fe 01       	movw	r30, r28
    2590:	ee 0d       	add	r30, r14
    2592:	ff 1d       	adc	r31, r15
    2594:	86 8f       	std	Z+30, r24	; 0x1e
	}
	if(crcXmodem >= 0x1000)
    2596:	c1 14       	cp	r12, r1
    2598:	b0 e1       	ldi	r27, 0x10	; 16
    259a:	db 06       	cpc	r13, r27
    259c:	c0 f0       	brcs	.+48     	; 0x25ce <main+0xcce>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    259e:	de 01       	movw	r26, r28
    25a0:	ae 0d       	add	r26, r14
    25a2:	bf 1d       	adc	r27, r15
    25a4:	ec e0       	ldi	r30, 0x0C	; 12
    25a6:	f4 e0       	ldi	r31, 0x04	; 4
    25a8:	80 81       	ld	r24, Z
    25aa:	5e 96       	adiw	r26, 0x1e	; 30
    25ac:	8c 93       	st	X, r24
		tx_string[cnt+2] = crc[1];
    25ae:	81 81       	ldd	r24, Z+1	; 0x01
    25b0:	de 01       	movw	r26, r28
    25b2:	a0 0f       	add	r26, r16
    25b4:	b1 1f       	adc	r27, r17
    25b6:	90 96       	adiw	r26, 0x20	; 32
    25b8:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[2];
    25ba:	82 81       	ldd	r24, Z+2	; 0x02
    25bc:	de 01       	movw	r26, r28
    25be:	a0 0f       	add	r26, r16
    25c0:	b1 1f       	adc	r27, r17
    25c2:	91 96       	adiw	r26, 0x21	; 33
    25c4:	8c 93       	st	X, r24
    25c6:	91 97       	sbiw	r26, 0x21	; 33
		tx_string[cnt+4] = crc[3];
    25c8:	83 81       	ldd	r24, Z+3	; 0x03
    25ca:	fd 01       	movw	r30, r26
    25cc:	82 a3       	std	Z+34, r24	; 0x22
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    25ce:	c8 01       	movw	r24, r16
    25d0:	05 96       	adiw	r24, 0x05	; 5
    25d2:	fe 01       	movw	r30, r28
    25d4:	e8 0f       	add	r30, r24
    25d6:	f9 1f       	adc	r31, r25
    25d8:	2d e0       	ldi	r18, 0x0D	; 13
    25da:	26 8f       	std	Z+30, r18	; 0x1e
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    25dc:	99 23       	and	r25, r25
    25de:	0c f4       	brge	.+2      	; 0x25e2 <main+0xce2>
    25e0:	30 c4       	rjmp	.+2144   	; 0x2e42 <main+0x1542>
    25e2:	fe 01       	movw	r30, r28
    25e4:	7e 96       	adiw	r30, 0x1e	; 30
    25e6:	a8 01       	movw	r20, r16
    25e8:	4a 5f       	subi	r20, 0xFA	; 250
    25ea:	5f 4f       	sbci	r21, 0xFF	; 255
    25ec:	4e 0f       	add	r20, r30
    25ee:	5f 1f       	adc	r21, r31
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    25f0:	90 e0       	ldi	r25, 0x00	; 0
	{
		uart_putchar(tx_string[i]);
    25f2:	21 91       	ld	r18, Z+
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    25f4:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    25f6:	d4 01       	movw	r26, r8
    25f8:	11 96       	adiw	r26, 0x01	; 1
    25fa:	3c 91       	ld	r19, X
    25fc:	11 97       	sbiw	r26, 0x01	; 1
    25fe:	8c 91       	ld	r24, X
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    2600:	38 13       	cpse	r19, r24
    2602:	05 c0       	rjmp	.+10     	; 0x260e <main+0xd0e>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    2604:	a1 ec       	ldi	r26, 0xC1	; 193
    2606:	b0 e0       	ldi	r27, 0x00	; 0
    2608:	8c 91       	ld	r24, X
    260a:	80 62       	ori	r24, 0x20	; 32
    260c:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    260e:	d4 01       	movw	r26, r8
    2610:	8c 91       	ld	r24, X
    2612:	13 96       	adiw	r26, 0x03	; 3
    2614:	6d 91       	ld	r22, X+
    2616:	7c 91       	ld	r23, X
    2618:	14 97       	sbiw	r26, 0x04	; 4
    261a:	db 01       	movw	r26, r22
    261c:	a8 0f       	add	r26, r24
    261e:	b1 1d       	adc	r27, r1
    2620:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    2622:	d4 01       	movw	r26, r8
    2624:	8c 91       	ld	r24, X
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    2626:	68 2f       	mov	r22, r24
    2628:	70 e0       	ldi	r23, 0x00	; 0
    262a:	12 96       	adiw	r26, 0x02	; 2
    262c:	2c 91       	ld	r18, X
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	21 50       	subi	r18, 0x01	; 1
    2632:	31 09       	sbc	r19, r1
    2634:	62 17       	cp	r22, r18
    2636:	73 07       	cpc	r23, r19
    2638:	11 f0       	breq	.+4      	; 0x263e <main+0xd3e>
    263a:	8f 5f       	subi	r24, 0xFF	; 255
    263c:	01 c0       	rjmp	.+2      	; 0x2640 <main+0xd40>
    263e:	89 2f       	mov	r24, r25
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    2640:	d4 01       	movw	r26, r8
    2642:	8c 93       	st	X, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    2644:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    2646:	e4 17       	cp	r30, r20
    2648:	f5 07       	cpc	r31, r21
    264a:	99 f6       	brne	.-90     	; 0x25f2 <main+0xcf2>
    264c:	fa c3       	rjmp	.+2036   	; 0x2e42 <main+0x1542>
		ftoa(ch0.D_err, tx_string);
		printStatus(tx_string);
		break;
		
		case 104:	// Send ch0.TempSetPoint
		ftoa(ch0.TempSetPoint, tx_string);
    264e:	60 91 16 04 	lds	r22, 0x0416
    2652:	70 91 17 04 	lds	r23, 0x0417
    2656:	80 91 18 04 	lds	r24, 0x0418
    265a:	90 91 19 04 	lds	r25, 0x0419
    265e:	46 2d       	mov	r20, r6
    2660:	57 2d       	mov	r21, r7
    2662:	c7 d8       	rcall	.-3698   	; 0x17f2 <ftoa>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    2664:	81 e2       	ldi	r24, 0x21	; 33
    2666:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    2668:	f5 01       	movw	r30, r10
    266a:	81 81       	ldd	r24, Z+1	; 0x01
    266c:	8f 8f       	std	Y+31, r24	; 0x1f
    266e:	82 81       	ldd	r24, Z+2	; 0x02
    2670:	88 a3       	std	Y+32, r24	; 0x20
    2672:	83 81       	ldd	r24, Z+3	; 0x03
    2674:	89 a3       	std	Y+33, r24	; 0x21
    2676:	e6 2d       	mov	r30, r6
    2678:	f7 2d       	mov	r31, r7
    267a:	de 01       	movw	r26, r28
    267c:	92 96       	adiw	r26, 0x22	; 34
    267e:	00 e0       	ldi	r16, 0x00	; 0
    2680:	10 e0       	ldi	r17, 0x00	; 0
    2682:	af 01       	movw	r20, r30
    2684:	06 c0       	rjmp	.+12     	; 0x2692 <main+0xd92>
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    2686:	fa 01       	movw	r30, r20
    2688:	81 91       	ld	r24, Z+
    268a:	af 01       	movw	r20, r30
    268c:	8d 93       	st	X+, r24
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    268e:	0f 5f       	subi	r16, 0xFF	; 255
    2690:	1f 4f       	sbci	r17, 0xFF	; 255
    2692:	6c 96       	adiw	r28, 0x1c	; 28
    2694:	ee ad       	ldd	r30, Y+62	; 0x3e
    2696:	ff ad       	ldd	r31, Y+63	; 0x3f
    2698:	6c 97       	sbiw	r28, 0x1c	; 28
    269a:	01 90       	ld	r0, Z+
    269c:	00 20       	and	r0, r0
    269e:	e9 f7       	brne	.-6      	; 0x269a <main+0xd9a>
    26a0:	cf 01       	movw	r24, r30
    26a2:	6c 96       	adiw	r28, 0x1c	; 28
    26a4:	2e ad       	ldd	r18, Y+62	; 0x3e
    26a6:	3f ad       	ldd	r19, Y+63	; 0x3f
    26a8:	6c 97       	sbiw	r28, 0x1c	; 28
    26aa:	82 1b       	sub	r24, r18
    26ac:	93 0b       	sbc	r25, r19
    26ae:	02 96       	adiw	r24, 0x02	; 2
    26b0:	08 17       	cp	r16, r24
    26b2:	19 07       	cpc	r17, r25
    26b4:	40 f3       	brcs	.-48     	; 0x2686 <main+0xd86>
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    26b6:	78 01       	movw	r14, r16
    26b8:	3f ef       	ldi	r19, 0xFF	; 255
    26ba:	e3 1a       	sub	r14, r19
    26bc:	f3 0a       	sbc	r15, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    26be:	1e 14       	cp	r1, r14
    26c0:	1f 04       	cpc	r1, r15
    26c2:	14 f0       	brlt	.+4      	; 0x26c8 <main+0xdc8>
    26c4:	0c 94 33 21 	jmp	0x4266	; 0x4266 <main+0x2966>
    26c8:	de 01       	movw	r26, r28
    26ca:	5e 96       	adiw	r26, 0x1e	; 30
    26cc:	67 01       	movw	r12, r14
    26ce:	ca 0e       	add	r12, r26
    26d0:	db 1e       	adc	r13, r27
    26d2:	e0 e0       	ldi	r30, 0x00	; 0
    26d4:	f0 e0       	ldi	r31, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    26d6:	98 e0       	ldi	r25, 0x08	; 8
    26d8:	80 e0       	ldi	r24, 0x00	; 0
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    26da:	4d 91       	ld	r20, X+
		tmp = (int)((CRC >> 8) ^ int_c);
    26dc:	2f 2f       	mov	r18, r31
    26de:	33 27       	eor	r19, r19
    26e0:	27 fd       	sbrc	r18, 7
    26e2:	3a 95       	dec	r19
    26e4:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    26e6:	32 2f       	mov	r19, r18
    26e8:	22 27       	eor	r18, r18
    26ea:	49 2f       	mov	r20, r25
    26ec:	58 2f       	mov	r21, r24
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    26ee:	33 23       	and	r19, r19
    26f0:	3c f4       	brge	.+14     	; 0x2700 <main+0xe00>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    26f2:	22 0f       	add	r18, r18
    26f4:	33 1f       	adc	r19, r19
    26f6:	61 e2       	ldi	r22, 0x21	; 33
    26f8:	26 27       	eor	r18, r22
    26fa:	60 e1       	ldi	r22, 0x10	; 16
    26fc:	36 27       	eor	r19, r22
    26fe:	02 c0       	rjmp	.+4      	; 0x2704 <main+0xe04>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    2700:	22 0f       	add	r18, r18
    2702:	33 1f       	adc	r19, r19
    2704:	41 50       	subi	r20, 0x01	; 1
    2706:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    2708:	91 f7       	brne	.-28     	; 0x26ee <main+0xdee>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    270a:	fe 2f       	mov	r31, r30
    270c:	ee 27       	eor	r30, r30
    270e:	e2 27       	eor	r30, r18
    2710:	f3 27       	eor	r31, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    2712:	ac 15       	cp	r26, r12
    2714:	bd 05       	cpc	r27, r13
    2716:	09 f7       	brne	.-62     	; 0x26da <main+0xdda>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    2718:	6f 01       	movw	r12, r30
    271a:	40 e1       	ldi	r20, 0x10	; 16
    271c:	6c e0       	ldi	r22, 0x0C	; 12
    271e:	74 e0       	ldi	r23, 0x04	; 4
    2720:	cf 01       	movw	r24, r30
    2722:	0e 94 ac 23 	call	0x4758	; 0x4758 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    2726:	8c e0       	ldi	r24, 0x0C	; 12
    2728:	94 e0       	ldi	r25, 0x04	; 4
    272a:	0e 94 a2 23 	call	0x4744	; 0x4744 <strupr>
	if(crcXmodem < 0x10)
    272e:	80 e1       	ldi	r24, 0x10	; 16
    2730:	c8 16       	cp	r12, r24
    2732:	d1 04       	cpc	r13, r1
    2734:	98 f4       	brcc	.+38     	; 0x275c <main+0xe5c>
	{
		tx_string[cnt+4] = crc[0];
    2736:	80 91 0c 04 	lds	r24, 0x040C
    273a:	fe 01       	movw	r30, r28
    273c:	e0 0f       	add	r30, r16
    273e:	f1 1f       	adc	r31, r17
    2740:	82 a3       	std	Z+34, r24	; 0x22
		tx_string[cnt+3] = '0';
    2742:	80 e3       	ldi	r24, 0x30	; 48
    2744:	fe 01       	movw	r30, r28
    2746:	e0 0f       	add	r30, r16
    2748:	f1 1f       	adc	r31, r17
    274a:	81 a3       	std	Z+33, r24	; 0x21
		tx_string[cnt+2] = '0';
    274c:	fe 01       	movw	r30, r28
    274e:	e0 0f       	add	r30, r16
    2750:	f1 1f       	adc	r31, r17
    2752:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';
    2754:	fe 01       	movw	r30, r28
    2756:	ee 0d       	add	r30, r14
    2758:	ff 1d       	adc	r31, r15
    275a:	86 8f       	std	Z+30, r24	; 0x1e
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    275c:	c6 01       	movw	r24, r12
    275e:	40 97       	sbiw	r24, 0x10	; 16
    2760:	80 3f       	cpi	r24, 0xF0	; 240
    2762:	91 05       	cpc	r25, r1
    2764:	b8 f4       	brcc	.+46     	; 0x2794 <main+0xe94>
	{
		tx_string[cnt+4] = crc[1];
    2766:	ac e0       	ldi	r26, 0x0C	; 12
    2768:	b4 e0       	ldi	r27, 0x04	; 4
    276a:	11 96       	adiw	r26, 0x01	; 1
    276c:	8c 91       	ld	r24, X
    276e:	11 97       	sbiw	r26, 0x01	; 1
    2770:	fe 01       	movw	r30, r28
    2772:	e0 0f       	add	r30, r16
    2774:	f1 1f       	adc	r31, r17
    2776:	82 a3       	std	Z+34, r24	; 0x22
		tx_string[cnt+3] = crc[0];
    2778:	8c 91       	ld	r24, X
    277a:	fe 01       	movw	r30, r28
    277c:	e0 0f       	add	r30, r16
    277e:	f1 1f       	adc	r31, r17
    2780:	81 a3       	std	Z+33, r24	; 0x21
		tx_string[cnt+2] = '0';
    2782:	80 e3       	ldi	r24, 0x30	; 48
    2784:	fe 01       	movw	r30, r28
    2786:	e0 0f       	add	r30, r16
    2788:	f1 1f       	adc	r31, r17
    278a:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';		
    278c:	fe 01       	movw	r30, r28
    278e:	ee 0d       	add	r30, r14
    2790:	ff 1d       	adc	r31, r15
    2792:	86 8f       	std	Z+30, r24	; 0x1e
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    2794:	c6 01       	movw	r24, r12
    2796:	9a 95       	dec	r25
    2798:	81 15       	cp	r24, r1
    279a:	9f 40       	sbci	r25, 0x0F	; 15
    279c:	b8 f4       	brcc	.+46     	; 0x27cc <main+0xecc>
	{
		tx_string[cnt+4] = crc[2];
    279e:	ec e0       	ldi	r30, 0x0C	; 12
    27a0:	f4 e0       	ldi	r31, 0x04	; 4
    27a2:	82 81       	ldd	r24, Z+2	; 0x02
    27a4:	de 01       	movw	r26, r28
    27a6:	a0 0f       	add	r26, r16
    27a8:	b1 1f       	adc	r27, r17
    27aa:	92 96       	adiw	r26, 0x22	; 34
    27ac:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[1];
    27ae:	81 81       	ldd	r24, Z+1	; 0x01
    27b0:	de 01       	movw	r26, r28
    27b2:	a0 0f       	add	r26, r16
    27b4:	b1 1f       	adc	r27, r17
    27b6:	91 96       	adiw	r26, 0x21	; 33
    27b8:	8c 93       	st	X, r24
    27ba:	91 97       	sbiw	r26, 0x21	; 33
		tx_string[cnt+2] = crc[0];
    27bc:	80 81       	ld	r24, Z
    27be:	fd 01       	movw	r30, r26
    27c0:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';		
    27c2:	80 e3       	ldi	r24, 0x30	; 48
    27c4:	fe 01       	movw	r30, r28
    27c6:	ee 0d       	add	r30, r14
    27c8:	ff 1d       	adc	r31, r15
    27ca:	86 8f       	std	Z+30, r24	; 0x1e
	}
	if(crcXmodem >= 0x1000)
    27cc:	c1 14       	cp	r12, r1
    27ce:	b0 e1       	ldi	r27, 0x10	; 16
    27d0:	db 06       	cpc	r13, r27
    27d2:	c0 f0       	brcs	.+48     	; 0x2804 <main+0xf04>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    27d4:	de 01       	movw	r26, r28
    27d6:	ae 0d       	add	r26, r14
    27d8:	bf 1d       	adc	r27, r15
    27da:	ec e0       	ldi	r30, 0x0C	; 12
    27dc:	f4 e0       	ldi	r31, 0x04	; 4
    27de:	80 81       	ld	r24, Z
    27e0:	5e 96       	adiw	r26, 0x1e	; 30
    27e2:	8c 93       	st	X, r24
		tx_string[cnt+2] = crc[1];
    27e4:	81 81       	ldd	r24, Z+1	; 0x01
    27e6:	de 01       	movw	r26, r28
    27e8:	a0 0f       	add	r26, r16
    27ea:	b1 1f       	adc	r27, r17
    27ec:	90 96       	adiw	r26, 0x20	; 32
    27ee:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[2];
    27f0:	82 81       	ldd	r24, Z+2	; 0x02
    27f2:	de 01       	movw	r26, r28
    27f4:	a0 0f       	add	r26, r16
    27f6:	b1 1f       	adc	r27, r17
    27f8:	91 96       	adiw	r26, 0x21	; 33
    27fa:	8c 93       	st	X, r24
    27fc:	91 97       	sbiw	r26, 0x21	; 33
		tx_string[cnt+4] = crc[3];
    27fe:	83 81       	ldd	r24, Z+3	; 0x03
    2800:	fd 01       	movw	r30, r26
    2802:	82 a3       	std	Z+34, r24	; 0x22
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    2804:	c8 01       	movw	r24, r16
    2806:	05 96       	adiw	r24, 0x05	; 5
    2808:	fe 01       	movw	r30, r28
    280a:	e8 0f       	add	r30, r24
    280c:	f9 1f       	adc	r31, r25
    280e:	2d e0       	ldi	r18, 0x0D	; 13
    2810:	26 8f       	std	Z+30, r18	; 0x1e
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    2812:	99 23       	and	r25, r25
    2814:	0c f4       	brge	.+2      	; 0x2818 <main+0xf18>
    2816:	15 c3       	rjmp	.+1578   	; 0x2e42 <main+0x1542>
    2818:	fe 01       	movw	r30, r28
    281a:	7e 96       	adiw	r30, 0x1e	; 30
    281c:	a8 01       	movw	r20, r16
    281e:	4a 5f       	subi	r20, 0xFA	; 250
    2820:	5f 4f       	sbci	r21, 0xFF	; 255
    2822:	4e 0f       	add	r20, r30
    2824:	5f 1f       	adc	r21, r31
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    2826:	90 e0       	ldi	r25, 0x00	; 0
	{
		uart_putchar(tx_string[i]);
    2828:	21 91       	ld	r18, Z+
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    282a:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    282c:	d4 01       	movw	r26, r8
    282e:	11 96       	adiw	r26, 0x01	; 1
    2830:	3c 91       	ld	r19, X
    2832:	11 97       	sbiw	r26, 0x01	; 1
    2834:	8c 91       	ld	r24, X
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    2836:	38 13       	cpse	r19, r24
    2838:	05 c0       	rjmp	.+10     	; 0x2844 <main+0xf44>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    283a:	a1 ec       	ldi	r26, 0xC1	; 193
    283c:	b0 e0       	ldi	r27, 0x00	; 0
    283e:	8c 91       	ld	r24, X
    2840:	80 62       	ori	r24, 0x20	; 32
    2842:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    2844:	d4 01       	movw	r26, r8
    2846:	8c 91       	ld	r24, X
    2848:	13 96       	adiw	r26, 0x03	; 3
    284a:	6d 91       	ld	r22, X+
    284c:	7c 91       	ld	r23, X
    284e:	14 97       	sbiw	r26, 0x04	; 4
    2850:	db 01       	movw	r26, r22
    2852:	a8 0f       	add	r26, r24
    2854:	b1 1d       	adc	r27, r1
    2856:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    2858:	d4 01       	movw	r26, r8
    285a:	8c 91       	ld	r24, X
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    285c:	68 2f       	mov	r22, r24
    285e:	70 e0       	ldi	r23, 0x00	; 0
    2860:	12 96       	adiw	r26, 0x02	; 2
    2862:	2c 91       	ld	r18, X
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	21 50       	subi	r18, 0x01	; 1
    2868:	31 09       	sbc	r19, r1
    286a:	62 17       	cp	r22, r18
    286c:	73 07       	cpc	r23, r19
    286e:	11 f0       	breq	.+4      	; 0x2874 <main+0xf74>
    2870:	8f 5f       	subi	r24, 0xFF	; 255
    2872:	01 c0       	rjmp	.+2      	; 0x2876 <main+0xf76>
    2874:	89 2f       	mov	r24, r25
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    2876:	d4 01       	movw	r26, r8
    2878:	8c 93       	st	X, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    287a:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    287c:	e4 17       	cp	r30, r20
    287e:	f5 07       	cpc	r31, r21
    2880:	99 f6       	brne	.-90     	; 0x2828 <main+0xf28>
    2882:	df c2       	rjmp	.+1470   	; 0x2e42 <main+0x1542>
		ftoa(ch0.TempSetPoint, tx_string);
		printStatus(tx_string);
		break;
		
		case 105:	// Send Pgain ch0
		ftoa(ch0.Pgain, tx_string);
    2884:	60 91 32 04 	lds	r22, 0x0432
    2888:	70 91 33 04 	lds	r23, 0x0433
    288c:	80 91 34 04 	lds	r24, 0x0434
    2890:	90 91 35 04 	lds	r25, 0x0435
    2894:	46 2d       	mov	r20, r6
    2896:	57 2d       	mov	r21, r7
    2898:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <ftoa>
		printStatus(tx_string);
    289c:	86 2d       	mov	r24, r6
    289e:	97 2d       	mov	r25, r7
    28a0:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    28a4:	ce c2       	rjmp	.+1436   	; 0x2e42 <main+0x1542>
		break;								
		
		case 106:	// Send Igain ch0
		ftoa(ch0.Igain, tx_string);
    28a6:	60 91 36 04 	lds	r22, 0x0436
    28aa:	70 91 37 04 	lds	r23, 0x0437
    28ae:	80 91 38 04 	lds	r24, 0x0438
    28b2:	90 91 39 04 	lds	r25, 0x0439
    28b6:	46 2d       	mov	r20, r6
    28b8:	57 2d       	mov	r21, r7
    28ba:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <ftoa>
		printStatus(tx_string);
    28be:	86 2d       	mov	r24, r6
    28c0:	97 2d       	mov	r25, r7
    28c2:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    28c6:	bd c2       	rjmp	.+1402   	; 0x2e42 <main+0x1542>
		break;
		
		case 107:	// Send Dgain ch0
		ftoa(ch0.Dgain, tx_string);
    28c8:	60 91 3a 04 	lds	r22, 0x043A
    28cc:	70 91 3b 04 	lds	r23, 0x043B
    28d0:	80 91 3c 04 	lds	r24, 0x043C
    28d4:	90 91 3d 04 	lds	r25, 0x043D
    28d8:	46 2d       	mov	r20, r6
    28da:	57 2d       	mov	r21, r7
    28dc:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <ftoa>
		printStatus(tx_string);
    28e0:	86 2d       	mov	r24, r6
    28e2:	97 2d       	mov	r25, r7
    28e4:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    28e8:	ac c2       	rjmp	.+1368   	; 0x2e42 <main+0x1542>
		break;
		
		// *** Channel 1 ***
		case 200:	// Send sensor 1 temperature
		ftoa(ch1.TempSensor, tx_string);
    28ea:	60 91 7d 04 	lds	r22, 0x047D
    28ee:	70 91 7e 04 	lds	r23, 0x047E
    28f2:	80 91 7f 04 	lds	r24, 0x047F
    28f6:	90 91 80 04 	lds	r25, 0x0480
    28fa:	46 2d       	mov	r20, r6
    28fc:	57 2d       	mov	r21, r7
    28fe:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <ftoa>
		printStatus(tx_string);
    2902:	86 2d       	mov	r24, r6
    2904:	97 2d       	mov	r25, r7
    2906:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    290a:	9b c2       	rjmp	.+1334   	; 0x2e42 <main+0x1542>
		break;
		
		case 201:	// Send P part of PID-controller 1
		ftoa(ch1.P_err, tx_string);
    290c:	60 91 81 04 	lds	r22, 0x0481
    2910:	70 91 82 04 	lds	r23, 0x0482
    2914:	80 91 83 04 	lds	r24, 0x0483
    2918:	90 91 84 04 	lds	r25, 0x0484
    291c:	46 2d       	mov	r20, r6
    291e:	57 2d       	mov	r21, r7
    2920:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <ftoa>
		printStatus(tx_string);
    2924:	86 2d       	mov	r24, r6
    2926:	97 2d       	mov	r25, r7
    2928:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    292c:	8a c2       	rjmp	.+1300   	; 0x2e42 <main+0x1542>
		break;
		
		case 202:	// Send I part of PID-controller 1
		ftoa(ch1.I_err, tx_string);
    292e:	60 91 85 04 	lds	r22, 0x0485
    2932:	70 91 86 04 	lds	r23, 0x0486
    2936:	80 91 87 04 	lds	r24, 0x0487
    293a:	90 91 88 04 	lds	r25, 0x0488
    293e:	46 2d       	mov	r20, r6
    2940:	57 2d       	mov	r21, r7
    2942:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <ftoa>
		printStatus(tx_string);
    2946:	86 2d       	mov	r24, r6
    2948:	97 2d       	mov	r25, r7
    294a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    294e:	79 c2       	rjmp	.+1266   	; 0x2e42 <main+0x1542>
		break;
				
		case 203:	// Send D part of PID-controller 1
		ftoa(ch1.D_err, tx_string);
    2950:	60 91 89 04 	lds	r22, 0x0489
    2954:	70 91 8a 04 	lds	r23, 0x048A
    2958:	80 91 8b 04 	lds	r24, 0x048B
    295c:	90 91 8c 04 	lds	r25, 0x048C
    2960:	46 2d       	mov	r20, r6
    2962:	57 2d       	mov	r21, r7
    2964:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <ftoa>
		printStatus(tx_string);
    2968:	86 2d       	mov	r24, r6
    296a:	97 2d       	mov	r25, r7
    296c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2970:	68 c2       	rjmp	.+1232   	; 0x2e42 <main+0x1542>
		break;
		
		case 204:	// Send ch1.TempSetPoint
		ftoa(ch1.TempSetPoint, tx_string);
    2972:	60 91 79 04 	lds	r22, 0x0479
    2976:	70 91 7a 04 	lds	r23, 0x047A
    297a:	80 91 7b 04 	lds	r24, 0x047B
    297e:	90 91 7c 04 	lds	r25, 0x047C
    2982:	46 2d       	mov	r20, r6
    2984:	57 2d       	mov	r21, r7
    2986:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <ftoa>
		printStatus(tx_string);
    298a:	86 2d       	mov	r24, r6
    298c:	97 2d       	mov	r25, r7
    298e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2992:	57 c2       	rjmp	.+1198   	; 0x2e42 <main+0x1542>
		break;
		
		case 205:	// Send Pgain ch1
		ftoa(ch1.Pgain, tx_string);
    2994:	60 91 95 04 	lds	r22, 0x0495
    2998:	70 91 96 04 	lds	r23, 0x0496
    299c:	80 91 97 04 	lds	r24, 0x0497
    29a0:	90 91 98 04 	lds	r25, 0x0498
    29a4:	46 2d       	mov	r20, r6
    29a6:	57 2d       	mov	r21, r7
    29a8:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <ftoa>
		printStatus(tx_string);
    29ac:	86 2d       	mov	r24, r6
    29ae:	97 2d       	mov	r25, r7
    29b0:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    29b4:	46 c2       	rjmp	.+1164   	; 0x2e42 <main+0x1542>
		break;
		
		case 206:	// Send Igain ch1
		ftoa(ch1.Igain, tx_string);
    29b6:	60 91 99 04 	lds	r22, 0x0499
    29ba:	70 91 9a 04 	lds	r23, 0x049A
    29be:	80 91 9b 04 	lds	r24, 0x049B
    29c2:	90 91 9c 04 	lds	r25, 0x049C
    29c6:	46 2d       	mov	r20, r6
    29c8:	57 2d       	mov	r21, r7
    29ca:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <ftoa>
		printStatus(tx_string);
    29ce:	86 2d       	mov	r24, r6
    29d0:	97 2d       	mov	r25, r7
    29d2:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    29d6:	35 c2       	rjmp	.+1130   	; 0x2e42 <main+0x1542>
		break;
		
		case 207:	// Send Dgain ch1
		ftoa(ch1.Dgain, tx_string);
    29d8:	60 91 9d 04 	lds	r22, 0x049D
    29dc:	70 91 9e 04 	lds	r23, 0x049E
    29e0:	80 91 9f 04 	lds	r24, 0x049F
    29e4:	90 91 a0 04 	lds	r25, 0x04A0
    29e8:	46 2d       	mov	r20, r6
    29ea:	57 2d       	mov	r21, r7
    29ec:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <ftoa>
		printStatus(tx_string);
    29f0:	86 2d       	mov	r24, r6
    29f2:	97 2d       	mov	r25, r7
    29f4:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    29f8:	24 c2       	rjmp	.+1096   	; 0x2e42 <main+0x1542>
		break;

		// *** Channel 2 ***		
		case 300:	// Send sensor 2 temperature
		ftoa(ch2.TempSensor, tx_string);
    29fa:	60 91 ab 02 	lds	r22, 0x02AB
    29fe:	70 91 ac 02 	lds	r23, 0x02AC
    2a02:	80 91 ad 02 	lds	r24, 0x02AD
    2a06:	90 91 ae 02 	lds	r25, 0x02AE
    2a0a:	46 2d       	mov	r20, r6
    2a0c:	57 2d       	mov	r21, r7
    2a0e:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <ftoa>
		printStatus(tx_string);
    2a12:	86 2d       	mov	r24, r6
    2a14:	97 2d       	mov	r25, r7
    2a16:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2a1a:	13 c2       	rjmp	.+1062   	; 0x2e42 <main+0x1542>
		break;
		
		case 301:	// Send P part of PID-controller 2
		ftoa(ch2.P_err, tx_string);
    2a1c:	60 91 af 02 	lds	r22, 0x02AF
    2a20:	70 91 b0 02 	lds	r23, 0x02B0
    2a24:	80 91 b1 02 	lds	r24, 0x02B1
    2a28:	90 91 b2 02 	lds	r25, 0x02B2
    2a2c:	46 2d       	mov	r20, r6
    2a2e:	57 2d       	mov	r21, r7
    2a30:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <ftoa>
		printStatus(tx_string);
    2a34:	86 2d       	mov	r24, r6
    2a36:	97 2d       	mov	r25, r7
    2a38:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2a3c:	02 c2       	rjmp	.+1028   	; 0x2e42 <main+0x1542>
		break;
		
		case 302:	// Send I part of PID-controller 2
		ftoa(ch2.I_err, tx_string);
    2a3e:	60 91 b3 02 	lds	r22, 0x02B3
    2a42:	70 91 b4 02 	lds	r23, 0x02B4
    2a46:	80 91 b5 02 	lds	r24, 0x02B5
    2a4a:	90 91 b6 02 	lds	r25, 0x02B6
    2a4e:	46 2d       	mov	r20, r6
    2a50:	57 2d       	mov	r21, r7
    2a52:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <ftoa>
		printStatus(tx_string);
    2a56:	86 2d       	mov	r24, r6
    2a58:	97 2d       	mov	r25, r7
    2a5a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2a5e:	f1 c1       	rjmp	.+994    	; 0x2e42 <main+0x1542>
		break;
		
		case 303:	// Send D part of PID-controller 2
		ftoa(ch2.D_err, tx_string);
    2a60:	60 91 b7 02 	lds	r22, 0x02B7
    2a64:	70 91 b8 02 	lds	r23, 0x02B8
    2a68:	80 91 b9 02 	lds	r24, 0x02B9
    2a6c:	90 91 ba 02 	lds	r25, 0x02BA
    2a70:	46 2d       	mov	r20, r6
    2a72:	57 2d       	mov	r21, r7
    2a74:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <ftoa>
		printStatus(tx_string);
    2a78:	86 2d       	mov	r24, r6
    2a7a:	97 2d       	mov	r25, r7
    2a7c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2a80:	e0 c1       	rjmp	.+960    	; 0x2e42 <main+0x1542>
		break;
		
		case 304:	// Send ch2.TempSetPoint
		ftoa(ch2.TempSetPoint, tx_string);
    2a82:	60 91 a7 02 	lds	r22, 0x02A7
    2a86:	70 91 a8 02 	lds	r23, 0x02A8
    2a8a:	80 91 a9 02 	lds	r24, 0x02A9
    2a8e:	90 91 aa 02 	lds	r25, 0x02AA
    2a92:	46 2d       	mov	r20, r6
    2a94:	57 2d       	mov	r21, r7
    2a96:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <ftoa>
		printStatus(tx_string);
    2a9a:	86 2d       	mov	r24, r6
    2a9c:	97 2d       	mov	r25, r7
    2a9e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2aa2:	cf c1       	rjmp	.+926    	; 0x2e42 <main+0x1542>
		break;
		
		case 305:	// Send Pgain ch2
		ftoa(ch2.Pgain, tx_string);
    2aa4:	60 91 c3 02 	lds	r22, 0x02C3
    2aa8:	70 91 c4 02 	lds	r23, 0x02C4
    2aac:	80 91 c5 02 	lds	r24, 0x02C5
    2ab0:	90 91 c6 02 	lds	r25, 0x02C6
    2ab4:	46 2d       	mov	r20, r6
    2ab6:	57 2d       	mov	r21, r7
    2ab8:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <ftoa>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    2abc:	81 e2       	ldi	r24, 0x21	; 33
    2abe:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    2ac0:	f5 01       	movw	r30, r10
    2ac2:	81 81       	ldd	r24, Z+1	; 0x01
    2ac4:	8f 8f       	std	Y+31, r24	; 0x1f
    2ac6:	82 81       	ldd	r24, Z+2	; 0x02
    2ac8:	88 a3       	std	Y+32, r24	; 0x20
    2aca:	83 81       	ldd	r24, Z+3	; 0x03
    2acc:	89 a3       	std	Y+33, r24	; 0x21
    2ace:	e6 2d       	mov	r30, r6
    2ad0:	f7 2d       	mov	r31, r7
    2ad2:	de 01       	movw	r26, r28
    2ad4:	92 96       	adiw	r26, 0x22	; 34
    2ad6:	00 e0       	ldi	r16, 0x00	; 0
    2ad8:	10 e0       	ldi	r17, 0x00	; 0
    2ada:	af 01       	movw	r20, r30
    2adc:	06 c0       	rjmp	.+12     	; 0x2aea <main+0x11ea>
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    2ade:	fa 01       	movw	r30, r20
    2ae0:	81 91       	ld	r24, Z+
    2ae2:	af 01       	movw	r20, r30
    2ae4:	8d 93       	st	X+, r24
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    2ae6:	0f 5f       	subi	r16, 0xFF	; 255
    2ae8:	1f 4f       	sbci	r17, 0xFF	; 255
    2aea:	6c 96       	adiw	r28, 0x1c	; 28
    2aec:	ee ad       	ldd	r30, Y+62	; 0x3e
    2aee:	ff ad       	ldd	r31, Y+63	; 0x3f
    2af0:	6c 97       	sbiw	r28, 0x1c	; 28
    2af2:	01 90       	ld	r0, Z+
    2af4:	00 20       	and	r0, r0
    2af6:	e9 f7       	brne	.-6      	; 0x2af2 <main+0x11f2>
    2af8:	cf 01       	movw	r24, r30
    2afa:	6c 96       	adiw	r28, 0x1c	; 28
    2afc:	2e ad       	ldd	r18, Y+62	; 0x3e
    2afe:	3f ad       	ldd	r19, Y+63	; 0x3f
    2b00:	6c 97       	sbiw	r28, 0x1c	; 28
    2b02:	82 1b       	sub	r24, r18
    2b04:	93 0b       	sbc	r25, r19
    2b06:	02 96       	adiw	r24, 0x02	; 2
    2b08:	08 17       	cp	r16, r24
    2b0a:	19 07       	cpc	r17, r25
    2b0c:	40 f3       	brcs	.-48     	; 0x2ade <main+0x11de>
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    2b0e:	78 01       	movw	r14, r16
    2b10:	3f ef       	ldi	r19, 0xFF	; 255
    2b12:	e3 1a       	sub	r14, r19
    2b14:	f3 0a       	sbc	r15, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    2b16:	1e 14       	cp	r1, r14
    2b18:	1f 04       	cpc	r1, r15
    2b1a:	14 f0       	brlt	.+4      	; 0x2b20 <main+0x1220>
    2b1c:	0c 94 40 21 	jmp	0x4280	; 0x4280 <main+0x2980>
    2b20:	de 01       	movw	r26, r28
    2b22:	5e 96       	adiw	r26, 0x1e	; 30
    2b24:	67 01       	movw	r12, r14
    2b26:	ca 0e       	add	r12, r26
    2b28:	db 1e       	adc	r13, r27
    2b2a:	e0 e0       	ldi	r30, 0x00	; 0
    2b2c:	f0 e0       	ldi	r31, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    2b2e:	98 e0       	ldi	r25, 0x08	; 8
    2b30:	80 e0       	ldi	r24, 0x00	; 0
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    2b32:	4d 91       	ld	r20, X+
		tmp = (int)((CRC >> 8) ^ int_c);
    2b34:	2f 2f       	mov	r18, r31
    2b36:	33 27       	eor	r19, r19
    2b38:	27 fd       	sbrc	r18, 7
    2b3a:	3a 95       	dec	r19
    2b3c:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    2b3e:	32 2f       	mov	r19, r18
    2b40:	22 27       	eor	r18, r18
    2b42:	49 2f       	mov	r20, r25
    2b44:	58 2f       	mov	r21, r24
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    2b46:	33 23       	and	r19, r19
    2b48:	3c f4       	brge	.+14     	; 0x2b58 <main+0x1258>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    2b4a:	22 0f       	add	r18, r18
    2b4c:	33 1f       	adc	r19, r19
    2b4e:	61 e2       	ldi	r22, 0x21	; 33
    2b50:	26 27       	eor	r18, r22
    2b52:	60 e1       	ldi	r22, 0x10	; 16
    2b54:	36 27       	eor	r19, r22
    2b56:	02 c0       	rjmp	.+4      	; 0x2b5c <main+0x125c>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    2b58:	22 0f       	add	r18, r18
    2b5a:	33 1f       	adc	r19, r19
    2b5c:	41 50       	subi	r20, 0x01	; 1
    2b5e:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    2b60:	91 f7       	brne	.-28     	; 0x2b46 <main+0x1246>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    2b62:	fe 2f       	mov	r31, r30
    2b64:	ee 27       	eor	r30, r30
    2b66:	e2 27       	eor	r30, r18
    2b68:	f3 27       	eor	r31, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    2b6a:	ac 15       	cp	r26, r12
    2b6c:	bd 05       	cpc	r27, r13
    2b6e:	09 f7       	brne	.-62     	; 0x2b32 <main+0x1232>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    2b70:	6f 01       	movw	r12, r30
    2b72:	40 e1       	ldi	r20, 0x10	; 16
    2b74:	6c e0       	ldi	r22, 0x0C	; 12
    2b76:	74 e0       	ldi	r23, 0x04	; 4
    2b78:	cf 01       	movw	r24, r30
    2b7a:	0e 94 ac 23 	call	0x4758	; 0x4758 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    2b7e:	8c e0       	ldi	r24, 0x0C	; 12
    2b80:	94 e0       	ldi	r25, 0x04	; 4
    2b82:	0e 94 a2 23 	call	0x4744	; 0x4744 <strupr>
	if(crcXmodem < 0x10)
    2b86:	80 e1       	ldi	r24, 0x10	; 16
    2b88:	c8 16       	cp	r12, r24
    2b8a:	d1 04       	cpc	r13, r1
    2b8c:	98 f4       	brcc	.+38     	; 0x2bb4 <main+0x12b4>
	{
		tx_string[cnt+4] = crc[0];
    2b8e:	80 91 0c 04 	lds	r24, 0x040C
    2b92:	fe 01       	movw	r30, r28
    2b94:	e0 0f       	add	r30, r16
    2b96:	f1 1f       	adc	r31, r17
    2b98:	82 a3       	std	Z+34, r24	; 0x22
		tx_string[cnt+3] = '0';
    2b9a:	80 e3       	ldi	r24, 0x30	; 48
    2b9c:	fe 01       	movw	r30, r28
    2b9e:	e0 0f       	add	r30, r16
    2ba0:	f1 1f       	adc	r31, r17
    2ba2:	81 a3       	std	Z+33, r24	; 0x21
		tx_string[cnt+2] = '0';
    2ba4:	fe 01       	movw	r30, r28
    2ba6:	e0 0f       	add	r30, r16
    2ba8:	f1 1f       	adc	r31, r17
    2baa:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';
    2bac:	fe 01       	movw	r30, r28
    2bae:	ee 0d       	add	r30, r14
    2bb0:	ff 1d       	adc	r31, r15
    2bb2:	86 8f       	std	Z+30, r24	; 0x1e
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    2bb4:	c6 01       	movw	r24, r12
    2bb6:	40 97       	sbiw	r24, 0x10	; 16
    2bb8:	80 3f       	cpi	r24, 0xF0	; 240
    2bba:	91 05       	cpc	r25, r1
    2bbc:	b8 f4       	brcc	.+46     	; 0x2bec <main+0x12ec>
	{
		tx_string[cnt+4] = crc[1];
    2bbe:	ac e0       	ldi	r26, 0x0C	; 12
    2bc0:	b4 e0       	ldi	r27, 0x04	; 4
    2bc2:	11 96       	adiw	r26, 0x01	; 1
    2bc4:	8c 91       	ld	r24, X
    2bc6:	11 97       	sbiw	r26, 0x01	; 1
    2bc8:	fe 01       	movw	r30, r28
    2bca:	e0 0f       	add	r30, r16
    2bcc:	f1 1f       	adc	r31, r17
    2bce:	82 a3       	std	Z+34, r24	; 0x22
		tx_string[cnt+3] = crc[0];
    2bd0:	8c 91       	ld	r24, X
    2bd2:	fe 01       	movw	r30, r28
    2bd4:	e0 0f       	add	r30, r16
    2bd6:	f1 1f       	adc	r31, r17
    2bd8:	81 a3       	std	Z+33, r24	; 0x21
		tx_string[cnt+2] = '0';
    2bda:	80 e3       	ldi	r24, 0x30	; 48
    2bdc:	fe 01       	movw	r30, r28
    2bde:	e0 0f       	add	r30, r16
    2be0:	f1 1f       	adc	r31, r17
    2be2:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';		
    2be4:	fe 01       	movw	r30, r28
    2be6:	ee 0d       	add	r30, r14
    2be8:	ff 1d       	adc	r31, r15
    2bea:	86 8f       	std	Z+30, r24	; 0x1e
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    2bec:	c6 01       	movw	r24, r12
    2bee:	9a 95       	dec	r25
    2bf0:	81 15       	cp	r24, r1
    2bf2:	9f 40       	sbci	r25, 0x0F	; 15
    2bf4:	b8 f4       	brcc	.+46     	; 0x2c24 <main+0x1324>
	{
		tx_string[cnt+4] = crc[2];
    2bf6:	ec e0       	ldi	r30, 0x0C	; 12
    2bf8:	f4 e0       	ldi	r31, 0x04	; 4
    2bfa:	82 81       	ldd	r24, Z+2	; 0x02
    2bfc:	de 01       	movw	r26, r28
    2bfe:	a0 0f       	add	r26, r16
    2c00:	b1 1f       	adc	r27, r17
    2c02:	92 96       	adiw	r26, 0x22	; 34
    2c04:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[1];
    2c06:	81 81       	ldd	r24, Z+1	; 0x01
    2c08:	de 01       	movw	r26, r28
    2c0a:	a0 0f       	add	r26, r16
    2c0c:	b1 1f       	adc	r27, r17
    2c0e:	91 96       	adiw	r26, 0x21	; 33
    2c10:	8c 93       	st	X, r24
    2c12:	91 97       	sbiw	r26, 0x21	; 33
		tx_string[cnt+2] = crc[0];
    2c14:	80 81       	ld	r24, Z
    2c16:	fd 01       	movw	r30, r26
    2c18:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';		
    2c1a:	80 e3       	ldi	r24, 0x30	; 48
    2c1c:	fe 01       	movw	r30, r28
    2c1e:	ee 0d       	add	r30, r14
    2c20:	ff 1d       	adc	r31, r15
    2c22:	86 8f       	std	Z+30, r24	; 0x1e
	}
	if(crcXmodem >= 0x1000)
    2c24:	c1 14       	cp	r12, r1
    2c26:	b0 e1       	ldi	r27, 0x10	; 16
    2c28:	db 06       	cpc	r13, r27
    2c2a:	c0 f0       	brcs	.+48     	; 0x2c5c <main+0x135c>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    2c2c:	de 01       	movw	r26, r28
    2c2e:	ae 0d       	add	r26, r14
    2c30:	bf 1d       	adc	r27, r15
    2c32:	ec e0       	ldi	r30, 0x0C	; 12
    2c34:	f4 e0       	ldi	r31, 0x04	; 4
    2c36:	80 81       	ld	r24, Z
    2c38:	5e 96       	adiw	r26, 0x1e	; 30
    2c3a:	8c 93       	st	X, r24
		tx_string[cnt+2] = crc[1];
    2c3c:	81 81       	ldd	r24, Z+1	; 0x01
    2c3e:	de 01       	movw	r26, r28
    2c40:	a0 0f       	add	r26, r16
    2c42:	b1 1f       	adc	r27, r17
    2c44:	90 96       	adiw	r26, 0x20	; 32
    2c46:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[2];
    2c48:	82 81       	ldd	r24, Z+2	; 0x02
    2c4a:	de 01       	movw	r26, r28
    2c4c:	a0 0f       	add	r26, r16
    2c4e:	b1 1f       	adc	r27, r17
    2c50:	91 96       	adiw	r26, 0x21	; 33
    2c52:	8c 93       	st	X, r24
    2c54:	91 97       	sbiw	r26, 0x21	; 33
		tx_string[cnt+4] = crc[3];
    2c56:	83 81       	ldd	r24, Z+3	; 0x03
    2c58:	fd 01       	movw	r30, r26
    2c5a:	82 a3       	std	Z+34, r24	; 0x22
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    2c5c:	c8 01       	movw	r24, r16
    2c5e:	05 96       	adiw	r24, 0x05	; 5
    2c60:	fe 01       	movw	r30, r28
    2c62:	e8 0f       	add	r30, r24
    2c64:	f9 1f       	adc	r31, r25
    2c66:	2d e0       	ldi	r18, 0x0D	; 13
    2c68:	26 8f       	std	Z+30, r18	; 0x1e
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    2c6a:	99 23       	and	r25, r25
    2c6c:	0c f4       	brge	.+2      	; 0x2c70 <main+0x1370>
    2c6e:	e9 c0       	rjmp	.+466    	; 0x2e42 <main+0x1542>
    2c70:	fe 01       	movw	r30, r28
    2c72:	7e 96       	adiw	r30, 0x1e	; 30
    2c74:	a8 01       	movw	r20, r16
    2c76:	4a 5f       	subi	r20, 0xFA	; 250
    2c78:	5f 4f       	sbci	r21, 0xFF	; 255
    2c7a:	4e 0f       	add	r20, r30
    2c7c:	5f 1f       	adc	r21, r31
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
	{
		uart_putchar(tx_string[i]);
    2c80:	21 91       	ld	r18, Z+
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    2c82:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    2c84:	d4 01       	movw	r26, r8
    2c86:	11 96       	adiw	r26, 0x01	; 1
    2c88:	3c 91       	ld	r19, X
    2c8a:	11 97       	sbiw	r26, 0x01	; 1
    2c8c:	8c 91       	ld	r24, X
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    2c8e:	38 13       	cpse	r19, r24
    2c90:	05 c0       	rjmp	.+10     	; 0x2c9c <main+0x139c>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    2c92:	a1 ec       	ldi	r26, 0xC1	; 193
    2c94:	b0 e0       	ldi	r27, 0x00	; 0
    2c96:	8c 91       	ld	r24, X
    2c98:	80 62       	ori	r24, 0x20	; 32
    2c9a:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    2c9c:	d4 01       	movw	r26, r8
    2c9e:	8c 91       	ld	r24, X
    2ca0:	13 96       	adiw	r26, 0x03	; 3
    2ca2:	6d 91       	ld	r22, X+
    2ca4:	7c 91       	ld	r23, X
    2ca6:	14 97       	sbiw	r26, 0x04	; 4
    2ca8:	db 01       	movw	r26, r22
    2caa:	a8 0f       	add	r26, r24
    2cac:	b1 1d       	adc	r27, r1
    2cae:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    2cb0:	d4 01       	movw	r26, r8
    2cb2:	8c 91       	ld	r24, X
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    2cb4:	68 2f       	mov	r22, r24
    2cb6:	70 e0       	ldi	r23, 0x00	; 0
    2cb8:	12 96       	adiw	r26, 0x02	; 2
    2cba:	2c 91       	ld	r18, X
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	21 50       	subi	r18, 0x01	; 1
    2cc0:	31 09       	sbc	r19, r1
    2cc2:	62 17       	cp	r22, r18
    2cc4:	73 07       	cpc	r23, r19
    2cc6:	11 f0       	breq	.+4      	; 0x2ccc <main+0x13cc>
    2cc8:	8f 5f       	subi	r24, 0xFF	; 255
    2cca:	01 c0       	rjmp	.+2      	; 0x2cce <main+0x13ce>
    2ccc:	89 2f       	mov	r24, r25
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    2cce:	d4 01       	movw	r26, r8
    2cd0:	8c 93       	st	X, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    2cd2:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    2cd4:	e4 17       	cp	r30, r20
    2cd6:	f5 07       	cpc	r31, r21
    2cd8:	99 f6       	brne	.-90     	; 0x2c80 <main+0x1380>
    2cda:	b3 c0       	rjmp	.+358    	; 0x2e42 <main+0x1542>
		ftoa(ch2.Pgain, tx_string);
		printStatus(tx_string);
		break;
		
		case 306:	// Send Igain ch2
		ftoa(ch2.Igain, tx_string);
    2cdc:	60 91 c7 02 	lds	r22, 0x02C7
    2ce0:	70 91 c8 02 	lds	r23, 0x02C8
    2ce4:	80 91 c9 02 	lds	r24, 0x02C9
    2ce8:	90 91 ca 02 	lds	r25, 0x02CA
    2cec:	46 2d       	mov	r20, r6
    2cee:	57 2d       	mov	r21, r7
    2cf0:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <ftoa>
		printStatus(tx_string);
    2cf4:	86 2d       	mov	r24, r6
    2cf6:	97 2d       	mov	r25, r7
    2cf8:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2cfc:	a2 c0       	rjmp	.+324    	; 0x2e42 <main+0x1542>
		break;
		
		case 307:	// Send Dgain ch2
		ftoa(ch2.Dgain, tx_string);
    2cfe:	60 91 cb 02 	lds	r22, 0x02CB
    2d02:	70 91 cc 02 	lds	r23, 0x02CC
    2d06:	80 91 cd 02 	lds	r24, 0x02CD
    2d0a:	90 91 ce 02 	lds	r25, 0x02CE
    2d0e:	46 2d       	mov	r20, r6
    2d10:	57 2d       	mov	r21, r7
    2d12:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <ftoa>
		printStatus(tx_string);
    2d16:	86 2d       	mov	r24, r6
    2d18:	97 2d       	mov	r25, r7
    2d1a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2d1e:	91 c0       	rjmp	.+290    	; 0x2e42 <main+0x1542>
		break;
		
		// *** Channel 3 ***
		case 400:	// Send sensor 3 temperature
		ftoa(ch3.TempSensor, tx_string);
    2d20:	60 91 46 01 	lds	r22, 0x0146
    2d24:	70 91 47 01 	lds	r23, 0x0147
    2d28:	80 91 48 01 	lds	r24, 0x0148
    2d2c:	90 91 49 01 	lds	r25, 0x0149
    2d30:	46 2d       	mov	r20, r6
    2d32:	57 2d       	mov	r21, r7
    2d34:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <ftoa>
		printStatus(tx_string);
    2d38:	86 2d       	mov	r24, r6
    2d3a:	97 2d       	mov	r25, r7
    2d3c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2d40:	80 c0       	rjmp	.+256    	; 0x2e42 <main+0x1542>
		break;
		
		case 401:	// Send P part of PID-controller 3
		ftoa(ch3.P_err, tx_string);
    2d42:	60 91 4a 01 	lds	r22, 0x014A
    2d46:	70 91 4b 01 	lds	r23, 0x014B
    2d4a:	80 91 4c 01 	lds	r24, 0x014C
    2d4e:	90 91 4d 01 	lds	r25, 0x014D
    2d52:	46 2d       	mov	r20, r6
    2d54:	57 2d       	mov	r21, r7
    2d56:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <ftoa>
		printStatus(tx_string);
    2d5a:	86 2d       	mov	r24, r6
    2d5c:	97 2d       	mov	r25, r7
    2d5e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2d62:	6f c0       	rjmp	.+222    	; 0x2e42 <main+0x1542>
		break;
		
		case 402:	// Send I part of PID-controller 3
		ftoa(ch3.I_err, tx_string);
    2d64:	60 91 4e 01 	lds	r22, 0x014E
    2d68:	70 91 4f 01 	lds	r23, 0x014F
    2d6c:	80 91 50 01 	lds	r24, 0x0150
    2d70:	90 91 51 01 	lds	r25, 0x0151
    2d74:	46 2d       	mov	r20, r6
    2d76:	57 2d       	mov	r21, r7
    2d78:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <ftoa>
		printStatus(tx_string);
    2d7c:	86 2d       	mov	r24, r6
    2d7e:	97 2d       	mov	r25, r7
    2d80:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2d84:	5e c0       	rjmp	.+188    	; 0x2e42 <main+0x1542>
		break;
		
		case 403:	// Send D part of PID-controller 3
		ftoa(ch3.D_err, tx_string);
    2d86:	60 91 52 01 	lds	r22, 0x0152
    2d8a:	70 91 53 01 	lds	r23, 0x0153
    2d8e:	80 91 54 01 	lds	r24, 0x0154
    2d92:	90 91 55 01 	lds	r25, 0x0155
    2d96:	46 2d       	mov	r20, r6
    2d98:	57 2d       	mov	r21, r7
    2d9a:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <ftoa>
		printStatus(tx_string);
    2d9e:	86 2d       	mov	r24, r6
    2da0:	97 2d       	mov	r25, r7
    2da2:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2da6:	4d c0       	rjmp	.+154    	; 0x2e42 <main+0x1542>
		break;
		
		case 404:	// Send ch3.TempSetPoint
		ftoa(ch3.TempSetPoint, tx_string);
    2da8:	60 91 42 01 	lds	r22, 0x0142
    2dac:	70 91 43 01 	lds	r23, 0x0143
    2db0:	80 91 44 01 	lds	r24, 0x0144
    2db4:	90 91 45 01 	lds	r25, 0x0145
    2db8:	46 2d       	mov	r20, r6
    2dba:	57 2d       	mov	r21, r7
    2dbc:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <ftoa>
		printStatus(tx_string);
    2dc0:	86 2d       	mov	r24, r6
    2dc2:	97 2d       	mov	r25, r7
    2dc4:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2dc8:	3c c0       	rjmp	.+120    	; 0x2e42 <main+0x1542>
		break;
		
		case 405:	// Send Pgain ch3
		ftoa(ch3.Pgain, tx_string);
    2dca:	60 91 5e 01 	lds	r22, 0x015E
    2dce:	70 91 5f 01 	lds	r23, 0x015F
    2dd2:	80 91 60 01 	lds	r24, 0x0160
    2dd6:	90 91 61 01 	lds	r25, 0x0161
    2dda:	46 2d       	mov	r20, r6
    2ddc:	57 2d       	mov	r21, r7
    2dde:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <ftoa>
		printStatus(tx_string);
    2de2:	86 2d       	mov	r24, r6
    2de4:	97 2d       	mov	r25, r7
    2de6:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2dea:	2b c0       	rjmp	.+86     	; 0x2e42 <main+0x1542>
		break;
		
		case 406:	// Send Igain ch3
		ftoa(ch3.Igain, tx_string);
    2dec:	60 91 62 01 	lds	r22, 0x0162
    2df0:	70 91 63 01 	lds	r23, 0x0163
    2df4:	80 91 64 01 	lds	r24, 0x0164
    2df8:	90 91 65 01 	lds	r25, 0x0165
    2dfc:	46 2d       	mov	r20, r6
    2dfe:	57 2d       	mov	r21, r7
    2e00:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <ftoa>
		printStatus(tx_string);
    2e04:	86 2d       	mov	r24, r6
    2e06:	97 2d       	mov	r25, r7
    2e08:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2e0c:	1a c0       	rjmp	.+52     	; 0x2e42 <main+0x1542>
		break;
		
		case 407:	// Send Dgain ch3
		ftoa(ch3.Dgain, tx_string);
    2e0e:	60 91 66 01 	lds	r22, 0x0166
    2e12:	70 91 67 01 	lds	r23, 0x0167
    2e16:	80 91 68 01 	lds	r24, 0x0168
    2e1a:	90 91 69 01 	lds	r25, 0x0169
    2e1e:	46 2d       	mov	r20, r6
    2e20:	57 2d       	mov	r21, r7
    2e22:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <ftoa>
		printStatus(tx_string);
    2e26:	86 2d       	mov	r24, r6
    2e28:	97 2d       	mov	r25, r7
    2e2a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2e2e:	09 c0       	rjmp	.+18     	; 0x2e42 <main+0x1542>
		break;						
		
		default:
		printStatus("VRerror");
    2e30:	86 e2       	ldi	r24, 0x26	; 38
    2e32:	91 e0       	ldi	r25, 0x01	; 1
    2e34:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2e38:	04 c0       	rjmp	.+8      	; 0x2e42 <main+0x1542>
						var = atol(requestID);
						ReadParameter(var);
					}
					else
					{
						printStatus("CRC error");
    2e3a:	89 e1       	ldi	r24, 0x19	; 25
    2e3c:	91 e0       	ldi	r25, 0x01	; 1
    2e3e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
					}
				}
			}	
			
			pos = NULL;
			pos = strchr(rx_string, '&');
    2e42:	66 e2       	ldi	r22, 0x26	; 38
    2e44:	70 e0       	ldi	r23, 0x00	; 0
    2e46:	6d 96       	adiw	r28, 0x1d	; 29
    2e48:	8f ad       	ldd	r24, Y+63	; 0x3f
    2e4a:	6d 97       	sbiw	r28, 0x1d	; 29
    2e4c:	6e 96       	adiw	r28, 0x1e	; 30
    2e4e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e50:	6e 97       	sbiw	r28, 0x1e	; 30
    2e52:	0e 94 83 23 	call	0x4706	; 0x4706 <strchr>
			if(pos != NULL)
    2e56:	00 97       	sbiw	r24, 0x00	; 0
    2e58:	11 f4       	brne	.+4      	; 0x2e5e <main+0x155e>
    2e5a:	0c 94 c1 0d 	jmp	0x1b82	; 0x1b82 <main+0x282>
    2e5e:	fc 01       	movw	r30, r24
			{
				setCmd[0] = *(pos + 1);					// Parse set command
    2e60:	a9 e0       	ldi	r26, 0x09	; 9
    2e62:	b4 e0       	ldi	r27, 0x04	; 4
    2e64:	81 81       	ldd	r24, Z+1	; 0x01
    2e66:	8c 93       	st	X, r24
				setCmd[1] = *(pos + 2);
    2e68:	82 81       	ldd	r24, Z+2	; 0x02
    2e6a:	11 96       	adiw	r26, 0x01	; 1
    2e6c:	8c 93       	st	X, r24
    2e6e:	11 97       	sbiw	r26, 0x01	; 1
				requestID[0] = *(pos + 3);				// Parse request ID
    2e70:	83 81       	ldd	r24, Z+3	; 0x03
    2e72:	89 83       	std	Y+1, r24	; 0x01
				requestID[1] = *(pos + 4);
    2e74:	84 81       	ldd	r24, Z+4	; 0x04
    2e76:	8a 83       	std	Y+2, r24	; 0x02
				requestID[2] = *(pos + 5);				
    2e78:	85 81       	ldd	r24, Z+5	; 0x05
    2e7a:	8b 83       	std	Y+3, r24	; 0x03
				
				if(strcmp(setCmd, "VS") == 0)
    2e7c:	6e e2       	ldi	r22, 0x2E	; 46
    2e7e:	71 e0       	ldi	r23, 0x01	; 1
    2e80:	cd 01       	movw	r24, r26
    2e82:	0e 94 8e 23 	call	0x471c	; 0x471c <strcmp>
    2e86:	89 2b       	or	r24, r25
    2e88:	11 f0       	breq	.+4      	; 0x2e8e <main+0x158e>
    2e8a:	0c 94 bb 0d 	jmp	0x1b76	; 0x1b76 <main+0x276>
				{
					pos = strchr(rx_string, 0x0D);		// Find end of message
    2e8e:	6d e0       	ldi	r22, 0x0D	; 13
    2e90:	70 e0       	ldi	r23, 0x00	; 0
    2e92:	c5 01       	movw	r24, r10
    2e94:	0e 94 83 23 	call	0x4706	; 0x4706 <strchr>
					crc[0] = *(pos - 4);				// Parse incoming crc
    2e98:	ec e0       	ldi	r30, 0x0C	; 12
    2e9a:	f4 e0       	ldi	r31, 0x04	; 4
    2e9c:	dc 01       	movw	r26, r24
    2e9e:	14 97       	sbiw	r26, 0x04	; 4
    2ea0:	2c 91       	ld	r18, X
    2ea2:	20 83       	st	Z, r18
					crc[1] = *(pos - 3);
    2ea4:	11 96       	adiw	r26, 0x01	; 1
    2ea6:	2c 91       	ld	r18, X
    2ea8:	21 83       	std	Z+1, r18	; 0x01
					crc[2] = *(pos - 2);
    2eaa:	11 96       	adiw	r26, 0x01	; 1
    2eac:	2c 91       	ld	r18, X
    2eae:	22 83       	std	Z+2, r18	; 0x02
					crc[3] = *(pos - 1);
    2eb0:	11 96       	adiw	r26, 0x01	; 1
    2eb2:	8c 91       	ld	r24, X
    2eb4:	83 83       	std	Z+3, r24	; 0x03
					
					itoa(GenCrc16(rx_string, (int)strnlen(rx_string, rx_size)-5), inCrC_string, 16);
    2eb6:	6e e1       	ldi	r22, 0x1E	; 30
    2eb8:	70 e0       	ldi	r23, 0x00	; 0
    2eba:	c5 01       	movw	r24, r10
    2ebc:	0e 94 97 23 	call	0x472e	; 0x472e <strnlen>
    2ec0:	bc 01       	movw	r22, r24
    2ec2:	65 50       	subi	r22, 0x05	; 5
    2ec4:	71 09       	sbc	r23, r1
    2ec6:	c5 01       	movw	r24, r10
    2ec8:	0e 94 2d 02 	call	0x45a	; 0x45a <GenCrc16>
    2ecc:	40 e1       	ldi	r20, 0x10	; 16
    2ece:	be 01       	movw	r22, r28
    2ed0:	67 5e       	subi	r22, 0xE7	; 231
    2ed2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ed4:	0e 94 ac 23 	call	0x4758	; 0x4758 <__itoa_ncheck>
					if(CrcCompare(crc, inCrC_string) == true)
    2ed8:	be 01       	movw	r22, r28
    2eda:	67 5e       	subi	r22, 0xE7	; 231
    2edc:	7f 4f       	sbci	r23, 0xFF	; 255
    2ede:	8c e0       	ldi	r24, 0x0C	; 12
    2ee0:	94 e0       	ldi	r25, 0x04	; 4
    2ee2:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <CrcCompare>
    2ee6:	88 23       	and	r24, r24
    2ee8:	11 f4       	brne	.+4      	; 0x2eee <main+0x15ee>
    2eea:	0c 94 f9 20 	jmp	0x41f2	; 0x41f2 <main+0x28f2>
					{
						var = atol(requestID);
						SetParameter(atol(requestID));
    2eee:	ce 01       	movw	r24, r28
    2ef0:	01 96       	adiw	r24, 0x01	; 1
    2ef2:	0e 94 52 23 	call	0x46a4	; 0x46a4 <atol>

static inline void SetParameter(int id)
{
	char param[20];
	
	switch(id)
    2ef6:	6e 35       	cpi	r22, 0x5E	; 94
    2ef8:	b1 e0       	ldi	r27, 0x01	; 1
    2efa:	7b 07       	cpc	r23, r27
    2efc:	09 f4       	brne	.+2      	; 0x2f00 <main+0x1600>
    2efe:	5c c4       	rjmp	.+2232   	; 0x37b8 <main+0x1eb8>
    2f00:	9c f5       	brge	.+102    	; 0x2f68 <main+0x1668>
    2f02:	6a 39       	cpi	r22, 0x9A	; 154
    2f04:	71 05       	cpc	r23, r1
    2f06:	09 f4       	brne	.+2      	; 0x2f0a <main+0x160a>
    2f08:	54 c2       	rjmp	.+1192   	; 0x33b2 <main+0x1ab2>
    2f0a:	ac f4       	brge	.+42     	; 0x2f36 <main+0x1636>
    2f0c:	67 39       	cpi	r22, 0x97	; 151
    2f0e:	71 05       	cpc	r23, r1
    2f10:	09 f4       	brne	.+2      	; 0x2f14 <main+0x1614>
    2f12:	87 c0       	rjmp	.+270    	; 0x3022 <main+0x1722>
    2f14:	34 f4       	brge	.+12     	; 0x2f22 <main+0x1622>
    2f16:	66 39       	cpi	r22, 0x96	; 150
    2f18:	71 05       	cpc	r23, r1
    2f1a:	09 f4       	brne	.+2      	; 0x2f1e <main+0x161e>
    2f1c:	59 c0       	rjmp	.+178    	; 0x2fd0 <main+0x16d0>
    2f1e:	0c 94 49 20 	jmp	0x4092	; 0x4092 <main+0x2792>
    2f22:	68 39       	cpi	r22, 0x98	; 152
    2f24:	71 05       	cpc	r23, r1
    2f26:	09 f4       	brne	.+2      	; 0x2f2a <main+0x162a>
    2f28:	a5 c0       	rjmp	.+330    	; 0x3074 <main+0x1774>
    2f2a:	69 39       	cpi	r22, 0x99	; 153
    2f2c:	71 05       	cpc	r23, r1
    2f2e:	09 f4       	brne	.+2      	; 0x2f32 <main+0x1632>
    2f30:	73 c1       	rjmp	.+742    	; 0x3218 <main+0x1918>
    2f32:	0c 94 49 20 	jmp	0x4092	; 0x4092 <main+0x2792>
    2f36:	6c 3f       	cpi	r22, 0xFC	; 252
    2f38:	71 05       	cpc	r23, r1
    2f3a:	09 f4       	brne	.+2      	; 0x2f3e <main+0x163e>
    2f3c:	d5 c3       	rjmp	.+1962   	; 0x36e8 <main+0x1de8>
    2f3e:	54 f4       	brge	.+20     	; 0x2f54 <main+0x1654>
    2f40:	6a 3f       	cpi	r22, 0xFA	; 250
    2f42:	71 05       	cpc	r23, r1
    2f44:	09 f4       	brne	.+2      	; 0x2f48 <main+0x1648>
    2f46:	9f c3       	rjmp	.+1854   	; 0x3686 <main+0x1d86>
    2f48:	6b 3f       	cpi	r22, 0xFB	; 251
    2f4a:	71 05       	cpc	r23, r1
    2f4c:	09 f4       	brne	.+2      	; 0x2f50 <main+0x1650>
    2f4e:	b4 c3       	rjmp	.+1896   	; 0x36b8 <main+0x1db8>
    2f50:	0c 94 49 20 	jmp	0x4092	; 0x4092 <main+0x2792>
    2f54:	6d 3f       	cpi	r22, 0xFD	; 253
    2f56:	71 05       	cpc	r23, r1
    2f58:	09 f4       	brne	.+2      	; 0x2f5c <main+0x165c>
    2f5a:	ee c3       	rjmp	.+2012   	; 0x3738 <main+0x1e38>
    2f5c:	6e 3f       	cpi	r22, 0xFE	; 254
    2f5e:	71 05       	cpc	r23, r1
    2f60:	09 f4       	brne	.+2      	; 0x2f64 <main+0x1664>
    2f62:	11 c4       	rjmp	.+2082   	; 0x3786 <main+0x1e86>
    2f64:	0c 94 49 20 	jmp	0x4092	; 0x4092 <main+0x2792>
    2f68:	62 3c       	cpi	r22, 0xC2	; 194
    2f6a:	f1 e0       	ldi	r31, 0x01	; 1
    2f6c:	7f 07       	cpc	r23, r31
    2f6e:	09 f4       	brne	.+2      	; 0x2f72 <main+0x1672>
    2f70:	d9 c4       	rjmp	.+2482   	; 0x3924 <main+0x2024>
    2f72:	94 f4       	brge	.+36     	; 0x2f98 <main+0x1698>
    2f74:	60 36       	cpi	r22, 0x60	; 96
    2f76:	31 e0       	ldi	r19, 0x01	; 1
    2f78:	73 07       	cpc	r23, r19
    2f7a:	09 f4       	brne	.+2      	; 0x2f7e <main+0x167e>
    2f7c:	6b c4       	rjmp	.+2262   	; 0x3854 <main+0x1f54>
    2f7e:	0c f4       	brge	.+2      	; 0x2f82 <main+0x1682>
    2f80:	42 c4       	rjmp	.+2180   	; 0x3806 <main+0x1f06>
    2f82:	61 36       	cpi	r22, 0x61	; 97
    2f84:	b1 e0       	ldi	r27, 0x01	; 1
    2f86:	7b 07       	cpc	r23, r27
    2f88:	09 f4       	brne	.+2      	; 0x2f8c <main+0x168c>
    2f8a:	8b c4       	rjmp	.+2326   	; 0x38a2 <main+0x1fa2>
    2f8c:	62 36       	cpi	r22, 0x62	; 98
    2f8e:	71 40       	sbci	r23, 0x01	; 1
    2f90:	09 f4       	brne	.+2      	; 0x2f94 <main+0x1694>
    2f92:	ae c4       	rjmp	.+2396   	; 0x38f0 <main+0x1ff0>
    2f94:	0c 94 49 20 	jmp	0x4092	; 0x4092 <main+0x2792>
    2f98:	65 3c       	cpi	r22, 0xC5	; 197
    2f9a:	f1 e0       	ldi	r31, 0x01	; 1
    2f9c:	7f 07       	cpc	r23, r31
    2f9e:	09 f4       	brne	.+2      	; 0x2fa2 <main+0x16a2>
    2fa0:	18 c5       	rjmp	.+2608   	; 0x39d2 <main+0x20d2>
    2fa2:	5c f4       	brge	.+22     	; 0x2fba <main+0x16ba>
    2fa4:	63 3c       	cpi	r22, 0xC3	; 195
    2fa6:	31 e0       	ldi	r19, 0x01	; 1
    2fa8:	73 07       	cpc	r23, r19
    2faa:	09 f4       	brne	.+2      	; 0x2fae <main+0x16ae>
    2fac:	e2 c4       	rjmp	.+2500   	; 0x3972 <main+0x2072>
    2fae:	64 3c       	cpi	r22, 0xC4	; 196
    2fb0:	71 40       	sbci	r23, 0x01	; 1
    2fb2:	09 f4       	brne	.+2      	; 0x2fb6 <main+0x16b6>
    2fb4:	f6 c4       	rjmp	.+2540   	; 0x39a2 <main+0x20a2>
    2fb6:	0c 94 49 20 	jmp	0x4092	; 0x4092 <main+0x2792>
    2fba:	66 3c       	cpi	r22, 0xC6	; 198
    2fbc:	b1 e0       	ldi	r27, 0x01	; 1
    2fbe:	7b 07       	cpc	r23, r27
    2fc0:	09 f4       	brne	.+2      	; 0x2fc4 <main+0x16c4>
    2fc2:	c1 c5       	rjmp	.+2946   	; 0x3b46 <main+0x2246>
    2fc4:	64 3f       	cpi	r22, 0xF4	; 244
    2fc6:	71 40       	sbci	r23, 0x01	; 1
    2fc8:	09 f4       	brne	.+2      	; 0x2fcc <main+0x16cc>
    2fca:	23 c7       	rjmp	.+3654   	; 0x3e12 <main+0x2512>
    2fcc:	0c 94 49 20 	jmp	0x4092	; 0x4092 <main+0x2792>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    2fd0:	6e e1       	ldi	r22, 0x1E	; 30
    2fd2:	70 e0       	ldi	r23, 0x00	; 0
    2fd4:	c5 01       	movw	r24, r10
    2fd6:	0e 94 97 23 	call	0x472e	; 0x472e <strnlen>
    2fda:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    2fdc:	8b 30       	cpi	r24, 0x0B	; 11
    2fde:	91 05       	cpc	r25, r1
    2fe0:	6c f0       	brlt	.+26     	; 0x2ffc <main+0x16fc>
    2fe2:	e6 ee       	ldi	r30, 0xE6	; 230
    2fe4:	f4 e0       	ldi	r31, 0x04	; 4
    2fe6:	de 01       	movw	r26, r28
    2fe8:	aa 5b       	subi	r26, 0xBA	; 186
    2fea:	bf 4f       	sbci	r27, 0xFF	; 255
    2fec:	84 52       	subi	r24, 0x24	; 36
    2fee:	9b 4f       	sbci	r25, 0xFB	; 251
    2ff0:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    2ff2:	91 91       	ld	r25, Z+
    2ff4:	9d 93       	st	X+, r25
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    2ff6:	e2 17       	cp	r30, r18
    2ff8:	f3 07       	cpc	r31, r19
    2ffa:	d9 f7       	brne	.-10     	; 0x2ff2 <main+0x16f2>
	switch(id)
	{
		// *** Channel 0 ***
		case 150:	// ch0.TempSetPoint
		ParamParse(rx_string, param);
		ch0.TempSetPoint = atof(param);
    2ffc:	ce 01       	movw	r24, r28
    2ffe:	8a 5b       	subi	r24, 0xBA	; 186
    3000:	9f 4f       	sbci	r25, 0xFF	; 255
    3002:	0e 94 4f 23 	call	0x469e	; 0x469e <atof>
    3006:	60 93 16 04 	sts	0x0416, r22
    300a:	70 93 17 04 	sts	0x0417, r23
    300e:	80 93 18 04 	sts	0x0418, r24
    3012:	90 93 19 04 	sts	0x0419, r25
		printStatus("");
    3016:	87 e3       	ldi	r24, 0x37	; 55
    3018:	91 e0       	ldi	r25, 0x01	; 1
    301a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    301e:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <main+0x266>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    3022:	6e e1       	ldi	r22, 0x1E	; 30
    3024:	70 e0       	ldi	r23, 0x00	; 0
    3026:	c5 01       	movw	r24, r10
    3028:	0e 94 97 23 	call	0x472e	; 0x472e <strnlen>
    302c:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    302e:	8b 30       	cpi	r24, 0x0B	; 11
    3030:	91 05       	cpc	r25, r1
    3032:	6c f0       	brlt	.+26     	; 0x304e <main+0x174e>
    3034:	e6 ee       	ldi	r30, 0xE6	; 230
    3036:	f4 e0       	ldi	r31, 0x04	; 4
    3038:	de 01       	movw	r26, r28
    303a:	aa 5b       	subi	r26, 0xBA	; 186
    303c:	bf 4f       	sbci	r27, 0xFF	; 255
    303e:	84 52       	subi	r24, 0x24	; 36
    3040:	9b 4f       	sbci	r25, 0xFB	; 251
    3042:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    3044:	91 91       	ld	r25, Z+
    3046:	9d 93       	st	X+, r25
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    3048:	e2 17       	cp	r30, r18
    304a:	f3 07       	cpc	r31, r19
    304c:	d9 f7       	brne	.-10     	; 0x3044 <main+0x1744>
		printStatus("");
		break;
		
		case 151:	// SetPgainCh0
		ParamParse(rx_string, param);
		ch0.Pgain = atof(param);
    304e:	ce 01       	movw	r24, r28
    3050:	8a 5b       	subi	r24, 0xBA	; 186
    3052:	9f 4f       	sbci	r25, 0xFF	; 255
    3054:	0e 94 4f 23 	call	0x469e	; 0x469e <atof>
    3058:	60 93 32 04 	sts	0x0432, r22
    305c:	70 93 33 04 	sts	0x0433, r23
    3060:	80 93 34 04 	sts	0x0434, r24
    3064:	90 93 35 04 	sts	0x0435, r25
		printStatus("");
    3068:	87 e3       	ldi	r24, 0x37	; 55
    306a:	91 e0       	ldi	r25, 0x01	; 1
    306c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    3070:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <main+0x266>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    3074:	6e e1       	ldi	r22, 0x1E	; 30
    3076:	70 e0       	ldi	r23, 0x00	; 0
    3078:	c5 01       	movw	r24, r10
    307a:	0e 94 97 23 	call	0x472e	; 0x472e <strnlen>
    307e:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    3080:	8b 30       	cpi	r24, 0x0B	; 11
    3082:	91 05       	cpc	r25, r1
    3084:	6c f0       	brlt	.+26     	; 0x30a0 <main+0x17a0>
    3086:	e6 ee       	ldi	r30, 0xE6	; 230
    3088:	f4 e0       	ldi	r31, 0x04	; 4
    308a:	de 01       	movw	r26, r28
    308c:	aa 5b       	subi	r26, 0xBA	; 186
    308e:	bf 4f       	sbci	r27, 0xFF	; 255
    3090:	84 52       	subi	r24, 0x24	; 36
    3092:	9b 4f       	sbci	r25, 0xFB	; 251
    3094:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    3096:	91 91       	ld	r25, Z+
    3098:	9d 93       	st	X+, r25
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    309a:	e2 17       	cp	r30, r18
    309c:	f3 07       	cpc	r31, r19
    309e:	d9 f7       	brne	.-10     	; 0x3096 <main+0x1796>
		printStatus("");
		break;
		
		case 152:	// SetIgainCh0
		ParamParse(rx_string, param);
		ch0.Igain = atof(param);
    30a0:	ce 01       	movw	r24, r28
    30a2:	8a 5b       	subi	r24, 0xBA	; 186
    30a4:	9f 4f       	sbci	r25, 0xFF	; 255
    30a6:	0e 94 4f 23 	call	0x469e	; 0x469e <atof>
    30aa:	60 93 36 04 	sts	0x0436, r22
    30ae:	70 93 37 04 	sts	0x0437, r23
    30b2:	80 93 38 04 	sts	0x0438, r24
    30b6:	90 93 39 04 	sts	0x0439, r25
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    30ba:	81 e2       	ldi	r24, 0x21	; 33
    30bc:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    30be:	d5 01       	movw	r26, r10
    30c0:	11 96       	adiw	r26, 0x01	; 1
    30c2:	8c 91       	ld	r24, X
    30c4:	11 97       	sbiw	r26, 0x01	; 1
    30c6:	8f 8f       	std	Y+31, r24	; 0x1f
    30c8:	12 96       	adiw	r26, 0x02	; 2
    30ca:	8c 91       	ld	r24, X
    30cc:	12 97       	sbiw	r26, 0x02	; 2
    30ce:	88 a3       	std	Y+32, r24	; 0x20
    30d0:	13 96       	adiw	r26, 0x03	; 3
    30d2:	8c 91       	ld	r24, X
    30d4:	89 a3       	std	Y+33, r24	; 0x21
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    30d6:	1a a2       	std	Y+34, r1	; 0x22
    30d8:	1b a2       	std	Y+35, r1	; 0x23
    30da:	1c a2       	std	Y+36, r1	; 0x24
    30dc:	8e 01       	movw	r16, r28
    30de:	02 5e       	subi	r16, 0xE2	; 226
    30e0:	1f 4f       	sbci	r17, 0xFF	; 255
    30e2:	ae 01       	movw	r20, r28
    30e4:	4e 5d       	subi	r20, 0xDE	; 222
    30e6:	5f 4f       	sbci	r21, 0xFF	; 255
    30e8:	f8 01       	movw	r30, r16
    30ea:	80 e0       	ldi	r24, 0x00	; 0
    30ec:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    30ee:	b8 e0       	ldi	r27, 0x08	; 8
    30f0:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    30f2:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    30f4:	29 2f       	mov	r18, r25
    30f6:	33 27       	eor	r19, r19
    30f8:	27 fd       	sbrc	r18, 7
    30fa:	3a 95       	dec	r19
    30fc:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
    30fe:	32 2f       	mov	r19, r18
    3100:	22 27       	eor	r18, r18
    3102:	6b 2f       	mov	r22, r27
    3104:	7f 2d       	mov	r23, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    3106:	33 23       	and	r19, r19
    3108:	3c f4       	brge	.+14     	; 0x3118 <main+0x1818>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    310a:	22 0f       	add	r18, r18
    310c:	33 1f       	adc	r19, r19
    310e:	a1 e2       	ldi	r26, 0x21	; 33
    3110:	2a 27       	eor	r18, r26
    3112:	a0 e1       	ldi	r26, 0x10	; 16
    3114:	3a 27       	eor	r19, r26
    3116:	02 c0       	rjmp	.+4      	; 0x311c <main+0x181c>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    3118:	22 0f       	add	r18, r18
    311a:	33 1f       	adc	r19, r19
    311c:	61 50       	subi	r22, 0x01	; 1
    311e:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    3120:	91 f7       	brne	.-28     	; 0x3106 <main+0x1806>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    3122:	98 2f       	mov	r25, r24
    3124:	88 27       	eor	r24, r24
    3126:	82 27       	eor	r24, r18
    3128:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    312a:	e4 17       	cp	r30, r20
    312c:	f5 07       	cpc	r31, r21
    312e:	09 f7       	brne	.-62     	; 0x30f2 <main+0x17f2>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    3130:	7c 01       	movw	r14, r24
    3132:	40 e1       	ldi	r20, 0x10	; 16
    3134:	6c e0       	ldi	r22, 0x0C	; 12
    3136:	74 e0       	ldi	r23, 0x04	; 4
    3138:	0e 94 ac 23 	call	0x4758	; 0x4758 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    313c:	8c e0       	ldi	r24, 0x0C	; 12
    313e:	94 e0       	ldi	r25, 0x04	; 4
    3140:	0e 94 a2 23 	call	0x4744	; 0x4744 <strupr>
	if(crcXmodem < 0x10)
    3144:	b0 e1       	ldi	r27, 0x10	; 16
    3146:	eb 16       	cp	r14, r27
    3148:	f1 04       	cpc	r15, r1
    314a:	38 f4       	brcc	.+14     	; 0x315a <main+0x185a>
	{
		tx_string[cnt+4] = crc[0];
    314c:	80 91 0c 04 	lds	r24, 0x040C
    3150:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = '0';
    3152:	80 e3       	ldi	r24, 0x30	; 48
    3154:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = '0';
    3156:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';
    3158:	8a a3       	std	Y+34, r24	; 0x22
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    315a:	c7 01       	movw	r24, r14
    315c:	40 97       	sbiw	r24, 0x10	; 16
    315e:	80 3f       	cpi	r24, 0xF0	; 240
    3160:	91 05       	cpc	r25, r1
    3162:	48 f4       	brcc	.+18     	; 0x3176 <main+0x1876>
	{
		tx_string[cnt+4] = crc[1];
    3164:	ec e0       	ldi	r30, 0x0C	; 12
    3166:	f4 e0       	ldi	r31, 0x04	; 4
    3168:	81 81       	ldd	r24, Z+1	; 0x01
    316a:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[0];
    316c:	80 81       	ld	r24, Z
    316e:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = '0';
    3170:	80 e3       	ldi	r24, 0x30	; 48
    3172:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';		
    3174:	8a a3       	std	Y+34, r24	; 0x22
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    3176:	c7 01       	movw	r24, r14
    3178:	9a 95       	dec	r25
    317a:	81 15       	cp	r24, r1
    317c:	9f 40       	sbci	r25, 0x0F	; 15
    317e:	50 f4       	brcc	.+20     	; 0x3194 <main+0x1894>
	{
		tx_string[cnt+4] = crc[2];
    3180:	ec e0       	ldi	r30, 0x0C	; 12
    3182:	f4 e0       	ldi	r31, 0x04	; 4
    3184:	82 81       	ldd	r24, Z+2	; 0x02
    3186:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[1];
    3188:	81 81       	ldd	r24, Z+1	; 0x01
    318a:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = crc[0];
    318c:	80 81       	ld	r24, Z
    318e:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';		
    3190:	80 e3       	ldi	r24, 0x30	; 48
    3192:	8a a3       	std	Y+34, r24	; 0x22
	}
	if(crcXmodem >= 0x1000)
    3194:	e1 14       	cp	r14, r1
    3196:	f0 e1       	ldi	r31, 0x10	; 16
    3198:	ff 06       	cpc	r15, r31
    319a:	50 f0       	brcs	.+20     	; 0x31b0 <main+0x18b0>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    319c:	ec e0       	ldi	r30, 0x0C	; 12
    319e:	f4 e0       	ldi	r31, 0x04	; 4
    31a0:	80 81       	ld	r24, Z
    31a2:	8a a3       	std	Y+34, r24	; 0x22
		tx_string[cnt+2] = crc[1];
    31a4:	81 81       	ldd	r24, Z+1	; 0x01
    31a6:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+3] = crc[2];
    31a8:	82 81       	ldd	r24, Z+2	; 0x02
    31aa:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+4] = crc[3];
    31ac:	83 81       	ldd	r24, Z+3	; 0x03
    31ae:	8d a3       	std	Y+37, r24	; 0x25
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    31b0:	8d e0       	ldi	r24, 0x0D	; 13
    31b2:	8e a3       	std	Y+38, r24	; 0x26
    31b4:	ae 01       	movw	r20, r28
    31b6:	49 5d       	subi	r20, 0xD9	; 217
    31b8:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    31ba:	ea ef       	ldi	r30, 0xFA	; 250
    31bc:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    31be:	0f 2e       	mov	r0, r31
    31c0:	f1 ec       	ldi	r31, 0xC1	; 193
    31c2:	cf 2e       	mov	r12, r31
    31c4:	d1 2c       	mov	r13, r1
    31c6:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    31c8:	f1 2c       	mov	r15, r1
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    31ca:	d8 01       	movw	r26, r16
    31cc:	2d 91       	ld	r18, X+
    31ce:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    31d0:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    31d2:	91 81       	ldd	r25, Z+1	; 0x01
    31d4:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    31d6:	98 13       	cpse	r25, r24
    31d8:	04 c0       	rjmp	.+8      	; 0x31e2 <main+0x18e2>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    31da:	d6 01       	movw	r26, r12
    31dc:	8c 91       	ld	r24, X
    31de:	80 62       	ori	r24, 0x20	; 32
    31e0:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    31e2:	30 81       	ld	r19, Z
    31e4:	83 81       	ldd	r24, Z+3	; 0x03
    31e6:	94 81       	ldd	r25, Z+4	; 0x04
    31e8:	83 0f       	add	r24, r19
    31ea:	91 1d       	adc	r25, r1
    31ec:	dc 01       	movw	r26, r24
    31ee:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    31f0:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    31f2:	68 2f       	mov	r22, r24
    31f4:	70 e0       	ldi	r23, 0x00	; 0
    31f6:	22 81       	ldd	r18, Z+2	; 0x02
    31f8:	30 e0       	ldi	r19, 0x00	; 0
    31fa:	21 50       	subi	r18, 0x01	; 1
    31fc:	31 09       	sbc	r19, r1
    31fe:	62 17       	cp	r22, r18
    3200:	73 07       	cpc	r23, r19
    3202:	11 f0       	breq	.+4      	; 0x3208 <main+0x1908>
    3204:	8f 5f       	subi	r24, 0xFF	; 255
    3206:	01 c0       	rjmp	.+2      	; 0x320a <main+0x190a>
    3208:	8f 2d       	mov	r24, r15
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    320a:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    320c:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    320e:	04 17       	cp	r16, r20
    3210:	15 07       	cpc	r17, r21
    3212:	d9 f6       	brne	.-74     	; 0x31ca <main+0x18ca>
    3214:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <main+0x266>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    3218:	6e e1       	ldi	r22, 0x1E	; 30
    321a:	70 e0       	ldi	r23, 0x00	; 0
    321c:	c5 01       	movw	r24, r10
    321e:	0e 94 97 23 	call	0x472e	; 0x472e <strnlen>
    3222:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    3224:	8b 30       	cpi	r24, 0x0B	; 11
    3226:	91 05       	cpc	r25, r1
    3228:	6c f0       	brlt	.+26     	; 0x3244 <main+0x1944>
    322a:	e6 ee       	ldi	r30, 0xE6	; 230
    322c:	f4 e0       	ldi	r31, 0x04	; 4
    322e:	de 01       	movw	r26, r28
    3230:	aa 5b       	subi	r26, 0xBA	; 186
    3232:	bf 4f       	sbci	r27, 0xFF	; 255
    3234:	84 52       	subi	r24, 0x24	; 36
    3236:	9b 4f       	sbci	r25, 0xFB	; 251
    3238:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    323a:	91 91       	ld	r25, Z+
    323c:	9d 93       	st	X+, r25
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    323e:	e2 17       	cp	r30, r18
    3240:	f3 07       	cpc	r31, r19
    3242:	d9 f7       	brne	.-10     	; 0x323a <main+0x193a>
		printStatus("");
		break;
		
		case 153:	// Setch0.Dgain
		ParamParse(rx_string, param);
		ch0.Dgain = atof(param);
    3244:	ce 01       	movw	r24, r28
    3246:	8a 5b       	subi	r24, 0xBA	; 186
    3248:	9f 4f       	sbci	r25, 0xFF	; 255
    324a:	0e 94 4f 23 	call	0x469e	; 0x469e <atof>
    324e:	60 93 3a 04 	sts	0x043A, r22
    3252:	70 93 3b 04 	sts	0x043B, r23
    3256:	80 93 3c 04 	sts	0x043C, r24
    325a:	90 93 3d 04 	sts	0x043D, r25
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    325e:	81 e2       	ldi	r24, 0x21	; 33
    3260:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    3262:	f5 01       	movw	r30, r10
    3264:	81 81       	ldd	r24, Z+1	; 0x01
    3266:	8f 8f       	std	Y+31, r24	; 0x1f
    3268:	82 81       	ldd	r24, Z+2	; 0x02
    326a:	88 a3       	std	Y+32, r24	; 0x20
    326c:	83 81       	ldd	r24, Z+3	; 0x03
    326e:	89 a3       	std	Y+33, r24	; 0x21
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    3270:	1a a2       	std	Y+34, r1	; 0x22
    3272:	1b a2       	std	Y+35, r1	; 0x23
    3274:	1c a2       	std	Y+36, r1	; 0x24
    3276:	8e 01       	movw	r16, r28
    3278:	02 5e       	subi	r16, 0xE2	; 226
    327a:	1f 4f       	sbci	r17, 0xFF	; 255
    327c:	ae 01       	movw	r20, r28
    327e:	4e 5d       	subi	r20, 0xDE	; 222
    3280:	5f 4f       	sbci	r21, 0xFF	; 255
    3282:	f8 01       	movw	r30, r16
    3284:	80 e0       	ldi	r24, 0x00	; 0
    3286:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    3288:	b8 e0       	ldi	r27, 0x08	; 8
    328a:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    328c:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    328e:	29 2f       	mov	r18, r25
    3290:	33 27       	eor	r19, r19
    3292:	27 fd       	sbrc	r18, 7
    3294:	3a 95       	dec	r19
    3296:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
    3298:	32 2f       	mov	r19, r18
    329a:	22 27       	eor	r18, r18
    329c:	6b 2f       	mov	r22, r27
    329e:	7f 2d       	mov	r23, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    32a0:	33 23       	and	r19, r19
    32a2:	3c f4       	brge	.+14     	; 0x32b2 <main+0x19b2>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    32a4:	22 0f       	add	r18, r18
    32a6:	33 1f       	adc	r19, r19
    32a8:	a1 e2       	ldi	r26, 0x21	; 33
    32aa:	2a 27       	eor	r18, r26
    32ac:	a0 e1       	ldi	r26, 0x10	; 16
    32ae:	3a 27       	eor	r19, r26
    32b0:	02 c0       	rjmp	.+4      	; 0x32b6 <main+0x19b6>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    32b2:	22 0f       	add	r18, r18
    32b4:	33 1f       	adc	r19, r19
    32b6:	61 50       	subi	r22, 0x01	; 1
    32b8:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    32ba:	91 f7       	brne	.-28     	; 0x32a0 <main+0x19a0>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    32bc:	98 2f       	mov	r25, r24
    32be:	88 27       	eor	r24, r24
    32c0:	82 27       	eor	r24, r18
    32c2:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    32c4:	e4 17       	cp	r30, r20
    32c6:	f5 07       	cpc	r31, r21
    32c8:	09 f7       	brne	.-62     	; 0x328c <main+0x198c>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    32ca:	7c 01       	movw	r14, r24
    32cc:	40 e1       	ldi	r20, 0x10	; 16
    32ce:	6c e0       	ldi	r22, 0x0C	; 12
    32d0:	74 e0       	ldi	r23, 0x04	; 4
    32d2:	0e 94 ac 23 	call	0x4758	; 0x4758 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    32d6:	8c e0       	ldi	r24, 0x0C	; 12
    32d8:	94 e0       	ldi	r25, 0x04	; 4
    32da:	0e 94 a2 23 	call	0x4744	; 0x4744 <strupr>
	if(crcXmodem < 0x10)
    32de:	b0 e1       	ldi	r27, 0x10	; 16
    32e0:	eb 16       	cp	r14, r27
    32e2:	f1 04       	cpc	r15, r1
    32e4:	38 f4       	brcc	.+14     	; 0x32f4 <main+0x19f4>
	{
		tx_string[cnt+4] = crc[0];
    32e6:	80 91 0c 04 	lds	r24, 0x040C
    32ea:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = '0';
    32ec:	80 e3       	ldi	r24, 0x30	; 48
    32ee:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = '0';
    32f0:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';
    32f2:	8a a3       	std	Y+34, r24	; 0x22
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    32f4:	c7 01       	movw	r24, r14
    32f6:	40 97       	sbiw	r24, 0x10	; 16
    32f8:	80 3f       	cpi	r24, 0xF0	; 240
    32fa:	91 05       	cpc	r25, r1
    32fc:	48 f4       	brcc	.+18     	; 0x3310 <main+0x1a10>
	{
		tx_string[cnt+4] = crc[1];
    32fe:	ec e0       	ldi	r30, 0x0C	; 12
    3300:	f4 e0       	ldi	r31, 0x04	; 4
    3302:	81 81       	ldd	r24, Z+1	; 0x01
    3304:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[0];
    3306:	80 81       	ld	r24, Z
    3308:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = '0';
    330a:	80 e3       	ldi	r24, 0x30	; 48
    330c:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';		
    330e:	8a a3       	std	Y+34, r24	; 0x22
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    3310:	c7 01       	movw	r24, r14
    3312:	9a 95       	dec	r25
    3314:	81 15       	cp	r24, r1
    3316:	9f 40       	sbci	r25, 0x0F	; 15
    3318:	50 f4       	brcc	.+20     	; 0x332e <main+0x1a2e>
	{
		tx_string[cnt+4] = crc[2];
    331a:	ec e0       	ldi	r30, 0x0C	; 12
    331c:	f4 e0       	ldi	r31, 0x04	; 4
    331e:	82 81       	ldd	r24, Z+2	; 0x02
    3320:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[1];
    3322:	81 81       	ldd	r24, Z+1	; 0x01
    3324:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = crc[0];
    3326:	80 81       	ld	r24, Z
    3328:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';		
    332a:	80 e3       	ldi	r24, 0x30	; 48
    332c:	8a a3       	std	Y+34, r24	; 0x22
	}
	if(crcXmodem >= 0x1000)
    332e:	e1 14       	cp	r14, r1
    3330:	f0 e1       	ldi	r31, 0x10	; 16
    3332:	ff 06       	cpc	r15, r31
    3334:	50 f0       	brcs	.+20     	; 0x334a <main+0x1a4a>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    3336:	ec e0       	ldi	r30, 0x0C	; 12
    3338:	f4 e0       	ldi	r31, 0x04	; 4
    333a:	80 81       	ld	r24, Z
    333c:	8a a3       	std	Y+34, r24	; 0x22
		tx_string[cnt+2] = crc[1];
    333e:	81 81       	ldd	r24, Z+1	; 0x01
    3340:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+3] = crc[2];
    3342:	82 81       	ldd	r24, Z+2	; 0x02
    3344:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+4] = crc[3];
    3346:	83 81       	ldd	r24, Z+3	; 0x03
    3348:	8d a3       	std	Y+37, r24	; 0x25
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    334a:	8d e0       	ldi	r24, 0x0D	; 13
    334c:	8e a3       	std	Y+38, r24	; 0x26
    334e:	ae 01       	movw	r20, r28
    3350:	49 5d       	subi	r20, 0xD9	; 217
    3352:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3354:	ea ef       	ldi	r30, 0xFA	; 250
    3356:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3358:	0f 2e       	mov	r0, r31
    335a:	f1 ec       	ldi	r31, 0xC1	; 193
    335c:	cf 2e       	mov	r12, r31
    335e:	d1 2c       	mov	r13, r1
    3360:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3362:	f1 2c       	mov	r15, r1
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    3364:	d8 01       	movw	r26, r16
    3366:	2d 91       	ld	r18, X+
    3368:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    336a:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    336c:	91 81       	ldd	r25, Z+1	; 0x01
    336e:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    3370:	98 13       	cpse	r25, r24
    3372:	04 c0       	rjmp	.+8      	; 0x337c <main+0x1a7c>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3374:	d6 01       	movw	r26, r12
    3376:	8c 91       	ld	r24, X
    3378:	80 62       	ori	r24, 0x20	; 32
    337a:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    337c:	30 81       	ld	r19, Z
    337e:	83 81       	ldd	r24, Z+3	; 0x03
    3380:	94 81       	ldd	r25, Z+4	; 0x04
    3382:	83 0f       	add	r24, r19
    3384:	91 1d       	adc	r25, r1
    3386:	dc 01       	movw	r26, r24
    3388:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    338a:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    338c:	68 2f       	mov	r22, r24
    338e:	70 e0       	ldi	r23, 0x00	; 0
    3390:	22 81       	ldd	r18, Z+2	; 0x02
    3392:	30 e0       	ldi	r19, 0x00	; 0
    3394:	21 50       	subi	r18, 0x01	; 1
    3396:	31 09       	sbc	r19, r1
    3398:	62 17       	cp	r22, r18
    339a:	73 07       	cpc	r23, r19
    339c:	11 f0       	breq	.+4      	; 0x33a2 <main+0x1aa2>
    339e:	8f 5f       	subi	r24, 0xFF	; 255
    33a0:	01 c0       	rjmp	.+2      	; 0x33a4 <main+0x1aa4>
    33a2:	8f 2d       	mov	r24, r15
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    33a4:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    33a6:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    33a8:	04 17       	cp	r16, r20
    33aa:	15 07       	cpc	r17, r21
    33ac:	d9 f6       	brne	.-74     	; 0x3364 <main+0x1a64>
    33ae:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <main+0x266>
		ch0.Dgain = atof(param);
		printStatus("");
		break;	
		
		case 154:	// Set heater on/off ch0
		if(rx_string[10] == '1')
    33b2:	f5 01       	movw	r30, r10
    33b4:	82 85       	ldd	r24, Z+10	; 0x0a
    33b6:	81 33       	cpi	r24, 0x31	; 49
    33b8:	09 f0       	breq	.+2      	; 0x33bc <main+0x1abc>
    33ba:	b0 c0       	rjmp	.+352    	; 0x351c <main+0x1c1c>
		{
			ch0.heaterEnable = true;
    33bc:	81 e0       	ldi	r24, 0x01	; 1
    33be:	80 93 78 04 	sts	0x0478, r24
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    33c2:	81 e2       	ldi	r24, 0x21	; 33
    33c4:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    33c6:	81 81       	ldd	r24, Z+1	; 0x01
    33c8:	8f 8f       	std	Y+31, r24	; 0x1f
    33ca:	82 81       	ldd	r24, Z+2	; 0x02
    33cc:	88 a3       	std	Y+32, r24	; 0x20
    33ce:	83 81       	ldd	r24, Z+3	; 0x03
    33d0:	89 a3       	std	Y+33, r24	; 0x21
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    33d2:	8f e4       	ldi	r24, 0x4F	; 79
    33d4:	8a a3       	std	Y+34, r24	; 0x22
    33d6:	8e e4       	ldi	r24, 0x4E	; 78
    33d8:	8b a3       	std	Y+35, r24	; 0x23
    33da:	1c a2       	std	Y+36, r1	; 0x24
    33dc:	1d a2       	std	Y+37, r1	; 0x25
    33de:	1e a2       	std	Y+38, r1	; 0x26
    33e0:	8e 01       	movw	r16, r28
    33e2:	02 5e       	subi	r16, 0xE2	; 226
    33e4:	1f 4f       	sbci	r17, 0xFF	; 255
    33e6:	ae 01       	movw	r20, r28
    33e8:	4c 5d       	subi	r20, 0xDC	; 220
    33ea:	5f 4f       	sbci	r21, 0xFF	; 255
    33ec:	f8 01       	movw	r30, r16
    33ee:	80 e0       	ldi	r24, 0x00	; 0
    33f0:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    33f2:	b8 e0       	ldi	r27, 0x08	; 8
    33f4:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    33f6:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    33f8:	29 2f       	mov	r18, r25
    33fa:	33 27       	eor	r19, r19
    33fc:	27 fd       	sbrc	r18, 7
    33fe:	3a 95       	dec	r19
    3400:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
    3402:	32 2f       	mov	r19, r18
    3404:	22 27       	eor	r18, r18
    3406:	6b 2f       	mov	r22, r27
    3408:	7f 2d       	mov	r23, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    340a:	33 23       	and	r19, r19
    340c:	3c f4       	brge	.+14     	; 0x341c <main+0x1b1c>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    340e:	22 0f       	add	r18, r18
    3410:	33 1f       	adc	r19, r19
    3412:	a1 e2       	ldi	r26, 0x21	; 33
    3414:	2a 27       	eor	r18, r26
    3416:	a0 e1       	ldi	r26, 0x10	; 16
    3418:	3a 27       	eor	r19, r26
    341a:	02 c0       	rjmp	.+4      	; 0x3420 <main+0x1b20>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    341c:	22 0f       	add	r18, r18
    341e:	33 1f       	adc	r19, r19
    3420:	61 50       	subi	r22, 0x01	; 1
    3422:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    3424:	91 f7       	brne	.-28     	; 0x340a <main+0x1b0a>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    3426:	98 2f       	mov	r25, r24
    3428:	88 27       	eor	r24, r24
    342a:	82 27       	eor	r24, r18
    342c:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    342e:	e4 17       	cp	r30, r20
    3430:	f5 07       	cpc	r31, r21
    3432:	09 f7       	brne	.-62     	; 0x33f6 <main+0x1af6>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    3434:	7c 01       	movw	r14, r24
    3436:	40 e1       	ldi	r20, 0x10	; 16
    3438:	6c e0       	ldi	r22, 0x0C	; 12
    343a:	74 e0       	ldi	r23, 0x04	; 4
    343c:	0e 94 ac 23 	call	0x4758	; 0x4758 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    3440:	8c e0       	ldi	r24, 0x0C	; 12
    3442:	94 e0       	ldi	r25, 0x04	; 4
    3444:	0e 94 a2 23 	call	0x4744	; 0x4744 <strupr>
	if(crcXmodem < 0x10)
    3448:	b0 e1       	ldi	r27, 0x10	; 16
    344a:	eb 16       	cp	r14, r27
    344c:	f1 04       	cpc	r15, r1
    344e:	38 f4       	brcc	.+14     	; 0x345e <main+0x1b5e>
	{
		tx_string[cnt+4] = crc[0];
    3450:	80 91 0c 04 	lds	r24, 0x040C
    3454:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+3] = '0';
    3456:	80 e3       	ldi	r24, 0x30	; 48
    3458:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+2] = '0';
    345a:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+1] = '0';
    345c:	8c a3       	std	Y+36, r24	; 0x24
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    345e:	c7 01       	movw	r24, r14
    3460:	40 97       	sbiw	r24, 0x10	; 16
    3462:	80 3f       	cpi	r24, 0xF0	; 240
    3464:	91 05       	cpc	r25, r1
    3466:	48 f4       	brcc	.+18     	; 0x347a <main+0x1b7a>
	{
		tx_string[cnt+4] = crc[1];
    3468:	ec e0       	ldi	r30, 0x0C	; 12
    346a:	f4 e0       	ldi	r31, 0x04	; 4
    346c:	81 81       	ldd	r24, Z+1	; 0x01
    346e:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+3] = crc[0];
    3470:	80 81       	ld	r24, Z
    3472:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+2] = '0';
    3474:	80 e3       	ldi	r24, 0x30	; 48
    3476:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+1] = '0';		
    3478:	8c a3       	std	Y+36, r24	; 0x24
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    347a:	c7 01       	movw	r24, r14
    347c:	9a 95       	dec	r25
    347e:	81 15       	cp	r24, r1
    3480:	9f 40       	sbci	r25, 0x0F	; 15
    3482:	50 f4       	brcc	.+20     	; 0x3498 <main+0x1b98>
	{
		tx_string[cnt+4] = crc[2];
    3484:	ec e0       	ldi	r30, 0x0C	; 12
    3486:	f4 e0       	ldi	r31, 0x04	; 4
    3488:	82 81       	ldd	r24, Z+2	; 0x02
    348a:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+3] = crc[1];
    348c:	81 81       	ldd	r24, Z+1	; 0x01
    348e:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+2] = crc[0];
    3490:	80 81       	ld	r24, Z
    3492:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+1] = '0';		
    3494:	80 e3       	ldi	r24, 0x30	; 48
    3496:	8c a3       	std	Y+36, r24	; 0x24
	}
	if(crcXmodem >= 0x1000)
    3498:	e1 14       	cp	r14, r1
    349a:	f0 e1       	ldi	r31, 0x10	; 16
    349c:	ff 06       	cpc	r15, r31
    349e:	50 f0       	brcs	.+20     	; 0x34b4 <main+0x1bb4>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    34a0:	ec e0       	ldi	r30, 0x0C	; 12
    34a2:	f4 e0       	ldi	r31, 0x04	; 4
    34a4:	80 81       	ld	r24, Z
    34a6:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = crc[1];
    34a8:	81 81       	ldd	r24, Z+1	; 0x01
    34aa:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[2];
    34ac:	82 81       	ldd	r24, Z+2	; 0x02
    34ae:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+4] = crc[3];
    34b0:	83 81       	ldd	r24, Z+3	; 0x03
    34b2:	8f a3       	std	Y+39, r24	; 0x27
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    34b4:	8d e0       	ldi	r24, 0x0D	; 13
    34b6:	88 a7       	std	Y+40, r24	; 0x28
    34b8:	ae 01       	movw	r20, r28
    34ba:	47 5d       	subi	r20, 0xD7	; 215
    34bc:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    34be:	ea ef       	ldi	r30, 0xFA	; 250
    34c0:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    34c2:	0f 2e       	mov	r0, r31
    34c4:	f1 ec       	ldi	r31, 0xC1	; 193
    34c6:	cf 2e       	mov	r12, r31
    34c8:	d1 2c       	mov	r13, r1
    34ca:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    34cc:	f1 2c       	mov	r15, r1
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    34ce:	d8 01       	movw	r26, r16
    34d0:	2d 91       	ld	r18, X+
    34d2:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    34d4:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    34d6:	91 81       	ldd	r25, Z+1	; 0x01
    34d8:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    34da:	98 13       	cpse	r25, r24
    34dc:	04 c0       	rjmp	.+8      	; 0x34e6 <main+0x1be6>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    34de:	d6 01       	movw	r26, r12
    34e0:	8c 91       	ld	r24, X
    34e2:	80 62       	ori	r24, 0x20	; 32
    34e4:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    34e6:	30 81       	ld	r19, Z
    34e8:	83 81       	ldd	r24, Z+3	; 0x03
    34ea:	94 81       	ldd	r25, Z+4	; 0x04
    34ec:	83 0f       	add	r24, r19
    34ee:	91 1d       	adc	r25, r1
    34f0:	dc 01       	movw	r26, r24
    34f2:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    34f4:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    34f6:	68 2f       	mov	r22, r24
    34f8:	70 e0       	ldi	r23, 0x00	; 0
    34fa:	22 81       	ldd	r18, Z+2	; 0x02
    34fc:	30 e0       	ldi	r19, 0x00	; 0
    34fe:	21 50       	subi	r18, 0x01	; 1
    3500:	31 09       	sbc	r19, r1
    3502:	62 17       	cp	r22, r18
    3504:	73 07       	cpc	r23, r19
    3506:	11 f0       	breq	.+4      	; 0x350c <main+0x1c0c>
    3508:	8f 5f       	subi	r24, 0xFF	; 255
    350a:	01 c0       	rjmp	.+2      	; 0x350e <main+0x1c0e>
    350c:	8f 2d       	mov	r24, r15
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    350e:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    3510:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    3512:	04 17       	cp	r16, r20
    3514:	15 07       	cpc	r17, r21
    3516:	d9 f6       	brne	.-74     	; 0x34ce <main+0x1bce>
    3518:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <main+0x266>
		if(rx_string[10] == '1')
		{
			ch0.heaterEnable = true;
			printStatus("ON");
		}
		else if(rx_string[10] == '0')
    351c:	80 33       	cpi	r24, 0x30	; 48
    351e:	11 f0       	breq	.+4      	; 0x3524 <main+0x1c24>
    3520:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <main+0x266>
		{
			ch0.heaterEnable = false;
    3524:	10 92 78 04 	sts	0x0478, r1
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    3528:	81 e2       	ldi	r24, 0x21	; 33
    352a:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    352c:	f5 01       	movw	r30, r10
    352e:	81 81       	ldd	r24, Z+1	; 0x01
    3530:	8f 8f       	std	Y+31, r24	; 0x1f
    3532:	82 81       	ldd	r24, Z+2	; 0x02
    3534:	88 a3       	std	Y+32, r24	; 0x20
    3536:	83 81       	ldd	r24, Z+3	; 0x03
    3538:	89 a3       	std	Y+33, r24	; 0x21
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    353a:	8f e4       	ldi	r24, 0x4F	; 79
    353c:	8a a3       	std	Y+34, r24	; 0x22
    353e:	86 e4       	ldi	r24, 0x46	; 70
    3540:	8b a3       	std	Y+35, r24	; 0x23
    3542:	8c a3       	std	Y+36, r24	; 0x24
    3544:	1d a2       	std	Y+37, r1	; 0x25
    3546:	1e a2       	std	Y+38, r1	; 0x26
    3548:	1f a2       	std	Y+39, r1	; 0x27
    354a:	8e 01       	movw	r16, r28
    354c:	02 5e       	subi	r16, 0xE2	; 226
    354e:	1f 4f       	sbci	r17, 0xFF	; 255
    3550:	ae 01       	movw	r20, r28
    3552:	4b 5d       	subi	r20, 0xDB	; 219
    3554:	5f 4f       	sbci	r21, 0xFF	; 255
    3556:	f8 01       	movw	r30, r16
    3558:	80 e0       	ldi	r24, 0x00	; 0
    355a:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    355c:	b8 e0       	ldi	r27, 0x08	; 8
    355e:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    3560:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    3562:	29 2f       	mov	r18, r25
    3564:	33 27       	eor	r19, r19
    3566:	27 fd       	sbrc	r18, 7
    3568:	3a 95       	dec	r19
    356a:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
    356c:	32 2f       	mov	r19, r18
    356e:	22 27       	eor	r18, r18
    3570:	6b 2f       	mov	r22, r27
    3572:	7f 2d       	mov	r23, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    3574:	33 23       	and	r19, r19
    3576:	3c f4       	brge	.+14     	; 0x3586 <main+0x1c86>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    3578:	22 0f       	add	r18, r18
    357a:	33 1f       	adc	r19, r19
    357c:	a1 e2       	ldi	r26, 0x21	; 33
    357e:	2a 27       	eor	r18, r26
    3580:	a0 e1       	ldi	r26, 0x10	; 16
    3582:	3a 27       	eor	r19, r26
    3584:	02 c0       	rjmp	.+4      	; 0x358a <main+0x1c8a>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    3586:	22 0f       	add	r18, r18
    3588:	33 1f       	adc	r19, r19
    358a:	61 50       	subi	r22, 0x01	; 1
    358c:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    358e:	91 f7       	brne	.-28     	; 0x3574 <main+0x1c74>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    3590:	98 2f       	mov	r25, r24
    3592:	88 27       	eor	r24, r24
    3594:	82 27       	eor	r24, r18
    3596:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    3598:	e4 17       	cp	r30, r20
    359a:	f5 07       	cpc	r31, r21
    359c:	09 f7       	brne	.-62     	; 0x3560 <main+0x1c60>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    359e:	7c 01       	movw	r14, r24
    35a0:	40 e1       	ldi	r20, 0x10	; 16
    35a2:	6c e0       	ldi	r22, 0x0C	; 12
    35a4:	74 e0       	ldi	r23, 0x04	; 4
    35a6:	0e 94 ac 23 	call	0x4758	; 0x4758 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    35aa:	8c e0       	ldi	r24, 0x0C	; 12
    35ac:	94 e0       	ldi	r25, 0x04	; 4
    35ae:	0e 94 a2 23 	call	0x4744	; 0x4744 <strupr>
	if(crcXmodem < 0x10)
    35b2:	b0 e1       	ldi	r27, 0x10	; 16
    35b4:	eb 16       	cp	r14, r27
    35b6:	f1 04       	cpc	r15, r1
    35b8:	38 f4       	brcc	.+14     	; 0x35c8 <main+0x1cc8>
	{
		tx_string[cnt+4] = crc[0];
    35ba:	80 91 0c 04 	lds	r24, 0x040C
    35be:	88 a7       	std	Y+40, r24	; 0x28
		tx_string[cnt+3] = '0';
    35c0:	80 e3       	ldi	r24, 0x30	; 48
    35c2:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+2] = '0';
    35c4:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+1] = '0';
    35c6:	8d a3       	std	Y+37, r24	; 0x25
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    35c8:	c7 01       	movw	r24, r14
    35ca:	40 97       	sbiw	r24, 0x10	; 16
    35cc:	80 3f       	cpi	r24, 0xF0	; 240
    35ce:	91 05       	cpc	r25, r1
    35d0:	48 f4       	brcc	.+18     	; 0x35e4 <main+0x1ce4>
	{
		tx_string[cnt+4] = crc[1];
    35d2:	ec e0       	ldi	r30, 0x0C	; 12
    35d4:	f4 e0       	ldi	r31, 0x04	; 4
    35d6:	81 81       	ldd	r24, Z+1	; 0x01
    35d8:	88 a7       	std	Y+40, r24	; 0x28
		tx_string[cnt+3] = crc[0];
    35da:	80 81       	ld	r24, Z
    35dc:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+2] = '0';
    35de:	80 e3       	ldi	r24, 0x30	; 48
    35e0:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+1] = '0';		
    35e2:	8d a3       	std	Y+37, r24	; 0x25
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    35e4:	c7 01       	movw	r24, r14
    35e6:	9a 95       	dec	r25
    35e8:	81 15       	cp	r24, r1
    35ea:	9f 40       	sbci	r25, 0x0F	; 15
    35ec:	50 f4       	brcc	.+20     	; 0x3602 <main+0x1d02>
	{
		tx_string[cnt+4] = crc[2];
    35ee:	ec e0       	ldi	r30, 0x0C	; 12
    35f0:	f4 e0       	ldi	r31, 0x04	; 4
    35f2:	82 81       	ldd	r24, Z+2	; 0x02
    35f4:	88 a7       	std	Y+40, r24	; 0x28
		tx_string[cnt+3] = crc[1];
    35f6:	81 81       	ldd	r24, Z+1	; 0x01
    35f8:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+2] = crc[0];
    35fa:	80 81       	ld	r24, Z
    35fc:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+1] = '0';		
    35fe:	80 e3       	ldi	r24, 0x30	; 48
    3600:	8d a3       	std	Y+37, r24	; 0x25
	}
	if(crcXmodem >= 0x1000)
    3602:	e1 14       	cp	r14, r1
    3604:	f0 e1       	ldi	r31, 0x10	; 16
    3606:	ff 06       	cpc	r15, r31
    3608:	50 f0       	brcs	.+20     	; 0x361e <main+0x1d1e>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    360a:	ec e0       	ldi	r30, 0x0C	; 12
    360c:	f4 e0       	ldi	r31, 0x04	; 4
    360e:	80 81       	ld	r24, Z
    3610:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+2] = crc[1];
    3612:	81 81       	ldd	r24, Z+1	; 0x01
    3614:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+3] = crc[2];
    3616:	82 81       	ldd	r24, Z+2	; 0x02
    3618:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+4] = crc[3];
    361a:	83 81       	ldd	r24, Z+3	; 0x03
    361c:	88 a7       	std	Y+40, r24	; 0x28
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    361e:	8d e0       	ldi	r24, 0x0D	; 13
    3620:	89 a7       	std	Y+41, r24	; 0x29
    3622:	ae 01       	movw	r20, r28
    3624:	46 5d       	subi	r20, 0xD6	; 214
    3626:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3628:	ea ef       	ldi	r30, 0xFA	; 250
    362a:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    362c:	0f 2e       	mov	r0, r31
    362e:	f1 ec       	ldi	r31, 0xC1	; 193
    3630:	cf 2e       	mov	r12, r31
    3632:	d1 2c       	mov	r13, r1
    3634:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3636:	f1 2c       	mov	r15, r1
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    3638:	d8 01       	movw	r26, r16
    363a:	2d 91       	ld	r18, X+
    363c:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    363e:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3640:	91 81       	ldd	r25, Z+1	; 0x01
    3642:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    3644:	98 13       	cpse	r25, r24
    3646:	04 c0       	rjmp	.+8      	; 0x3650 <main+0x1d50>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3648:	d6 01       	movw	r26, r12
    364a:	8c 91       	ld	r24, X
    364c:	80 62       	ori	r24, 0x20	; 32
    364e:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    3650:	30 81       	ld	r19, Z
    3652:	83 81       	ldd	r24, Z+3	; 0x03
    3654:	94 81       	ldd	r25, Z+4	; 0x04
    3656:	83 0f       	add	r24, r19
    3658:	91 1d       	adc	r25, r1
    365a:	dc 01       	movw	r26, r24
    365c:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    365e:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3660:	68 2f       	mov	r22, r24
    3662:	70 e0       	ldi	r23, 0x00	; 0
    3664:	22 81       	ldd	r18, Z+2	; 0x02
    3666:	30 e0       	ldi	r19, 0x00	; 0
    3668:	21 50       	subi	r18, 0x01	; 1
    366a:	31 09       	sbc	r19, r1
    366c:	62 17       	cp	r22, r18
    366e:	73 07       	cpc	r23, r19
    3670:	11 f0       	breq	.+4      	; 0x3676 <main+0x1d76>
    3672:	8f 5f       	subi	r24, 0xFF	; 255
    3674:	01 c0       	rjmp	.+2      	; 0x3678 <main+0x1d78>
    3676:	8f 2d       	mov	r24, r15
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    3678:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    367a:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    367c:	04 17       	cp	r16, r20
    367e:	15 07       	cpc	r17, r21
    3680:	d9 f6       	brne	.-74     	; 0x3638 <main+0x1d38>
    3682:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <main+0x266>
		}
		break;	
		
		// *** Channel 1 ***
		case 250:	// ch1.TempSetPoint
		ParamParse(rx_string, param);
    3686:	be 01       	movw	r22, r28
    3688:	6a 5b       	subi	r22, 0xBA	; 186
    368a:	7f 4f       	sbci	r23, 0xFF	; 255
    368c:	c5 01       	movw	r24, r10
    368e:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <ParamParse>
		ch1.TempSetPoint = atof(param);
    3692:	ce 01       	movw	r24, r28
    3694:	8a 5b       	subi	r24, 0xBA	; 186
    3696:	9f 4f       	sbci	r25, 0xFF	; 255
    3698:	0e 94 4f 23 	call	0x469e	; 0x469e <atof>
    369c:	60 93 79 04 	sts	0x0479, r22
    36a0:	70 93 7a 04 	sts	0x047A, r23
    36a4:	80 93 7b 04 	sts	0x047B, r24
    36a8:	90 93 7c 04 	sts	0x047C, r25
		printStatus("");
    36ac:	87 e3       	ldi	r24, 0x37	; 55
    36ae:	91 e0       	ldi	r25, 0x01	; 1
    36b0:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    36b4:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <main+0x266>
		break;
		
		case 251:	// SetPgainCh1
		ParamParse(rx_string, param);
    36b8:	be 01       	movw	r22, r28
    36ba:	6a 5b       	subi	r22, 0xBA	; 186
    36bc:	7f 4f       	sbci	r23, 0xFF	; 255
    36be:	c5 01       	movw	r24, r10
    36c0:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <ParamParse>
		ch1.Pgain = atof(param);
    36c4:	ce 01       	movw	r24, r28
    36c6:	8a 5b       	subi	r24, 0xBA	; 186
    36c8:	9f 4f       	sbci	r25, 0xFF	; 255
    36ca:	e9 d7       	rcall	.+4050   	; 0x469e <atof>
    36cc:	60 93 95 04 	sts	0x0495, r22
    36d0:	70 93 96 04 	sts	0x0496, r23
    36d4:	80 93 97 04 	sts	0x0497, r24
    36d8:	90 93 98 04 	sts	0x0498, r25
		printStatus("");
    36dc:	87 e3       	ldi	r24, 0x37	; 55
    36de:	91 e0       	ldi	r25, 0x01	; 1
    36e0:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    36e4:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <main+0x266>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    36e8:	6e e1       	ldi	r22, 0x1E	; 30
    36ea:	70 e0       	ldi	r23, 0x00	; 0
    36ec:	c5 01       	movw	r24, r10
    36ee:	0e 94 97 23 	call	0x472e	; 0x472e <strnlen>
    36f2:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    36f4:	8b 30       	cpi	r24, 0x0B	; 11
    36f6:	91 05       	cpc	r25, r1
    36f8:	6c f0       	brlt	.+26     	; 0x3714 <main+0x1e14>
    36fa:	e6 ee       	ldi	r30, 0xE6	; 230
    36fc:	f4 e0       	ldi	r31, 0x04	; 4
    36fe:	de 01       	movw	r26, r28
    3700:	aa 5b       	subi	r26, 0xBA	; 186
    3702:	bf 4f       	sbci	r27, 0xFF	; 255
    3704:	84 52       	subi	r24, 0x24	; 36
    3706:	9b 4f       	sbci	r25, 0xFB	; 251
    3708:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    370a:	91 91       	ld	r25, Z+
    370c:	9d 93       	st	X+, r25
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    370e:	e2 17       	cp	r30, r18
    3710:	f3 07       	cpc	r31, r19
    3712:	d9 f7       	brne	.-10     	; 0x370a <main+0x1e0a>
		printStatus("");
		break;
		
		case 252:	// SetIgainCh1
		ParamParse(rx_string, param);
		ch1.Igain = atof(param);
    3714:	ce 01       	movw	r24, r28
    3716:	8a 5b       	subi	r24, 0xBA	; 186
    3718:	9f 4f       	sbci	r25, 0xFF	; 255
    371a:	c1 d7       	rcall	.+3970   	; 0x469e <atof>
    371c:	60 93 99 04 	sts	0x0499, r22
    3720:	70 93 9a 04 	sts	0x049A, r23
    3724:	80 93 9b 04 	sts	0x049B, r24
    3728:	90 93 9c 04 	sts	0x049C, r25
		printStatus("");
    372c:	87 e3       	ldi	r24, 0x37	; 55
    372e:	91 e0       	ldi	r25, 0x01	; 1
    3730:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    3734:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <main+0x266>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    3738:	6e e1       	ldi	r22, 0x1E	; 30
    373a:	70 e0       	ldi	r23, 0x00	; 0
    373c:	c5 01       	movw	r24, r10
    373e:	f7 d7       	rcall	.+4078   	; 0x472e <strnlen>
    3740:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    3742:	8b 30       	cpi	r24, 0x0B	; 11
    3744:	91 05       	cpc	r25, r1
    3746:	6c f0       	brlt	.+26     	; 0x3762 <main+0x1e62>
    3748:	e6 ee       	ldi	r30, 0xE6	; 230
    374a:	f4 e0       	ldi	r31, 0x04	; 4
    374c:	de 01       	movw	r26, r28
    374e:	aa 5b       	subi	r26, 0xBA	; 186
    3750:	bf 4f       	sbci	r27, 0xFF	; 255
    3752:	84 52       	subi	r24, 0x24	; 36
    3754:	9b 4f       	sbci	r25, 0xFB	; 251
    3756:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    3758:	91 91       	ld	r25, Z+
    375a:	9d 93       	st	X+, r25
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    375c:	e2 17       	cp	r30, r18
    375e:	f3 07       	cpc	r31, r19
    3760:	d9 f7       	brne	.-10     	; 0x3758 <main+0x1e58>
		printStatus("");
		break;
		
		case 253:	// Setch1.Dgain
		ParamParse(rx_string, param);
		ch1.Dgain = atof(param);
    3762:	ce 01       	movw	r24, r28
    3764:	8a 5b       	subi	r24, 0xBA	; 186
    3766:	9f 4f       	sbci	r25, 0xFF	; 255
    3768:	9a d7       	rcall	.+3892   	; 0x469e <atof>
    376a:	60 93 9d 04 	sts	0x049D, r22
    376e:	70 93 9e 04 	sts	0x049E, r23
    3772:	80 93 9f 04 	sts	0x049F, r24
    3776:	90 93 a0 04 	sts	0x04A0, r25
		printStatus("");
    377a:	87 e3       	ldi	r24, 0x37	; 55
    377c:	91 e0       	ldi	r25, 0x01	; 1
    377e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    3782:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <main+0x266>
		break;
		
		case 254:	// Set heater on/off ch1
		if(rx_string[10] == '1')
    3786:	f5 01       	movw	r30, r10
    3788:	82 85       	ldd	r24, Z+10	; 0x0a
    378a:	81 33       	cpi	r24, 0x31	; 49
    378c:	49 f4       	brne	.+18     	; 0x37a0 <main+0x1ea0>
		{
			ch1.heaterEnable = true;
    378e:	81 e0       	ldi	r24, 0x01	; 1
    3790:	80 93 db 04 	sts	0x04DB, r24
			printStatus("ON");
    3794:	81 e3       	ldi	r24, 0x31	; 49
    3796:	91 e0       	ldi	r25, 0x01	; 1
    3798:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    379c:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <main+0x266>
		}
		else if(rx_string[10] == '0')
    37a0:	80 33       	cpi	r24, 0x30	; 48
    37a2:	11 f0       	breq	.+4      	; 0x37a8 <main+0x1ea8>
    37a4:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <main+0x266>
		{
			ch1.heaterEnable = false;
    37a8:	10 92 db 04 	sts	0x04DB, r1
			printStatus("OFF");
    37ac:	84 e3       	ldi	r24, 0x34	; 52
    37ae:	91 e0       	ldi	r25, 0x01	; 1
    37b0:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    37b4:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <main+0x266>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    37b8:	6e e1       	ldi	r22, 0x1E	; 30
    37ba:	70 e0       	ldi	r23, 0x00	; 0
    37bc:	c5 01       	movw	r24, r10
    37be:	b7 d7       	rcall	.+3950   	; 0x472e <strnlen>
    37c0:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    37c2:	8b 30       	cpi	r24, 0x0B	; 11
    37c4:	91 05       	cpc	r25, r1
    37c6:	6c f0       	brlt	.+26     	; 0x37e2 <main+0x1ee2>
    37c8:	e6 ee       	ldi	r30, 0xE6	; 230
    37ca:	f4 e0       	ldi	r31, 0x04	; 4
    37cc:	de 01       	movw	r26, r28
    37ce:	aa 5b       	subi	r26, 0xBA	; 186
    37d0:	bf 4f       	sbci	r27, 0xFF	; 255
    37d2:	84 52       	subi	r24, 0x24	; 36
    37d4:	9b 4f       	sbci	r25, 0xFB	; 251
    37d6:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    37d8:	91 91       	ld	r25, Z+
    37da:	9d 93       	st	X+, r25
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    37dc:	e2 17       	cp	r30, r18
    37de:	f3 07       	cpc	r31, r19
    37e0:	d9 f7       	brne	.-10     	; 0x37d8 <main+0x1ed8>
		break;
		
		// *** Channel 2 ***
		case 350:	// ch2.TempSetPoint
		ParamParse(rx_string, param);
		ch2.TempSetPoint = atof(param);
    37e2:	ce 01       	movw	r24, r28
    37e4:	8a 5b       	subi	r24, 0xBA	; 186
    37e6:	9f 4f       	sbci	r25, 0xFF	; 255
    37e8:	5a d7       	rcall	.+3764   	; 0x469e <atof>
    37ea:	60 93 a7 02 	sts	0x02A7, r22
    37ee:	70 93 a8 02 	sts	0x02A8, r23
    37f2:	80 93 a9 02 	sts	0x02A9, r24
    37f6:	90 93 aa 02 	sts	0x02AA, r25
		printStatus("");
    37fa:	87 e3       	ldi	r24, 0x37	; 55
    37fc:	91 e0       	ldi	r25, 0x01	; 1
    37fe:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    3802:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <main+0x266>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    3806:	6e e1       	ldi	r22, 0x1E	; 30
    3808:	70 e0       	ldi	r23, 0x00	; 0
    380a:	c5 01       	movw	r24, r10
    380c:	90 d7       	rcall	.+3872   	; 0x472e <strnlen>
    380e:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    3810:	8b 30       	cpi	r24, 0x0B	; 11
    3812:	91 05       	cpc	r25, r1
    3814:	6c f0       	brlt	.+26     	; 0x3830 <main+0x1f30>
    3816:	e6 ee       	ldi	r30, 0xE6	; 230
    3818:	f4 e0       	ldi	r31, 0x04	; 4
    381a:	de 01       	movw	r26, r28
    381c:	aa 5b       	subi	r26, 0xBA	; 186
    381e:	bf 4f       	sbci	r27, 0xFF	; 255
    3820:	84 52       	subi	r24, 0x24	; 36
    3822:	9b 4f       	sbci	r25, 0xFB	; 251
    3824:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    3826:	91 91       	ld	r25, Z+
    3828:	9d 93       	st	X+, r25
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    382a:	e2 17       	cp	r30, r18
    382c:	f3 07       	cpc	r31, r19
    382e:	d9 f7       	brne	.-10     	; 0x3826 <main+0x1f26>
		printStatus("");
		break;
		
		case 351:	// SetPgainCh2
		ParamParse(rx_string, param);
		ch2.Pgain = atof(param);
    3830:	ce 01       	movw	r24, r28
    3832:	8a 5b       	subi	r24, 0xBA	; 186
    3834:	9f 4f       	sbci	r25, 0xFF	; 255
    3836:	33 d7       	rcall	.+3686   	; 0x469e <atof>
    3838:	60 93 c3 02 	sts	0x02C3, r22
    383c:	70 93 c4 02 	sts	0x02C4, r23
    3840:	80 93 c5 02 	sts	0x02C5, r24
    3844:	90 93 c6 02 	sts	0x02C6, r25
		printStatus("");
    3848:	87 e3       	ldi	r24, 0x37	; 55
    384a:	91 e0       	ldi	r25, 0x01	; 1
    384c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    3850:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <main+0x266>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    3854:	6e e1       	ldi	r22, 0x1E	; 30
    3856:	70 e0       	ldi	r23, 0x00	; 0
    3858:	c5 01       	movw	r24, r10
    385a:	69 d7       	rcall	.+3794   	; 0x472e <strnlen>
    385c:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    385e:	8b 30       	cpi	r24, 0x0B	; 11
    3860:	91 05       	cpc	r25, r1
    3862:	6c f0       	brlt	.+26     	; 0x387e <main+0x1f7e>
    3864:	e6 ee       	ldi	r30, 0xE6	; 230
    3866:	f4 e0       	ldi	r31, 0x04	; 4
    3868:	de 01       	movw	r26, r28
    386a:	aa 5b       	subi	r26, 0xBA	; 186
    386c:	bf 4f       	sbci	r27, 0xFF	; 255
    386e:	84 52       	subi	r24, 0x24	; 36
    3870:	9b 4f       	sbci	r25, 0xFB	; 251
    3872:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    3874:	91 91       	ld	r25, Z+
    3876:	9d 93       	st	X+, r25
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    3878:	e2 17       	cp	r30, r18
    387a:	f3 07       	cpc	r31, r19
    387c:	d9 f7       	brne	.-10     	; 0x3874 <main+0x1f74>
		printStatus("");
		break;
		
		case 352:	// SetIgainCh2
		ParamParse(rx_string, param);
		ch2.Igain = atof(param);
    387e:	ce 01       	movw	r24, r28
    3880:	8a 5b       	subi	r24, 0xBA	; 186
    3882:	9f 4f       	sbci	r25, 0xFF	; 255
    3884:	0c d7       	rcall	.+3608   	; 0x469e <atof>
    3886:	60 93 c7 02 	sts	0x02C7, r22
    388a:	70 93 c8 02 	sts	0x02C8, r23
    388e:	80 93 c9 02 	sts	0x02C9, r24
    3892:	90 93 ca 02 	sts	0x02CA, r25
		printStatus("");
    3896:	87 e3       	ldi	r24, 0x37	; 55
    3898:	91 e0       	ldi	r25, 0x01	; 1
    389a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    389e:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <main+0x266>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    38a2:	6e e1       	ldi	r22, 0x1E	; 30
    38a4:	70 e0       	ldi	r23, 0x00	; 0
    38a6:	c5 01       	movw	r24, r10
    38a8:	42 d7       	rcall	.+3716   	; 0x472e <strnlen>
    38aa:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    38ac:	8b 30       	cpi	r24, 0x0B	; 11
    38ae:	91 05       	cpc	r25, r1
    38b0:	6c f0       	brlt	.+26     	; 0x38cc <main+0x1fcc>
    38b2:	e6 ee       	ldi	r30, 0xE6	; 230
    38b4:	f4 e0       	ldi	r31, 0x04	; 4
    38b6:	de 01       	movw	r26, r28
    38b8:	aa 5b       	subi	r26, 0xBA	; 186
    38ba:	bf 4f       	sbci	r27, 0xFF	; 255
    38bc:	84 52       	subi	r24, 0x24	; 36
    38be:	9b 4f       	sbci	r25, 0xFB	; 251
    38c0:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    38c2:	91 91       	ld	r25, Z+
    38c4:	9d 93       	st	X+, r25
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    38c6:	e2 17       	cp	r30, r18
    38c8:	f3 07       	cpc	r31, r19
    38ca:	d9 f7       	brne	.-10     	; 0x38c2 <main+0x1fc2>
		printStatus("");
		break;
		
		case 353:	// Setch2.Dgain
		ParamParse(rx_string, param);
		ch2.Dgain = atof(param);
    38cc:	ce 01       	movw	r24, r28
    38ce:	8a 5b       	subi	r24, 0xBA	; 186
    38d0:	9f 4f       	sbci	r25, 0xFF	; 255
    38d2:	e5 d6       	rcall	.+3530   	; 0x469e <atof>
    38d4:	60 93 cb 02 	sts	0x02CB, r22
    38d8:	70 93 cc 02 	sts	0x02CC, r23
    38dc:	80 93 cd 02 	sts	0x02CD, r24
    38e0:	90 93 ce 02 	sts	0x02CE, r25
		printStatus("");
    38e4:	87 e3       	ldi	r24, 0x37	; 55
    38e6:	91 e0       	ldi	r25, 0x01	; 1
    38e8:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    38ec:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <main+0x266>
		break;
		
		case 354:	// Set heater on/off ch2
		if(rx_string[10] == '1')
    38f0:	d5 01       	movw	r26, r10
    38f2:	1a 96       	adiw	r26, 0x0a	; 10
    38f4:	8c 91       	ld	r24, X
    38f6:	81 33       	cpi	r24, 0x31	; 49
    38f8:	49 f4       	brne	.+18     	; 0x390c <main+0x200c>
		{
			ch2.heaterEnable = true;
    38fa:	81 e0       	ldi	r24, 0x01	; 1
    38fc:	80 93 09 03 	sts	0x0309, r24
			printStatus("ON");
    3900:	81 e3       	ldi	r24, 0x31	; 49
    3902:	91 e0       	ldi	r25, 0x01	; 1
    3904:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    3908:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <main+0x266>
		}
		else if(rx_string[10] == '0')
    390c:	80 33       	cpi	r24, 0x30	; 48
    390e:	11 f0       	breq	.+4      	; 0x3914 <main+0x2014>
    3910:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <main+0x266>
		{
			ch2.heaterEnable = false;
    3914:	10 92 09 03 	sts	0x0309, r1
			printStatus("OFF");
    3918:	84 e3       	ldi	r24, 0x34	; 52
    391a:	91 e0       	ldi	r25, 0x01	; 1
    391c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    3920:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <main+0x266>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    3924:	6e e1       	ldi	r22, 0x1E	; 30
    3926:	70 e0       	ldi	r23, 0x00	; 0
    3928:	c5 01       	movw	r24, r10
    392a:	01 d7       	rcall	.+3586   	; 0x472e <strnlen>
    392c:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    392e:	8b 30       	cpi	r24, 0x0B	; 11
    3930:	91 05       	cpc	r25, r1
    3932:	6c f0       	brlt	.+26     	; 0x394e <main+0x204e>
    3934:	e6 ee       	ldi	r30, 0xE6	; 230
    3936:	f4 e0       	ldi	r31, 0x04	; 4
    3938:	de 01       	movw	r26, r28
    393a:	aa 5b       	subi	r26, 0xBA	; 186
    393c:	bf 4f       	sbci	r27, 0xFF	; 255
    393e:	84 52       	subi	r24, 0x24	; 36
    3940:	9b 4f       	sbci	r25, 0xFB	; 251
    3942:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    3944:	91 91       	ld	r25, Z+
    3946:	9d 93       	st	X+, r25
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    3948:	e2 17       	cp	r30, r18
    394a:	f3 07       	cpc	r31, r19
    394c:	d9 f7       	brne	.-10     	; 0x3944 <main+0x2044>
		break;
		
		// *** Channel 4 ***
		case 450:	// ch3.TempSetPoint
		ParamParse(rx_string, param);
		ch3.TempSetPoint = atof(param);
    394e:	ce 01       	movw	r24, r28
    3950:	8a 5b       	subi	r24, 0xBA	; 186
    3952:	9f 4f       	sbci	r25, 0xFF	; 255
    3954:	a4 d6       	rcall	.+3400   	; 0x469e <atof>
    3956:	60 93 42 01 	sts	0x0142, r22
    395a:	70 93 43 01 	sts	0x0143, r23
    395e:	80 93 44 01 	sts	0x0144, r24
    3962:	90 93 45 01 	sts	0x0145, r25
		printStatus("");
    3966:	87 e3       	ldi	r24, 0x37	; 55
    3968:	91 e0       	ldi	r25, 0x01	; 1
    396a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    396e:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <main+0x266>
		break;
		
		case 451:	// SetPgainCh3
		ParamParse(rx_string, param);
    3972:	be 01       	movw	r22, r28
    3974:	6a 5b       	subi	r22, 0xBA	; 186
    3976:	7f 4f       	sbci	r23, 0xFF	; 255
    3978:	c5 01       	movw	r24, r10
    397a:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <ParamParse>
		ch3.Pgain = atof(param);
    397e:	ce 01       	movw	r24, r28
    3980:	8a 5b       	subi	r24, 0xBA	; 186
    3982:	9f 4f       	sbci	r25, 0xFF	; 255
    3984:	8c d6       	rcall	.+3352   	; 0x469e <atof>
    3986:	60 93 5e 01 	sts	0x015E, r22
    398a:	70 93 5f 01 	sts	0x015F, r23
    398e:	80 93 60 01 	sts	0x0160, r24
    3992:	90 93 61 01 	sts	0x0161, r25
		printStatus("");
    3996:	87 e3       	ldi	r24, 0x37	; 55
    3998:	91 e0       	ldi	r25, 0x01	; 1
    399a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    399e:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <main+0x266>
		break;
		
		case 452:	// SetIgainCh3
		ParamParse(rx_string, param);
    39a2:	be 01       	movw	r22, r28
    39a4:	6a 5b       	subi	r22, 0xBA	; 186
    39a6:	7f 4f       	sbci	r23, 0xFF	; 255
    39a8:	c5 01       	movw	r24, r10
    39aa:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <ParamParse>
		ch3.Igain = atof(param);
    39ae:	ce 01       	movw	r24, r28
    39b0:	8a 5b       	subi	r24, 0xBA	; 186
    39b2:	9f 4f       	sbci	r25, 0xFF	; 255
    39b4:	74 d6       	rcall	.+3304   	; 0x469e <atof>
    39b6:	60 93 62 01 	sts	0x0162, r22
    39ba:	70 93 63 01 	sts	0x0163, r23
    39be:	80 93 64 01 	sts	0x0164, r24
    39c2:	90 93 65 01 	sts	0x0165, r25
		printStatus("");
    39c6:	87 e3       	ldi	r24, 0x37	; 55
    39c8:	91 e0       	ldi	r25, 0x01	; 1
    39ca:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    39ce:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <main+0x266>
		break;
		
		case 453:	// Setch3.Dgain
		ParamParse(rx_string, param);
    39d2:	be 01       	movw	r22, r28
    39d4:	6a 5b       	subi	r22, 0xBA	; 186
    39d6:	7f 4f       	sbci	r23, 0xFF	; 255
    39d8:	c5 01       	movw	r24, r10
    39da:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <ParamParse>
		ch3.Dgain = atof(param);
    39de:	ce 01       	movw	r24, r28
    39e0:	8a 5b       	subi	r24, 0xBA	; 186
    39e2:	9f 4f       	sbci	r25, 0xFF	; 255
    39e4:	5c d6       	rcall	.+3256   	; 0x469e <atof>
    39e6:	60 93 66 01 	sts	0x0166, r22
    39ea:	70 93 67 01 	sts	0x0167, r23
    39ee:	80 93 68 01 	sts	0x0168, r24
    39f2:	90 93 69 01 	sts	0x0169, r25
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    39f6:	81 e2       	ldi	r24, 0x21	; 33
    39f8:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    39fa:	f5 01       	movw	r30, r10
    39fc:	81 81       	ldd	r24, Z+1	; 0x01
    39fe:	8f 8f       	std	Y+31, r24	; 0x1f
    3a00:	82 81       	ldd	r24, Z+2	; 0x02
    3a02:	88 a3       	std	Y+32, r24	; 0x20
    3a04:	83 81       	ldd	r24, Z+3	; 0x03
    3a06:	89 a3       	std	Y+33, r24	; 0x21
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    3a08:	1a a2       	std	Y+34, r1	; 0x22
    3a0a:	1b a2       	std	Y+35, r1	; 0x23
    3a0c:	1c a2       	std	Y+36, r1	; 0x24
    3a0e:	8e 01       	movw	r16, r28
    3a10:	02 5e       	subi	r16, 0xE2	; 226
    3a12:	1f 4f       	sbci	r17, 0xFF	; 255
    3a14:	ae 01       	movw	r20, r28
    3a16:	4e 5d       	subi	r20, 0xDE	; 222
    3a18:	5f 4f       	sbci	r21, 0xFF	; 255
    3a1a:	f8 01       	movw	r30, r16
    3a1c:	80 e0       	ldi	r24, 0x00	; 0
    3a1e:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    3a20:	b8 e0       	ldi	r27, 0x08	; 8
    3a22:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    3a24:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    3a26:	29 2f       	mov	r18, r25
    3a28:	33 27       	eor	r19, r19
    3a2a:	27 fd       	sbrc	r18, 7
    3a2c:	3a 95       	dec	r19
    3a2e:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
    3a30:	32 2f       	mov	r19, r18
    3a32:	22 27       	eor	r18, r18
    3a34:	6b 2f       	mov	r22, r27
    3a36:	7f 2d       	mov	r23, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    3a38:	33 23       	and	r19, r19
    3a3a:	3c f4       	brge	.+14     	; 0x3a4a <main+0x214a>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    3a3c:	22 0f       	add	r18, r18
    3a3e:	33 1f       	adc	r19, r19
    3a40:	a1 e2       	ldi	r26, 0x21	; 33
    3a42:	2a 27       	eor	r18, r26
    3a44:	a0 e1       	ldi	r26, 0x10	; 16
    3a46:	3a 27       	eor	r19, r26
    3a48:	02 c0       	rjmp	.+4      	; 0x3a4e <main+0x214e>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    3a4a:	22 0f       	add	r18, r18
    3a4c:	33 1f       	adc	r19, r19
    3a4e:	61 50       	subi	r22, 0x01	; 1
    3a50:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    3a52:	91 f7       	brne	.-28     	; 0x3a38 <main+0x2138>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    3a54:	98 2f       	mov	r25, r24
    3a56:	88 27       	eor	r24, r24
    3a58:	82 27       	eor	r24, r18
    3a5a:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    3a5c:	e4 17       	cp	r30, r20
    3a5e:	f5 07       	cpc	r31, r21
    3a60:	09 f7       	brne	.-62     	; 0x3a24 <main+0x2124>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    3a62:	7c 01       	movw	r14, r24
    3a64:	40 e1       	ldi	r20, 0x10	; 16
    3a66:	6c e0       	ldi	r22, 0x0C	; 12
    3a68:	74 e0       	ldi	r23, 0x04	; 4
    3a6a:	76 d6       	rcall	.+3308   	; 0x4758 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    3a6c:	8c e0       	ldi	r24, 0x0C	; 12
    3a6e:	94 e0       	ldi	r25, 0x04	; 4
    3a70:	69 d6       	rcall	.+3282   	; 0x4744 <strupr>
	if(crcXmodem < 0x10)
    3a72:	b0 e1       	ldi	r27, 0x10	; 16
    3a74:	eb 16       	cp	r14, r27
    3a76:	f1 04       	cpc	r15, r1
    3a78:	38 f4       	brcc	.+14     	; 0x3a88 <main+0x2188>
	{
		tx_string[cnt+4] = crc[0];
    3a7a:	80 91 0c 04 	lds	r24, 0x040C
    3a7e:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = '0';
    3a80:	80 e3       	ldi	r24, 0x30	; 48
    3a82:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = '0';
    3a84:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';
    3a86:	8a a3       	std	Y+34, r24	; 0x22
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    3a88:	c7 01       	movw	r24, r14
    3a8a:	40 97       	sbiw	r24, 0x10	; 16
    3a8c:	80 3f       	cpi	r24, 0xF0	; 240
    3a8e:	91 05       	cpc	r25, r1
    3a90:	48 f4       	brcc	.+18     	; 0x3aa4 <main+0x21a4>
	{
		tx_string[cnt+4] = crc[1];
    3a92:	ec e0       	ldi	r30, 0x0C	; 12
    3a94:	f4 e0       	ldi	r31, 0x04	; 4
    3a96:	81 81       	ldd	r24, Z+1	; 0x01
    3a98:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[0];
    3a9a:	80 81       	ld	r24, Z
    3a9c:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = '0';
    3a9e:	80 e3       	ldi	r24, 0x30	; 48
    3aa0:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';		
    3aa2:	8a a3       	std	Y+34, r24	; 0x22
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    3aa4:	c7 01       	movw	r24, r14
    3aa6:	9a 95       	dec	r25
    3aa8:	81 15       	cp	r24, r1
    3aaa:	9f 40       	sbci	r25, 0x0F	; 15
    3aac:	50 f4       	brcc	.+20     	; 0x3ac2 <main+0x21c2>
	{
		tx_string[cnt+4] = crc[2];
    3aae:	ec e0       	ldi	r30, 0x0C	; 12
    3ab0:	f4 e0       	ldi	r31, 0x04	; 4
    3ab2:	82 81       	ldd	r24, Z+2	; 0x02
    3ab4:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[1];
    3ab6:	81 81       	ldd	r24, Z+1	; 0x01
    3ab8:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = crc[0];
    3aba:	80 81       	ld	r24, Z
    3abc:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';		
    3abe:	80 e3       	ldi	r24, 0x30	; 48
    3ac0:	8a a3       	std	Y+34, r24	; 0x22
	}
	if(crcXmodem >= 0x1000)
    3ac2:	e1 14       	cp	r14, r1
    3ac4:	f0 e1       	ldi	r31, 0x10	; 16
    3ac6:	ff 06       	cpc	r15, r31
    3ac8:	50 f0       	brcs	.+20     	; 0x3ade <main+0x21de>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    3aca:	ec e0       	ldi	r30, 0x0C	; 12
    3acc:	f4 e0       	ldi	r31, 0x04	; 4
    3ace:	80 81       	ld	r24, Z
    3ad0:	8a a3       	std	Y+34, r24	; 0x22
		tx_string[cnt+2] = crc[1];
    3ad2:	81 81       	ldd	r24, Z+1	; 0x01
    3ad4:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+3] = crc[2];
    3ad6:	82 81       	ldd	r24, Z+2	; 0x02
    3ad8:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+4] = crc[3];
    3ada:	83 81       	ldd	r24, Z+3	; 0x03
    3adc:	8d a3       	std	Y+37, r24	; 0x25
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    3ade:	8d e0       	ldi	r24, 0x0D	; 13
    3ae0:	8e a3       	std	Y+38, r24	; 0x26
    3ae2:	ae 01       	movw	r20, r28
    3ae4:	49 5d       	subi	r20, 0xD9	; 217
    3ae6:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3ae8:	ea ef       	ldi	r30, 0xFA	; 250
    3aea:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3aec:	0f 2e       	mov	r0, r31
    3aee:	f1 ec       	ldi	r31, 0xC1	; 193
    3af0:	cf 2e       	mov	r12, r31
    3af2:	d1 2c       	mov	r13, r1
    3af4:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3af6:	f1 2c       	mov	r15, r1
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    3af8:	d8 01       	movw	r26, r16
    3afa:	2d 91       	ld	r18, X+
    3afc:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    3afe:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3b00:	91 81       	ldd	r25, Z+1	; 0x01
    3b02:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    3b04:	98 13       	cpse	r25, r24
    3b06:	04 c0       	rjmp	.+8      	; 0x3b10 <main+0x2210>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3b08:	d6 01       	movw	r26, r12
    3b0a:	8c 91       	ld	r24, X
    3b0c:	80 62       	ori	r24, 0x20	; 32
    3b0e:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    3b10:	30 81       	ld	r19, Z
    3b12:	83 81       	ldd	r24, Z+3	; 0x03
    3b14:	94 81       	ldd	r25, Z+4	; 0x04
    3b16:	83 0f       	add	r24, r19
    3b18:	91 1d       	adc	r25, r1
    3b1a:	dc 01       	movw	r26, r24
    3b1c:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    3b1e:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3b20:	68 2f       	mov	r22, r24
    3b22:	70 e0       	ldi	r23, 0x00	; 0
    3b24:	22 81       	ldd	r18, Z+2	; 0x02
    3b26:	30 e0       	ldi	r19, 0x00	; 0
    3b28:	21 50       	subi	r18, 0x01	; 1
    3b2a:	31 09       	sbc	r19, r1
    3b2c:	62 17       	cp	r22, r18
    3b2e:	73 07       	cpc	r23, r19
    3b30:	11 f0       	breq	.+4      	; 0x3b36 <main+0x2236>
    3b32:	8f 5f       	subi	r24, 0xFF	; 255
    3b34:	01 c0       	rjmp	.+2      	; 0x3b38 <main+0x2238>
    3b36:	8f 2d       	mov	r24, r15
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    3b38:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    3b3a:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    3b3c:	04 17       	cp	r16, r20
    3b3e:	15 07       	cpc	r17, r21
    3b40:	d9 f6       	brne	.-74     	; 0x3af8 <main+0x21f8>
    3b42:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <main+0x266>
		ch3.Dgain = atof(param);
		printStatus("");
		break;
		
		case 454:	// Set heater on/off ch3
		if(rx_string[10] == '1')
    3b46:	f5 01       	movw	r30, r10
    3b48:	82 85       	ldd	r24, Z+10	; 0x0a
    3b4a:	81 33       	cpi	r24, 0x31	; 49
    3b4c:	09 f0       	breq	.+2      	; 0x3b50 <main+0x2250>
    3b4e:	ae c0       	rjmp	.+348    	; 0x3cac <main+0x23ac>
		{
			ch3.heaterEnable = true;
    3b50:	81 e0       	ldi	r24, 0x01	; 1
    3b52:	80 93 a4 01 	sts	0x01A4, r24
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    3b56:	81 e2       	ldi	r24, 0x21	; 33
    3b58:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    3b5a:	81 81       	ldd	r24, Z+1	; 0x01
    3b5c:	8f 8f       	std	Y+31, r24	; 0x1f
    3b5e:	82 81       	ldd	r24, Z+2	; 0x02
    3b60:	88 a3       	std	Y+32, r24	; 0x20
    3b62:	83 81       	ldd	r24, Z+3	; 0x03
    3b64:	89 a3       	std	Y+33, r24	; 0x21
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    3b66:	8f e4       	ldi	r24, 0x4F	; 79
    3b68:	8a a3       	std	Y+34, r24	; 0x22
    3b6a:	8e e4       	ldi	r24, 0x4E	; 78
    3b6c:	8b a3       	std	Y+35, r24	; 0x23
    3b6e:	1c a2       	std	Y+36, r1	; 0x24
    3b70:	1d a2       	std	Y+37, r1	; 0x25
    3b72:	1e a2       	std	Y+38, r1	; 0x26
    3b74:	8e 01       	movw	r16, r28
    3b76:	02 5e       	subi	r16, 0xE2	; 226
    3b78:	1f 4f       	sbci	r17, 0xFF	; 255
    3b7a:	ae 01       	movw	r20, r28
    3b7c:	4c 5d       	subi	r20, 0xDC	; 220
    3b7e:	5f 4f       	sbci	r21, 0xFF	; 255
    3b80:	f8 01       	movw	r30, r16
    3b82:	80 e0       	ldi	r24, 0x00	; 0
    3b84:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    3b86:	b8 e0       	ldi	r27, 0x08	; 8
    3b88:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    3b8a:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    3b8c:	29 2f       	mov	r18, r25
    3b8e:	33 27       	eor	r19, r19
    3b90:	27 fd       	sbrc	r18, 7
    3b92:	3a 95       	dec	r19
    3b94:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
    3b96:	32 2f       	mov	r19, r18
    3b98:	22 27       	eor	r18, r18
    3b9a:	6b 2f       	mov	r22, r27
    3b9c:	7f 2d       	mov	r23, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    3b9e:	33 23       	and	r19, r19
    3ba0:	3c f4       	brge	.+14     	; 0x3bb0 <main+0x22b0>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    3ba2:	22 0f       	add	r18, r18
    3ba4:	33 1f       	adc	r19, r19
    3ba6:	a1 e2       	ldi	r26, 0x21	; 33
    3ba8:	2a 27       	eor	r18, r26
    3baa:	a0 e1       	ldi	r26, 0x10	; 16
    3bac:	3a 27       	eor	r19, r26
    3bae:	02 c0       	rjmp	.+4      	; 0x3bb4 <main+0x22b4>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    3bb0:	22 0f       	add	r18, r18
    3bb2:	33 1f       	adc	r19, r19
    3bb4:	61 50       	subi	r22, 0x01	; 1
    3bb6:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    3bb8:	91 f7       	brne	.-28     	; 0x3b9e <main+0x229e>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    3bba:	98 2f       	mov	r25, r24
    3bbc:	88 27       	eor	r24, r24
    3bbe:	82 27       	eor	r24, r18
    3bc0:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    3bc2:	e4 17       	cp	r30, r20
    3bc4:	f5 07       	cpc	r31, r21
    3bc6:	09 f7       	brne	.-62     	; 0x3b8a <main+0x228a>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    3bc8:	7c 01       	movw	r14, r24
    3bca:	40 e1       	ldi	r20, 0x10	; 16
    3bcc:	6c e0       	ldi	r22, 0x0C	; 12
    3bce:	74 e0       	ldi	r23, 0x04	; 4
    3bd0:	c3 d5       	rcall	.+2950   	; 0x4758 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    3bd2:	8c e0       	ldi	r24, 0x0C	; 12
    3bd4:	94 e0       	ldi	r25, 0x04	; 4
    3bd6:	b6 d5       	rcall	.+2924   	; 0x4744 <strupr>
	if(crcXmodem < 0x10)
    3bd8:	b0 e1       	ldi	r27, 0x10	; 16
    3bda:	eb 16       	cp	r14, r27
    3bdc:	f1 04       	cpc	r15, r1
    3bde:	38 f4       	brcc	.+14     	; 0x3bee <main+0x22ee>
	{
		tx_string[cnt+4] = crc[0];
    3be0:	80 91 0c 04 	lds	r24, 0x040C
    3be4:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+3] = '0';
    3be6:	80 e3       	ldi	r24, 0x30	; 48
    3be8:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+2] = '0';
    3bea:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+1] = '0';
    3bec:	8c a3       	std	Y+36, r24	; 0x24
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    3bee:	c7 01       	movw	r24, r14
    3bf0:	40 97       	sbiw	r24, 0x10	; 16
    3bf2:	80 3f       	cpi	r24, 0xF0	; 240
    3bf4:	91 05       	cpc	r25, r1
    3bf6:	48 f4       	brcc	.+18     	; 0x3c0a <main+0x230a>
	{
		tx_string[cnt+4] = crc[1];
    3bf8:	ec e0       	ldi	r30, 0x0C	; 12
    3bfa:	f4 e0       	ldi	r31, 0x04	; 4
    3bfc:	81 81       	ldd	r24, Z+1	; 0x01
    3bfe:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+3] = crc[0];
    3c00:	80 81       	ld	r24, Z
    3c02:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+2] = '0';
    3c04:	80 e3       	ldi	r24, 0x30	; 48
    3c06:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+1] = '0';		
    3c08:	8c a3       	std	Y+36, r24	; 0x24
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    3c0a:	c7 01       	movw	r24, r14
    3c0c:	9a 95       	dec	r25
    3c0e:	81 15       	cp	r24, r1
    3c10:	9f 40       	sbci	r25, 0x0F	; 15
    3c12:	50 f4       	brcc	.+20     	; 0x3c28 <main+0x2328>
	{
		tx_string[cnt+4] = crc[2];
    3c14:	ec e0       	ldi	r30, 0x0C	; 12
    3c16:	f4 e0       	ldi	r31, 0x04	; 4
    3c18:	82 81       	ldd	r24, Z+2	; 0x02
    3c1a:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+3] = crc[1];
    3c1c:	81 81       	ldd	r24, Z+1	; 0x01
    3c1e:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+2] = crc[0];
    3c20:	80 81       	ld	r24, Z
    3c22:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+1] = '0';		
    3c24:	80 e3       	ldi	r24, 0x30	; 48
    3c26:	8c a3       	std	Y+36, r24	; 0x24
	}
	if(crcXmodem >= 0x1000)
    3c28:	e1 14       	cp	r14, r1
    3c2a:	f0 e1       	ldi	r31, 0x10	; 16
    3c2c:	ff 06       	cpc	r15, r31
    3c2e:	50 f0       	brcs	.+20     	; 0x3c44 <main+0x2344>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    3c30:	ec e0       	ldi	r30, 0x0C	; 12
    3c32:	f4 e0       	ldi	r31, 0x04	; 4
    3c34:	80 81       	ld	r24, Z
    3c36:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = crc[1];
    3c38:	81 81       	ldd	r24, Z+1	; 0x01
    3c3a:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[2];
    3c3c:	82 81       	ldd	r24, Z+2	; 0x02
    3c3e:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+4] = crc[3];
    3c40:	83 81       	ldd	r24, Z+3	; 0x03
    3c42:	8f a3       	std	Y+39, r24	; 0x27
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    3c44:	8d e0       	ldi	r24, 0x0D	; 13
    3c46:	88 a7       	std	Y+40, r24	; 0x28
    3c48:	ae 01       	movw	r20, r28
    3c4a:	47 5d       	subi	r20, 0xD7	; 215
    3c4c:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3c4e:	ea ef       	ldi	r30, 0xFA	; 250
    3c50:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3c52:	0f 2e       	mov	r0, r31
    3c54:	f1 ec       	ldi	r31, 0xC1	; 193
    3c56:	cf 2e       	mov	r12, r31
    3c58:	d1 2c       	mov	r13, r1
    3c5a:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3c5c:	f1 2c       	mov	r15, r1
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    3c5e:	d8 01       	movw	r26, r16
    3c60:	2d 91       	ld	r18, X+
    3c62:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    3c64:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3c66:	91 81       	ldd	r25, Z+1	; 0x01
    3c68:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    3c6a:	98 13       	cpse	r25, r24
    3c6c:	04 c0       	rjmp	.+8      	; 0x3c76 <main+0x2376>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3c6e:	d6 01       	movw	r26, r12
    3c70:	8c 91       	ld	r24, X
    3c72:	80 62       	ori	r24, 0x20	; 32
    3c74:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    3c76:	30 81       	ld	r19, Z
    3c78:	83 81       	ldd	r24, Z+3	; 0x03
    3c7a:	94 81       	ldd	r25, Z+4	; 0x04
    3c7c:	83 0f       	add	r24, r19
    3c7e:	91 1d       	adc	r25, r1
    3c80:	dc 01       	movw	r26, r24
    3c82:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    3c84:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3c86:	68 2f       	mov	r22, r24
    3c88:	70 e0       	ldi	r23, 0x00	; 0
    3c8a:	22 81       	ldd	r18, Z+2	; 0x02
    3c8c:	30 e0       	ldi	r19, 0x00	; 0
    3c8e:	21 50       	subi	r18, 0x01	; 1
    3c90:	31 09       	sbc	r19, r1
    3c92:	62 17       	cp	r22, r18
    3c94:	73 07       	cpc	r23, r19
    3c96:	11 f0       	breq	.+4      	; 0x3c9c <main+0x239c>
    3c98:	8f 5f       	subi	r24, 0xFF	; 255
    3c9a:	01 c0       	rjmp	.+2      	; 0x3c9e <main+0x239e>
    3c9c:	8f 2d       	mov	r24, r15
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    3c9e:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    3ca0:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    3ca2:	04 17       	cp	r16, r20
    3ca4:	15 07       	cpc	r17, r21
    3ca6:	d9 f6       	brne	.-74     	; 0x3c5e <main+0x235e>
    3ca8:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <main+0x266>
		if(rx_string[10] == '1')
		{
			ch3.heaterEnable = true;
			printStatus("ON");
		}
		else if(rx_string[10] == '0')
    3cac:	80 33       	cpi	r24, 0x30	; 48
    3cae:	11 f0       	breq	.+4      	; 0x3cb4 <main+0x23b4>
    3cb0:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <main+0x266>
		{
			ch3.heaterEnable = false;
    3cb4:	10 92 a4 01 	sts	0x01A4, r1
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    3cb8:	81 e2       	ldi	r24, 0x21	; 33
    3cba:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    3cbc:	f5 01       	movw	r30, r10
    3cbe:	81 81       	ldd	r24, Z+1	; 0x01
    3cc0:	8f 8f       	std	Y+31, r24	; 0x1f
    3cc2:	82 81       	ldd	r24, Z+2	; 0x02
    3cc4:	88 a3       	std	Y+32, r24	; 0x20
    3cc6:	83 81       	ldd	r24, Z+3	; 0x03
    3cc8:	89 a3       	std	Y+33, r24	; 0x21
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    3cca:	8f e4       	ldi	r24, 0x4F	; 79
    3ccc:	8a a3       	std	Y+34, r24	; 0x22
    3cce:	86 e4       	ldi	r24, 0x46	; 70
    3cd0:	8b a3       	std	Y+35, r24	; 0x23
    3cd2:	8c a3       	std	Y+36, r24	; 0x24
    3cd4:	1d a2       	std	Y+37, r1	; 0x25
    3cd6:	1e a2       	std	Y+38, r1	; 0x26
    3cd8:	1f a2       	std	Y+39, r1	; 0x27
    3cda:	8e 01       	movw	r16, r28
    3cdc:	02 5e       	subi	r16, 0xE2	; 226
    3cde:	1f 4f       	sbci	r17, 0xFF	; 255
    3ce0:	ae 01       	movw	r20, r28
    3ce2:	4b 5d       	subi	r20, 0xDB	; 219
    3ce4:	5f 4f       	sbci	r21, 0xFF	; 255
    3ce6:	f8 01       	movw	r30, r16
    3ce8:	80 e0       	ldi	r24, 0x00	; 0
    3cea:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    3cec:	b8 e0       	ldi	r27, 0x08	; 8
    3cee:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    3cf0:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    3cf2:	29 2f       	mov	r18, r25
    3cf4:	33 27       	eor	r19, r19
    3cf6:	27 fd       	sbrc	r18, 7
    3cf8:	3a 95       	dec	r19
    3cfa:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
    3cfc:	32 2f       	mov	r19, r18
    3cfe:	22 27       	eor	r18, r18
    3d00:	6b 2f       	mov	r22, r27
    3d02:	7f 2d       	mov	r23, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    3d04:	33 23       	and	r19, r19
    3d06:	3c f4       	brge	.+14     	; 0x3d16 <main+0x2416>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    3d08:	22 0f       	add	r18, r18
    3d0a:	33 1f       	adc	r19, r19
    3d0c:	a1 e2       	ldi	r26, 0x21	; 33
    3d0e:	2a 27       	eor	r18, r26
    3d10:	a0 e1       	ldi	r26, 0x10	; 16
    3d12:	3a 27       	eor	r19, r26
    3d14:	02 c0       	rjmp	.+4      	; 0x3d1a <main+0x241a>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    3d16:	22 0f       	add	r18, r18
    3d18:	33 1f       	adc	r19, r19
    3d1a:	61 50       	subi	r22, 0x01	; 1
    3d1c:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    3d1e:	91 f7       	brne	.-28     	; 0x3d04 <main+0x2404>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    3d20:	98 2f       	mov	r25, r24
    3d22:	88 27       	eor	r24, r24
    3d24:	82 27       	eor	r24, r18
    3d26:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    3d28:	e4 17       	cp	r30, r20
    3d2a:	f5 07       	cpc	r31, r21
    3d2c:	09 f7       	brne	.-62     	; 0x3cf0 <main+0x23f0>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    3d2e:	7c 01       	movw	r14, r24
    3d30:	40 e1       	ldi	r20, 0x10	; 16
    3d32:	6c e0       	ldi	r22, 0x0C	; 12
    3d34:	74 e0       	ldi	r23, 0x04	; 4
    3d36:	10 d5       	rcall	.+2592   	; 0x4758 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    3d38:	8c e0       	ldi	r24, 0x0C	; 12
    3d3a:	94 e0       	ldi	r25, 0x04	; 4
    3d3c:	03 d5       	rcall	.+2566   	; 0x4744 <strupr>
	if(crcXmodem < 0x10)
    3d3e:	b0 e1       	ldi	r27, 0x10	; 16
    3d40:	eb 16       	cp	r14, r27
    3d42:	f1 04       	cpc	r15, r1
    3d44:	38 f4       	brcc	.+14     	; 0x3d54 <main+0x2454>
	{
		tx_string[cnt+4] = crc[0];
    3d46:	80 91 0c 04 	lds	r24, 0x040C
    3d4a:	88 a7       	std	Y+40, r24	; 0x28
		tx_string[cnt+3] = '0';
    3d4c:	80 e3       	ldi	r24, 0x30	; 48
    3d4e:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+2] = '0';
    3d50:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+1] = '0';
    3d52:	8d a3       	std	Y+37, r24	; 0x25
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    3d54:	c7 01       	movw	r24, r14
    3d56:	40 97       	sbiw	r24, 0x10	; 16
    3d58:	80 3f       	cpi	r24, 0xF0	; 240
    3d5a:	91 05       	cpc	r25, r1
    3d5c:	48 f4       	brcc	.+18     	; 0x3d70 <main+0x2470>
	{
		tx_string[cnt+4] = crc[1];
    3d5e:	ec e0       	ldi	r30, 0x0C	; 12
    3d60:	f4 e0       	ldi	r31, 0x04	; 4
    3d62:	81 81       	ldd	r24, Z+1	; 0x01
    3d64:	88 a7       	std	Y+40, r24	; 0x28
		tx_string[cnt+3] = crc[0];
    3d66:	80 81       	ld	r24, Z
    3d68:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+2] = '0';
    3d6a:	80 e3       	ldi	r24, 0x30	; 48
    3d6c:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+1] = '0';		
    3d6e:	8d a3       	std	Y+37, r24	; 0x25
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    3d70:	c7 01       	movw	r24, r14
    3d72:	9a 95       	dec	r25
    3d74:	81 15       	cp	r24, r1
    3d76:	9f 40       	sbci	r25, 0x0F	; 15
    3d78:	50 f4       	brcc	.+20     	; 0x3d8e <main+0x248e>
	{
		tx_string[cnt+4] = crc[2];
    3d7a:	ec e0       	ldi	r30, 0x0C	; 12
    3d7c:	f4 e0       	ldi	r31, 0x04	; 4
    3d7e:	82 81       	ldd	r24, Z+2	; 0x02
    3d80:	88 a7       	std	Y+40, r24	; 0x28
		tx_string[cnt+3] = crc[1];
    3d82:	81 81       	ldd	r24, Z+1	; 0x01
    3d84:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+2] = crc[0];
    3d86:	80 81       	ld	r24, Z
    3d88:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+1] = '0';		
    3d8a:	80 e3       	ldi	r24, 0x30	; 48
    3d8c:	8d a3       	std	Y+37, r24	; 0x25
	}
	if(crcXmodem >= 0x1000)
    3d8e:	e1 14       	cp	r14, r1
    3d90:	f0 e1       	ldi	r31, 0x10	; 16
    3d92:	ff 06       	cpc	r15, r31
    3d94:	50 f0       	brcs	.+20     	; 0x3daa <main+0x24aa>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    3d96:	ec e0       	ldi	r30, 0x0C	; 12
    3d98:	f4 e0       	ldi	r31, 0x04	; 4
    3d9a:	80 81       	ld	r24, Z
    3d9c:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+2] = crc[1];
    3d9e:	81 81       	ldd	r24, Z+1	; 0x01
    3da0:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+3] = crc[2];
    3da2:	82 81       	ldd	r24, Z+2	; 0x02
    3da4:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+4] = crc[3];
    3da6:	83 81       	ldd	r24, Z+3	; 0x03
    3da8:	88 a7       	std	Y+40, r24	; 0x28
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    3daa:	8d e0       	ldi	r24, 0x0D	; 13
    3dac:	89 a7       	std	Y+41, r24	; 0x29
    3dae:	ae 01       	movw	r20, r28
    3db0:	46 5d       	subi	r20, 0xD6	; 214
    3db2:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3db4:	ea ef       	ldi	r30, 0xFA	; 250
    3db6:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3db8:	0f 2e       	mov	r0, r31
    3dba:	f1 ec       	ldi	r31, 0xC1	; 193
    3dbc:	cf 2e       	mov	r12, r31
    3dbe:	d1 2c       	mov	r13, r1
    3dc0:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3dc2:	f1 2c       	mov	r15, r1
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    3dc4:	d8 01       	movw	r26, r16
    3dc6:	2d 91       	ld	r18, X+
    3dc8:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    3dca:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3dcc:	91 81       	ldd	r25, Z+1	; 0x01
    3dce:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    3dd0:	98 13       	cpse	r25, r24
    3dd2:	04 c0       	rjmp	.+8      	; 0x3ddc <main+0x24dc>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3dd4:	d6 01       	movw	r26, r12
    3dd6:	8c 91       	ld	r24, X
    3dd8:	80 62       	ori	r24, 0x20	; 32
    3dda:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    3ddc:	30 81       	ld	r19, Z
    3dde:	83 81       	ldd	r24, Z+3	; 0x03
    3de0:	94 81       	ldd	r25, Z+4	; 0x04
    3de2:	83 0f       	add	r24, r19
    3de4:	91 1d       	adc	r25, r1
    3de6:	dc 01       	movw	r26, r24
    3de8:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    3dea:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3dec:	68 2f       	mov	r22, r24
    3dee:	70 e0       	ldi	r23, 0x00	; 0
    3df0:	22 81       	ldd	r18, Z+2	; 0x02
    3df2:	30 e0       	ldi	r19, 0x00	; 0
    3df4:	21 50       	subi	r18, 0x01	; 1
    3df6:	31 09       	sbc	r19, r1
    3df8:	62 17       	cp	r22, r18
    3dfa:	73 07       	cpc	r23, r19
    3dfc:	11 f0       	breq	.+4      	; 0x3e02 <main+0x2502>
    3dfe:	8f 5f       	subi	r24, 0xFF	; 255
    3e00:	01 c0       	rjmp	.+2      	; 0x3e04 <main+0x2504>
    3e02:	8f 2d       	mov	r24, r15
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    3e04:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    3e06:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    3e08:	04 17       	cp	r16, r20
    3e0a:	15 07       	cpc	r17, r21
    3e0c:	d9 f6       	brne	.-74     	; 0x3dc4 <main+0x24c4>
    3e0e:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <main+0x266>
	ch3.Dgain = eeprom_read_float((float*)eepromAdr_DgainCh3);			
}

static inline void WriteParamToEEPROM()
{
	eeprom_write_float( (float*)eepromAdr_TempSetPoint0, ch0.TempSetPoint );
    3e12:	06 e1       	ldi	r16, 0x16	; 22
    3e14:	14 e0       	ldi	r17, 0x04	; 4
    3e16:	f8 01       	movw	r30, r16
    3e18:	40 81       	ld	r20, Z
    3e1a:	51 81       	ldd	r21, Z+1	; 0x01
    3e1c:	62 81       	ldd	r22, Z+2	; 0x02
    3e1e:	73 81       	ldd	r23, Z+3	; 0x03
    3e20:	80 e0       	ldi	r24, 0x00	; 0
    3e22:	90 e0       	ldi	r25, 0x00	; 0
    3e24:	5b d6       	rcall	.+3254   	; 0x4adc <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_PgainCh0, ch0.Pgain );
    3e26:	d8 01       	movw	r26, r16
    3e28:	5c 96       	adiw	r26, 0x1c	; 28
    3e2a:	4d 91       	ld	r20, X+
    3e2c:	5d 91       	ld	r21, X+
    3e2e:	6d 91       	ld	r22, X+
    3e30:	7c 91       	ld	r23, X
    3e32:	5f 97       	sbiw	r26, 0x1f	; 31
    3e34:	84 e0       	ldi	r24, 0x04	; 4
    3e36:	90 e0       	ldi	r25, 0x00	; 0
    3e38:	51 d6       	rcall	.+3234   	; 0x4adc <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_IgainCh0, ch0.Igain );
    3e3a:	f8 01       	movw	r30, r16
    3e3c:	40 a1       	ldd	r20, Z+32	; 0x20
    3e3e:	51 a1       	ldd	r21, Z+33	; 0x21
    3e40:	62 a1       	ldd	r22, Z+34	; 0x22
    3e42:	73 a1       	ldd	r23, Z+35	; 0x23
    3e44:	88 e0       	ldi	r24, 0x08	; 8
    3e46:	90 e0       	ldi	r25, 0x00	; 0
    3e48:	49 d6       	rcall	.+3218   	; 0x4adc <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_DgainCh0, ch0.Dgain );
    3e4a:	d8 01       	movw	r26, r16
    3e4c:	94 96       	adiw	r26, 0x24	; 36
    3e4e:	4d 91       	ld	r20, X+
    3e50:	5d 91       	ld	r21, X+
    3e52:	6d 91       	ld	r22, X+
    3e54:	7c 91       	ld	r23, X
    3e56:	97 97       	sbiw	r26, 0x27	; 39
    3e58:	8c e0       	ldi	r24, 0x0C	; 12
    3e5a:	90 e0       	ldi	r25, 0x00	; 0
    3e5c:	3f d6       	rcall	.+3198   	; 0x4adc <eeprom_write_dword>
	
	eeprom_write_float( (float*)eepromAdr_TempSetPoint1, ch1.TempSetPoint );
    3e5e:	09 e7       	ldi	r16, 0x79	; 121
    3e60:	14 e0       	ldi	r17, 0x04	; 4
    3e62:	f8 01       	movw	r30, r16
    3e64:	40 81       	ld	r20, Z
    3e66:	51 81       	ldd	r21, Z+1	; 0x01
    3e68:	62 81       	ldd	r22, Z+2	; 0x02
    3e6a:	73 81       	ldd	r23, Z+3	; 0x03
    3e6c:	80 e1       	ldi	r24, 0x10	; 16
    3e6e:	90 e0       	ldi	r25, 0x00	; 0
    3e70:	35 d6       	rcall	.+3178   	; 0x4adc <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_PgainCh1, ch1.Pgain );
    3e72:	d8 01       	movw	r26, r16
    3e74:	5c 96       	adiw	r26, 0x1c	; 28
    3e76:	4d 91       	ld	r20, X+
    3e78:	5d 91       	ld	r21, X+
    3e7a:	6d 91       	ld	r22, X+
    3e7c:	7c 91       	ld	r23, X
    3e7e:	5f 97       	sbiw	r26, 0x1f	; 31
    3e80:	84 e1       	ldi	r24, 0x14	; 20
    3e82:	90 e0       	ldi	r25, 0x00	; 0
    3e84:	2b d6       	rcall	.+3158   	; 0x4adc <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_IgainCh1, ch1.Igain );
    3e86:	f8 01       	movw	r30, r16
    3e88:	40 a1       	ldd	r20, Z+32	; 0x20
    3e8a:	51 a1       	ldd	r21, Z+33	; 0x21
    3e8c:	62 a1       	ldd	r22, Z+34	; 0x22
    3e8e:	73 a1       	ldd	r23, Z+35	; 0x23
    3e90:	88 e1       	ldi	r24, 0x18	; 24
    3e92:	90 e0       	ldi	r25, 0x00	; 0
    3e94:	23 d6       	rcall	.+3142   	; 0x4adc <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_DgainCh1, ch1.Dgain );
    3e96:	d8 01       	movw	r26, r16
    3e98:	94 96       	adiw	r26, 0x24	; 36
    3e9a:	4d 91       	ld	r20, X+
    3e9c:	5d 91       	ld	r21, X+
    3e9e:	6d 91       	ld	r22, X+
    3ea0:	7c 91       	ld	r23, X
    3ea2:	97 97       	sbiw	r26, 0x27	; 39
    3ea4:	8c e1       	ldi	r24, 0x1C	; 28
    3ea6:	90 e0       	ldi	r25, 0x00	; 0
    3ea8:	19 d6       	rcall	.+3122   	; 0x4adc <eeprom_write_dword>
	
	eeprom_write_float( (float*)eepromAdr_TempSetPoint2, ch2.TempSetPoint );
    3eaa:	07 ea       	ldi	r16, 0xA7	; 167
    3eac:	12 e0       	ldi	r17, 0x02	; 2
    3eae:	f8 01       	movw	r30, r16
    3eb0:	40 81       	ld	r20, Z
    3eb2:	51 81       	ldd	r21, Z+1	; 0x01
    3eb4:	62 81       	ldd	r22, Z+2	; 0x02
    3eb6:	73 81       	ldd	r23, Z+3	; 0x03
    3eb8:	80 e2       	ldi	r24, 0x20	; 32
    3eba:	90 e0       	ldi	r25, 0x00	; 0
    3ebc:	0f d6       	rcall	.+3102   	; 0x4adc <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_PgainCh2, ch2.Pgain );
    3ebe:	d8 01       	movw	r26, r16
    3ec0:	5c 96       	adiw	r26, 0x1c	; 28
    3ec2:	4d 91       	ld	r20, X+
    3ec4:	5d 91       	ld	r21, X+
    3ec6:	6d 91       	ld	r22, X+
    3ec8:	7c 91       	ld	r23, X
    3eca:	5f 97       	sbiw	r26, 0x1f	; 31
    3ecc:	84 e2       	ldi	r24, 0x24	; 36
    3ece:	90 e0       	ldi	r25, 0x00	; 0
    3ed0:	05 d6       	rcall	.+3082   	; 0x4adc <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_IgainCh2, ch2.Igain );
    3ed2:	f8 01       	movw	r30, r16
    3ed4:	40 a1       	ldd	r20, Z+32	; 0x20
    3ed6:	51 a1       	ldd	r21, Z+33	; 0x21
    3ed8:	62 a1       	ldd	r22, Z+34	; 0x22
    3eda:	73 a1       	ldd	r23, Z+35	; 0x23
    3edc:	88 e2       	ldi	r24, 0x28	; 40
    3ede:	90 e0       	ldi	r25, 0x00	; 0
    3ee0:	fd d5       	rcall	.+3066   	; 0x4adc <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_DgainCh2, ch2.Dgain );
    3ee2:	d8 01       	movw	r26, r16
    3ee4:	94 96       	adiw	r26, 0x24	; 36
    3ee6:	4d 91       	ld	r20, X+
    3ee8:	5d 91       	ld	r21, X+
    3eea:	6d 91       	ld	r22, X+
    3eec:	7c 91       	ld	r23, X
    3eee:	97 97       	sbiw	r26, 0x27	; 39
    3ef0:	8c e2       	ldi	r24, 0x2C	; 44
    3ef2:	90 e0       	ldi	r25, 0x00	; 0
    3ef4:	f3 d5       	rcall	.+3046   	; 0x4adc <eeprom_write_dword>
	
	eeprom_write_float( (float*)eepromAdr_TempSetPoint3, ch3.TempSetPoint );
    3ef6:	02 e4       	ldi	r16, 0x42	; 66
    3ef8:	11 e0       	ldi	r17, 0x01	; 1
    3efa:	f8 01       	movw	r30, r16
    3efc:	40 81       	ld	r20, Z
    3efe:	51 81       	ldd	r21, Z+1	; 0x01
    3f00:	62 81       	ldd	r22, Z+2	; 0x02
    3f02:	73 81       	ldd	r23, Z+3	; 0x03
    3f04:	80 e3       	ldi	r24, 0x30	; 48
    3f06:	90 e0       	ldi	r25, 0x00	; 0
    3f08:	e9 d5       	rcall	.+3026   	; 0x4adc <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_PgainCh3, ch3.Pgain );
    3f0a:	d8 01       	movw	r26, r16
    3f0c:	5c 96       	adiw	r26, 0x1c	; 28
    3f0e:	4d 91       	ld	r20, X+
    3f10:	5d 91       	ld	r21, X+
    3f12:	6d 91       	ld	r22, X+
    3f14:	7c 91       	ld	r23, X
    3f16:	5f 97       	sbiw	r26, 0x1f	; 31
    3f18:	84 e3       	ldi	r24, 0x34	; 52
    3f1a:	90 e0       	ldi	r25, 0x00	; 0
    3f1c:	df d5       	rcall	.+3006   	; 0x4adc <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_IgainCh3, ch3.Igain );
    3f1e:	f8 01       	movw	r30, r16
    3f20:	40 a1       	ldd	r20, Z+32	; 0x20
    3f22:	51 a1       	ldd	r21, Z+33	; 0x21
    3f24:	62 a1       	ldd	r22, Z+34	; 0x22
    3f26:	73 a1       	ldd	r23, Z+35	; 0x23
    3f28:	88 e3       	ldi	r24, 0x38	; 56
    3f2a:	90 e0       	ldi	r25, 0x00	; 0
    3f2c:	d7 d5       	rcall	.+2990   	; 0x4adc <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_DgainCh3, ch3.Dgain );			
    3f2e:	d8 01       	movw	r26, r16
    3f30:	94 96       	adiw	r26, 0x24	; 36
    3f32:	4d 91       	ld	r20, X+
    3f34:	5d 91       	ld	r21, X+
    3f36:	6d 91       	ld	r22, X+
    3f38:	7c 91       	ld	r23, X
    3f3a:	97 97       	sbiw	r26, 0x27	; 39
    3f3c:	8c e3       	ldi	r24, 0x3C	; 60
    3f3e:	90 e0       	ldi	r25, 0x00	; 0
    3f40:	cd d5       	rcall	.+2970   	; 0x4adc <eeprom_write_dword>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    3f42:	81 e2       	ldi	r24, 0x21	; 33
    3f44:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    3f46:	f5 01       	movw	r30, r10
    3f48:	81 81       	ldd	r24, Z+1	; 0x01
    3f4a:	8f 8f       	std	Y+31, r24	; 0x1f
    3f4c:	82 81       	ldd	r24, Z+2	; 0x02
    3f4e:	88 a3       	std	Y+32, r24	; 0x20
    3f50:	83 81       	ldd	r24, Z+3	; 0x03
    3f52:	89 a3       	std	Y+33, r24	; 0x21
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    3f54:	1a a2       	std	Y+34, r1	; 0x22
    3f56:	1b a2       	std	Y+35, r1	; 0x23
    3f58:	1c a2       	std	Y+36, r1	; 0x24
    3f5a:	8e 01       	movw	r16, r28
    3f5c:	02 5e       	subi	r16, 0xE2	; 226
    3f5e:	1f 4f       	sbci	r17, 0xFF	; 255
    3f60:	ae 01       	movw	r20, r28
    3f62:	4e 5d       	subi	r20, 0xDE	; 222
    3f64:	5f 4f       	sbci	r21, 0xFF	; 255
    3f66:	f8 01       	movw	r30, r16
    3f68:	80 e0       	ldi	r24, 0x00	; 0
    3f6a:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    3f6c:	b8 e0       	ldi	r27, 0x08	; 8
    3f6e:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    3f70:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    3f72:	29 2f       	mov	r18, r25
    3f74:	33 27       	eor	r19, r19
    3f76:	27 fd       	sbrc	r18, 7
    3f78:	3a 95       	dec	r19
    3f7a:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
    3f7c:	32 2f       	mov	r19, r18
    3f7e:	22 27       	eor	r18, r18
    3f80:	6b 2f       	mov	r22, r27
    3f82:	7f 2d       	mov	r23, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    3f84:	33 23       	and	r19, r19
    3f86:	3c f4       	brge	.+14     	; 0x3f96 <main+0x2696>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    3f88:	22 0f       	add	r18, r18
    3f8a:	33 1f       	adc	r19, r19
    3f8c:	a1 e2       	ldi	r26, 0x21	; 33
    3f8e:	2a 27       	eor	r18, r26
    3f90:	a0 e1       	ldi	r26, 0x10	; 16
    3f92:	3a 27       	eor	r19, r26
    3f94:	02 c0       	rjmp	.+4      	; 0x3f9a <main+0x269a>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    3f96:	22 0f       	add	r18, r18
    3f98:	33 1f       	adc	r19, r19
    3f9a:	61 50       	subi	r22, 0x01	; 1
    3f9c:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    3f9e:	91 f7       	brne	.-28     	; 0x3f84 <main+0x2684>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    3fa0:	98 2f       	mov	r25, r24
    3fa2:	88 27       	eor	r24, r24
    3fa4:	82 27       	eor	r24, r18
    3fa6:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    3fa8:	e4 17       	cp	r30, r20
    3faa:	f5 07       	cpc	r31, r21
    3fac:	09 f7       	brne	.-62     	; 0x3f70 <main+0x2670>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    3fae:	7c 01       	movw	r14, r24
    3fb0:	40 e1       	ldi	r20, 0x10	; 16
    3fb2:	6c e0       	ldi	r22, 0x0C	; 12
    3fb4:	74 e0       	ldi	r23, 0x04	; 4
    3fb6:	d0 d3       	rcall	.+1952   	; 0x4758 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    3fb8:	8c e0       	ldi	r24, 0x0C	; 12
    3fba:	94 e0       	ldi	r25, 0x04	; 4
    3fbc:	c3 d3       	rcall	.+1926   	; 0x4744 <strupr>
	if(crcXmodem < 0x10)
    3fbe:	b0 e1       	ldi	r27, 0x10	; 16
    3fc0:	eb 16       	cp	r14, r27
    3fc2:	f1 04       	cpc	r15, r1
    3fc4:	38 f4       	brcc	.+14     	; 0x3fd4 <main+0x26d4>
	{
		tx_string[cnt+4] = crc[0];
    3fc6:	80 91 0c 04 	lds	r24, 0x040C
    3fca:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = '0';
    3fcc:	80 e3       	ldi	r24, 0x30	; 48
    3fce:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = '0';
    3fd0:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';
    3fd2:	8a a3       	std	Y+34, r24	; 0x22
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    3fd4:	c7 01       	movw	r24, r14
    3fd6:	40 97       	sbiw	r24, 0x10	; 16
    3fd8:	80 3f       	cpi	r24, 0xF0	; 240
    3fda:	91 05       	cpc	r25, r1
    3fdc:	48 f4       	brcc	.+18     	; 0x3ff0 <main+0x26f0>
	{
		tx_string[cnt+4] = crc[1];
    3fde:	ec e0       	ldi	r30, 0x0C	; 12
    3fe0:	f4 e0       	ldi	r31, 0x04	; 4
    3fe2:	81 81       	ldd	r24, Z+1	; 0x01
    3fe4:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[0];
    3fe6:	80 81       	ld	r24, Z
    3fe8:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = '0';
    3fea:	80 e3       	ldi	r24, 0x30	; 48
    3fec:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';		
    3fee:	8a a3       	std	Y+34, r24	; 0x22
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    3ff0:	c7 01       	movw	r24, r14
    3ff2:	9a 95       	dec	r25
    3ff4:	81 15       	cp	r24, r1
    3ff6:	9f 40       	sbci	r25, 0x0F	; 15
    3ff8:	50 f4       	brcc	.+20     	; 0x400e <main+0x270e>
	{
		tx_string[cnt+4] = crc[2];
    3ffa:	ec e0       	ldi	r30, 0x0C	; 12
    3ffc:	f4 e0       	ldi	r31, 0x04	; 4
    3ffe:	82 81       	ldd	r24, Z+2	; 0x02
    4000:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[1];
    4002:	81 81       	ldd	r24, Z+1	; 0x01
    4004:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = crc[0];
    4006:	80 81       	ld	r24, Z
    4008:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';		
    400a:	80 e3       	ldi	r24, 0x30	; 48
    400c:	8a a3       	std	Y+34, r24	; 0x22
	}
	if(crcXmodem >= 0x1000)
    400e:	e1 14       	cp	r14, r1
    4010:	f0 e1       	ldi	r31, 0x10	; 16
    4012:	ff 06       	cpc	r15, r31
    4014:	50 f0       	brcs	.+20     	; 0x402a <main+0x272a>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    4016:	ec e0       	ldi	r30, 0x0C	; 12
    4018:	f4 e0       	ldi	r31, 0x04	; 4
    401a:	80 81       	ld	r24, Z
    401c:	8a a3       	std	Y+34, r24	; 0x22
		tx_string[cnt+2] = crc[1];
    401e:	81 81       	ldd	r24, Z+1	; 0x01
    4020:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+3] = crc[2];
    4022:	82 81       	ldd	r24, Z+2	; 0x02
    4024:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+4] = crc[3];
    4026:	83 81       	ldd	r24, Z+3	; 0x03
    4028:	8d a3       	std	Y+37, r24	; 0x25
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    402a:	8d e0       	ldi	r24, 0x0D	; 13
    402c:	8e a3       	std	Y+38, r24	; 0x26
    402e:	ae 01       	movw	r20, r28
    4030:	49 5d       	subi	r20, 0xD9	; 217
    4032:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    4034:	ea ef       	ldi	r30, 0xFA	; 250
    4036:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    4038:	0f 2e       	mov	r0, r31
    403a:	f1 ec       	ldi	r31, 0xC1	; 193
    403c:	cf 2e       	mov	r12, r31
    403e:	d1 2c       	mov	r13, r1
    4040:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    4042:	f1 2c       	mov	r15, r1
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    4044:	d8 01       	movw	r26, r16
    4046:	2d 91       	ld	r18, X+
    4048:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    404a:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    404c:	91 81       	ldd	r25, Z+1	; 0x01
    404e:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    4050:	98 13       	cpse	r25, r24
    4052:	04 c0       	rjmp	.+8      	; 0x405c <main+0x275c>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    4054:	d6 01       	movw	r26, r12
    4056:	8c 91       	ld	r24, X
    4058:	80 62       	ori	r24, 0x20	; 32
    405a:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    405c:	30 81       	ld	r19, Z
    405e:	83 81       	ldd	r24, Z+3	; 0x03
    4060:	94 81       	ldd	r25, Z+4	; 0x04
    4062:	83 0f       	add	r24, r19
    4064:	91 1d       	adc	r25, r1
    4066:	dc 01       	movw	r26, r24
    4068:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    406a:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    406c:	68 2f       	mov	r22, r24
    406e:	70 e0       	ldi	r23, 0x00	; 0
    4070:	22 81       	ldd	r18, Z+2	; 0x02
    4072:	30 e0       	ldi	r19, 0x00	; 0
    4074:	21 50       	subi	r18, 0x01	; 1
    4076:	31 09       	sbc	r19, r1
    4078:	62 17       	cp	r22, r18
    407a:	73 07       	cpc	r23, r19
    407c:	11 f0       	breq	.+4      	; 0x4082 <main+0x2782>
    407e:	8f 5f       	subi	r24, 0xFF	; 255
    4080:	01 c0       	rjmp	.+2      	; 0x4084 <main+0x2784>
    4082:	8f 2d       	mov	r24, r15
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    4084:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    4086:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    4088:	04 17       	cp	r16, r20
    408a:	15 07       	cpc	r17, r21
    408c:	d9 f6       	brne	.-74     	; 0x4044 <main+0x2744>
    408e:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <main+0x266>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    4092:	81 e2       	ldi	r24, 0x21	; 33
    4094:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    4096:	f5 01       	movw	r30, r10
    4098:	81 81       	ldd	r24, Z+1	; 0x01
    409a:	8f 8f       	std	Y+31, r24	; 0x1f
    409c:	82 81       	ldd	r24, Z+2	; 0x02
    409e:	88 a3       	std	Y+32, r24	; 0x20
    40a0:	83 81       	ldd	r24, Z+3	; 0x03
    40a2:	89 a3       	std	Y+33, r24	; 0x21
    40a4:	e8 e3       	ldi	r30, 0x38	; 56
    40a6:	f1 e0       	ldi	r31, 0x01	; 1
    40a8:	de 01       	movw	r26, r28
    40aa:	92 96       	adiw	r26, 0x22	; 34
    40ac:	82 e4       	ldi	r24, 0x42	; 66
    40ae:	91 e0       	ldi	r25, 0x01	; 1
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    40b0:	21 91       	ld	r18, Z+
    40b2:	2d 93       	st	X+, r18
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    40b4:	e8 17       	cp	r30, r24
    40b6:	f9 07       	cpc	r31, r25
    40b8:	d9 f7       	brne	.-10     	; 0x40b0 <main+0x27b0>
    40ba:	8e 01       	movw	r16, r28
    40bc:	02 5e       	subi	r16, 0xE2	; 226
    40be:	1f 4f       	sbci	r17, 0xFF	; 255
    40c0:	ae 01       	movw	r20, r28
    40c2:	47 5d       	subi	r20, 0xD7	; 215
    40c4:	5f 4f       	sbci	r21, 0xFF	; 255
    40c6:	f8 01       	movw	r30, r16
    40c8:	80 e0       	ldi	r24, 0x00	; 0
    40ca:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    40cc:	b8 e0       	ldi	r27, 0x08	; 8
    40ce:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    40d0:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    40d2:	29 2f       	mov	r18, r25
    40d4:	33 27       	eor	r19, r19
    40d6:	27 fd       	sbrc	r18, 7
    40d8:	3a 95       	dec	r19
    40da:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
    40dc:	32 2f       	mov	r19, r18
    40de:	22 27       	eor	r18, r18
    40e0:	6b 2f       	mov	r22, r27
    40e2:	7f 2d       	mov	r23, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    40e4:	33 23       	and	r19, r19
    40e6:	3c f4       	brge	.+14     	; 0x40f6 <main+0x27f6>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    40e8:	22 0f       	add	r18, r18
    40ea:	33 1f       	adc	r19, r19
    40ec:	a1 e2       	ldi	r26, 0x21	; 33
    40ee:	2a 27       	eor	r18, r26
    40f0:	a0 e1       	ldi	r26, 0x10	; 16
    40f2:	3a 27       	eor	r19, r26
    40f4:	02 c0       	rjmp	.+4      	; 0x40fa <main+0x27fa>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    40f6:	22 0f       	add	r18, r18
    40f8:	33 1f       	adc	r19, r19
    40fa:	61 50       	subi	r22, 0x01	; 1
    40fc:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    40fe:	91 f7       	brne	.-28     	; 0x40e4 <main+0x27e4>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    4100:	98 2f       	mov	r25, r24
    4102:	88 27       	eor	r24, r24
    4104:	82 27       	eor	r24, r18
    4106:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    4108:	e4 17       	cp	r30, r20
    410a:	f5 07       	cpc	r31, r21
    410c:	09 f7       	brne	.-62     	; 0x40d0 <main+0x27d0>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    410e:	7c 01       	movw	r14, r24
    4110:	40 e1       	ldi	r20, 0x10	; 16
    4112:	6c e0       	ldi	r22, 0x0C	; 12
    4114:	74 e0       	ldi	r23, 0x04	; 4
    4116:	20 d3       	rcall	.+1600   	; 0x4758 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    4118:	8c e0       	ldi	r24, 0x0C	; 12
    411a:	94 e0       	ldi	r25, 0x04	; 4
    411c:	13 d3       	rcall	.+1574   	; 0x4744 <strupr>
	if(crcXmodem < 0x10)
    411e:	b0 e1       	ldi	r27, 0x10	; 16
    4120:	eb 16       	cp	r14, r27
    4122:	f1 04       	cpc	r15, r1
    4124:	38 f4       	brcc	.+14     	; 0x4134 <main+0x2834>
	{
		tx_string[cnt+4] = crc[0];
    4126:	80 91 0c 04 	lds	r24, 0x040C
    412a:	8c a7       	std	Y+44, r24	; 0x2c
		tx_string[cnt+3] = '0';
    412c:	80 e3       	ldi	r24, 0x30	; 48
    412e:	8b a7       	std	Y+43, r24	; 0x2b
		tx_string[cnt+2] = '0';
    4130:	8a a7       	std	Y+42, r24	; 0x2a
		tx_string[cnt+1] = '0';
    4132:	89 a7       	std	Y+41, r24	; 0x29
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    4134:	c7 01       	movw	r24, r14
    4136:	40 97       	sbiw	r24, 0x10	; 16
    4138:	80 3f       	cpi	r24, 0xF0	; 240
    413a:	91 05       	cpc	r25, r1
    413c:	48 f4       	brcc	.+18     	; 0x4150 <main+0x2850>
	{
		tx_string[cnt+4] = crc[1];
    413e:	ec e0       	ldi	r30, 0x0C	; 12
    4140:	f4 e0       	ldi	r31, 0x04	; 4
    4142:	81 81       	ldd	r24, Z+1	; 0x01
    4144:	8c a7       	std	Y+44, r24	; 0x2c
		tx_string[cnt+3] = crc[0];
    4146:	80 81       	ld	r24, Z
    4148:	8b a7       	std	Y+43, r24	; 0x2b
		tx_string[cnt+2] = '0';
    414a:	80 e3       	ldi	r24, 0x30	; 48
    414c:	8a a7       	std	Y+42, r24	; 0x2a
		tx_string[cnt+1] = '0';		
    414e:	89 a7       	std	Y+41, r24	; 0x29
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    4150:	c7 01       	movw	r24, r14
    4152:	9a 95       	dec	r25
    4154:	81 15       	cp	r24, r1
    4156:	9f 40       	sbci	r25, 0x0F	; 15
    4158:	50 f4       	brcc	.+20     	; 0x416e <main+0x286e>
	{
		tx_string[cnt+4] = crc[2];
    415a:	ec e0       	ldi	r30, 0x0C	; 12
    415c:	f4 e0       	ldi	r31, 0x04	; 4
    415e:	82 81       	ldd	r24, Z+2	; 0x02
    4160:	8c a7       	std	Y+44, r24	; 0x2c
		tx_string[cnt+3] = crc[1];
    4162:	81 81       	ldd	r24, Z+1	; 0x01
    4164:	8b a7       	std	Y+43, r24	; 0x2b
		tx_string[cnt+2] = crc[0];
    4166:	80 81       	ld	r24, Z
    4168:	8a a7       	std	Y+42, r24	; 0x2a
		tx_string[cnt+1] = '0';		
    416a:	80 e3       	ldi	r24, 0x30	; 48
    416c:	89 a7       	std	Y+41, r24	; 0x29
	}
	if(crcXmodem >= 0x1000)
    416e:	e1 14       	cp	r14, r1
    4170:	f0 e1       	ldi	r31, 0x10	; 16
    4172:	ff 06       	cpc	r15, r31
    4174:	50 f0       	brcs	.+20     	; 0x418a <main+0x288a>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    4176:	ec e0       	ldi	r30, 0x0C	; 12
    4178:	f4 e0       	ldi	r31, 0x04	; 4
    417a:	80 81       	ld	r24, Z
    417c:	89 a7       	std	Y+41, r24	; 0x29
		tx_string[cnt+2] = crc[1];
    417e:	81 81       	ldd	r24, Z+1	; 0x01
    4180:	8a a7       	std	Y+42, r24	; 0x2a
		tx_string[cnt+3] = crc[2];
    4182:	82 81       	ldd	r24, Z+2	; 0x02
    4184:	8b a7       	std	Y+43, r24	; 0x2b
		tx_string[cnt+4] = crc[3];
    4186:	83 81       	ldd	r24, Z+3	; 0x03
    4188:	8c a7       	std	Y+44, r24	; 0x2c
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    418a:	8d e0       	ldi	r24, 0x0D	; 13
    418c:	8d a7       	std	Y+45, r24	; 0x2d
    418e:	ae 01       	movw	r20, r28
    4190:	42 5d       	subi	r20, 0xD2	; 210
    4192:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    4194:	ea ef       	ldi	r30, 0xFA	; 250
    4196:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    4198:	0f 2e       	mov	r0, r31
    419a:	f1 ec       	ldi	r31, 0xC1	; 193
    419c:	cf 2e       	mov	r12, r31
    419e:	d1 2c       	mov	r13, r1
    41a0:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    41a2:	f1 2c       	mov	r15, r1
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    41a4:	d8 01       	movw	r26, r16
    41a6:	2d 91       	ld	r18, X+
    41a8:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    41aa:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    41ac:	91 81       	ldd	r25, Z+1	; 0x01
    41ae:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    41b0:	98 13       	cpse	r25, r24
    41b2:	04 c0       	rjmp	.+8      	; 0x41bc <main+0x28bc>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    41b4:	d6 01       	movw	r26, r12
    41b6:	8c 91       	ld	r24, X
    41b8:	80 62       	ori	r24, 0x20	; 32
    41ba:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    41bc:	30 81       	ld	r19, Z
    41be:	83 81       	ldd	r24, Z+3	; 0x03
    41c0:	94 81       	ldd	r25, Z+4	; 0x04
    41c2:	83 0f       	add	r24, r19
    41c4:	91 1d       	adc	r25, r1
    41c6:	dc 01       	movw	r26, r24
    41c8:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    41ca:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    41cc:	68 2f       	mov	r22, r24
    41ce:	70 e0       	ldi	r23, 0x00	; 0
    41d0:	22 81       	ldd	r18, Z+2	; 0x02
    41d2:	30 e0       	ldi	r19, 0x00	; 0
    41d4:	21 50       	subi	r18, 0x01	; 1
    41d6:	31 09       	sbc	r19, r1
    41d8:	62 17       	cp	r22, r18
    41da:	73 07       	cpc	r23, r19
    41dc:	11 f0       	breq	.+4      	; 0x41e2 <main+0x28e2>
    41de:	8f 5f       	subi	r24, 0xFF	; 255
    41e0:	01 c0       	rjmp	.+2      	; 0x41e4 <main+0x28e4>
    41e2:	8f 2d       	mov	r24, r15
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    41e4:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    41e6:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    41e8:	04 17       	cp	r16, r20
    41ea:	15 07       	cpc	r17, r21
    41ec:	d9 f6       	brne	.-74     	; 0x41a4 <main+0x28a4>
    41ee:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <main+0x266>
						var = atol(requestID);
						SetParameter(atol(requestID));
					}
					else
					{
						printStatus("CRC error");
    41f2:	89 e1       	ldi	r24, 0x19	; 25
    41f4:	91 e0       	ldi	r25, 0x01	; 1
    41f6:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    41fa:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <main+0x266>
    41fe:	40 e1       	ldi	r20, 0x10	; 16
    4200:	6c e0       	ldi	r22, 0x0C	; 12
    4202:	74 e0       	ldi	r23, 0x04	; 4
    4204:	80 e0       	ldi	r24, 0x00	; 0
    4206:	90 e0       	ldi	r25, 0x00	; 0
    4208:	a7 d2       	rcall	.+1358   	; 0x4758 <__itoa_ncheck>
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    420a:	8c e0       	ldi	r24, 0x0C	; 12
    420c:	94 e0       	ldi	r25, 0x04	; 4
    420e:	9a d2       	rcall	.+1332   	; 0x4744 <strupr>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    4210:	c1 2c       	mov	r12, r1
    4212:	d1 2c       	mov	r13, r1
    4214:	0c 94 2f 0f 	jmp	0x1e5e	; 0x1e5e <main+0x55e>
    4218:	40 e1       	ldi	r20, 0x10	; 16
    421a:	6c e0       	ldi	r22, 0x0C	; 12
    421c:	74 e0       	ldi	r23, 0x04	; 4
    421e:	80 e0       	ldi	r24, 0x00	; 0
    4220:	90 e0       	ldi	r25, 0x00	; 0
    4222:	9a d2       	rcall	.+1332   	; 0x4758 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    4224:	8c e0       	ldi	r24, 0x0C	; 12
    4226:	94 e0       	ldi	r25, 0x04	; 4
    4228:	8d d2       	rcall	.+1306   	; 0x4744 <strupr>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    422a:	c1 2c       	mov	r12, r1
    422c:	d1 2c       	mov	r13, r1
    422e:	0c 94 4a 10 	jmp	0x2094	; 0x2094 <main+0x794>
    4232:	40 e1       	ldi	r20, 0x10	; 16
    4234:	6c e0       	ldi	r22, 0x0C	; 12
    4236:	74 e0       	ldi	r23, 0x04	; 4
    4238:	80 e0       	ldi	r24, 0x00	; 0
    423a:	90 e0       	ldi	r25, 0x00	; 0
    423c:	8d d2       	rcall	.+1306   	; 0x4758 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    423e:	8c e0       	ldi	r24, 0x0C	; 12
    4240:	94 e0       	ldi	r25, 0x04	; 4
    4242:	80 d2       	rcall	.+1280   	; 0x4744 <strupr>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    4244:	c1 2c       	mov	r12, r1
    4246:	d1 2c       	mov	r13, r1
    4248:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <main+0x9ca>
    424c:	40 e1       	ldi	r20, 0x10	; 16
    424e:	6c e0       	ldi	r22, 0x0C	; 12
    4250:	74 e0       	ldi	r23, 0x04	; 4
    4252:	80 e0       	ldi	r24, 0x00	; 0
    4254:	90 e0       	ldi	r25, 0x00	; 0
    4256:	80 d2       	rcall	.+1280   	; 0x4758 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    4258:	8c e0       	ldi	r24, 0x0C	; 12
    425a:	94 e0       	ldi	r25, 0x04	; 4
    425c:	73 d2       	rcall	.+1254   	; 0x4744 <strupr>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    425e:	c1 2c       	mov	r12, r1
    4260:	d1 2c       	mov	r13, r1
    4262:	0c 94 80 12 	jmp	0x2500	; 0x2500 <main+0xc00>
    4266:	40 e1       	ldi	r20, 0x10	; 16
    4268:	6c e0       	ldi	r22, 0x0C	; 12
    426a:	74 e0       	ldi	r23, 0x04	; 4
    426c:	80 e0       	ldi	r24, 0x00	; 0
    426e:	90 e0       	ldi	r25, 0x00	; 0
    4270:	73 d2       	rcall	.+1254   	; 0x4758 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    4272:	8c e0       	ldi	r24, 0x0C	; 12
    4274:	94 e0       	ldi	r25, 0x04	; 4
    4276:	66 d2       	rcall	.+1228   	; 0x4744 <strupr>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    4278:	c1 2c       	mov	r12, r1
    427a:	d1 2c       	mov	r13, r1
    427c:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <main+0xe36>
    4280:	40 e1       	ldi	r20, 0x10	; 16
    4282:	6c e0       	ldi	r22, 0x0C	; 12
    4284:	74 e0       	ldi	r23, 0x04	; 4
    4286:	80 e0       	ldi	r24, 0x00	; 0
    4288:	90 e0       	ldi	r25, 0x00	; 0
    428a:	66 d2       	rcall	.+1228   	; 0x4758 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    428c:	8c e0       	ldi	r24, 0x0C	; 12
    428e:	94 e0       	ldi	r25, 0x04	; 4
    4290:	59 d2       	rcall	.+1202   	; 0x4744 <strupr>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    4292:	c1 2c       	mov	r12, r1
    4294:	d1 2c       	mov	r13, r1
    4296:	0c 94 c7 15 	jmp	0x2b8e	; 0x2b8e <main+0x128e>

0000429a <__subsf3>:
    429a:	50 58       	subi	r21, 0x80	; 128

0000429c <__addsf3>:
    429c:	bb 27       	eor	r27, r27
    429e:	aa 27       	eor	r26, r26
    42a0:	0e d0       	rcall	.+28     	; 0x42be <__addsf3x>
    42a2:	0d c1       	rjmp	.+538    	; 0x44be <__fp_round>
    42a4:	fe d0       	rcall	.+508    	; 0x44a2 <__fp_pscA>
    42a6:	30 f0       	brcs	.+12     	; 0x42b4 <__addsf3+0x18>
    42a8:	03 d1       	rcall	.+518    	; 0x44b0 <__fp_pscB>
    42aa:	20 f0       	brcs	.+8      	; 0x42b4 <__addsf3+0x18>
    42ac:	31 f4       	brne	.+12     	; 0x42ba <__addsf3+0x1e>
    42ae:	9f 3f       	cpi	r25, 0xFF	; 255
    42b0:	11 f4       	brne	.+4      	; 0x42b6 <__addsf3+0x1a>
    42b2:	1e f4       	brtc	.+6      	; 0x42ba <__addsf3+0x1e>
    42b4:	f3 c0       	rjmp	.+486    	; 0x449c <__fp_nan>
    42b6:	0e f4       	brtc	.+2      	; 0x42ba <__addsf3+0x1e>
    42b8:	e0 95       	com	r30
    42ba:	e7 fb       	bst	r30, 7
    42bc:	e9 c0       	rjmp	.+466    	; 0x4490 <__fp_inf>

000042be <__addsf3x>:
    42be:	e9 2f       	mov	r30, r25
    42c0:	0f d1       	rcall	.+542    	; 0x44e0 <__fp_split3>
    42c2:	80 f3       	brcs	.-32     	; 0x42a4 <__addsf3+0x8>
    42c4:	ba 17       	cp	r27, r26
    42c6:	62 07       	cpc	r22, r18
    42c8:	73 07       	cpc	r23, r19
    42ca:	84 07       	cpc	r24, r20
    42cc:	95 07       	cpc	r25, r21
    42ce:	18 f0       	brcs	.+6      	; 0x42d6 <__addsf3x+0x18>
    42d0:	71 f4       	brne	.+28     	; 0x42ee <__addsf3x+0x30>
    42d2:	9e f5       	brtc	.+102    	; 0x433a <__addsf3x+0x7c>
    42d4:	27 c1       	rjmp	.+590    	; 0x4524 <__fp_zero>
    42d6:	0e f4       	brtc	.+2      	; 0x42da <__addsf3x+0x1c>
    42d8:	e0 95       	com	r30
    42da:	0b 2e       	mov	r0, r27
    42dc:	ba 2f       	mov	r27, r26
    42de:	a0 2d       	mov	r26, r0
    42e0:	0b 01       	movw	r0, r22
    42e2:	b9 01       	movw	r22, r18
    42e4:	90 01       	movw	r18, r0
    42e6:	0c 01       	movw	r0, r24
    42e8:	ca 01       	movw	r24, r20
    42ea:	a0 01       	movw	r20, r0
    42ec:	11 24       	eor	r1, r1
    42ee:	ff 27       	eor	r31, r31
    42f0:	59 1b       	sub	r21, r25
    42f2:	99 f0       	breq	.+38     	; 0x431a <__addsf3x+0x5c>
    42f4:	59 3f       	cpi	r21, 0xF9	; 249
    42f6:	50 f4       	brcc	.+20     	; 0x430c <__addsf3x+0x4e>
    42f8:	50 3e       	cpi	r21, 0xE0	; 224
    42fa:	68 f1       	brcs	.+90     	; 0x4356 <__addsf3x+0x98>
    42fc:	1a 16       	cp	r1, r26
    42fe:	f0 40       	sbci	r31, 0x00	; 0
    4300:	a2 2f       	mov	r26, r18
    4302:	23 2f       	mov	r18, r19
    4304:	34 2f       	mov	r19, r20
    4306:	44 27       	eor	r20, r20
    4308:	58 5f       	subi	r21, 0xF8	; 248
    430a:	f3 cf       	rjmp	.-26     	; 0x42f2 <__addsf3x+0x34>
    430c:	46 95       	lsr	r20
    430e:	37 95       	ror	r19
    4310:	27 95       	ror	r18
    4312:	a7 95       	ror	r26
    4314:	f0 40       	sbci	r31, 0x00	; 0
    4316:	53 95       	inc	r21
    4318:	c9 f7       	brne	.-14     	; 0x430c <__addsf3x+0x4e>
    431a:	7e f4       	brtc	.+30     	; 0x433a <__addsf3x+0x7c>
    431c:	1f 16       	cp	r1, r31
    431e:	ba 0b       	sbc	r27, r26
    4320:	62 0b       	sbc	r22, r18
    4322:	73 0b       	sbc	r23, r19
    4324:	84 0b       	sbc	r24, r20
    4326:	ba f0       	brmi	.+46     	; 0x4356 <__addsf3x+0x98>
    4328:	91 50       	subi	r25, 0x01	; 1
    432a:	a1 f0       	breq	.+40     	; 0x4354 <__addsf3x+0x96>
    432c:	ff 0f       	add	r31, r31
    432e:	bb 1f       	adc	r27, r27
    4330:	66 1f       	adc	r22, r22
    4332:	77 1f       	adc	r23, r23
    4334:	88 1f       	adc	r24, r24
    4336:	c2 f7       	brpl	.-16     	; 0x4328 <__addsf3x+0x6a>
    4338:	0e c0       	rjmp	.+28     	; 0x4356 <__addsf3x+0x98>
    433a:	ba 0f       	add	r27, r26
    433c:	62 1f       	adc	r22, r18
    433e:	73 1f       	adc	r23, r19
    4340:	84 1f       	adc	r24, r20
    4342:	48 f4       	brcc	.+18     	; 0x4356 <__addsf3x+0x98>
    4344:	87 95       	ror	r24
    4346:	77 95       	ror	r23
    4348:	67 95       	ror	r22
    434a:	b7 95       	ror	r27
    434c:	f7 95       	ror	r31
    434e:	9e 3f       	cpi	r25, 0xFE	; 254
    4350:	08 f0       	brcs	.+2      	; 0x4354 <__addsf3x+0x96>
    4352:	b3 cf       	rjmp	.-154    	; 0x42ba <__addsf3+0x1e>
    4354:	93 95       	inc	r25
    4356:	88 0f       	add	r24, r24
    4358:	08 f0       	brcs	.+2      	; 0x435c <__addsf3x+0x9e>
    435a:	99 27       	eor	r25, r25
    435c:	ee 0f       	add	r30, r30
    435e:	97 95       	ror	r25
    4360:	87 95       	ror	r24
    4362:	08 95       	ret

00004364 <__cmpsf2>:
    4364:	71 d0       	rcall	.+226    	; 0x4448 <__fp_cmp>
    4366:	08 f4       	brcc	.+2      	; 0x436a <__cmpsf2+0x6>
    4368:	81 e0       	ldi	r24, 0x01	; 1
    436a:	08 95       	ret

0000436c <__fixsfsi>:
    436c:	04 d0       	rcall	.+8      	; 0x4376 <__fixunssfsi>
    436e:	68 94       	set
    4370:	b1 11       	cpse	r27, r1
    4372:	d9 c0       	rjmp	.+434    	; 0x4526 <__fp_szero>
    4374:	08 95       	ret

00004376 <__fixunssfsi>:
    4376:	bc d0       	rcall	.+376    	; 0x44f0 <__fp_splitA>
    4378:	88 f0       	brcs	.+34     	; 0x439c <__fixunssfsi+0x26>
    437a:	9f 57       	subi	r25, 0x7F	; 127
    437c:	90 f0       	brcs	.+36     	; 0x43a2 <__fixunssfsi+0x2c>
    437e:	b9 2f       	mov	r27, r25
    4380:	99 27       	eor	r25, r25
    4382:	b7 51       	subi	r27, 0x17	; 23
    4384:	a0 f0       	brcs	.+40     	; 0x43ae <__fixunssfsi+0x38>
    4386:	d1 f0       	breq	.+52     	; 0x43bc <__fixunssfsi+0x46>
    4388:	66 0f       	add	r22, r22
    438a:	77 1f       	adc	r23, r23
    438c:	88 1f       	adc	r24, r24
    438e:	99 1f       	adc	r25, r25
    4390:	1a f0       	brmi	.+6      	; 0x4398 <__fixunssfsi+0x22>
    4392:	ba 95       	dec	r27
    4394:	c9 f7       	brne	.-14     	; 0x4388 <__fixunssfsi+0x12>
    4396:	12 c0       	rjmp	.+36     	; 0x43bc <__fixunssfsi+0x46>
    4398:	b1 30       	cpi	r27, 0x01	; 1
    439a:	81 f0       	breq	.+32     	; 0x43bc <__fixunssfsi+0x46>
    439c:	c3 d0       	rcall	.+390    	; 0x4524 <__fp_zero>
    439e:	b1 e0       	ldi	r27, 0x01	; 1
    43a0:	08 95       	ret
    43a2:	c0 c0       	rjmp	.+384    	; 0x4524 <__fp_zero>
    43a4:	67 2f       	mov	r22, r23
    43a6:	78 2f       	mov	r23, r24
    43a8:	88 27       	eor	r24, r24
    43aa:	b8 5f       	subi	r27, 0xF8	; 248
    43ac:	39 f0       	breq	.+14     	; 0x43bc <__fixunssfsi+0x46>
    43ae:	b9 3f       	cpi	r27, 0xF9	; 249
    43b0:	cc f3       	brlt	.-14     	; 0x43a4 <__fixunssfsi+0x2e>
    43b2:	86 95       	lsr	r24
    43b4:	77 95       	ror	r23
    43b6:	67 95       	ror	r22
    43b8:	b3 95       	inc	r27
    43ba:	d9 f7       	brne	.-10     	; 0x43b2 <__fixunssfsi+0x3c>
    43bc:	3e f4       	brtc	.+14     	; 0x43cc <__fixunssfsi+0x56>
    43be:	90 95       	com	r25
    43c0:	80 95       	com	r24
    43c2:	70 95       	com	r23
    43c4:	61 95       	neg	r22
    43c6:	7f 4f       	sbci	r23, 0xFF	; 255
    43c8:	8f 4f       	sbci	r24, 0xFF	; 255
    43ca:	9f 4f       	sbci	r25, 0xFF	; 255
    43cc:	08 95       	ret

000043ce <__floatunsisf>:
    43ce:	e8 94       	clt
    43d0:	09 c0       	rjmp	.+18     	; 0x43e4 <__floatsisf+0x12>

000043d2 <__floatsisf>:
    43d2:	97 fb       	bst	r25, 7
    43d4:	3e f4       	brtc	.+14     	; 0x43e4 <__floatsisf+0x12>
    43d6:	90 95       	com	r25
    43d8:	80 95       	com	r24
    43da:	70 95       	com	r23
    43dc:	61 95       	neg	r22
    43de:	7f 4f       	sbci	r23, 0xFF	; 255
    43e0:	8f 4f       	sbci	r24, 0xFF	; 255
    43e2:	9f 4f       	sbci	r25, 0xFF	; 255
    43e4:	99 23       	and	r25, r25
    43e6:	a9 f0       	breq	.+42     	; 0x4412 <__floatsisf+0x40>
    43e8:	f9 2f       	mov	r31, r25
    43ea:	96 e9       	ldi	r25, 0x96	; 150
    43ec:	bb 27       	eor	r27, r27
    43ee:	93 95       	inc	r25
    43f0:	f6 95       	lsr	r31
    43f2:	87 95       	ror	r24
    43f4:	77 95       	ror	r23
    43f6:	67 95       	ror	r22
    43f8:	b7 95       	ror	r27
    43fa:	f1 11       	cpse	r31, r1
    43fc:	f8 cf       	rjmp	.-16     	; 0x43ee <__floatsisf+0x1c>
    43fe:	fa f4       	brpl	.+62     	; 0x443e <__floatsisf+0x6c>
    4400:	bb 0f       	add	r27, r27
    4402:	11 f4       	brne	.+4      	; 0x4408 <__floatsisf+0x36>
    4404:	60 ff       	sbrs	r22, 0
    4406:	1b c0       	rjmp	.+54     	; 0x443e <__floatsisf+0x6c>
    4408:	6f 5f       	subi	r22, 0xFF	; 255
    440a:	7f 4f       	sbci	r23, 0xFF	; 255
    440c:	8f 4f       	sbci	r24, 0xFF	; 255
    440e:	9f 4f       	sbci	r25, 0xFF	; 255
    4410:	16 c0       	rjmp	.+44     	; 0x443e <__floatsisf+0x6c>
    4412:	88 23       	and	r24, r24
    4414:	11 f0       	breq	.+4      	; 0x441a <__floatsisf+0x48>
    4416:	96 e9       	ldi	r25, 0x96	; 150
    4418:	11 c0       	rjmp	.+34     	; 0x443c <__floatsisf+0x6a>
    441a:	77 23       	and	r23, r23
    441c:	21 f0       	breq	.+8      	; 0x4426 <__floatsisf+0x54>
    441e:	9e e8       	ldi	r25, 0x8E	; 142
    4420:	87 2f       	mov	r24, r23
    4422:	76 2f       	mov	r23, r22
    4424:	05 c0       	rjmp	.+10     	; 0x4430 <__floatsisf+0x5e>
    4426:	66 23       	and	r22, r22
    4428:	71 f0       	breq	.+28     	; 0x4446 <__floatsisf+0x74>
    442a:	96 e8       	ldi	r25, 0x86	; 134
    442c:	86 2f       	mov	r24, r22
    442e:	70 e0       	ldi	r23, 0x00	; 0
    4430:	60 e0       	ldi	r22, 0x00	; 0
    4432:	2a f0       	brmi	.+10     	; 0x443e <__floatsisf+0x6c>
    4434:	9a 95       	dec	r25
    4436:	66 0f       	add	r22, r22
    4438:	77 1f       	adc	r23, r23
    443a:	88 1f       	adc	r24, r24
    443c:	da f7       	brpl	.-10     	; 0x4434 <__floatsisf+0x62>
    443e:	88 0f       	add	r24, r24
    4440:	96 95       	lsr	r25
    4442:	87 95       	ror	r24
    4444:	97 f9       	bld	r25, 7
    4446:	08 95       	ret

00004448 <__fp_cmp>:
    4448:	99 0f       	add	r25, r25
    444a:	00 08       	sbc	r0, r0
    444c:	55 0f       	add	r21, r21
    444e:	aa 0b       	sbc	r26, r26
    4450:	e0 e8       	ldi	r30, 0x80	; 128
    4452:	fe ef       	ldi	r31, 0xFE	; 254
    4454:	16 16       	cp	r1, r22
    4456:	17 06       	cpc	r1, r23
    4458:	e8 07       	cpc	r30, r24
    445a:	f9 07       	cpc	r31, r25
    445c:	c0 f0       	brcs	.+48     	; 0x448e <__fp_cmp+0x46>
    445e:	12 16       	cp	r1, r18
    4460:	13 06       	cpc	r1, r19
    4462:	e4 07       	cpc	r30, r20
    4464:	f5 07       	cpc	r31, r21
    4466:	98 f0       	brcs	.+38     	; 0x448e <__fp_cmp+0x46>
    4468:	62 1b       	sub	r22, r18
    446a:	73 0b       	sbc	r23, r19
    446c:	84 0b       	sbc	r24, r20
    446e:	95 0b       	sbc	r25, r21
    4470:	39 f4       	brne	.+14     	; 0x4480 <__fp_cmp+0x38>
    4472:	0a 26       	eor	r0, r26
    4474:	61 f0       	breq	.+24     	; 0x448e <__fp_cmp+0x46>
    4476:	23 2b       	or	r18, r19
    4478:	24 2b       	or	r18, r20
    447a:	25 2b       	or	r18, r21
    447c:	21 f4       	brne	.+8      	; 0x4486 <__fp_cmp+0x3e>
    447e:	08 95       	ret
    4480:	0a 26       	eor	r0, r26
    4482:	09 f4       	brne	.+2      	; 0x4486 <__fp_cmp+0x3e>
    4484:	a1 40       	sbci	r26, 0x01	; 1
    4486:	a6 95       	lsr	r26
    4488:	8f ef       	ldi	r24, 0xFF	; 255
    448a:	81 1d       	adc	r24, r1
    448c:	81 1d       	adc	r24, r1
    448e:	08 95       	ret

00004490 <__fp_inf>:
    4490:	97 f9       	bld	r25, 7
    4492:	9f 67       	ori	r25, 0x7F	; 127
    4494:	80 e8       	ldi	r24, 0x80	; 128
    4496:	70 e0       	ldi	r23, 0x00	; 0
    4498:	60 e0       	ldi	r22, 0x00	; 0
    449a:	08 95       	ret

0000449c <__fp_nan>:
    449c:	9f ef       	ldi	r25, 0xFF	; 255
    449e:	80 ec       	ldi	r24, 0xC0	; 192
    44a0:	08 95       	ret

000044a2 <__fp_pscA>:
    44a2:	00 24       	eor	r0, r0
    44a4:	0a 94       	dec	r0
    44a6:	16 16       	cp	r1, r22
    44a8:	17 06       	cpc	r1, r23
    44aa:	18 06       	cpc	r1, r24
    44ac:	09 06       	cpc	r0, r25
    44ae:	08 95       	ret

000044b0 <__fp_pscB>:
    44b0:	00 24       	eor	r0, r0
    44b2:	0a 94       	dec	r0
    44b4:	12 16       	cp	r1, r18
    44b6:	13 06       	cpc	r1, r19
    44b8:	14 06       	cpc	r1, r20
    44ba:	05 06       	cpc	r0, r21
    44bc:	08 95       	ret

000044be <__fp_round>:
    44be:	09 2e       	mov	r0, r25
    44c0:	03 94       	inc	r0
    44c2:	00 0c       	add	r0, r0
    44c4:	11 f4       	brne	.+4      	; 0x44ca <__fp_round+0xc>
    44c6:	88 23       	and	r24, r24
    44c8:	52 f0       	brmi	.+20     	; 0x44de <__fp_round+0x20>
    44ca:	bb 0f       	add	r27, r27
    44cc:	40 f4       	brcc	.+16     	; 0x44de <__fp_round+0x20>
    44ce:	bf 2b       	or	r27, r31
    44d0:	11 f4       	brne	.+4      	; 0x44d6 <__fp_round+0x18>
    44d2:	60 ff       	sbrs	r22, 0
    44d4:	04 c0       	rjmp	.+8      	; 0x44de <__fp_round+0x20>
    44d6:	6f 5f       	subi	r22, 0xFF	; 255
    44d8:	7f 4f       	sbci	r23, 0xFF	; 255
    44da:	8f 4f       	sbci	r24, 0xFF	; 255
    44dc:	9f 4f       	sbci	r25, 0xFF	; 255
    44de:	08 95       	ret

000044e0 <__fp_split3>:
    44e0:	57 fd       	sbrc	r21, 7
    44e2:	90 58       	subi	r25, 0x80	; 128
    44e4:	44 0f       	add	r20, r20
    44e6:	55 1f       	adc	r21, r21
    44e8:	59 f0       	breq	.+22     	; 0x4500 <__fp_splitA+0x10>
    44ea:	5f 3f       	cpi	r21, 0xFF	; 255
    44ec:	71 f0       	breq	.+28     	; 0x450a <__fp_splitA+0x1a>
    44ee:	47 95       	ror	r20

000044f0 <__fp_splitA>:
    44f0:	88 0f       	add	r24, r24
    44f2:	97 fb       	bst	r25, 7
    44f4:	99 1f       	adc	r25, r25
    44f6:	61 f0       	breq	.+24     	; 0x4510 <__fp_splitA+0x20>
    44f8:	9f 3f       	cpi	r25, 0xFF	; 255
    44fa:	79 f0       	breq	.+30     	; 0x451a <__fp_splitA+0x2a>
    44fc:	87 95       	ror	r24
    44fe:	08 95       	ret
    4500:	12 16       	cp	r1, r18
    4502:	13 06       	cpc	r1, r19
    4504:	14 06       	cpc	r1, r20
    4506:	55 1f       	adc	r21, r21
    4508:	f2 cf       	rjmp	.-28     	; 0x44ee <__fp_split3+0xe>
    450a:	46 95       	lsr	r20
    450c:	f1 df       	rcall	.-30     	; 0x44f0 <__fp_splitA>
    450e:	08 c0       	rjmp	.+16     	; 0x4520 <__fp_splitA+0x30>
    4510:	16 16       	cp	r1, r22
    4512:	17 06       	cpc	r1, r23
    4514:	18 06       	cpc	r1, r24
    4516:	99 1f       	adc	r25, r25
    4518:	f1 cf       	rjmp	.-30     	; 0x44fc <__fp_splitA+0xc>
    451a:	86 95       	lsr	r24
    451c:	71 05       	cpc	r23, r1
    451e:	61 05       	cpc	r22, r1
    4520:	08 94       	sec
    4522:	08 95       	ret

00004524 <__fp_zero>:
    4524:	e8 94       	clt

00004526 <__fp_szero>:
    4526:	bb 27       	eor	r27, r27
    4528:	66 27       	eor	r22, r22
    452a:	77 27       	eor	r23, r23
    452c:	cb 01       	movw	r24, r22
    452e:	97 f9       	bld	r25, 7
    4530:	08 95       	ret

00004532 <__gesf2>:
    4532:	8a df       	rcall	.-236    	; 0x4448 <__fp_cmp>
    4534:	08 f4       	brcc	.+2      	; 0x4538 <__gesf2+0x6>
    4536:	8f ef       	ldi	r24, 0xFF	; 255
    4538:	08 95       	ret

0000453a <__mulsf3>:
    453a:	0b d0       	rcall	.+22     	; 0x4552 <__mulsf3x>
    453c:	c0 cf       	rjmp	.-128    	; 0x44be <__fp_round>
    453e:	b1 df       	rcall	.-158    	; 0x44a2 <__fp_pscA>
    4540:	28 f0       	brcs	.+10     	; 0x454c <__mulsf3+0x12>
    4542:	b6 df       	rcall	.-148    	; 0x44b0 <__fp_pscB>
    4544:	18 f0       	brcs	.+6      	; 0x454c <__mulsf3+0x12>
    4546:	95 23       	and	r25, r21
    4548:	09 f0       	breq	.+2      	; 0x454c <__mulsf3+0x12>
    454a:	a2 cf       	rjmp	.-188    	; 0x4490 <__fp_inf>
    454c:	a7 cf       	rjmp	.-178    	; 0x449c <__fp_nan>
    454e:	11 24       	eor	r1, r1
    4550:	ea cf       	rjmp	.-44     	; 0x4526 <__fp_szero>

00004552 <__mulsf3x>:
    4552:	c6 df       	rcall	.-116    	; 0x44e0 <__fp_split3>
    4554:	a0 f3       	brcs	.-24     	; 0x453e <__mulsf3+0x4>

00004556 <__mulsf3_pse>:
    4556:	95 9f       	mul	r25, r21
    4558:	d1 f3       	breq	.-12     	; 0x454e <__mulsf3+0x14>
    455a:	95 0f       	add	r25, r21
    455c:	50 e0       	ldi	r21, 0x00	; 0
    455e:	55 1f       	adc	r21, r21
    4560:	62 9f       	mul	r22, r18
    4562:	f0 01       	movw	r30, r0
    4564:	72 9f       	mul	r23, r18
    4566:	bb 27       	eor	r27, r27
    4568:	f0 0d       	add	r31, r0
    456a:	b1 1d       	adc	r27, r1
    456c:	63 9f       	mul	r22, r19
    456e:	aa 27       	eor	r26, r26
    4570:	f0 0d       	add	r31, r0
    4572:	b1 1d       	adc	r27, r1
    4574:	aa 1f       	adc	r26, r26
    4576:	64 9f       	mul	r22, r20
    4578:	66 27       	eor	r22, r22
    457a:	b0 0d       	add	r27, r0
    457c:	a1 1d       	adc	r26, r1
    457e:	66 1f       	adc	r22, r22
    4580:	82 9f       	mul	r24, r18
    4582:	22 27       	eor	r18, r18
    4584:	b0 0d       	add	r27, r0
    4586:	a1 1d       	adc	r26, r1
    4588:	62 1f       	adc	r22, r18
    458a:	73 9f       	mul	r23, r19
    458c:	b0 0d       	add	r27, r0
    458e:	a1 1d       	adc	r26, r1
    4590:	62 1f       	adc	r22, r18
    4592:	83 9f       	mul	r24, r19
    4594:	a0 0d       	add	r26, r0
    4596:	61 1d       	adc	r22, r1
    4598:	22 1f       	adc	r18, r18
    459a:	74 9f       	mul	r23, r20
    459c:	33 27       	eor	r19, r19
    459e:	a0 0d       	add	r26, r0
    45a0:	61 1d       	adc	r22, r1
    45a2:	23 1f       	adc	r18, r19
    45a4:	84 9f       	mul	r24, r20
    45a6:	60 0d       	add	r22, r0
    45a8:	21 1d       	adc	r18, r1
    45aa:	82 2f       	mov	r24, r18
    45ac:	76 2f       	mov	r23, r22
    45ae:	6a 2f       	mov	r22, r26
    45b0:	11 24       	eor	r1, r1
    45b2:	9f 57       	subi	r25, 0x7F	; 127
    45b4:	50 40       	sbci	r21, 0x00	; 0
    45b6:	8a f0       	brmi	.+34     	; 0x45da <__mulsf3_pse+0x84>
    45b8:	e1 f0       	breq	.+56     	; 0x45f2 <__mulsf3_pse+0x9c>
    45ba:	88 23       	and	r24, r24
    45bc:	4a f0       	brmi	.+18     	; 0x45d0 <__mulsf3_pse+0x7a>
    45be:	ee 0f       	add	r30, r30
    45c0:	ff 1f       	adc	r31, r31
    45c2:	bb 1f       	adc	r27, r27
    45c4:	66 1f       	adc	r22, r22
    45c6:	77 1f       	adc	r23, r23
    45c8:	88 1f       	adc	r24, r24
    45ca:	91 50       	subi	r25, 0x01	; 1
    45cc:	50 40       	sbci	r21, 0x00	; 0
    45ce:	a9 f7       	brne	.-22     	; 0x45ba <__mulsf3_pse+0x64>
    45d0:	9e 3f       	cpi	r25, 0xFE	; 254
    45d2:	51 05       	cpc	r21, r1
    45d4:	70 f0       	brcs	.+28     	; 0x45f2 <__mulsf3_pse+0x9c>
    45d6:	5c cf       	rjmp	.-328    	; 0x4490 <__fp_inf>
    45d8:	a6 cf       	rjmp	.-180    	; 0x4526 <__fp_szero>
    45da:	5f 3f       	cpi	r21, 0xFF	; 255
    45dc:	ec f3       	brlt	.-6      	; 0x45d8 <__mulsf3_pse+0x82>
    45de:	98 3e       	cpi	r25, 0xE8	; 232
    45e0:	dc f3       	brlt	.-10     	; 0x45d8 <__mulsf3_pse+0x82>
    45e2:	86 95       	lsr	r24
    45e4:	77 95       	ror	r23
    45e6:	67 95       	ror	r22
    45e8:	b7 95       	ror	r27
    45ea:	f7 95       	ror	r31
    45ec:	e7 95       	ror	r30
    45ee:	9f 5f       	subi	r25, 0xFF	; 255
    45f0:	c1 f7       	brne	.-16     	; 0x45e2 <__mulsf3_pse+0x8c>
    45f2:	fe 2b       	or	r31, r30
    45f4:	88 0f       	add	r24, r24
    45f6:	91 1d       	adc	r25, r1
    45f8:	96 95       	lsr	r25
    45fa:	87 95       	ror	r24
    45fc:	97 f9       	bld	r25, 7
    45fe:	08 95       	ret

00004600 <round>:
    4600:	77 df       	rcall	.-274    	; 0x44f0 <__fp_splitA>
    4602:	e0 f0       	brcs	.+56     	; 0x463c <round+0x3c>
    4604:	9e 37       	cpi	r25, 0x7E	; 126
    4606:	d8 f0       	brcs	.+54     	; 0x463e <round+0x3e>
    4608:	96 39       	cpi	r25, 0x96	; 150
    460a:	b8 f4       	brcc	.+46     	; 0x463a <round+0x3a>
    460c:	9e 38       	cpi	r25, 0x8E	; 142
    460e:	48 f4       	brcc	.+18     	; 0x4622 <round+0x22>
    4610:	67 2f       	mov	r22, r23
    4612:	78 2f       	mov	r23, r24
    4614:	88 27       	eor	r24, r24
    4616:	98 5f       	subi	r25, 0xF8	; 248
    4618:	f9 cf       	rjmp	.-14     	; 0x460c <round+0xc>
    461a:	86 95       	lsr	r24
    461c:	77 95       	ror	r23
    461e:	67 95       	ror	r22
    4620:	93 95       	inc	r25
    4622:	95 39       	cpi	r25, 0x95	; 149
    4624:	d0 f3       	brcs	.-12     	; 0x461a <round+0x1a>
    4626:	b6 2f       	mov	r27, r22
    4628:	b1 70       	andi	r27, 0x01	; 1
    462a:	6b 0f       	add	r22, r27
    462c:	71 1d       	adc	r23, r1
    462e:	81 1d       	adc	r24, r1
    4630:	20 f4       	brcc	.+8      	; 0x463a <round+0x3a>
    4632:	87 95       	ror	r24
    4634:	77 95       	ror	r23
    4636:	67 95       	ror	r22
    4638:	93 95       	inc	r25
    463a:	02 c0       	rjmp	.+4      	; 0x4640 <__fp_mintl>
    463c:	1c c0       	rjmp	.+56     	; 0x4676 <__fp_mpack>
    463e:	73 cf       	rjmp	.-282    	; 0x4526 <__fp_szero>

00004640 <__fp_mintl>:
    4640:	88 23       	and	r24, r24
    4642:	71 f4       	brne	.+28     	; 0x4660 <__fp_mintl+0x20>
    4644:	77 23       	and	r23, r23
    4646:	21 f0       	breq	.+8      	; 0x4650 <__fp_mintl+0x10>
    4648:	98 50       	subi	r25, 0x08	; 8
    464a:	87 2b       	or	r24, r23
    464c:	76 2f       	mov	r23, r22
    464e:	07 c0       	rjmp	.+14     	; 0x465e <__fp_mintl+0x1e>
    4650:	66 23       	and	r22, r22
    4652:	11 f4       	brne	.+4      	; 0x4658 <__fp_mintl+0x18>
    4654:	99 27       	eor	r25, r25
    4656:	0d c0       	rjmp	.+26     	; 0x4672 <__fp_mintl+0x32>
    4658:	90 51       	subi	r25, 0x10	; 16
    465a:	86 2b       	or	r24, r22
    465c:	70 e0       	ldi	r23, 0x00	; 0
    465e:	60 e0       	ldi	r22, 0x00	; 0
    4660:	2a f0       	brmi	.+10     	; 0x466c <__fp_mintl+0x2c>
    4662:	9a 95       	dec	r25
    4664:	66 0f       	add	r22, r22
    4666:	77 1f       	adc	r23, r23
    4668:	88 1f       	adc	r24, r24
    466a:	da f7       	brpl	.-10     	; 0x4662 <__fp_mintl+0x22>
    466c:	88 0f       	add	r24, r24
    466e:	96 95       	lsr	r25
    4670:	87 95       	ror	r24
    4672:	97 f9       	bld	r25, 7
    4674:	08 95       	ret

00004676 <__fp_mpack>:
    4676:	9f 3f       	cpi	r25, 0xFF	; 255
    4678:	31 f0       	breq	.+12     	; 0x4686 <__fp_mpack_finite+0xc>

0000467a <__fp_mpack_finite>:
    467a:	91 50       	subi	r25, 0x01	; 1
    467c:	20 f4       	brcc	.+8      	; 0x4686 <__fp_mpack_finite+0xc>
    467e:	87 95       	ror	r24
    4680:	77 95       	ror	r23
    4682:	67 95       	ror	r22
    4684:	b7 95       	ror	r27
    4686:	88 0f       	add	r24, r24
    4688:	91 1d       	adc	r25, r1
    468a:	96 95       	lsr	r25
    468c:	87 95       	ror	r24
    468e:	97 f9       	bld	r25, 7
    4690:	08 95       	ret

00004692 <__tablejump2__>:
    4692:	ee 0f       	add	r30, r30
    4694:	ff 1f       	adc	r31, r31
    4696:	05 90       	lpm	r0, Z+
    4698:	f4 91       	lpm	r31, Z
    469a:	e0 2d       	mov	r30, r0
    469c:	09 94       	ijmp

0000469e <atof>:
    469e:	66 27       	eor	r22, r22
    46a0:	77 27       	eor	r23, r23
    46a2:	92 c0       	rjmp	.+292    	; 0x47c8 <strtod>

000046a4 <atol>:
    46a4:	1f 93       	push	r17
    46a6:	fc 01       	movw	r30, r24
    46a8:	99 27       	eor	r25, r25
    46aa:	88 27       	eor	r24, r24
    46ac:	bc 01       	movw	r22, r24
    46ae:	e8 94       	clt
    46b0:	11 91       	ld	r17, Z+
    46b2:	10 32       	cpi	r17, 0x20	; 32
    46b4:	e9 f3       	breq	.-6      	; 0x46b0 <atol+0xc>
    46b6:	19 30       	cpi	r17, 0x09	; 9
    46b8:	10 f0       	brcs	.+4      	; 0x46be <atol+0x1a>
    46ba:	1e 30       	cpi	r17, 0x0E	; 14
    46bc:	c8 f3       	brcs	.-14     	; 0x46b0 <atol+0xc>
    46be:	1b 32       	cpi	r17, 0x2B	; 43
    46c0:	49 f0       	breq	.+18     	; 0x46d4 <atol+0x30>
    46c2:	1d 32       	cpi	r17, 0x2D	; 45
    46c4:	41 f4       	brne	.+16     	; 0x46d6 <atol+0x32>
    46c6:	68 94       	set
    46c8:	05 c0       	rjmp	.+10     	; 0x46d4 <atol+0x30>
    46ca:	50 d0       	rcall	.+160    	; 0x476c <__mulsi_const_10>
    46cc:	61 0f       	add	r22, r17
    46ce:	71 1d       	adc	r23, r1
    46d0:	81 1d       	adc	r24, r1
    46d2:	91 1d       	adc	r25, r1
    46d4:	11 91       	ld	r17, Z+
    46d6:	10 53       	subi	r17, 0x30	; 48
    46d8:	1a 30       	cpi	r17, 0x0A	; 10
    46da:	b8 f3       	brcs	.-18     	; 0x46ca <atol+0x26>
    46dc:	3e f4       	brtc	.+14     	; 0x46ec <atol+0x48>
    46de:	90 95       	com	r25
    46e0:	80 95       	com	r24
    46e2:	70 95       	com	r23
    46e4:	61 95       	neg	r22
    46e6:	7f 4f       	sbci	r23, 0xFF	; 255
    46e8:	8f 4f       	sbci	r24, 0xFF	; 255
    46ea:	9f 4f       	sbci	r25, 0xFF	; 255
    46ec:	1f 91       	pop	r17
    46ee:	08 95       	ret

000046f0 <strcat>:
    46f0:	fb 01       	movw	r30, r22
    46f2:	dc 01       	movw	r26, r24
    46f4:	0d 90       	ld	r0, X+
    46f6:	00 20       	and	r0, r0
    46f8:	e9 f7       	brne	.-6      	; 0x46f4 <strcat+0x4>
    46fa:	11 97       	sbiw	r26, 0x01	; 1
    46fc:	01 90       	ld	r0, Z+
    46fe:	0d 92       	st	X+, r0
    4700:	00 20       	and	r0, r0
    4702:	e1 f7       	brne	.-8      	; 0x46fc <strcat+0xc>
    4704:	08 95       	ret

00004706 <strchr>:
    4706:	fc 01       	movw	r30, r24
    4708:	81 91       	ld	r24, Z+
    470a:	86 17       	cp	r24, r22
    470c:	21 f0       	breq	.+8      	; 0x4716 <strchr+0x10>
    470e:	88 23       	and	r24, r24
    4710:	d9 f7       	brne	.-10     	; 0x4708 <strchr+0x2>
    4712:	99 27       	eor	r25, r25
    4714:	08 95       	ret
    4716:	31 97       	sbiw	r30, 0x01	; 1
    4718:	cf 01       	movw	r24, r30
    471a:	08 95       	ret

0000471c <strcmp>:
    471c:	fb 01       	movw	r30, r22
    471e:	dc 01       	movw	r26, r24
    4720:	8d 91       	ld	r24, X+
    4722:	01 90       	ld	r0, Z+
    4724:	80 19       	sub	r24, r0
    4726:	01 10       	cpse	r0, r1
    4728:	d9 f3       	breq	.-10     	; 0x4720 <strcmp+0x4>
    472a:	99 0b       	sbc	r25, r25
    472c:	08 95       	ret

0000472e <strnlen>:
    472e:	fc 01       	movw	r30, r24
    4730:	61 50       	subi	r22, 0x01	; 1
    4732:	70 40       	sbci	r23, 0x00	; 0
    4734:	01 90       	ld	r0, Z+
    4736:	01 10       	cpse	r0, r1
    4738:	d8 f7       	brcc	.-10     	; 0x4730 <strnlen+0x2>
    473a:	80 95       	com	r24
    473c:	90 95       	com	r25
    473e:	8e 0f       	add	r24, r30
    4740:	9f 1f       	adc	r25, r31
    4742:	08 95       	ret

00004744 <strupr>:
    4744:	dc 01       	movw	r26, r24
    4746:	6c 91       	ld	r22, X
    4748:	61 56       	subi	r22, 0x61	; 97
    474a:	6a 31       	cpi	r22, 0x1A	; 26
    474c:	08 f0       	brcs	.+2      	; 0x4750 <strupr+0xc>
    474e:	60 5e       	subi	r22, 0xE0	; 224
    4750:	6f 5b       	subi	r22, 0xBF	; 191
    4752:	6d 93       	st	X+, r22
    4754:	c1 f7       	brne	.-16     	; 0x4746 <strupr+0x2>
    4756:	08 95       	ret

00004758 <__itoa_ncheck>:
    4758:	bb 27       	eor	r27, r27
    475a:	4a 30       	cpi	r20, 0x0A	; 10
    475c:	31 f4       	brne	.+12     	; 0x476a <__itoa_ncheck+0x12>
    475e:	99 23       	and	r25, r25
    4760:	22 f4       	brpl	.+8      	; 0x476a <__itoa_ncheck+0x12>
    4762:	bd e2       	ldi	r27, 0x2D	; 45
    4764:	90 95       	com	r25
    4766:	81 95       	neg	r24
    4768:	9f 4f       	sbci	r25, 0xFF	; 255
    476a:	16 c0       	rjmp	.+44     	; 0x4798 <__utoa_common>

0000476c <__mulsi_const_10>:
    476c:	59 2f       	mov	r21, r25
    476e:	48 2f       	mov	r20, r24
    4770:	37 2f       	mov	r19, r23
    4772:	26 2f       	mov	r18, r22
    4774:	66 0f       	add	r22, r22
    4776:	77 1f       	adc	r23, r23
    4778:	88 1f       	adc	r24, r24
    477a:	99 1f       	adc	r25, r25
    477c:	66 0f       	add	r22, r22
    477e:	77 1f       	adc	r23, r23
    4780:	88 1f       	adc	r24, r24
    4782:	99 1f       	adc	r25, r25
    4784:	62 0f       	add	r22, r18
    4786:	73 1f       	adc	r23, r19
    4788:	84 1f       	adc	r24, r20
    478a:	95 1f       	adc	r25, r21
    478c:	66 0f       	add	r22, r22
    478e:	77 1f       	adc	r23, r23
    4790:	88 1f       	adc	r24, r24
    4792:	99 1f       	adc	r25, r25
    4794:	08 95       	ret

00004796 <__utoa_ncheck>:
    4796:	bb 27       	eor	r27, r27

00004798 <__utoa_common>:
    4798:	fb 01       	movw	r30, r22
    479a:	55 27       	eor	r21, r21
    479c:	aa 27       	eor	r26, r26
    479e:	88 0f       	add	r24, r24
    47a0:	99 1f       	adc	r25, r25
    47a2:	aa 1f       	adc	r26, r26
    47a4:	a4 17       	cp	r26, r20
    47a6:	10 f0       	brcs	.+4      	; 0x47ac <__utoa_common+0x14>
    47a8:	a4 1b       	sub	r26, r20
    47aa:	83 95       	inc	r24
    47ac:	50 51       	subi	r21, 0x10	; 16
    47ae:	b9 f7       	brne	.-18     	; 0x479e <__utoa_common+0x6>
    47b0:	a0 5d       	subi	r26, 0xD0	; 208
    47b2:	aa 33       	cpi	r26, 0x3A	; 58
    47b4:	08 f0       	brcs	.+2      	; 0x47b8 <__utoa_common+0x20>
    47b6:	a9 5d       	subi	r26, 0xD9	; 217
    47b8:	a1 93       	st	Z+, r26
    47ba:	00 97       	sbiw	r24, 0x00	; 0
    47bc:	79 f7       	brne	.-34     	; 0x479c <__utoa_common+0x4>
    47be:	b1 11       	cpse	r27, r1
    47c0:	b1 93       	st	Z+, r27
    47c2:	11 92       	st	Z+, r1
    47c4:	cb 01       	movw	r24, r22
    47c6:	72 c1       	rjmp	.+740    	; 0x4aac <strrev>

000047c8 <strtod>:
    47c8:	a0 e0       	ldi	r26, 0x00	; 0
    47ca:	b0 e0       	ldi	r27, 0x00	; 0
    47cc:	e9 ee       	ldi	r30, 0xE9	; 233
    47ce:	f3 e2       	ldi	r31, 0x23	; 35
    47d0:	b9 c1       	rjmp	.+882    	; 0x4b44 <__prologue_saves__+0x8>
    47d2:	ec 01       	movw	r28, r24
    47d4:	7b 01       	movw	r14, r22
    47d6:	61 15       	cp	r22, r1
    47d8:	71 05       	cpc	r23, r1
    47da:	19 f0       	breq	.+6      	; 0x47e2 <strtod+0x1a>
    47dc:	db 01       	movw	r26, r22
    47de:	8d 93       	st	X+, r24
    47e0:	9c 93       	st	X, r25
    47e2:	8e 01       	movw	r16, r28
    47e4:	0f 5f       	subi	r16, 0xFF	; 255
    47e6:	1f 4f       	sbci	r17, 0xFF	; 255
    47e8:	78 80       	ld	r7, Y
    47ea:	87 2d       	mov	r24, r7
    47ec:	90 e0       	ldi	r25, 0x00	; 0
    47ee:	3e d1       	rcall	.+636    	; 0x4a6c <isspace>
    47f0:	89 2b       	or	r24, r25
    47f2:	11 f0       	breq	.+4      	; 0x47f8 <strtod+0x30>
    47f4:	e8 01       	movw	r28, r16
    47f6:	f5 cf       	rjmp	.-22     	; 0x47e2 <strtod+0x1a>
    47f8:	bd e2       	ldi	r27, 0x2D	; 45
    47fa:	7b 12       	cpse	r7, r27
    47fc:	05 c0       	rjmp	.+10     	; 0x4808 <strtod+0x40>
    47fe:	0f 5f       	subi	r16, 0xFF	; 255
    4800:	1f 4f       	sbci	r17, 0xFF	; 255
    4802:	79 80       	ldd	r7, Y+1	; 0x01
    4804:	c1 e0       	ldi	r28, 0x01	; 1
    4806:	08 c0       	rjmp	.+16     	; 0x4818 <strtod+0x50>
    4808:	eb e2       	ldi	r30, 0x2B	; 43
    480a:	7e 12       	cpse	r7, r30
    480c:	04 c0       	rjmp	.+8      	; 0x4816 <strtod+0x4e>
    480e:	8e 01       	movw	r16, r28
    4810:	0e 5f       	subi	r16, 0xFE	; 254
    4812:	1f 4f       	sbci	r17, 0xFF	; 255
    4814:	79 80       	ldd	r7, Y+1	; 0x01
    4816:	c0 e0       	ldi	r28, 0x00	; 0
    4818:	68 01       	movw	r12, r16
    481a:	f1 e0       	ldi	r31, 0x01	; 1
    481c:	cf 1a       	sub	r12, r31
    481e:	d1 08       	sbc	r13, r1
    4820:	43 e0       	ldi	r20, 0x03	; 3
    4822:	50 e0       	ldi	r21, 0x00	; 0
    4824:	68 ed       	ldi	r22, 0xD8	; 216
    4826:	72 e0       	ldi	r23, 0x02	; 2
    4828:	c6 01       	movw	r24, r12
    482a:	28 d1       	rcall	.+592    	; 0x4a7c <strncasecmp_P>
    482c:	89 2b       	or	r24, r25
    482e:	e9 f4       	brne	.+58     	; 0x486a <strtod+0xa2>
    4830:	68 01       	movw	r12, r16
    4832:	22 e0       	ldi	r18, 0x02	; 2
    4834:	c2 0e       	add	r12, r18
    4836:	d1 1c       	adc	r13, r1
    4838:	45 e0       	ldi	r20, 0x05	; 5
    483a:	50 e0       	ldi	r21, 0x00	; 0
    483c:	63 ed       	ldi	r22, 0xD3	; 211
    483e:	72 e0       	ldi	r23, 0x02	; 2
    4840:	c6 01       	movw	r24, r12
    4842:	1c d1       	rcall	.+568    	; 0x4a7c <strncasecmp_P>
    4844:	89 2b       	or	r24, r25
    4846:	21 f4       	brne	.+8      	; 0x4850 <strtod+0x88>
    4848:	68 01       	movw	r12, r16
    484a:	87 e0       	ldi	r24, 0x07	; 7
    484c:	c8 0e       	add	r12, r24
    484e:	d1 1c       	adc	r13, r1
    4850:	e1 14       	cp	r14, r1
    4852:	f1 04       	cpc	r15, r1
    4854:	19 f0       	breq	.+6      	; 0x485c <strtod+0x94>
    4856:	d7 01       	movw	r26, r14
    4858:	cd 92       	st	X+, r12
    485a:	dc 92       	st	X, r13
    485c:	c1 11       	cpse	r28, r1
    485e:	f9 c0       	rjmp	.+498    	; 0x4a52 <strtod+0x28a>
    4860:	60 e0       	ldi	r22, 0x00	; 0
    4862:	70 e0       	ldi	r23, 0x00	; 0
    4864:	80 e8       	ldi	r24, 0x80	; 128
    4866:	9f e7       	ldi	r25, 0x7F	; 127
    4868:	fd c0       	rjmp	.+506    	; 0x4a64 <strtod+0x29c>
    486a:	43 e0       	ldi	r20, 0x03	; 3
    486c:	50 e0       	ldi	r21, 0x00	; 0
    486e:	60 ed       	ldi	r22, 0xD0	; 208
    4870:	72 e0       	ldi	r23, 0x02	; 2
    4872:	c6 01       	movw	r24, r12
    4874:	03 d1       	rcall	.+518    	; 0x4a7c <strncasecmp_P>
    4876:	89 2b       	or	r24, r25
    4878:	51 f4       	brne	.+20     	; 0x488e <strtod+0xc6>
    487a:	e1 14       	cp	r14, r1
    487c:	f1 04       	cpc	r15, r1
    487e:	09 f4       	brne	.+2      	; 0x4882 <strtod+0xba>
    4880:	ed c0       	rjmp	.+474    	; 0x4a5c <strtod+0x294>
    4882:	0e 5f       	subi	r16, 0xFE	; 254
    4884:	1f 4f       	sbci	r17, 0xFF	; 255
    4886:	f7 01       	movw	r30, r14
    4888:	11 83       	std	Z+1, r17	; 0x01
    488a:	00 83       	st	Z, r16
    488c:	e7 c0       	rjmp	.+462    	; 0x4a5c <strtod+0x294>
    488e:	68 01       	movw	r12, r16
    4890:	60 e0       	ldi	r22, 0x00	; 0
    4892:	70 e0       	ldi	r23, 0x00	; 0
    4894:	cb 01       	movw	r24, r22
    4896:	00 e0       	ldi	r16, 0x00	; 0
    4898:	10 e0       	ldi	r17, 0x00	; 0
    489a:	f6 01       	movw	r30, r12
    489c:	d0 ed       	ldi	r29, 0xD0	; 208
    489e:	d7 0d       	add	r29, r7
    48a0:	da 30       	cpi	r29, 0x0A	; 10
    48a2:	50 f5       	brcc	.+84     	; 0x48f8 <strtod+0x130>
    48a4:	2c 2f       	mov	r18, r28
    48a6:	22 60       	ori	r18, 0x02	; 2
    48a8:	62 2e       	mov	r6, r18
    48aa:	2c 2f       	mov	r18, r28
    48ac:	28 70       	andi	r18, 0x08	; 8
    48ae:	c2 ff       	sbrs	r28, 2
    48b0:	05 c0       	rjmp	.+10     	; 0x48bc <strtod+0xf4>
    48b2:	21 11       	cpse	r18, r1
    48b4:	27 c0       	rjmp	.+78     	; 0x4904 <strtod+0x13c>
    48b6:	0f 5f       	subi	r16, 0xFF	; 255
    48b8:	1f 4f       	sbci	r17, 0xFF	; 255
    48ba:	24 c0       	rjmp	.+72     	; 0x4904 <strtod+0x13c>
    48bc:	22 23       	and	r18, r18
    48be:	11 f0       	breq	.+4      	; 0x48c4 <strtod+0xfc>
    48c0:	01 50       	subi	r16, 0x01	; 1
    48c2:	11 09       	sbc	r17, r1
    48c4:	a5 e0       	ldi	r26, 0x05	; 5
    48c6:	b0 e0       	ldi	r27, 0x00	; 0
    48c8:	9b 01       	movw	r18, r22
    48ca:	ac 01       	movw	r20, r24
    48cc:	2d d1       	rcall	.+602    	; 0x4b28 <__muluhisi3>
    48ce:	4b 01       	movw	r8, r22
    48d0:	5c 01       	movw	r10, r24
    48d2:	88 0c       	add	r8, r8
    48d4:	99 1c       	adc	r9, r9
    48d6:	aa 1c       	adc	r10, r10
    48d8:	bb 1c       	adc	r11, r11
    48da:	c5 01       	movw	r24, r10
    48dc:	b4 01       	movw	r22, r8
    48de:	6d 0f       	add	r22, r29
    48e0:	71 1d       	adc	r23, r1
    48e2:	81 1d       	adc	r24, r1
    48e4:	91 1d       	adc	r25, r1
    48e6:	68 39       	cpi	r22, 0x98	; 152
    48e8:	a9 e9       	ldi	r26, 0x99	; 153
    48ea:	7a 07       	cpc	r23, r26
    48ec:	8a 07       	cpc	r24, r26
    48ee:	a9 e1       	ldi	r26, 0x19	; 25
    48f0:	9a 07       	cpc	r25, r26
    48f2:	40 f0       	brcs	.+16     	; 0x4904 <strtod+0x13c>
    48f4:	c6 60       	ori	r28, 0x06	; 6
    48f6:	05 c0       	rjmp	.+10     	; 0x4902 <strtod+0x13a>
    48f8:	de 3f       	cpi	r29, 0xFE	; 254
    48fa:	51 f4       	brne	.+20     	; 0x4910 <strtod+0x148>
    48fc:	c3 fd       	sbrc	r28, 3
    48fe:	44 c0       	rjmp	.+136    	; 0x4988 <strtod+0x1c0>
    4900:	c8 60       	ori	r28, 0x08	; 8
    4902:	6c 2e       	mov	r6, r28
    4904:	bf ef       	ldi	r27, 0xFF	; 255
    4906:	cb 1a       	sub	r12, r27
    4908:	db 0a       	sbc	r13, r27
    490a:	70 80       	ld	r7, Z
    490c:	c6 2d       	mov	r28, r6
    490e:	c5 cf       	rjmp	.-118    	; 0x489a <strtod+0xd2>
    4910:	2d 2f       	mov	r18, r29
    4912:	2f 7d       	andi	r18, 0xDF	; 223
    4914:	25 31       	cpi	r18, 0x15	; 21
    4916:	c1 f5       	brne	.+112    	; 0x4988 <strtod+0x1c0>
    4918:	40 81       	ld	r20, Z
    491a:	4d 32       	cpi	r20, 0x2D	; 45
    491c:	11 f4       	brne	.+4      	; 0x4922 <strtod+0x15a>
    491e:	c0 61       	ori	r28, 0x10	; 16
    4920:	06 c0       	rjmp	.+12     	; 0x492e <strtod+0x166>
    4922:	4b 32       	cpi	r20, 0x2B	; 43
    4924:	21 f0       	breq	.+8      	; 0x492e <strtod+0x166>
    4926:	31 96       	adiw	r30, 0x01	; 1
    4928:	21 e0       	ldi	r18, 0x01	; 1
    492a:	30 e0       	ldi	r19, 0x00	; 0
    492c:	06 c0       	rjmp	.+12     	; 0x493a <strtod+0x172>
    492e:	32 96       	adiw	r30, 0x02	; 2
    4930:	d6 01       	movw	r26, r12
    4932:	11 96       	adiw	r26, 0x01	; 1
    4934:	4c 91       	ld	r20, X
    4936:	22 e0       	ldi	r18, 0x02	; 2
    4938:	30 e0       	ldi	r19, 0x00	; 0
    493a:	a0 ed       	ldi	r26, 0xD0	; 208
    493c:	a4 0f       	add	r26, r20
    493e:	aa 30       	cpi	r26, 0x0A	; 10
    4940:	18 f0       	brcs	.+6      	; 0x4948 <strtod+0x180>
    4942:	e2 1b       	sub	r30, r18
    4944:	f3 0b       	sbc	r31, r19
    4946:	20 c0       	rjmp	.+64     	; 0x4988 <strtod+0x1c0>
    4948:	40 e0       	ldi	r20, 0x00	; 0
    494a:	50 e0       	ldi	r21, 0x00	; 0
    494c:	40 38       	cpi	r20, 0x80	; 128
    494e:	bc e0       	ldi	r27, 0x0C	; 12
    4950:	5b 07       	cpc	r21, r27
    4952:	5c f4       	brge	.+22     	; 0x496a <strtod+0x1a2>
    4954:	9a 01       	movw	r18, r20
    4956:	22 0f       	add	r18, r18
    4958:	33 1f       	adc	r19, r19
    495a:	22 0f       	add	r18, r18
    495c:	33 1f       	adc	r19, r19
    495e:	42 0f       	add	r20, r18
    4960:	53 1f       	adc	r21, r19
    4962:	44 0f       	add	r20, r20
    4964:	55 1f       	adc	r21, r21
    4966:	4a 0f       	add	r20, r26
    4968:	51 1d       	adc	r21, r1
    496a:	31 96       	adiw	r30, 0x01	; 1
    496c:	df 01       	movw	r26, r30
    496e:	11 97       	sbiw	r26, 0x01	; 1
    4970:	2c 91       	ld	r18, X
    4972:	a0 ed       	ldi	r26, 0xD0	; 208
    4974:	a2 0f       	add	r26, r18
    4976:	aa 30       	cpi	r26, 0x0A	; 10
    4978:	48 f3       	brcs	.-46     	; 0x494c <strtod+0x184>
    497a:	c4 ff       	sbrs	r28, 4
    497c:	03 c0       	rjmp	.+6      	; 0x4984 <strtod+0x1bc>
    497e:	51 95       	neg	r21
    4980:	41 95       	neg	r20
    4982:	51 09       	sbc	r21, r1
    4984:	04 0f       	add	r16, r20
    4986:	15 1f       	adc	r17, r21
    4988:	c1 ff       	sbrs	r28, 1
    498a:	07 c0       	rjmp	.+14     	; 0x499a <strtod+0x1d2>
    498c:	e1 14       	cp	r14, r1
    498e:	f1 04       	cpc	r15, r1
    4990:	21 f0       	breq	.+8      	; 0x499a <strtod+0x1d2>
    4992:	31 97       	sbiw	r30, 0x01	; 1
    4994:	d7 01       	movw	r26, r14
    4996:	ed 93       	st	X+, r30
    4998:	fc 93       	st	X, r31
    499a:	19 dd       	rcall	.-1486   	; 0x43ce <__floatunsisf>
    499c:	c3 70       	andi	r28, 0x03	; 3
    499e:	c3 30       	cpi	r28, 0x03	; 3
    49a0:	19 f0       	breq	.+6      	; 0x49a8 <strtod+0x1e0>
    49a2:	6b 01       	movw	r12, r22
    49a4:	7c 01       	movw	r14, r24
    49a6:	06 c0       	rjmp	.+12     	; 0x49b4 <strtod+0x1ec>
    49a8:	6b 01       	movw	r12, r22
    49aa:	7c 01       	movw	r14, r24
    49ac:	f7 fa       	bst	r15, 7
    49ae:	f0 94       	com	r15
    49b0:	f7 f8       	bld	r15, 7
    49b2:	f0 94       	com	r15
    49b4:	20 e0       	ldi	r18, 0x00	; 0
    49b6:	30 e0       	ldi	r19, 0x00	; 0
    49b8:	a9 01       	movw	r20, r18
    49ba:	c7 01       	movw	r24, r14
    49bc:	b6 01       	movw	r22, r12
    49be:	d2 dc       	rcall	.-1628   	; 0x4364 <__cmpsf2>
    49c0:	88 23       	and	r24, r24
    49c2:	09 f4       	brne	.+2      	; 0x49c6 <strtod+0x1fe>
    49c4:	43 c0       	rjmp	.+134    	; 0x4a4c <strtod+0x284>
    49c6:	17 ff       	sbrs	r17, 7
    49c8:	06 c0       	rjmp	.+12     	; 0x49d6 <strtod+0x20e>
    49ca:	11 95       	neg	r17
    49cc:	01 95       	neg	r16
    49ce:	11 09       	sbc	r17, r1
    49d0:	cf ee       	ldi	r28, 0xEF	; 239
    49d2:	d2 e0       	ldi	r29, 0x02	; 2
    49d4:	02 c0       	rjmp	.+4      	; 0x49da <strtod+0x212>
    49d6:	c7 e0       	ldi	r28, 0x07	; 7
    49d8:	d3 e0       	ldi	r29, 0x03	; 3
    49da:	5e 01       	movw	r10, r28
    49dc:	b8 e1       	ldi	r27, 0x18	; 24
    49de:	ab 1a       	sub	r10, r27
    49e0:	b1 08       	sbc	r11, r1
    49e2:	46 01       	movw	r8, r12
    49e4:	be 2d       	mov	r27, r14
    49e6:	af 2d       	mov	r26, r15
    49e8:	90 e2       	ldi	r25, 0x20	; 32
    49ea:	e9 2e       	mov	r14, r25
    49ec:	f1 2c       	mov	r15, r1
    49ee:	0e 15       	cp	r16, r14
    49f0:	1f 05       	cpc	r17, r15
    49f2:	7c f0       	brlt	.+30     	; 0x4a12 <strtod+0x24a>
    49f4:	fe 01       	movw	r30, r28
    49f6:	25 91       	lpm	r18, Z+
    49f8:	35 91       	lpm	r19, Z+
    49fa:	45 91       	lpm	r20, Z+
    49fc:	54 91       	lpm	r21, Z
    49fe:	b4 01       	movw	r22, r8
    4a00:	8b 2f       	mov	r24, r27
    4a02:	9a 2f       	mov	r25, r26
    4a04:	9a dd       	rcall	.-1228   	; 0x453a <__mulsf3>
    4a06:	4b 01       	movw	r8, r22
    4a08:	b8 2f       	mov	r27, r24
    4a0a:	a9 2f       	mov	r26, r25
    4a0c:	0e 19       	sub	r16, r14
    4a0e:	1f 09       	sbc	r17, r15
    4a10:	ee cf       	rjmp	.-36     	; 0x49ee <strtod+0x226>
    4a12:	24 97       	sbiw	r28, 0x04	; 4
    4a14:	f5 94       	asr	r15
    4a16:	e7 94       	ror	r14
    4a18:	ca 15       	cp	r28, r10
    4a1a:	db 05       	cpc	r29, r11
    4a1c:	41 f7       	brne	.-48     	; 0x49ee <strtod+0x226>
    4a1e:	64 01       	movw	r12, r8
    4a20:	eb 2e       	mov	r14, r27
    4a22:	fa 2e       	mov	r15, r26
    4a24:	8e 2d       	mov	r24, r14
    4a26:	88 0f       	add	r24, r24
    4a28:	8f 2d       	mov	r24, r15
    4a2a:	88 1f       	adc	r24, r24
    4a2c:	8f 3f       	cpi	r24, 0xFF	; 255
    4a2e:	41 f0       	breq	.+16     	; 0x4a40 <strtod+0x278>
    4a30:	20 e0       	ldi	r18, 0x00	; 0
    4a32:	30 e0       	ldi	r19, 0x00	; 0
    4a34:	a9 01       	movw	r20, r18
    4a36:	c7 01       	movw	r24, r14
    4a38:	b6 01       	movw	r22, r12
    4a3a:	94 dc       	rcall	.-1752   	; 0x4364 <__cmpsf2>
    4a3c:	81 11       	cpse	r24, r1
    4a3e:	06 c0       	rjmp	.+12     	; 0x4a4c <strtod+0x284>
    4a40:	82 e2       	ldi	r24, 0x22	; 34
    4a42:	90 e0       	ldi	r25, 0x00	; 0
    4a44:	90 93 00 05 	sts	0x0500, r25
    4a48:	80 93 ff 04 	sts	0x04FF, r24
    4a4c:	c7 01       	movw	r24, r14
    4a4e:	b6 01       	movw	r22, r12
    4a50:	09 c0       	rjmp	.+18     	; 0x4a64 <strtod+0x29c>
    4a52:	60 e0       	ldi	r22, 0x00	; 0
    4a54:	70 e0       	ldi	r23, 0x00	; 0
    4a56:	80 e8       	ldi	r24, 0x80	; 128
    4a58:	9f ef       	ldi	r25, 0xFF	; 255
    4a5a:	04 c0       	rjmp	.+8      	; 0x4a64 <strtod+0x29c>
    4a5c:	60 e0       	ldi	r22, 0x00	; 0
    4a5e:	70 e0       	ldi	r23, 0x00	; 0
    4a60:	80 ec       	ldi	r24, 0xC0	; 192
    4a62:	9f e7       	ldi	r25, 0x7F	; 127
    4a64:	cd b7       	in	r28, 0x3d	; 61
    4a66:	de b7       	in	r29, 0x3e	; 62
    4a68:	ee e0       	ldi	r30, 0x0E	; 14
    4a6a:	88 c0       	rjmp	.+272    	; 0x4b7c <__epilogue_restores__+0x8>

00004a6c <isspace>:
    4a6c:	91 11       	cpse	r25, r1
    4a6e:	2e c0       	rjmp	.+92     	; 0x4acc <__ctype_isfalse>
    4a70:	80 32       	cpi	r24, 0x20	; 32
    4a72:	19 f0       	breq	.+6      	; 0x4a7a <isspace+0xe>
    4a74:	89 50       	subi	r24, 0x09	; 9
    4a76:	85 50       	subi	r24, 0x05	; 5
    4a78:	d0 f7       	brcc	.-12     	; 0x4a6e <isspace+0x2>
    4a7a:	08 95       	ret

00004a7c <strncasecmp_P>:
    4a7c:	fb 01       	movw	r30, r22
    4a7e:	dc 01       	movw	r26, r24
    4a80:	41 50       	subi	r20, 0x01	; 1
    4a82:	50 40       	sbci	r21, 0x00	; 0
    4a84:	88 f0       	brcs	.+34     	; 0x4aa8 <strncasecmp_P+0x2c>
    4a86:	8d 91       	ld	r24, X+
    4a88:	81 34       	cpi	r24, 0x41	; 65
    4a8a:	1c f0       	brlt	.+6      	; 0x4a92 <strncasecmp_P+0x16>
    4a8c:	8b 35       	cpi	r24, 0x5B	; 91
    4a8e:	0c f4       	brge	.+2      	; 0x4a92 <strncasecmp_P+0x16>
    4a90:	80 5e       	subi	r24, 0xE0	; 224
    4a92:	65 91       	lpm	r22, Z+
    4a94:	61 34       	cpi	r22, 0x41	; 65
    4a96:	1c f0       	brlt	.+6      	; 0x4a9e <strncasecmp_P+0x22>
    4a98:	6b 35       	cpi	r22, 0x5B	; 91
    4a9a:	0c f4       	brge	.+2      	; 0x4a9e <strncasecmp_P+0x22>
    4a9c:	60 5e       	subi	r22, 0xE0	; 224
    4a9e:	86 1b       	sub	r24, r22
    4aa0:	61 11       	cpse	r22, r1
    4aa2:	71 f3       	breq	.-36     	; 0x4a80 <strncasecmp_P+0x4>
    4aa4:	99 0b       	sbc	r25, r25
    4aa6:	08 95       	ret
    4aa8:	88 1b       	sub	r24, r24
    4aaa:	fc cf       	rjmp	.-8      	; 0x4aa4 <strncasecmp_P+0x28>

00004aac <strrev>:
    4aac:	dc 01       	movw	r26, r24
    4aae:	fc 01       	movw	r30, r24
    4ab0:	67 2f       	mov	r22, r23
    4ab2:	71 91       	ld	r23, Z+
    4ab4:	77 23       	and	r23, r23
    4ab6:	e1 f7       	brne	.-8      	; 0x4ab0 <strrev+0x4>
    4ab8:	32 97       	sbiw	r30, 0x02	; 2
    4aba:	04 c0       	rjmp	.+8      	; 0x4ac4 <strrev+0x18>
    4abc:	7c 91       	ld	r23, X
    4abe:	6d 93       	st	X+, r22
    4ac0:	70 83       	st	Z, r23
    4ac2:	62 91       	ld	r22, -Z
    4ac4:	ae 17       	cp	r26, r30
    4ac6:	bf 07       	cpc	r27, r31
    4ac8:	c8 f3       	brcs	.-14     	; 0x4abc <strrev+0x10>
    4aca:	08 95       	ret

00004acc <__ctype_isfalse>:
    4acc:	99 27       	eor	r25, r25
    4ace:	88 27       	eor	r24, r24

00004ad0 <__ctype_istrue>:
    4ad0:	08 95       	ret

00004ad2 <eeprom_read_dword>:
    4ad2:	a6 e1       	ldi	r26, 0x16	; 22
    4ad4:	b0 e0       	ldi	r27, 0x00	; 0
    4ad6:	44 e0       	ldi	r20, 0x04	; 4
    4ad8:	50 e0       	ldi	r21, 0x00	; 0
    4ada:	0a c0       	rjmp	.+20     	; 0x4af0 <eeprom_read_blraw>

00004adc <eeprom_write_dword>:
    4adc:	24 2f       	mov	r18, r20
    4ade:	17 d0       	rcall	.+46     	; 0x4b0e <eeprom_write_r18>
    4ae0:	25 2f       	mov	r18, r21
    4ae2:	15 d0       	rcall	.+42     	; 0x4b0e <eeprom_write_r18>
    4ae4:	00 c0       	rjmp	.+0      	; 0x4ae6 <eeprom_write_word>

00004ae6 <eeprom_write_word>:
    4ae6:	12 d0       	rcall	.+36     	; 0x4b0c <eeprom_write_byte>
    4ae8:	27 2f       	mov	r18, r23
    4aea:	11 c0       	rjmp	.+34     	; 0x4b0e <eeprom_write_r18>

00004aec <eeprom_read_block>:
    4aec:	dc 01       	movw	r26, r24
    4aee:	cb 01       	movw	r24, r22

00004af0 <eeprom_read_blraw>:
    4af0:	fc 01       	movw	r30, r24
    4af2:	f9 99       	sbic	0x1f, 1	; 31
    4af4:	fe cf       	rjmp	.-4      	; 0x4af2 <eeprom_read_blraw+0x2>
    4af6:	06 c0       	rjmp	.+12     	; 0x4b04 <eeprom_read_blraw+0x14>
    4af8:	f2 bd       	out	0x22, r31	; 34
    4afa:	e1 bd       	out	0x21, r30	; 33
    4afc:	f8 9a       	sbi	0x1f, 0	; 31
    4afe:	31 96       	adiw	r30, 0x01	; 1
    4b00:	00 b4       	in	r0, 0x20	; 32
    4b02:	0d 92       	st	X+, r0
    4b04:	41 50       	subi	r20, 0x01	; 1
    4b06:	50 40       	sbci	r21, 0x00	; 0
    4b08:	b8 f7       	brcc	.-18     	; 0x4af8 <eeprom_read_blraw+0x8>
    4b0a:	08 95       	ret

00004b0c <eeprom_write_byte>:
    4b0c:	26 2f       	mov	r18, r22

00004b0e <eeprom_write_r18>:
    4b0e:	f9 99       	sbic	0x1f, 1	; 31
    4b10:	fe cf       	rjmp	.-4      	; 0x4b0e <eeprom_write_r18>
    4b12:	1f ba       	out	0x1f, r1	; 31
    4b14:	92 bd       	out	0x22, r25	; 34
    4b16:	81 bd       	out	0x21, r24	; 33
    4b18:	20 bd       	out	0x20, r18	; 32
    4b1a:	0f b6       	in	r0, 0x3f	; 63
    4b1c:	f8 94       	cli
    4b1e:	fa 9a       	sbi	0x1f, 2	; 31
    4b20:	f9 9a       	sbi	0x1f, 1	; 31
    4b22:	0f be       	out	0x3f, r0	; 63
    4b24:	01 96       	adiw	r24, 0x01	; 1
    4b26:	08 95       	ret

00004b28 <__muluhisi3>:
    4b28:	40 d0       	rcall	.+128    	; 0x4baa <__umulhisi3>
    4b2a:	a5 9f       	mul	r26, r21
    4b2c:	90 0d       	add	r25, r0
    4b2e:	b4 9f       	mul	r27, r20
    4b30:	90 0d       	add	r25, r0
    4b32:	a4 9f       	mul	r26, r20
    4b34:	80 0d       	add	r24, r0
    4b36:	91 1d       	adc	r25, r1
    4b38:	11 24       	eor	r1, r1
    4b3a:	08 95       	ret

00004b3c <__prologue_saves__>:
    4b3c:	2f 92       	push	r2
    4b3e:	3f 92       	push	r3
    4b40:	4f 92       	push	r4
    4b42:	5f 92       	push	r5
    4b44:	6f 92       	push	r6
    4b46:	7f 92       	push	r7
    4b48:	8f 92       	push	r8
    4b4a:	9f 92       	push	r9
    4b4c:	af 92       	push	r10
    4b4e:	bf 92       	push	r11
    4b50:	cf 92       	push	r12
    4b52:	df 92       	push	r13
    4b54:	ef 92       	push	r14
    4b56:	ff 92       	push	r15
    4b58:	0f 93       	push	r16
    4b5a:	1f 93       	push	r17
    4b5c:	cf 93       	push	r28
    4b5e:	df 93       	push	r29
    4b60:	cd b7       	in	r28, 0x3d	; 61
    4b62:	de b7       	in	r29, 0x3e	; 62
    4b64:	ca 1b       	sub	r28, r26
    4b66:	db 0b       	sbc	r29, r27
    4b68:	0f b6       	in	r0, 0x3f	; 63
    4b6a:	f8 94       	cli
    4b6c:	de bf       	out	0x3e, r29	; 62
    4b6e:	0f be       	out	0x3f, r0	; 63
    4b70:	cd bf       	out	0x3d, r28	; 61
    4b72:	09 94       	ijmp

00004b74 <__epilogue_restores__>:
    4b74:	2a 88       	ldd	r2, Y+18	; 0x12
    4b76:	39 88       	ldd	r3, Y+17	; 0x11
    4b78:	48 88       	ldd	r4, Y+16	; 0x10
    4b7a:	5f 84       	ldd	r5, Y+15	; 0x0f
    4b7c:	6e 84       	ldd	r6, Y+14	; 0x0e
    4b7e:	7d 84       	ldd	r7, Y+13	; 0x0d
    4b80:	8c 84       	ldd	r8, Y+12	; 0x0c
    4b82:	9b 84       	ldd	r9, Y+11	; 0x0b
    4b84:	aa 84       	ldd	r10, Y+10	; 0x0a
    4b86:	b9 84       	ldd	r11, Y+9	; 0x09
    4b88:	c8 84       	ldd	r12, Y+8	; 0x08
    4b8a:	df 80       	ldd	r13, Y+7	; 0x07
    4b8c:	ee 80       	ldd	r14, Y+6	; 0x06
    4b8e:	fd 80       	ldd	r15, Y+5	; 0x05
    4b90:	0c 81       	ldd	r16, Y+4	; 0x04
    4b92:	1b 81       	ldd	r17, Y+3	; 0x03
    4b94:	aa 81       	ldd	r26, Y+2	; 0x02
    4b96:	b9 81       	ldd	r27, Y+1	; 0x01
    4b98:	ce 0f       	add	r28, r30
    4b9a:	d1 1d       	adc	r29, r1
    4b9c:	0f b6       	in	r0, 0x3f	; 63
    4b9e:	f8 94       	cli
    4ba0:	de bf       	out	0x3e, r29	; 62
    4ba2:	0f be       	out	0x3f, r0	; 63
    4ba4:	cd bf       	out	0x3d, r28	; 61
    4ba6:	ed 01       	movw	r28, r26
    4ba8:	08 95       	ret

00004baa <__umulhisi3>:
    4baa:	a2 9f       	mul	r26, r18
    4bac:	b0 01       	movw	r22, r0
    4bae:	b3 9f       	mul	r27, r19
    4bb0:	c0 01       	movw	r24, r0
    4bb2:	a3 9f       	mul	r26, r19
    4bb4:	70 0d       	add	r23, r0
    4bb6:	81 1d       	adc	r24, r1
    4bb8:	11 24       	eor	r1, r1
    4bba:	91 1d       	adc	r25, r1
    4bbc:	b2 9f       	mul	r27, r18
    4bbe:	70 0d       	add	r23, r0
    4bc0:	81 1d       	adc	r24, r1
    4bc2:	11 24       	eor	r1, r1
    4bc4:	91 1d       	adc	r25, r1
    4bc6:	08 95       	ret

00004bc8 <_exit>:
    4bc8:	f8 94       	cli

00004bca <__stop_program>:
    4bca:	ff cf       	rjmp	.-2      	; 0x4bca <__stop_program>

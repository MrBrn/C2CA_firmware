
C2CA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008c  00800100  00007af4  00007b88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007af4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003d2  0080018c  0080018c  00007c14  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00007c14  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007c70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00007cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007f93  00000000  00000000  00007d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000485  00000000  00000000  0000fcc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004d33  00000000  00000000  00010148  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000360  00000000  00000000  00014e7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00010784  00000000  00000000  000151dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009bb8  00000000  00000000  00025960  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001420  00000000  00000000  0002f518  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00000648  00000000  00000000  00030938  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	59 c0       	rjmp	.+178    	; 0xb4 <__ctors_end>
       2:	00 00       	nop
       4:	74 c0       	rjmp	.+232    	; 0xee <__bad_interrupt>
       6:	00 00       	nop
       8:	72 c0       	rjmp	.+228    	; 0xee <__bad_interrupt>
       a:	00 00       	nop
       c:	70 c0       	rjmp	.+224    	; 0xee <__bad_interrupt>
       e:	00 00       	nop
      10:	6e c0       	rjmp	.+220    	; 0xee <__bad_interrupt>
      12:	00 00       	nop
      14:	6c c0       	rjmp	.+216    	; 0xee <__bad_interrupt>
      16:	00 00       	nop
      18:	6a c0       	rjmp	.+212    	; 0xee <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0c 94 84 17 	jmp	0x2f08	; 0x2f08 <__vector_7>
      20:	66 c0       	rjmp	.+204    	; 0xee <__bad_interrupt>
      22:	00 00       	nop
      24:	64 c0       	rjmp	.+200    	; 0xee <__bad_interrupt>
      26:	00 00       	nop
      28:	62 c0       	rjmp	.+196    	; 0xee <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 12 15 	jmp	0x2a24	; 0x2a24 <__vector_11>
      30:	5e c0       	rjmp	.+188    	; 0xee <__bad_interrupt>
      32:	00 00       	nop
      34:	5c c0       	rjmp	.+184    	; 0xee <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 74 14 	jmp	0x28e8	; 0x28e8 <__vector_14>
      3c:	58 c0       	rjmp	.+176    	; 0xee <__bad_interrupt>
      3e:	00 00       	nop
      40:	56 c0       	rjmp	.+172    	; 0xee <__bad_interrupt>
      42:	00 00       	nop
      44:	54 c0       	rjmp	.+168    	; 0xee <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 40 14 	jmp	0x2880	; 0x2880 <__vector_18>
      4c:	0c 94 00 14 	jmp	0x2800	; 0x2800 <__vector_19>
      50:	4e c0       	rjmp	.+156    	; 0xee <__bad_interrupt>
      52:	00 00       	nop
      54:	4c c0       	rjmp	.+152    	; 0xee <__bad_interrupt>
      56:	00 00       	nop
      58:	4a c0       	rjmp	.+148    	; 0xee <__bad_interrupt>
      5a:	00 00       	nop
      5c:	48 c0       	rjmp	.+144    	; 0xee <__bad_interrupt>
      5e:	00 00       	nop
      60:	46 c0       	rjmp	.+140    	; 0xee <__bad_interrupt>
      62:	00 00       	nop
      64:	44 c0       	rjmp	.+136    	; 0xee <__bad_interrupt>
      66:	00 00       	nop
      68:	37 15       	cp	r19, r7
      6a:	89 15       	cp	r24, r9
      6c:	fc 15       	cp	r31, r12
      6e:	32 16       	cp	r3, r18
      70:	63 16       	cp	r6, r19
      72:	76 16       	cp	r7, r22
      74:	ac 16       	cp	r10, r28
      76:	dc 16       	cp	r13, r28

00000078 <__trampolines_end>:
      78:	4e 41       	sbci	r20, 0x1E	; 30
      7a:	4e 49       	sbci	r20, 0x9E	; 158

0000007b <pstr_inity>:
      7b:	49 4e 49 54 59                                      INITY

00000080 <pstr_inf>:
      80:	49 4e 46                                            INF

00000083 <pwr_m10>:
      83:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      93:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000009b <pwr_p10>:
      9b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      ab:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	11 e0       	ldi	r17, 0x01	; 1
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	e4 ef       	ldi	r30, 0xF4	; 244
      c8:	fa e7       	ldi	r31, 0x7A	; 122
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	ac 38       	cpi	r26, 0x8C	; 140
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	25 e0       	ldi	r18, 0x05	; 5
      d8:	ac e8       	ldi	r26, 0x8C	; 140
      da:	b1 e0       	ldi	r27, 0x01	; 1
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	ae 35       	cpi	r26, 0x5E	; 94
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
      e6:	0e 94 ad 35 	call	0x6b5a	; 0x6b5a <main>
      ea:	0c 94 78 3d 	jmp	0x7af0	; 0x7af0 <_exit>

000000ee <__bad_interrupt>:
      ee:	88 cf       	rjmp	.-240    	; 0x0 <__vectors>

000000f0 <MaxRTDinit>:
*************************************************/
static inline void MaxRTDinit( unsigned char dataWrite, unsigned char ch)
{
	unsigned char dummy;

	switch (ch)
      f0:	62 30       	cpi	r22, 0x02	; 2
      f2:	59 f0       	breq	.+22     	; 0x10a <MaxRTDinit+0x1a>
      f4:	18 f4       	brcc	.+6      	; 0xfc <MaxRTDinit+0xc>
      f6:	61 30       	cpi	r22, 0x01	; 1
      f8:	31 f0       	breq	.+12     	; 0x106 <MaxRTDinit+0x16>
      fa:	0c c0       	rjmp	.+24     	; 0x114 <MaxRTDinit+0x24>
      fc:	63 30       	cpi	r22, 0x03	; 3
      fe:	39 f0       	breq	.+14     	; 0x10e <MaxRTDinit+0x1e>
     100:	64 30       	cpi	r22, 0x04	; 4
     102:	39 f0       	breq	.+14     	; 0x112 <MaxRTDinit+0x22>
     104:	07 c0       	rjmp	.+14     	; 0x114 <MaxRTDinit+0x24>
	{
		case 1:
		PORTD &= 0b11101111;	// Set CS1 low
     106:	5c 98       	cbi	0x0b, 4	; 11
		break;
     108:	05 c0       	rjmp	.+10     	; 0x114 <MaxRTDinit+0x24>
		
		case 2:
		PORTD &= 0b11011111;	// Set CS2 low
     10a:	5d 98       	cbi	0x0b, 5	; 11
		break;
     10c:	03 c0       	rjmp	.+6      	; 0x114 <MaxRTDinit+0x24>
		
		case 3:
		PORTD &= 0b10111111;	// Set CS3 low
     10e:	5e 98       	cbi	0x0b, 6	; 11
		break;
     110:	01 c0       	rjmp	.+2      	; 0x114 <MaxRTDinit+0x24>
		
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
     112:	5f 98       	cbi	0x0b, 7	; 11
		break;
	}
	SPDR = 0x80;				// Configuration
     114:	90 e8       	ldi	r25, 0x80	; 128
     116:	9e bd       	out	0x2e, r25	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     118:	0d b4       	in	r0, 0x2d	; 45
     11a:	07 fe       	sbrs	r0, 7
     11c:	fd cf       	rjmp	.-6      	; 0x118 <MaxRTDinit+0x28>
	dummy = SPDR;				//just for clearing SPIF
     11e:	9e b5       	in	r25, 0x2e	; 46
	SPDR = dataWrite;
     120:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     122:	0d b4       	in	r0, 0x2d	; 45
     124:	07 fe       	sbrs	r0, 7
     126:	fd cf       	rjmp	.-6      	; 0x122 <MaxRTDinit+0x32>
	dummy = SPDR;
     128:	8e b5       	in	r24, 0x2e	; 46
	
	PORTD |= 0b11110000;		// Set all CS High
     12a:	8b b1       	in	r24, 0x0b	; 11
     12c:	80 6f       	ori	r24, 0xF0	; 240
     12e:	8b b9       	out	0x0b, r24	; 11
     130:	08 95       	ret

00000132 <GenCrc16>:
		idx ++;
	}
}

static inline int GenCrc16(char c[], int nByte)	// CRC-CCITT (XModem)
{
     132:	cf 93       	push	r28
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
     134:	16 16       	cp	r1, r22
     136:	17 06       	cpc	r1, r23
     138:	3c f5       	brge	.+78     	; 0x188 <GenCrc16+0x56>
     13a:	fc 01       	movw	r30, r24
     13c:	68 0f       	add	r22, r24
     13e:	79 1f       	adc	r23, r25
     140:	80 e0       	ldi	r24, 0x00	; 0
     142:	90 e0       	ldi	r25, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
     144:	b8 e0       	ldi	r27, 0x08	; 8
     146:	a0 e0       	ldi	r26, 0x00	; 0
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
     148:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
     14a:	29 2f       	mov	r18, r25
     14c:	33 27       	eor	r19, r19
     14e:	27 fd       	sbrc	r18, 7
     150:	3a 95       	dec	r19
     152:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
     154:	32 2f       	mov	r19, r18
     156:	22 27       	eor	r18, r18
     158:	4b 2f       	mov	r20, r27
     15a:	5a 2f       	mov	r21, r26
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
     15c:	33 23       	and	r19, r19
     15e:	3c f4       	brge	.+14     	; 0x16e <GenCrc16+0x3c>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
     160:	22 0f       	add	r18, r18
     162:	33 1f       	adc	r19, r19
     164:	c1 e2       	ldi	r28, 0x21	; 33
     166:	2c 27       	eor	r18, r28
     168:	c0 e1       	ldi	r28, 0x10	; 16
     16a:	3c 27       	eor	r19, r28
     16c:	02 c0       	rjmp	.+4      	; 0x172 <GenCrc16+0x40>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
     16e:	22 0f       	add	r18, r18
     170:	33 1f       	adc	r19, r19
     172:	41 50       	subi	r20, 0x01	; 1
     174:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
     176:	91 f7       	brne	.-28     	; 0x15c <GenCrc16+0x2a>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
     178:	98 2f       	mov	r25, r24
     17a:	88 27       	eor	r24, r24
     17c:	82 27       	eor	r24, r18
     17e:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
     180:	e6 17       	cp	r30, r22
     182:	f7 07       	cpc	r31, r23
     184:	09 f7       	brne	.-62     	; 0x148 <GenCrc16+0x16>
     186:	02 c0       	rjmp	.+4      	; 0x18c <GenCrc16+0x5a>
{
	int Polynominal = 0x1021;
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
     188:	80 e0       	ldi	r24, 0x00	; 0
     18a:	90 e0       	ldi	r25, 0x00	; 0
		}
		CRC = (int)((CRC << 8) ^ Remainder);
		index++;
	}
	return CRC;
}
     18c:	cf 91       	pop	r28
     18e:	08 95       	ret

00000190 <CrcCompare>:

static inline bool CrcCompare(char *crc_in, char *crc_calc)
{
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
     198:	ec 01       	movw	r28, r24
     19a:	8b 01       	movw	r16, r22
	strupr(crc_in);
     19c:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <strupr>
	strupr(crc_calc);
     1a0:	c8 01       	movw	r24, r16
     1a2:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <strupr>
	
	if(crc_in[0] == '0' && crc_in[1] == '0' && crc_in[2] == '0')
     1a6:	88 81       	ld	r24, Y
     1a8:	80 33       	cpi	r24, 0x30	; 48
     1aa:	19 f5       	brne	.+70     	; 0x1f2 <CrcCompare+0x62>
     1ac:	89 81       	ldd	r24, Y+1	; 0x01
     1ae:	80 33       	cpi	r24, 0x30	; 48
     1b0:	09 f0       	breq	.+2      	; 0x1b4 <CrcCompare+0x24>
     1b2:	41 c0       	rjmp	.+130    	; 0x236 <CrcCompare+0xa6>
     1b4:	8a 81       	ldd	r24, Y+2	; 0x02
     1b6:	80 33       	cpi	r24, 0x30	; 48
     1b8:	b9 f5       	brne	.+110    	; 0x228 <CrcCompare+0x98>
	{
			if(crc_in[3] == crc_calc[0])
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	2b 81       	ldd	r18, Y+3	; 0x03
     1be:	f8 01       	movw	r30, r16
     1c0:	90 81       	ld	r25, Z
     1c2:	29 17       	cp	r18, r25
     1c4:	e9 f1       	breq	.+122    	; 0x240 <CrcCompare+0xb0>
     1c6:	80 e0       	ldi	r24, 0x00	; 0
     1c8:	3b c0       	rjmp	.+118    	; 0x240 <CrcCompare+0xb0>
			}
	}

	if(crc_in[0] == '0' && crc_in[1] == '0')
	{
		if((crc_in[2] == crc_calc[0]) && (crc_in[3] == crc_calc[1]))
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	2b 81       	ldd	r18, Y+3	; 0x03
     1ce:	f8 01       	movw	r30, r16
     1d0:	91 81       	ldd	r25, Z+1	; 0x01
     1d2:	29 17       	cp	r18, r25
     1d4:	a9 f1       	breq	.+106    	; 0x240 <CrcCompare+0xb0>
     1d6:	80 e0       	ldi	r24, 0x00	; 0
     1d8:	33 c0       	rjmp	.+102    	; 0x240 <CrcCompare+0xb0>
		}
	}
	
	if(crc_in[0] == '0')
	{
		if((crc_in[1] == crc_calc[0]) && (crc_in[2] == crc_calc[1]) &&
     1da:	9a 81       	ldd	r25, Y+2	; 0x02
     1dc:	f8 01       	movw	r30, r16
     1de:	81 81       	ldd	r24, Z+1	; 0x01
     1e0:	98 13       	cpse	r25, r24
     1e2:	1a c0       	rjmp	.+52     	; 0x218 <CrcCompare+0x88>
     1e4:	81 e0       	ldi	r24, 0x01	; 1
     1e6:	2b 81       	ldd	r18, Y+3	; 0x03
     1e8:	92 81       	ldd	r25, Z+2	; 0x02
     1ea:	29 17       	cp	r18, r25
     1ec:	49 f1       	breq	.+82     	; 0x240 <CrcCompare+0xb0>
     1ee:	80 e0       	ldi	r24, 0x00	; 0
     1f0:	27 c0       	rjmp	.+78     	; 0x240 <CrcCompare+0xb0>
			return false;
		}
	}	
	else
	{
		if((crc_in[0] == crc_calc[0]) && (crc_in[1] == crc_calc[1]) &&
     1f2:	f8 01       	movw	r30, r16
     1f4:	90 81       	ld	r25, Z
     1f6:	89 13       	cpse	r24, r25
     1f8:	11 c0       	rjmp	.+34     	; 0x21c <CrcCompare+0x8c>
     1fa:	99 81       	ldd	r25, Y+1	; 0x01
     1fc:	81 81       	ldd	r24, Z+1	; 0x01
     1fe:	98 13       	cpse	r25, r24
     200:	0f c0       	rjmp	.+30     	; 0x220 <CrcCompare+0x90>
     202:	9a 81       	ldd	r25, Y+2	; 0x02
     204:	82 81       	ldd	r24, Z+2	; 0x02
     206:	98 13       	cpse	r25, r24
     208:	0d c0       	rjmp	.+26     	; 0x224 <CrcCompare+0x94>
			(crc_in[2] == crc_calc[2]) && (crc_in[3] == crc_calc[3]))
     20a:	81 e0       	ldi	r24, 0x01	; 1
     20c:	2b 81       	ldd	r18, Y+3	; 0x03
     20e:	93 81       	ldd	r25, Z+3	; 0x03
     210:	29 17       	cp	r18, r25
     212:	b1 f0       	breq	.+44     	; 0x240 <CrcCompare+0xb0>
     214:	80 e0       	ldi	r24, 0x00	; 0
     216:	14 c0       	rjmp	.+40     	; 0x240 <CrcCompare+0xb0>
		{
			return true;
		}
		else
		{
			return false;
     218:	80 e0       	ldi	r24, 0x00	; 0
     21a:	12 c0       	rjmp	.+36     	; 0x240 <CrcCompare+0xb0>
			{
				return true;
			}
			else
			{
				return false;
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	10 c0       	rjmp	.+32     	; 0x240 <CrcCompare+0xb0>
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	0e c0       	rjmp	.+28     	; 0x240 <CrcCompare+0xb0>
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	0c c0       	rjmp	.+24     	; 0x240 <CrcCompare+0xb0>
			}
	}

	if(crc_in[0] == '0' && crc_in[1] == '0')
	{
		if((crc_in[2] == crc_calc[0]) && (crc_in[3] == crc_calc[1]))
     228:	9a 81       	ldd	r25, Y+2	; 0x02
     22a:	f8 01       	movw	r30, r16
     22c:	80 81       	ld	r24, Z
     22e:	98 17       	cp	r25, r24
     230:	61 f2       	breq	.-104    	; 0x1ca <CrcCompare+0x3a>
		{
			return true;
		}
		else
		{
			return false;
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	05 c0       	rjmp	.+10     	; 0x240 <CrcCompare+0xb0>
		}
	}
	
	if(crc_in[0] == '0')
	{
		if((crc_in[1] == crc_calc[0]) && (crc_in[2] == crc_calc[1]) &&
     236:	f8 01       	movw	r30, r16
     238:	90 81       	ld	r25, Z
     23a:	89 17       	cp	r24, r25
     23c:	71 f2       	breq	.-100    	; 0x1da <CrcCompare+0x4a>
		{
			return true;
		}
		else
		{
			return false;
     23e:	80 e0       	ldi	r24, 0x00	; 0
			else
			{
				return false;
			}
	}
}
     240:	df 91       	pop	r29
     242:	cf 91       	pop	r28
     244:	1f 91       	pop	r17
     246:	0f 91       	pop	r16
     248:	08 95       	ret

0000024a <printStatus>:
	
	PORTD |= 0b11110000;		// Set all CS High
}

static inline void printStatus (char msg_string[])	// Send string on UART
{
     24a:	cf 92       	push	r12
     24c:	df 92       	push	r13
     24e:	ef 92       	push	r14
     250:	ff 92       	push	r15
     252:	0f 93       	push	r16
     254:	1f 93       	push	r17
     256:	cf 93       	push	r28
     258:	df 93       	push	r29
     25a:	cd b7       	in	r28, 0x3d	; 61
     25c:	de b7       	in	r29, 0x3e	; 62
     25e:	a8 97       	sbiw	r28, 0x28	; 40
     260:	0f b6       	in	r0, 0x3f	; 63
     262:	f8 94       	cli
     264:	de bf       	out	0x3e, r29	; 62
     266:	0f be       	out	0x3f, r0	; 63
     268:	cd bf       	out	0x3d, r28	; 61
     26a:	fc 01       	movw	r30, r24
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
     26c:	81 e2       	ldi	r24, 0x21	; 33
     26e:	89 83       	std	Y+1, r24	; 0x01
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
     270:	a9 e3       	ldi	r26, 0x39	; 57
     272:	b5 e0       	ldi	r27, 0x05	; 5
     274:	11 96       	adiw	r26, 0x01	; 1
     276:	8c 91       	ld	r24, X
     278:	11 97       	sbiw	r26, 0x01	; 1
     27a:	8a 83       	std	Y+2, r24	; 0x02
     27c:	12 96       	adiw	r26, 0x02	; 2
     27e:	8c 91       	ld	r24, X
     280:	12 97       	sbiw	r26, 0x02	; 2
     282:	8b 83       	std	Y+3, r24	; 0x03
     284:	13 96       	adiw	r26, 0x03	; 3
     286:	8c 91       	ld	r24, X
     288:	8c 83       	std	Y+4, r24	; 0x04
     28a:	cf 01       	movw	r24, r30
     28c:	ae 01       	movw	r20, r28
     28e:	4b 5f       	subi	r20, 0xFB	; 251
     290:	5f 4f       	sbci	r21, 0xFF	; 255
     292:	00 e0       	ldi	r16, 0x00	; 0
     294:	10 e0       	ldi	r17, 0x00	; 0
     296:	08 c0       	rjmp	.+16     	; 0x2a8 <printStatus+0x5e>
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
     298:	dc 01       	movw	r26, r24
     29a:	2d 91       	ld	r18, X+
     29c:	cd 01       	movw	r24, r26
     29e:	da 01       	movw	r26, r20
     2a0:	2d 93       	st	X+, r18
     2a2:	ad 01       	movw	r20, r26
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
     2a4:	0f 5f       	subi	r16, 0xFF	; 255
     2a6:	1f 4f       	sbci	r17, 0xFF	; 255
     2a8:	df 01       	movw	r26, r30
     2aa:	0d 90       	ld	r0, X+
     2ac:	00 20       	and	r0, r0
     2ae:	e9 f7       	brne	.-6      	; 0x2aa <printStatus+0x60>
     2b0:	9d 01       	movw	r18, r26
     2b2:	2e 1b       	sub	r18, r30
     2b4:	3f 0b       	sbc	r19, r31
     2b6:	2e 5f       	subi	r18, 0xFE	; 254
     2b8:	3f 4f       	sbci	r19, 0xFF	; 255
     2ba:	02 17       	cp	r16, r18
     2bc:	13 07       	cpc	r17, r19
     2be:	60 f3       	brcs	.-40     	; 0x298 <printStatus+0x4e>
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
     2c0:	78 01       	movw	r14, r16
     2c2:	bf ef       	ldi	r27, 0xFF	; 255
     2c4:	eb 1a       	sub	r14, r27
     2c6:	fb 0a       	sbc	r15, r27
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
     2c8:	1e 14       	cp	r1, r14
     2ca:	1f 04       	cpc	r1, r15
     2cc:	0c f0       	brlt	.+2      	; 0x2d0 <printStatus+0x86>
     2ce:	d7 c0       	rjmp	.+430    	; 0x47e <printStatus+0x234>
     2d0:	fe 01       	movw	r30, r28
     2d2:	31 96       	adiw	r30, 0x01	; 1
     2d4:	a7 01       	movw	r20, r14
     2d6:	4e 0f       	add	r20, r30
     2d8:	5f 1f       	adc	r21, r31
     2da:	80 e0       	ldi	r24, 0x00	; 0
     2dc:	90 e0       	ldi	r25, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
     2de:	b8 e0       	ldi	r27, 0x08	; 8
     2e0:	d1 2c       	mov	r13, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
     2e2:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
     2e4:	29 2f       	mov	r18, r25
     2e6:	33 27       	eor	r19, r19
     2e8:	27 fd       	sbrc	r18, 7
     2ea:	3a 95       	dec	r19
     2ec:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
     2ee:	32 2f       	mov	r19, r18
     2f0:	22 27       	eor	r18, r18
     2f2:	6b 2f       	mov	r22, r27
     2f4:	7d 2d       	mov	r23, r13
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
     2f6:	33 23       	and	r19, r19
     2f8:	3c f4       	brge	.+14     	; 0x308 <printStatus+0xbe>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
     2fa:	22 0f       	add	r18, r18
     2fc:	33 1f       	adc	r19, r19
     2fe:	a1 e2       	ldi	r26, 0x21	; 33
     300:	2a 27       	eor	r18, r26
     302:	a0 e1       	ldi	r26, 0x10	; 16
     304:	3a 27       	eor	r19, r26
     306:	02 c0       	rjmp	.+4      	; 0x30c <printStatus+0xc2>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
     308:	22 0f       	add	r18, r18
     30a:	33 1f       	adc	r19, r19
     30c:	61 50       	subi	r22, 0x01	; 1
     30e:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
     310:	91 f7       	brne	.-28     	; 0x2f6 <printStatus+0xac>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
     312:	98 2f       	mov	r25, r24
     314:	88 27       	eor	r24, r24
     316:	82 27       	eor	r24, r18
     318:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
     31a:	e4 17       	cp	r30, r20
     31c:	f5 07       	cpc	r31, r21
     31e:	09 f7       	brne	.-62     	; 0x2e2 <printStatus+0x98>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
     320:	6c 01       	movw	r12, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     322:	40 e1       	ldi	r20, 0x10	; 16
     324:	6f e2       	ldi	r22, 0x2F	; 47
     326:	75 e0       	ldi	r23, 0x05	; 5
     328:	0e 94 04 3b 	call	0x7608	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
     32c:	8f e2       	ldi	r24, 0x2F	; 47
     32e:	95 e0       	ldi	r25, 0x05	; 5
     330:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <strupr>
	if(crcXmodem < 0x10)
     334:	b0 e1       	ldi	r27, 0x10	; 16
     336:	cb 16       	cp	r12, r27
     338:	d1 04       	cpc	r13, r1
     33a:	98 f4       	brcc	.+38     	; 0x362 <printStatus+0x118>
	{
		tx_string[cnt+4] = crc[0];
     33c:	80 91 2f 05 	lds	r24, 0x052F
     340:	fe 01       	movw	r30, r28
     342:	e0 0f       	add	r30, r16
     344:	f1 1f       	adc	r31, r17
     346:	85 83       	std	Z+5, r24	; 0x05
		tx_string[cnt+3] = '0';
     348:	80 e3       	ldi	r24, 0x30	; 48
     34a:	fe 01       	movw	r30, r28
     34c:	e0 0f       	add	r30, r16
     34e:	f1 1f       	adc	r31, r17
     350:	84 83       	std	Z+4, r24	; 0x04
		tx_string[cnt+2] = '0';
     352:	fe 01       	movw	r30, r28
     354:	e0 0f       	add	r30, r16
     356:	f1 1f       	adc	r31, r17
     358:	83 83       	std	Z+3, r24	; 0x03
		tx_string[cnt+1] = '0';
     35a:	fe 01       	movw	r30, r28
     35c:	ee 0d       	add	r30, r14
     35e:	ff 1d       	adc	r31, r15
     360:	81 83       	std	Z+1, r24	; 0x01
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
     362:	c6 01       	movw	r24, r12
     364:	40 97       	sbiw	r24, 0x10	; 16
     366:	80 3f       	cpi	r24, 0xF0	; 240
     368:	91 05       	cpc	r25, r1
     36a:	b8 f4       	brcc	.+46     	; 0x39a <printStatus+0x150>
	{
		tx_string[cnt+4] = crc[1];
     36c:	af e2       	ldi	r26, 0x2F	; 47
     36e:	b5 e0       	ldi	r27, 0x05	; 5
     370:	11 96       	adiw	r26, 0x01	; 1
     372:	8c 91       	ld	r24, X
     374:	11 97       	sbiw	r26, 0x01	; 1
     376:	fe 01       	movw	r30, r28
     378:	e0 0f       	add	r30, r16
     37a:	f1 1f       	adc	r31, r17
     37c:	85 83       	std	Z+5, r24	; 0x05
		tx_string[cnt+3] = crc[0];
     37e:	8c 91       	ld	r24, X
     380:	fe 01       	movw	r30, r28
     382:	e0 0f       	add	r30, r16
     384:	f1 1f       	adc	r31, r17
     386:	84 83       	std	Z+4, r24	; 0x04
		tx_string[cnt+2] = '0';
     388:	80 e3       	ldi	r24, 0x30	; 48
     38a:	fe 01       	movw	r30, r28
     38c:	e0 0f       	add	r30, r16
     38e:	f1 1f       	adc	r31, r17
     390:	83 83       	std	Z+3, r24	; 0x03
		tx_string[cnt+1] = '0';		
     392:	fe 01       	movw	r30, r28
     394:	ee 0d       	add	r30, r14
     396:	ff 1d       	adc	r31, r15
     398:	81 83       	std	Z+1, r24	; 0x01
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
     39a:	c6 01       	movw	r24, r12
     39c:	9a 95       	dec	r25
     39e:	81 15       	cp	r24, r1
     3a0:	9f 40       	sbci	r25, 0x0F	; 15
     3a2:	b8 f4       	brcc	.+46     	; 0x3d2 <printStatus+0x188>
	{
		tx_string[cnt+4] = crc[2];
     3a4:	ef e2       	ldi	r30, 0x2F	; 47
     3a6:	f5 e0       	ldi	r31, 0x05	; 5
     3a8:	82 81       	ldd	r24, Z+2	; 0x02
     3aa:	de 01       	movw	r26, r28
     3ac:	a0 0f       	add	r26, r16
     3ae:	b1 1f       	adc	r27, r17
     3b0:	15 96       	adiw	r26, 0x05	; 5
     3b2:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[1];
     3b4:	81 81       	ldd	r24, Z+1	; 0x01
     3b6:	de 01       	movw	r26, r28
     3b8:	a0 0f       	add	r26, r16
     3ba:	b1 1f       	adc	r27, r17
     3bc:	14 96       	adiw	r26, 0x04	; 4
     3be:	8c 93       	st	X, r24
     3c0:	14 97       	sbiw	r26, 0x04	; 4
		tx_string[cnt+2] = crc[0];
     3c2:	80 81       	ld	r24, Z
     3c4:	fd 01       	movw	r30, r26
     3c6:	83 83       	std	Z+3, r24	; 0x03
		tx_string[cnt+1] = '0';		
     3c8:	80 e3       	ldi	r24, 0x30	; 48
     3ca:	fe 01       	movw	r30, r28
     3cc:	ee 0d       	add	r30, r14
     3ce:	ff 1d       	adc	r31, r15
     3d0:	81 83       	std	Z+1, r24	; 0x01
	}
	if(crcXmodem >= 0x1000)
     3d2:	c1 14       	cp	r12, r1
     3d4:	80 e1       	ldi	r24, 0x10	; 16
     3d6:	d8 06       	cpc	r13, r24
     3d8:	c0 f0       	brcs	.+48     	; 0x40a <printStatus+0x1c0>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
     3da:	de 01       	movw	r26, r28
     3dc:	ae 0d       	add	r26, r14
     3de:	bf 1d       	adc	r27, r15
     3e0:	ef e2       	ldi	r30, 0x2F	; 47
     3e2:	f5 e0       	ldi	r31, 0x05	; 5
     3e4:	80 81       	ld	r24, Z
     3e6:	11 96       	adiw	r26, 0x01	; 1
     3e8:	8c 93       	st	X, r24
		tx_string[cnt+2] = crc[1];
     3ea:	81 81       	ldd	r24, Z+1	; 0x01
     3ec:	de 01       	movw	r26, r28
     3ee:	a0 0f       	add	r26, r16
     3f0:	b1 1f       	adc	r27, r17
     3f2:	13 96       	adiw	r26, 0x03	; 3
     3f4:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[2];
     3f6:	82 81       	ldd	r24, Z+2	; 0x02
     3f8:	de 01       	movw	r26, r28
     3fa:	a0 0f       	add	r26, r16
     3fc:	b1 1f       	adc	r27, r17
     3fe:	14 96       	adiw	r26, 0x04	; 4
     400:	8c 93       	st	X, r24
     402:	14 97       	sbiw	r26, 0x04	; 4
		tx_string[cnt+4] = crc[3];
     404:	83 81       	ldd	r24, Z+3	; 0x03
     406:	fd 01       	movw	r30, r26
     408:	85 83       	std	Z+5, r24	; 0x05
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
     40a:	c8 01       	movw	r24, r16
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	fe 01       	movw	r30, r28
     410:	e8 0f       	add	r30, r24
     412:	f9 1f       	adc	r31, r25
     414:	2d e0       	ldi	r18, 0x0D	; 13
     416:	21 83       	std	Z+1, r18	; 0x01
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
     418:	99 23       	and	r25, r25
     41a:	0c f4       	brge	.+2      	; 0x41e <printStatus+0x1d4>
     41c:	3e c0       	rjmp	.+124    	; 0x49a <printStatus+0x250>
     41e:	ae 01       	movw	r20, r28
     420:	4f 5f       	subi	r20, 0xFF	; 255
     422:	5f 4f       	sbci	r21, 0xFF	; 255
     424:	0a 5f       	subi	r16, 0xFA	; 250
     426:	1f 4f       	sbci	r17, 0xFF	; 255
     428:	04 0f       	add	r16, r20
     42a:	15 1f       	adc	r17, r21
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
     42c:	e7 e5       	ldi	r30, 0x57	; 87
     42e:	f5 e0       	ldi	r31, 0x05	; 5
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
     430:	61 ec       	ldi	r22, 0xC1	; 193
     432:	70 e0       	ldi	r23, 0x00	; 0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     434:	30 e0       	ldi	r19, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
     436:	da 01       	movw	r26, r20
     438:	8d 91       	ld	r24, X+
     43a:	ad 01       	movw	r20, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
     43c:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
     43e:	21 81       	ldd	r18, Z+1	; 0x01
     440:	90 81       	ld	r25, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
     442:	29 13       	cpse	r18, r25
     444:	04 c0       	rjmp	.+8      	; 0x44e <printStatus+0x204>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
     446:	db 01       	movw	r26, r22
     448:	9c 91       	ld	r25, X
     44a:	90 62       	ori	r25, 0x20	; 32
     44c:	9c 93       	st	X, r25
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
     44e:	90 81       	ld	r25, Z
     450:	a3 81       	ldd	r26, Z+3	; 0x03
     452:	b4 81       	ldd	r27, Z+4	; 0x04
     454:	a9 0f       	add	r26, r25
     456:	b1 1d       	adc	r27, r1
     458:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
     45a:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     45c:	a2 2f       	mov	r26, r18
     45e:	b0 e0       	ldi	r27, 0x00	; 0
     460:	82 81       	ldd	r24, Z+2	; 0x02
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	01 97       	sbiw	r24, 0x01	; 1
     466:	a8 17       	cp	r26, r24
     468:	b9 07       	cpc	r27, r25
     46a:	11 f0       	breq	.+4      	; 0x470 <printStatus+0x226>
     46c:	2f 5f       	subi	r18, 0xFF	; 255
     46e:	01 c0       	rjmp	.+2      	; 0x472 <printStatus+0x228>
     470:	23 2f       	mov	r18, r19
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
     472:	20 83       	st	Z, r18
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
     474:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
     476:	40 17       	cp	r20, r16
     478:	51 07       	cpc	r21, r17
     47a:	e9 f6       	brne	.-70     	; 0x436 <printStatus+0x1ec>
     47c:	0e c0       	rjmp	.+28     	; 0x49a <printStatus+0x250>
     47e:	40 e1       	ldi	r20, 0x10	; 16
     480:	6f e2       	ldi	r22, 0x2F	; 47
     482:	75 e0       	ldi	r23, 0x05	; 5
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	0e 94 04 3b 	call	0x7608	; 0x7608 <__itoa_ncheck>
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
     48c:	8f e2       	ldi	r24, 0x2F	; 47
     48e:	95 e0       	ldi	r25, 0x05	; 5
     490:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <strupr>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
     494:	c1 2c       	mov	r12, r1
     496:	d1 2c       	mov	r13, r1
     498:	51 cf       	rjmp	.-350    	; 0x33c <printStatus+0xf2>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
	}	
}
     49a:	a8 96       	adiw	r28, 0x28	; 40
     49c:	0f b6       	in	r0, 0x3f	; 63
     49e:	f8 94       	cli
     4a0:	de bf       	out	0x3e, r29	; 62
     4a2:	0f be       	out	0x3f, r0	; 63
     4a4:	cd bf       	out	0x3d, r28	; 61
     4a6:	df 91       	pop	r29
     4a8:	cf 91       	pop	r28
     4aa:	1f 91       	pop	r17
     4ac:	0f 91       	pop	r16
     4ae:	ff 90       	pop	r15
     4b0:	ef 90       	pop	r14
     4b2:	df 90       	pop	r13
     4b4:	cf 90       	pop	r12
     4b6:	08 95       	ret

000004b8 <SetParameter>:
		printStatus("VRerror");
	}
}

static inline void SetParameter(int id)
{
     4b8:	8f 92       	push	r8
     4ba:	9f 92       	push	r9
     4bc:	af 92       	push	r10
     4be:	bf 92       	push	r11
     4c0:	cf 92       	push	r12
     4c2:	df 92       	push	r13
     4c4:	ef 92       	push	r14
     4c6:	ff 92       	push	r15
     4c8:	0f 93       	push	r16
     4ca:	1f 93       	push	r17
     4cc:	cf 93       	push	r28
     4ce:	df 93       	push	r29
     4d0:	cd b7       	in	r28, 0x3d	; 61
     4d2:	de b7       	in	r29, 0x3e	; 62
     4d4:	ec 97       	sbiw	r28, 0x3c	; 60
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	f8 94       	cli
     4da:	de bf       	out	0x3e, r29	; 62
     4dc:	0f be       	out	0x3f, r0	; 63
     4de:	cd bf       	out	0x3d, r28	; 61
	char param[param_size];
	
	switch(id)
     4e0:	80 36       	cpi	r24, 0x60	; 96
     4e2:	21 e0       	ldi	r18, 0x01	; 1
     4e4:	92 07       	cpc	r25, r18
     4e6:	11 f4       	brne	.+4      	; 0x4ec <SetParameter+0x34>
     4e8:	0c 94 9a 0b 	jmp	0x1734	; 0x1734 <__stack+0xe35>
     4ec:	0c f0       	brlt	.+2      	; 0x4f0 <SetParameter+0x38>
     4ee:	45 c0       	rjmp	.+138    	; 0x57a <SetParameter+0xc2>
     4f0:	8a 3f       	cpi	r24, 0xFA	; 250
     4f2:	91 05       	cpc	r25, r1
     4f4:	09 f4       	brne	.+2      	; 0x4f8 <SetParameter+0x40>
     4f6:	e1 c6       	rjmp	.+3522   	; 0x12ba <__stack+0x9bb>
     4f8:	ec f4       	brge	.+58     	; 0x534 <SetParameter+0x7c>
     4fa:	89 39       	cpi	r24, 0x99	; 153
     4fc:	91 05       	cpc	r25, r1
     4fe:	09 f4       	brne	.+2      	; 0x502 <SetParameter+0x4a>
     500:	0a c3       	rjmp	.+1556   	; 0xb16 <__stack+0x217>
     502:	64 f4       	brge	.+24     	; 0x51c <SetParameter+0x64>
     504:	87 39       	cpi	r24, 0x97	; 151
     506:	91 05       	cpc	r25, r1
     508:	09 f4       	brne	.+2      	; 0x50c <SetParameter+0x54>
     50a:	63 c1       	rjmp	.+710    	; 0x7d2 <SetParameter+0x31a>
     50c:	0c f0       	brlt	.+2      	; 0x510 <SetParameter+0x58>
     50e:	32 c2       	rjmp	.+1124   	; 0x974 <__stack+0x75>
     510:	86 39       	cpi	r24, 0x96	; 150
     512:	91 05       	cpc	r25, r1
     514:	09 f4       	brne	.+2      	; 0x518 <SetParameter+0x60>
     516:	8c c0       	rjmp	.+280    	; 0x630 <SetParameter+0x178>
     518:	0c 94 bd 13 	jmp	0x277a	; 0x277a <__stack+0x1e7b>
     51c:	8b 39       	cpi	r24, 0x9B	; 155
     51e:	91 05       	cpc	r25, r1
     520:	09 f4       	brne	.+2      	; 0x524 <SetParameter+0x6c>
     522:	2d c5       	rjmp	.+2650   	; 0xf7e <__stack+0x67f>
     524:	0c f4       	brge	.+2      	; 0x528 <SetParameter+0x70>
     526:	c8 c3       	rjmp	.+1936   	; 0xcb8 <__stack+0x3b9>
     528:	8c 39       	cpi	r24, 0x9C	; 156
     52a:	91 05       	cpc	r25, r1
     52c:	09 f4       	brne	.+2      	; 0x530 <SetParameter+0x78>
     52e:	f8 c5       	rjmp	.+3056   	; 0x1120 <__stack+0x821>
     530:	0c 94 bd 13 	jmp	0x277a	; 0x277a <__stack+0x1e7b>
     534:	8e 3f       	cpi	r24, 0xFE	; 254
     536:	91 05       	cpc	r25, r1
     538:	11 f4       	brne	.+4      	; 0x53e <SetParameter+0x86>
     53a:	0c 94 c1 0a 	jmp	0x1582	; 0x1582 <__stack+0xc83>
     53e:	3c f4       	brge	.+14     	; 0x54e <SetParameter+0x96>
     540:	8c 3f       	cpi	r24, 0xFC	; 252
     542:	91 05       	cpc	r25, r1
     544:	09 f4       	brne	.+2      	; 0x548 <SetParameter+0x90>
     546:	bb c7       	rjmp	.+3958   	; 0x14be <__stack+0xbbf>
     548:	0c f4       	brge	.+2      	; 0x54c <SetParameter+0x94>
     54a:	88 c7       	rjmp	.+3856   	; 0x145c <__stack+0xb5d>
     54c:	e9 c7       	rjmp	.+4050   	; 0x1520 <__stack+0xc21>
     54e:	81 15       	cp	r24, r1
     550:	a1 e0       	ldi	r26, 0x01	; 1
     552:	9a 07       	cpc	r25, r26
     554:	11 f4       	brne	.+4      	; 0x55a <SetParameter+0xa2>
     556:	0c 94 0b 0b 	jmp	0x1616	; 0x1616 <__stack+0xd17>
     55a:	14 f4       	brge	.+4      	; 0x560 <SetParameter+0xa8>
     55c:	0c 94 da 0a 	jmp	0x15b4	; 0x15b4 <__stack+0xcb5>
     560:	8e 35       	cpi	r24, 0x5E	; 94
     562:	e1 e0       	ldi	r30, 0x01	; 1
     564:	9e 07       	cpc	r25, r30
     566:	11 f4       	brne	.+4      	; 0x56c <SetParameter+0xb4>
     568:	0c 94 38 0b 	jmp	0x1670	; 0x1670 <__stack+0xd71>
     56c:	8f 35       	cpi	r24, 0x5F	; 95
     56e:	91 40       	sbci	r25, 0x01	; 1
     570:	11 f4       	brne	.+4      	; 0x576 <SetParameter+0xbe>
     572:	0c 94 69 0b 	jmp	0x16d2	; 0x16d2 <__stack+0xdd3>
     576:	0c 94 bd 13 	jmp	0x277a	; 0x277a <__stack+0x1e7b>
     57a:	85 3c       	cpi	r24, 0xC5	; 197
     57c:	21 e0       	ldi	r18, 0x01	; 1
     57e:	92 07       	cpc	r25, r18
     580:	11 f4       	brne	.+4      	; 0x586 <SetParameter+0xce>
     582:	0c 94 fd 0c 	jmp	0x19fa	; 0x19fa <__stack+0x10fb>
     586:	14 f5       	brge	.+68     	; 0x5cc <SetParameter+0x114>
     588:	84 36       	cpi	r24, 0x64	; 100
     58a:	a1 e0       	ldi	r26, 0x01	; 1
     58c:	9a 07       	cpc	r25, r26
     58e:	11 f4       	brne	.+4      	; 0x594 <SetParameter+0xdc>
     590:	0c 94 41 0c 	jmp	0x1882	; 0x1882 <__stack+0xf83>
     594:	5c f4       	brge	.+22     	; 0x5ac <SetParameter+0xf4>
     596:	82 36       	cpi	r24, 0x62	; 98
     598:	e1 e0       	ldi	r30, 0x01	; 1
     59a:	9e 07       	cpc	r25, r30
     59c:	11 f4       	brne	.+4      	; 0x5a2 <SetParameter+0xea>
     59e:	0c 94 fb 0b 	jmp	0x17f6	; 0x17f6 <__stack+0xef7>
     5a2:	14 f4       	brge	.+4      	; 0x5a8 <SetParameter+0xf0>
     5a4:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <__stack+0xe97>
     5a8:	0c 94 11 0c 	jmp	0x1822	; 0x1822 <__stack+0xf23>
     5ac:	83 3c       	cpi	r24, 0xC3	; 195
     5ae:	21 e0       	ldi	r18, 0x01	; 1
     5b0:	92 07       	cpc	r25, r18
     5b2:	11 f4       	brne	.+4      	; 0x5b8 <SetParameter+0x100>
     5b4:	0c 94 9d 0c 	jmp	0x193a	; 0x193a <__stack+0x103b>
     5b8:	14 f0       	brlt	.+4      	; 0x5be <SetParameter+0x106>
     5ba:	0c 94 cd 0c 	jmp	0x199a	; 0x199a <__stack+0x109b>
     5be:	82 3c       	cpi	r24, 0xC2	; 194
     5c0:	91 40       	sbci	r25, 0x01	; 1
     5c2:	11 f4       	brne	.+4      	; 0x5c8 <SetParameter+0x110>
     5c4:	0c 94 6d 0c 	jmp	0x18da	; 0x18da <__stack+0xfdb>
     5c8:	0c 94 bd 13 	jmp	0x277a	; 0x277a <__stack+0x1e7b>
     5cc:	84 3f       	cpi	r24, 0xF4	; 244
     5ce:	b1 e0       	ldi	r27, 0x01	; 1
     5d0:	9b 07       	cpc	r25, r27
     5d2:	11 f4       	brne	.+4      	; 0x5d8 <SetParameter+0x120>
     5d4:	0c 94 24 10 	jmp	0x2048	; 0x2048 <__stack+0x1749>
     5d8:	84 f4       	brge	.+32     	; 0x5fa <SetParameter+0x142>
     5da:	87 3c       	cpi	r24, 0xC7	; 199
     5dc:	f1 e0       	ldi	r31, 0x01	; 1
     5de:	9f 07       	cpc	r25, r31
     5e0:	11 f4       	brne	.+4      	; 0x5e6 <SetParameter+0x12e>
     5e2:	0c 94 88 0e 	jmp	0x1d10	; 0x1d10 <__stack+0x1411>
     5e6:	14 f4       	brge	.+4      	; 0x5ec <SetParameter+0x134>
     5e8:	0c 94 cd 0d 	jmp	0x1b9a	; 0x1b9a <__stack+0x129b>
     5ec:	88 3c       	cpi	r24, 0xC8	; 200
     5ee:	91 40       	sbci	r25, 0x01	; 1
     5f0:	11 f4       	brne	.+4      	; 0x5f6 <SetParameter+0x13e>
     5f2:	0c 94 58 0f 	jmp	0x1eb0	; 0x1eb0 <__stack+0x15b1>
     5f6:	0c 94 bd 13 	jmp	0x277a	; 0x277a <__stack+0x1e7b>
     5fa:	89 35       	cpi	r24, 0x59	; 89
     5fc:	a2 e0       	ldi	r26, 0x02	; 2
     5fe:	9a 07       	cpc	r25, r26
     600:	11 f4       	brne	.+4      	; 0x606 <SetParameter+0x14e>
     602:	0c 94 16 12 	jmp	0x242c	; 0x242c <__stack+0x1b2d>
     606:	3c f4       	brge	.+14     	; 0x616 <SetParameter+0x15e>
     608:	88 35       	cpi	r24, 0x58	; 88
     60a:	92 40       	sbci	r25, 0x02	; 2
     60c:	11 f4       	brne	.+4      	; 0x612 <SetParameter+0x15a>
     60e:	0c 94 21 11 	jmp	0x2242	; 0x2242 <__stack+0x1943>
     612:	0c 94 bd 13 	jmp	0x277a	; 0x277a <__stack+0x1e7b>
     616:	8a 35       	cpi	r24, 0x5A	; 90
     618:	f2 e0       	ldi	r31, 0x02	; 2
     61a:	9f 07       	cpc	r25, r31
     61c:	11 f4       	brne	.+4      	; 0x622 <SetParameter+0x16a>
     61e:	0c 94 42 12 	jmp	0x2484	; 0x2484 <__stack+0x1b85>
     622:	8b 35       	cpi	r24, 0x5B	; 91
     624:	92 40       	sbci	r25, 0x02	; 2
     626:	11 f4       	brne	.+4      	; 0x62c <SetParameter+0x174>
     628:	0c 94 9e 12 	jmp	0x253c	; 0x253c <__stack+0x1c3d>
     62c:	0c 94 bd 13 	jmp	0x277a	; 0x277a <__stack+0x1e7b>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
     630:	6e e1       	ldi	r22, 0x1E	; 30
     632:	70 e0       	ldi	r23, 0x00	; 0
     634:	89 e3       	ldi	r24, 0x39	; 57
     636:	95 e0       	ldi	r25, 0x05	; 5
     638:	0e 94 ef 3a 	call	0x75de	; 0x75de <strnlen>
     63c:	05 97       	sbiw	r24, 0x05	; 5
     63e:	ac 01       	movw	r20, r24
     640:	de 01       	movw	r26, r28
     642:	11 96       	adiw	r26, 0x01	; 1
     644:	9e 01       	movw	r18, r28
     646:	2b 5e       	subi	r18, 0xEB	; 235
     648:	3f 4f       	sbci	r19, 0xFF	; 255
     64a:	fd 01       	movw	r30, r26
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
     64c:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
     64e:	e2 17       	cp	r30, r18
     650:	f3 07       	cpc	r31, r19
     652:	e1 f7       	brne	.-8      	; 0x64c <SetParameter+0x194>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
     654:	4b 30       	cpi	r20, 0x0B	; 11
     656:	51 05       	cpc	r21, r1
     658:	54 f0       	brlt	.+20     	; 0x66e <SetParameter+0x1b6>
     65a:	e3 e4       	ldi	r30, 0x43	; 67
     65c:	f5 e0       	ldi	r31, 0x05	; 5
     65e:	9c 01       	movw	r18, r24
     660:	27 5c       	subi	r18, 0xC7	; 199
     662:	3a 4f       	sbci	r19, 0xFA	; 250
	{
		param[idx] = stringToParse[i];
     664:	91 91       	ld	r25, Z+
     666:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
     668:	e2 17       	cp	r30, r18
     66a:	f3 07       	cpc	r31, r19
     66c:	d9 f7       	brne	.-10     	; 0x664 <SetParameter+0x1ac>
	switch(id)
	{
		// *** Channel 0 ***
		case 150:	// ch0.TempSetPoint
		ParamParse(rx_string, param);
		ch0.TempSetPoint = atof(param);
     66e:	ce 01       	movw	r24, r28
     670:	01 96       	adiw	r24, 0x01	; 1
     672:	0e 94 8a 3a 	call	0x7514	; 0x7514 <atof>
     676:	60 93 c6 02 	sts	0x02C6, r22
     67a:	70 93 c7 02 	sts	0x02C7, r23
     67e:	80 93 c8 02 	sts	0x02C8, r24
     682:	90 93 c9 02 	sts	0x02C9, r25
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
     686:	81 e2       	ldi	r24, 0x21	; 33
     688:	8d 8b       	std	Y+21, r24	; 0x15
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
     68a:	e9 e3       	ldi	r30, 0x39	; 57
     68c:	f5 e0       	ldi	r31, 0x05	; 5
     68e:	81 81       	ldd	r24, Z+1	; 0x01
     690:	8e 8b       	std	Y+22, r24	; 0x16
     692:	82 81       	ldd	r24, Z+2	; 0x02
     694:	8f 8b       	std	Y+23, r24	; 0x17
     696:	83 81       	ldd	r24, Z+3	; 0x03
     698:	88 8f       	std	Y+24, r24	; 0x18
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
     69a:	19 8e       	std	Y+25, r1	; 0x19
     69c:	1a 8e       	std	Y+26, r1	; 0x1a
     69e:	1b 8e       	std	Y+27, r1	; 0x1b
     6a0:	8e 01       	movw	r16, r28
     6a2:	0b 5e       	subi	r16, 0xEB	; 235
     6a4:	1f 4f       	sbci	r17, 0xFF	; 255
     6a6:	be 01       	movw	r22, r28
     6a8:	67 5e       	subi	r22, 0xE7	; 231
     6aa:	7f 4f       	sbci	r23, 0xFF	; 255
     6ac:	f8 01       	movw	r30, r16
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
     6b2:	b8 e0       	ldi	r27, 0x08	; 8
     6b4:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
     6b6:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
     6b8:	29 2f       	mov	r18, r25
     6ba:	33 27       	eor	r19, r19
     6bc:	27 fd       	sbrc	r18, 7
     6be:	3a 95       	dec	r19
     6c0:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
     6c2:	32 2f       	mov	r19, r18
     6c4:	22 27       	eor	r18, r18
     6c6:	4b 2f       	mov	r20, r27
     6c8:	5f 2d       	mov	r21, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
     6ca:	33 23       	and	r19, r19
     6cc:	3c f4       	brge	.+14     	; 0x6dc <SetParameter+0x224>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
     6ce:	22 0f       	add	r18, r18
     6d0:	33 1f       	adc	r19, r19
     6d2:	a1 e2       	ldi	r26, 0x21	; 33
     6d4:	2a 27       	eor	r18, r26
     6d6:	a0 e1       	ldi	r26, 0x10	; 16
     6d8:	3a 27       	eor	r19, r26
     6da:	02 c0       	rjmp	.+4      	; 0x6e0 <SetParameter+0x228>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
     6dc:	22 0f       	add	r18, r18
     6de:	33 1f       	adc	r19, r19
     6e0:	41 50       	subi	r20, 0x01	; 1
     6e2:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
     6e4:	91 f7       	brne	.-28     	; 0x6ca <SetParameter+0x212>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
     6e6:	98 2f       	mov	r25, r24
     6e8:	88 27       	eor	r24, r24
     6ea:	82 27       	eor	r24, r18
     6ec:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
     6ee:	e6 17       	cp	r30, r22
     6f0:	f7 07       	cpc	r31, r23
     6f2:	09 f7       	brne	.-62     	; 0x6b6 <SetParameter+0x1fe>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
     6f4:	7c 01       	movw	r14, r24
     6f6:	40 e1       	ldi	r20, 0x10	; 16
     6f8:	6f e2       	ldi	r22, 0x2F	; 47
     6fa:	75 e0       	ldi	r23, 0x05	; 5
     6fc:	0e 94 04 3b 	call	0x7608	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
     700:	8f e2       	ldi	r24, 0x2F	; 47
     702:	95 e0       	ldi	r25, 0x05	; 5
     704:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <strupr>
	if(crcXmodem < 0x10)
     708:	b0 e1       	ldi	r27, 0x10	; 16
     70a:	eb 16       	cp	r14, r27
     70c:	f1 04       	cpc	r15, r1
     70e:	38 f4       	brcc	.+14     	; 0x71e <SetParameter+0x266>
	{
		tx_string[cnt+4] = crc[0];
     710:	80 91 2f 05 	lds	r24, 0x052F
     714:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+3] = '0';
     716:	80 e3       	ldi	r24, 0x30	; 48
     718:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+2] = '0';
     71a:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+1] = '0';
     71c:	89 8f       	std	Y+25, r24	; 0x19
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
     71e:	c7 01       	movw	r24, r14
     720:	40 97       	sbiw	r24, 0x10	; 16
     722:	80 3f       	cpi	r24, 0xF0	; 240
     724:	91 05       	cpc	r25, r1
     726:	48 f4       	brcc	.+18     	; 0x73a <SetParameter+0x282>
	{
		tx_string[cnt+4] = crc[1];
     728:	ef e2       	ldi	r30, 0x2F	; 47
     72a:	f5 e0       	ldi	r31, 0x05	; 5
     72c:	81 81       	ldd	r24, Z+1	; 0x01
     72e:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+3] = crc[0];
     730:	80 81       	ld	r24, Z
     732:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+2] = '0';
     734:	80 e3       	ldi	r24, 0x30	; 48
     736:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+1] = '0';		
     738:	89 8f       	std	Y+25, r24	; 0x19
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
     73a:	c7 01       	movw	r24, r14
     73c:	9a 95       	dec	r25
     73e:	81 15       	cp	r24, r1
     740:	9f 40       	sbci	r25, 0x0F	; 15
     742:	50 f4       	brcc	.+20     	; 0x758 <SetParameter+0x2a0>
	{
		tx_string[cnt+4] = crc[2];
     744:	ef e2       	ldi	r30, 0x2F	; 47
     746:	f5 e0       	ldi	r31, 0x05	; 5
     748:	82 81       	ldd	r24, Z+2	; 0x02
     74a:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+3] = crc[1];
     74c:	81 81       	ldd	r24, Z+1	; 0x01
     74e:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+2] = crc[0];
     750:	80 81       	ld	r24, Z
     752:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+1] = '0';		
     754:	80 e3       	ldi	r24, 0x30	; 48
     756:	89 8f       	std	Y+25, r24	; 0x19
	}
	if(crcXmodem >= 0x1000)
     758:	e1 14       	cp	r14, r1
     75a:	f0 e1       	ldi	r31, 0x10	; 16
     75c:	ff 06       	cpc	r15, r31
     75e:	50 f0       	brcs	.+20     	; 0x774 <SetParameter+0x2bc>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
     760:	ef e2       	ldi	r30, 0x2F	; 47
     762:	f5 e0       	ldi	r31, 0x05	; 5
     764:	80 81       	ld	r24, Z
     766:	89 8f       	std	Y+25, r24	; 0x19
		tx_string[cnt+2] = crc[1];
     768:	81 81       	ldd	r24, Z+1	; 0x01
     76a:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+3] = crc[2];
     76c:	82 81       	ldd	r24, Z+2	; 0x02
     76e:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+4] = crc[3];
     770:	83 81       	ldd	r24, Z+3	; 0x03
     772:	8c 8f       	std	Y+28, r24	; 0x1c
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
     774:	8d e0       	ldi	r24, 0x0D	; 13
     776:	8d 8f       	std	Y+29, r24	; 0x1d
     778:	ae 01       	movw	r20, r28
     77a:	42 5e       	subi	r20, 0xE2	; 226
     77c:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
     77e:	e7 e5       	ldi	r30, 0x57	; 87
     780:	f5 e0       	ldi	r31, 0x05	; 5
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
     782:	61 ec       	ldi	r22, 0xC1	; 193
     784:	70 e0       	ldi	r23, 0x00	; 0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     786:	30 e0       	ldi	r19, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
     788:	d8 01       	movw	r26, r16
     78a:	8d 91       	ld	r24, X+
     78c:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
     78e:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
     790:	21 81       	ldd	r18, Z+1	; 0x01
     792:	90 81       	ld	r25, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
     794:	29 13       	cpse	r18, r25
     796:	04 c0       	rjmp	.+8      	; 0x7a0 <SetParameter+0x2e8>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
     798:	db 01       	movw	r26, r22
     79a:	9c 91       	ld	r25, X
     79c:	90 62       	ori	r25, 0x20	; 32
     79e:	9c 93       	st	X, r25
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
     7a0:	90 81       	ld	r25, Z
     7a2:	a3 81       	ldd	r26, Z+3	; 0x03
     7a4:	b4 81       	ldd	r27, Z+4	; 0x04
     7a6:	a9 0f       	add	r26, r25
     7a8:	b1 1d       	adc	r27, r1
     7aa:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
     7ac:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     7ae:	a2 2f       	mov	r26, r18
     7b0:	b0 e0       	ldi	r27, 0x00	; 0
     7b2:	82 81       	ldd	r24, Z+2	; 0x02
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	01 97       	sbiw	r24, 0x01	; 1
     7b8:	a8 17       	cp	r26, r24
     7ba:	b9 07       	cpc	r27, r25
     7bc:	11 f0       	breq	.+4      	; 0x7c2 <SetParameter+0x30a>
     7be:	2f 5f       	subi	r18, 0xFF	; 255
     7c0:	01 c0       	rjmp	.+2      	; 0x7c4 <SetParameter+0x30c>
     7c2:	23 2f       	mov	r18, r19
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
     7c4:	20 83       	st	Z, r18
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
     7c6:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
     7c8:	04 17       	cp	r16, r20
     7ca:	15 07       	cpc	r17, r21
     7cc:	e9 f6       	brne	.-70     	; 0x788 <SetParameter+0x2d0>
     7ce:	0c 94 ed 13 	jmp	0x27da	; 0x27da <__stack+0x1edb>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
     7d2:	6e e1       	ldi	r22, 0x1E	; 30
     7d4:	70 e0       	ldi	r23, 0x00	; 0
     7d6:	89 e3       	ldi	r24, 0x39	; 57
     7d8:	95 e0       	ldi	r25, 0x05	; 5
     7da:	0e 94 ef 3a 	call	0x75de	; 0x75de <strnlen>
     7de:	05 97       	sbiw	r24, 0x05	; 5
     7e0:	ac 01       	movw	r20, r24
     7e2:	de 01       	movw	r26, r28
     7e4:	11 96       	adiw	r26, 0x01	; 1
     7e6:	9e 01       	movw	r18, r28
     7e8:	2b 5e       	subi	r18, 0xEB	; 235
     7ea:	3f 4f       	sbci	r19, 0xFF	; 255
     7ec:	fd 01       	movw	r30, r26
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
     7ee:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
     7f0:	e2 17       	cp	r30, r18
     7f2:	f3 07       	cpc	r31, r19
     7f4:	e1 f7       	brne	.-8      	; 0x7ee <SetParameter+0x336>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
     7f6:	4b 30       	cpi	r20, 0x0B	; 11
     7f8:	51 05       	cpc	r21, r1
     7fa:	54 f0       	brlt	.+20     	; 0x810 <SetParameter+0x358>
     7fc:	e3 e4       	ldi	r30, 0x43	; 67
     7fe:	f5 e0       	ldi	r31, 0x05	; 5
     800:	9c 01       	movw	r18, r24
     802:	27 5c       	subi	r18, 0xC7	; 199
     804:	3a 4f       	sbci	r19, 0xFA	; 250
	{
		param[idx] = stringToParse[i];
     806:	91 91       	ld	r25, Z+
     808:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
     80a:	e2 17       	cp	r30, r18
     80c:	f3 07       	cpc	r31, r19
     80e:	d9 f7       	brne	.-10     	; 0x806 <SetParameter+0x34e>
		printStatus("");
		break;
		
		case 151:	// SetPgainCh0
		ParamParse(rx_string, param);
		ch0.Pgain = atof(param);
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	0e 94 8a 3a 	call	0x7514	; 0x7514 <atof>
     818:	60 93 e2 02 	sts	0x02E2, r22
     81c:	70 93 e3 02 	sts	0x02E3, r23
     820:	80 93 e4 02 	sts	0x02E4, r24
     824:	90 93 e5 02 	sts	0x02E5, r25
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
     828:	81 e2       	ldi	r24, 0x21	; 33
     82a:	8d 8b       	std	Y+21, r24	; 0x15
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
     82c:	e9 e3       	ldi	r30, 0x39	; 57
     82e:	f5 e0       	ldi	r31, 0x05	; 5
     830:	81 81       	ldd	r24, Z+1	; 0x01
     832:	8e 8b       	std	Y+22, r24	; 0x16
     834:	82 81       	ldd	r24, Z+2	; 0x02
     836:	8f 8b       	std	Y+23, r24	; 0x17
     838:	83 81       	ldd	r24, Z+3	; 0x03
     83a:	88 8f       	std	Y+24, r24	; 0x18
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
     83c:	19 8e       	std	Y+25, r1	; 0x19
     83e:	1a 8e       	std	Y+26, r1	; 0x1a
     840:	1b 8e       	std	Y+27, r1	; 0x1b
     842:	8e 01       	movw	r16, r28
     844:	0b 5e       	subi	r16, 0xEB	; 235
     846:	1f 4f       	sbci	r17, 0xFF	; 255
     848:	be 01       	movw	r22, r28
     84a:	67 5e       	subi	r22, 0xE7	; 231
     84c:	7f 4f       	sbci	r23, 0xFF	; 255
     84e:	f8 01       	movw	r30, r16
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
     854:	b8 e0       	ldi	r27, 0x08	; 8
     856:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
     858:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
     85a:	29 2f       	mov	r18, r25
     85c:	33 27       	eor	r19, r19
     85e:	27 fd       	sbrc	r18, 7
     860:	3a 95       	dec	r19
     862:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
     864:	32 2f       	mov	r19, r18
     866:	22 27       	eor	r18, r18
     868:	4b 2f       	mov	r20, r27
     86a:	5f 2d       	mov	r21, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
     86c:	33 23       	and	r19, r19
     86e:	3c f4       	brge	.+14     	; 0x87e <SetParameter+0x3c6>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
     870:	22 0f       	add	r18, r18
     872:	33 1f       	adc	r19, r19
     874:	a1 e2       	ldi	r26, 0x21	; 33
     876:	2a 27       	eor	r18, r26
     878:	a0 e1       	ldi	r26, 0x10	; 16
     87a:	3a 27       	eor	r19, r26
     87c:	02 c0       	rjmp	.+4      	; 0x882 <SetParameter+0x3ca>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
     87e:	22 0f       	add	r18, r18
     880:	33 1f       	adc	r19, r19
     882:	41 50       	subi	r20, 0x01	; 1
     884:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
     886:	91 f7       	brne	.-28     	; 0x86c <SetParameter+0x3b4>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
     888:	98 2f       	mov	r25, r24
     88a:	88 27       	eor	r24, r24
     88c:	82 27       	eor	r24, r18
     88e:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
     890:	e6 17       	cp	r30, r22
     892:	f7 07       	cpc	r31, r23
     894:	09 f7       	brne	.-62     	; 0x858 <SetParameter+0x3a0>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
     896:	7c 01       	movw	r14, r24
     898:	40 e1       	ldi	r20, 0x10	; 16
     89a:	6f e2       	ldi	r22, 0x2F	; 47
     89c:	75 e0       	ldi	r23, 0x05	; 5
     89e:	0e 94 04 3b 	call	0x7608	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
     8a2:	8f e2       	ldi	r24, 0x2F	; 47
     8a4:	95 e0       	ldi	r25, 0x05	; 5
     8a6:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <strupr>
	if(crcXmodem < 0x10)
     8aa:	b0 e1       	ldi	r27, 0x10	; 16
     8ac:	eb 16       	cp	r14, r27
     8ae:	f1 04       	cpc	r15, r1
     8b0:	38 f4       	brcc	.+14     	; 0x8c0 <SetParameter+0x408>
	{
		tx_string[cnt+4] = crc[0];
     8b2:	80 91 2f 05 	lds	r24, 0x052F
     8b6:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+3] = '0';
     8b8:	80 e3       	ldi	r24, 0x30	; 48
     8ba:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+2] = '0';
     8bc:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+1] = '0';
     8be:	89 8f       	std	Y+25, r24	; 0x19
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
     8c0:	c7 01       	movw	r24, r14
     8c2:	40 97       	sbiw	r24, 0x10	; 16
     8c4:	80 3f       	cpi	r24, 0xF0	; 240
     8c6:	91 05       	cpc	r25, r1
     8c8:	48 f4       	brcc	.+18     	; 0x8dc <SetParameter+0x424>
	{
		tx_string[cnt+4] = crc[1];
     8ca:	ef e2       	ldi	r30, 0x2F	; 47
     8cc:	f5 e0       	ldi	r31, 0x05	; 5
     8ce:	81 81       	ldd	r24, Z+1	; 0x01
     8d0:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+3] = crc[0];
     8d2:	80 81       	ld	r24, Z
     8d4:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+2] = '0';
     8d6:	80 e3       	ldi	r24, 0x30	; 48
     8d8:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+1] = '0';		
     8da:	89 8f       	std	Y+25, r24	; 0x19
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
     8dc:	c7 01       	movw	r24, r14
     8de:	9a 95       	dec	r25
     8e0:	81 15       	cp	r24, r1
     8e2:	9f 40       	sbci	r25, 0x0F	; 15
     8e4:	50 f4       	brcc	.+20     	; 0x8fa <SetParameter+0x442>
	{
		tx_string[cnt+4] = crc[2];
     8e6:	ef e2       	ldi	r30, 0x2F	; 47
     8e8:	f5 e0       	ldi	r31, 0x05	; 5
     8ea:	82 81       	ldd	r24, Z+2	; 0x02
     8ec:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+3] = crc[1];
     8ee:	81 81       	ldd	r24, Z+1	; 0x01
     8f0:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+2] = crc[0];
     8f2:	80 81       	ld	r24, Z
     8f4:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+1] = '0';		
     8f6:	80 e3       	ldi	r24, 0x30	; 48
     8f8:	89 8f       	std	Y+25, r24	; 0x19
	}
	if(crcXmodem >= 0x1000)
     8fa:	e1 14       	cp	r14, r1
     8fc:	f0 e1       	ldi	r31, 0x10	; 16
     8fe:	ff 06       	cpc	r15, r31
     900:	50 f0       	brcs	.+20     	; 0x916 <__stack+0x17>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
     902:	ef e2       	ldi	r30, 0x2F	; 47
     904:	f5 e0       	ldi	r31, 0x05	; 5
     906:	80 81       	ld	r24, Z
     908:	89 8f       	std	Y+25, r24	; 0x19
		tx_string[cnt+2] = crc[1];
     90a:	81 81       	ldd	r24, Z+1	; 0x01
     90c:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+3] = crc[2];
     90e:	82 81       	ldd	r24, Z+2	; 0x02
     910:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+4] = crc[3];
     912:	83 81       	ldd	r24, Z+3	; 0x03
     914:	8c 8f       	std	Y+28, r24	; 0x1c
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
     916:	8d e0       	ldi	r24, 0x0D	; 13
     918:	8d 8f       	std	Y+29, r24	; 0x1d
     91a:	ae 01       	movw	r20, r28
     91c:	42 5e       	subi	r20, 0xE2	; 226
     91e:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
     920:	e7 e5       	ldi	r30, 0x57	; 87
     922:	f5 e0       	ldi	r31, 0x05	; 5
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
     924:	61 ec       	ldi	r22, 0xC1	; 193
     926:	70 e0       	ldi	r23, 0x00	; 0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     928:	30 e0       	ldi	r19, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
     92a:	d8 01       	movw	r26, r16
     92c:	8d 91       	ld	r24, X+
     92e:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
     930:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
     932:	21 81       	ldd	r18, Z+1	; 0x01
     934:	90 81       	ld	r25, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
     936:	29 13       	cpse	r18, r25
     938:	04 c0       	rjmp	.+8      	; 0x942 <__stack+0x43>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
     93a:	db 01       	movw	r26, r22
     93c:	9c 91       	ld	r25, X
     93e:	90 62       	ori	r25, 0x20	; 32
     940:	9c 93       	st	X, r25
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
     942:	90 81       	ld	r25, Z
     944:	a3 81       	ldd	r26, Z+3	; 0x03
     946:	b4 81       	ldd	r27, Z+4	; 0x04
     948:	a9 0f       	add	r26, r25
     94a:	b1 1d       	adc	r27, r1
     94c:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
     94e:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     950:	a2 2f       	mov	r26, r18
     952:	b0 e0       	ldi	r27, 0x00	; 0
     954:	82 81       	ldd	r24, Z+2	; 0x02
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	01 97       	sbiw	r24, 0x01	; 1
     95a:	a8 17       	cp	r26, r24
     95c:	b9 07       	cpc	r27, r25
     95e:	11 f0       	breq	.+4      	; 0x964 <__stack+0x65>
     960:	2f 5f       	subi	r18, 0xFF	; 255
     962:	01 c0       	rjmp	.+2      	; 0x966 <__stack+0x67>
     964:	23 2f       	mov	r18, r19
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
     966:	20 83       	st	Z, r18
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
     968:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
     96a:	04 17       	cp	r16, r20
     96c:	15 07       	cpc	r17, r21
     96e:	e9 f6       	brne	.-70     	; 0x92a <__stack+0x2b>
     970:	0c 94 ed 13 	jmp	0x27da	; 0x27da <__stack+0x1edb>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
     974:	6e e1       	ldi	r22, 0x1E	; 30
     976:	70 e0       	ldi	r23, 0x00	; 0
     978:	89 e3       	ldi	r24, 0x39	; 57
     97a:	95 e0       	ldi	r25, 0x05	; 5
     97c:	0e 94 ef 3a 	call	0x75de	; 0x75de <strnlen>
     980:	05 97       	sbiw	r24, 0x05	; 5
     982:	ac 01       	movw	r20, r24
     984:	de 01       	movw	r26, r28
     986:	11 96       	adiw	r26, 0x01	; 1
     988:	9e 01       	movw	r18, r28
     98a:	2b 5e       	subi	r18, 0xEB	; 235
     98c:	3f 4f       	sbci	r19, 0xFF	; 255
     98e:	fd 01       	movw	r30, r26
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
     990:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
     992:	e2 17       	cp	r30, r18
     994:	f3 07       	cpc	r31, r19
     996:	e1 f7       	brne	.-8      	; 0x990 <__stack+0x91>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
     998:	4b 30       	cpi	r20, 0x0B	; 11
     99a:	51 05       	cpc	r21, r1
     99c:	54 f0       	brlt	.+20     	; 0x9b2 <__stack+0xb3>
     99e:	e3 e4       	ldi	r30, 0x43	; 67
     9a0:	f5 e0       	ldi	r31, 0x05	; 5
     9a2:	9c 01       	movw	r18, r24
     9a4:	27 5c       	subi	r18, 0xC7	; 199
     9a6:	3a 4f       	sbci	r19, 0xFA	; 250
	{
		param[idx] = stringToParse[i];
     9a8:	91 91       	ld	r25, Z+
     9aa:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
     9ac:	e2 17       	cp	r30, r18
     9ae:	f3 07       	cpc	r31, r19
     9b0:	d9 f7       	brne	.-10     	; 0x9a8 <__stack+0xa9>
		printStatus("");
		break;
		
		case 152:	// SetIgainCh0
		ParamParse(rx_string, param);
		ch0.Igain = atof(param);
     9b2:	ce 01       	movw	r24, r28
     9b4:	01 96       	adiw	r24, 0x01	; 1
     9b6:	0e 94 8a 3a 	call	0x7514	; 0x7514 <atof>
     9ba:	60 93 e6 02 	sts	0x02E6, r22
     9be:	70 93 e7 02 	sts	0x02E7, r23
     9c2:	80 93 e8 02 	sts	0x02E8, r24
     9c6:	90 93 e9 02 	sts	0x02E9, r25
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
     9ca:	81 e2       	ldi	r24, 0x21	; 33
     9cc:	8d 8b       	std	Y+21, r24	; 0x15
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
     9ce:	e9 e3       	ldi	r30, 0x39	; 57
     9d0:	f5 e0       	ldi	r31, 0x05	; 5
     9d2:	81 81       	ldd	r24, Z+1	; 0x01
     9d4:	8e 8b       	std	Y+22, r24	; 0x16
     9d6:	82 81       	ldd	r24, Z+2	; 0x02
     9d8:	8f 8b       	std	Y+23, r24	; 0x17
     9da:	83 81       	ldd	r24, Z+3	; 0x03
     9dc:	88 8f       	std	Y+24, r24	; 0x18
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
     9de:	19 8e       	std	Y+25, r1	; 0x19
     9e0:	1a 8e       	std	Y+26, r1	; 0x1a
     9e2:	1b 8e       	std	Y+27, r1	; 0x1b
     9e4:	8e 01       	movw	r16, r28
     9e6:	0b 5e       	subi	r16, 0xEB	; 235
     9e8:	1f 4f       	sbci	r17, 0xFF	; 255
     9ea:	be 01       	movw	r22, r28
     9ec:	67 5e       	subi	r22, 0xE7	; 231
     9ee:	7f 4f       	sbci	r23, 0xFF	; 255
     9f0:	f8 01       	movw	r30, r16
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
     9f6:	b8 e0       	ldi	r27, 0x08	; 8
     9f8:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
     9fa:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
     9fc:	29 2f       	mov	r18, r25
     9fe:	33 27       	eor	r19, r19
     a00:	27 fd       	sbrc	r18, 7
     a02:	3a 95       	dec	r19
     a04:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
     a06:	32 2f       	mov	r19, r18
     a08:	22 27       	eor	r18, r18
     a0a:	4b 2f       	mov	r20, r27
     a0c:	5f 2d       	mov	r21, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
     a0e:	33 23       	and	r19, r19
     a10:	3c f4       	brge	.+14     	; 0xa20 <__stack+0x121>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
     a12:	22 0f       	add	r18, r18
     a14:	33 1f       	adc	r19, r19
     a16:	a1 e2       	ldi	r26, 0x21	; 33
     a18:	2a 27       	eor	r18, r26
     a1a:	a0 e1       	ldi	r26, 0x10	; 16
     a1c:	3a 27       	eor	r19, r26
     a1e:	02 c0       	rjmp	.+4      	; 0xa24 <__stack+0x125>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
     a20:	22 0f       	add	r18, r18
     a22:	33 1f       	adc	r19, r19
     a24:	41 50       	subi	r20, 0x01	; 1
     a26:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
     a28:	91 f7       	brne	.-28     	; 0xa0e <__stack+0x10f>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
     a2a:	98 2f       	mov	r25, r24
     a2c:	88 27       	eor	r24, r24
     a2e:	82 27       	eor	r24, r18
     a30:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
     a32:	e6 17       	cp	r30, r22
     a34:	f7 07       	cpc	r31, r23
     a36:	09 f7       	brne	.-62     	; 0x9fa <__stack+0xfb>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
     a38:	7c 01       	movw	r14, r24
     a3a:	40 e1       	ldi	r20, 0x10	; 16
     a3c:	6f e2       	ldi	r22, 0x2F	; 47
     a3e:	75 e0       	ldi	r23, 0x05	; 5
     a40:	0e 94 04 3b 	call	0x7608	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
     a44:	8f e2       	ldi	r24, 0x2F	; 47
     a46:	95 e0       	ldi	r25, 0x05	; 5
     a48:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <strupr>
	if(crcXmodem < 0x10)
     a4c:	b0 e1       	ldi	r27, 0x10	; 16
     a4e:	eb 16       	cp	r14, r27
     a50:	f1 04       	cpc	r15, r1
     a52:	38 f4       	brcc	.+14     	; 0xa62 <__stack+0x163>
	{
		tx_string[cnt+4] = crc[0];
     a54:	80 91 2f 05 	lds	r24, 0x052F
     a58:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+3] = '0';
     a5a:	80 e3       	ldi	r24, 0x30	; 48
     a5c:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+2] = '0';
     a5e:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+1] = '0';
     a60:	89 8f       	std	Y+25, r24	; 0x19
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
     a62:	c7 01       	movw	r24, r14
     a64:	40 97       	sbiw	r24, 0x10	; 16
     a66:	80 3f       	cpi	r24, 0xF0	; 240
     a68:	91 05       	cpc	r25, r1
     a6a:	48 f4       	brcc	.+18     	; 0xa7e <__stack+0x17f>
	{
		tx_string[cnt+4] = crc[1];
     a6c:	ef e2       	ldi	r30, 0x2F	; 47
     a6e:	f5 e0       	ldi	r31, 0x05	; 5
     a70:	81 81       	ldd	r24, Z+1	; 0x01
     a72:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+3] = crc[0];
     a74:	80 81       	ld	r24, Z
     a76:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+2] = '0';
     a78:	80 e3       	ldi	r24, 0x30	; 48
     a7a:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+1] = '0';		
     a7c:	89 8f       	std	Y+25, r24	; 0x19
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
     a7e:	c7 01       	movw	r24, r14
     a80:	9a 95       	dec	r25
     a82:	81 15       	cp	r24, r1
     a84:	9f 40       	sbci	r25, 0x0F	; 15
     a86:	50 f4       	brcc	.+20     	; 0xa9c <__stack+0x19d>
	{
		tx_string[cnt+4] = crc[2];
     a88:	ef e2       	ldi	r30, 0x2F	; 47
     a8a:	f5 e0       	ldi	r31, 0x05	; 5
     a8c:	82 81       	ldd	r24, Z+2	; 0x02
     a8e:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+3] = crc[1];
     a90:	81 81       	ldd	r24, Z+1	; 0x01
     a92:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+2] = crc[0];
     a94:	80 81       	ld	r24, Z
     a96:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+1] = '0';		
     a98:	80 e3       	ldi	r24, 0x30	; 48
     a9a:	89 8f       	std	Y+25, r24	; 0x19
	}
	if(crcXmodem >= 0x1000)
     a9c:	e1 14       	cp	r14, r1
     a9e:	f0 e1       	ldi	r31, 0x10	; 16
     aa0:	ff 06       	cpc	r15, r31
     aa2:	50 f0       	brcs	.+20     	; 0xab8 <__stack+0x1b9>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
     aa4:	ef e2       	ldi	r30, 0x2F	; 47
     aa6:	f5 e0       	ldi	r31, 0x05	; 5
     aa8:	80 81       	ld	r24, Z
     aaa:	89 8f       	std	Y+25, r24	; 0x19
		tx_string[cnt+2] = crc[1];
     aac:	81 81       	ldd	r24, Z+1	; 0x01
     aae:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+3] = crc[2];
     ab0:	82 81       	ldd	r24, Z+2	; 0x02
     ab2:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+4] = crc[3];
     ab4:	83 81       	ldd	r24, Z+3	; 0x03
     ab6:	8c 8f       	std	Y+28, r24	; 0x1c
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
     ab8:	8d e0       	ldi	r24, 0x0D	; 13
     aba:	8d 8f       	std	Y+29, r24	; 0x1d
     abc:	ae 01       	movw	r20, r28
     abe:	42 5e       	subi	r20, 0xE2	; 226
     ac0:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
     ac2:	e7 e5       	ldi	r30, 0x57	; 87
     ac4:	f5 e0       	ldi	r31, 0x05	; 5
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
     ac6:	61 ec       	ldi	r22, 0xC1	; 193
     ac8:	70 e0       	ldi	r23, 0x00	; 0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     aca:	30 e0       	ldi	r19, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
     acc:	d8 01       	movw	r26, r16
     ace:	8d 91       	ld	r24, X+
     ad0:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
     ad2:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
     ad4:	21 81       	ldd	r18, Z+1	; 0x01
     ad6:	90 81       	ld	r25, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
     ad8:	29 13       	cpse	r18, r25
     ada:	04 c0       	rjmp	.+8      	; 0xae4 <__stack+0x1e5>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
     adc:	db 01       	movw	r26, r22
     ade:	9c 91       	ld	r25, X
     ae0:	90 62       	ori	r25, 0x20	; 32
     ae2:	9c 93       	st	X, r25
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
     ae4:	90 81       	ld	r25, Z
     ae6:	a3 81       	ldd	r26, Z+3	; 0x03
     ae8:	b4 81       	ldd	r27, Z+4	; 0x04
     aea:	a9 0f       	add	r26, r25
     aec:	b1 1d       	adc	r27, r1
     aee:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
     af0:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     af2:	a2 2f       	mov	r26, r18
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	82 81       	ldd	r24, Z+2	; 0x02
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	01 97       	sbiw	r24, 0x01	; 1
     afc:	a8 17       	cp	r26, r24
     afe:	b9 07       	cpc	r27, r25
     b00:	11 f0       	breq	.+4      	; 0xb06 <__stack+0x207>
     b02:	2f 5f       	subi	r18, 0xFF	; 255
     b04:	01 c0       	rjmp	.+2      	; 0xb08 <__stack+0x209>
     b06:	23 2f       	mov	r18, r19
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
     b08:	20 83       	st	Z, r18
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
     b0a:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
     b0c:	04 17       	cp	r16, r20
     b0e:	15 07       	cpc	r17, r21
     b10:	e9 f6       	brne	.-70     	; 0xacc <__stack+0x1cd>
     b12:	0c 94 ed 13 	jmp	0x27da	; 0x27da <__stack+0x1edb>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
     b16:	6e e1       	ldi	r22, 0x1E	; 30
     b18:	70 e0       	ldi	r23, 0x00	; 0
     b1a:	89 e3       	ldi	r24, 0x39	; 57
     b1c:	95 e0       	ldi	r25, 0x05	; 5
     b1e:	0e 94 ef 3a 	call	0x75de	; 0x75de <strnlen>
     b22:	05 97       	sbiw	r24, 0x05	; 5
     b24:	ac 01       	movw	r20, r24
     b26:	de 01       	movw	r26, r28
     b28:	11 96       	adiw	r26, 0x01	; 1
     b2a:	9e 01       	movw	r18, r28
     b2c:	2b 5e       	subi	r18, 0xEB	; 235
     b2e:	3f 4f       	sbci	r19, 0xFF	; 255
     b30:	fd 01       	movw	r30, r26
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
     b32:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
     b34:	e2 17       	cp	r30, r18
     b36:	f3 07       	cpc	r31, r19
     b38:	e1 f7       	brne	.-8      	; 0xb32 <__stack+0x233>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
     b3a:	4b 30       	cpi	r20, 0x0B	; 11
     b3c:	51 05       	cpc	r21, r1
     b3e:	54 f0       	brlt	.+20     	; 0xb54 <__stack+0x255>
     b40:	e3 e4       	ldi	r30, 0x43	; 67
     b42:	f5 e0       	ldi	r31, 0x05	; 5
     b44:	9c 01       	movw	r18, r24
     b46:	27 5c       	subi	r18, 0xC7	; 199
     b48:	3a 4f       	sbci	r19, 0xFA	; 250
	{
		param[idx] = stringToParse[i];
     b4a:	91 91       	ld	r25, Z+
     b4c:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
     b4e:	e2 17       	cp	r30, r18
     b50:	f3 07       	cpc	r31, r19
     b52:	d9 f7       	brne	.-10     	; 0xb4a <__stack+0x24b>
		printStatus("");
		break;
		
		case 153:	// Setch0.Dgain
		ParamParse(rx_string, param);
		ch0.Dgain = atof(param);
     b54:	ce 01       	movw	r24, r28
     b56:	01 96       	adiw	r24, 0x01	; 1
     b58:	0e 94 8a 3a 	call	0x7514	; 0x7514 <atof>
     b5c:	60 93 ea 02 	sts	0x02EA, r22
     b60:	70 93 eb 02 	sts	0x02EB, r23
     b64:	80 93 ec 02 	sts	0x02EC, r24
     b68:	90 93 ed 02 	sts	0x02ED, r25
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
     b6c:	81 e2       	ldi	r24, 0x21	; 33
     b6e:	8d 8b       	std	Y+21, r24	; 0x15
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
     b70:	e9 e3       	ldi	r30, 0x39	; 57
     b72:	f5 e0       	ldi	r31, 0x05	; 5
     b74:	81 81       	ldd	r24, Z+1	; 0x01
     b76:	8e 8b       	std	Y+22, r24	; 0x16
     b78:	82 81       	ldd	r24, Z+2	; 0x02
     b7a:	8f 8b       	std	Y+23, r24	; 0x17
     b7c:	83 81       	ldd	r24, Z+3	; 0x03
     b7e:	88 8f       	std	Y+24, r24	; 0x18
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
     b80:	19 8e       	std	Y+25, r1	; 0x19
     b82:	1a 8e       	std	Y+26, r1	; 0x1a
     b84:	1b 8e       	std	Y+27, r1	; 0x1b
     b86:	8e 01       	movw	r16, r28
     b88:	0b 5e       	subi	r16, 0xEB	; 235
     b8a:	1f 4f       	sbci	r17, 0xFF	; 255
     b8c:	be 01       	movw	r22, r28
     b8e:	67 5e       	subi	r22, 0xE7	; 231
     b90:	7f 4f       	sbci	r23, 0xFF	; 255
     b92:	f8 01       	movw	r30, r16
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
     b98:	b8 e0       	ldi	r27, 0x08	; 8
     b9a:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
     b9c:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
     b9e:	29 2f       	mov	r18, r25
     ba0:	33 27       	eor	r19, r19
     ba2:	27 fd       	sbrc	r18, 7
     ba4:	3a 95       	dec	r19
     ba6:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
     ba8:	32 2f       	mov	r19, r18
     baa:	22 27       	eor	r18, r18
     bac:	4b 2f       	mov	r20, r27
     bae:	5f 2d       	mov	r21, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
     bb0:	33 23       	and	r19, r19
     bb2:	3c f4       	brge	.+14     	; 0xbc2 <__stack+0x2c3>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
     bb4:	22 0f       	add	r18, r18
     bb6:	33 1f       	adc	r19, r19
     bb8:	a1 e2       	ldi	r26, 0x21	; 33
     bba:	2a 27       	eor	r18, r26
     bbc:	a0 e1       	ldi	r26, 0x10	; 16
     bbe:	3a 27       	eor	r19, r26
     bc0:	02 c0       	rjmp	.+4      	; 0xbc6 <__stack+0x2c7>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
     bc2:	22 0f       	add	r18, r18
     bc4:	33 1f       	adc	r19, r19
     bc6:	41 50       	subi	r20, 0x01	; 1
     bc8:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
     bca:	91 f7       	brne	.-28     	; 0xbb0 <__stack+0x2b1>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
     bcc:	98 2f       	mov	r25, r24
     bce:	88 27       	eor	r24, r24
     bd0:	82 27       	eor	r24, r18
     bd2:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
     bd4:	e6 17       	cp	r30, r22
     bd6:	f7 07       	cpc	r31, r23
     bd8:	09 f7       	brne	.-62     	; 0xb9c <__stack+0x29d>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
     bda:	7c 01       	movw	r14, r24
     bdc:	40 e1       	ldi	r20, 0x10	; 16
     bde:	6f e2       	ldi	r22, 0x2F	; 47
     be0:	75 e0       	ldi	r23, 0x05	; 5
     be2:	0e 94 04 3b 	call	0x7608	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
     be6:	8f e2       	ldi	r24, 0x2F	; 47
     be8:	95 e0       	ldi	r25, 0x05	; 5
     bea:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <strupr>
	if(crcXmodem < 0x10)
     bee:	b0 e1       	ldi	r27, 0x10	; 16
     bf0:	eb 16       	cp	r14, r27
     bf2:	f1 04       	cpc	r15, r1
     bf4:	38 f4       	brcc	.+14     	; 0xc04 <__stack+0x305>
	{
		tx_string[cnt+4] = crc[0];
     bf6:	80 91 2f 05 	lds	r24, 0x052F
     bfa:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+3] = '0';
     bfc:	80 e3       	ldi	r24, 0x30	; 48
     bfe:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+2] = '0';
     c00:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+1] = '0';
     c02:	89 8f       	std	Y+25, r24	; 0x19
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
     c04:	c7 01       	movw	r24, r14
     c06:	40 97       	sbiw	r24, 0x10	; 16
     c08:	80 3f       	cpi	r24, 0xF0	; 240
     c0a:	91 05       	cpc	r25, r1
     c0c:	48 f4       	brcc	.+18     	; 0xc20 <__stack+0x321>
	{
		tx_string[cnt+4] = crc[1];
     c0e:	ef e2       	ldi	r30, 0x2F	; 47
     c10:	f5 e0       	ldi	r31, 0x05	; 5
     c12:	81 81       	ldd	r24, Z+1	; 0x01
     c14:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+3] = crc[0];
     c16:	80 81       	ld	r24, Z
     c18:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+2] = '0';
     c1a:	80 e3       	ldi	r24, 0x30	; 48
     c1c:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+1] = '0';		
     c1e:	89 8f       	std	Y+25, r24	; 0x19
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
     c20:	c7 01       	movw	r24, r14
     c22:	9a 95       	dec	r25
     c24:	81 15       	cp	r24, r1
     c26:	9f 40       	sbci	r25, 0x0F	; 15
     c28:	50 f4       	brcc	.+20     	; 0xc3e <__stack+0x33f>
	{
		tx_string[cnt+4] = crc[2];
     c2a:	ef e2       	ldi	r30, 0x2F	; 47
     c2c:	f5 e0       	ldi	r31, 0x05	; 5
     c2e:	82 81       	ldd	r24, Z+2	; 0x02
     c30:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+3] = crc[1];
     c32:	81 81       	ldd	r24, Z+1	; 0x01
     c34:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+2] = crc[0];
     c36:	80 81       	ld	r24, Z
     c38:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+1] = '0';		
     c3a:	80 e3       	ldi	r24, 0x30	; 48
     c3c:	89 8f       	std	Y+25, r24	; 0x19
	}
	if(crcXmodem >= 0x1000)
     c3e:	e1 14       	cp	r14, r1
     c40:	f0 e1       	ldi	r31, 0x10	; 16
     c42:	ff 06       	cpc	r15, r31
     c44:	50 f0       	brcs	.+20     	; 0xc5a <__stack+0x35b>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
     c46:	ef e2       	ldi	r30, 0x2F	; 47
     c48:	f5 e0       	ldi	r31, 0x05	; 5
     c4a:	80 81       	ld	r24, Z
     c4c:	89 8f       	std	Y+25, r24	; 0x19
		tx_string[cnt+2] = crc[1];
     c4e:	81 81       	ldd	r24, Z+1	; 0x01
     c50:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+3] = crc[2];
     c52:	82 81       	ldd	r24, Z+2	; 0x02
     c54:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+4] = crc[3];
     c56:	83 81       	ldd	r24, Z+3	; 0x03
     c58:	8c 8f       	std	Y+28, r24	; 0x1c
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
     c5a:	8d e0       	ldi	r24, 0x0D	; 13
     c5c:	8d 8f       	std	Y+29, r24	; 0x1d
     c5e:	ae 01       	movw	r20, r28
     c60:	42 5e       	subi	r20, 0xE2	; 226
     c62:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
     c64:	e7 e5       	ldi	r30, 0x57	; 87
     c66:	f5 e0       	ldi	r31, 0x05	; 5
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
     c68:	61 ec       	ldi	r22, 0xC1	; 193
     c6a:	70 e0       	ldi	r23, 0x00	; 0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     c6c:	30 e0       	ldi	r19, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
     c6e:	d8 01       	movw	r26, r16
     c70:	8d 91       	ld	r24, X+
     c72:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
     c74:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
     c76:	21 81       	ldd	r18, Z+1	; 0x01
     c78:	90 81       	ld	r25, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
     c7a:	29 13       	cpse	r18, r25
     c7c:	04 c0       	rjmp	.+8      	; 0xc86 <__stack+0x387>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
     c7e:	db 01       	movw	r26, r22
     c80:	9c 91       	ld	r25, X
     c82:	90 62       	ori	r25, 0x20	; 32
     c84:	9c 93       	st	X, r25
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
     c86:	90 81       	ld	r25, Z
     c88:	a3 81       	ldd	r26, Z+3	; 0x03
     c8a:	b4 81       	ldd	r27, Z+4	; 0x04
     c8c:	a9 0f       	add	r26, r25
     c8e:	b1 1d       	adc	r27, r1
     c90:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
     c92:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     c94:	a2 2f       	mov	r26, r18
     c96:	b0 e0       	ldi	r27, 0x00	; 0
     c98:	82 81       	ldd	r24, Z+2	; 0x02
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	01 97       	sbiw	r24, 0x01	; 1
     c9e:	a8 17       	cp	r26, r24
     ca0:	b9 07       	cpc	r27, r25
     ca2:	11 f0       	breq	.+4      	; 0xca8 <__stack+0x3a9>
     ca4:	2f 5f       	subi	r18, 0xFF	; 255
     ca6:	01 c0       	rjmp	.+2      	; 0xcaa <__stack+0x3ab>
     ca8:	23 2f       	mov	r18, r19
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
     caa:	20 83       	st	Z, r18
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
     cac:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
     cae:	04 17       	cp	r16, r20
     cb0:	15 07       	cpc	r17, r21
     cb2:	e9 f6       	brne	.-70     	; 0xc6e <__stack+0x36f>
     cb4:	0c 94 ed 13 	jmp	0x27da	; 0x27da <__stack+0x1edb>
		ch0.Dgain = atof(param);
		printStatus("");
		break;	
		
		case 154:	// Set heater on/off ch0
		if(rx_string[10] == '1')
     cb8:	80 91 43 05 	lds	r24, 0x0543
     cbc:	81 33       	cpi	r24, 0x31	; 49
     cbe:	09 f0       	breq	.+2      	; 0xcc2 <__stack+0x3c3>
     cc0:	ad c0       	rjmp	.+346    	; 0xe1c <__stack+0x51d>
		{
			ch0.heaterEnable = true;
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	80 93 28 03 	sts	0x0328, r24
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
     cc8:	81 e2       	ldi	r24, 0x21	; 33
     cca:	8d 8b       	std	Y+21, r24	; 0x15
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
     ccc:	e9 e3       	ldi	r30, 0x39	; 57
     cce:	f5 e0       	ldi	r31, 0x05	; 5
     cd0:	81 81       	ldd	r24, Z+1	; 0x01
     cd2:	8e 8b       	std	Y+22, r24	; 0x16
     cd4:	82 81       	ldd	r24, Z+2	; 0x02
     cd6:	8f 8b       	std	Y+23, r24	; 0x17
     cd8:	83 81       	ldd	r24, Z+3	; 0x03
     cda:	88 8f       	std	Y+24, r24	; 0x18
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
     cdc:	8f e4       	ldi	r24, 0x4F	; 79
     cde:	89 8f       	std	Y+25, r24	; 0x19
     ce0:	8e e4       	ldi	r24, 0x4E	; 78
     ce2:	8a 8f       	std	Y+26, r24	; 0x1a
     ce4:	1b 8e       	std	Y+27, r1	; 0x1b
     ce6:	1c 8e       	std	Y+28, r1	; 0x1c
     ce8:	1d 8e       	std	Y+29, r1	; 0x1d
     cea:	8e 01       	movw	r16, r28
     cec:	0b 5e       	subi	r16, 0xEB	; 235
     cee:	1f 4f       	sbci	r17, 0xFF	; 255
     cf0:	be 01       	movw	r22, r28
     cf2:	65 5e       	subi	r22, 0xE5	; 229
     cf4:	7f 4f       	sbci	r23, 0xFF	; 255
     cf6:	f8 01       	movw	r30, r16
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
     cfc:	b8 e0       	ldi	r27, 0x08	; 8
     cfe:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
     d00:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
     d02:	29 2f       	mov	r18, r25
     d04:	33 27       	eor	r19, r19
     d06:	27 fd       	sbrc	r18, 7
     d08:	3a 95       	dec	r19
     d0a:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
     d0c:	32 2f       	mov	r19, r18
     d0e:	22 27       	eor	r18, r18
     d10:	4b 2f       	mov	r20, r27
     d12:	5f 2d       	mov	r21, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
     d14:	33 23       	and	r19, r19
     d16:	3c f4       	brge	.+14     	; 0xd26 <__stack+0x427>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
     d18:	22 0f       	add	r18, r18
     d1a:	33 1f       	adc	r19, r19
     d1c:	a1 e2       	ldi	r26, 0x21	; 33
     d1e:	2a 27       	eor	r18, r26
     d20:	a0 e1       	ldi	r26, 0x10	; 16
     d22:	3a 27       	eor	r19, r26
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <__stack+0x42b>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
     d26:	22 0f       	add	r18, r18
     d28:	33 1f       	adc	r19, r19
     d2a:	41 50       	subi	r20, 0x01	; 1
     d2c:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
     d2e:	91 f7       	brne	.-28     	; 0xd14 <__stack+0x415>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
     d30:	98 2f       	mov	r25, r24
     d32:	88 27       	eor	r24, r24
     d34:	82 27       	eor	r24, r18
     d36:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
     d38:	e6 17       	cp	r30, r22
     d3a:	f7 07       	cpc	r31, r23
     d3c:	09 f7       	brne	.-62     	; 0xd00 <__stack+0x401>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
     d3e:	7c 01       	movw	r14, r24
     d40:	40 e1       	ldi	r20, 0x10	; 16
     d42:	6f e2       	ldi	r22, 0x2F	; 47
     d44:	75 e0       	ldi	r23, 0x05	; 5
     d46:	0e 94 04 3b 	call	0x7608	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
     d4a:	8f e2       	ldi	r24, 0x2F	; 47
     d4c:	95 e0       	ldi	r25, 0x05	; 5
     d4e:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <strupr>
	if(crcXmodem < 0x10)
     d52:	b0 e1       	ldi	r27, 0x10	; 16
     d54:	eb 16       	cp	r14, r27
     d56:	f1 04       	cpc	r15, r1
     d58:	38 f4       	brcc	.+14     	; 0xd68 <__stack+0x469>
	{
		tx_string[cnt+4] = crc[0];
     d5a:	80 91 2f 05 	lds	r24, 0x052F
     d5e:	8e 8f       	std	Y+30, r24	; 0x1e
		tx_string[cnt+3] = '0';
     d60:	80 e3       	ldi	r24, 0x30	; 48
     d62:	8d 8f       	std	Y+29, r24	; 0x1d
		tx_string[cnt+2] = '0';
     d64:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+1] = '0';
     d66:	8b 8f       	std	Y+27, r24	; 0x1b
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
     d68:	c7 01       	movw	r24, r14
     d6a:	40 97       	sbiw	r24, 0x10	; 16
     d6c:	80 3f       	cpi	r24, 0xF0	; 240
     d6e:	91 05       	cpc	r25, r1
     d70:	48 f4       	brcc	.+18     	; 0xd84 <__stack+0x485>
	{
		tx_string[cnt+4] = crc[1];
     d72:	ef e2       	ldi	r30, 0x2F	; 47
     d74:	f5 e0       	ldi	r31, 0x05	; 5
     d76:	81 81       	ldd	r24, Z+1	; 0x01
     d78:	8e 8f       	std	Y+30, r24	; 0x1e
		tx_string[cnt+3] = crc[0];
     d7a:	80 81       	ld	r24, Z
     d7c:	8d 8f       	std	Y+29, r24	; 0x1d
		tx_string[cnt+2] = '0';
     d7e:	80 e3       	ldi	r24, 0x30	; 48
     d80:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+1] = '0';		
     d82:	8b 8f       	std	Y+27, r24	; 0x1b
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
     d84:	c7 01       	movw	r24, r14
     d86:	9a 95       	dec	r25
     d88:	81 15       	cp	r24, r1
     d8a:	9f 40       	sbci	r25, 0x0F	; 15
     d8c:	50 f4       	brcc	.+20     	; 0xda2 <__stack+0x4a3>
	{
		tx_string[cnt+4] = crc[2];
     d8e:	ef e2       	ldi	r30, 0x2F	; 47
     d90:	f5 e0       	ldi	r31, 0x05	; 5
     d92:	82 81       	ldd	r24, Z+2	; 0x02
     d94:	8e 8f       	std	Y+30, r24	; 0x1e
		tx_string[cnt+3] = crc[1];
     d96:	81 81       	ldd	r24, Z+1	; 0x01
     d98:	8d 8f       	std	Y+29, r24	; 0x1d
		tx_string[cnt+2] = crc[0];
     d9a:	80 81       	ld	r24, Z
     d9c:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+1] = '0';		
     d9e:	80 e3       	ldi	r24, 0x30	; 48
     da0:	8b 8f       	std	Y+27, r24	; 0x1b
	}
	if(crcXmodem >= 0x1000)
     da2:	e1 14       	cp	r14, r1
     da4:	f0 e1       	ldi	r31, 0x10	; 16
     da6:	ff 06       	cpc	r15, r31
     da8:	50 f0       	brcs	.+20     	; 0xdbe <__stack+0x4bf>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
     daa:	ef e2       	ldi	r30, 0x2F	; 47
     dac:	f5 e0       	ldi	r31, 0x05	; 5
     dae:	80 81       	ld	r24, Z
     db0:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+2] = crc[1];
     db2:	81 81       	ldd	r24, Z+1	; 0x01
     db4:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+3] = crc[2];
     db6:	82 81       	ldd	r24, Z+2	; 0x02
     db8:	8d 8f       	std	Y+29, r24	; 0x1d
		tx_string[cnt+4] = crc[3];
     dba:	83 81       	ldd	r24, Z+3	; 0x03
     dbc:	8e 8f       	std	Y+30, r24	; 0x1e
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
     dbe:	8d e0       	ldi	r24, 0x0D	; 13
     dc0:	8f 8f       	std	Y+31, r24	; 0x1f
     dc2:	ae 01       	movw	r20, r28
     dc4:	40 5e       	subi	r20, 0xE0	; 224
     dc6:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
     dc8:	e7 e5       	ldi	r30, 0x57	; 87
     dca:	f5 e0       	ldi	r31, 0x05	; 5
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
     dcc:	61 ec       	ldi	r22, 0xC1	; 193
     dce:	70 e0       	ldi	r23, 0x00	; 0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     dd0:	30 e0       	ldi	r19, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
     dd2:	d8 01       	movw	r26, r16
     dd4:	8d 91       	ld	r24, X+
     dd6:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
     dd8:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
     dda:	21 81       	ldd	r18, Z+1	; 0x01
     ddc:	90 81       	ld	r25, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
     dde:	29 13       	cpse	r18, r25
     de0:	04 c0       	rjmp	.+8      	; 0xdea <__stack+0x4eb>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
     de2:	db 01       	movw	r26, r22
     de4:	9c 91       	ld	r25, X
     de6:	90 62       	ori	r25, 0x20	; 32
     de8:	9c 93       	st	X, r25
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
     dea:	90 81       	ld	r25, Z
     dec:	a3 81       	ldd	r26, Z+3	; 0x03
     dee:	b4 81       	ldd	r27, Z+4	; 0x04
     df0:	a9 0f       	add	r26, r25
     df2:	b1 1d       	adc	r27, r1
     df4:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
     df6:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     df8:	a2 2f       	mov	r26, r18
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	82 81       	ldd	r24, Z+2	; 0x02
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	01 97       	sbiw	r24, 0x01	; 1
     e02:	a8 17       	cp	r26, r24
     e04:	b9 07       	cpc	r27, r25
     e06:	11 f0       	breq	.+4      	; 0xe0c <__stack+0x50d>
     e08:	2f 5f       	subi	r18, 0xFF	; 255
     e0a:	01 c0       	rjmp	.+2      	; 0xe0e <__stack+0x50f>
     e0c:	23 2f       	mov	r18, r19
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
     e0e:	20 83       	st	Z, r18
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
     e10:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
     e12:	04 17       	cp	r16, r20
     e14:	15 07       	cpc	r17, r21
     e16:	e9 f6       	brne	.-70     	; 0xdd2 <__stack+0x4d3>
     e18:	0c 94 ed 13 	jmp	0x27da	; 0x27da <__stack+0x1edb>
		if(rx_string[10] == '1')
		{
			ch0.heaterEnable = true;
			printStatus("ON");
		}
		else if(rx_string[10] == '0')
     e1c:	80 33       	cpi	r24, 0x30	; 48
     e1e:	11 f0       	breq	.+4      	; 0xe24 <__stack+0x525>
     e20:	0c 94 ed 13 	jmp	0x27da	; 0x27da <__stack+0x1edb>
		{
			ch0.heaterEnable = false;
     e24:	10 92 28 03 	sts	0x0328, r1
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
     e28:	81 e2       	ldi	r24, 0x21	; 33
     e2a:	8d 8b       	std	Y+21, r24	; 0x15
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
     e2c:	e9 e3       	ldi	r30, 0x39	; 57
     e2e:	f5 e0       	ldi	r31, 0x05	; 5
     e30:	81 81       	ldd	r24, Z+1	; 0x01
     e32:	8e 8b       	std	Y+22, r24	; 0x16
     e34:	82 81       	ldd	r24, Z+2	; 0x02
     e36:	8f 8b       	std	Y+23, r24	; 0x17
     e38:	83 81       	ldd	r24, Z+3	; 0x03
     e3a:	88 8f       	std	Y+24, r24	; 0x18
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
     e3c:	8f e4       	ldi	r24, 0x4F	; 79
     e3e:	89 8f       	std	Y+25, r24	; 0x19
     e40:	86 e4       	ldi	r24, 0x46	; 70
     e42:	8a 8f       	std	Y+26, r24	; 0x1a
     e44:	8b 8f       	std	Y+27, r24	; 0x1b
     e46:	1c 8e       	std	Y+28, r1	; 0x1c
     e48:	1d 8e       	std	Y+29, r1	; 0x1d
     e4a:	1e 8e       	std	Y+30, r1	; 0x1e
     e4c:	8e 01       	movw	r16, r28
     e4e:	0b 5e       	subi	r16, 0xEB	; 235
     e50:	1f 4f       	sbci	r17, 0xFF	; 255
     e52:	be 01       	movw	r22, r28
     e54:	64 5e       	subi	r22, 0xE4	; 228
     e56:	7f 4f       	sbci	r23, 0xFF	; 255
     e58:	f8 01       	movw	r30, r16
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
     e5e:	b8 e0       	ldi	r27, 0x08	; 8
     e60:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
     e62:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
     e64:	29 2f       	mov	r18, r25
     e66:	33 27       	eor	r19, r19
     e68:	27 fd       	sbrc	r18, 7
     e6a:	3a 95       	dec	r19
     e6c:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
     e6e:	32 2f       	mov	r19, r18
     e70:	22 27       	eor	r18, r18
     e72:	4b 2f       	mov	r20, r27
     e74:	5f 2d       	mov	r21, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
     e76:	33 23       	and	r19, r19
     e78:	3c f4       	brge	.+14     	; 0xe88 <__stack+0x589>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
     e7a:	22 0f       	add	r18, r18
     e7c:	33 1f       	adc	r19, r19
     e7e:	a1 e2       	ldi	r26, 0x21	; 33
     e80:	2a 27       	eor	r18, r26
     e82:	a0 e1       	ldi	r26, 0x10	; 16
     e84:	3a 27       	eor	r19, r26
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <__stack+0x58d>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
     e88:	22 0f       	add	r18, r18
     e8a:	33 1f       	adc	r19, r19
     e8c:	41 50       	subi	r20, 0x01	; 1
     e8e:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
     e90:	91 f7       	brne	.-28     	; 0xe76 <__stack+0x577>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
     e92:	98 2f       	mov	r25, r24
     e94:	88 27       	eor	r24, r24
     e96:	82 27       	eor	r24, r18
     e98:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
     e9a:	e6 17       	cp	r30, r22
     e9c:	f7 07       	cpc	r31, r23
     e9e:	09 f7       	brne	.-62     	; 0xe62 <__stack+0x563>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
     ea0:	7c 01       	movw	r14, r24
     ea2:	40 e1       	ldi	r20, 0x10	; 16
     ea4:	6f e2       	ldi	r22, 0x2F	; 47
     ea6:	75 e0       	ldi	r23, 0x05	; 5
     ea8:	0e 94 04 3b 	call	0x7608	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
     eac:	8f e2       	ldi	r24, 0x2F	; 47
     eae:	95 e0       	ldi	r25, 0x05	; 5
     eb0:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <strupr>
	if(crcXmodem < 0x10)
     eb4:	b0 e1       	ldi	r27, 0x10	; 16
     eb6:	eb 16       	cp	r14, r27
     eb8:	f1 04       	cpc	r15, r1
     eba:	38 f4       	brcc	.+14     	; 0xeca <__stack+0x5cb>
	{
		tx_string[cnt+4] = crc[0];
     ebc:	80 91 2f 05 	lds	r24, 0x052F
     ec0:	8f 8f       	std	Y+31, r24	; 0x1f
		tx_string[cnt+3] = '0';
     ec2:	80 e3       	ldi	r24, 0x30	; 48
     ec4:	8e 8f       	std	Y+30, r24	; 0x1e
		tx_string[cnt+2] = '0';
     ec6:	8d 8f       	std	Y+29, r24	; 0x1d
		tx_string[cnt+1] = '0';
     ec8:	8c 8f       	std	Y+28, r24	; 0x1c
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
     eca:	c7 01       	movw	r24, r14
     ecc:	40 97       	sbiw	r24, 0x10	; 16
     ece:	80 3f       	cpi	r24, 0xF0	; 240
     ed0:	91 05       	cpc	r25, r1
     ed2:	48 f4       	brcc	.+18     	; 0xee6 <__stack+0x5e7>
	{
		tx_string[cnt+4] = crc[1];
     ed4:	ef e2       	ldi	r30, 0x2F	; 47
     ed6:	f5 e0       	ldi	r31, 0x05	; 5
     ed8:	81 81       	ldd	r24, Z+1	; 0x01
     eda:	8f 8f       	std	Y+31, r24	; 0x1f
		tx_string[cnt+3] = crc[0];
     edc:	80 81       	ld	r24, Z
     ede:	8e 8f       	std	Y+30, r24	; 0x1e
		tx_string[cnt+2] = '0';
     ee0:	80 e3       	ldi	r24, 0x30	; 48
     ee2:	8d 8f       	std	Y+29, r24	; 0x1d
		tx_string[cnt+1] = '0';		
     ee4:	8c 8f       	std	Y+28, r24	; 0x1c
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
     ee6:	c7 01       	movw	r24, r14
     ee8:	9a 95       	dec	r25
     eea:	81 15       	cp	r24, r1
     eec:	9f 40       	sbci	r25, 0x0F	; 15
     eee:	50 f4       	brcc	.+20     	; 0xf04 <__stack+0x605>
	{
		tx_string[cnt+4] = crc[2];
     ef0:	ef e2       	ldi	r30, 0x2F	; 47
     ef2:	f5 e0       	ldi	r31, 0x05	; 5
     ef4:	82 81       	ldd	r24, Z+2	; 0x02
     ef6:	8f 8f       	std	Y+31, r24	; 0x1f
		tx_string[cnt+3] = crc[1];
     ef8:	81 81       	ldd	r24, Z+1	; 0x01
     efa:	8e 8f       	std	Y+30, r24	; 0x1e
		tx_string[cnt+2] = crc[0];
     efc:	80 81       	ld	r24, Z
     efe:	8d 8f       	std	Y+29, r24	; 0x1d
		tx_string[cnt+1] = '0';		
     f00:	80 e3       	ldi	r24, 0x30	; 48
     f02:	8c 8f       	std	Y+28, r24	; 0x1c
	}
	if(crcXmodem >= 0x1000)
     f04:	e1 14       	cp	r14, r1
     f06:	f0 e1       	ldi	r31, 0x10	; 16
     f08:	ff 06       	cpc	r15, r31
     f0a:	50 f0       	brcs	.+20     	; 0xf20 <__stack+0x621>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
     f0c:	ef e2       	ldi	r30, 0x2F	; 47
     f0e:	f5 e0       	ldi	r31, 0x05	; 5
     f10:	80 81       	ld	r24, Z
     f12:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+2] = crc[1];
     f14:	81 81       	ldd	r24, Z+1	; 0x01
     f16:	8d 8f       	std	Y+29, r24	; 0x1d
		tx_string[cnt+3] = crc[2];
     f18:	82 81       	ldd	r24, Z+2	; 0x02
     f1a:	8e 8f       	std	Y+30, r24	; 0x1e
		tx_string[cnt+4] = crc[3];
     f1c:	83 81       	ldd	r24, Z+3	; 0x03
     f1e:	8f 8f       	std	Y+31, r24	; 0x1f
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
     f20:	8d e0       	ldi	r24, 0x0D	; 13
     f22:	88 a3       	std	Y+32, r24	; 0x20
     f24:	ae 01       	movw	r20, r28
     f26:	4f 5d       	subi	r20, 0xDF	; 223
     f28:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
     f2a:	e7 e5       	ldi	r30, 0x57	; 87
     f2c:	f5 e0       	ldi	r31, 0x05	; 5
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
     f2e:	61 ec       	ldi	r22, 0xC1	; 193
     f30:	70 e0       	ldi	r23, 0x00	; 0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     f32:	30 e0       	ldi	r19, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
     f34:	d8 01       	movw	r26, r16
     f36:	8d 91       	ld	r24, X+
     f38:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
     f3a:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
     f3c:	21 81       	ldd	r18, Z+1	; 0x01
     f3e:	90 81       	ld	r25, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
     f40:	29 13       	cpse	r18, r25
     f42:	04 c0       	rjmp	.+8      	; 0xf4c <__stack+0x64d>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
     f44:	db 01       	movw	r26, r22
     f46:	9c 91       	ld	r25, X
     f48:	90 62       	ori	r25, 0x20	; 32
     f4a:	9c 93       	st	X, r25
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
     f4c:	90 81       	ld	r25, Z
     f4e:	a3 81       	ldd	r26, Z+3	; 0x03
     f50:	b4 81       	ldd	r27, Z+4	; 0x04
     f52:	a9 0f       	add	r26, r25
     f54:	b1 1d       	adc	r27, r1
     f56:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
     f58:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     f5a:	a2 2f       	mov	r26, r18
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	82 81       	ldd	r24, Z+2	; 0x02
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	01 97       	sbiw	r24, 0x01	; 1
     f64:	a8 17       	cp	r26, r24
     f66:	b9 07       	cpc	r27, r25
     f68:	11 f0       	breq	.+4      	; 0xf6e <__stack+0x66f>
     f6a:	2f 5f       	subi	r18, 0xFF	; 255
     f6c:	01 c0       	rjmp	.+2      	; 0xf70 <__stack+0x671>
     f6e:	23 2f       	mov	r18, r19
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
     f70:	20 83       	st	Z, r18
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
     f72:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
     f74:	04 17       	cp	r16, r20
     f76:	15 07       	cpc	r17, r21
     f78:	e9 f6       	brne	.-70     	; 0xf34 <__stack+0x635>
     f7a:	0c 94 ed 13 	jmp	0x27da	; 0x27da <__stack+0x1edb>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
     f7e:	6e e1       	ldi	r22, 0x1E	; 30
     f80:	70 e0       	ldi	r23, 0x00	; 0
     f82:	89 e3       	ldi	r24, 0x39	; 57
     f84:	95 e0       	ldi	r25, 0x05	; 5
     f86:	0e 94 ef 3a 	call	0x75de	; 0x75de <strnlen>
     f8a:	05 97       	sbiw	r24, 0x05	; 5
     f8c:	ac 01       	movw	r20, r24
     f8e:	de 01       	movw	r26, r28
     f90:	11 96       	adiw	r26, 0x01	; 1
     f92:	9e 01       	movw	r18, r28
     f94:	2b 5e       	subi	r18, 0xEB	; 235
     f96:	3f 4f       	sbci	r19, 0xFF	; 255
     f98:	fd 01       	movw	r30, r26
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
     f9a:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
     f9c:	e2 17       	cp	r30, r18
     f9e:	f3 07       	cpc	r31, r19
     fa0:	e1 f7       	brne	.-8      	; 0xf9a <__stack+0x69b>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
     fa2:	4b 30       	cpi	r20, 0x0B	; 11
     fa4:	51 05       	cpc	r21, r1
     fa6:	54 f0       	brlt	.+20     	; 0xfbc <__stack+0x6bd>
     fa8:	e3 e4       	ldi	r30, 0x43	; 67
     faa:	f5 e0       	ldi	r31, 0x05	; 5
     fac:	9c 01       	movw	r18, r24
     fae:	27 5c       	subi	r18, 0xC7	; 199
     fb0:	3a 4f       	sbci	r19, 0xFA	; 250
	{
		param[idx] = stringToParse[i];
     fb2:	91 91       	ld	r25, Z+
     fb4:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
     fb6:	e2 17       	cp	r30, r18
     fb8:	f3 07       	cpc	r31, r19
     fba:	d9 f7       	brne	.-10     	; 0xfb2 <__stack+0x6b3>
		}
		break;
		
		case 155:	// Set Temperature error window
		ParamParse(rx_string, param);
		ch0.tempErrorWin = atof(param);
     fbc:	ce 01       	movw	r24, r28
     fbe:	01 96       	adiw	r24, 0x01	; 1
     fc0:	0e 94 8a 3a 	call	0x7514	; 0x7514 <atof>
     fc4:	60 93 1a 03 	sts	0x031A, r22
     fc8:	70 93 1b 03 	sts	0x031B, r23
     fcc:	80 93 1c 03 	sts	0x031C, r24
     fd0:	90 93 1d 03 	sts	0x031D, r25
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
     fd4:	81 e2       	ldi	r24, 0x21	; 33
     fd6:	8d 8b       	std	Y+21, r24	; 0x15
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
     fd8:	e9 e3       	ldi	r30, 0x39	; 57
     fda:	f5 e0       	ldi	r31, 0x05	; 5
     fdc:	81 81       	ldd	r24, Z+1	; 0x01
     fde:	8e 8b       	std	Y+22, r24	; 0x16
     fe0:	82 81       	ldd	r24, Z+2	; 0x02
     fe2:	8f 8b       	std	Y+23, r24	; 0x17
     fe4:	83 81       	ldd	r24, Z+3	; 0x03
     fe6:	88 8f       	std	Y+24, r24	; 0x18
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
     fe8:	19 8e       	std	Y+25, r1	; 0x19
     fea:	1a 8e       	std	Y+26, r1	; 0x1a
     fec:	1b 8e       	std	Y+27, r1	; 0x1b
     fee:	8e 01       	movw	r16, r28
     ff0:	0b 5e       	subi	r16, 0xEB	; 235
     ff2:	1f 4f       	sbci	r17, 0xFF	; 255
     ff4:	be 01       	movw	r22, r28
     ff6:	67 5e       	subi	r22, 0xE7	; 231
     ff8:	7f 4f       	sbci	r23, 0xFF	; 255
     ffa:	f8 01       	movw	r30, r16
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    1000:	b8 e0       	ldi	r27, 0x08	; 8
    1002:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    1004:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    1006:	29 2f       	mov	r18, r25
    1008:	33 27       	eor	r19, r19
    100a:	27 fd       	sbrc	r18, 7
    100c:	3a 95       	dec	r19
    100e:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    1010:	32 2f       	mov	r19, r18
    1012:	22 27       	eor	r18, r18
    1014:	4b 2f       	mov	r20, r27
    1016:	5f 2d       	mov	r21, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    1018:	33 23       	and	r19, r19
    101a:	3c f4       	brge	.+14     	; 0x102a <__stack+0x72b>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    101c:	22 0f       	add	r18, r18
    101e:	33 1f       	adc	r19, r19
    1020:	a1 e2       	ldi	r26, 0x21	; 33
    1022:	2a 27       	eor	r18, r26
    1024:	a0 e1       	ldi	r26, 0x10	; 16
    1026:	3a 27       	eor	r19, r26
    1028:	02 c0       	rjmp	.+4      	; 0x102e <__stack+0x72f>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    102a:	22 0f       	add	r18, r18
    102c:	33 1f       	adc	r19, r19
    102e:	41 50       	subi	r20, 0x01	; 1
    1030:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    1032:	91 f7       	brne	.-28     	; 0x1018 <__stack+0x719>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    1034:	98 2f       	mov	r25, r24
    1036:	88 27       	eor	r24, r24
    1038:	82 27       	eor	r24, r18
    103a:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    103c:	e6 17       	cp	r30, r22
    103e:	f7 07       	cpc	r31, r23
    1040:	09 f7       	brne	.-62     	; 0x1004 <__stack+0x705>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    1042:	7c 01       	movw	r14, r24
    1044:	40 e1       	ldi	r20, 0x10	; 16
    1046:	6f e2       	ldi	r22, 0x2F	; 47
    1048:	75 e0       	ldi	r23, 0x05	; 5
    104a:	0e 94 04 3b 	call	0x7608	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    104e:	8f e2       	ldi	r24, 0x2F	; 47
    1050:	95 e0       	ldi	r25, 0x05	; 5
    1052:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <strupr>
	if(crcXmodem < 0x10)
    1056:	b0 e1       	ldi	r27, 0x10	; 16
    1058:	eb 16       	cp	r14, r27
    105a:	f1 04       	cpc	r15, r1
    105c:	38 f4       	brcc	.+14     	; 0x106c <__stack+0x76d>
	{
		tx_string[cnt+4] = crc[0];
    105e:	80 91 2f 05 	lds	r24, 0x052F
    1062:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+3] = '0';
    1064:	80 e3       	ldi	r24, 0x30	; 48
    1066:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+2] = '0';
    1068:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+1] = '0';
    106a:	89 8f       	std	Y+25, r24	; 0x19
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    106c:	c7 01       	movw	r24, r14
    106e:	40 97       	sbiw	r24, 0x10	; 16
    1070:	80 3f       	cpi	r24, 0xF0	; 240
    1072:	91 05       	cpc	r25, r1
    1074:	48 f4       	brcc	.+18     	; 0x1088 <__stack+0x789>
	{
		tx_string[cnt+4] = crc[1];
    1076:	ef e2       	ldi	r30, 0x2F	; 47
    1078:	f5 e0       	ldi	r31, 0x05	; 5
    107a:	81 81       	ldd	r24, Z+1	; 0x01
    107c:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+3] = crc[0];
    107e:	80 81       	ld	r24, Z
    1080:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+2] = '0';
    1082:	80 e3       	ldi	r24, 0x30	; 48
    1084:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+1] = '0';		
    1086:	89 8f       	std	Y+25, r24	; 0x19
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    1088:	c7 01       	movw	r24, r14
    108a:	9a 95       	dec	r25
    108c:	81 15       	cp	r24, r1
    108e:	9f 40       	sbci	r25, 0x0F	; 15
    1090:	50 f4       	brcc	.+20     	; 0x10a6 <__stack+0x7a7>
	{
		tx_string[cnt+4] = crc[2];
    1092:	ef e2       	ldi	r30, 0x2F	; 47
    1094:	f5 e0       	ldi	r31, 0x05	; 5
    1096:	82 81       	ldd	r24, Z+2	; 0x02
    1098:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+3] = crc[1];
    109a:	81 81       	ldd	r24, Z+1	; 0x01
    109c:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+2] = crc[0];
    109e:	80 81       	ld	r24, Z
    10a0:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+1] = '0';		
    10a2:	80 e3       	ldi	r24, 0x30	; 48
    10a4:	89 8f       	std	Y+25, r24	; 0x19
	}
	if(crcXmodem >= 0x1000)
    10a6:	e1 14       	cp	r14, r1
    10a8:	f0 e1       	ldi	r31, 0x10	; 16
    10aa:	ff 06       	cpc	r15, r31
    10ac:	50 f0       	brcs	.+20     	; 0x10c2 <__stack+0x7c3>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    10ae:	ef e2       	ldi	r30, 0x2F	; 47
    10b0:	f5 e0       	ldi	r31, 0x05	; 5
    10b2:	80 81       	ld	r24, Z
    10b4:	89 8f       	std	Y+25, r24	; 0x19
		tx_string[cnt+2] = crc[1];
    10b6:	81 81       	ldd	r24, Z+1	; 0x01
    10b8:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+3] = crc[2];
    10ba:	82 81       	ldd	r24, Z+2	; 0x02
    10bc:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+4] = crc[3];
    10be:	83 81       	ldd	r24, Z+3	; 0x03
    10c0:	8c 8f       	std	Y+28, r24	; 0x1c
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    10c2:	8d e0       	ldi	r24, 0x0D	; 13
    10c4:	8d 8f       	std	Y+29, r24	; 0x1d
    10c6:	ae 01       	movw	r20, r28
    10c8:	42 5e       	subi	r20, 0xE2	; 226
    10ca:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    10cc:	e7 e5       	ldi	r30, 0x57	; 87
    10ce:	f5 e0       	ldi	r31, 0x05	; 5
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    10d0:	61 ec       	ldi	r22, 0xC1	; 193
    10d2:	70 e0       	ldi	r23, 0x00	; 0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    10d4:	30 e0       	ldi	r19, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    10d6:	d8 01       	movw	r26, r16
    10d8:	8d 91       	ld	r24, X+
    10da:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    10dc:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    10de:	21 81       	ldd	r18, Z+1	; 0x01
    10e0:	90 81       	ld	r25, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    10e2:	29 13       	cpse	r18, r25
    10e4:	04 c0       	rjmp	.+8      	; 0x10ee <__stack+0x7ef>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    10e6:	db 01       	movw	r26, r22
    10e8:	9c 91       	ld	r25, X
    10ea:	90 62       	ori	r25, 0x20	; 32
    10ec:	9c 93       	st	X, r25
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    10ee:	90 81       	ld	r25, Z
    10f0:	a3 81       	ldd	r26, Z+3	; 0x03
    10f2:	b4 81       	ldd	r27, Z+4	; 0x04
    10f4:	a9 0f       	add	r26, r25
    10f6:	b1 1d       	adc	r27, r1
    10f8:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    10fa:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    10fc:	a2 2f       	mov	r26, r18
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	82 81       	ldd	r24, Z+2	; 0x02
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	01 97       	sbiw	r24, 0x01	; 1
    1106:	a8 17       	cp	r26, r24
    1108:	b9 07       	cpc	r27, r25
    110a:	11 f0       	breq	.+4      	; 0x1110 <__stack+0x811>
    110c:	2f 5f       	subi	r18, 0xFF	; 255
    110e:	01 c0       	rjmp	.+2      	; 0x1112 <__stack+0x813>
    1110:	23 2f       	mov	r18, r19
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    1112:	20 83       	st	Z, r18
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    1114:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    1116:	04 17       	cp	r16, r20
    1118:	15 07       	cpc	r17, r21
    111a:	e9 f6       	brne	.-70     	; 0x10d6 <__stack+0x7d7>
    111c:	0c 94 ed 13 	jmp	0x27da	; 0x27da <__stack+0x1edb>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    1120:	6e e1       	ldi	r22, 0x1E	; 30
    1122:	70 e0       	ldi	r23, 0x00	; 0
    1124:	89 e3       	ldi	r24, 0x39	; 57
    1126:	95 e0       	ldi	r25, 0x05	; 5
    1128:	0e 94 ef 3a 	call	0x75de	; 0x75de <strnlen>
    112c:	05 97       	sbiw	r24, 0x05	; 5
    112e:	ac 01       	movw	r20, r24
    1130:	de 01       	movw	r26, r28
    1132:	11 96       	adiw	r26, 0x01	; 1
    1134:	9e 01       	movw	r18, r28
    1136:	2b 5e       	subi	r18, 0xEB	; 235
    1138:	3f 4f       	sbci	r19, 0xFF	; 255
    113a:	fd 01       	movw	r30, r26
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    113c:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    113e:	e2 17       	cp	r30, r18
    1140:	f3 07       	cpc	r31, r19
    1142:	e1 f7       	brne	.-8      	; 0x113c <__stack+0x83d>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    1144:	4b 30       	cpi	r20, 0x0B	; 11
    1146:	51 05       	cpc	r21, r1
    1148:	54 f0       	brlt	.+20     	; 0x115e <__stack+0x85f>
    114a:	e3 e4       	ldi	r30, 0x43	; 67
    114c:	f5 e0       	ldi	r31, 0x05	; 5
    114e:	9c 01       	movw	r18, r24
    1150:	27 5c       	subi	r18, 0xC7	; 199
    1152:	3a 4f       	sbci	r19, 0xFA	; 250
	{
		param[idx] = stringToParse[i];
    1154:	91 91       	ld	r25, Z+
    1156:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    1158:	e2 17       	cp	r30, r18
    115a:	f3 07       	cpc	r31, r19
    115c:	d9 f7       	brne	.-10     	; 0x1154 <__stack+0x855>
		printStatus("");
		break;

		case 156:	// Set Temperature Settle time
		ParamParse(rx_string, param);
		ch0.tempSettleTime = atoi(param);
    115e:	ce 01       	movw	r24, r28
    1160:	01 96       	adiw	r24, 0x01	; 1
    1162:	0e 94 8d 3a 	call	0x751a	; 0x751a <atoi>
    1166:	90 93 21 03 	sts	0x0321, r25
    116a:	80 93 20 03 	sts	0x0320, r24
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    116e:	81 e2       	ldi	r24, 0x21	; 33
    1170:	8d 8b       	std	Y+21, r24	; 0x15
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    1172:	e9 e3       	ldi	r30, 0x39	; 57
    1174:	f5 e0       	ldi	r31, 0x05	; 5
    1176:	81 81       	ldd	r24, Z+1	; 0x01
    1178:	8e 8b       	std	Y+22, r24	; 0x16
    117a:	82 81       	ldd	r24, Z+2	; 0x02
    117c:	8f 8b       	std	Y+23, r24	; 0x17
    117e:	83 81       	ldd	r24, Z+3	; 0x03
    1180:	88 8f       	std	Y+24, r24	; 0x18
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    1182:	19 8e       	std	Y+25, r1	; 0x19
    1184:	1a 8e       	std	Y+26, r1	; 0x1a
    1186:	1b 8e       	std	Y+27, r1	; 0x1b
    1188:	8e 01       	movw	r16, r28
    118a:	0b 5e       	subi	r16, 0xEB	; 235
    118c:	1f 4f       	sbci	r17, 0xFF	; 255
    118e:	be 01       	movw	r22, r28
    1190:	67 5e       	subi	r22, 0xE7	; 231
    1192:	7f 4f       	sbci	r23, 0xFF	; 255
    1194:	f8 01       	movw	r30, r16
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    119a:	b8 e0       	ldi	r27, 0x08	; 8
    119c:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    119e:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    11a0:	29 2f       	mov	r18, r25
    11a2:	33 27       	eor	r19, r19
    11a4:	27 fd       	sbrc	r18, 7
    11a6:	3a 95       	dec	r19
    11a8:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    11aa:	32 2f       	mov	r19, r18
    11ac:	22 27       	eor	r18, r18
    11ae:	4b 2f       	mov	r20, r27
    11b0:	5f 2d       	mov	r21, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    11b2:	33 23       	and	r19, r19
    11b4:	3c f4       	brge	.+14     	; 0x11c4 <__stack+0x8c5>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    11b6:	22 0f       	add	r18, r18
    11b8:	33 1f       	adc	r19, r19
    11ba:	a1 e2       	ldi	r26, 0x21	; 33
    11bc:	2a 27       	eor	r18, r26
    11be:	a0 e1       	ldi	r26, 0x10	; 16
    11c0:	3a 27       	eor	r19, r26
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <__stack+0x8c9>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    11c4:	22 0f       	add	r18, r18
    11c6:	33 1f       	adc	r19, r19
    11c8:	41 50       	subi	r20, 0x01	; 1
    11ca:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    11cc:	91 f7       	brne	.-28     	; 0x11b2 <__stack+0x8b3>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    11ce:	98 2f       	mov	r25, r24
    11d0:	88 27       	eor	r24, r24
    11d2:	82 27       	eor	r24, r18
    11d4:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    11d6:	e6 17       	cp	r30, r22
    11d8:	f7 07       	cpc	r31, r23
    11da:	09 f7       	brne	.-62     	; 0x119e <__stack+0x89f>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    11dc:	7c 01       	movw	r14, r24
    11de:	40 e1       	ldi	r20, 0x10	; 16
    11e0:	6f e2       	ldi	r22, 0x2F	; 47
    11e2:	75 e0       	ldi	r23, 0x05	; 5
    11e4:	0e 94 04 3b 	call	0x7608	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    11e8:	8f e2       	ldi	r24, 0x2F	; 47
    11ea:	95 e0       	ldi	r25, 0x05	; 5
    11ec:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <strupr>
	if(crcXmodem < 0x10)
    11f0:	b0 e1       	ldi	r27, 0x10	; 16
    11f2:	eb 16       	cp	r14, r27
    11f4:	f1 04       	cpc	r15, r1
    11f6:	38 f4       	brcc	.+14     	; 0x1206 <__stack+0x907>
	{
		tx_string[cnt+4] = crc[0];
    11f8:	80 91 2f 05 	lds	r24, 0x052F
    11fc:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+3] = '0';
    11fe:	80 e3       	ldi	r24, 0x30	; 48
    1200:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+2] = '0';
    1202:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+1] = '0';
    1204:	89 8f       	std	Y+25, r24	; 0x19
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    1206:	c7 01       	movw	r24, r14
    1208:	40 97       	sbiw	r24, 0x10	; 16
    120a:	80 3f       	cpi	r24, 0xF0	; 240
    120c:	91 05       	cpc	r25, r1
    120e:	48 f4       	brcc	.+18     	; 0x1222 <__stack+0x923>
	{
		tx_string[cnt+4] = crc[1];
    1210:	ef e2       	ldi	r30, 0x2F	; 47
    1212:	f5 e0       	ldi	r31, 0x05	; 5
    1214:	81 81       	ldd	r24, Z+1	; 0x01
    1216:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+3] = crc[0];
    1218:	80 81       	ld	r24, Z
    121a:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+2] = '0';
    121c:	80 e3       	ldi	r24, 0x30	; 48
    121e:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+1] = '0';		
    1220:	89 8f       	std	Y+25, r24	; 0x19
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    1222:	c7 01       	movw	r24, r14
    1224:	9a 95       	dec	r25
    1226:	81 15       	cp	r24, r1
    1228:	9f 40       	sbci	r25, 0x0F	; 15
    122a:	50 f4       	brcc	.+20     	; 0x1240 <__stack+0x941>
	{
		tx_string[cnt+4] = crc[2];
    122c:	ef e2       	ldi	r30, 0x2F	; 47
    122e:	f5 e0       	ldi	r31, 0x05	; 5
    1230:	82 81       	ldd	r24, Z+2	; 0x02
    1232:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+3] = crc[1];
    1234:	81 81       	ldd	r24, Z+1	; 0x01
    1236:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+2] = crc[0];
    1238:	80 81       	ld	r24, Z
    123a:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+1] = '0';		
    123c:	80 e3       	ldi	r24, 0x30	; 48
    123e:	89 8f       	std	Y+25, r24	; 0x19
	}
	if(crcXmodem >= 0x1000)
    1240:	e1 14       	cp	r14, r1
    1242:	f0 e1       	ldi	r31, 0x10	; 16
    1244:	ff 06       	cpc	r15, r31
    1246:	50 f0       	brcs	.+20     	; 0x125c <__stack+0x95d>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    1248:	ef e2       	ldi	r30, 0x2F	; 47
    124a:	f5 e0       	ldi	r31, 0x05	; 5
    124c:	80 81       	ld	r24, Z
    124e:	89 8f       	std	Y+25, r24	; 0x19
		tx_string[cnt+2] = crc[1];
    1250:	81 81       	ldd	r24, Z+1	; 0x01
    1252:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+3] = crc[2];
    1254:	82 81       	ldd	r24, Z+2	; 0x02
    1256:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+4] = crc[3];
    1258:	83 81       	ldd	r24, Z+3	; 0x03
    125a:	8c 8f       	std	Y+28, r24	; 0x1c
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    125c:	8d e0       	ldi	r24, 0x0D	; 13
    125e:	8d 8f       	std	Y+29, r24	; 0x1d
    1260:	ae 01       	movw	r20, r28
    1262:	42 5e       	subi	r20, 0xE2	; 226
    1264:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    1266:	e7 e5       	ldi	r30, 0x57	; 87
    1268:	f5 e0       	ldi	r31, 0x05	; 5
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    126a:	61 ec       	ldi	r22, 0xC1	; 193
    126c:	70 e0       	ldi	r23, 0x00	; 0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    126e:	30 e0       	ldi	r19, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    1270:	d8 01       	movw	r26, r16
    1272:	8d 91       	ld	r24, X+
    1274:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    1276:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    1278:	21 81       	ldd	r18, Z+1	; 0x01
    127a:	90 81       	ld	r25, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    127c:	29 13       	cpse	r18, r25
    127e:	04 c0       	rjmp	.+8      	; 0x1288 <__stack+0x989>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    1280:	db 01       	movw	r26, r22
    1282:	9c 91       	ld	r25, X
    1284:	90 62       	ori	r25, 0x20	; 32
    1286:	9c 93       	st	X, r25
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    1288:	90 81       	ld	r25, Z
    128a:	a3 81       	ldd	r26, Z+3	; 0x03
    128c:	b4 81       	ldd	r27, Z+4	; 0x04
    128e:	a9 0f       	add	r26, r25
    1290:	b1 1d       	adc	r27, r1
    1292:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    1294:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    1296:	a2 2f       	mov	r26, r18
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	82 81       	ldd	r24, Z+2	; 0x02
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	01 97       	sbiw	r24, 0x01	; 1
    12a0:	a8 17       	cp	r26, r24
    12a2:	b9 07       	cpc	r27, r25
    12a4:	11 f0       	breq	.+4      	; 0x12aa <__stack+0x9ab>
    12a6:	2f 5f       	subi	r18, 0xFF	; 255
    12a8:	01 c0       	rjmp	.+2      	; 0x12ac <__stack+0x9ad>
    12aa:	23 2f       	mov	r18, r19
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    12ac:	20 83       	st	Z, r18
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    12ae:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    12b0:	04 17       	cp	r16, r20
    12b2:	15 07       	cpc	r17, r21
    12b4:	e9 f6       	brne	.-70     	; 0x1270 <__stack+0x971>
    12b6:	0c 94 ed 13 	jmp	0x27da	; 0x27da <__stack+0x1edb>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    12ba:	6e e1       	ldi	r22, 0x1E	; 30
    12bc:	70 e0       	ldi	r23, 0x00	; 0
    12be:	89 e3       	ldi	r24, 0x39	; 57
    12c0:	95 e0       	ldi	r25, 0x05	; 5
    12c2:	0e 94 ef 3a 	call	0x75de	; 0x75de <strnlen>
    12c6:	05 97       	sbiw	r24, 0x05	; 5
    12c8:	ac 01       	movw	r20, r24
    12ca:	de 01       	movw	r26, r28
    12cc:	11 96       	adiw	r26, 0x01	; 1
    12ce:	9e 01       	movw	r18, r28
    12d0:	2b 5e       	subi	r18, 0xEB	; 235
    12d2:	3f 4f       	sbci	r19, 0xFF	; 255
    12d4:	fd 01       	movw	r30, r26
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    12d6:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    12d8:	e2 17       	cp	r30, r18
    12da:	f3 07       	cpc	r31, r19
    12dc:	e1 f7       	brne	.-8      	; 0x12d6 <__stack+0x9d7>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    12de:	4b 30       	cpi	r20, 0x0B	; 11
    12e0:	51 05       	cpc	r21, r1
    12e2:	54 f0       	brlt	.+20     	; 0x12f8 <__stack+0x9f9>
    12e4:	e3 e4       	ldi	r30, 0x43	; 67
    12e6:	f5 e0       	ldi	r31, 0x05	; 5
    12e8:	9c 01       	movw	r18, r24
    12ea:	27 5c       	subi	r18, 0xC7	; 199
    12ec:	3a 4f       	sbci	r19, 0xFA	; 250
	{
		param[idx] = stringToParse[i];
    12ee:	91 91       	ld	r25, Z+
    12f0:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    12f2:	e2 17       	cp	r30, r18
    12f4:	f3 07       	cpc	r31, r19
    12f6:	d9 f7       	brne	.-10     	; 0x12ee <__stack+0x9ef>
		break;
		
		// *** Channel 1 ***
		case 250:	// ch1.TempSetPoint
		ParamParse(rx_string, param);
		ch1.TempSetPoint = atof(param);
    12f8:	ce 01       	movw	r24, r28
    12fa:	01 96       	adiw	r24, 0x01	; 1
    12fc:	0e 94 8a 3a 	call	0x7514	; 0x7514 <atof>
    1300:	60 93 63 02 	sts	0x0263, r22
    1304:	70 93 64 02 	sts	0x0264, r23
    1308:	80 93 65 02 	sts	0x0265, r24
    130c:	90 93 66 02 	sts	0x0266, r25
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    1310:	81 e2       	ldi	r24, 0x21	; 33
    1312:	8d 8b       	std	Y+21, r24	; 0x15
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    1314:	e9 e3       	ldi	r30, 0x39	; 57
    1316:	f5 e0       	ldi	r31, 0x05	; 5
    1318:	81 81       	ldd	r24, Z+1	; 0x01
    131a:	8e 8b       	std	Y+22, r24	; 0x16
    131c:	82 81       	ldd	r24, Z+2	; 0x02
    131e:	8f 8b       	std	Y+23, r24	; 0x17
    1320:	83 81       	ldd	r24, Z+3	; 0x03
    1322:	88 8f       	std	Y+24, r24	; 0x18
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    1324:	19 8e       	std	Y+25, r1	; 0x19
    1326:	1a 8e       	std	Y+26, r1	; 0x1a
    1328:	1b 8e       	std	Y+27, r1	; 0x1b
    132a:	8e 01       	movw	r16, r28
    132c:	0b 5e       	subi	r16, 0xEB	; 235
    132e:	1f 4f       	sbci	r17, 0xFF	; 255
    1330:	be 01       	movw	r22, r28
    1332:	67 5e       	subi	r22, 0xE7	; 231
    1334:	7f 4f       	sbci	r23, 0xFF	; 255
    1336:	f8 01       	movw	r30, r16
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    133c:	b8 e0       	ldi	r27, 0x08	; 8
    133e:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    1340:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    1342:	29 2f       	mov	r18, r25
    1344:	33 27       	eor	r19, r19
    1346:	27 fd       	sbrc	r18, 7
    1348:	3a 95       	dec	r19
    134a:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    134c:	32 2f       	mov	r19, r18
    134e:	22 27       	eor	r18, r18
    1350:	4b 2f       	mov	r20, r27
    1352:	5f 2d       	mov	r21, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    1354:	33 23       	and	r19, r19
    1356:	3c f4       	brge	.+14     	; 0x1366 <__stack+0xa67>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    1358:	22 0f       	add	r18, r18
    135a:	33 1f       	adc	r19, r19
    135c:	a1 e2       	ldi	r26, 0x21	; 33
    135e:	2a 27       	eor	r18, r26
    1360:	a0 e1       	ldi	r26, 0x10	; 16
    1362:	3a 27       	eor	r19, r26
    1364:	02 c0       	rjmp	.+4      	; 0x136a <__stack+0xa6b>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    1366:	22 0f       	add	r18, r18
    1368:	33 1f       	adc	r19, r19
    136a:	41 50       	subi	r20, 0x01	; 1
    136c:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    136e:	91 f7       	brne	.-28     	; 0x1354 <__stack+0xa55>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    1370:	98 2f       	mov	r25, r24
    1372:	88 27       	eor	r24, r24
    1374:	82 27       	eor	r24, r18
    1376:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    1378:	e6 17       	cp	r30, r22
    137a:	f7 07       	cpc	r31, r23
    137c:	09 f7       	brne	.-62     	; 0x1340 <__stack+0xa41>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    137e:	7c 01       	movw	r14, r24
    1380:	40 e1       	ldi	r20, 0x10	; 16
    1382:	6f e2       	ldi	r22, 0x2F	; 47
    1384:	75 e0       	ldi	r23, 0x05	; 5
    1386:	0e 94 04 3b 	call	0x7608	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    138a:	8f e2       	ldi	r24, 0x2F	; 47
    138c:	95 e0       	ldi	r25, 0x05	; 5
    138e:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <strupr>
	if(crcXmodem < 0x10)
    1392:	b0 e1       	ldi	r27, 0x10	; 16
    1394:	eb 16       	cp	r14, r27
    1396:	f1 04       	cpc	r15, r1
    1398:	38 f4       	brcc	.+14     	; 0x13a8 <__stack+0xaa9>
	{
		tx_string[cnt+4] = crc[0];
    139a:	80 91 2f 05 	lds	r24, 0x052F
    139e:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+3] = '0';
    13a0:	80 e3       	ldi	r24, 0x30	; 48
    13a2:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+2] = '0';
    13a4:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+1] = '0';
    13a6:	89 8f       	std	Y+25, r24	; 0x19
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    13a8:	c7 01       	movw	r24, r14
    13aa:	40 97       	sbiw	r24, 0x10	; 16
    13ac:	80 3f       	cpi	r24, 0xF0	; 240
    13ae:	91 05       	cpc	r25, r1
    13b0:	48 f4       	brcc	.+18     	; 0x13c4 <__stack+0xac5>
	{
		tx_string[cnt+4] = crc[1];
    13b2:	ef e2       	ldi	r30, 0x2F	; 47
    13b4:	f5 e0       	ldi	r31, 0x05	; 5
    13b6:	81 81       	ldd	r24, Z+1	; 0x01
    13b8:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+3] = crc[0];
    13ba:	80 81       	ld	r24, Z
    13bc:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+2] = '0';
    13be:	80 e3       	ldi	r24, 0x30	; 48
    13c0:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+1] = '0';		
    13c2:	89 8f       	std	Y+25, r24	; 0x19
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    13c4:	c7 01       	movw	r24, r14
    13c6:	9a 95       	dec	r25
    13c8:	81 15       	cp	r24, r1
    13ca:	9f 40       	sbci	r25, 0x0F	; 15
    13cc:	50 f4       	brcc	.+20     	; 0x13e2 <__stack+0xae3>
	{
		tx_string[cnt+4] = crc[2];
    13ce:	ef e2       	ldi	r30, 0x2F	; 47
    13d0:	f5 e0       	ldi	r31, 0x05	; 5
    13d2:	82 81       	ldd	r24, Z+2	; 0x02
    13d4:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+3] = crc[1];
    13d6:	81 81       	ldd	r24, Z+1	; 0x01
    13d8:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+2] = crc[0];
    13da:	80 81       	ld	r24, Z
    13dc:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+1] = '0';		
    13de:	80 e3       	ldi	r24, 0x30	; 48
    13e0:	89 8f       	std	Y+25, r24	; 0x19
	}
	if(crcXmodem >= 0x1000)
    13e2:	e1 14       	cp	r14, r1
    13e4:	f0 e1       	ldi	r31, 0x10	; 16
    13e6:	ff 06       	cpc	r15, r31
    13e8:	50 f0       	brcs	.+20     	; 0x13fe <__stack+0xaff>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    13ea:	ef e2       	ldi	r30, 0x2F	; 47
    13ec:	f5 e0       	ldi	r31, 0x05	; 5
    13ee:	80 81       	ld	r24, Z
    13f0:	89 8f       	std	Y+25, r24	; 0x19
		tx_string[cnt+2] = crc[1];
    13f2:	81 81       	ldd	r24, Z+1	; 0x01
    13f4:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+3] = crc[2];
    13f6:	82 81       	ldd	r24, Z+2	; 0x02
    13f8:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+4] = crc[3];
    13fa:	83 81       	ldd	r24, Z+3	; 0x03
    13fc:	8c 8f       	std	Y+28, r24	; 0x1c
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    13fe:	8d e0       	ldi	r24, 0x0D	; 13
    1400:	8d 8f       	std	Y+29, r24	; 0x1d
    1402:	ae 01       	movw	r20, r28
    1404:	42 5e       	subi	r20, 0xE2	; 226
    1406:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    1408:	e7 e5       	ldi	r30, 0x57	; 87
    140a:	f5 e0       	ldi	r31, 0x05	; 5
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    140c:	61 ec       	ldi	r22, 0xC1	; 193
    140e:	70 e0       	ldi	r23, 0x00	; 0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    1410:	30 e0       	ldi	r19, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    1412:	d8 01       	movw	r26, r16
    1414:	8d 91       	ld	r24, X+
    1416:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    1418:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    141a:	21 81       	ldd	r18, Z+1	; 0x01
    141c:	90 81       	ld	r25, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    141e:	29 13       	cpse	r18, r25
    1420:	04 c0       	rjmp	.+8      	; 0x142a <__stack+0xb2b>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    1422:	db 01       	movw	r26, r22
    1424:	9c 91       	ld	r25, X
    1426:	90 62       	ori	r25, 0x20	; 32
    1428:	9c 93       	st	X, r25
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    142a:	90 81       	ld	r25, Z
    142c:	a3 81       	ldd	r26, Z+3	; 0x03
    142e:	b4 81       	ldd	r27, Z+4	; 0x04
    1430:	a9 0f       	add	r26, r25
    1432:	b1 1d       	adc	r27, r1
    1434:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    1436:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    1438:	a2 2f       	mov	r26, r18
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	82 81       	ldd	r24, Z+2	; 0x02
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	01 97       	sbiw	r24, 0x01	; 1
    1442:	a8 17       	cp	r26, r24
    1444:	b9 07       	cpc	r27, r25
    1446:	11 f0       	breq	.+4      	; 0x144c <__stack+0xb4d>
    1448:	2f 5f       	subi	r18, 0xFF	; 255
    144a:	01 c0       	rjmp	.+2      	; 0x144e <__stack+0xb4f>
    144c:	23 2f       	mov	r18, r19
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    144e:	20 83       	st	Z, r18
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    1450:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    1452:	04 17       	cp	r16, r20
    1454:	15 07       	cpc	r17, r21
    1456:	e9 f6       	brne	.-70     	; 0x1412 <__stack+0xb13>
    1458:	0c 94 ed 13 	jmp	0x27da	; 0x27da <__stack+0x1edb>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    145c:	6e e1       	ldi	r22, 0x1E	; 30
    145e:	70 e0       	ldi	r23, 0x00	; 0
    1460:	89 e3       	ldi	r24, 0x39	; 57
    1462:	95 e0       	ldi	r25, 0x05	; 5
    1464:	0e 94 ef 3a 	call	0x75de	; 0x75de <strnlen>
    1468:	05 97       	sbiw	r24, 0x05	; 5
    146a:	ac 01       	movw	r20, r24
    146c:	de 01       	movw	r26, r28
    146e:	11 96       	adiw	r26, 0x01	; 1
    1470:	9e 01       	movw	r18, r28
    1472:	2b 5e       	subi	r18, 0xEB	; 235
    1474:	3f 4f       	sbci	r19, 0xFF	; 255
    1476:	fd 01       	movw	r30, r26
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    1478:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    147a:	e2 17       	cp	r30, r18
    147c:	f3 07       	cpc	r31, r19
    147e:	e1 f7       	brne	.-8      	; 0x1478 <__stack+0xb79>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    1480:	4b 30       	cpi	r20, 0x0B	; 11
    1482:	51 05       	cpc	r21, r1
    1484:	54 f0       	brlt	.+20     	; 0x149a <__stack+0xb9b>
    1486:	e3 e4       	ldi	r30, 0x43	; 67
    1488:	f5 e0       	ldi	r31, 0x05	; 5
    148a:	9c 01       	movw	r18, r24
    148c:	27 5c       	subi	r18, 0xC7	; 199
    148e:	3a 4f       	sbci	r19, 0xFA	; 250
	{
		param[idx] = stringToParse[i];
    1490:	91 91       	ld	r25, Z+
    1492:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    1494:	e2 17       	cp	r30, r18
    1496:	f3 07       	cpc	r31, r19
    1498:	d9 f7       	brne	.-10     	; 0x1490 <__stack+0xb91>
		printStatus("");
		break;
		
		case 251:	// SetPgainCh1
		ParamParse(rx_string, param);
		ch1.Pgain = atof(param);
    149a:	ce 01       	movw	r24, r28
    149c:	01 96       	adiw	r24, 0x01	; 1
    149e:	0e 94 8a 3a 	call	0x7514	; 0x7514 <atof>
    14a2:	60 93 7f 02 	sts	0x027F, r22
    14a6:	70 93 80 02 	sts	0x0280, r23
    14aa:	80 93 81 02 	sts	0x0281, r24
    14ae:	90 93 82 02 	sts	0x0282, r25
		printStatus("");
    14b2:	8c e2       	ldi	r24, 0x2C	; 44
    14b4:	91 e0       	ldi	r25, 0x01	; 1
    14b6:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
		break;
    14ba:	0c 94 ed 13 	jmp	0x27da	; 0x27da <__stack+0x1edb>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    14be:	6e e1       	ldi	r22, 0x1E	; 30
    14c0:	70 e0       	ldi	r23, 0x00	; 0
    14c2:	89 e3       	ldi	r24, 0x39	; 57
    14c4:	95 e0       	ldi	r25, 0x05	; 5
    14c6:	0e 94 ef 3a 	call	0x75de	; 0x75de <strnlen>
    14ca:	05 97       	sbiw	r24, 0x05	; 5
    14cc:	ac 01       	movw	r20, r24
    14ce:	de 01       	movw	r26, r28
    14d0:	11 96       	adiw	r26, 0x01	; 1
    14d2:	9e 01       	movw	r18, r28
    14d4:	2b 5e       	subi	r18, 0xEB	; 235
    14d6:	3f 4f       	sbci	r19, 0xFF	; 255
    14d8:	fd 01       	movw	r30, r26
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    14da:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    14dc:	e2 17       	cp	r30, r18
    14de:	f3 07       	cpc	r31, r19
    14e0:	e1 f7       	brne	.-8      	; 0x14da <__stack+0xbdb>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    14e2:	4b 30       	cpi	r20, 0x0B	; 11
    14e4:	51 05       	cpc	r21, r1
    14e6:	54 f0       	brlt	.+20     	; 0x14fc <__stack+0xbfd>
    14e8:	e3 e4       	ldi	r30, 0x43	; 67
    14ea:	f5 e0       	ldi	r31, 0x05	; 5
    14ec:	9c 01       	movw	r18, r24
    14ee:	27 5c       	subi	r18, 0xC7	; 199
    14f0:	3a 4f       	sbci	r19, 0xFA	; 250
	{
		param[idx] = stringToParse[i];
    14f2:	91 91       	ld	r25, Z+
    14f4:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    14f6:	e2 17       	cp	r30, r18
    14f8:	f3 07       	cpc	r31, r19
    14fa:	d9 f7       	brne	.-10     	; 0x14f2 <__stack+0xbf3>
		printStatus("");
		break;
		
		case 252:	// SetIgainCh1
		ParamParse(rx_string, param);
		ch1.Igain = atof(param);
    14fc:	ce 01       	movw	r24, r28
    14fe:	01 96       	adiw	r24, 0x01	; 1
    1500:	0e 94 8a 3a 	call	0x7514	; 0x7514 <atof>
    1504:	60 93 83 02 	sts	0x0283, r22
    1508:	70 93 84 02 	sts	0x0284, r23
    150c:	80 93 85 02 	sts	0x0285, r24
    1510:	90 93 86 02 	sts	0x0286, r25
		printStatus("");
    1514:	8c e2       	ldi	r24, 0x2C	; 44
    1516:	91 e0       	ldi	r25, 0x01	; 1
    1518:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
		break;
    151c:	0c 94 ed 13 	jmp	0x27da	; 0x27da <__stack+0x1edb>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    1520:	6e e1       	ldi	r22, 0x1E	; 30
    1522:	70 e0       	ldi	r23, 0x00	; 0
    1524:	89 e3       	ldi	r24, 0x39	; 57
    1526:	95 e0       	ldi	r25, 0x05	; 5
    1528:	0e 94 ef 3a 	call	0x75de	; 0x75de <strnlen>
    152c:	05 97       	sbiw	r24, 0x05	; 5
    152e:	ac 01       	movw	r20, r24
    1530:	de 01       	movw	r26, r28
    1532:	11 96       	adiw	r26, 0x01	; 1
    1534:	9e 01       	movw	r18, r28
    1536:	2b 5e       	subi	r18, 0xEB	; 235
    1538:	3f 4f       	sbci	r19, 0xFF	; 255
    153a:	fd 01       	movw	r30, r26
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    153c:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    153e:	e2 17       	cp	r30, r18
    1540:	f3 07       	cpc	r31, r19
    1542:	e1 f7       	brne	.-8      	; 0x153c <__stack+0xc3d>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    1544:	4b 30       	cpi	r20, 0x0B	; 11
    1546:	51 05       	cpc	r21, r1
    1548:	54 f0       	brlt	.+20     	; 0x155e <__stack+0xc5f>
    154a:	e3 e4       	ldi	r30, 0x43	; 67
    154c:	f5 e0       	ldi	r31, 0x05	; 5
    154e:	9c 01       	movw	r18, r24
    1550:	27 5c       	subi	r18, 0xC7	; 199
    1552:	3a 4f       	sbci	r19, 0xFA	; 250
	{
		param[idx] = stringToParse[i];
    1554:	91 91       	ld	r25, Z+
    1556:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    1558:	e2 17       	cp	r30, r18
    155a:	f3 07       	cpc	r31, r19
    155c:	d9 f7       	brne	.-10     	; 0x1554 <__stack+0xc55>
		printStatus("");
		break;
		
		case 253:	// Setch1.Dgain
		ParamParse(rx_string, param);
		ch1.Dgain = atof(param);
    155e:	ce 01       	movw	r24, r28
    1560:	01 96       	adiw	r24, 0x01	; 1
    1562:	0e 94 8a 3a 	call	0x7514	; 0x7514 <atof>
    1566:	60 93 87 02 	sts	0x0287, r22
    156a:	70 93 88 02 	sts	0x0288, r23
    156e:	80 93 89 02 	sts	0x0289, r24
    1572:	90 93 8a 02 	sts	0x028A, r25
		printStatus("");
    1576:	8c e2       	ldi	r24, 0x2C	; 44
    1578:	91 e0       	ldi	r25, 0x01	; 1
    157a:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
		break;
    157e:	0c 94 ed 13 	jmp	0x27da	; 0x27da <__stack+0x1edb>
		
		case 254:	// Set heater on/off ch1
		if(rx_string[10] == '1')
    1582:	80 91 43 05 	lds	r24, 0x0543
    1586:	81 33       	cpi	r24, 0x31	; 49
    1588:	49 f4       	brne	.+18     	; 0x159c <__stack+0xc9d>
		{
			ch1.heaterEnable = true;
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	80 93 c5 02 	sts	0x02C5, r24
			printStatus("ON");
    1590:	88 e1       	ldi	r24, 0x18	; 24
    1592:	91 e0       	ldi	r25, 0x01	; 1
    1594:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
    1598:	0c 94 ed 13 	jmp	0x27da	; 0x27da <__stack+0x1edb>
		}
		else if(rx_string[10] == '0')
    159c:	80 33       	cpi	r24, 0x30	; 48
    159e:	11 f0       	breq	.+4      	; 0x15a4 <__stack+0xca5>
    15a0:	0c 94 ed 13 	jmp	0x27da	; 0x27da <__stack+0x1edb>
		{
			ch1.heaterEnable = false;
    15a4:	10 92 c5 02 	sts	0x02C5, r1
			printStatus("OFF");
    15a8:	8b e1       	ldi	r24, 0x1B	; 27
    15aa:	91 e0       	ldi	r25, 0x01	; 1
    15ac:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
    15b0:	0c 94 ed 13 	jmp	0x27da	; 0x27da <__stack+0x1edb>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    15b4:	6e e1       	ldi	r22, 0x1E	; 30
    15b6:	70 e0       	ldi	r23, 0x00	; 0
    15b8:	89 e3       	ldi	r24, 0x39	; 57
    15ba:	95 e0       	ldi	r25, 0x05	; 5
    15bc:	0e 94 ef 3a 	call	0x75de	; 0x75de <strnlen>
    15c0:	05 97       	sbiw	r24, 0x05	; 5
    15c2:	ac 01       	movw	r20, r24
    15c4:	de 01       	movw	r26, r28
    15c6:	11 96       	adiw	r26, 0x01	; 1
    15c8:	9e 01       	movw	r18, r28
    15ca:	2b 5e       	subi	r18, 0xEB	; 235
    15cc:	3f 4f       	sbci	r19, 0xFF	; 255
    15ce:	fd 01       	movw	r30, r26
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    15d0:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    15d2:	e2 17       	cp	r30, r18
    15d4:	f3 07       	cpc	r31, r19
    15d6:	e1 f7       	brne	.-8      	; 0x15d0 <__stack+0xcd1>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    15d8:	4b 30       	cpi	r20, 0x0B	; 11
    15da:	51 05       	cpc	r21, r1
    15dc:	54 f0       	brlt	.+20     	; 0x15f2 <__stack+0xcf3>
    15de:	e3 e4       	ldi	r30, 0x43	; 67
    15e0:	f5 e0       	ldi	r31, 0x05	; 5
    15e2:	9c 01       	movw	r18, r24
    15e4:	27 5c       	subi	r18, 0xC7	; 199
    15e6:	3a 4f       	sbci	r19, 0xFA	; 250
	{
		param[idx] = stringToParse[i];
    15e8:	91 91       	ld	r25, Z+
    15ea:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    15ec:	e2 17       	cp	r30, r18
    15ee:	f3 07       	cpc	r31, r19
    15f0:	d9 f7       	brne	.-10     	; 0x15e8 <__stack+0xce9>
		}
		break;
		
		case 255:	// Set Temperature error window
		ParamParse(rx_string, param);
		ch1.tempErrorWin = atof(param);
    15f2:	ce 01       	movw	r24, r28
    15f4:	01 96       	adiw	r24, 0x01	; 1
    15f6:	0e 94 8a 3a 	call	0x7514	; 0x7514 <atof>
    15fa:	60 93 b7 02 	sts	0x02B7, r22
    15fe:	70 93 b8 02 	sts	0x02B8, r23
    1602:	80 93 b9 02 	sts	0x02B9, r24
    1606:	90 93 ba 02 	sts	0x02BA, r25
		printStatus("");
    160a:	8c e2       	ldi	r24, 0x2C	; 44
    160c:	91 e0       	ldi	r25, 0x01	; 1
    160e:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
		break;
    1612:	0c 94 ed 13 	jmp	0x27da	; 0x27da <__stack+0x1edb>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    1616:	6e e1       	ldi	r22, 0x1E	; 30
    1618:	70 e0       	ldi	r23, 0x00	; 0
    161a:	89 e3       	ldi	r24, 0x39	; 57
    161c:	95 e0       	ldi	r25, 0x05	; 5
    161e:	0e 94 ef 3a 	call	0x75de	; 0x75de <strnlen>
    1622:	05 97       	sbiw	r24, 0x05	; 5
    1624:	ac 01       	movw	r20, r24
    1626:	de 01       	movw	r26, r28
    1628:	11 96       	adiw	r26, 0x01	; 1
    162a:	9e 01       	movw	r18, r28
    162c:	2b 5e       	subi	r18, 0xEB	; 235
    162e:	3f 4f       	sbci	r19, 0xFF	; 255
    1630:	fd 01       	movw	r30, r26
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    1632:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    1634:	e2 17       	cp	r30, r18
    1636:	f3 07       	cpc	r31, r19
    1638:	e1 f7       	brne	.-8      	; 0x1632 <__stack+0xd33>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    163a:	4b 30       	cpi	r20, 0x0B	; 11
    163c:	51 05       	cpc	r21, r1
    163e:	54 f0       	brlt	.+20     	; 0x1654 <__stack+0xd55>
    1640:	e3 e4       	ldi	r30, 0x43	; 67
    1642:	f5 e0       	ldi	r31, 0x05	; 5
    1644:	9c 01       	movw	r18, r24
    1646:	27 5c       	subi	r18, 0xC7	; 199
    1648:	3a 4f       	sbci	r19, 0xFA	; 250
	{
		param[idx] = stringToParse[i];
    164a:	91 91       	ld	r25, Z+
    164c:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    164e:	e2 17       	cp	r30, r18
    1650:	f3 07       	cpc	r31, r19
    1652:	d9 f7       	brne	.-10     	; 0x164a <__stack+0xd4b>
		printStatus("");
		break;

		case 256:	// Set Temperature Settle time
		ParamParse(rx_string, param);
		ch1.tempSettleTime = atoi(param);
    1654:	ce 01       	movw	r24, r28
    1656:	01 96       	adiw	r24, 0x01	; 1
    1658:	0e 94 8d 3a 	call	0x751a	; 0x751a <atoi>
    165c:	90 93 be 02 	sts	0x02BE, r25
    1660:	80 93 bd 02 	sts	0x02BD, r24
		printStatus("");
    1664:	8c e2       	ldi	r24, 0x2C	; 44
    1666:	91 e0       	ldi	r25, 0x01	; 1
    1668:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
		break;		
    166c:	0c 94 ed 13 	jmp	0x27da	; 0x27da <__stack+0x1edb>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    1670:	6e e1       	ldi	r22, 0x1E	; 30
    1672:	70 e0       	ldi	r23, 0x00	; 0
    1674:	89 e3       	ldi	r24, 0x39	; 57
    1676:	95 e0       	ldi	r25, 0x05	; 5
    1678:	0e 94 ef 3a 	call	0x75de	; 0x75de <strnlen>
    167c:	05 97       	sbiw	r24, 0x05	; 5
    167e:	ac 01       	movw	r20, r24
    1680:	de 01       	movw	r26, r28
    1682:	11 96       	adiw	r26, 0x01	; 1
    1684:	9e 01       	movw	r18, r28
    1686:	2b 5e       	subi	r18, 0xEB	; 235
    1688:	3f 4f       	sbci	r19, 0xFF	; 255
    168a:	fd 01       	movw	r30, r26
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    168c:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    168e:	e2 17       	cp	r30, r18
    1690:	f3 07       	cpc	r31, r19
    1692:	e1 f7       	brne	.-8      	; 0x168c <__stack+0xd8d>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    1694:	4b 30       	cpi	r20, 0x0B	; 11
    1696:	51 05       	cpc	r21, r1
    1698:	54 f0       	brlt	.+20     	; 0x16ae <__stack+0xdaf>
    169a:	e3 e4       	ldi	r30, 0x43	; 67
    169c:	f5 e0       	ldi	r31, 0x05	; 5
    169e:	9c 01       	movw	r18, r24
    16a0:	27 5c       	subi	r18, 0xC7	; 199
    16a2:	3a 4f       	sbci	r19, 0xFA	; 250
	{
		param[idx] = stringToParse[i];
    16a4:	91 91       	ld	r25, Z+
    16a6:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    16a8:	e2 17       	cp	r30, r18
    16aa:	f3 07       	cpc	r31, r19
    16ac:	d9 f7       	brne	.-10     	; 0x16a4 <__stack+0xda5>
		break;		
		
		// *** Channel 2 ***
		case 350:	// ch2.TempSetPoint
		ParamParse(rx_string, param);
		ch2.TempSetPoint = atof(param);
    16ae:	ce 01       	movw	r24, r28
    16b0:	01 96       	adiw	r24, 0x01	; 1
    16b2:	0e 94 8a 3a 	call	0x7514	; 0x7514 <atof>
    16b6:	60 93 00 02 	sts	0x0200, r22
    16ba:	70 93 01 02 	sts	0x0201, r23
    16be:	80 93 02 02 	sts	0x0202, r24
    16c2:	90 93 03 02 	sts	0x0203, r25
		printStatus("");
    16c6:	8c e2       	ldi	r24, 0x2C	; 44
    16c8:	91 e0       	ldi	r25, 0x01	; 1
    16ca:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
		break;
    16ce:	0c 94 ed 13 	jmp	0x27da	; 0x27da <__stack+0x1edb>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    16d2:	6e e1       	ldi	r22, 0x1E	; 30
    16d4:	70 e0       	ldi	r23, 0x00	; 0
    16d6:	89 e3       	ldi	r24, 0x39	; 57
    16d8:	95 e0       	ldi	r25, 0x05	; 5
    16da:	0e 94 ef 3a 	call	0x75de	; 0x75de <strnlen>
    16de:	05 97       	sbiw	r24, 0x05	; 5
    16e0:	ac 01       	movw	r20, r24
    16e2:	de 01       	movw	r26, r28
    16e4:	11 96       	adiw	r26, 0x01	; 1
    16e6:	9e 01       	movw	r18, r28
    16e8:	2b 5e       	subi	r18, 0xEB	; 235
    16ea:	3f 4f       	sbci	r19, 0xFF	; 255
    16ec:	fd 01       	movw	r30, r26
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    16ee:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    16f0:	e2 17       	cp	r30, r18
    16f2:	f3 07       	cpc	r31, r19
    16f4:	e1 f7       	brne	.-8      	; 0x16ee <__stack+0xdef>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    16f6:	4b 30       	cpi	r20, 0x0B	; 11
    16f8:	51 05       	cpc	r21, r1
    16fa:	54 f0       	brlt	.+20     	; 0x1710 <__stack+0xe11>
    16fc:	e3 e4       	ldi	r30, 0x43	; 67
    16fe:	f5 e0       	ldi	r31, 0x05	; 5
    1700:	9c 01       	movw	r18, r24
    1702:	27 5c       	subi	r18, 0xC7	; 199
    1704:	3a 4f       	sbci	r19, 0xFA	; 250
	{
		param[idx] = stringToParse[i];
    1706:	91 91       	ld	r25, Z+
    1708:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    170a:	e2 17       	cp	r30, r18
    170c:	f3 07       	cpc	r31, r19
    170e:	d9 f7       	brne	.-10     	; 0x1706 <__stack+0xe07>
		printStatus("");
		break;
		
		case 351:	// SetPgainCh2
		ParamParse(rx_string, param);
		ch2.Pgain = atof(param);
    1710:	ce 01       	movw	r24, r28
    1712:	01 96       	adiw	r24, 0x01	; 1
    1714:	0e 94 8a 3a 	call	0x7514	; 0x7514 <atof>
    1718:	60 93 1c 02 	sts	0x021C, r22
    171c:	70 93 1d 02 	sts	0x021D, r23
    1720:	80 93 1e 02 	sts	0x021E, r24
    1724:	90 93 1f 02 	sts	0x021F, r25
		printStatus("");
    1728:	8c e2       	ldi	r24, 0x2C	; 44
    172a:	91 e0       	ldi	r25, 0x01	; 1
    172c:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
		break;
    1730:	0c 94 ed 13 	jmp	0x27da	; 0x27da <__stack+0x1edb>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    1734:	6e e1       	ldi	r22, 0x1E	; 30
    1736:	70 e0       	ldi	r23, 0x00	; 0
    1738:	89 e3       	ldi	r24, 0x39	; 57
    173a:	95 e0       	ldi	r25, 0x05	; 5
    173c:	0e 94 ef 3a 	call	0x75de	; 0x75de <strnlen>
    1740:	05 97       	sbiw	r24, 0x05	; 5
    1742:	ac 01       	movw	r20, r24
    1744:	de 01       	movw	r26, r28
    1746:	11 96       	adiw	r26, 0x01	; 1
    1748:	9e 01       	movw	r18, r28
    174a:	2b 5e       	subi	r18, 0xEB	; 235
    174c:	3f 4f       	sbci	r19, 0xFF	; 255
    174e:	fd 01       	movw	r30, r26
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    1750:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    1752:	e2 17       	cp	r30, r18
    1754:	f3 07       	cpc	r31, r19
    1756:	e1 f7       	brne	.-8      	; 0x1750 <__stack+0xe51>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    1758:	4b 30       	cpi	r20, 0x0B	; 11
    175a:	51 05       	cpc	r21, r1
    175c:	54 f0       	brlt	.+20     	; 0x1772 <__stack+0xe73>
    175e:	e3 e4       	ldi	r30, 0x43	; 67
    1760:	f5 e0       	ldi	r31, 0x05	; 5
    1762:	9c 01       	movw	r18, r24
    1764:	27 5c       	subi	r18, 0xC7	; 199
    1766:	3a 4f       	sbci	r19, 0xFA	; 250
	{
		param[idx] = stringToParse[i];
    1768:	91 91       	ld	r25, Z+
    176a:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    176c:	e2 17       	cp	r30, r18
    176e:	f3 07       	cpc	r31, r19
    1770:	d9 f7       	brne	.-10     	; 0x1768 <__stack+0xe69>
		printStatus("");
		break;
		
		case 352:	// SetIgainCh2
		ParamParse(rx_string, param);
		ch2.Igain = atof(param);
    1772:	ce 01       	movw	r24, r28
    1774:	01 96       	adiw	r24, 0x01	; 1
    1776:	0e 94 8a 3a 	call	0x7514	; 0x7514 <atof>
    177a:	60 93 20 02 	sts	0x0220, r22
    177e:	70 93 21 02 	sts	0x0221, r23
    1782:	80 93 22 02 	sts	0x0222, r24
    1786:	90 93 23 02 	sts	0x0223, r25
		printStatus("");
    178a:	8c e2       	ldi	r24, 0x2C	; 44
    178c:	91 e0       	ldi	r25, 0x01	; 1
    178e:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
		break;
    1792:	0c 94 ed 13 	jmp	0x27da	; 0x27da <__stack+0x1edb>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    1796:	6e e1       	ldi	r22, 0x1E	; 30
    1798:	70 e0       	ldi	r23, 0x00	; 0
    179a:	89 e3       	ldi	r24, 0x39	; 57
    179c:	95 e0       	ldi	r25, 0x05	; 5
    179e:	0e 94 ef 3a 	call	0x75de	; 0x75de <strnlen>
    17a2:	05 97       	sbiw	r24, 0x05	; 5
    17a4:	ac 01       	movw	r20, r24
    17a6:	de 01       	movw	r26, r28
    17a8:	11 96       	adiw	r26, 0x01	; 1
    17aa:	9e 01       	movw	r18, r28
    17ac:	2b 5e       	subi	r18, 0xEB	; 235
    17ae:	3f 4f       	sbci	r19, 0xFF	; 255
    17b0:	fd 01       	movw	r30, r26
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    17b2:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    17b4:	e2 17       	cp	r30, r18
    17b6:	f3 07       	cpc	r31, r19
    17b8:	e1 f7       	brne	.-8      	; 0x17b2 <__stack+0xeb3>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    17ba:	4b 30       	cpi	r20, 0x0B	; 11
    17bc:	51 05       	cpc	r21, r1
    17be:	54 f0       	brlt	.+20     	; 0x17d4 <__stack+0xed5>
    17c0:	e3 e4       	ldi	r30, 0x43	; 67
    17c2:	f5 e0       	ldi	r31, 0x05	; 5
    17c4:	9c 01       	movw	r18, r24
    17c6:	27 5c       	subi	r18, 0xC7	; 199
    17c8:	3a 4f       	sbci	r19, 0xFA	; 250
	{
		param[idx] = stringToParse[i];
    17ca:	91 91       	ld	r25, Z+
    17cc:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    17ce:	e2 17       	cp	r30, r18
    17d0:	f3 07       	cpc	r31, r19
    17d2:	d9 f7       	brne	.-10     	; 0x17ca <__stack+0xecb>
		printStatus("");
		break;
		
		case 353:	// Setch2.Dgain
		ParamParse(rx_string, param);
		ch2.Dgain = atof(param);
    17d4:	ce 01       	movw	r24, r28
    17d6:	01 96       	adiw	r24, 0x01	; 1
    17d8:	0e 94 8a 3a 	call	0x7514	; 0x7514 <atof>
    17dc:	60 93 24 02 	sts	0x0224, r22
    17e0:	70 93 25 02 	sts	0x0225, r23
    17e4:	80 93 26 02 	sts	0x0226, r24
    17e8:	90 93 27 02 	sts	0x0227, r25
		printStatus("");
    17ec:	8c e2       	ldi	r24, 0x2C	; 44
    17ee:	91 e0       	ldi	r25, 0x01	; 1
    17f0:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
		break;
    17f4:	f2 c7       	rjmp	.+4068   	; 0x27da <__stack+0x1edb>
		
		case 354:	// Set heater on/off ch2
		if(rx_string[10] == '1')
    17f6:	80 91 43 05 	lds	r24, 0x0543
    17fa:	81 33       	cpi	r24, 0x31	; 49
    17fc:	41 f4       	brne	.+16     	; 0x180e <__stack+0xf0f>
		{
			ch2.heaterEnable = true;
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	80 93 62 02 	sts	0x0262, r24
			printStatus("ON");
    1804:	88 e1       	ldi	r24, 0x18	; 24
    1806:	91 e0       	ldi	r25, 0x01	; 1
    1808:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
    180c:	e6 c7       	rjmp	.+4044   	; 0x27da <__stack+0x1edb>
		}
		else if(rx_string[10] == '0')
    180e:	80 33       	cpi	r24, 0x30	; 48
    1810:	09 f0       	breq	.+2      	; 0x1814 <__stack+0xf15>
    1812:	e3 c7       	rjmp	.+4038   	; 0x27da <__stack+0x1edb>
		{
			ch2.heaterEnable = false;
    1814:	10 92 62 02 	sts	0x0262, r1
			printStatus("OFF");
    1818:	8b e1       	ldi	r24, 0x1B	; 27
    181a:	91 e0       	ldi	r25, 0x01	; 1
    181c:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
    1820:	dc c7       	rjmp	.+4024   	; 0x27da <__stack+0x1edb>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    1822:	6e e1       	ldi	r22, 0x1E	; 30
    1824:	70 e0       	ldi	r23, 0x00	; 0
    1826:	89 e3       	ldi	r24, 0x39	; 57
    1828:	95 e0       	ldi	r25, 0x05	; 5
    182a:	0e 94 ef 3a 	call	0x75de	; 0x75de <strnlen>
    182e:	05 97       	sbiw	r24, 0x05	; 5
    1830:	ac 01       	movw	r20, r24
    1832:	de 01       	movw	r26, r28
    1834:	11 96       	adiw	r26, 0x01	; 1
    1836:	9e 01       	movw	r18, r28
    1838:	2b 5e       	subi	r18, 0xEB	; 235
    183a:	3f 4f       	sbci	r19, 0xFF	; 255
    183c:	fd 01       	movw	r30, r26
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    183e:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    1840:	e2 17       	cp	r30, r18
    1842:	f3 07       	cpc	r31, r19
    1844:	e1 f7       	brne	.-8      	; 0x183e <__stack+0xf3f>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    1846:	4b 30       	cpi	r20, 0x0B	; 11
    1848:	51 05       	cpc	r21, r1
    184a:	54 f0       	brlt	.+20     	; 0x1860 <__stack+0xf61>
    184c:	e3 e4       	ldi	r30, 0x43	; 67
    184e:	f5 e0       	ldi	r31, 0x05	; 5
    1850:	9c 01       	movw	r18, r24
    1852:	27 5c       	subi	r18, 0xC7	; 199
    1854:	3a 4f       	sbci	r19, 0xFA	; 250
	{
		param[idx] = stringToParse[i];
    1856:	91 91       	ld	r25, Z+
    1858:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    185a:	e2 17       	cp	r30, r18
    185c:	f3 07       	cpc	r31, r19
    185e:	d9 f7       	brne	.-10     	; 0x1856 <__stack+0xf57>
		}
		break;
		
		case 355:	// Set Temperature error window
		ParamParse(rx_string, param);
		ch2.tempErrorWin = atof(param);
    1860:	ce 01       	movw	r24, r28
    1862:	01 96       	adiw	r24, 0x01	; 1
    1864:	0e 94 8a 3a 	call	0x7514	; 0x7514 <atof>
    1868:	60 93 54 02 	sts	0x0254, r22
    186c:	70 93 55 02 	sts	0x0255, r23
    1870:	80 93 56 02 	sts	0x0256, r24
    1874:	90 93 57 02 	sts	0x0257, r25
		printStatus("");
    1878:	8c e2       	ldi	r24, 0x2C	; 44
    187a:	91 e0       	ldi	r25, 0x01	; 1
    187c:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
		break;
    1880:	ac c7       	rjmp	.+3928   	; 0x27da <__stack+0x1edb>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    1882:	6e e1       	ldi	r22, 0x1E	; 30
    1884:	70 e0       	ldi	r23, 0x00	; 0
    1886:	89 e3       	ldi	r24, 0x39	; 57
    1888:	95 e0       	ldi	r25, 0x05	; 5
    188a:	0e 94 ef 3a 	call	0x75de	; 0x75de <strnlen>
    188e:	05 97       	sbiw	r24, 0x05	; 5
    1890:	ac 01       	movw	r20, r24
    1892:	de 01       	movw	r26, r28
    1894:	11 96       	adiw	r26, 0x01	; 1
    1896:	9e 01       	movw	r18, r28
    1898:	2b 5e       	subi	r18, 0xEB	; 235
    189a:	3f 4f       	sbci	r19, 0xFF	; 255
    189c:	fd 01       	movw	r30, r26
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    189e:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    18a0:	e2 17       	cp	r30, r18
    18a2:	f3 07       	cpc	r31, r19
    18a4:	e1 f7       	brne	.-8      	; 0x189e <__stack+0xf9f>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    18a6:	4b 30       	cpi	r20, 0x0B	; 11
    18a8:	51 05       	cpc	r21, r1
    18aa:	54 f0       	brlt	.+20     	; 0x18c0 <__stack+0xfc1>
    18ac:	e3 e4       	ldi	r30, 0x43	; 67
    18ae:	f5 e0       	ldi	r31, 0x05	; 5
    18b0:	9c 01       	movw	r18, r24
    18b2:	27 5c       	subi	r18, 0xC7	; 199
    18b4:	3a 4f       	sbci	r19, 0xFA	; 250
	{
		param[idx] = stringToParse[i];
    18b6:	91 91       	ld	r25, Z+
    18b8:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    18ba:	e2 17       	cp	r30, r18
    18bc:	f3 07       	cpc	r31, r19
    18be:	d9 f7       	brne	.-10     	; 0x18b6 <__stack+0xfb7>
		printStatus("");
		break;

		case 356:	// Set Temperature Settle time
		ParamParse(rx_string, param);
		ch2.tempSettleTime = atoi(param);
    18c0:	ce 01       	movw	r24, r28
    18c2:	01 96       	adiw	r24, 0x01	; 1
    18c4:	0e 94 8d 3a 	call	0x751a	; 0x751a <atoi>
    18c8:	90 93 5b 02 	sts	0x025B, r25
    18cc:	80 93 5a 02 	sts	0x025A, r24
		printStatus("");
    18d0:	8c e2       	ldi	r24, 0x2C	; 44
    18d2:	91 e0       	ldi	r25, 0x01	; 1
    18d4:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
		break;		
    18d8:	80 c7       	rjmp	.+3840   	; 0x27da <__stack+0x1edb>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    18da:	6e e1       	ldi	r22, 0x1E	; 30
    18dc:	70 e0       	ldi	r23, 0x00	; 0
    18de:	89 e3       	ldi	r24, 0x39	; 57
    18e0:	95 e0       	ldi	r25, 0x05	; 5
    18e2:	0e 94 ef 3a 	call	0x75de	; 0x75de <strnlen>
    18e6:	05 97       	sbiw	r24, 0x05	; 5
    18e8:	ac 01       	movw	r20, r24
    18ea:	de 01       	movw	r26, r28
    18ec:	11 96       	adiw	r26, 0x01	; 1
    18ee:	9e 01       	movw	r18, r28
    18f0:	2b 5e       	subi	r18, 0xEB	; 235
    18f2:	3f 4f       	sbci	r19, 0xFF	; 255
    18f4:	fd 01       	movw	r30, r26
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    18f6:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    18f8:	e2 17       	cp	r30, r18
    18fa:	f3 07       	cpc	r31, r19
    18fc:	e1 f7       	brne	.-8      	; 0x18f6 <__stack+0xff7>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    18fe:	4b 30       	cpi	r20, 0x0B	; 11
    1900:	51 05       	cpc	r21, r1
    1902:	54 f0       	brlt	.+20     	; 0x1918 <__stack+0x1019>
    1904:	e3 e4       	ldi	r30, 0x43	; 67
    1906:	f5 e0       	ldi	r31, 0x05	; 5
    1908:	9c 01       	movw	r18, r24
    190a:	27 5c       	subi	r18, 0xC7	; 199
    190c:	3a 4f       	sbci	r19, 0xFA	; 250
	{
		param[idx] = stringToParse[i];
    190e:	91 91       	ld	r25, Z+
    1910:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    1912:	e2 17       	cp	r30, r18
    1914:	f3 07       	cpc	r31, r19
    1916:	d9 f7       	brne	.-10     	; 0x190e <__stack+0x100f>
		break;		
		
		// *** Channel 4 ***
		case 450:	// ch3.TempSetPoint
		ParamParse(rx_string, param);
		ch3.TempSetPoint = atof(param);
    1918:	ce 01       	movw	r24, r28
    191a:	01 96       	adiw	r24, 0x01	; 1
    191c:	0e 94 8a 3a 	call	0x7514	; 0x7514 <atof>
    1920:	60 93 9d 01 	sts	0x019D, r22
    1924:	70 93 9e 01 	sts	0x019E, r23
    1928:	80 93 9f 01 	sts	0x019F, r24
    192c:	90 93 a0 01 	sts	0x01A0, r25
		printStatus("");
    1930:	8c e2       	ldi	r24, 0x2C	; 44
    1932:	91 e0       	ldi	r25, 0x01	; 1
    1934:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
		break;
    1938:	50 c7       	rjmp	.+3744   	; 0x27da <__stack+0x1edb>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    193a:	6e e1       	ldi	r22, 0x1E	; 30
    193c:	70 e0       	ldi	r23, 0x00	; 0
    193e:	89 e3       	ldi	r24, 0x39	; 57
    1940:	95 e0       	ldi	r25, 0x05	; 5
    1942:	0e 94 ef 3a 	call	0x75de	; 0x75de <strnlen>
    1946:	05 97       	sbiw	r24, 0x05	; 5
    1948:	ac 01       	movw	r20, r24
    194a:	de 01       	movw	r26, r28
    194c:	11 96       	adiw	r26, 0x01	; 1
    194e:	9e 01       	movw	r18, r28
    1950:	2b 5e       	subi	r18, 0xEB	; 235
    1952:	3f 4f       	sbci	r19, 0xFF	; 255
    1954:	fd 01       	movw	r30, r26
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    1956:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    1958:	e2 17       	cp	r30, r18
    195a:	f3 07       	cpc	r31, r19
    195c:	e1 f7       	brne	.-8      	; 0x1956 <__stack+0x1057>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    195e:	4b 30       	cpi	r20, 0x0B	; 11
    1960:	51 05       	cpc	r21, r1
    1962:	54 f0       	brlt	.+20     	; 0x1978 <__stack+0x1079>
    1964:	e3 e4       	ldi	r30, 0x43	; 67
    1966:	f5 e0       	ldi	r31, 0x05	; 5
    1968:	9c 01       	movw	r18, r24
    196a:	27 5c       	subi	r18, 0xC7	; 199
    196c:	3a 4f       	sbci	r19, 0xFA	; 250
	{
		param[idx] = stringToParse[i];
    196e:	91 91       	ld	r25, Z+
    1970:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    1972:	e2 17       	cp	r30, r18
    1974:	f3 07       	cpc	r31, r19
    1976:	d9 f7       	brne	.-10     	; 0x196e <__stack+0x106f>
		printStatus("");
		break;
		
		case 451:	// SetPgainCh3
		ParamParse(rx_string, param);
		ch3.Pgain = atof(param);
    1978:	ce 01       	movw	r24, r28
    197a:	01 96       	adiw	r24, 0x01	; 1
    197c:	0e 94 8a 3a 	call	0x7514	; 0x7514 <atof>
    1980:	60 93 b9 01 	sts	0x01B9, r22
    1984:	70 93 ba 01 	sts	0x01BA, r23
    1988:	80 93 bb 01 	sts	0x01BB, r24
    198c:	90 93 bc 01 	sts	0x01BC, r25
		printStatus("");
    1990:	8c e2       	ldi	r24, 0x2C	; 44
    1992:	91 e0       	ldi	r25, 0x01	; 1
    1994:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
		break;
    1998:	20 c7       	rjmp	.+3648   	; 0x27da <__stack+0x1edb>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    199a:	6e e1       	ldi	r22, 0x1E	; 30
    199c:	70 e0       	ldi	r23, 0x00	; 0
    199e:	89 e3       	ldi	r24, 0x39	; 57
    19a0:	95 e0       	ldi	r25, 0x05	; 5
    19a2:	0e 94 ef 3a 	call	0x75de	; 0x75de <strnlen>
    19a6:	05 97       	sbiw	r24, 0x05	; 5
    19a8:	ac 01       	movw	r20, r24
    19aa:	de 01       	movw	r26, r28
    19ac:	11 96       	adiw	r26, 0x01	; 1
    19ae:	9e 01       	movw	r18, r28
    19b0:	2b 5e       	subi	r18, 0xEB	; 235
    19b2:	3f 4f       	sbci	r19, 0xFF	; 255
    19b4:	fd 01       	movw	r30, r26
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    19b6:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    19b8:	e2 17       	cp	r30, r18
    19ba:	f3 07       	cpc	r31, r19
    19bc:	e1 f7       	brne	.-8      	; 0x19b6 <__stack+0x10b7>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    19be:	4b 30       	cpi	r20, 0x0B	; 11
    19c0:	51 05       	cpc	r21, r1
    19c2:	54 f0       	brlt	.+20     	; 0x19d8 <__stack+0x10d9>
    19c4:	e3 e4       	ldi	r30, 0x43	; 67
    19c6:	f5 e0       	ldi	r31, 0x05	; 5
    19c8:	9c 01       	movw	r18, r24
    19ca:	27 5c       	subi	r18, 0xC7	; 199
    19cc:	3a 4f       	sbci	r19, 0xFA	; 250
	{
		param[idx] = stringToParse[i];
    19ce:	91 91       	ld	r25, Z+
    19d0:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    19d2:	e2 17       	cp	r30, r18
    19d4:	f3 07       	cpc	r31, r19
    19d6:	d9 f7       	brne	.-10     	; 0x19ce <__stack+0x10cf>
		printStatus("");
		break;
		
		case 452:	// SetIgainCh3
		ParamParse(rx_string, param);
		ch3.Igain = atof(param);
    19d8:	ce 01       	movw	r24, r28
    19da:	01 96       	adiw	r24, 0x01	; 1
    19dc:	0e 94 8a 3a 	call	0x7514	; 0x7514 <atof>
    19e0:	60 93 bd 01 	sts	0x01BD, r22
    19e4:	70 93 be 01 	sts	0x01BE, r23
    19e8:	80 93 bf 01 	sts	0x01BF, r24
    19ec:	90 93 c0 01 	sts	0x01C0, r25
		printStatus("");
    19f0:	8c e2       	ldi	r24, 0x2C	; 44
    19f2:	91 e0       	ldi	r25, 0x01	; 1
    19f4:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
		break;
    19f8:	f0 c6       	rjmp	.+3552   	; 0x27da <__stack+0x1edb>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    19fa:	6e e1       	ldi	r22, 0x1E	; 30
    19fc:	70 e0       	ldi	r23, 0x00	; 0
    19fe:	89 e3       	ldi	r24, 0x39	; 57
    1a00:	95 e0       	ldi	r25, 0x05	; 5
    1a02:	0e 94 ef 3a 	call	0x75de	; 0x75de <strnlen>
    1a06:	05 97       	sbiw	r24, 0x05	; 5
    1a08:	ac 01       	movw	r20, r24
    1a0a:	de 01       	movw	r26, r28
    1a0c:	11 96       	adiw	r26, 0x01	; 1
    1a0e:	9e 01       	movw	r18, r28
    1a10:	2b 5e       	subi	r18, 0xEB	; 235
    1a12:	3f 4f       	sbci	r19, 0xFF	; 255
    1a14:	fd 01       	movw	r30, r26
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    1a16:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    1a18:	e2 17       	cp	r30, r18
    1a1a:	f3 07       	cpc	r31, r19
    1a1c:	e1 f7       	brne	.-8      	; 0x1a16 <__stack+0x1117>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    1a1e:	4b 30       	cpi	r20, 0x0B	; 11
    1a20:	51 05       	cpc	r21, r1
    1a22:	54 f0       	brlt	.+20     	; 0x1a38 <__stack+0x1139>
    1a24:	e3 e4       	ldi	r30, 0x43	; 67
    1a26:	f5 e0       	ldi	r31, 0x05	; 5
    1a28:	9c 01       	movw	r18, r24
    1a2a:	27 5c       	subi	r18, 0xC7	; 199
    1a2c:	3a 4f       	sbci	r19, 0xFA	; 250
	{
		param[idx] = stringToParse[i];
    1a2e:	91 91       	ld	r25, Z+
    1a30:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    1a32:	e2 17       	cp	r30, r18
    1a34:	f3 07       	cpc	r31, r19
    1a36:	d9 f7       	brne	.-10     	; 0x1a2e <__stack+0x112f>
		printStatus("");
		break;
		
		case 453:	// Setch3.Dgain
		ParamParse(rx_string, param);
		ch3.Dgain = atof(param);
    1a38:	ce 01       	movw	r24, r28
    1a3a:	01 96       	adiw	r24, 0x01	; 1
    1a3c:	0e 94 8a 3a 	call	0x7514	; 0x7514 <atof>
    1a40:	60 93 c1 01 	sts	0x01C1, r22
    1a44:	70 93 c2 01 	sts	0x01C2, r23
    1a48:	80 93 c3 01 	sts	0x01C3, r24
    1a4c:	90 93 c4 01 	sts	0x01C4, r25
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    1a50:	81 e2       	ldi	r24, 0x21	; 33
    1a52:	8d 8b       	std	Y+21, r24	; 0x15
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    1a54:	e9 e3       	ldi	r30, 0x39	; 57
    1a56:	f5 e0       	ldi	r31, 0x05	; 5
    1a58:	81 81       	ldd	r24, Z+1	; 0x01
    1a5a:	8e 8b       	std	Y+22, r24	; 0x16
    1a5c:	82 81       	ldd	r24, Z+2	; 0x02
    1a5e:	8f 8b       	std	Y+23, r24	; 0x17
    1a60:	83 81       	ldd	r24, Z+3	; 0x03
    1a62:	88 8f       	std	Y+24, r24	; 0x18
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    1a64:	19 8e       	std	Y+25, r1	; 0x19
    1a66:	1a 8e       	std	Y+26, r1	; 0x1a
    1a68:	1b 8e       	std	Y+27, r1	; 0x1b
    1a6a:	8e 01       	movw	r16, r28
    1a6c:	0b 5e       	subi	r16, 0xEB	; 235
    1a6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a70:	be 01       	movw	r22, r28
    1a72:	67 5e       	subi	r22, 0xE7	; 231
    1a74:	7f 4f       	sbci	r23, 0xFF	; 255
    1a76:	f8 01       	movw	r30, r16
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    1a7c:	b8 e0       	ldi	r27, 0x08	; 8
    1a7e:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    1a80:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    1a82:	29 2f       	mov	r18, r25
    1a84:	33 27       	eor	r19, r19
    1a86:	27 fd       	sbrc	r18, 7
    1a88:	3a 95       	dec	r19
    1a8a:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    1a8c:	32 2f       	mov	r19, r18
    1a8e:	22 27       	eor	r18, r18
    1a90:	4b 2f       	mov	r20, r27
    1a92:	5f 2d       	mov	r21, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    1a94:	33 23       	and	r19, r19
    1a96:	3c f4       	brge	.+14     	; 0x1aa6 <__stack+0x11a7>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    1a98:	22 0f       	add	r18, r18
    1a9a:	33 1f       	adc	r19, r19
    1a9c:	a1 e2       	ldi	r26, 0x21	; 33
    1a9e:	2a 27       	eor	r18, r26
    1aa0:	a0 e1       	ldi	r26, 0x10	; 16
    1aa2:	3a 27       	eor	r19, r26
    1aa4:	02 c0       	rjmp	.+4      	; 0x1aaa <__stack+0x11ab>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    1aa6:	22 0f       	add	r18, r18
    1aa8:	33 1f       	adc	r19, r19
    1aaa:	41 50       	subi	r20, 0x01	; 1
    1aac:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    1aae:	91 f7       	brne	.-28     	; 0x1a94 <__stack+0x1195>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    1ab0:	98 2f       	mov	r25, r24
    1ab2:	88 27       	eor	r24, r24
    1ab4:	82 27       	eor	r24, r18
    1ab6:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    1ab8:	e6 17       	cp	r30, r22
    1aba:	f7 07       	cpc	r31, r23
    1abc:	09 f7       	brne	.-62     	; 0x1a80 <__stack+0x1181>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    1abe:	7c 01       	movw	r14, r24
    1ac0:	40 e1       	ldi	r20, 0x10	; 16
    1ac2:	6f e2       	ldi	r22, 0x2F	; 47
    1ac4:	75 e0       	ldi	r23, 0x05	; 5
    1ac6:	0e 94 04 3b 	call	0x7608	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    1aca:	8f e2       	ldi	r24, 0x2F	; 47
    1acc:	95 e0       	ldi	r25, 0x05	; 5
    1ace:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <strupr>
	if(crcXmodem < 0x10)
    1ad2:	b0 e1       	ldi	r27, 0x10	; 16
    1ad4:	eb 16       	cp	r14, r27
    1ad6:	f1 04       	cpc	r15, r1
    1ad8:	38 f4       	brcc	.+14     	; 0x1ae8 <__stack+0x11e9>
	{
		tx_string[cnt+4] = crc[0];
    1ada:	80 91 2f 05 	lds	r24, 0x052F
    1ade:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+3] = '0';
    1ae0:	80 e3       	ldi	r24, 0x30	; 48
    1ae2:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+2] = '0';
    1ae4:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+1] = '0';
    1ae6:	89 8f       	std	Y+25, r24	; 0x19
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    1ae8:	c7 01       	movw	r24, r14
    1aea:	40 97       	sbiw	r24, 0x10	; 16
    1aec:	80 3f       	cpi	r24, 0xF0	; 240
    1aee:	91 05       	cpc	r25, r1
    1af0:	48 f4       	brcc	.+18     	; 0x1b04 <__stack+0x1205>
	{
		tx_string[cnt+4] = crc[1];
    1af2:	ef e2       	ldi	r30, 0x2F	; 47
    1af4:	f5 e0       	ldi	r31, 0x05	; 5
    1af6:	81 81       	ldd	r24, Z+1	; 0x01
    1af8:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+3] = crc[0];
    1afa:	80 81       	ld	r24, Z
    1afc:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+2] = '0';
    1afe:	80 e3       	ldi	r24, 0x30	; 48
    1b00:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+1] = '0';		
    1b02:	89 8f       	std	Y+25, r24	; 0x19
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    1b04:	c7 01       	movw	r24, r14
    1b06:	9a 95       	dec	r25
    1b08:	81 15       	cp	r24, r1
    1b0a:	9f 40       	sbci	r25, 0x0F	; 15
    1b0c:	50 f4       	brcc	.+20     	; 0x1b22 <__stack+0x1223>
	{
		tx_string[cnt+4] = crc[2];
    1b0e:	ef e2       	ldi	r30, 0x2F	; 47
    1b10:	f5 e0       	ldi	r31, 0x05	; 5
    1b12:	82 81       	ldd	r24, Z+2	; 0x02
    1b14:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+3] = crc[1];
    1b16:	81 81       	ldd	r24, Z+1	; 0x01
    1b18:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+2] = crc[0];
    1b1a:	80 81       	ld	r24, Z
    1b1c:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+1] = '0';		
    1b1e:	80 e3       	ldi	r24, 0x30	; 48
    1b20:	89 8f       	std	Y+25, r24	; 0x19
	}
	if(crcXmodem >= 0x1000)
    1b22:	e1 14       	cp	r14, r1
    1b24:	f0 e1       	ldi	r31, 0x10	; 16
    1b26:	ff 06       	cpc	r15, r31
    1b28:	50 f0       	brcs	.+20     	; 0x1b3e <__stack+0x123f>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    1b2a:	ef e2       	ldi	r30, 0x2F	; 47
    1b2c:	f5 e0       	ldi	r31, 0x05	; 5
    1b2e:	80 81       	ld	r24, Z
    1b30:	89 8f       	std	Y+25, r24	; 0x19
		tx_string[cnt+2] = crc[1];
    1b32:	81 81       	ldd	r24, Z+1	; 0x01
    1b34:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+3] = crc[2];
    1b36:	82 81       	ldd	r24, Z+2	; 0x02
    1b38:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+4] = crc[3];
    1b3a:	83 81       	ldd	r24, Z+3	; 0x03
    1b3c:	8c 8f       	std	Y+28, r24	; 0x1c
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    1b3e:	8d e0       	ldi	r24, 0x0D	; 13
    1b40:	8d 8f       	std	Y+29, r24	; 0x1d
    1b42:	ae 01       	movw	r20, r28
    1b44:	42 5e       	subi	r20, 0xE2	; 226
    1b46:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    1b48:	e7 e5       	ldi	r30, 0x57	; 87
    1b4a:	f5 e0       	ldi	r31, 0x05	; 5
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    1b4c:	61 ec       	ldi	r22, 0xC1	; 193
    1b4e:	70 e0       	ldi	r23, 0x00	; 0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    1b50:	30 e0       	ldi	r19, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    1b52:	d8 01       	movw	r26, r16
    1b54:	8d 91       	ld	r24, X+
    1b56:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    1b58:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    1b5a:	21 81       	ldd	r18, Z+1	; 0x01
    1b5c:	90 81       	ld	r25, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    1b5e:	29 13       	cpse	r18, r25
    1b60:	04 c0       	rjmp	.+8      	; 0x1b6a <__stack+0x126b>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    1b62:	db 01       	movw	r26, r22
    1b64:	9c 91       	ld	r25, X
    1b66:	90 62       	ori	r25, 0x20	; 32
    1b68:	9c 93       	st	X, r25
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    1b6a:	90 81       	ld	r25, Z
    1b6c:	a3 81       	ldd	r26, Z+3	; 0x03
    1b6e:	b4 81       	ldd	r27, Z+4	; 0x04
    1b70:	a9 0f       	add	r26, r25
    1b72:	b1 1d       	adc	r27, r1
    1b74:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    1b76:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    1b78:	a2 2f       	mov	r26, r18
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	82 81       	ldd	r24, Z+2	; 0x02
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	01 97       	sbiw	r24, 0x01	; 1
    1b82:	a8 17       	cp	r26, r24
    1b84:	b9 07       	cpc	r27, r25
    1b86:	11 f0       	breq	.+4      	; 0x1b8c <__stack+0x128d>
    1b88:	2f 5f       	subi	r18, 0xFF	; 255
    1b8a:	01 c0       	rjmp	.+2      	; 0x1b8e <__stack+0x128f>
    1b8c:	23 2f       	mov	r18, r19
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    1b8e:	20 83       	st	Z, r18
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    1b90:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    1b92:	04 17       	cp	r16, r20
    1b94:	15 07       	cpc	r17, r21
    1b96:	e9 f6       	brne	.-70     	; 0x1b52 <__stack+0x1253>
    1b98:	20 c6       	rjmp	.+3136   	; 0x27da <__stack+0x1edb>
		ch3.Dgain = atof(param);
		printStatus("");
		break;
		
		case 454:	// Set heater on/off ch3
		if(rx_string[10] == '1')
    1b9a:	80 91 43 05 	lds	r24, 0x0543
    1b9e:	81 33       	cpi	r24, 0x31	; 49
    1ba0:	09 f0       	breq	.+2      	; 0x1ba4 <__stack+0x12a5>
    1ba2:	ac c0       	rjmp	.+344    	; 0x1cfc <__stack+0x13fd>
		{
			ch3.heaterEnable = true;
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	80 93 ff 01 	sts	0x01FF, r24
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    1baa:	81 e2       	ldi	r24, 0x21	; 33
    1bac:	8d 8b       	std	Y+21, r24	; 0x15
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    1bae:	e9 e3       	ldi	r30, 0x39	; 57
    1bb0:	f5 e0       	ldi	r31, 0x05	; 5
    1bb2:	81 81       	ldd	r24, Z+1	; 0x01
    1bb4:	8e 8b       	std	Y+22, r24	; 0x16
    1bb6:	82 81       	ldd	r24, Z+2	; 0x02
    1bb8:	8f 8b       	std	Y+23, r24	; 0x17
    1bba:	83 81       	ldd	r24, Z+3	; 0x03
    1bbc:	88 8f       	std	Y+24, r24	; 0x18
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    1bbe:	8f e4       	ldi	r24, 0x4F	; 79
    1bc0:	89 8f       	std	Y+25, r24	; 0x19
    1bc2:	8e e4       	ldi	r24, 0x4E	; 78
    1bc4:	8a 8f       	std	Y+26, r24	; 0x1a
    1bc6:	1b 8e       	std	Y+27, r1	; 0x1b
    1bc8:	1c 8e       	std	Y+28, r1	; 0x1c
    1bca:	1d 8e       	std	Y+29, r1	; 0x1d
    1bcc:	8e 01       	movw	r16, r28
    1bce:	0b 5e       	subi	r16, 0xEB	; 235
    1bd0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd2:	be 01       	movw	r22, r28
    1bd4:	65 5e       	subi	r22, 0xE5	; 229
    1bd6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd8:	f8 01       	movw	r30, r16
    1bda:	80 e0       	ldi	r24, 0x00	; 0
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    1bde:	b8 e0       	ldi	r27, 0x08	; 8
    1be0:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    1be2:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    1be4:	29 2f       	mov	r18, r25
    1be6:	33 27       	eor	r19, r19
    1be8:	27 fd       	sbrc	r18, 7
    1bea:	3a 95       	dec	r19
    1bec:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    1bee:	32 2f       	mov	r19, r18
    1bf0:	22 27       	eor	r18, r18
    1bf2:	4b 2f       	mov	r20, r27
    1bf4:	5f 2d       	mov	r21, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    1bf6:	33 23       	and	r19, r19
    1bf8:	3c f4       	brge	.+14     	; 0x1c08 <__stack+0x1309>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    1bfa:	22 0f       	add	r18, r18
    1bfc:	33 1f       	adc	r19, r19
    1bfe:	a1 e2       	ldi	r26, 0x21	; 33
    1c00:	2a 27       	eor	r18, r26
    1c02:	a0 e1       	ldi	r26, 0x10	; 16
    1c04:	3a 27       	eor	r19, r26
    1c06:	02 c0       	rjmp	.+4      	; 0x1c0c <__stack+0x130d>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    1c08:	22 0f       	add	r18, r18
    1c0a:	33 1f       	adc	r19, r19
    1c0c:	41 50       	subi	r20, 0x01	; 1
    1c0e:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    1c10:	91 f7       	brne	.-28     	; 0x1bf6 <__stack+0x12f7>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    1c12:	98 2f       	mov	r25, r24
    1c14:	88 27       	eor	r24, r24
    1c16:	82 27       	eor	r24, r18
    1c18:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    1c1a:	e6 17       	cp	r30, r22
    1c1c:	f7 07       	cpc	r31, r23
    1c1e:	09 f7       	brne	.-62     	; 0x1be2 <__stack+0x12e3>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    1c20:	7c 01       	movw	r14, r24
    1c22:	40 e1       	ldi	r20, 0x10	; 16
    1c24:	6f e2       	ldi	r22, 0x2F	; 47
    1c26:	75 e0       	ldi	r23, 0x05	; 5
    1c28:	0e 94 04 3b 	call	0x7608	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    1c2c:	8f e2       	ldi	r24, 0x2F	; 47
    1c2e:	95 e0       	ldi	r25, 0x05	; 5
    1c30:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <strupr>
	if(crcXmodem < 0x10)
    1c34:	b0 e1       	ldi	r27, 0x10	; 16
    1c36:	eb 16       	cp	r14, r27
    1c38:	f1 04       	cpc	r15, r1
    1c3a:	38 f4       	brcc	.+14     	; 0x1c4a <__stack+0x134b>
	{
		tx_string[cnt+4] = crc[0];
    1c3c:	80 91 2f 05 	lds	r24, 0x052F
    1c40:	8e 8f       	std	Y+30, r24	; 0x1e
		tx_string[cnt+3] = '0';
    1c42:	80 e3       	ldi	r24, 0x30	; 48
    1c44:	8d 8f       	std	Y+29, r24	; 0x1d
		tx_string[cnt+2] = '0';
    1c46:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+1] = '0';
    1c48:	8b 8f       	std	Y+27, r24	; 0x1b
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    1c4a:	c7 01       	movw	r24, r14
    1c4c:	40 97       	sbiw	r24, 0x10	; 16
    1c4e:	80 3f       	cpi	r24, 0xF0	; 240
    1c50:	91 05       	cpc	r25, r1
    1c52:	48 f4       	brcc	.+18     	; 0x1c66 <__stack+0x1367>
	{
		tx_string[cnt+4] = crc[1];
    1c54:	ef e2       	ldi	r30, 0x2F	; 47
    1c56:	f5 e0       	ldi	r31, 0x05	; 5
    1c58:	81 81       	ldd	r24, Z+1	; 0x01
    1c5a:	8e 8f       	std	Y+30, r24	; 0x1e
		tx_string[cnt+3] = crc[0];
    1c5c:	80 81       	ld	r24, Z
    1c5e:	8d 8f       	std	Y+29, r24	; 0x1d
		tx_string[cnt+2] = '0';
    1c60:	80 e3       	ldi	r24, 0x30	; 48
    1c62:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+1] = '0';		
    1c64:	8b 8f       	std	Y+27, r24	; 0x1b
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    1c66:	c7 01       	movw	r24, r14
    1c68:	9a 95       	dec	r25
    1c6a:	81 15       	cp	r24, r1
    1c6c:	9f 40       	sbci	r25, 0x0F	; 15
    1c6e:	50 f4       	brcc	.+20     	; 0x1c84 <__stack+0x1385>
	{
		tx_string[cnt+4] = crc[2];
    1c70:	ef e2       	ldi	r30, 0x2F	; 47
    1c72:	f5 e0       	ldi	r31, 0x05	; 5
    1c74:	82 81       	ldd	r24, Z+2	; 0x02
    1c76:	8e 8f       	std	Y+30, r24	; 0x1e
		tx_string[cnt+3] = crc[1];
    1c78:	81 81       	ldd	r24, Z+1	; 0x01
    1c7a:	8d 8f       	std	Y+29, r24	; 0x1d
		tx_string[cnt+2] = crc[0];
    1c7c:	80 81       	ld	r24, Z
    1c7e:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+1] = '0';		
    1c80:	80 e3       	ldi	r24, 0x30	; 48
    1c82:	8b 8f       	std	Y+27, r24	; 0x1b
	}
	if(crcXmodem >= 0x1000)
    1c84:	e1 14       	cp	r14, r1
    1c86:	f0 e1       	ldi	r31, 0x10	; 16
    1c88:	ff 06       	cpc	r15, r31
    1c8a:	50 f0       	brcs	.+20     	; 0x1ca0 <__stack+0x13a1>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    1c8c:	ef e2       	ldi	r30, 0x2F	; 47
    1c8e:	f5 e0       	ldi	r31, 0x05	; 5
    1c90:	80 81       	ld	r24, Z
    1c92:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+2] = crc[1];
    1c94:	81 81       	ldd	r24, Z+1	; 0x01
    1c96:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+3] = crc[2];
    1c98:	82 81       	ldd	r24, Z+2	; 0x02
    1c9a:	8d 8f       	std	Y+29, r24	; 0x1d
		tx_string[cnt+4] = crc[3];
    1c9c:	83 81       	ldd	r24, Z+3	; 0x03
    1c9e:	8e 8f       	std	Y+30, r24	; 0x1e
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    1ca0:	8d e0       	ldi	r24, 0x0D	; 13
    1ca2:	8f 8f       	std	Y+31, r24	; 0x1f
    1ca4:	ae 01       	movw	r20, r28
    1ca6:	40 5e       	subi	r20, 0xE0	; 224
    1ca8:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    1caa:	e7 e5       	ldi	r30, 0x57	; 87
    1cac:	f5 e0       	ldi	r31, 0x05	; 5
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    1cae:	61 ec       	ldi	r22, 0xC1	; 193
    1cb0:	70 e0       	ldi	r23, 0x00	; 0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    1cb4:	d8 01       	movw	r26, r16
    1cb6:	8d 91       	ld	r24, X+
    1cb8:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    1cba:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    1cbc:	21 81       	ldd	r18, Z+1	; 0x01
    1cbe:	90 81       	ld	r25, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    1cc0:	29 13       	cpse	r18, r25
    1cc2:	04 c0       	rjmp	.+8      	; 0x1ccc <__stack+0x13cd>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    1cc4:	db 01       	movw	r26, r22
    1cc6:	9c 91       	ld	r25, X
    1cc8:	90 62       	ori	r25, 0x20	; 32
    1cca:	9c 93       	st	X, r25
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    1ccc:	90 81       	ld	r25, Z
    1cce:	a3 81       	ldd	r26, Z+3	; 0x03
    1cd0:	b4 81       	ldd	r27, Z+4	; 0x04
    1cd2:	a9 0f       	add	r26, r25
    1cd4:	b1 1d       	adc	r27, r1
    1cd6:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    1cd8:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    1cda:	a2 2f       	mov	r26, r18
    1cdc:	b0 e0       	ldi	r27, 0x00	; 0
    1cde:	82 81       	ldd	r24, Z+2	; 0x02
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	01 97       	sbiw	r24, 0x01	; 1
    1ce4:	a8 17       	cp	r26, r24
    1ce6:	b9 07       	cpc	r27, r25
    1ce8:	11 f0       	breq	.+4      	; 0x1cee <__stack+0x13ef>
    1cea:	2f 5f       	subi	r18, 0xFF	; 255
    1cec:	01 c0       	rjmp	.+2      	; 0x1cf0 <__stack+0x13f1>
    1cee:	23 2f       	mov	r18, r19
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    1cf0:	20 83       	st	Z, r18
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    1cf2:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    1cf4:	04 17       	cp	r16, r20
    1cf6:	15 07       	cpc	r17, r21
    1cf8:	e9 f6       	brne	.-70     	; 0x1cb4 <__stack+0x13b5>
    1cfa:	6f c5       	rjmp	.+2782   	; 0x27da <__stack+0x1edb>
		if(rx_string[10] == '1')
		{
			ch3.heaterEnable = true;
			printStatus("ON");
		}
		else if(rx_string[10] == '0')
    1cfc:	80 33       	cpi	r24, 0x30	; 48
    1cfe:	09 f0       	breq	.+2      	; 0x1d02 <__stack+0x1403>
    1d00:	6c c5       	rjmp	.+2776   	; 0x27da <__stack+0x1edb>
		{
			ch3.heaterEnable = false;
    1d02:	10 92 ff 01 	sts	0x01FF, r1
			printStatus("OFF");
    1d06:	8b e1       	ldi	r24, 0x1B	; 27
    1d08:	91 e0       	ldi	r25, 0x01	; 1
    1d0a:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
    1d0e:	65 c5       	rjmp	.+2762   	; 0x27da <__stack+0x1edb>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    1d10:	6e e1       	ldi	r22, 0x1E	; 30
    1d12:	70 e0       	ldi	r23, 0x00	; 0
    1d14:	89 e3       	ldi	r24, 0x39	; 57
    1d16:	95 e0       	ldi	r25, 0x05	; 5
    1d18:	0e 94 ef 3a 	call	0x75de	; 0x75de <strnlen>
    1d1c:	05 97       	sbiw	r24, 0x05	; 5
    1d1e:	ac 01       	movw	r20, r24
    1d20:	de 01       	movw	r26, r28
    1d22:	11 96       	adiw	r26, 0x01	; 1
    1d24:	9e 01       	movw	r18, r28
    1d26:	2b 5e       	subi	r18, 0xEB	; 235
    1d28:	3f 4f       	sbci	r19, 0xFF	; 255
    1d2a:	fd 01       	movw	r30, r26
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    1d2c:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    1d2e:	e2 17       	cp	r30, r18
    1d30:	f3 07       	cpc	r31, r19
    1d32:	e1 f7       	brne	.-8      	; 0x1d2c <__stack+0x142d>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    1d34:	4b 30       	cpi	r20, 0x0B	; 11
    1d36:	51 05       	cpc	r21, r1
    1d38:	54 f0       	brlt	.+20     	; 0x1d4e <__stack+0x144f>
    1d3a:	e3 e4       	ldi	r30, 0x43	; 67
    1d3c:	f5 e0       	ldi	r31, 0x05	; 5
    1d3e:	9c 01       	movw	r18, r24
    1d40:	27 5c       	subi	r18, 0xC7	; 199
    1d42:	3a 4f       	sbci	r19, 0xFA	; 250
	{
		param[idx] = stringToParse[i];
    1d44:	91 91       	ld	r25, Z+
    1d46:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    1d48:	e2 17       	cp	r30, r18
    1d4a:	f3 07       	cpc	r31, r19
    1d4c:	d9 f7       	brne	.-10     	; 0x1d44 <__stack+0x1445>
		}
		break;						 
		
		case 455:	// Set Temperature error window
		ParamParse(rx_string, param);
		ch3.tempErrorWin = atof(param);
    1d4e:	ce 01       	movw	r24, r28
    1d50:	01 96       	adiw	r24, 0x01	; 1
    1d52:	0e 94 8a 3a 	call	0x7514	; 0x7514 <atof>
    1d56:	60 93 f1 01 	sts	0x01F1, r22
    1d5a:	70 93 f2 01 	sts	0x01F2, r23
    1d5e:	80 93 f3 01 	sts	0x01F3, r24
    1d62:	90 93 f4 01 	sts	0x01F4, r25
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    1d66:	81 e2       	ldi	r24, 0x21	; 33
    1d68:	8d 8b       	std	Y+21, r24	; 0x15
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    1d6a:	e9 e3       	ldi	r30, 0x39	; 57
    1d6c:	f5 e0       	ldi	r31, 0x05	; 5
    1d6e:	81 81       	ldd	r24, Z+1	; 0x01
    1d70:	8e 8b       	std	Y+22, r24	; 0x16
    1d72:	82 81       	ldd	r24, Z+2	; 0x02
    1d74:	8f 8b       	std	Y+23, r24	; 0x17
    1d76:	83 81       	ldd	r24, Z+3	; 0x03
    1d78:	88 8f       	std	Y+24, r24	; 0x18
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    1d7a:	19 8e       	std	Y+25, r1	; 0x19
    1d7c:	1a 8e       	std	Y+26, r1	; 0x1a
    1d7e:	1b 8e       	std	Y+27, r1	; 0x1b
    1d80:	8e 01       	movw	r16, r28
    1d82:	0b 5e       	subi	r16, 0xEB	; 235
    1d84:	1f 4f       	sbci	r17, 0xFF	; 255
    1d86:	be 01       	movw	r22, r28
    1d88:	67 5e       	subi	r22, 0xE7	; 231
    1d8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d8c:	f8 01       	movw	r30, r16
    1d8e:	80 e0       	ldi	r24, 0x00	; 0
    1d90:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    1d92:	b8 e0       	ldi	r27, 0x08	; 8
    1d94:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    1d96:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    1d98:	29 2f       	mov	r18, r25
    1d9a:	33 27       	eor	r19, r19
    1d9c:	27 fd       	sbrc	r18, 7
    1d9e:	3a 95       	dec	r19
    1da0:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    1da2:	32 2f       	mov	r19, r18
    1da4:	22 27       	eor	r18, r18
    1da6:	4b 2f       	mov	r20, r27
    1da8:	5f 2d       	mov	r21, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    1daa:	33 23       	and	r19, r19
    1dac:	3c f4       	brge	.+14     	; 0x1dbc <__stack+0x14bd>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    1dae:	22 0f       	add	r18, r18
    1db0:	33 1f       	adc	r19, r19
    1db2:	a1 e2       	ldi	r26, 0x21	; 33
    1db4:	2a 27       	eor	r18, r26
    1db6:	a0 e1       	ldi	r26, 0x10	; 16
    1db8:	3a 27       	eor	r19, r26
    1dba:	02 c0       	rjmp	.+4      	; 0x1dc0 <__stack+0x14c1>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    1dbc:	22 0f       	add	r18, r18
    1dbe:	33 1f       	adc	r19, r19
    1dc0:	41 50       	subi	r20, 0x01	; 1
    1dc2:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    1dc4:	91 f7       	brne	.-28     	; 0x1daa <__stack+0x14ab>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    1dc6:	98 2f       	mov	r25, r24
    1dc8:	88 27       	eor	r24, r24
    1dca:	82 27       	eor	r24, r18
    1dcc:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    1dce:	e6 17       	cp	r30, r22
    1dd0:	f7 07       	cpc	r31, r23
    1dd2:	09 f7       	brne	.-62     	; 0x1d96 <__stack+0x1497>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    1dd4:	7c 01       	movw	r14, r24
    1dd6:	40 e1       	ldi	r20, 0x10	; 16
    1dd8:	6f e2       	ldi	r22, 0x2F	; 47
    1dda:	75 e0       	ldi	r23, 0x05	; 5
    1ddc:	0e 94 04 3b 	call	0x7608	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    1de0:	8f e2       	ldi	r24, 0x2F	; 47
    1de2:	95 e0       	ldi	r25, 0x05	; 5
    1de4:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <strupr>
	if(crcXmodem < 0x10)
    1de8:	b0 e1       	ldi	r27, 0x10	; 16
    1dea:	eb 16       	cp	r14, r27
    1dec:	f1 04       	cpc	r15, r1
    1dee:	38 f4       	brcc	.+14     	; 0x1dfe <__stack+0x14ff>
	{
		tx_string[cnt+4] = crc[0];
    1df0:	80 91 2f 05 	lds	r24, 0x052F
    1df4:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+3] = '0';
    1df6:	80 e3       	ldi	r24, 0x30	; 48
    1df8:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+2] = '0';
    1dfa:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+1] = '0';
    1dfc:	89 8f       	std	Y+25, r24	; 0x19
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    1dfe:	c7 01       	movw	r24, r14
    1e00:	40 97       	sbiw	r24, 0x10	; 16
    1e02:	80 3f       	cpi	r24, 0xF0	; 240
    1e04:	91 05       	cpc	r25, r1
    1e06:	48 f4       	brcc	.+18     	; 0x1e1a <__stack+0x151b>
	{
		tx_string[cnt+4] = crc[1];
    1e08:	ef e2       	ldi	r30, 0x2F	; 47
    1e0a:	f5 e0       	ldi	r31, 0x05	; 5
    1e0c:	81 81       	ldd	r24, Z+1	; 0x01
    1e0e:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+3] = crc[0];
    1e10:	80 81       	ld	r24, Z
    1e12:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+2] = '0';
    1e14:	80 e3       	ldi	r24, 0x30	; 48
    1e16:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+1] = '0';		
    1e18:	89 8f       	std	Y+25, r24	; 0x19
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    1e1a:	c7 01       	movw	r24, r14
    1e1c:	9a 95       	dec	r25
    1e1e:	81 15       	cp	r24, r1
    1e20:	9f 40       	sbci	r25, 0x0F	; 15
    1e22:	50 f4       	brcc	.+20     	; 0x1e38 <__stack+0x1539>
	{
		tx_string[cnt+4] = crc[2];
    1e24:	ef e2       	ldi	r30, 0x2F	; 47
    1e26:	f5 e0       	ldi	r31, 0x05	; 5
    1e28:	82 81       	ldd	r24, Z+2	; 0x02
    1e2a:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+3] = crc[1];
    1e2c:	81 81       	ldd	r24, Z+1	; 0x01
    1e2e:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+2] = crc[0];
    1e30:	80 81       	ld	r24, Z
    1e32:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+1] = '0';		
    1e34:	80 e3       	ldi	r24, 0x30	; 48
    1e36:	89 8f       	std	Y+25, r24	; 0x19
	}
	if(crcXmodem >= 0x1000)
    1e38:	e1 14       	cp	r14, r1
    1e3a:	f0 e1       	ldi	r31, 0x10	; 16
    1e3c:	ff 06       	cpc	r15, r31
    1e3e:	50 f0       	brcs	.+20     	; 0x1e54 <__stack+0x1555>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    1e40:	ef e2       	ldi	r30, 0x2F	; 47
    1e42:	f5 e0       	ldi	r31, 0x05	; 5
    1e44:	80 81       	ld	r24, Z
    1e46:	89 8f       	std	Y+25, r24	; 0x19
		tx_string[cnt+2] = crc[1];
    1e48:	81 81       	ldd	r24, Z+1	; 0x01
    1e4a:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+3] = crc[2];
    1e4c:	82 81       	ldd	r24, Z+2	; 0x02
    1e4e:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+4] = crc[3];
    1e50:	83 81       	ldd	r24, Z+3	; 0x03
    1e52:	8c 8f       	std	Y+28, r24	; 0x1c
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    1e54:	8d e0       	ldi	r24, 0x0D	; 13
    1e56:	8d 8f       	std	Y+29, r24	; 0x1d
    1e58:	ae 01       	movw	r20, r28
    1e5a:	42 5e       	subi	r20, 0xE2	; 226
    1e5c:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    1e5e:	e7 e5       	ldi	r30, 0x57	; 87
    1e60:	f5 e0       	ldi	r31, 0x05	; 5
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    1e62:	61 ec       	ldi	r22, 0xC1	; 193
    1e64:	70 e0       	ldi	r23, 0x00	; 0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    1e66:	30 e0       	ldi	r19, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    1e68:	d8 01       	movw	r26, r16
    1e6a:	8d 91       	ld	r24, X+
    1e6c:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    1e6e:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    1e70:	21 81       	ldd	r18, Z+1	; 0x01
    1e72:	90 81       	ld	r25, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    1e74:	29 13       	cpse	r18, r25
    1e76:	04 c0       	rjmp	.+8      	; 0x1e80 <__stack+0x1581>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    1e78:	db 01       	movw	r26, r22
    1e7a:	9c 91       	ld	r25, X
    1e7c:	90 62       	ori	r25, 0x20	; 32
    1e7e:	9c 93       	st	X, r25
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    1e80:	90 81       	ld	r25, Z
    1e82:	a3 81       	ldd	r26, Z+3	; 0x03
    1e84:	b4 81       	ldd	r27, Z+4	; 0x04
    1e86:	a9 0f       	add	r26, r25
    1e88:	b1 1d       	adc	r27, r1
    1e8a:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    1e8c:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    1e8e:	a2 2f       	mov	r26, r18
    1e90:	b0 e0       	ldi	r27, 0x00	; 0
    1e92:	82 81       	ldd	r24, Z+2	; 0x02
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	01 97       	sbiw	r24, 0x01	; 1
    1e98:	a8 17       	cp	r26, r24
    1e9a:	b9 07       	cpc	r27, r25
    1e9c:	11 f0       	breq	.+4      	; 0x1ea2 <__stack+0x15a3>
    1e9e:	2f 5f       	subi	r18, 0xFF	; 255
    1ea0:	01 c0       	rjmp	.+2      	; 0x1ea4 <__stack+0x15a5>
    1ea2:	23 2f       	mov	r18, r19
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    1ea4:	20 83       	st	Z, r18
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    1ea6:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    1ea8:	04 17       	cp	r16, r20
    1eaa:	15 07       	cpc	r17, r21
    1eac:	e9 f6       	brne	.-70     	; 0x1e68 <__stack+0x1569>
    1eae:	95 c4       	rjmp	.+2346   	; 0x27da <__stack+0x1edb>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    1eb0:	6e e1       	ldi	r22, 0x1E	; 30
    1eb2:	70 e0       	ldi	r23, 0x00	; 0
    1eb4:	89 e3       	ldi	r24, 0x39	; 57
    1eb6:	95 e0       	ldi	r25, 0x05	; 5
    1eb8:	0e 94 ef 3a 	call	0x75de	; 0x75de <strnlen>
    1ebc:	05 97       	sbiw	r24, 0x05	; 5
    1ebe:	ac 01       	movw	r20, r24
    1ec0:	de 01       	movw	r26, r28
    1ec2:	11 96       	adiw	r26, 0x01	; 1
    1ec4:	9e 01       	movw	r18, r28
    1ec6:	2b 5e       	subi	r18, 0xEB	; 235
    1ec8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eca:	fd 01       	movw	r30, r26
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    1ecc:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    1ece:	e2 17       	cp	r30, r18
    1ed0:	f3 07       	cpc	r31, r19
    1ed2:	e1 f7       	brne	.-8      	; 0x1ecc <__stack+0x15cd>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    1ed4:	4b 30       	cpi	r20, 0x0B	; 11
    1ed6:	51 05       	cpc	r21, r1
    1ed8:	54 f0       	brlt	.+20     	; 0x1eee <__stack+0x15ef>
    1eda:	e3 e4       	ldi	r30, 0x43	; 67
    1edc:	f5 e0       	ldi	r31, 0x05	; 5
    1ede:	9c 01       	movw	r18, r24
    1ee0:	27 5c       	subi	r18, 0xC7	; 199
    1ee2:	3a 4f       	sbci	r19, 0xFA	; 250
	{
		param[idx] = stringToParse[i];
    1ee4:	91 91       	ld	r25, Z+
    1ee6:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    1ee8:	e2 17       	cp	r30, r18
    1eea:	f3 07       	cpc	r31, r19
    1eec:	d9 f7       	brne	.-10     	; 0x1ee4 <__stack+0x15e5>
		printStatus("");
		break;

		case 456:	// Set Temperature Settle time
		ParamParse(rx_string, param);
		ch3.tempSettleTime = atoi(param);
    1eee:	ce 01       	movw	r24, r28
    1ef0:	01 96       	adiw	r24, 0x01	; 1
    1ef2:	0e 94 8d 3a 	call	0x751a	; 0x751a <atoi>
    1ef6:	90 93 f8 01 	sts	0x01F8, r25
    1efa:	80 93 f7 01 	sts	0x01F7, r24
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    1efe:	81 e2       	ldi	r24, 0x21	; 33
    1f00:	8d 8b       	std	Y+21, r24	; 0x15
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    1f02:	e9 e3       	ldi	r30, 0x39	; 57
    1f04:	f5 e0       	ldi	r31, 0x05	; 5
    1f06:	81 81       	ldd	r24, Z+1	; 0x01
    1f08:	8e 8b       	std	Y+22, r24	; 0x16
    1f0a:	82 81       	ldd	r24, Z+2	; 0x02
    1f0c:	8f 8b       	std	Y+23, r24	; 0x17
    1f0e:	83 81       	ldd	r24, Z+3	; 0x03
    1f10:	88 8f       	std	Y+24, r24	; 0x18
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    1f12:	19 8e       	std	Y+25, r1	; 0x19
    1f14:	1a 8e       	std	Y+26, r1	; 0x1a
    1f16:	1b 8e       	std	Y+27, r1	; 0x1b
    1f18:	8e 01       	movw	r16, r28
    1f1a:	0b 5e       	subi	r16, 0xEB	; 235
    1f1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f1e:	be 01       	movw	r22, r28
    1f20:	67 5e       	subi	r22, 0xE7	; 231
    1f22:	7f 4f       	sbci	r23, 0xFF	; 255
    1f24:	f8 01       	movw	r30, r16
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    1f2a:	b8 e0       	ldi	r27, 0x08	; 8
    1f2c:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    1f2e:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    1f30:	29 2f       	mov	r18, r25
    1f32:	33 27       	eor	r19, r19
    1f34:	27 fd       	sbrc	r18, 7
    1f36:	3a 95       	dec	r19
    1f38:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    1f3a:	32 2f       	mov	r19, r18
    1f3c:	22 27       	eor	r18, r18
    1f3e:	4b 2f       	mov	r20, r27
    1f40:	5f 2d       	mov	r21, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    1f42:	33 23       	and	r19, r19
    1f44:	3c f4       	brge	.+14     	; 0x1f54 <__stack+0x1655>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    1f46:	22 0f       	add	r18, r18
    1f48:	33 1f       	adc	r19, r19
    1f4a:	a1 e2       	ldi	r26, 0x21	; 33
    1f4c:	2a 27       	eor	r18, r26
    1f4e:	a0 e1       	ldi	r26, 0x10	; 16
    1f50:	3a 27       	eor	r19, r26
    1f52:	02 c0       	rjmp	.+4      	; 0x1f58 <__stack+0x1659>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    1f54:	22 0f       	add	r18, r18
    1f56:	33 1f       	adc	r19, r19
    1f58:	41 50       	subi	r20, 0x01	; 1
    1f5a:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    1f5c:	91 f7       	brne	.-28     	; 0x1f42 <__stack+0x1643>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    1f5e:	98 2f       	mov	r25, r24
    1f60:	88 27       	eor	r24, r24
    1f62:	82 27       	eor	r24, r18
    1f64:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    1f66:	e6 17       	cp	r30, r22
    1f68:	f7 07       	cpc	r31, r23
    1f6a:	09 f7       	brne	.-62     	; 0x1f2e <__stack+0x162f>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    1f6c:	7c 01       	movw	r14, r24
    1f6e:	40 e1       	ldi	r20, 0x10	; 16
    1f70:	6f e2       	ldi	r22, 0x2F	; 47
    1f72:	75 e0       	ldi	r23, 0x05	; 5
    1f74:	0e 94 04 3b 	call	0x7608	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    1f78:	8f e2       	ldi	r24, 0x2F	; 47
    1f7a:	95 e0       	ldi	r25, 0x05	; 5
    1f7c:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <strupr>
	if(crcXmodem < 0x10)
    1f80:	b0 e1       	ldi	r27, 0x10	; 16
    1f82:	eb 16       	cp	r14, r27
    1f84:	f1 04       	cpc	r15, r1
    1f86:	38 f4       	brcc	.+14     	; 0x1f96 <__stack+0x1697>
	{
		tx_string[cnt+4] = crc[0];
    1f88:	80 91 2f 05 	lds	r24, 0x052F
    1f8c:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+3] = '0';
    1f8e:	80 e3       	ldi	r24, 0x30	; 48
    1f90:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+2] = '0';
    1f92:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+1] = '0';
    1f94:	89 8f       	std	Y+25, r24	; 0x19
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    1f96:	c7 01       	movw	r24, r14
    1f98:	40 97       	sbiw	r24, 0x10	; 16
    1f9a:	80 3f       	cpi	r24, 0xF0	; 240
    1f9c:	91 05       	cpc	r25, r1
    1f9e:	48 f4       	brcc	.+18     	; 0x1fb2 <__stack+0x16b3>
	{
		tx_string[cnt+4] = crc[1];
    1fa0:	ef e2       	ldi	r30, 0x2F	; 47
    1fa2:	f5 e0       	ldi	r31, 0x05	; 5
    1fa4:	81 81       	ldd	r24, Z+1	; 0x01
    1fa6:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+3] = crc[0];
    1fa8:	80 81       	ld	r24, Z
    1faa:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+2] = '0';
    1fac:	80 e3       	ldi	r24, 0x30	; 48
    1fae:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+1] = '0';		
    1fb0:	89 8f       	std	Y+25, r24	; 0x19
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    1fb2:	c7 01       	movw	r24, r14
    1fb4:	9a 95       	dec	r25
    1fb6:	81 15       	cp	r24, r1
    1fb8:	9f 40       	sbci	r25, 0x0F	; 15
    1fba:	50 f4       	brcc	.+20     	; 0x1fd0 <__stack+0x16d1>
	{
		tx_string[cnt+4] = crc[2];
    1fbc:	ef e2       	ldi	r30, 0x2F	; 47
    1fbe:	f5 e0       	ldi	r31, 0x05	; 5
    1fc0:	82 81       	ldd	r24, Z+2	; 0x02
    1fc2:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+3] = crc[1];
    1fc4:	81 81       	ldd	r24, Z+1	; 0x01
    1fc6:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+2] = crc[0];
    1fc8:	80 81       	ld	r24, Z
    1fca:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+1] = '0';		
    1fcc:	80 e3       	ldi	r24, 0x30	; 48
    1fce:	89 8f       	std	Y+25, r24	; 0x19
	}
	if(crcXmodem >= 0x1000)
    1fd0:	e1 14       	cp	r14, r1
    1fd2:	f0 e1       	ldi	r31, 0x10	; 16
    1fd4:	ff 06       	cpc	r15, r31
    1fd6:	50 f0       	brcs	.+20     	; 0x1fec <__stack+0x16ed>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    1fd8:	ef e2       	ldi	r30, 0x2F	; 47
    1fda:	f5 e0       	ldi	r31, 0x05	; 5
    1fdc:	80 81       	ld	r24, Z
    1fde:	89 8f       	std	Y+25, r24	; 0x19
		tx_string[cnt+2] = crc[1];
    1fe0:	81 81       	ldd	r24, Z+1	; 0x01
    1fe2:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+3] = crc[2];
    1fe4:	82 81       	ldd	r24, Z+2	; 0x02
    1fe6:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+4] = crc[3];
    1fe8:	83 81       	ldd	r24, Z+3	; 0x03
    1fea:	8c 8f       	std	Y+28, r24	; 0x1c
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    1fec:	8d e0       	ldi	r24, 0x0D	; 13
    1fee:	8d 8f       	std	Y+29, r24	; 0x1d
    1ff0:	ae 01       	movw	r20, r28
    1ff2:	42 5e       	subi	r20, 0xE2	; 226
    1ff4:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    1ff6:	e7 e5       	ldi	r30, 0x57	; 87
    1ff8:	f5 e0       	ldi	r31, 0x05	; 5
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    1ffa:	61 ec       	ldi	r22, 0xC1	; 193
    1ffc:	70 e0       	ldi	r23, 0x00	; 0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    2000:	d8 01       	movw	r26, r16
    2002:	8d 91       	ld	r24, X+
    2004:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    2006:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    2008:	21 81       	ldd	r18, Z+1	; 0x01
    200a:	90 81       	ld	r25, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    200c:	29 13       	cpse	r18, r25
    200e:	04 c0       	rjmp	.+8      	; 0x2018 <__stack+0x1719>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    2010:	db 01       	movw	r26, r22
    2012:	9c 91       	ld	r25, X
    2014:	90 62       	ori	r25, 0x20	; 32
    2016:	9c 93       	st	X, r25
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    2018:	90 81       	ld	r25, Z
    201a:	a3 81       	ldd	r26, Z+3	; 0x03
    201c:	b4 81       	ldd	r27, Z+4	; 0x04
    201e:	a9 0f       	add	r26, r25
    2020:	b1 1d       	adc	r27, r1
    2022:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    2024:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    2026:	a2 2f       	mov	r26, r18
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	82 81       	ldd	r24, Z+2	; 0x02
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	01 97       	sbiw	r24, 0x01	; 1
    2030:	a8 17       	cp	r26, r24
    2032:	b9 07       	cpc	r27, r25
    2034:	11 f0       	breq	.+4      	; 0x203a <__stack+0x173b>
    2036:	2f 5f       	subi	r18, 0xFF	; 255
    2038:	01 c0       	rjmp	.+2      	; 0x203c <__stack+0x173d>
    203a:	23 2f       	mov	r18, r19
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    203c:	20 83       	st	Z, r18
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    203e:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    2040:	04 17       	cp	r16, r20
    2042:	15 07       	cpc	r17, r21
    2044:	e9 f6       	brne	.-70     	; 0x2000 <__stack+0x1701>
    2046:	c9 c3       	rjmp	.+1938   	; 0x27da <__stack+0x1edb>
	ch3.tempSettleTime = eeprom_read_word((uint16_t*)eepromAdr_TSettleTime3);	
}

static inline void WriteParamToEEPROM()
{
	eeprom_write_float( (float*)eepromAdr_TempSetPoint0, ch0.TempSetPoint );
    2048:	06 ec       	ldi	r16, 0xC6	; 198
    204a:	12 e0       	ldi	r17, 0x02	; 2
    204c:	f8 01       	movw	r30, r16
    204e:	40 81       	ld	r20, Z
    2050:	51 81       	ldd	r21, Z+1	; 0x01
    2052:	62 81       	ldd	r22, Z+2	; 0x02
    2054:	73 81       	ldd	r23, Z+3	; 0x03
    2056:	80 e0       	ldi	r24, 0x00	; 0
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	0e 94 02 3d 	call	0x7a04	; 0x7a04 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_PgainCh0, ch0.Pgain );
    205e:	d8 01       	movw	r26, r16
    2060:	5c 96       	adiw	r26, 0x1c	; 28
    2062:	4d 91       	ld	r20, X+
    2064:	5d 91       	ld	r21, X+
    2066:	6d 91       	ld	r22, X+
    2068:	7c 91       	ld	r23, X
    206a:	5f 97       	sbiw	r26, 0x1f	; 31
    206c:	84 e0       	ldi	r24, 0x04	; 4
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	0e 94 02 3d 	call	0x7a04	; 0x7a04 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_IgainCh0, ch0.Igain );
    2074:	f8 01       	movw	r30, r16
    2076:	40 a1       	ldd	r20, Z+32	; 0x20
    2078:	51 a1       	ldd	r21, Z+33	; 0x21
    207a:	62 a1       	ldd	r22, Z+34	; 0x22
    207c:	73 a1       	ldd	r23, Z+35	; 0x23
    207e:	88 e0       	ldi	r24, 0x08	; 8
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	0e 94 02 3d 	call	0x7a04	; 0x7a04 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_DgainCh0, ch0.Dgain );
    2086:	d8 01       	movw	r26, r16
    2088:	94 96       	adiw	r26, 0x24	; 36
    208a:	4d 91       	ld	r20, X+
    208c:	5d 91       	ld	r21, X+
    208e:	6d 91       	ld	r22, X+
    2090:	7c 91       	ld	r23, X
    2092:	97 97       	sbiw	r26, 0x27	; 39
    2094:	8c e0       	ldi	r24, 0x0C	; 12
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	0e 94 02 3d 	call	0x7a04	; 0x7a04 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_TempErrWin0, ch0.tempErrorWin );
    209c:	40 91 1a 03 	lds	r20, 0x031A
    20a0:	50 91 1b 03 	lds	r21, 0x031B
    20a4:	60 91 1c 03 	lds	r22, 0x031C
    20a8:	70 91 1d 03 	lds	r23, 0x031D
    20ac:	80 e1       	ldi	r24, 0x10	; 16
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	0e 94 02 3d 	call	0x7a04	; 0x7a04 <eeprom_write_dword>
	eeprom_write_word(	(uint16_t*)eepromAdr_TSettleTime0, ch0.tempSettleTime );
    20b4:	60 91 20 03 	lds	r22, 0x0320
    20b8:	70 91 21 03 	lds	r23, 0x0321
    20bc:	84 e1       	ldi	r24, 0x14	; 20
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	0e 94 07 3d 	call	0x7a0e	; 0x7a0e <eeprom_write_word>
	
	eeprom_write_float( (float*)eepromAdr_TempSetPoint1, ch1.TempSetPoint );
    20c4:	03 e6       	ldi	r16, 0x63	; 99
    20c6:	12 e0       	ldi	r17, 0x02	; 2
    20c8:	f8 01       	movw	r30, r16
    20ca:	40 81       	ld	r20, Z
    20cc:	51 81       	ldd	r21, Z+1	; 0x01
    20ce:	62 81       	ldd	r22, Z+2	; 0x02
    20d0:	73 81       	ldd	r23, Z+3	; 0x03
    20d2:	88 e1       	ldi	r24, 0x18	; 24
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	0e 94 02 3d 	call	0x7a04	; 0x7a04 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_PgainCh1, ch1.Pgain );
    20da:	d8 01       	movw	r26, r16
    20dc:	5c 96       	adiw	r26, 0x1c	; 28
    20de:	4d 91       	ld	r20, X+
    20e0:	5d 91       	ld	r21, X+
    20e2:	6d 91       	ld	r22, X+
    20e4:	7c 91       	ld	r23, X
    20e6:	5f 97       	sbiw	r26, 0x1f	; 31
    20e8:	8c e1       	ldi	r24, 0x1C	; 28
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	0e 94 02 3d 	call	0x7a04	; 0x7a04 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_IgainCh1, ch1.Igain );
    20f0:	f8 01       	movw	r30, r16
    20f2:	40 a1       	ldd	r20, Z+32	; 0x20
    20f4:	51 a1       	ldd	r21, Z+33	; 0x21
    20f6:	62 a1       	ldd	r22, Z+34	; 0x22
    20f8:	73 a1       	ldd	r23, Z+35	; 0x23
    20fa:	80 e2       	ldi	r24, 0x20	; 32
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	0e 94 02 3d 	call	0x7a04	; 0x7a04 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_DgainCh1, ch1.Dgain );
    2102:	d8 01       	movw	r26, r16
    2104:	94 96       	adiw	r26, 0x24	; 36
    2106:	4d 91       	ld	r20, X+
    2108:	5d 91       	ld	r21, X+
    210a:	6d 91       	ld	r22, X+
    210c:	7c 91       	ld	r23, X
    210e:	97 97       	sbiw	r26, 0x27	; 39
    2110:	84 e2       	ldi	r24, 0x24	; 36
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	0e 94 02 3d 	call	0x7a04	; 0x7a04 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_TempErrWin1, ch1.tempErrorWin );
    2118:	40 91 b7 02 	lds	r20, 0x02B7
    211c:	50 91 b8 02 	lds	r21, 0x02B8
    2120:	60 91 b9 02 	lds	r22, 0x02B9
    2124:	70 91 ba 02 	lds	r23, 0x02BA
    2128:	88 e2       	ldi	r24, 0x28	; 40
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	0e 94 02 3d 	call	0x7a04	; 0x7a04 <eeprom_write_dword>
	eeprom_write_word(	(uint16_t*)eepromAdr_TSettleTime1, ch1.tempSettleTime );	
    2130:	60 91 bd 02 	lds	r22, 0x02BD
    2134:	70 91 be 02 	lds	r23, 0x02BE
    2138:	8c e2       	ldi	r24, 0x2C	; 44
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	0e 94 07 3d 	call	0x7a0e	; 0x7a0e <eeprom_write_word>
	
	eeprom_write_float( (float*)eepromAdr_TempSetPoint2, ch2.TempSetPoint );
    2140:	00 e0       	ldi	r16, 0x00	; 0
    2142:	12 e0       	ldi	r17, 0x02	; 2
    2144:	f8 01       	movw	r30, r16
    2146:	40 81       	ld	r20, Z
    2148:	51 81       	ldd	r21, Z+1	; 0x01
    214a:	62 81       	ldd	r22, Z+2	; 0x02
    214c:	73 81       	ldd	r23, Z+3	; 0x03
    214e:	80 e3       	ldi	r24, 0x30	; 48
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	0e 94 02 3d 	call	0x7a04	; 0x7a04 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_PgainCh2, ch2.Pgain );
    2156:	d8 01       	movw	r26, r16
    2158:	5c 96       	adiw	r26, 0x1c	; 28
    215a:	4d 91       	ld	r20, X+
    215c:	5d 91       	ld	r21, X+
    215e:	6d 91       	ld	r22, X+
    2160:	7c 91       	ld	r23, X
    2162:	5f 97       	sbiw	r26, 0x1f	; 31
    2164:	84 e3       	ldi	r24, 0x34	; 52
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	0e 94 02 3d 	call	0x7a04	; 0x7a04 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_IgainCh2, ch2.Igain );
    216c:	f8 01       	movw	r30, r16
    216e:	40 a1       	ldd	r20, Z+32	; 0x20
    2170:	51 a1       	ldd	r21, Z+33	; 0x21
    2172:	62 a1       	ldd	r22, Z+34	; 0x22
    2174:	73 a1       	ldd	r23, Z+35	; 0x23
    2176:	88 e3       	ldi	r24, 0x38	; 56
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	0e 94 02 3d 	call	0x7a04	; 0x7a04 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_DgainCh2, ch2.Dgain );
    217e:	d8 01       	movw	r26, r16
    2180:	94 96       	adiw	r26, 0x24	; 36
    2182:	4d 91       	ld	r20, X+
    2184:	5d 91       	ld	r21, X+
    2186:	6d 91       	ld	r22, X+
    2188:	7c 91       	ld	r23, X
    218a:	97 97       	sbiw	r26, 0x27	; 39
    218c:	8c e3       	ldi	r24, 0x3C	; 60
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	0e 94 02 3d 	call	0x7a04	; 0x7a04 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_TempErrWin2, ch2.tempErrorWin );
    2194:	40 91 54 02 	lds	r20, 0x0254
    2198:	50 91 55 02 	lds	r21, 0x0255
    219c:	60 91 56 02 	lds	r22, 0x0256
    21a0:	70 91 57 02 	lds	r23, 0x0257
    21a4:	80 e4       	ldi	r24, 0x40	; 64
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	0e 94 02 3d 	call	0x7a04	; 0x7a04 <eeprom_write_dword>
	eeprom_write_word(	(uint16_t*)eepromAdr_TSettleTime2, ch2.tempSettleTime );	
    21ac:	60 91 5a 02 	lds	r22, 0x025A
    21b0:	70 91 5b 02 	lds	r23, 0x025B
    21b4:	84 e4       	ldi	r24, 0x44	; 68
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	0e 94 07 3d 	call	0x7a0e	; 0x7a0e <eeprom_write_word>
	
	eeprom_write_float( (float*)eepromAdr_TempSetPoint3, ch3.TempSetPoint );
    21bc:	0d e9       	ldi	r16, 0x9D	; 157
    21be:	11 e0       	ldi	r17, 0x01	; 1
    21c0:	f8 01       	movw	r30, r16
    21c2:	40 81       	ld	r20, Z
    21c4:	51 81       	ldd	r21, Z+1	; 0x01
    21c6:	62 81       	ldd	r22, Z+2	; 0x02
    21c8:	73 81       	ldd	r23, Z+3	; 0x03
    21ca:	88 e4       	ldi	r24, 0x48	; 72
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	0e 94 02 3d 	call	0x7a04	; 0x7a04 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_PgainCh3, ch3.Pgain );
    21d2:	d8 01       	movw	r26, r16
    21d4:	5c 96       	adiw	r26, 0x1c	; 28
    21d6:	4d 91       	ld	r20, X+
    21d8:	5d 91       	ld	r21, X+
    21da:	6d 91       	ld	r22, X+
    21dc:	7c 91       	ld	r23, X
    21de:	5f 97       	sbiw	r26, 0x1f	; 31
    21e0:	8c e4       	ldi	r24, 0x4C	; 76
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	0e 94 02 3d 	call	0x7a04	; 0x7a04 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_IgainCh3, ch3.Igain );
    21e8:	f8 01       	movw	r30, r16
    21ea:	40 a1       	ldd	r20, Z+32	; 0x20
    21ec:	51 a1       	ldd	r21, Z+33	; 0x21
    21ee:	62 a1       	ldd	r22, Z+34	; 0x22
    21f0:	73 a1       	ldd	r23, Z+35	; 0x23
    21f2:	80 e5       	ldi	r24, 0x50	; 80
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	0e 94 02 3d 	call	0x7a04	; 0x7a04 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_DgainCh3, ch3.Dgain );
    21fa:	d8 01       	movw	r26, r16
    21fc:	94 96       	adiw	r26, 0x24	; 36
    21fe:	4d 91       	ld	r20, X+
    2200:	5d 91       	ld	r21, X+
    2202:	6d 91       	ld	r22, X+
    2204:	7c 91       	ld	r23, X
    2206:	97 97       	sbiw	r26, 0x27	; 39
    2208:	84 e5       	ldi	r24, 0x54	; 84
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	0e 94 02 3d 	call	0x7a04	; 0x7a04 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_TempErrWin3, ch3.tempErrorWin );
    2210:	40 91 f1 01 	lds	r20, 0x01F1
    2214:	50 91 f2 01 	lds	r21, 0x01F2
    2218:	60 91 f3 01 	lds	r22, 0x01F3
    221c:	70 91 f4 01 	lds	r23, 0x01F4
    2220:	88 e5       	ldi	r24, 0x58	; 88
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	0e 94 02 3d 	call	0x7a04	; 0x7a04 <eeprom_write_dword>
	eeprom_write_word(	(uint16_t*)eepromAdr_TSettleTime3, ch3.tempSettleTime );	
    2228:	60 91 f7 01 	lds	r22, 0x01F7
    222c:	70 91 f8 01 	lds	r23, 0x01F8
    2230:	8c e5       	ldi	r24, 0x5C	; 92
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	0e 94 07 3d 	call	0x7a0e	; 0x7a0e <eeprom_write_word>
		printStatus("");
		break;		

		case 500: // Store param to EEPROM
		WriteParamToEEPROM();
		printStatus("");
    2238:	8c e2       	ldi	r24, 0x2C	; 44
    223a:	91 e0       	ldi	r25, 0x01	; 1
    223c:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
		break;
    2240:	cc c2       	rjmp	.+1432   	; 0x27da <__stack+0x1edb>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    2242:	6e e1       	ldi	r22, 0x1E	; 30
    2244:	70 e0       	ldi	r23, 0x00	; 0
    2246:	89 e3       	ldi	r24, 0x39	; 57
    2248:	95 e0       	ldi	r25, 0x05	; 5
    224a:	0e 94 ef 3a 	call	0x75de	; 0x75de <strnlen>
    224e:	05 97       	sbiw	r24, 0x05	; 5
    2250:	ac 01       	movw	r20, r24
    2252:	de 01       	movw	r26, r28
    2254:	11 96       	adiw	r26, 0x01	; 1
    2256:	9e 01       	movw	r18, r28
    2258:	2b 5e       	subi	r18, 0xEB	; 235
    225a:	3f 4f       	sbci	r19, 0xFF	; 255
    225c:	fd 01       	movw	r30, r26
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    225e:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    2260:	e2 17       	cp	r30, r18
    2262:	f3 07       	cpc	r31, r19
    2264:	e1 f7       	brne	.-8      	; 0x225e <__stack+0x195f>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    2266:	4b 30       	cpi	r20, 0x0B	; 11
    2268:	51 05       	cpc	r21, r1
    226a:	54 f0       	brlt	.+20     	; 0x2280 <__stack+0x1981>
    226c:	e3 e4       	ldi	r30, 0x43	; 67
    226e:	f5 e0       	ldi	r31, 0x05	; 5
    2270:	9c 01       	movw	r18, r24
    2272:	27 5c       	subi	r18, 0xC7	; 199
    2274:	3a 4f       	sbci	r19, 0xFA	; 250
	{
		param[idx] = stringToParse[i];
    2276:	91 91       	ld	r25, Z+
    2278:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    227a:	e2 17       	cp	r30, r18
    227c:	f3 07       	cpc	r31, r19
    227e:	d9 f7       	brne	.-10     	; 0x2276 <__stack+0x1977>
		printStatus("");
		break;
		
		case 600: // Motor homing
		ParamParse(rx_string, param);
		if (strcmp(param, "CW") == 0)
    2280:	60 e2       	ldi	r22, 0x20	; 32
    2282:	71 e0       	ldi	r23, 0x01	; 1
    2284:	ce 01       	movw	r24, r28
    2286:	01 96       	adiw	r24, 0x01	; 1
    2288:	0e 94 e6 3a 	call	0x75cc	; 0x75cc <strcmp>
    228c:	89 2b       	or	r24, r25
    228e:	89 f4       	brne	.+34     	; 0x22b2 <__stack+0x19b3>
		{
			ramp = homingCW;
    2290:	82 e0       	ldi	r24, 0x02	; 2
    2292:	80 93 94 01 	sts	0x0194, r24
			ICR1 = coarseHomingSpeed;
    2296:	e6 e8       	ldi	r30, 0x86	; 134
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	8c e2       	ldi	r24, 0x2C	; 44
    229c:	91 e0       	ldi	r25, 0x01	; 1
    229e:	91 83       	std	Z+1, r25	; 0x01
    22a0:	80 83       	st	Z, r24
			int dummy = ICR1;
    22a2:	80 81       	ld	r24, Z
    22a4:	91 81       	ldd	r25, Z+1	; 0x01
			TIMSK1 |= _BV(OCIE1A);	// Enable step motor irq
    22a6:	ef e6       	ldi	r30, 0x6F	; 111
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	80 81       	ld	r24, Z
    22ac:	82 60       	ori	r24, 0x02	; 2
    22ae:	80 83       	st	Z, r24
    22b0:	18 c0       	rjmp	.+48     	; 0x22e2 <__stack+0x19e3>
		}
		else if (strcmp(param, "CCW") == 0)
    22b2:	6f e1       	ldi	r22, 0x1F	; 31
    22b4:	71 e0       	ldi	r23, 0x01	; 1
    22b6:	ce 01       	movw	r24, r28
    22b8:	01 96       	adiw	r24, 0x01	; 1
    22ba:	0e 94 e6 3a 	call	0x75cc	; 0x75cc <strcmp>
    22be:	89 2b       	or	r24, r25
    22c0:	81 f4       	brne	.+32     	; 0x22e2 <__stack+0x19e3>
		{
			ramp = homingCCW;
    22c2:	85 e0       	ldi	r24, 0x05	; 5
    22c4:	80 93 94 01 	sts	0x0194, r24
			ICR1 = coarseHomingSpeed;
    22c8:	e6 e8       	ldi	r30, 0x86	; 134
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	8c e2       	ldi	r24, 0x2C	; 44
    22ce:	91 e0       	ldi	r25, 0x01	; 1
    22d0:	91 83       	std	Z+1, r25	; 0x01
    22d2:	80 83       	st	Z, r24
			int dummy = ICR1;
    22d4:	80 81       	ld	r24, Z
    22d6:	91 81       	ldd	r25, Z+1	; 0x01
			TIMSK1 |= _BV(OCIE1A);	// Enable step motor irq
    22d8:	ef e6       	ldi	r30, 0x6F	; 111
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	80 81       	ld	r24, Z
    22de:	82 60       	ori	r24, 0x02	; 2
    22e0:	80 83       	st	Z, r24
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    22e2:	81 e2       	ldi	r24, 0x21	; 33
    22e4:	8d 8b       	std	Y+21, r24	; 0x15
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    22e6:	e9 e3       	ldi	r30, 0x39	; 57
    22e8:	f5 e0       	ldi	r31, 0x05	; 5
    22ea:	81 81       	ldd	r24, Z+1	; 0x01
    22ec:	8e 8b       	std	Y+22, r24	; 0x16
    22ee:	82 81       	ldd	r24, Z+2	; 0x02
    22f0:	8f 8b       	std	Y+23, r24	; 0x17
    22f2:	83 81       	ldd	r24, Z+3	; 0x03
    22f4:	88 8f       	std	Y+24, r24	; 0x18
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    22f6:	19 8e       	std	Y+25, r1	; 0x19
    22f8:	1a 8e       	std	Y+26, r1	; 0x1a
    22fa:	1b 8e       	std	Y+27, r1	; 0x1b
    22fc:	8e 01       	movw	r16, r28
    22fe:	0b 5e       	subi	r16, 0xEB	; 235
    2300:	1f 4f       	sbci	r17, 0xFF	; 255
    2302:	be 01       	movw	r22, r28
    2304:	67 5e       	subi	r22, 0xE7	; 231
    2306:	7f 4f       	sbci	r23, 0xFF	; 255
    2308:	f8 01       	movw	r30, r16
    230a:	80 e0       	ldi	r24, 0x00	; 0
    230c:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    230e:	b8 e0       	ldi	r27, 0x08	; 8
    2310:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    2312:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    2314:	29 2f       	mov	r18, r25
    2316:	33 27       	eor	r19, r19
    2318:	27 fd       	sbrc	r18, 7
    231a:	3a 95       	dec	r19
    231c:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    231e:	32 2f       	mov	r19, r18
    2320:	22 27       	eor	r18, r18
    2322:	4b 2f       	mov	r20, r27
    2324:	5f 2d       	mov	r21, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    2326:	33 23       	and	r19, r19
    2328:	3c f4       	brge	.+14     	; 0x2338 <__stack+0x1a39>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    232a:	22 0f       	add	r18, r18
    232c:	33 1f       	adc	r19, r19
    232e:	a1 e2       	ldi	r26, 0x21	; 33
    2330:	2a 27       	eor	r18, r26
    2332:	a0 e1       	ldi	r26, 0x10	; 16
    2334:	3a 27       	eor	r19, r26
    2336:	02 c0       	rjmp	.+4      	; 0x233c <__stack+0x1a3d>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    2338:	22 0f       	add	r18, r18
    233a:	33 1f       	adc	r19, r19
    233c:	41 50       	subi	r20, 0x01	; 1
    233e:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    2340:	91 f7       	brne	.-28     	; 0x2326 <__stack+0x1a27>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    2342:	98 2f       	mov	r25, r24
    2344:	88 27       	eor	r24, r24
    2346:	82 27       	eor	r24, r18
    2348:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    234a:	e6 17       	cp	r30, r22
    234c:	f7 07       	cpc	r31, r23
    234e:	09 f7       	brne	.-62     	; 0x2312 <__stack+0x1a13>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    2350:	7c 01       	movw	r14, r24
    2352:	40 e1       	ldi	r20, 0x10	; 16
    2354:	6f e2       	ldi	r22, 0x2F	; 47
    2356:	75 e0       	ldi	r23, 0x05	; 5
    2358:	0e 94 04 3b 	call	0x7608	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    235c:	8f e2       	ldi	r24, 0x2F	; 47
    235e:	95 e0       	ldi	r25, 0x05	; 5
    2360:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <strupr>
	if(crcXmodem < 0x10)
    2364:	b0 e1       	ldi	r27, 0x10	; 16
    2366:	eb 16       	cp	r14, r27
    2368:	f1 04       	cpc	r15, r1
    236a:	38 f4       	brcc	.+14     	; 0x237a <__stack+0x1a7b>
	{
		tx_string[cnt+4] = crc[0];
    236c:	80 91 2f 05 	lds	r24, 0x052F
    2370:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+3] = '0';
    2372:	80 e3       	ldi	r24, 0x30	; 48
    2374:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+2] = '0';
    2376:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+1] = '0';
    2378:	89 8f       	std	Y+25, r24	; 0x19
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    237a:	c7 01       	movw	r24, r14
    237c:	40 97       	sbiw	r24, 0x10	; 16
    237e:	80 3f       	cpi	r24, 0xF0	; 240
    2380:	91 05       	cpc	r25, r1
    2382:	48 f4       	brcc	.+18     	; 0x2396 <__stack+0x1a97>
	{
		tx_string[cnt+4] = crc[1];
    2384:	ef e2       	ldi	r30, 0x2F	; 47
    2386:	f5 e0       	ldi	r31, 0x05	; 5
    2388:	81 81       	ldd	r24, Z+1	; 0x01
    238a:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+3] = crc[0];
    238c:	80 81       	ld	r24, Z
    238e:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+2] = '0';
    2390:	80 e3       	ldi	r24, 0x30	; 48
    2392:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+1] = '0';		
    2394:	89 8f       	std	Y+25, r24	; 0x19
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    2396:	c7 01       	movw	r24, r14
    2398:	9a 95       	dec	r25
    239a:	81 15       	cp	r24, r1
    239c:	9f 40       	sbci	r25, 0x0F	; 15
    239e:	50 f4       	brcc	.+20     	; 0x23b4 <__stack+0x1ab5>
	{
		tx_string[cnt+4] = crc[2];
    23a0:	ef e2       	ldi	r30, 0x2F	; 47
    23a2:	f5 e0       	ldi	r31, 0x05	; 5
    23a4:	82 81       	ldd	r24, Z+2	; 0x02
    23a6:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+3] = crc[1];
    23a8:	81 81       	ldd	r24, Z+1	; 0x01
    23aa:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+2] = crc[0];
    23ac:	80 81       	ld	r24, Z
    23ae:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+1] = '0';		
    23b0:	80 e3       	ldi	r24, 0x30	; 48
    23b2:	89 8f       	std	Y+25, r24	; 0x19
	}
	if(crcXmodem >= 0x1000)
    23b4:	e1 14       	cp	r14, r1
    23b6:	f0 e1       	ldi	r31, 0x10	; 16
    23b8:	ff 06       	cpc	r15, r31
    23ba:	50 f0       	brcs	.+20     	; 0x23d0 <__stack+0x1ad1>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    23bc:	ef e2       	ldi	r30, 0x2F	; 47
    23be:	f5 e0       	ldi	r31, 0x05	; 5
    23c0:	80 81       	ld	r24, Z
    23c2:	89 8f       	std	Y+25, r24	; 0x19
		tx_string[cnt+2] = crc[1];
    23c4:	81 81       	ldd	r24, Z+1	; 0x01
    23c6:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+3] = crc[2];
    23c8:	82 81       	ldd	r24, Z+2	; 0x02
    23ca:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+4] = crc[3];
    23cc:	83 81       	ldd	r24, Z+3	; 0x03
    23ce:	8c 8f       	std	Y+28, r24	; 0x1c
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    23d0:	8d e0       	ldi	r24, 0x0D	; 13
    23d2:	8d 8f       	std	Y+29, r24	; 0x1d
    23d4:	ae 01       	movw	r20, r28
    23d6:	42 5e       	subi	r20, 0xE2	; 226
    23d8:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    23da:	e7 e5       	ldi	r30, 0x57	; 87
    23dc:	f5 e0       	ldi	r31, 0x05	; 5
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    23de:	61 ec       	ldi	r22, 0xC1	; 193
    23e0:	70 e0       	ldi	r23, 0x00	; 0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    23e2:	30 e0       	ldi	r19, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    23e4:	d8 01       	movw	r26, r16
    23e6:	8d 91       	ld	r24, X+
    23e8:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    23ea:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    23ec:	21 81       	ldd	r18, Z+1	; 0x01
    23ee:	90 81       	ld	r25, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    23f0:	29 13       	cpse	r18, r25
    23f2:	04 c0       	rjmp	.+8      	; 0x23fc <__stack+0x1afd>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    23f4:	db 01       	movw	r26, r22
    23f6:	9c 91       	ld	r25, X
    23f8:	90 62       	ori	r25, 0x20	; 32
    23fa:	9c 93       	st	X, r25
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    23fc:	90 81       	ld	r25, Z
    23fe:	a3 81       	ldd	r26, Z+3	; 0x03
    2400:	b4 81       	ldd	r27, Z+4	; 0x04
    2402:	a9 0f       	add	r26, r25
    2404:	b1 1d       	adc	r27, r1
    2406:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    2408:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    240a:	a2 2f       	mov	r26, r18
    240c:	b0 e0       	ldi	r27, 0x00	; 0
    240e:	82 81       	ldd	r24, Z+2	; 0x02
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	01 97       	sbiw	r24, 0x01	; 1
    2414:	a8 17       	cp	r26, r24
    2416:	b9 07       	cpc	r27, r25
    2418:	11 f0       	breq	.+4      	; 0x241e <__stack+0x1b1f>
    241a:	2f 5f       	subi	r18, 0xFF	; 255
    241c:	01 c0       	rjmp	.+2      	; 0x2420 <__stack+0x1b21>
    241e:	23 2f       	mov	r18, r19
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    2420:	20 83       	st	Z, r18
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    2422:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    2424:	04 17       	cp	r16, r20
    2426:	15 07       	cpc	r17, r21
    2428:	e9 f6       	brne	.-70     	; 0x23e4 <__stack+0x1ae5>
    242a:	d7 c1       	rjmp	.+942    	; 0x27da <__stack+0x1edb>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    242c:	6e e1       	ldi	r22, 0x1E	; 30
    242e:	70 e0       	ldi	r23, 0x00	; 0
    2430:	89 e3       	ldi	r24, 0x39	; 57
    2432:	95 e0       	ldi	r25, 0x05	; 5
    2434:	0e 94 ef 3a 	call	0x75de	; 0x75de <strnlen>
    2438:	05 97       	sbiw	r24, 0x05	; 5
    243a:	ac 01       	movw	r20, r24
    243c:	de 01       	movw	r26, r28
    243e:	11 96       	adiw	r26, 0x01	; 1
    2440:	9e 01       	movw	r18, r28
    2442:	2b 5e       	subi	r18, 0xEB	; 235
    2444:	3f 4f       	sbci	r19, 0xFF	; 255
    2446:	fd 01       	movw	r30, r26
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    2448:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    244a:	e2 17       	cp	r30, r18
    244c:	f3 07       	cpc	r31, r19
    244e:	e1 f7       	brne	.-8      	; 0x2448 <__stack+0x1b49>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    2450:	4b 30       	cpi	r20, 0x0B	; 11
    2452:	51 05       	cpc	r21, r1
    2454:	54 f0       	brlt	.+20     	; 0x246a <__stack+0x1b6b>
    2456:	e3 e4       	ldi	r30, 0x43	; 67
    2458:	f5 e0       	ldi	r31, 0x05	; 5
    245a:	9c 01       	movw	r18, r24
    245c:	27 5c       	subi	r18, 0xC7	; 199
    245e:	3a 4f       	sbci	r19, 0xFA	; 250
	{
		param[idx] = stringToParse[i];
    2460:	91 91       	ld	r25, Z+
    2462:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    2464:	e2 17       	cp	r30, r18
    2466:	f3 07       	cpc	r31, r19
    2468:	d9 f7       	brne	.-10     	; 0x2460 <__stack+0x1b61>
		printStatus("");
		break;
		
		case 601: // Set motor speed
		ParamParse(rx_string, param);
		motorSpeed = atoi(param);
    246a:	ce 01       	movw	r24, r28
    246c:	01 96       	adiw	r24, 0x01	; 1
    246e:	0e 94 8d 3a 	call	0x751a	; 0x751a <atoi>
    2472:	90 93 01 01 	sts	0x0101, r25
    2476:	80 93 00 01 	sts	0x0100, r24
		printStatus("");
    247a:	8c e2       	ldi	r24, 0x2C	; 44
    247c:	91 e0       	ldi	r25, 0x01	; 1
    247e:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
		break;
    2482:	ab c1       	rjmp	.+854    	; 0x27da <__stack+0x1edb>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    2484:	6e e1       	ldi	r22, 0x1E	; 30
    2486:	70 e0       	ldi	r23, 0x00	; 0
    2488:	89 e3       	ldi	r24, 0x39	; 57
    248a:	95 e0       	ldi	r25, 0x05	; 5
    248c:	0e 94 ef 3a 	call	0x75de	; 0x75de <strnlen>
    2490:	05 97       	sbiw	r24, 0x05	; 5
    2492:	ac 01       	movw	r20, r24
    2494:	de 01       	movw	r26, r28
    2496:	11 96       	adiw	r26, 0x01	; 1
    2498:	9e 01       	movw	r18, r28
    249a:	2b 5e       	subi	r18, 0xEB	; 235
    249c:	3f 4f       	sbci	r19, 0xFF	; 255
    249e:	fd 01       	movw	r30, r26
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    24a0:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    24a2:	e2 17       	cp	r30, r18
    24a4:	f3 07       	cpc	r31, r19
    24a6:	e1 f7       	brne	.-8      	; 0x24a0 <__stack+0x1ba1>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    24a8:	4b 30       	cpi	r20, 0x0B	; 11
    24aa:	51 05       	cpc	r21, r1
    24ac:	0c f4       	brge	.+2      	; 0x24b0 <__stack+0x1bb1>
    24ae:	77 c1       	rjmp	.+750    	; 0x279e <__stack+0x1e9f>
    24b0:	e3 e4       	ldi	r30, 0x43	; 67
    24b2:	f5 e0       	ldi	r31, 0x05	; 5
    24b4:	9c 01       	movw	r18, r24
    24b6:	27 5c       	subi	r18, 0xC7	; 199
    24b8:	3a 4f       	sbci	r19, 0xFA	; 250
	{
		param[idx] = stringToParse[i];
    24ba:	91 91       	ld	r25, Z+
    24bc:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    24be:	e2 17       	cp	r30, r18
    24c0:	f3 07       	cpc	r31, r19
    24c2:	d9 f7       	brne	.-10     	; 0x24ba <__stack+0x1bbb>
    24c4:	6c c1       	rjmp	.+728    	; 0x279e <__stack+0x1e9f>
	halfDeltaMove = halfDeltaMove >> 1;
	if (halfDeltaMove < (fullSpeedRampSize * rampAdvance))
	{
		for(int idx = 1; idx < fullSpeedRampSize; idx++)
		{
			if (halfDeltaMove < (long)(rampAdvance * idx))
    24c6:	04 17       	cp	r16, r20
    24c8:	15 07       	cpc	r17, r21
    24ca:	26 07       	cpc	r18, r22
    24cc:	37 07       	cpc	r19, r23
    24ce:	4c f4       	brge	.+18     	; 0x24e2 <__stack+0x1be3>
    24d0:	02 c0       	rjmp	.+4      	; 0x24d6 <__stack+0x1bd7>
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	90 e0       	ldi	r25, 0x00	; 0
			{
				speedRampSize = idx - 1;
    24d6:	01 97       	sbiw	r24, 0x01	; 1
    24d8:	90 93 8d 01 	sts	0x018D, r25
    24dc:	80 93 8c 01 	sts	0x018C, r24
    24e0:	0f c0       	rjmp	.+30     	; 0x2500 <__stack+0x1c01>
{
	long halfDeltaMove = labs(deltaDist);
	halfDeltaMove = halfDeltaMove >> 1;
	if (halfDeltaMove < (fullSpeedRampSize * rampAdvance))
	{
		for(int idx = 1; idx < fullSpeedRampSize; idx++)
    24e2:	01 96       	adiw	r24, 0x01	; 1
    24e4:	40 5b       	subi	r20, 0xB0	; 176
    24e6:	5f 4f       	sbci	r21, 0xFF	; 255
    24e8:	6f 4f       	sbci	r22, 0xFF	; 255
    24ea:	7f 4f       	sbci	r23, 0xFF	; 255
    24ec:	80 32       	cpi	r24, 0x20	; 32
    24ee:	91 05       	cpc	r25, r1
    24f0:	51 f7       	brne	.-44     	; 0x24c6 <__stack+0x1bc7>
    24f2:	06 c0       	rjmp	.+12     	; 0x2500 <__stack+0x1c01>
			}
		}
	}
	else
	{
		speedRampSize = fullSpeedRampSize;
    24f4:	80 e2       	ldi	r24, 0x20	; 32
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	90 93 8d 01 	sts	0x018D, r25
    24fc:	80 93 8c 01 	sts	0x018C, r24
	}
	targetMotorPos = motorPos + deltaDist;
    2500:	80 91 99 01 	lds	r24, 0x0199
    2504:	90 91 9a 01 	lds	r25, 0x019A
    2508:	a0 91 9b 01 	lds	r26, 0x019B
    250c:	b0 91 9c 01 	lds	r27, 0x019C
    2510:	c8 0e       	add	r12, r24
    2512:	d9 1e       	adc	r13, r25
    2514:	ea 1e       	adc	r14, r26
    2516:	fb 1e       	adc	r15, r27
    2518:	c0 92 95 01 	sts	0x0195, r12
    251c:	d0 92 96 01 	sts	0x0196, r13
    2520:	e0 92 97 01 	sts	0x0197, r14
    2524:	f0 92 98 01 	sts	0x0198, r15
	TIMSK1 |= _BV(OCIE1A);
    2528:	ef e6       	ldi	r30, 0x6F	; 111
    252a:	f0 e0       	ldi	r31, 0x00	; 0
    252c:	80 81       	ld	r24, Z
    252e:	82 60       	ori	r24, 0x02	; 2
    2530:	80 83       	st	Z, r24
		
		case 602: // Motor delta move
		ParamParse(rx_string, param);
		ramp = up;
		DeltaMove(atol(param));
		printStatus("");
    2532:	8c e2       	ldi	r24, 0x2C	; 44
    2534:	91 e0       	ldi	r25, 0x01	; 1
    2536:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
		break;
    253a:	4f c1       	rjmp	.+670    	; 0x27da <__stack+0x1edb>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    253c:	6e e1       	ldi	r22, 0x1E	; 30
    253e:	70 e0       	ldi	r23, 0x00	; 0
    2540:	89 e3       	ldi	r24, 0x39	; 57
    2542:	95 e0       	ldi	r25, 0x05	; 5
    2544:	0e 94 ef 3a 	call	0x75de	; 0x75de <strnlen>
    2548:	05 97       	sbiw	r24, 0x05	; 5
    254a:	ac 01       	movw	r20, r24
    254c:	de 01       	movw	r26, r28
    254e:	11 96       	adiw	r26, 0x01	; 1
    2550:	9e 01       	movw	r18, r28
    2552:	2b 5e       	subi	r18, 0xEB	; 235
    2554:	3f 4f       	sbci	r19, 0xFF	; 255
    2556:	fd 01       	movw	r30, r26
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    2558:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    255a:	e2 17       	cp	r30, r18
    255c:	f3 07       	cpc	r31, r19
    255e:	e1 f7       	brne	.-8      	; 0x2558 <__stack+0x1c59>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    2560:	4b 30       	cpi	r20, 0x0B	; 11
    2562:	51 05       	cpc	r21, r1
    2564:	54 f0       	brlt	.+20     	; 0x257a <__stack+0x1c7b>
    2566:	e3 e4       	ldi	r30, 0x43	; 67
    2568:	f5 e0       	ldi	r31, 0x05	; 5
    256a:	9c 01       	movw	r18, r24
    256c:	27 5c       	subi	r18, 0xC7	; 199
    256e:	3a 4f       	sbci	r19, 0xFA	; 250
	{
		param[idx] = stringToParse[i];
    2570:	91 91       	ld	r25, Z+
    2572:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    2574:	e2 17       	cp	r30, r18
    2576:	f3 07       	cpc	r31, r19
    2578:	d9 f7       	brne	.-10     	; 0x2570 <__stack+0x1c71>
		printStatus("");
		break;
		
		case 603: // Motor abs move
		ParamParse(rx_string, param);
		long absPos = atol(param);
    257a:	ce 01       	movw	r24, r28
    257c:	01 96       	adiw	r24, 0x01	; 1
    257e:	0e 94 aa 3a 	call	0x7554	; 0x7554 <atol>
		if(absPos > motorPos)
    2582:	00 91 99 01 	lds	r16, 0x0199
    2586:	10 91 9a 01 	lds	r17, 0x019A
    258a:	20 91 9b 01 	lds	r18, 0x019B
    258e:	30 91 9c 01 	lds	r19, 0x019C
    2592:	06 17       	cp	r16, r22
    2594:	17 07       	cpc	r17, r23
    2596:	28 07       	cpc	r18, r24
    2598:	39 07       	cpc	r19, r25
    259a:	0c f0       	brlt	.+2      	; 0x259e <__stack+0x1c9f>
    259c:	6e c0       	rjmp	.+220    	; 0x267a <__stack+0x1d7b>
		{
			long deltaDist = absPos - motorPos;
    259e:	00 91 99 01 	lds	r16, 0x0199
    25a2:	10 91 9a 01 	lds	r17, 0x019A
    25a6:	20 91 9b 01 	lds	r18, 0x019B
    25aa:	30 91 9c 01 	lds	r19, 0x019C
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	80 1b       	sub	r24, r16
    25b4:	91 0b       	sbc	r25, r17
    25b6:	a2 0b       	sbc	r26, r18
    25b8:	b3 0b       	sbc	r27, r19
			ramp = up;
    25ba:	10 92 94 01 	sts	0x0194, r1
	}
}

static inline void DeltaMove(long deltaDist)
{
	long halfDeltaMove = labs(deltaDist);
    25be:	4c 01       	movw	r8, r24
    25c0:	5d 01       	movw	r10, r26
    25c2:	bb 23       	and	r27, r27
    25c4:	3c f4       	brge	.+14     	; 0x25d4 <__stack+0x1cd5>
    25c6:	88 24       	eor	r8, r8
    25c8:	99 24       	eor	r9, r9
    25ca:	54 01       	movw	r10, r8
    25cc:	88 1a       	sub	r8, r24
    25ce:	99 0a       	sbc	r9, r25
    25d0:	aa 0a       	sbc	r10, r26
    25d2:	bb 0a       	sbc	r11, r27
	halfDeltaMove = halfDeltaMove >> 1;
    25d4:	b5 94       	asr	r11
    25d6:	a7 94       	ror	r10
    25d8:	97 94       	ror	r9
    25da:	87 94       	ror	r8
	if (halfDeltaMove < (fullSpeedRampSize * rampAdvance))
    25dc:	81 14       	cp	r8, r1
    25de:	ea e0       	ldi	r30, 0x0A	; 10
    25e0:	9e 06       	cpc	r9, r30
    25e2:	a1 04       	cpc	r10, r1
    25e4:	b1 04       	cpc	r11, r1
    25e6:	4c f5       	brge	.+82     	; 0x263a <__stack+0x1d3b>
	{
		for(int idx = 1; idx < fullSpeedRampSize; idx++)
		{
			if (halfDeltaMove < (long)(rampAdvance * idx))
    25e8:	f0 e5       	ldi	r31, 0x50	; 80
    25ea:	8f 16       	cp	r8, r31
    25ec:	91 04       	cpc	r9, r1
    25ee:	a1 04       	cpc	r10, r1
    25f0:	b1 04       	cpc	r11, r1
    25f2:	7c f0       	brlt	.+30     	; 0x2612 <__stack+0x1d13>
    25f4:	0f 2e       	mov	r0, r31
    25f6:	f0 ea       	ldi	r31, 0xA0	; 160
    25f8:	cf 2e       	mov	r12, r31
    25fa:	d1 2c       	mov	r13, r1
    25fc:	e1 2c       	mov	r14, r1
    25fe:	f1 2c       	mov	r15, r1
    2600:	f0 2d       	mov	r31, r0
    2602:	22 e0       	ldi	r18, 0x02	; 2
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	8c 14       	cp	r8, r12
    2608:	9d 04       	cpc	r9, r13
    260a:	ae 04       	cpc	r10, r14
    260c:	bf 04       	cpc	r11, r15
    260e:	54 f4       	brge	.+20     	; 0x2624 <__stack+0x1d25>
    2610:	02 c0       	rjmp	.+4      	; 0x2616 <__stack+0x1d17>
    2612:	21 e0       	ldi	r18, 0x01	; 1
    2614:	30 e0       	ldi	r19, 0x00	; 0
			{
				speedRampSize = idx - 1;
    2616:	21 50       	subi	r18, 0x01	; 1
    2618:	31 09       	sbc	r19, r1
    261a:	30 93 8d 01 	sts	0x018D, r19
    261e:	20 93 8c 01 	sts	0x018C, r18
    2622:	11 c0       	rjmp	.+34     	; 0x2646 <__stack+0x1d47>
{
	long halfDeltaMove = labs(deltaDist);
	halfDeltaMove = halfDeltaMove >> 1;
	if (halfDeltaMove < (fullSpeedRampSize * rampAdvance))
	{
		for(int idx = 1; idx < fullSpeedRampSize; idx++)
    2624:	2f 5f       	subi	r18, 0xFF	; 255
    2626:	3f 4f       	sbci	r19, 0xFF	; 255
    2628:	40 e5       	ldi	r20, 0x50	; 80
    262a:	c4 0e       	add	r12, r20
    262c:	d1 1c       	adc	r13, r1
    262e:	e1 1c       	adc	r14, r1
    2630:	f1 1c       	adc	r15, r1
    2632:	20 32       	cpi	r18, 0x20	; 32
    2634:	31 05       	cpc	r19, r1
    2636:	39 f7       	brne	.-50     	; 0x2606 <__stack+0x1d07>
    2638:	06 c0       	rjmp	.+12     	; 0x2646 <__stack+0x1d47>
			}
		}
	}
	else
	{
		speedRampSize = fullSpeedRampSize;
    263a:	20 e2       	ldi	r18, 0x20	; 32
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	30 93 8d 01 	sts	0x018D, r19
    2642:	20 93 8c 01 	sts	0x018C, r18
	}
	targetMotorPos = motorPos + deltaDist;
    2646:	00 91 99 01 	lds	r16, 0x0199
    264a:	10 91 9a 01 	lds	r17, 0x019A
    264e:	20 91 9b 01 	lds	r18, 0x019B
    2652:	30 91 9c 01 	lds	r19, 0x019C
    2656:	80 0f       	add	r24, r16
    2658:	91 1f       	adc	r25, r17
    265a:	a2 1f       	adc	r26, r18
    265c:	b3 1f       	adc	r27, r19
    265e:	80 93 95 01 	sts	0x0195, r24
    2662:	90 93 96 01 	sts	0x0196, r25
    2666:	a0 93 97 01 	sts	0x0197, r26
    266a:	b0 93 98 01 	sts	0x0198, r27
	TIMSK1 |= _BV(OCIE1A);
    266e:	ef e6       	ldi	r30, 0x6F	; 111
    2670:	f0 e0       	ldi	r31, 0x00	; 0
    2672:	80 81       	ld	r24, Z
    2674:	82 60       	ori	r24, 0x02	; 2
    2676:	80 83       	st	Z, r24
    2678:	7b c0       	rjmp	.+246    	; 0x2770 <__stack+0x1e71>
		{
			long deltaDist = absPos - motorPos;
			ramp = up;
			DeltaMove(deltaDist);
		}
		else if (absPos < motorPos)
    267a:	00 91 99 01 	lds	r16, 0x0199
    267e:	10 91 9a 01 	lds	r17, 0x019A
    2682:	20 91 9b 01 	lds	r18, 0x019B
    2686:	30 91 9c 01 	lds	r19, 0x019C
    268a:	60 17       	cp	r22, r16
    268c:	71 07       	cpc	r23, r17
    268e:	82 07       	cpc	r24, r18
    2690:	93 07       	cpc	r25, r19
    2692:	0c f0       	brlt	.+2      	; 0x2696 <__stack+0x1d97>
    2694:	6d c0       	rjmp	.+218    	; 0x2770 <__stack+0x1e71>
		{
			long deltaDist = absPos - motorPos;
    2696:	00 91 99 01 	lds	r16, 0x0199
    269a:	10 91 9a 01 	lds	r17, 0x019A
    269e:	20 91 9b 01 	lds	r18, 0x019B
    26a2:	30 91 9c 01 	lds	r19, 0x019C
    26a6:	dc 01       	movw	r26, r24
    26a8:	cb 01       	movw	r24, r22
    26aa:	80 1b       	sub	r24, r16
    26ac:	91 0b       	sbc	r25, r17
    26ae:	a2 0b       	sbc	r26, r18
    26b0:	b3 0b       	sbc	r27, r19
			ramp = up;
    26b2:	10 92 94 01 	sts	0x0194, r1
	}
}

static inline void DeltaMove(long deltaDist)
{
	long halfDeltaMove = labs(deltaDist);
    26b6:	4c 01       	movw	r8, r24
    26b8:	5d 01       	movw	r10, r26
    26ba:	bb 23       	and	r27, r27
    26bc:	3c f4       	brge	.+14     	; 0x26cc <__stack+0x1dcd>
    26be:	88 24       	eor	r8, r8
    26c0:	99 24       	eor	r9, r9
    26c2:	54 01       	movw	r10, r8
    26c4:	88 1a       	sub	r8, r24
    26c6:	99 0a       	sbc	r9, r25
    26c8:	aa 0a       	sbc	r10, r26
    26ca:	bb 0a       	sbc	r11, r27
	halfDeltaMove = halfDeltaMove >> 1;
    26cc:	b5 94       	asr	r11
    26ce:	a7 94       	ror	r10
    26d0:	97 94       	ror	r9
    26d2:	87 94       	ror	r8
	if (halfDeltaMove < (fullSpeedRampSize * rampAdvance))
    26d4:	81 14       	cp	r8, r1
    26d6:	ea e0       	ldi	r30, 0x0A	; 10
    26d8:	9e 06       	cpc	r9, r30
    26da:	a1 04       	cpc	r10, r1
    26dc:	b1 04       	cpc	r11, r1
    26de:	4c f5       	brge	.+82     	; 0x2732 <__stack+0x1e33>
	{
		for(int idx = 1; idx < fullSpeedRampSize; idx++)
		{
			if (halfDeltaMove < (long)(rampAdvance * idx))
    26e0:	f0 e5       	ldi	r31, 0x50	; 80
    26e2:	8f 16       	cp	r8, r31
    26e4:	91 04       	cpc	r9, r1
    26e6:	a1 04       	cpc	r10, r1
    26e8:	b1 04       	cpc	r11, r1
    26ea:	7c f0       	brlt	.+30     	; 0x270a <__stack+0x1e0b>
    26ec:	0f 2e       	mov	r0, r31
    26ee:	f0 ea       	ldi	r31, 0xA0	; 160
    26f0:	cf 2e       	mov	r12, r31
    26f2:	d1 2c       	mov	r13, r1
    26f4:	e1 2c       	mov	r14, r1
    26f6:	f1 2c       	mov	r15, r1
    26f8:	f0 2d       	mov	r31, r0
    26fa:	22 e0       	ldi	r18, 0x02	; 2
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	8c 14       	cp	r8, r12
    2700:	9d 04       	cpc	r9, r13
    2702:	ae 04       	cpc	r10, r14
    2704:	bf 04       	cpc	r11, r15
    2706:	54 f4       	brge	.+20     	; 0x271c <__stack+0x1e1d>
    2708:	02 c0       	rjmp	.+4      	; 0x270e <__stack+0x1e0f>
    270a:	21 e0       	ldi	r18, 0x01	; 1
    270c:	30 e0       	ldi	r19, 0x00	; 0
			{
				speedRampSize = idx - 1;
    270e:	21 50       	subi	r18, 0x01	; 1
    2710:	31 09       	sbc	r19, r1
    2712:	30 93 8d 01 	sts	0x018D, r19
    2716:	20 93 8c 01 	sts	0x018C, r18
    271a:	11 c0       	rjmp	.+34     	; 0x273e <__stack+0x1e3f>
{
	long halfDeltaMove = labs(deltaDist);
	halfDeltaMove = halfDeltaMove >> 1;
	if (halfDeltaMove < (fullSpeedRampSize * rampAdvance))
	{
		for(int idx = 1; idx < fullSpeedRampSize; idx++)
    271c:	2f 5f       	subi	r18, 0xFF	; 255
    271e:	3f 4f       	sbci	r19, 0xFF	; 255
    2720:	40 e5       	ldi	r20, 0x50	; 80
    2722:	c4 0e       	add	r12, r20
    2724:	d1 1c       	adc	r13, r1
    2726:	e1 1c       	adc	r14, r1
    2728:	f1 1c       	adc	r15, r1
    272a:	20 32       	cpi	r18, 0x20	; 32
    272c:	31 05       	cpc	r19, r1
    272e:	39 f7       	brne	.-50     	; 0x26fe <__stack+0x1dff>
    2730:	06 c0       	rjmp	.+12     	; 0x273e <__stack+0x1e3f>
			}
		}
	}
	else
	{
		speedRampSize = fullSpeedRampSize;
    2732:	20 e2       	ldi	r18, 0x20	; 32
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	30 93 8d 01 	sts	0x018D, r19
    273a:	20 93 8c 01 	sts	0x018C, r18
	}
	targetMotorPos = motorPos + deltaDist;
    273e:	00 91 99 01 	lds	r16, 0x0199
    2742:	10 91 9a 01 	lds	r17, 0x019A
    2746:	20 91 9b 01 	lds	r18, 0x019B
    274a:	30 91 9c 01 	lds	r19, 0x019C
    274e:	80 0f       	add	r24, r16
    2750:	91 1f       	adc	r25, r17
    2752:	a2 1f       	adc	r26, r18
    2754:	b3 1f       	adc	r27, r19
    2756:	80 93 95 01 	sts	0x0195, r24
    275a:	90 93 96 01 	sts	0x0196, r25
    275e:	a0 93 97 01 	sts	0x0197, r26
    2762:	b0 93 98 01 	sts	0x0198, r27
	TIMSK1 |= _BV(OCIE1A);
    2766:	ef e6       	ldi	r30, 0x6F	; 111
    2768:	f0 e0       	ldi	r31, 0x00	; 0
    276a:	80 81       	ld	r24, Z
    276c:	82 60       	ori	r24, 0x02	; 2
    276e:	80 83       	st	Z, r24
		{
			long deltaDist = absPos - motorPos;
			ramp = up;
			DeltaMove(deltaDist);
		}
		printStatus("");
    2770:	8c e2       	ldi	r24, 0x2C	; 44
    2772:	91 e0       	ldi	r25, 0x01	; 1
    2774:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
		break;
    2778:	30 c0       	rjmp	.+96     	; 0x27da <__stack+0x1edb>
		
		default:
		printStatus("VSerror");
    277a:	83 e2       	ldi	r24, 0x23	; 35
    277c:	91 e0       	ldi	r25, 0x01	; 1
    277e:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
    2782:	2b c0       	rjmp	.+86     	; 0x27da <__stack+0x1edb>
	halfDeltaMove = halfDeltaMove >> 1;
	if (halfDeltaMove < (fullSpeedRampSize * rampAdvance))
	{
		for(int idx = 1; idx < fullSpeedRampSize; idx++)
		{
			if (halfDeltaMove < (long)(rampAdvance * idx))
    2784:	00 35       	cpi	r16, 0x50	; 80
    2786:	11 05       	cpc	r17, r1
    2788:	21 05       	cpc	r18, r1
    278a:	31 05       	cpc	r19, r1
    278c:	0c f4       	brge	.+2      	; 0x2790 <__stack+0x1e91>
    278e:	a1 ce       	rjmp	.-702    	; 0x24d2 <__stack+0x1bd3>
    2790:	40 ea       	ldi	r20, 0xA0	; 160
    2792:	50 e0       	ldi	r21, 0x00	; 0
    2794:	60 e0       	ldi	r22, 0x00	; 0
    2796:	70 e0       	ldi	r23, 0x00	; 0
    2798:	82 e0       	ldi	r24, 0x02	; 2
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	94 ce       	rjmp	.-728    	; 0x24c6 <__stack+0x1bc7>
		printStatus("");
		break;
		
		case 602: // Motor delta move
		ParamParse(rx_string, param);
		ramp = up;
    279e:	10 92 94 01 	sts	0x0194, r1
		DeltaMove(atol(param));
    27a2:	ce 01       	movw	r24, r28
    27a4:	01 96       	adiw	r24, 0x01	; 1
    27a6:	0e 94 aa 3a 	call	0x7554	; 0x7554 <atol>
    27aa:	6b 01       	movw	r12, r22
    27ac:	7c 01       	movw	r14, r24
	}
}

static inline void DeltaMove(long deltaDist)
{
	long halfDeltaMove = labs(deltaDist);
    27ae:	8b 01       	movw	r16, r22
    27b0:	9c 01       	movw	r18, r24
    27b2:	99 23       	and	r25, r25
    27b4:	3c f4       	brge	.+14     	; 0x27c4 <__stack+0x1ec5>
    27b6:	00 27       	eor	r16, r16
    27b8:	11 27       	eor	r17, r17
    27ba:	98 01       	movw	r18, r16
    27bc:	06 1b       	sub	r16, r22
    27be:	17 0b       	sbc	r17, r23
    27c0:	28 0b       	sbc	r18, r24
    27c2:	39 0b       	sbc	r19, r25
	halfDeltaMove = halfDeltaMove >> 1;
    27c4:	35 95       	asr	r19
    27c6:	27 95       	ror	r18
    27c8:	17 95       	ror	r17
    27ca:	07 95       	ror	r16
	if (halfDeltaMove < (fullSpeedRampSize * rampAdvance))
    27cc:	01 15       	cp	r16, r1
    27ce:	8a e0       	ldi	r24, 0x0A	; 10
    27d0:	18 07       	cpc	r17, r24
    27d2:	21 05       	cpc	r18, r1
    27d4:	31 05       	cpc	r19, r1
    27d6:	b4 f2       	brlt	.-84     	; 0x2784 <__stack+0x1e85>
    27d8:	8d ce       	rjmp	.-742    	; 0x24f4 <__stack+0x1bf5>
		break;
		
		default:
		printStatus("VSerror");
	}
}
    27da:	ec 96       	adiw	r28, 0x3c	; 60
    27dc:	0f b6       	in	r0, 0x3f	; 63
    27de:	f8 94       	cli
    27e0:	de bf       	out	0x3e, r29	; 62
    27e2:	0f be       	out	0x3f, r0	; 63
    27e4:	cd bf       	out	0x3d, r28	; 61
    27e6:	df 91       	pop	r29
    27e8:	cf 91       	pop	r28
    27ea:	1f 91       	pop	r17
    27ec:	0f 91       	pop	r16
    27ee:	ff 90       	pop	r15
    27f0:	ef 90       	pop	r14
    27f2:	df 90       	pop	r13
    27f4:	cf 90       	pop	r12
    27f6:	bf 90       	pop	r11
    27f8:	af 90       	pop	r10
    27fa:	9f 90       	pop	r9
    27fc:	8f 90       	pop	r8
    27fe:	08 95       	ret

00002800 <__vector_19>:
 *
 * This handler is called each time the UART data register is available for
 * sending data.
 */
ISR(UART0_DATA_EMPTY_IRQ)
{
    2800:	1f 92       	push	r1
    2802:	0f 92       	push	r0
    2804:	0f b6       	in	r0, 0x3f	; 63
    2806:	0f 92       	push	r0
    2808:	11 24       	eor	r1, r1
    280a:	2f 93       	push	r18
    280c:	3f 93       	push	r19
    280e:	4f 93       	push	r20
    2810:	5f 93       	push	r21
    2812:	8f 93       	push	r24
    2814:	9f 93       	push	r25
    2816:	af 93       	push	r26
    2818:	bf 93       	push	r27
    281a:	ef 93       	push	r30
    281c:	ff 93       	push	r31
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    281e:	e7 e5       	ldi	r30, 0x57	; 87
    2820:	f5 e0       	ldi	r31, 0x05	; 5
    2822:	91 81       	ldd	r25, Z+1	; 0x01
    2824:	80 81       	ld	r24, Z
	// if there is data in the ring buffer, fetch it and send it
	if (!ring_buffer_is_empty(&ring_buffer_out))
    2826:	98 17       	cp	r25, r24
    2828:	b9 f0       	breq	.+46     	; 0x2858 <__vector_19+0x58>
 * \returns next data byte in buffer
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
    282a:	81 81       	ldd	r24, Z+1	; 0x01
    282c:	a3 81       	ldd	r26, Z+3	; 0x03
    282e:	b4 81       	ldd	r27, Z+4	; 0x04
    2830:	a8 0f       	add	r26, r24
    2832:	b1 1d       	adc	r27, r1
    2834:	3c 91       	ld	r19, X
 *
 * \returns the next read offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_read(const struct ring_buffer *ring)
{
	return get_next(ring->read_offset, ring->size);
    2836:	21 81       	ldd	r18, Z+1	; 0x01
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    2838:	42 2f       	mov	r20, r18
    283a:	50 e0       	ldi	r21, 0x00	; 0
    283c:	82 81       	ldd	r24, Z+2	; 0x02
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	01 97       	sbiw	r24, 0x01	; 1
    2842:	48 17       	cp	r20, r24
    2844:	59 07       	cpc	r21, r25
    2846:	11 f0       	breq	.+4      	; 0x284c <__vector_19+0x4c>
    2848:	2f 5f       	subi	r18, 0xFF	; 255
    284a:	01 c0       	rjmp	.+2      	; 0x284e <__vector_19+0x4e>
    284c:	20 e0       	ldi	r18, 0x00	; 0
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
	ring->read_offset = ring_buffer_get_next_read(ring);
    284e:	20 93 58 05 	sts	0x0558, r18
	{
		UDR0 = ring_buffer_get(&ring_buffer_out);
    2852:	30 93 c6 00 	sts	0x00C6, r19
    2856:	05 c0       	rjmp	.+10     	; 0x2862 <__vector_19+0x62>
	}
	else 
	{
		// no more data to send, turn off data ready interrupt
		UCSR0B &= ~(1 << UDRIE0);
    2858:	e1 ec       	ldi	r30, 0xC1	; 193
    285a:	f0 e0       	ldi	r31, 0x00	; 0
    285c:	80 81       	ld	r24, Z
    285e:	8f 7d       	andi	r24, 0xDF	; 223
    2860:	80 83       	st	Z, r24
	}
}
    2862:	ff 91       	pop	r31
    2864:	ef 91       	pop	r30
    2866:	bf 91       	pop	r27
    2868:	af 91       	pop	r26
    286a:	9f 91       	pop	r25
    286c:	8f 91       	pop	r24
    286e:	5f 91       	pop	r21
    2870:	4f 91       	pop	r20
    2872:	3f 91       	pop	r19
    2874:	2f 91       	pop	r18
    2876:	0f 90       	pop	r0
    2878:	0f be       	out	0x3f, r0	; 63
    287a:	0f 90       	pop	r0
    287c:	1f 90       	pop	r1
    287e:	18 95       	reti

00002880 <__vector_18>:
 * \brief Data RX interrupt handler
 *
 * This is the handler for UART receive data
 */
ISR(UART0_RX_IRQ)
{
    2880:	1f 92       	push	r1
    2882:	0f 92       	push	r0
    2884:	0f b6       	in	r0, 0x3f	; 63
    2886:	0f 92       	push	r0
    2888:	11 24       	eor	r1, r1
    288a:	2f 93       	push	r18
    288c:	4f 93       	push	r20
    288e:	5f 93       	push	r21
    2890:	8f 93       	push	r24
    2892:	9f 93       	push	r25
    2894:	af 93       	push	r26
    2896:	bf 93       	push	r27
    2898:	ef 93       	push	r30
    289a:	ff 93       	push	r31
	ring_buffer_put(&ring_buffer_in, UDR0);
    289c:	80 91 c6 00 	lds	r24, 0x00C6
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    28a0:	e4 e3       	ldi	r30, 0x34	; 52
    28a2:	f5 e0       	ldi	r31, 0x05	; 5
    28a4:	90 81       	ld	r25, Z
    28a6:	a3 81       	ldd	r26, Z+3	; 0x03
    28a8:	b4 81       	ldd	r27, Z+4	; 0x04
    28aa:	a9 0f       	add	r26, r25
    28ac:	b1 1d       	adc	r27, r1
    28ae:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    28b0:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    28b2:	42 2f       	mov	r20, r18
    28b4:	50 e0       	ldi	r21, 0x00	; 0
    28b6:	82 81       	ldd	r24, Z+2	; 0x02
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	01 97       	sbiw	r24, 0x01	; 1
    28bc:	48 17       	cp	r20, r24
    28be:	59 07       	cpc	r21, r25
    28c0:	11 f0       	breq	.+4      	; 0x28c6 <__vector_18+0x46>
    28c2:	2f 5f       	subi	r18, 0xFF	; 255
    28c4:	01 c0       	rjmp	.+2      	; 0x28c8 <__vector_18+0x48>
    28c6:	20 e0       	ldi	r18, 0x00	; 0
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    28c8:	20 93 34 05 	sts	0x0534, r18
}
    28cc:	ff 91       	pop	r31
    28ce:	ef 91       	pop	r30
    28d0:	bf 91       	pop	r27
    28d2:	af 91       	pop	r26
    28d4:	9f 91       	pop	r25
    28d6:	8f 91       	pop	r24
    28d8:	5f 91       	pop	r21
    28da:	4f 91       	pop	r20
    28dc:	2f 91       	pop	r18
    28de:	0f 90       	pop	r0
    28e0:	0f be       	out	0x3f, r0	; 63
    28e2:	0f 90       	pop	r0
    28e4:	1f 90       	pop	r1
    28e6:	18 95       	reti

000028e8 <__vector_14>:
	
	sei();
}

ISR(TIMER0_COMPA_vect)	// Heater PWM output Irq
{
    28e8:	1f 92       	push	r1
    28ea:	0f 92       	push	r0
    28ec:	0f b6       	in	r0, 0x3f	; 63
    28ee:	0f 92       	push	r0
    28f0:	11 24       	eor	r1, r1
    28f2:	2f 93       	push	r18
    28f4:	3f 93       	push	r19
    28f6:	8f 93       	push	r24
    28f8:	9f 93       	push	r25
    28fa:	ef 93       	push	r30
    28fc:	ff 93       	push	r31
	ch0.pwmCnt++;
    28fe:	e4 e2       	ldi	r30, 0x24	; 36
    2900:	f3 e0       	ldi	r31, 0x03	; 3
    2902:	80 81       	ld	r24, Z
    2904:	91 81       	ldd	r25, Z+1	; 0x01
    2906:	01 96       	adiw	r24, 0x01	; 1
    2908:	91 83       	std	Z+1, r25	; 0x01
    290a:	80 83       	st	Z, r24
	if(ch0.pwmCnt < ch0.pwm )
    290c:	20 81       	ld	r18, Z
    290e:	31 81       	ldd	r19, Z+1	; 0x01
    2910:	80 91 26 03 	lds	r24, 0x0326
    2914:	90 91 27 03 	lds	r25, 0x0327
    2918:	28 17       	cp	r18, r24
    291a:	39 07       	cpc	r19, r25
    291c:	34 f4       	brge	.+12     	; 0x292a <__vector_14+0x42>
static inline void SetHeaterOutputON(uint8_t ch)
{
	switch (ch)
	{
		case 0:
			if(ch0.heaterEnable)
    291e:	80 91 28 03 	lds	r24, 0x0328
    2922:	88 23       	and	r24, r24
    2924:	19 f0       	breq	.+6      	; 0x292c <__vector_14+0x44>
			{
				PORTC |= 0b00000001;
    2926:	40 9a       	sbi	0x08, 0	; 8
    2928:	01 c0       	rjmp	.+2      	; 0x292c <__vector_14+0x44>
	{
		SetHeaterOutputON(0);
	}
	else
	{
		PORTC &= 0b11111110;
    292a:	40 98       	cbi	0x08, 0	; 8
	}
	if(ch0.pwmCnt >= 100)
    292c:	80 91 24 03 	lds	r24, 0x0324
    2930:	90 91 25 03 	lds	r25, 0x0325
    2934:	84 36       	cpi	r24, 0x64	; 100
    2936:	91 05       	cpc	r25, r1
    2938:	24 f0       	brlt	.+8      	; 0x2942 <__vector_14+0x5a>
	{
		ch0.pwmCnt = 0;
    293a:	10 92 25 03 	sts	0x0325, r1
    293e:	10 92 24 03 	sts	0x0324, r1
	}
	
	ch1.pwmCnt++;
    2942:	e1 ec       	ldi	r30, 0xC1	; 193
    2944:	f2 e0       	ldi	r31, 0x02	; 2
    2946:	80 81       	ld	r24, Z
    2948:	91 81       	ldd	r25, Z+1	; 0x01
    294a:	01 96       	adiw	r24, 0x01	; 1
    294c:	91 83       	std	Z+1, r25	; 0x01
    294e:	80 83       	st	Z, r24
	if(ch1.pwmCnt < ch1.pwm )
    2950:	20 81       	ld	r18, Z
    2952:	31 81       	ldd	r19, Z+1	; 0x01
    2954:	80 91 c3 02 	lds	r24, 0x02C3
    2958:	90 91 c4 02 	lds	r25, 0x02C4
    295c:	28 17       	cp	r18, r24
    295e:	39 07       	cpc	r19, r25
    2960:	34 f4       	brge	.+12     	; 0x296e <__vector_14+0x86>
				PORTC |= 0b00000001;
			}
			break;
	
		case 1:
			if(ch1.heaterEnable)
    2962:	80 91 c5 02 	lds	r24, 0x02C5
    2966:	88 23       	and	r24, r24
    2968:	19 f0       	breq	.+6      	; 0x2970 <__vector_14+0x88>
			{
				PORTC |= 0b00000010;	
    296a:	41 9a       	sbi	0x08, 1	; 8
    296c:	01 c0       	rjmp	.+2      	; 0x2970 <__vector_14+0x88>
	{
		SetHeaterOutputON(1);
	}
	else
	{
		PORTC &= 0b11111101;
    296e:	41 98       	cbi	0x08, 1	; 8
	}
	if(ch1.pwmCnt >= 100)
    2970:	80 91 c1 02 	lds	r24, 0x02C1
    2974:	90 91 c2 02 	lds	r25, 0x02C2
    2978:	84 36       	cpi	r24, 0x64	; 100
    297a:	91 05       	cpc	r25, r1
    297c:	24 f0       	brlt	.+8      	; 0x2986 <__vector_14+0x9e>
	{
		ch1.pwmCnt = 0;
    297e:	10 92 c2 02 	sts	0x02C2, r1
    2982:	10 92 c1 02 	sts	0x02C1, r1
	}
	
	ch2.pwmCnt++;
    2986:	ee e5       	ldi	r30, 0x5E	; 94
    2988:	f2 e0       	ldi	r31, 0x02	; 2
    298a:	80 81       	ld	r24, Z
    298c:	91 81       	ldd	r25, Z+1	; 0x01
    298e:	01 96       	adiw	r24, 0x01	; 1
    2990:	91 83       	std	Z+1, r25	; 0x01
    2992:	80 83       	st	Z, r24
	if(ch2.pwmCnt < ch2.pwm )
    2994:	20 81       	ld	r18, Z
    2996:	31 81       	ldd	r19, Z+1	; 0x01
    2998:	80 91 60 02 	lds	r24, 0x0260
    299c:	90 91 61 02 	lds	r25, 0x0261
    29a0:	28 17       	cp	r18, r24
    29a2:	39 07       	cpc	r19, r25
    29a4:	34 f4       	brge	.+12     	; 0x29b2 <__vector_14+0xca>
				PORTC |= 0b00000010;	
			}
			break;

		case 2:
			if(ch2.heaterEnable)
    29a6:	80 91 62 02 	lds	r24, 0x0262
    29aa:	88 23       	and	r24, r24
    29ac:	19 f0       	breq	.+6      	; 0x29b4 <__vector_14+0xcc>
			{
				PORTC |= 0b00000100;
    29ae:	42 9a       	sbi	0x08, 2	; 8
    29b0:	01 c0       	rjmp	.+2      	; 0x29b4 <__vector_14+0xcc>
	{
		SetHeaterOutputON(2);
	}
	else
	{
		PORTC &= 0b11111011;
    29b2:	42 98       	cbi	0x08, 2	; 8
	}
	if(ch2.pwmCnt >= 100)
    29b4:	80 91 5e 02 	lds	r24, 0x025E
    29b8:	90 91 5f 02 	lds	r25, 0x025F
    29bc:	84 36       	cpi	r24, 0x64	; 100
    29be:	91 05       	cpc	r25, r1
    29c0:	24 f0       	brlt	.+8      	; 0x29ca <__vector_14+0xe2>
	{
		ch2.pwmCnt = 0;
    29c2:	10 92 5f 02 	sts	0x025F, r1
    29c6:	10 92 5e 02 	sts	0x025E, r1
	}
	
	ch3.pwmCnt++;
    29ca:	eb ef       	ldi	r30, 0xFB	; 251
    29cc:	f1 e0       	ldi	r31, 0x01	; 1
    29ce:	80 81       	ld	r24, Z
    29d0:	91 81       	ldd	r25, Z+1	; 0x01
    29d2:	01 96       	adiw	r24, 0x01	; 1
    29d4:	91 83       	std	Z+1, r25	; 0x01
    29d6:	80 83       	st	Z, r24
	if(ch3.pwmCnt < ch3.pwm )
    29d8:	20 81       	ld	r18, Z
    29da:	31 81       	ldd	r19, Z+1	; 0x01
    29dc:	80 91 fd 01 	lds	r24, 0x01FD
    29e0:	90 91 fe 01 	lds	r25, 0x01FE
    29e4:	28 17       	cp	r18, r24
    29e6:	39 07       	cpc	r19, r25
    29e8:	34 f4       	brge	.+12     	; 0x29f6 <__vector_14+0x10e>
				PORTC |= 0b00000100;
			}
			break;

		case 3:
			if(ch3.heaterEnable)
    29ea:	80 91 ff 01 	lds	r24, 0x01FF
    29ee:	88 23       	and	r24, r24
    29f0:	19 f0       	breq	.+6      	; 0x29f8 <__vector_14+0x110>
			{
				PORTC |= 0b00001000;	
    29f2:	43 9a       	sbi	0x08, 3	; 8
    29f4:	01 c0       	rjmp	.+2      	; 0x29f8 <__vector_14+0x110>
	{
		SetHeaterOutputON(3);
	}
	else
	{
		PORTC &= 0b11110111;
    29f6:	43 98       	cbi	0x08, 3	; 8
	}
	if(ch3.pwmCnt >= 100)
    29f8:	80 91 fb 01 	lds	r24, 0x01FB
    29fc:	90 91 fc 01 	lds	r25, 0x01FC
    2a00:	84 36       	cpi	r24, 0x64	; 100
    2a02:	91 05       	cpc	r25, r1
    2a04:	24 f0       	brlt	.+8      	; 0x2a0e <__vector_14+0x126>
	{
		ch3.pwmCnt = 0;
    2a06:	10 92 fc 01 	sts	0x01FC, r1
    2a0a:	10 92 fb 01 	sts	0x01FB, r1
	}

}
    2a0e:	ff 91       	pop	r31
    2a10:	ef 91       	pop	r30
    2a12:	9f 91       	pop	r25
    2a14:	8f 91       	pop	r24
    2a16:	3f 91       	pop	r19
    2a18:	2f 91       	pop	r18
    2a1a:	0f 90       	pop	r0
    2a1c:	0f be       	out	0x3f, r0	; 63
    2a1e:	0f 90       	pop	r0
    2a20:	1f 90       	pop	r1
    2a22:	18 95       	reti

00002a24 <__vector_11>:

ISR(TIMER1_COMPA_vect)	// Step motor output Irq
{
    2a24:	1f 92       	push	r1
    2a26:	0f 92       	push	r0
    2a28:	0f b6       	in	r0, 0x3f	; 63
    2a2a:	0f 92       	push	r0
    2a2c:	11 24       	eor	r1, r1
    2a2e:	cf 92       	push	r12
    2a30:	df 92       	push	r13
    2a32:	ef 92       	push	r14
    2a34:	ff 92       	push	r15
    2a36:	2f 93       	push	r18
    2a38:	3f 93       	push	r19
    2a3a:	4f 93       	push	r20
    2a3c:	5f 93       	push	r21
    2a3e:	6f 93       	push	r22
    2a40:	7f 93       	push	r23
    2a42:	8f 93       	push	r24
    2a44:	9f 93       	push	r25
    2a46:	af 93       	push	r26
    2a48:	bf 93       	push	r27
    2a4a:	ef 93       	push	r30
    2a4c:	ff 93       	push	r31
	switch(ramp)
    2a4e:	e0 91 94 01 	lds	r30, 0x0194
    2a52:	8e 2f       	mov	r24, r30
    2a54:	ee 0f       	add	r30, r30
    2a56:	99 0b       	sbc	r25, r25
    2a58:	aa 0b       	sbc	r26, r26
    2a5a:	bb 0b       	sbc	r27, r27
    2a5c:	88 30       	cpi	r24, 0x08	; 8
    2a5e:	91 05       	cpc	r25, r1
    2a60:	08 f0       	brcs	.+2      	; 0x2a64 <__vector_11+0x40>
    2a62:	bc c1       	rjmp	.+888    	; 0x2ddc <__vector_11+0x3b8>
    2a64:	fc 01       	movw	r30, r24
    2a66:	ec 5c       	subi	r30, 0xCC	; 204
    2a68:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6a:	0c 94 84 3a 	jmp	0x7508	; 0x7508 <__tablejump2__>
	{
		case up:
			speedRampInc++;
    2a6e:	80 91 8e 01 	lds	r24, 0x018E
    2a72:	90 91 8f 01 	lds	r25, 0x018F
    2a76:	01 96       	adiw	r24, 0x01	; 1
    2a78:	90 93 8f 01 	sts	0x018F, r25
    2a7c:	80 93 8e 01 	sts	0x018E, r24
			if (speedRampInc > rampAdvance)
    2a80:	80 91 8e 01 	lds	r24, 0x018E
    2a84:	90 91 8f 01 	lds	r25, 0x018F
    2a88:	81 35       	cpi	r24, 0x51	; 81
    2a8a:	91 05       	cpc	r25, r1
    2a8c:	0c f4       	brge	.+2      	; 0x2a90 <__vector_11+0x6c>
    2a8e:	a6 c1       	rjmp	.+844    	; 0x2ddc <__vector_11+0x3b8>
			{
				speedRampInc = 0;
    2a90:	10 92 8f 01 	sts	0x018F, r1
    2a94:	10 92 8e 01 	sts	0x018E, r1
				if (speedRampPos < speedRampSize)
    2a98:	40 91 90 01 	lds	r20, 0x0190
    2a9c:	50 91 91 01 	lds	r21, 0x0191
    2aa0:	80 91 8c 01 	lds	r24, 0x018C
    2aa4:	90 91 8d 01 	lds	r25, 0x018D
    2aa8:	48 17       	cp	r20, r24
    2aaa:	59 07       	cpc	r21, r25
    2aac:	2c f5       	brge	.+74     	; 0x2af8 <__vector_11+0xd4>
				{
					ICR1 = speedRamp[speedRampPos] * motorSpeed;
    2aae:	e0 91 90 01 	lds	r30, 0x0190
    2ab2:	f0 91 91 01 	lds	r31, 0x0191
    2ab6:	60 91 00 01 	lds	r22, 0x0100
    2aba:	70 91 01 01 	lds	r23, 0x0101
    2abe:	ee 0f       	add	r30, r30
    2ac0:	ff 1f       	adc	r31, r31
    2ac2:	e6 5b       	subi	r30, 0xB6	; 182
    2ac4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ac6:	40 81       	ld	r20, Z
    2ac8:	51 81       	ldd	r21, Z+1	; 0x01
    2aca:	64 9f       	mul	r22, r20
    2acc:	c0 01       	movw	r24, r0
    2ace:	65 9f       	mul	r22, r21
    2ad0:	90 0d       	add	r25, r0
    2ad2:	74 9f       	mul	r23, r20
    2ad4:	90 0d       	add	r25, r0
    2ad6:	11 24       	eor	r1, r1
    2ad8:	e6 e8       	ldi	r30, 0x86	; 134
    2ada:	f0 e0       	ldi	r31, 0x00	; 0
    2adc:	91 83       	std	Z+1, r25	; 0x01
    2ade:	80 83       	st	Z, r24
					int dummy = ICR1;
    2ae0:	80 81       	ld	r24, Z
    2ae2:	91 81       	ldd	r25, Z+1	; 0x01
					speedRampPos ++;
    2ae4:	80 91 90 01 	lds	r24, 0x0190
    2ae8:	90 91 91 01 	lds	r25, 0x0191
    2aec:	01 96       	adiw	r24, 0x01	; 1
    2aee:	90 93 91 01 	sts	0x0191, r25
    2af2:	80 93 90 01 	sts	0x0190, r24
    2af6:	72 c1       	rjmp	.+740    	; 0x2ddc <__vector_11+0x3b8>
				}
				else
				{
					ramp = down;
    2af8:	81 e0       	ldi	r24, 0x01	; 1
    2afa:	80 93 94 01 	sts	0x0194, r24
					speedRampPos --;
    2afe:	80 91 90 01 	lds	r24, 0x0190
    2b02:	90 91 91 01 	lds	r25, 0x0191
    2b06:	01 97       	sbiw	r24, 0x01	; 1
    2b08:	90 93 91 01 	sts	0x0191, r25
    2b0c:	80 93 90 01 	sts	0x0190, r24
    2b10:	65 c1       	rjmp	.+714    	; 0x2ddc <__vector_11+0x3b8>
				}
			}
		break;
				
		case down:
			if (labs(targetMotorPos - motorPos) < (long)(rampAdvance * speedRampSize))
    2b12:	80 91 95 01 	lds	r24, 0x0195
    2b16:	90 91 96 01 	lds	r25, 0x0196
    2b1a:	a0 91 97 01 	lds	r26, 0x0197
    2b1e:	b0 91 98 01 	lds	r27, 0x0198
    2b22:	c0 90 99 01 	lds	r12, 0x0199
    2b26:	d0 90 9a 01 	lds	r13, 0x019A
    2b2a:	e0 90 9b 01 	lds	r14, 0x019B
    2b2e:	f0 90 9c 01 	lds	r15, 0x019C
    2b32:	40 91 8c 01 	lds	r20, 0x018C
    2b36:	50 91 8d 01 	lds	r21, 0x018D
    2b3a:	8c 19       	sub	r24, r12
    2b3c:	9d 09       	sbc	r25, r13
    2b3e:	ae 09       	sbc	r26, r14
    2b40:	bf 09       	sbc	r27, r15
    2b42:	6c 01       	movw	r12, r24
    2b44:	7d 01       	movw	r14, r26
    2b46:	3a f4       	brpl	.+14     	; 0x2b56 <__vector_11+0x132>
    2b48:	cc 24       	eor	r12, r12
    2b4a:	dd 24       	eor	r13, r13
    2b4c:	76 01       	movw	r14, r12
    2b4e:	c8 1a       	sub	r12, r24
    2b50:	d9 0a       	sbc	r13, r25
    2b52:	ea 0a       	sbc	r14, r26
    2b54:	fb 0a       	sbc	r15, r27
    2b56:	60 e5       	ldi	r22, 0x50	; 80
    2b58:	64 9f       	mul	r22, r20
    2b5a:	c0 01       	movw	r24, r0
    2b5c:	65 9f       	mul	r22, r21
    2b5e:	90 0d       	add	r25, r0
    2b60:	11 24       	eor	r1, r1
    2b62:	09 2e       	mov	r0, r25
    2b64:	00 0c       	add	r0, r0
    2b66:	aa 0b       	sbc	r26, r26
    2b68:	bb 0b       	sbc	r27, r27
    2b6a:	c8 16       	cp	r12, r24
    2b6c:	d9 06       	cpc	r13, r25
    2b6e:	ea 06       	cpc	r14, r26
    2b70:	fb 06       	cpc	r15, r27
    2b72:	0c f0       	brlt	.+2      	; 0x2b76 <__vector_11+0x152>
    2b74:	33 c1       	rjmp	.+614    	; 0x2ddc <__vector_11+0x3b8>
			{
				speedRampInc++;
    2b76:	80 91 8e 01 	lds	r24, 0x018E
    2b7a:	90 91 8f 01 	lds	r25, 0x018F
    2b7e:	01 96       	adiw	r24, 0x01	; 1
    2b80:	90 93 8f 01 	sts	0x018F, r25
    2b84:	80 93 8e 01 	sts	0x018E, r24
				if (speedRampInc > rampAdvance)
    2b88:	80 91 8e 01 	lds	r24, 0x018E
    2b8c:	90 91 8f 01 	lds	r25, 0x018F
    2b90:	81 35       	cpi	r24, 0x51	; 81
    2b92:	91 05       	cpc	r25, r1
    2b94:	0c f4       	brge	.+2      	; 0x2b98 <__vector_11+0x174>
    2b96:	22 c1       	rjmp	.+580    	; 0x2ddc <__vector_11+0x3b8>
				{
					speedRampInc = 0;
    2b98:	10 92 8f 01 	sts	0x018F, r1
    2b9c:	10 92 8e 01 	sts	0x018E, r1
					if (speedRampPos > -1)
    2ba0:	80 91 90 01 	lds	r24, 0x0190
    2ba4:	90 91 91 01 	lds	r25, 0x0191
    2ba8:	99 23       	and	r25, r25
    2baa:	0c f4       	brge	.+2      	; 0x2bae <__vector_11+0x18a>
    2bac:	17 c1       	rjmp	.+558    	; 0x2ddc <__vector_11+0x3b8>
					{
						ICR1 = speedRamp[speedRampPos] * motorSpeed;
    2bae:	e0 91 90 01 	lds	r30, 0x0190
    2bb2:	f0 91 91 01 	lds	r31, 0x0191
    2bb6:	60 91 00 01 	lds	r22, 0x0100
    2bba:	70 91 01 01 	lds	r23, 0x0101
    2bbe:	ee 0f       	add	r30, r30
    2bc0:	ff 1f       	adc	r31, r31
    2bc2:	e6 5b       	subi	r30, 0xB6	; 182
    2bc4:	fe 4f       	sbci	r31, 0xFE	; 254
    2bc6:	40 81       	ld	r20, Z
    2bc8:	51 81       	ldd	r21, Z+1	; 0x01
    2bca:	64 9f       	mul	r22, r20
    2bcc:	c0 01       	movw	r24, r0
    2bce:	65 9f       	mul	r22, r21
    2bd0:	90 0d       	add	r25, r0
    2bd2:	74 9f       	mul	r23, r20
    2bd4:	90 0d       	add	r25, r0
    2bd6:	11 24       	eor	r1, r1
    2bd8:	e6 e8       	ldi	r30, 0x86	; 134
    2bda:	f0 e0       	ldi	r31, 0x00	; 0
    2bdc:	91 83       	std	Z+1, r25	; 0x01
    2bde:	80 83       	st	Z, r24
						int dummy = ICR1;
    2be0:	80 81       	ld	r24, Z
    2be2:	91 81       	ldd	r25, Z+1	; 0x01
						speedRampPos --;
    2be4:	80 91 90 01 	lds	r24, 0x0190
    2be8:	90 91 91 01 	lds	r25, 0x0191
    2bec:	01 97       	sbiw	r24, 0x01	; 1
    2bee:	90 93 91 01 	sts	0x0191, r25
    2bf2:	80 93 90 01 	sts	0x0190, r24
    2bf6:	f2 c0       	rjmp	.+484    	; 0x2ddc <__vector_11+0x3b8>
				}
			}
		break;
		
		case homingCW:
			if((PINB & 0x01) == 0)
    2bf8:	18 99       	sbic	0x03, 0	; 3
    2bfa:	20 c0       	rjmp	.+64     	; 0x2c3c <__vector_11+0x218>
			{
				ICR1 = nearHomingSpeed;
    2bfc:	e6 e8       	ldi	r30, 0x86	; 134
    2bfe:	f0 e0       	ldi	r31, 0x00	; 0
    2c00:	88 ee       	ldi	r24, 0xE8	; 232
    2c02:	93 e0       	ldi	r25, 0x03	; 3
    2c04:	91 83       	std	Z+1, r25	; 0x01
    2c06:	80 83       	st	Z, r24
				int dummy = ICR1;
    2c08:	80 81       	ld	r24, Z
    2c0a:	91 81       	ldd	r25, Z+1	; 0x01
				targetMotorPos = motorPos - retardDistFromHoming;
    2c0c:	80 91 99 01 	lds	r24, 0x0199
    2c10:	90 91 9a 01 	lds	r25, 0x019A
    2c14:	a0 91 9b 01 	lds	r26, 0x019B
    2c18:	b0 91 9c 01 	lds	r27, 0x019C
    2c1c:	80 58       	subi	r24, 0x80	; 128
    2c1e:	9c 40       	sbci	r25, 0x0C	; 12
    2c20:	a1 09       	sbc	r26, r1
    2c22:	b1 09       	sbc	r27, r1
    2c24:	80 93 95 01 	sts	0x0195, r24
    2c28:	90 93 96 01 	sts	0x0196, r25
    2c2c:	a0 93 97 01 	sts	0x0197, r26
    2c30:	b0 93 98 01 	sts	0x0198, r27
				ramp = backFromHomingCW;
    2c34:	83 e0       	ldi	r24, 0x03	; 3
    2c36:	80 93 94 01 	sts	0x0194, r24
    2c3a:	d0 c0       	rjmp	.+416    	; 0x2ddc <__vector_11+0x3b8>
			}
			else
			{
				targetMotorPos += 2;
    2c3c:	80 91 95 01 	lds	r24, 0x0195
    2c40:	90 91 96 01 	lds	r25, 0x0196
    2c44:	a0 91 97 01 	lds	r26, 0x0197
    2c48:	b0 91 98 01 	lds	r27, 0x0198
    2c4c:	02 96       	adiw	r24, 0x02	; 2
    2c4e:	a1 1d       	adc	r26, r1
    2c50:	b1 1d       	adc	r27, r1
    2c52:	80 93 95 01 	sts	0x0195, r24
    2c56:	90 93 96 01 	sts	0x0196, r25
    2c5a:	a0 93 97 01 	sts	0x0197, r26
    2c5e:	b0 93 98 01 	sts	0x0198, r27
    2c62:	bc c0       	rjmp	.+376    	; 0x2ddc <__vector_11+0x3b8>
			}
		break;
		
		case backFromHomingCW:
			if (motorPos - targetMotorPos == 2)
    2c64:	80 91 99 01 	lds	r24, 0x0199
    2c68:	90 91 9a 01 	lds	r25, 0x019A
    2c6c:	a0 91 9b 01 	lds	r26, 0x019B
    2c70:	b0 91 9c 01 	lds	r27, 0x019C
    2c74:	40 91 95 01 	lds	r20, 0x0195
    2c78:	50 91 96 01 	lds	r21, 0x0196
    2c7c:	60 91 97 01 	lds	r22, 0x0197
    2c80:	70 91 98 01 	lds	r23, 0x0198
    2c84:	84 1b       	sub	r24, r20
    2c86:	95 0b       	sbc	r25, r21
    2c88:	a6 0b       	sbc	r26, r22
    2c8a:	b7 0b       	sbc	r27, r23
    2c8c:	02 97       	sbiw	r24, 0x02	; 2
    2c8e:	a1 05       	cpc	r26, r1
    2c90:	b1 05       	cpc	r27, r1
    2c92:	09 f0       	breq	.+2      	; 0x2c96 <__vector_11+0x272>
    2c94:	a3 c0       	rjmp	.+326    	; 0x2ddc <__vector_11+0x3b8>
			{
				ramp = finalHomingCW;
    2c96:	84 e0       	ldi	r24, 0x04	; 4
    2c98:	80 93 94 01 	sts	0x0194, r24
				targetMotorPos = motorPos + retardDistFromHoming + 100;
    2c9c:	80 91 99 01 	lds	r24, 0x0199
    2ca0:	90 91 9a 01 	lds	r25, 0x019A
    2ca4:	a0 91 9b 01 	lds	r26, 0x019B
    2ca8:	b0 91 9c 01 	lds	r27, 0x019C
    2cac:	8c 51       	subi	r24, 0x1C	; 28
    2cae:	93 4f       	sbci	r25, 0xF3	; 243
    2cb0:	af 4f       	sbci	r26, 0xFF	; 255
    2cb2:	bf 4f       	sbci	r27, 0xFF	; 255
    2cb4:	80 93 95 01 	sts	0x0195, r24
    2cb8:	90 93 96 01 	sts	0x0196, r25
    2cbc:	a0 93 97 01 	sts	0x0197, r26
    2cc0:	b0 93 98 01 	sts	0x0198, r27
    2cc4:	8b c0       	rjmp	.+278    	; 0x2ddc <__vector_11+0x3b8>
			}		
		break;
		
		case finalHomingCW:
			if((PINB & 0x01) == 0)
    2cc6:	18 99       	sbic	0x03, 0	; 3
    2cc8:	89 c0       	rjmp	.+274    	; 0x2ddc <__vector_11+0x3b8>
			{
				motorPos = 0;
    2cca:	10 92 99 01 	sts	0x0199, r1
    2cce:	10 92 9a 01 	sts	0x019A, r1
    2cd2:	10 92 9b 01 	sts	0x019B, r1
    2cd6:	10 92 9c 01 	sts	0x019C, r1
				targetMotorPos = 0;
    2cda:	10 92 95 01 	sts	0x0195, r1
    2cde:	10 92 96 01 	sts	0x0196, r1
    2ce2:	10 92 97 01 	sts	0x0197, r1
    2ce6:	10 92 98 01 	sts	0x0198, r1
    2cea:	78 c0       	rjmp	.+240    	; 0x2ddc <__vector_11+0x3b8>
			}
		break;
		
		case homingCCW:
		if((PINB & 0x01) == 0)
    2cec:	18 99       	sbic	0x03, 0	; 3
    2cee:	20 c0       	rjmp	.+64     	; 0x2d30 <__vector_11+0x30c>
		{
			ICR1 = nearHomingSpeed;
    2cf0:	e6 e8       	ldi	r30, 0x86	; 134
    2cf2:	f0 e0       	ldi	r31, 0x00	; 0
    2cf4:	88 ee       	ldi	r24, 0xE8	; 232
    2cf6:	93 e0       	ldi	r25, 0x03	; 3
    2cf8:	91 83       	std	Z+1, r25	; 0x01
    2cfa:	80 83       	st	Z, r24
			int dummy = ICR1;
    2cfc:	80 81       	ld	r24, Z
    2cfe:	91 81       	ldd	r25, Z+1	; 0x01
			targetMotorPos = motorPos + retardDistFromHoming;
    2d00:	80 91 99 01 	lds	r24, 0x0199
    2d04:	90 91 9a 01 	lds	r25, 0x019A
    2d08:	a0 91 9b 01 	lds	r26, 0x019B
    2d0c:	b0 91 9c 01 	lds	r27, 0x019C
    2d10:	80 58       	subi	r24, 0x80	; 128
    2d12:	93 4f       	sbci	r25, 0xF3	; 243
    2d14:	af 4f       	sbci	r26, 0xFF	; 255
    2d16:	bf 4f       	sbci	r27, 0xFF	; 255
    2d18:	80 93 95 01 	sts	0x0195, r24
    2d1c:	90 93 96 01 	sts	0x0196, r25
    2d20:	a0 93 97 01 	sts	0x0197, r26
    2d24:	b0 93 98 01 	sts	0x0198, r27
			ramp = backFromHomingCCW;
    2d28:	86 e0       	ldi	r24, 0x06	; 6
    2d2a:	80 93 94 01 	sts	0x0194, r24
    2d2e:	56 c0       	rjmp	.+172    	; 0x2ddc <__vector_11+0x3b8>
		}
		else
		{
			targetMotorPos -= 2;
    2d30:	80 91 95 01 	lds	r24, 0x0195
    2d34:	90 91 96 01 	lds	r25, 0x0196
    2d38:	a0 91 97 01 	lds	r26, 0x0197
    2d3c:	b0 91 98 01 	lds	r27, 0x0198
    2d40:	02 97       	sbiw	r24, 0x02	; 2
    2d42:	a1 09       	sbc	r26, r1
    2d44:	b1 09       	sbc	r27, r1
    2d46:	80 93 95 01 	sts	0x0195, r24
    2d4a:	90 93 96 01 	sts	0x0196, r25
    2d4e:	a0 93 97 01 	sts	0x0197, r26
    2d52:	b0 93 98 01 	sts	0x0198, r27
    2d56:	42 c0       	rjmp	.+132    	; 0x2ddc <__vector_11+0x3b8>
		}
		break;
		
		case backFromHomingCCW:
		if (targetMotorPos - motorPos == 2)
    2d58:	80 91 95 01 	lds	r24, 0x0195
    2d5c:	90 91 96 01 	lds	r25, 0x0196
    2d60:	a0 91 97 01 	lds	r26, 0x0197
    2d64:	b0 91 98 01 	lds	r27, 0x0198
    2d68:	40 91 99 01 	lds	r20, 0x0199
    2d6c:	50 91 9a 01 	lds	r21, 0x019A
    2d70:	60 91 9b 01 	lds	r22, 0x019B
    2d74:	70 91 9c 01 	lds	r23, 0x019C
    2d78:	84 1b       	sub	r24, r20
    2d7a:	95 0b       	sbc	r25, r21
    2d7c:	a6 0b       	sbc	r26, r22
    2d7e:	b7 0b       	sbc	r27, r23
    2d80:	02 97       	sbiw	r24, 0x02	; 2
    2d82:	a1 05       	cpc	r26, r1
    2d84:	b1 05       	cpc	r27, r1
    2d86:	51 f5       	brne	.+84     	; 0x2ddc <__vector_11+0x3b8>
		{	
			ramp = finalHomingCCW;
    2d88:	87 e0       	ldi	r24, 0x07	; 7
    2d8a:	80 93 94 01 	sts	0x0194, r24
			targetMotorPos = motorPos - retardDistFromHoming - 100;
    2d8e:	80 91 99 01 	lds	r24, 0x0199
    2d92:	90 91 9a 01 	lds	r25, 0x019A
    2d96:	a0 91 9b 01 	lds	r26, 0x019B
    2d9a:	b0 91 9c 01 	lds	r27, 0x019C
    2d9e:	84 5e       	subi	r24, 0xE4	; 228
    2da0:	9c 40       	sbci	r25, 0x0C	; 12
    2da2:	a1 09       	sbc	r26, r1
    2da4:	b1 09       	sbc	r27, r1
    2da6:	80 93 95 01 	sts	0x0195, r24
    2daa:	90 93 96 01 	sts	0x0196, r25
    2dae:	a0 93 97 01 	sts	0x0197, r26
    2db2:	b0 93 98 01 	sts	0x0198, r27
    2db6:	12 c0       	rjmp	.+36     	; 0x2ddc <__vector_11+0x3b8>
		}
		break;
		
		case finalHomingCCW:
		if((PINB & 0x01) == 0)
    2db8:	18 99       	sbic	0x03, 0	; 3
    2dba:	10 c0       	rjmp	.+32     	; 0x2ddc <__vector_11+0x3b8>
		{
			motorPos = 0;
    2dbc:	10 92 99 01 	sts	0x0199, r1
    2dc0:	10 92 9a 01 	sts	0x019A, r1
    2dc4:	10 92 9b 01 	sts	0x019B, r1
    2dc8:	10 92 9c 01 	sts	0x019C, r1
			targetMotorPos = 0;
    2dcc:	10 92 95 01 	sts	0x0195, r1
    2dd0:	10 92 96 01 	sts	0x0196, r1
    2dd4:	10 92 97 01 	sts	0x0197, r1
    2dd8:	10 92 98 01 	sts	0x0198, r1
		}
		break;		
	}
	
	if (motorPos < targetMotorPos)
    2ddc:	40 91 99 01 	lds	r20, 0x0199
    2de0:	50 91 9a 01 	lds	r21, 0x019A
    2de4:	60 91 9b 01 	lds	r22, 0x019B
    2de8:	70 91 9c 01 	lds	r23, 0x019C
    2dec:	80 91 95 01 	lds	r24, 0x0195
    2df0:	90 91 96 01 	lds	r25, 0x0196
    2df4:	a0 91 97 01 	lds	r26, 0x0197
    2df8:	b0 91 98 01 	lds	r27, 0x0198
    2dfc:	48 17       	cp	r20, r24
    2dfe:	59 07       	cpc	r21, r25
    2e00:	6a 07       	cpc	r22, r26
    2e02:	7b 07       	cpc	r23, r27
    2e04:	c4 f4       	brge	.+48     	; 0x2e36 <__vector_11+0x412>
	{
		PORTB |= 0b00000100;
    2e06:	2a 9a       	sbi	0x05, 2	; 5
		PORTB ^= 0b00000010;
    2e08:	95 b1       	in	r25, 0x05	; 5
    2e0a:	82 e0       	ldi	r24, 0x02	; 2
    2e0c:	89 27       	eor	r24, r25
    2e0e:	85 b9       	out	0x05, r24	; 5
		motorPos ++;
    2e10:	80 91 99 01 	lds	r24, 0x0199
    2e14:	90 91 9a 01 	lds	r25, 0x019A
    2e18:	a0 91 9b 01 	lds	r26, 0x019B
    2e1c:	b0 91 9c 01 	lds	r27, 0x019C
    2e20:	01 96       	adiw	r24, 0x01	; 1
    2e22:	a1 1d       	adc	r26, r1
    2e24:	b1 1d       	adc	r27, r1
    2e26:	80 93 99 01 	sts	0x0199, r24
    2e2a:	90 93 9a 01 	sts	0x019A, r25
    2e2e:	a0 93 9b 01 	sts	0x019B, r26
    2e32:	b0 93 9c 01 	sts	0x019C, r27
	}
	if (motorPos > targetMotorPos)
    2e36:	40 91 99 01 	lds	r20, 0x0199
    2e3a:	50 91 9a 01 	lds	r21, 0x019A
    2e3e:	60 91 9b 01 	lds	r22, 0x019B
    2e42:	70 91 9c 01 	lds	r23, 0x019C
    2e46:	80 91 95 01 	lds	r24, 0x0195
    2e4a:	90 91 96 01 	lds	r25, 0x0196
    2e4e:	a0 91 97 01 	lds	r26, 0x0197
    2e52:	b0 91 98 01 	lds	r27, 0x0198
    2e56:	84 17       	cp	r24, r20
    2e58:	95 07       	cpc	r25, r21
    2e5a:	a6 07       	cpc	r26, r22
    2e5c:	b7 07       	cpc	r27, r23
    2e5e:	c4 f4       	brge	.+48     	; 0x2e90 <__vector_11+0x46c>
	{
		PORTB &= 0b11111011;
    2e60:	2a 98       	cbi	0x05, 2	; 5
		PORTB ^= 0b00000010;
    2e62:	95 b1       	in	r25, 0x05	; 5
    2e64:	82 e0       	ldi	r24, 0x02	; 2
    2e66:	89 27       	eor	r24, r25
    2e68:	85 b9       	out	0x05, r24	; 5
		motorPos --;
    2e6a:	80 91 99 01 	lds	r24, 0x0199
    2e6e:	90 91 9a 01 	lds	r25, 0x019A
    2e72:	a0 91 9b 01 	lds	r26, 0x019B
    2e76:	b0 91 9c 01 	lds	r27, 0x019C
    2e7a:	01 97       	sbiw	r24, 0x01	; 1
    2e7c:	a1 09       	sbc	r26, r1
    2e7e:	b1 09       	sbc	r27, r1
    2e80:	80 93 99 01 	sts	0x0199, r24
    2e84:	90 93 9a 01 	sts	0x019A, r25
    2e88:	a0 93 9b 01 	sts	0x019B, r26
    2e8c:	b0 93 9c 01 	sts	0x019C, r27
	}

	if (motorPos == targetMotorPos)
    2e90:	40 91 99 01 	lds	r20, 0x0199
    2e94:	50 91 9a 01 	lds	r21, 0x019A
    2e98:	60 91 9b 01 	lds	r22, 0x019B
    2e9c:	70 91 9c 01 	lds	r23, 0x019C
    2ea0:	80 91 95 01 	lds	r24, 0x0195
    2ea4:	90 91 96 01 	lds	r25, 0x0196
    2ea8:	a0 91 97 01 	lds	r26, 0x0197
    2eac:	b0 91 98 01 	lds	r27, 0x0198
    2eb0:	48 17       	cp	r20, r24
    2eb2:	59 07       	cpc	r21, r25
    2eb4:	6a 07       	cpc	r22, r26
    2eb6:	7b 07       	cpc	r23, r27
    2eb8:	51 f4       	brne	.+20     	; 0x2ece <__vector_11+0x4aa>
	{
		PORTB &= 0b11111101;
    2eba:	29 98       	cbi	0x05, 1	; 5
		TIMSK1 -= _BV(OCIE1A);		// Disable IRQ when motor has reached target pos.
    2ebc:	ef e6       	ldi	r30, 0x6F	; 111
    2ebe:	f0 e0       	ldi	r31, 0x00	; 0
    2ec0:	80 81       	ld	r24, Z
    2ec2:	82 50       	subi	r24, 0x02	; 2
    2ec4:	80 83       	st	Z, r24
		speedRampPos = 0;
    2ec6:	10 92 91 01 	sts	0x0191, r1
    2eca:	10 92 90 01 	sts	0x0190, r1
	}
	
	homeSwitch = (int)(PINB & 0x01);
    2ece:	83 b1       	in	r24, 0x03	; 3
    2ed0:	28 2f       	mov	r18, r24
    2ed2:	21 70       	andi	r18, 0x01	; 1
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	30 93 93 01 	sts	0x0193, r19
    2eda:	20 93 92 01 	sts	0x0192, r18
}
    2ede:	ff 91       	pop	r31
    2ee0:	ef 91       	pop	r30
    2ee2:	bf 91       	pop	r27
    2ee4:	af 91       	pop	r26
    2ee6:	9f 91       	pop	r25
    2ee8:	8f 91       	pop	r24
    2eea:	7f 91       	pop	r23
    2eec:	6f 91       	pop	r22
    2eee:	5f 91       	pop	r21
    2ef0:	4f 91       	pop	r20
    2ef2:	3f 91       	pop	r19
    2ef4:	2f 91       	pop	r18
    2ef6:	ff 90       	pop	r15
    2ef8:	ef 90       	pop	r14
    2efa:	df 90       	pop	r13
    2efc:	cf 90       	pop	r12
    2efe:	0f 90       	pop	r0
    2f00:	0f be       	out	0x3f, r0	; 63
    2f02:	0f 90       	pop	r0
    2f04:	1f 90       	pop	r1
    2f06:	18 95       	reti

00002f08 <__vector_7>:

ISR(TIMER2_COMPA_vect)	// PID Controller Irq
{
    2f08:	1f 92       	push	r1
    2f0a:	0f 92       	push	r0
    2f0c:	0f b6       	in	r0, 0x3f	; 63
    2f0e:	0f 92       	push	r0
    2f10:	11 24       	eor	r1, r1
    2f12:	cf 92       	push	r12
    2f14:	df 92       	push	r13
    2f16:	ef 92       	push	r14
    2f18:	ff 92       	push	r15
    2f1a:	0f 93       	push	r16
    2f1c:	1f 93       	push	r17
    2f1e:	2f 93       	push	r18
    2f20:	3f 93       	push	r19
    2f22:	4f 93       	push	r20
    2f24:	5f 93       	push	r21
    2f26:	6f 93       	push	r22
    2f28:	7f 93       	push	r23
    2f2a:	8f 93       	push	r24
    2f2c:	9f 93       	push	r25
    2f2e:	af 93       	push	r26
    2f30:	bf 93       	push	r27
    2f32:	cf 93       	push	r28
    2f34:	df 93       	push	r29
    2f36:	ef 93       	push	r30
    2f38:	ff 93       	push	r31
	sei();	// Enable nested interrupt
    2f3a:	78 94       	sei
	PORTD |= statusLed;
    2f3c:	5b 9a       	sbi	0x0b, 3	; 11
static inline unsigned char SPIread( unsigned char byteword, unsigned char ch)
{
	switch (ch)
	{
		case 1:
		PORTD &= 0b11101111;	// Set CS1 low
    2f3e:	5c 98       	cbi	0x0b, 4	; 11
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
    2f40:	81 e0       	ldi	r24, 0x01	; 1
    2f42:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    2f44:	0d b4       	in	r0, 0x2d	; 45
    2f46:	07 fe       	sbrs	r0, 7
    2f48:	fd cf       	rjmp	.-6      	; 0x2f44 <__vector_7+0x3c>
	byteword=SPDR;				//just for clearing SPIF
    2f4a:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
    2f4c:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    2f4e:	0d b4       	in	r0, 0x2d	; 45
    2f50:	07 fe       	sbrs	r0, 7
    2f52:	fd cf       	rjmp	.-6      	; 0x2f4e <__vector_7+0x46>
	byteword=SPDR;
    2f54:	9e b5       	in	r25, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
    2f56:	8b b1       	in	r24, 0x0b	; 11
    2f58:	80 6f       	ori	r24, 0xF0	; 240
    2f5a:	8b b9       	out	0x0b, r24	; 11
static inline unsigned char SPIread( unsigned char byteword, unsigned char ch)
{
	switch (ch)
	{
		case 1:
		PORTD &= 0b11101111;	// Set CS1 low
    2f5c:	5c 98       	cbi	0x0b, 4	; 11
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
    2f5e:	82 e0       	ldi	r24, 0x02	; 2
    2f60:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    2f62:	0d b4       	in	r0, 0x2d	; 45
    2f64:	07 fe       	sbrs	r0, 7
    2f66:	fd cf       	rjmp	.-6      	; 0x2f62 <__vector_7+0x5a>
	byteword=SPDR;				//just for clearing SPIF
    2f68:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
    2f6a:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    2f6c:	0d b4       	in	r0, 0x2d	; 45
    2f6e:	07 fe       	sbrs	r0, 7
    2f70:	fd cf       	rjmp	.-6      	; 0x2f6c <__vector_7+0x64>
	byteword=SPDR;
    2f72:	6e b5       	in	r22, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
    2f74:	8b b1       	in	r24, 0x0b	; 11
    2f76:	80 6f       	ori	r24, 0xF0	; 240
    2f78:	8b b9       	out	0x0b, r24	; 11
	uint8_t u8_msb = 0;
	uint8_t u8_lsb = 0;
	
	u8_msb = SPIread(0x01, ch);
	u8_lsb = SPIread(0x02, ch);
	adc_code = (((u8_msb << 8) | u8_lsb) >> 1);
    2f7a:	70 e0       	ldi	r23, 0x00	; 0
    2f7c:	79 2b       	or	r23, r25
    2f7e:	75 95       	asr	r23
    2f80:	67 95       	ror	r22
	return ((float)adc_code / 32.0 - 256.0);
    2f82:	07 2e       	mov	r0, r23
    2f84:	00 0c       	add	r0, r0
    2f86:	88 0b       	sbc	r24, r24
    2f88:	99 0b       	sbc	r25, r25
    2f8a:	0e 94 24 39 	call	0x7248	; 0x7248 <__floatsisf>
    2f8e:	20 e0       	ldi	r18, 0x00	; 0
    2f90:	30 e0       	ldi	r19, 0x00	; 0
    2f92:	40 e0       	ldi	r20, 0x00	; 0
    2f94:	5d e3       	ldi	r21, 0x3D	; 61
    2f96:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <__mulsf3>
    2f9a:	20 e0       	ldi	r18, 0x00	; 0
    2f9c:	30 e0       	ldi	r19, 0x00	; 0
    2f9e:	40 e8       	ldi	r20, 0x80	; 128
    2fa0:	53 e4       	ldi	r21, 0x43	; 67
    2fa2:	0e 94 88 38 	call	0x7110	; 0x7110 <__subsf3>
	PORTD &= 0b11110111;						// Turn off LED on PCB (Irq call freq: 16MHz / 1024 / 255 = 61.3 Hz )
}

static inline void PIDctrl(channel *ch, int tempSensor)
{
	ch->TempSensor = ReadTempSensor(tempSensor);
    2fa6:	e6 ec       	ldi	r30, 0xC6	; 198
    2fa8:	f2 e0       	ldi	r31, 0x02	; 2
    2faa:	64 83       	std	Z+4, r22	; 0x04
    2fac:	75 83       	std	Z+5, r23	; 0x05
    2fae:	86 83       	std	Z+6, r24	; 0x06
    2fb0:	97 83       	std	Z+7, r25	; 0x07
	if(ch->TempSensor > (float)maxAllowedTemp)								// Max temperature limit
    2fb2:	64 81       	ldd	r22, Z+4	; 0x04
    2fb4:	75 81       	ldd	r23, Z+5	; 0x05
    2fb6:	86 81       	ldd	r24, Z+6	; 0x06
    2fb8:	97 81       	ldd	r25, Z+7	; 0x07
    2fba:	20 e0       	ldi	r18, 0x00	; 0
    2fbc:	30 e0       	ldi	r19, 0x00	; 0
    2fbe:	40 ef       	ldi	r20, 0xF0	; 240
    2fc0:	52 e4       	ldi	r21, 0x42	; 66
    2fc2:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <__gesf2>
    2fc6:	18 16       	cp	r1, r24
    2fc8:	2c f4       	brge	.+10     	; 0x2fd4 <__vector_7+0xcc>
	{
		ch->heaterEnable = false;
    2fca:	10 92 28 03 	sts	0x0328, r1
		PORTC &= allHeaterOff;
    2fce:	88 b1       	in	r24, 0x08	; 8
    2fd0:	80 7f       	andi	r24, 0xF0	; 240
    2fd2:	88 b9       	out	0x08, r24	; 8
	}

	ch->TempError[CtrlErrorIdx] = ch->TempSetPoint - ch->TempSensor;		// Control error
    2fd4:	00 91 29 03 	lds	r16, 0x0329
    2fd8:	10 91 2a 03 	lds	r17, 0x032A
    2fdc:	c6 ec       	ldi	r28, 0xC6	; 198
    2fde:	d2 e0       	ldi	r29, 0x02	; 2
    2fe0:	68 81       	ld	r22, Y
    2fe2:	79 81       	ldd	r23, Y+1	; 0x01
    2fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe6:	9b 81       	ldd	r25, Y+3	; 0x03
    2fe8:	2c 81       	ldd	r18, Y+4	; 0x04
    2fea:	3d 81       	ldd	r19, Y+5	; 0x05
    2fec:	4e 81       	ldd	r20, Y+6	; 0x06
    2fee:	5f 81       	ldd	r21, Y+7	; 0x07
    2ff0:	0e 94 88 38 	call	0x7110	; 0x7110 <__subsf3>
    2ff4:	00 0f       	add	r16, r16
    2ff6:	11 1f       	adc	r17, r17
    2ff8:	00 0f       	add	r16, r16
    2ffa:	11 1f       	adc	r17, r17
    2ffc:	f8 01       	movw	r30, r16
    2ffe:	e2 51       	subi	r30, 0x12	; 18
    3000:	fd 4f       	sbci	r31, 0xFD	; 253
    3002:	60 83       	st	Z, r22
    3004:	71 83       	std	Z+1, r23	; 0x01
    3006:	82 83       	std	Z+2, r24	; 0x02
    3008:	93 83       	std	Z+3, r25	; 0x03
	
	ch->P_err = ch->TempError[CtrlErrorIdx] * ch->Pgain;					// P error
    300a:	e0 91 29 03 	lds	r30, 0x0329
    300e:	f0 91 2a 03 	lds	r31, 0x032A
    3012:	ee 0f       	add	r30, r30
    3014:	ff 1f       	adc	r31, r31
    3016:	ee 0f       	add	r30, r30
    3018:	ff 1f       	adc	r31, r31
    301a:	e2 51       	subi	r30, 0x12	; 18
    301c:	fd 4f       	sbci	r31, 0xFD	; 253
    301e:	60 81       	ld	r22, Z
    3020:	71 81       	ldd	r23, Z+1	; 0x01
    3022:	82 81       	ldd	r24, Z+2	; 0x02
    3024:	93 81       	ldd	r25, Z+3	; 0x03
    3026:	2c 8d       	ldd	r18, Y+28	; 0x1c
    3028:	3d 8d       	ldd	r19, Y+29	; 0x1d
    302a:	4e 8d       	ldd	r20, Y+30	; 0x1e
    302c:	5f 8d       	ldd	r21, Y+31	; 0x1f
    302e:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <__mulsf3>
    3032:	68 87       	std	Y+8, r22	; 0x08
    3034:	79 87       	std	Y+9, r23	; 0x09
    3036:	8a 87       	std	Y+10, r24	; 0x0a
    3038:	9b 87       	std	Y+11, r25	; 0x0b
	ch->I_err = ch->I_err + (ch->TempError[CtrlErrorIdx] * ch->Igain);		// I error
    303a:	cc 84       	ldd	r12, Y+12	; 0x0c
    303c:	dd 84       	ldd	r13, Y+13	; 0x0d
    303e:	ee 84       	ldd	r14, Y+14	; 0x0e
    3040:	ff 84       	ldd	r15, Y+15	; 0x0f
    3042:	e0 91 29 03 	lds	r30, 0x0329
    3046:	f0 91 2a 03 	lds	r31, 0x032A
    304a:	ee 0f       	add	r30, r30
    304c:	ff 1f       	adc	r31, r31
    304e:	ee 0f       	add	r30, r30
    3050:	ff 1f       	adc	r31, r31
    3052:	e2 51       	subi	r30, 0x12	; 18
    3054:	fd 4f       	sbci	r31, 0xFD	; 253
    3056:	60 81       	ld	r22, Z
    3058:	71 81       	ldd	r23, Z+1	; 0x01
    305a:	82 81       	ldd	r24, Z+2	; 0x02
    305c:	93 81       	ldd	r25, Z+3	; 0x03
    305e:	28 a1       	ldd	r18, Y+32	; 0x20
    3060:	39 a1       	ldd	r19, Y+33	; 0x21
    3062:	4a a1       	ldd	r20, Y+34	; 0x22
    3064:	5b a1       	ldd	r21, Y+35	; 0x23
    3066:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <__mulsf3>
    306a:	9b 01       	movw	r18, r22
    306c:	ac 01       	movw	r20, r24
    306e:	c7 01       	movw	r24, r14
    3070:	b6 01       	movw	r22, r12
    3072:	0e 94 89 38 	call	0x7112	; 0x7112 <__addsf3>
    3076:	6c 87       	std	Y+12, r22	; 0x0c
    3078:	7d 87       	std	Y+13, r23	; 0x0d
    307a:	8e 87       	std	Y+14, r24	; 0x0e
    307c:	9f 87       	std	Y+15, r25	; 0x0f
	if(ch->I_err > integralErrorLimit)
    307e:	6c 85       	ldd	r22, Y+12	; 0x0c
    3080:	7d 85       	ldd	r23, Y+13	; 0x0d
    3082:	8e 85       	ldd	r24, Y+14	; 0x0e
    3084:	9f 85       	ldd	r25, Y+15	; 0x0f
    3086:	20 e0       	ldi	r18, 0x00	; 0
    3088:	30 e0       	ldi	r19, 0x00	; 0
    308a:	40 e2       	ldi	r20, 0x20	; 32
    308c:	51 e4       	ldi	r21, 0x41	; 65
    308e:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <__gesf2>
    3092:	18 16       	cp	r1, r24
    3094:	64 f4       	brge	.+24     	; 0x30ae <__vector_7+0x1a6>
	{
		ch->I_err = integralErrorLimit;
    3096:	80 e0       	ldi	r24, 0x00	; 0
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	a0 e2       	ldi	r26, 0x20	; 32
    309c:	b1 e4       	ldi	r27, 0x41	; 65
    309e:	80 93 d2 02 	sts	0x02D2, r24
    30a2:	90 93 d3 02 	sts	0x02D3, r25
    30a6:	a0 93 d4 02 	sts	0x02D4, r26
    30aa:	b0 93 d5 02 	sts	0x02D5, r27
	}
	if(ch->I_err < -integralErrorLimit)
    30ae:	60 91 d2 02 	lds	r22, 0x02D2
    30b2:	70 91 d3 02 	lds	r23, 0x02D3
    30b6:	80 91 d4 02 	lds	r24, 0x02D4
    30ba:	90 91 d5 02 	lds	r25, 0x02D5
    30be:	20 e0       	ldi	r18, 0x00	; 0
    30c0:	30 e0       	ldi	r19, 0x00	; 0
    30c2:	40 e2       	ldi	r20, 0x20	; 32
    30c4:	51 ec       	ldi	r21, 0xC1	; 193
    30c6:	0e 94 ed 38 	call	0x71da	; 0x71da <__cmpsf2>
    30ca:	88 23       	and	r24, r24
    30cc:	64 f4       	brge	.+24     	; 0x30e6 <__vector_7+0x1de>
	{
		ch->I_err = -integralErrorLimit;
    30ce:	80 e0       	ldi	r24, 0x00	; 0
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	a0 e2       	ldi	r26, 0x20	; 32
    30d4:	b1 ec       	ldi	r27, 0xC1	; 193
    30d6:	80 93 d2 02 	sts	0x02D2, r24
    30da:	90 93 d3 02 	sts	0x02D3, r25
    30de:	a0 93 d4 02 	sts	0x02D4, r26
    30e2:	b0 93 d5 02 	sts	0x02D5, r27
	}
	
	ch->D_err = (ch->TempError[CtrlErrorIdx] - ch->TempError[CtrlErrorHistIdx]) * ch->Dgain; // D error
    30e6:	e0 91 29 03 	lds	r30, 0x0329
    30ea:	f0 91 2a 03 	lds	r31, 0x032A
    30ee:	c6 ec       	ldi	r28, 0xC6	; 198
    30f0:	d2 e0       	ldi	r29, 0x02	; 2
    30f2:	ee 0f       	add	r30, r30
    30f4:	ff 1f       	adc	r31, r31
    30f6:	ee 0f       	add	r30, r30
    30f8:	ff 1f       	adc	r31, r31
    30fa:	e2 51       	subi	r30, 0x12	; 18
    30fc:	fd 4f       	sbci	r31, 0xFD	; 253
    30fe:	60 81       	ld	r22, Z
    3100:	71 81       	ldd	r23, Z+1	; 0x01
    3102:	82 81       	ldd	r24, Z+2	; 0x02
    3104:	93 81       	ldd	r25, Z+3	; 0x03
    3106:	e0 91 02 01 	lds	r30, 0x0102
    310a:	f0 91 03 01 	lds	r31, 0x0103
    310e:	ee 0f       	add	r30, r30
    3110:	ff 1f       	adc	r31, r31
    3112:	ee 0f       	add	r30, r30
    3114:	ff 1f       	adc	r31, r31
    3116:	e2 51       	subi	r30, 0x12	; 18
    3118:	fd 4f       	sbci	r31, 0xFD	; 253
    311a:	20 81       	ld	r18, Z
    311c:	31 81       	ldd	r19, Z+1	; 0x01
    311e:	42 81       	ldd	r20, Z+2	; 0x02
    3120:	53 81       	ldd	r21, Z+3	; 0x03
    3122:	cc a0       	ldd	r12, Y+36	; 0x24
    3124:	dd a0       	ldd	r13, Y+37	; 0x25
    3126:	ee a0       	ldd	r14, Y+38	; 0x26
    3128:	ff a0       	ldd	r15, Y+39	; 0x27
    312a:	0e 94 88 38 	call	0x7110	; 0x7110 <__subsf3>
    312e:	a7 01       	movw	r20, r14
    3130:	96 01       	movw	r18, r12
    3132:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <__mulsf3>
    3136:	68 8b       	std	Y+16, r22	; 0x10
    3138:	79 8b       	std	Y+17, r23	; 0x11
    313a:	8a 8b       	std	Y+18, r24	; 0x12
    313c:	9b 8b       	std	Y+19, r25	; 0x13
	
	ch->Control_PID = ch->P_err + ch->I_err + ch->D_err;
    313e:	68 85       	ldd	r22, Y+8	; 0x08
    3140:	79 85       	ldd	r23, Y+9	; 0x09
    3142:	8a 85       	ldd	r24, Y+10	; 0x0a
    3144:	9b 85       	ldd	r25, Y+11	; 0x0b
    3146:	2c 85       	ldd	r18, Y+12	; 0x0c
    3148:	3d 85       	ldd	r19, Y+13	; 0x0d
    314a:	4e 85       	ldd	r20, Y+14	; 0x0e
    314c:	5f 85       	ldd	r21, Y+15	; 0x0f
    314e:	c8 88       	ldd	r12, Y+16	; 0x10
    3150:	d9 88       	ldd	r13, Y+17	; 0x11
    3152:	ea 88       	ldd	r14, Y+18	; 0x12
    3154:	fb 88       	ldd	r15, Y+19	; 0x13
    3156:	0e 94 89 38 	call	0x7112	; 0x7112 <__addsf3>
    315a:	a7 01       	movw	r20, r14
    315c:	96 01       	movw	r18, r12
    315e:	0e 94 89 38 	call	0x7112	; 0x7112 <__addsf3>
    3162:	68 8f       	std	Y+24, r22	; 0x18
    3164:	79 8f       	std	Y+25, r23	; 0x19
    3166:	8a 8f       	std	Y+26, r24	; 0x1a
    3168:	9b 8f       	std	Y+27, r25	; 0x1b
	ch->Control = ch->Control_PID; // + ch->TempSetPoint * (float)0.21 - 5;
    316a:	88 8d       	ldd	r24, Y+24	; 0x18
    316c:	99 8d       	ldd	r25, Y+25	; 0x19
    316e:	aa 8d       	ldd	r26, Y+26	; 0x1a
    3170:	bb 8d       	ldd	r27, Y+27	; 0x1b
    3172:	8c 8b       	std	Y+20, r24	; 0x14
    3174:	9d 8b       	std	Y+21, r25	; 0x15
    3176:	ae 8b       	std	Y+22, r26	; 0x16
    3178:	bf 8b       	std	Y+23, r27	; 0x17
	ch->pwm = (round(ch->Control));
    317a:	6c 89       	ldd	r22, Y+20	; 0x14
    317c:	7d 89       	ldd	r23, Y+21	; 0x15
    317e:	8e 89       	ldd	r24, Y+22	; 0x16
    3180:	9f 89       	ldd	r25, Y+23	; 0x17
    3182:	0e 94 3b 3a 	call	0x7476	; 0x7476 <round>
    3186:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <__fixsfsi>
    318a:	70 93 27 03 	sts	0x0327, r23
    318e:	60 93 26 03 	sts	0x0326, r22
	
	if(fabs(ch->TempError[CtrlErrorIdx]) > integralErrorActiveWindow)
    3192:	e0 91 29 03 	lds	r30, 0x0329
    3196:	f0 91 2a 03 	lds	r31, 0x032A
    319a:	ee 0f       	add	r30, r30
    319c:	ff 1f       	adc	r31, r31
    319e:	ee 0f       	add	r30, r30
    31a0:	ff 1f       	adc	r31, r31
    31a2:	e2 51       	subi	r30, 0x12	; 18
    31a4:	fd 4f       	sbci	r31, 0xFD	; 253
    31a6:	80 81       	ld	r24, Z
    31a8:	91 81       	ldd	r25, Z+1	; 0x01
    31aa:	a2 81       	ldd	r26, Z+2	; 0x02
    31ac:	b3 81       	ldd	r27, Z+3	; 0x03
    31ae:	bc 01       	movw	r22, r24
    31b0:	cd 01       	movw	r24, r26
    31b2:	9f 77       	andi	r25, 0x7F	; 127
    31b4:	20 e0       	ldi	r18, 0x00	; 0
    31b6:	30 e0       	ldi	r19, 0x00	; 0
    31b8:	40 ea       	ldi	r20, 0xA0	; 160
    31ba:	50 e4       	ldi	r21, 0x40	; 64
    31bc:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <__gesf2>
    31c0:	18 16       	cp	r1, r24
    31c2:	44 f4       	brge	.+16     	; 0x31d4 <__vector_7+0x2cc>
	{
		ch->I_err = 0;														// Avoid integral wind-up
    31c4:	10 92 d2 02 	sts	0x02D2, r1
    31c8:	10 92 d3 02 	sts	0x02D3, r1
    31cc:	10 92 d4 02 	sts	0x02D4, r1
    31d0:	10 92 d5 02 	sts	0x02D5, r1
	}
	
	if(fabs(ch->TempError[CtrlErrorIdx]) <= ch->tempErrorWin)				// Temperature settle window
    31d4:	e0 91 29 03 	lds	r30, 0x0329
    31d8:	f0 91 2a 03 	lds	r31, 0x032A
    31dc:	ee 0f       	add	r30, r30
    31de:	ff 1f       	adc	r31, r31
    31e0:	ee 0f       	add	r30, r30
    31e2:	ff 1f       	adc	r31, r31
    31e4:	e2 51       	subi	r30, 0x12	; 18
    31e6:	fd 4f       	sbci	r31, 0xFD	; 253
    31e8:	80 81       	ld	r24, Z
    31ea:	91 81       	ldd	r25, Z+1	; 0x01
    31ec:	a2 81       	ldd	r26, Z+2	; 0x02
    31ee:	b3 81       	ldd	r27, Z+3	; 0x03
    31f0:	20 91 1a 03 	lds	r18, 0x031A
    31f4:	30 91 1b 03 	lds	r19, 0x031B
    31f8:	40 91 1c 03 	lds	r20, 0x031C
    31fc:	50 91 1d 03 	lds	r21, 0x031D
    3200:	bc 01       	movw	r22, r24
    3202:	cd 01       	movw	r24, r26
    3204:	9f 77       	andi	r25, 0x7F	; 127
    3206:	0e 94 ed 38 	call	0x71da	; 0x71da <__cmpsf2>
    320a:	18 16       	cp	r1, r24
    320c:	14 f1       	brlt	.+68     	; 0x3252 <__vector_7+0x34a>
	{
		ch->tempSettleCnt ++;
    320e:	ee e1       	ldi	r30, 0x1E	; 30
    3210:	f3 e0       	ldi	r31, 0x03	; 3
    3212:	80 81       	ld	r24, Z
    3214:	91 81       	ldd	r25, Z+1	; 0x01
    3216:	01 96       	adiw	r24, 0x01	; 1
    3218:	91 83       	std	Z+1, r25	; 0x01
    321a:	80 83       	st	Z, r24
		if(ch->tempSettleCnt >= (int)(ch->tempSettleTime * 61))
    321c:	20 81       	ld	r18, Z
    321e:	31 81       	ldd	r19, Z+1	; 0x01
    3220:	40 91 20 03 	lds	r20, 0x0320
    3224:	50 91 21 03 	lds	r21, 0x0321
    3228:	6d e3       	ldi	r22, 0x3D	; 61
    322a:	64 9f       	mul	r22, r20
    322c:	c0 01       	movw	r24, r0
    322e:	65 9f       	mul	r22, r21
    3230:	90 0d       	add	r25, r0
    3232:	11 24       	eor	r1, r1
    3234:	28 17       	cp	r18, r24
    3236:	39 07       	cpc	r19, r25
    3238:	a4 f0       	brlt	.+40     	; 0x3262 <__vector_7+0x35a>
		{
			ch->tempStable = 1;
    323a:	81 e0       	ldi	r24, 0x01	; 1
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	90 93 23 03 	sts	0x0323, r25
    3242:	80 93 22 03 	sts	0x0322, r24
			ch->tempSettleCnt --;
    3246:	80 81       	ld	r24, Z
    3248:	91 81       	ldd	r25, Z+1	; 0x01
    324a:	01 97       	sbiw	r24, 0x01	; 1
    324c:	91 83       	std	Z+1, r25	; 0x01
    324e:	80 83       	st	Z, r24
    3250:	08 c0       	rjmp	.+16     	; 0x3262 <__vector_7+0x35a>
		}			
	}
	else
	{
		ch->tempSettleCnt = 0;
    3252:	10 92 1f 03 	sts	0x031F, r1
    3256:	10 92 1e 03 	sts	0x031E, r1
		ch->tempStable = 0;
    325a:	10 92 23 03 	sts	0x0323, r1
    325e:	10 92 22 03 	sts	0x0322, r1
		case 1:
		PORTD &= 0b11101111;	// Set CS1 low
		break;
		
		case 2:
		PORTD &= 0b11011111;	// Set CS2 low
    3262:	5d 98       	cbi	0x0b, 5	; 11
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
    3264:	81 e0       	ldi	r24, 0x01	; 1
    3266:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    3268:	0d b4       	in	r0, 0x2d	; 45
    326a:	07 fe       	sbrs	r0, 7
    326c:	fd cf       	rjmp	.-6      	; 0x3268 <__vector_7+0x360>
	byteword=SPDR;				//just for clearing SPIF
    326e:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
    3270:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    3272:	0d b4       	in	r0, 0x2d	; 45
    3274:	07 fe       	sbrs	r0, 7
    3276:	fd cf       	rjmp	.-6      	; 0x3272 <__vector_7+0x36a>
	byteword=SPDR;
    3278:	9e b5       	in	r25, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
    327a:	8b b1       	in	r24, 0x0b	; 11
    327c:	80 6f       	ori	r24, 0xF0	; 240
    327e:	8b b9       	out	0x0b, r24	; 11
		case 1:
		PORTD &= 0b11101111;	// Set CS1 low
		break;
		
		case 2:
		PORTD &= 0b11011111;	// Set CS2 low
    3280:	5d 98       	cbi	0x0b, 5	; 11
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
    3282:	82 e0       	ldi	r24, 0x02	; 2
    3284:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    3286:	0d b4       	in	r0, 0x2d	; 45
    3288:	07 fe       	sbrs	r0, 7
    328a:	fd cf       	rjmp	.-6      	; 0x3286 <__vector_7+0x37e>
	byteword=SPDR;				//just for clearing SPIF
    328c:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
    328e:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    3290:	0d b4       	in	r0, 0x2d	; 45
    3292:	07 fe       	sbrs	r0, 7
    3294:	fd cf       	rjmp	.-6      	; 0x3290 <__vector_7+0x388>
	byteword=SPDR;
    3296:	6e b5       	in	r22, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
    3298:	8b b1       	in	r24, 0x0b	; 11
    329a:	80 6f       	ori	r24, 0xF0	; 240
    329c:	8b b9       	out	0x0b, r24	; 11
	uint8_t u8_msb = 0;
	uint8_t u8_lsb = 0;
	
	u8_msb = SPIread(0x01, ch);
	u8_lsb = SPIread(0x02, ch);
	adc_code = (((u8_msb << 8) | u8_lsb) >> 1);
    329e:	70 e0       	ldi	r23, 0x00	; 0
    32a0:	79 2b       	or	r23, r25
    32a2:	75 95       	asr	r23
    32a4:	67 95       	ror	r22
	return ((float)adc_code / 32.0 - 256.0);
    32a6:	07 2e       	mov	r0, r23
    32a8:	00 0c       	add	r0, r0
    32aa:	88 0b       	sbc	r24, r24
    32ac:	99 0b       	sbc	r25, r25
    32ae:	0e 94 24 39 	call	0x7248	; 0x7248 <__floatsisf>
    32b2:	20 e0       	ldi	r18, 0x00	; 0
    32b4:	30 e0       	ldi	r19, 0x00	; 0
    32b6:	40 e0       	ldi	r20, 0x00	; 0
    32b8:	5d e3       	ldi	r21, 0x3D	; 61
    32ba:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <__mulsf3>
    32be:	20 e0       	ldi	r18, 0x00	; 0
    32c0:	30 e0       	ldi	r19, 0x00	; 0
    32c2:	40 e8       	ldi	r20, 0x80	; 128
    32c4:	53 e4       	ldi	r21, 0x43	; 67
    32c6:	0e 94 88 38 	call	0x7110	; 0x7110 <__subsf3>
	PORTD &= 0b11110111;						// Turn off LED on PCB (Irq call freq: 16MHz / 1024 / 255 = 61.3 Hz )
}

static inline void PIDctrl(channel *ch, int tempSensor)
{
	ch->TempSensor = ReadTempSensor(tempSensor);
    32ca:	e3 e6       	ldi	r30, 0x63	; 99
    32cc:	f2 e0       	ldi	r31, 0x02	; 2
    32ce:	64 83       	std	Z+4, r22	; 0x04
    32d0:	75 83       	std	Z+5, r23	; 0x05
    32d2:	86 83       	std	Z+6, r24	; 0x06
    32d4:	97 83       	std	Z+7, r25	; 0x07
	if(ch->TempSensor > (float)maxAllowedTemp)								// Max temperature limit
    32d6:	64 81       	ldd	r22, Z+4	; 0x04
    32d8:	75 81       	ldd	r23, Z+5	; 0x05
    32da:	86 81       	ldd	r24, Z+6	; 0x06
    32dc:	97 81       	ldd	r25, Z+7	; 0x07
    32de:	20 e0       	ldi	r18, 0x00	; 0
    32e0:	30 e0       	ldi	r19, 0x00	; 0
    32e2:	40 ef       	ldi	r20, 0xF0	; 240
    32e4:	52 e4       	ldi	r21, 0x42	; 66
    32e6:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <__gesf2>
    32ea:	18 16       	cp	r1, r24
    32ec:	2c f4       	brge	.+10     	; 0x32f8 <__vector_7+0x3f0>
	{
		ch->heaterEnable = false;
    32ee:	10 92 c5 02 	sts	0x02C5, r1
		PORTC &= allHeaterOff;
    32f2:	88 b1       	in	r24, 0x08	; 8
    32f4:	80 7f       	andi	r24, 0xF0	; 240
    32f6:	88 b9       	out	0x08, r24	; 8
	}

	ch->TempError[CtrlErrorIdx] = ch->TempSetPoint - ch->TempSensor;		// Control error
    32f8:	00 91 29 03 	lds	r16, 0x0329
    32fc:	10 91 2a 03 	lds	r17, 0x032A
    3300:	c3 e6       	ldi	r28, 0x63	; 99
    3302:	d2 e0       	ldi	r29, 0x02	; 2
    3304:	68 81       	ld	r22, Y
    3306:	79 81       	ldd	r23, Y+1	; 0x01
    3308:	8a 81       	ldd	r24, Y+2	; 0x02
    330a:	9b 81       	ldd	r25, Y+3	; 0x03
    330c:	2c 81       	ldd	r18, Y+4	; 0x04
    330e:	3d 81       	ldd	r19, Y+5	; 0x05
    3310:	4e 81       	ldd	r20, Y+6	; 0x06
    3312:	5f 81       	ldd	r21, Y+7	; 0x07
    3314:	0e 94 88 38 	call	0x7110	; 0x7110 <__subsf3>
    3318:	00 0f       	add	r16, r16
    331a:	11 1f       	adc	r17, r17
    331c:	00 0f       	add	r16, r16
    331e:	11 1f       	adc	r17, r17
    3320:	f8 01       	movw	r30, r16
    3322:	e5 57       	subi	r30, 0x75	; 117
    3324:	fd 4f       	sbci	r31, 0xFD	; 253
    3326:	60 83       	st	Z, r22
    3328:	71 83       	std	Z+1, r23	; 0x01
    332a:	82 83       	std	Z+2, r24	; 0x02
    332c:	93 83       	std	Z+3, r25	; 0x03
	
	ch->P_err = ch->TempError[CtrlErrorIdx] * ch->Pgain;					// P error
    332e:	e0 91 29 03 	lds	r30, 0x0329
    3332:	f0 91 2a 03 	lds	r31, 0x032A
    3336:	ee 0f       	add	r30, r30
    3338:	ff 1f       	adc	r31, r31
    333a:	ee 0f       	add	r30, r30
    333c:	ff 1f       	adc	r31, r31
    333e:	e5 57       	subi	r30, 0x75	; 117
    3340:	fd 4f       	sbci	r31, 0xFD	; 253
    3342:	60 81       	ld	r22, Z
    3344:	71 81       	ldd	r23, Z+1	; 0x01
    3346:	82 81       	ldd	r24, Z+2	; 0x02
    3348:	93 81       	ldd	r25, Z+3	; 0x03
    334a:	2c 8d       	ldd	r18, Y+28	; 0x1c
    334c:	3d 8d       	ldd	r19, Y+29	; 0x1d
    334e:	4e 8d       	ldd	r20, Y+30	; 0x1e
    3350:	5f 8d       	ldd	r21, Y+31	; 0x1f
    3352:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <__mulsf3>
    3356:	68 87       	std	Y+8, r22	; 0x08
    3358:	79 87       	std	Y+9, r23	; 0x09
    335a:	8a 87       	std	Y+10, r24	; 0x0a
    335c:	9b 87       	std	Y+11, r25	; 0x0b
	ch->I_err = ch->I_err + (ch->TempError[CtrlErrorIdx] * ch->Igain);		// I error
    335e:	cc 84       	ldd	r12, Y+12	; 0x0c
    3360:	dd 84       	ldd	r13, Y+13	; 0x0d
    3362:	ee 84       	ldd	r14, Y+14	; 0x0e
    3364:	ff 84       	ldd	r15, Y+15	; 0x0f
    3366:	e0 91 29 03 	lds	r30, 0x0329
    336a:	f0 91 2a 03 	lds	r31, 0x032A
    336e:	ee 0f       	add	r30, r30
    3370:	ff 1f       	adc	r31, r31
    3372:	ee 0f       	add	r30, r30
    3374:	ff 1f       	adc	r31, r31
    3376:	e5 57       	subi	r30, 0x75	; 117
    3378:	fd 4f       	sbci	r31, 0xFD	; 253
    337a:	60 81       	ld	r22, Z
    337c:	71 81       	ldd	r23, Z+1	; 0x01
    337e:	82 81       	ldd	r24, Z+2	; 0x02
    3380:	93 81       	ldd	r25, Z+3	; 0x03
    3382:	28 a1       	ldd	r18, Y+32	; 0x20
    3384:	39 a1       	ldd	r19, Y+33	; 0x21
    3386:	4a a1       	ldd	r20, Y+34	; 0x22
    3388:	5b a1       	ldd	r21, Y+35	; 0x23
    338a:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <__mulsf3>
    338e:	9b 01       	movw	r18, r22
    3390:	ac 01       	movw	r20, r24
    3392:	c7 01       	movw	r24, r14
    3394:	b6 01       	movw	r22, r12
    3396:	0e 94 89 38 	call	0x7112	; 0x7112 <__addsf3>
    339a:	6c 87       	std	Y+12, r22	; 0x0c
    339c:	7d 87       	std	Y+13, r23	; 0x0d
    339e:	8e 87       	std	Y+14, r24	; 0x0e
    33a0:	9f 87       	std	Y+15, r25	; 0x0f
	if(ch->I_err > integralErrorLimit)
    33a2:	6c 85       	ldd	r22, Y+12	; 0x0c
    33a4:	7d 85       	ldd	r23, Y+13	; 0x0d
    33a6:	8e 85       	ldd	r24, Y+14	; 0x0e
    33a8:	9f 85       	ldd	r25, Y+15	; 0x0f
    33aa:	20 e0       	ldi	r18, 0x00	; 0
    33ac:	30 e0       	ldi	r19, 0x00	; 0
    33ae:	40 e2       	ldi	r20, 0x20	; 32
    33b0:	51 e4       	ldi	r21, 0x41	; 65
    33b2:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <__gesf2>
    33b6:	18 16       	cp	r1, r24
    33b8:	64 f4       	brge	.+24     	; 0x33d2 <__vector_7+0x4ca>
	{
		ch->I_err = integralErrorLimit;
    33ba:	80 e0       	ldi	r24, 0x00	; 0
    33bc:	90 e0       	ldi	r25, 0x00	; 0
    33be:	a0 e2       	ldi	r26, 0x20	; 32
    33c0:	b1 e4       	ldi	r27, 0x41	; 65
    33c2:	80 93 6f 02 	sts	0x026F, r24
    33c6:	90 93 70 02 	sts	0x0270, r25
    33ca:	a0 93 71 02 	sts	0x0271, r26
    33ce:	b0 93 72 02 	sts	0x0272, r27
	}
	if(ch->I_err < -integralErrorLimit)
    33d2:	60 91 6f 02 	lds	r22, 0x026F
    33d6:	70 91 70 02 	lds	r23, 0x0270
    33da:	80 91 71 02 	lds	r24, 0x0271
    33de:	90 91 72 02 	lds	r25, 0x0272
    33e2:	20 e0       	ldi	r18, 0x00	; 0
    33e4:	30 e0       	ldi	r19, 0x00	; 0
    33e6:	40 e2       	ldi	r20, 0x20	; 32
    33e8:	51 ec       	ldi	r21, 0xC1	; 193
    33ea:	0e 94 ed 38 	call	0x71da	; 0x71da <__cmpsf2>
    33ee:	88 23       	and	r24, r24
    33f0:	64 f4       	brge	.+24     	; 0x340a <__vector_7+0x502>
	{
		ch->I_err = -integralErrorLimit;
    33f2:	80 e0       	ldi	r24, 0x00	; 0
    33f4:	90 e0       	ldi	r25, 0x00	; 0
    33f6:	a0 e2       	ldi	r26, 0x20	; 32
    33f8:	b1 ec       	ldi	r27, 0xC1	; 193
    33fa:	80 93 6f 02 	sts	0x026F, r24
    33fe:	90 93 70 02 	sts	0x0270, r25
    3402:	a0 93 71 02 	sts	0x0271, r26
    3406:	b0 93 72 02 	sts	0x0272, r27
	}
	
	ch->D_err = (ch->TempError[CtrlErrorIdx] - ch->TempError[CtrlErrorHistIdx]) * ch->Dgain; // D error
    340a:	e0 91 29 03 	lds	r30, 0x0329
    340e:	f0 91 2a 03 	lds	r31, 0x032A
    3412:	c3 e6       	ldi	r28, 0x63	; 99
    3414:	d2 e0       	ldi	r29, 0x02	; 2
    3416:	ee 0f       	add	r30, r30
    3418:	ff 1f       	adc	r31, r31
    341a:	ee 0f       	add	r30, r30
    341c:	ff 1f       	adc	r31, r31
    341e:	e5 57       	subi	r30, 0x75	; 117
    3420:	fd 4f       	sbci	r31, 0xFD	; 253
    3422:	60 81       	ld	r22, Z
    3424:	71 81       	ldd	r23, Z+1	; 0x01
    3426:	82 81       	ldd	r24, Z+2	; 0x02
    3428:	93 81       	ldd	r25, Z+3	; 0x03
    342a:	e0 91 02 01 	lds	r30, 0x0102
    342e:	f0 91 03 01 	lds	r31, 0x0103
    3432:	ee 0f       	add	r30, r30
    3434:	ff 1f       	adc	r31, r31
    3436:	ee 0f       	add	r30, r30
    3438:	ff 1f       	adc	r31, r31
    343a:	e5 57       	subi	r30, 0x75	; 117
    343c:	fd 4f       	sbci	r31, 0xFD	; 253
    343e:	20 81       	ld	r18, Z
    3440:	31 81       	ldd	r19, Z+1	; 0x01
    3442:	42 81       	ldd	r20, Z+2	; 0x02
    3444:	53 81       	ldd	r21, Z+3	; 0x03
    3446:	cc a0       	ldd	r12, Y+36	; 0x24
    3448:	dd a0       	ldd	r13, Y+37	; 0x25
    344a:	ee a0       	ldd	r14, Y+38	; 0x26
    344c:	ff a0       	ldd	r15, Y+39	; 0x27
    344e:	0e 94 88 38 	call	0x7110	; 0x7110 <__subsf3>
    3452:	a7 01       	movw	r20, r14
    3454:	96 01       	movw	r18, r12
    3456:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <__mulsf3>
    345a:	68 8b       	std	Y+16, r22	; 0x10
    345c:	79 8b       	std	Y+17, r23	; 0x11
    345e:	8a 8b       	std	Y+18, r24	; 0x12
    3460:	9b 8b       	std	Y+19, r25	; 0x13
	
	ch->Control_PID = ch->P_err + ch->I_err + ch->D_err;
    3462:	68 85       	ldd	r22, Y+8	; 0x08
    3464:	79 85       	ldd	r23, Y+9	; 0x09
    3466:	8a 85       	ldd	r24, Y+10	; 0x0a
    3468:	9b 85       	ldd	r25, Y+11	; 0x0b
    346a:	2c 85       	ldd	r18, Y+12	; 0x0c
    346c:	3d 85       	ldd	r19, Y+13	; 0x0d
    346e:	4e 85       	ldd	r20, Y+14	; 0x0e
    3470:	5f 85       	ldd	r21, Y+15	; 0x0f
    3472:	c8 88       	ldd	r12, Y+16	; 0x10
    3474:	d9 88       	ldd	r13, Y+17	; 0x11
    3476:	ea 88       	ldd	r14, Y+18	; 0x12
    3478:	fb 88       	ldd	r15, Y+19	; 0x13
    347a:	0e 94 89 38 	call	0x7112	; 0x7112 <__addsf3>
    347e:	a7 01       	movw	r20, r14
    3480:	96 01       	movw	r18, r12
    3482:	0e 94 89 38 	call	0x7112	; 0x7112 <__addsf3>
    3486:	68 8f       	std	Y+24, r22	; 0x18
    3488:	79 8f       	std	Y+25, r23	; 0x19
    348a:	8a 8f       	std	Y+26, r24	; 0x1a
    348c:	9b 8f       	std	Y+27, r25	; 0x1b
	ch->Control = ch->Control_PID; // + ch->TempSetPoint * (float)0.21 - 5;
    348e:	88 8d       	ldd	r24, Y+24	; 0x18
    3490:	99 8d       	ldd	r25, Y+25	; 0x19
    3492:	aa 8d       	ldd	r26, Y+26	; 0x1a
    3494:	bb 8d       	ldd	r27, Y+27	; 0x1b
    3496:	8c 8b       	std	Y+20, r24	; 0x14
    3498:	9d 8b       	std	Y+21, r25	; 0x15
    349a:	ae 8b       	std	Y+22, r26	; 0x16
    349c:	bf 8b       	std	Y+23, r27	; 0x17
	ch->pwm = (round(ch->Control));
    349e:	6c 89       	ldd	r22, Y+20	; 0x14
    34a0:	7d 89       	ldd	r23, Y+21	; 0x15
    34a2:	8e 89       	ldd	r24, Y+22	; 0x16
    34a4:	9f 89       	ldd	r25, Y+23	; 0x17
    34a6:	0e 94 3b 3a 	call	0x7476	; 0x7476 <round>
    34aa:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <__fixsfsi>
    34ae:	70 93 c4 02 	sts	0x02C4, r23
    34b2:	60 93 c3 02 	sts	0x02C3, r22
	
	if(fabs(ch->TempError[CtrlErrorIdx]) > integralErrorActiveWindow)
    34b6:	e0 91 29 03 	lds	r30, 0x0329
    34ba:	f0 91 2a 03 	lds	r31, 0x032A
    34be:	ee 0f       	add	r30, r30
    34c0:	ff 1f       	adc	r31, r31
    34c2:	ee 0f       	add	r30, r30
    34c4:	ff 1f       	adc	r31, r31
    34c6:	e5 57       	subi	r30, 0x75	; 117
    34c8:	fd 4f       	sbci	r31, 0xFD	; 253
    34ca:	80 81       	ld	r24, Z
    34cc:	91 81       	ldd	r25, Z+1	; 0x01
    34ce:	a2 81       	ldd	r26, Z+2	; 0x02
    34d0:	b3 81       	ldd	r27, Z+3	; 0x03
    34d2:	bc 01       	movw	r22, r24
    34d4:	cd 01       	movw	r24, r26
    34d6:	9f 77       	andi	r25, 0x7F	; 127
    34d8:	20 e0       	ldi	r18, 0x00	; 0
    34da:	30 e0       	ldi	r19, 0x00	; 0
    34dc:	40 ea       	ldi	r20, 0xA0	; 160
    34de:	50 e4       	ldi	r21, 0x40	; 64
    34e0:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <__gesf2>
    34e4:	18 16       	cp	r1, r24
    34e6:	44 f4       	brge	.+16     	; 0x34f8 <__vector_7+0x5f0>
	{
		ch->I_err = 0;														// Avoid integral wind-up
    34e8:	10 92 6f 02 	sts	0x026F, r1
    34ec:	10 92 70 02 	sts	0x0270, r1
    34f0:	10 92 71 02 	sts	0x0271, r1
    34f4:	10 92 72 02 	sts	0x0272, r1
	}
	
	if(fabs(ch->TempError[CtrlErrorIdx]) <= ch->tempErrorWin)				// Temperature settle window
    34f8:	e0 91 29 03 	lds	r30, 0x0329
    34fc:	f0 91 2a 03 	lds	r31, 0x032A
    3500:	ee 0f       	add	r30, r30
    3502:	ff 1f       	adc	r31, r31
    3504:	ee 0f       	add	r30, r30
    3506:	ff 1f       	adc	r31, r31
    3508:	e5 57       	subi	r30, 0x75	; 117
    350a:	fd 4f       	sbci	r31, 0xFD	; 253
    350c:	80 81       	ld	r24, Z
    350e:	91 81       	ldd	r25, Z+1	; 0x01
    3510:	a2 81       	ldd	r26, Z+2	; 0x02
    3512:	b3 81       	ldd	r27, Z+3	; 0x03
    3514:	20 91 b7 02 	lds	r18, 0x02B7
    3518:	30 91 b8 02 	lds	r19, 0x02B8
    351c:	40 91 b9 02 	lds	r20, 0x02B9
    3520:	50 91 ba 02 	lds	r21, 0x02BA
    3524:	bc 01       	movw	r22, r24
    3526:	cd 01       	movw	r24, r26
    3528:	9f 77       	andi	r25, 0x7F	; 127
    352a:	0e 94 ed 38 	call	0x71da	; 0x71da <__cmpsf2>
    352e:	18 16       	cp	r1, r24
    3530:	14 f1       	brlt	.+68     	; 0x3576 <__vector_7+0x66e>
	{
		ch->tempSettleCnt ++;
    3532:	eb eb       	ldi	r30, 0xBB	; 187
    3534:	f2 e0       	ldi	r31, 0x02	; 2
    3536:	80 81       	ld	r24, Z
    3538:	91 81       	ldd	r25, Z+1	; 0x01
    353a:	01 96       	adiw	r24, 0x01	; 1
    353c:	91 83       	std	Z+1, r25	; 0x01
    353e:	80 83       	st	Z, r24
		if(ch->tempSettleCnt >= (int)(ch->tempSettleTime * 61))
    3540:	20 81       	ld	r18, Z
    3542:	31 81       	ldd	r19, Z+1	; 0x01
    3544:	40 91 bd 02 	lds	r20, 0x02BD
    3548:	50 91 be 02 	lds	r21, 0x02BE
    354c:	6d e3       	ldi	r22, 0x3D	; 61
    354e:	64 9f       	mul	r22, r20
    3550:	c0 01       	movw	r24, r0
    3552:	65 9f       	mul	r22, r21
    3554:	90 0d       	add	r25, r0
    3556:	11 24       	eor	r1, r1
    3558:	28 17       	cp	r18, r24
    355a:	39 07       	cpc	r19, r25
    355c:	a4 f0       	brlt	.+40     	; 0x3586 <__vector_7+0x67e>
		{
			ch->tempStable = 1;
    355e:	81 e0       	ldi	r24, 0x01	; 1
    3560:	90 e0       	ldi	r25, 0x00	; 0
    3562:	90 93 c0 02 	sts	0x02C0, r25
    3566:	80 93 bf 02 	sts	0x02BF, r24
			ch->tempSettleCnt --;
    356a:	80 81       	ld	r24, Z
    356c:	91 81       	ldd	r25, Z+1	; 0x01
    356e:	01 97       	sbiw	r24, 0x01	; 1
    3570:	91 83       	std	Z+1, r25	; 0x01
    3572:	80 83       	st	Z, r24
    3574:	08 c0       	rjmp	.+16     	; 0x3586 <__vector_7+0x67e>
		}			
	}
	else
	{
		ch->tempSettleCnt = 0;
    3576:	10 92 bc 02 	sts	0x02BC, r1
    357a:	10 92 bb 02 	sts	0x02BB, r1
		ch->tempStable = 0;
    357e:	10 92 c0 02 	sts	0x02C0, r1
    3582:	10 92 bf 02 	sts	0x02BF, r1
		case 2:
		PORTD &= 0b11011111;	// Set CS2 low
		break;
				
		case 3:
		PORTD &= 0b10111111;	// Set CS3 low
    3586:	5e 98       	cbi	0x0b, 6	; 11
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
    3588:	81 e0       	ldi	r24, 0x01	; 1
    358a:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    358c:	0d b4       	in	r0, 0x2d	; 45
    358e:	07 fe       	sbrs	r0, 7
    3590:	fd cf       	rjmp	.-6      	; 0x358c <__vector_7+0x684>
	byteword=SPDR;				//just for clearing SPIF
    3592:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
    3594:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    3596:	0d b4       	in	r0, 0x2d	; 45
    3598:	07 fe       	sbrs	r0, 7
    359a:	fd cf       	rjmp	.-6      	; 0x3596 <__vector_7+0x68e>
	byteword=SPDR;
    359c:	9e b5       	in	r25, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
    359e:	8b b1       	in	r24, 0x0b	; 11
    35a0:	80 6f       	ori	r24, 0xF0	; 240
    35a2:	8b b9       	out	0x0b, r24	; 11
		case 2:
		PORTD &= 0b11011111;	// Set CS2 low
		break;
				
		case 3:
		PORTD &= 0b10111111;	// Set CS3 low
    35a4:	5e 98       	cbi	0x0b, 6	; 11
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
    35a6:	82 e0       	ldi	r24, 0x02	; 2
    35a8:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    35aa:	0d b4       	in	r0, 0x2d	; 45
    35ac:	07 fe       	sbrs	r0, 7
    35ae:	fd cf       	rjmp	.-6      	; 0x35aa <__vector_7+0x6a2>
	byteword=SPDR;				//just for clearing SPIF
    35b0:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
    35b2:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    35b4:	0d b4       	in	r0, 0x2d	; 45
    35b6:	07 fe       	sbrs	r0, 7
    35b8:	fd cf       	rjmp	.-6      	; 0x35b4 <__vector_7+0x6ac>
	byteword=SPDR;
    35ba:	6e b5       	in	r22, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
    35bc:	8b b1       	in	r24, 0x0b	; 11
    35be:	80 6f       	ori	r24, 0xF0	; 240
    35c0:	8b b9       	out	0x0b, r24	; 11
	uint8_t u8_msb = 0;
	uint8_t u8_lsb = 0;
	
	u8_msb = SPIread(0x01, ch);
	u8_lsb = SPIread(0x02, ch);
	adc_code = (((u8_msb << 8) | u8_lsb) >> 1);
    35c2:	70 e0       	ldi	r23, 0x00	; 0
    35c4:	79 2b       	or	r23, r25
    35c6:	75 95       	asr	r23
    35c8:	67 95       	ror	r22
	return ((float)adc_code / 32.0 - 256.0);
    35ca:	07 2e       	mov	r0, r23
    35cc:	00 0c       	add	r0, r0
    35ce:	88 0b       	sbc	r24, r24
    35d0:	99 0b       	sbc	r25, r25
    35d2:	0e 94 24 39 	call	0x7248	; 0x7248 <__floatsisf>
    35d6:	20 e0       	ldi	r18, 0x00	; 0
    35d8:	30 e0       	ldi	r19, 0x00	; 0
    35da:	40 e0       	ldi	r20, 0x00	; 0
    35dc:	5d e3       	ldi	r21, 0x3D	; 61
    35de:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <__mulsf3>
    35e2:	20 e0       	ldi	r18, 0x00	; 0
    35e4:	30 e0       	ldi	r19, 0x00	; 0
    35e6:	40 e8       	ldi	r20, 0x80	; 128
    35e8:	53 e4       	ldi	r21, 0x43	; 67
    35ea:	0e 94 88 38 	call	0x7110	; 0x7110 <__subsf3>
	PORTD &= 0b11110111;						// Turn off LED on PCB (Irq call freq: 16MHz / 1024 / 255 = 61.3 Hz )
}

static inline void PIDctrl(channel *ch, int tempSensor)
{
	ch->TempSensor = ReadTempSensor(tempSensor);
    35ee:	e0 e0       	ldi	r30, 0x00	; 0
    35f0:	f2 e0       	ldi	r31, 0x02	; 2
    35f2:	64 83       	std	Z+4, r22	; 0x04
    35f4:	75 83       	std	Z+5, r23	; 0x05
    35f6:	86 83       	std	Z+6, r24	; 0x06
    35f8:	97 83       	std	Z+7, r25	; 0x07
	if(ch->TempSensor > (float)maxAllowedTemp)								// Max temperature limit
    35fa:	64 81       	ldd	r22, Z+4	; 0x04
    35fc:	75 81       	ldd	r23, Z+5	; 0x05
    35fe:	86 81       	ldd	r24, Z+6	; 0x06
    3600:	97 81       	ldd	r25, Z+7	; 0x07
    3602:	20 e0       	ldi	r18, 0x00	; 0
    3604:	30 e0       	ldi	r19, 0x00	; 0
    3606:	40 ef       	ldi	r20, 0xF0	; 240
    3608:	52 e4       	ldi	r21, 0x42	; 66
    360a:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <__gesf2>
    360e:	18 16       	cp	r1, r24
    3610:	2c f4       	brge	.+10     	; 0x361c <__vector_7+0x714>
	{
		ch->heaterEnable = false;
    3612:	10 92 62 02 	sts	0x0262, r1
		PORTC &= allHeaterOff;
    3616:	88 b1       	in	r24, 0x08	; 8
    3618:	80 7f       	andi	r24, 0xF0	; 240
    361a:	88 b9       	out	0x08, r24	; 8
	}

	ch->TempError[CtrlErrorIdx] = ch->TempSetPoint - ch->TempSensor;		// Control error
    361c:	00 91 29 03 	lds	r16, 0x0329
    3620:	10 91 2a 03 	lds	r17, 0x032A
    3624:	c0 e0       	ldi	r28, 0x00	; 0
    3626:	d2 e0       	ldi	r29, 0x02	; 2
    3628:	68 81       	ld	r22, Y
    362a:	79 81       	ldd	r23, Y+1	; 0x01
    362c:	8a 81       	ldd	r24, Y+2	; 0x02
    362e:	9b 81       	ldd	r25, Y+3	; 0x03
    3630:	2c 81       	ldd	r18, Y+4	; 0x04
    3632:	3d 81       	ldd	r19, Y+5	; 0x05
    3634:	4e 81       	ldd	r20, Y+6	; 0x06
    3636:	5f 81       	ldd	r21, Y+7	; 0x07
    3638:	0e 94 88 38 	call	0x7110	; 0x7110 <__subsf3>
    363c:	00 0f       	add	r16, r16
    363e:	11 1f       	adc	r17, r17
    3640:	00 0f       	add	r16, r16
    3642:	11 1f       	adc	r17, r17
    3644:	f8 01       	movw	r30, r16
    3646:	e8 5d       	subi	r30, 0xD8	; 216
    3648:	fd 4f       	sbci	r31, 0xFD	; 253
    364a:	60 83       	st	Z, r22
    364c:	71 83       	std	Z+1, r23	; 0x01
    364e:	82 83       	std	Z+2, r24	; 0x02
    3650:	93 83       	std	Z+3, r25	; 0x03
	
	ch->P_err = ch->TempError[CtrlErrorIdx] * ch->Pgain;					// P error
    3652:	e0 91 29 03 	lds	r30, 0x0329
    3656:	f0 91 2a 03 	lds	r31, 0x032A
    365a:	ee 0f       	add	r30, r30
    365c:	ff 1f       	adc	r31, r31
    365e:	ee 0f       	add	r30, r30
    3660:	ff 1f       	adc	r31, r31
    3662:	e8 5d       	subi	r30, 0xD8	; 216
    3664:	fd 4f       	sbci	r31, 0xFD	; 253
    3666:	60 81       	ld	r22, Z
    3668:	71 81       	ldd	r23, Z+1	; 0x01
    366a:	82 81       	ldd	r24, Z+2	; 0x02
    366c:	93 81       	ldd	r25, Z+3	; 0x03
    366e:	2c 8d       	ldd	r18, Y+28	; 0x1c
    3670:	3d 8d       	ldd	r19, Y+29	; 0x1d
    3672:	4e 8d       	ldd	r20, Y+30	; 0x1e
    3674:	5f 8d       	ldd	r21, Y+31	; 0x1f
    3676:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <__mulsf3>
    367a:	68 87       	std	Y+8, r22	; 0x08
    367c:	79 87       	std	Y+9, r23	; 0x09
    367e:	8a 87       	std	Y+10, r24	; 0x0a
    3680:	9b 87       	std	Y+11, r25	; 0x0b
	ch->I_err = ch->I_err + (ch->TempError[CtrlErrorIdx] * ch->Igain);		// I error
    3682:	cc 84       	ldd	r12, Y+12	; 0x0c
    3684:	dd 84       	ldd	r13, Y+13	; 0x0d
    3686:	ee 84       	ldd	r14, Y+14	; 0x0e
    3688:	ff 84       	ldd	r15, Y+15	; 0x0f
    368a:	e0 91 29 03 	lds	r30, 0x0329
    368e:	f0 91 2a 03 	lds	r31, 0x032A
    3692:	ee 0f       	add	r30, r30
    3694:	ff 1f       	adc	r31, r31
    3696:	ee 0f       	add	r30, r30
    3698:	ff 1f       	adc	r31, r31
    369a:	e8 5d       	subi	r30, 0xD8	; 216
    369c:	fd 4f       	sbci	r31, 0xFD	; 253
    369e:	60 81       	ld	r22, Z
    36a0:	71 81       	ldd	r23, Z+1	; 0x01
    36a2:	82 81       	ldd	r24, Z+2	; 0x02
    36a4:	93 81       	ldd	r25, Z+3	; 0x03
    36a6:	28 a1       	ldd	r18, Y+32	; 0x20
    36a8:	39 a1       	ldd	r19, Y+33	; 0x21
    36aa:	4a a1       	ldd	r20, Y+34	; 0x22
    36ac:	5b a1       	ldd	r21, Y+35	; 0x23
    36ae:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <__mulsf3>
    36b2:	9b 01       	movw	r18, r22
    36b4:	ac 01       	movw	r20, r24
    36b6:	c7 01       	movw	r24, r14
    36b8:	b6 01       	movw	r22, r12
    36ba:	0e 94 89 38 	call	0x7112	; 0x7112 <__addsf3>
    36be:	6c 87       	std	Y+12, r22	; 0x0c
    36c0:	7d 87       	std	Y+13, r23	; 0x0d
    36c2:	8e 87       	std	Y+14, r24	; 0x0e
    36c4:	9f 87       	std	Y+15, r25	; 0x0f
	if(ch->I_err > integralErrorLimit)
    36c6:	6c 85       	ldd	r22, Y+12	; 0x0c
    36c8:	7d 85       	ldd	r23, Y+13	; 0x0d
    36ca:	8e 85       	ldd	r24, Y+14	; 0x0e
    36cc:	9f 85       	ldd	r25, Y+15	; 0x0f
    36ce:	20 e0       	ldi	r18, 0x00	; 0
    36d0:	30 e0       	ldi	r19, 0x00	; 0
    36d2:	40 e2       	ldi	r20, 0x20	; 32
    36d4:	51 e4       	ldi	r21, 0x41	; 65
    36d6:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <__gesf2>
    36da:	18 16       	cp	r1, r24
    36dc:	64 f4       	brge	.+24     	; 0x36f6 <__vector_7+0x7ee>
	{
		ch->I_err = integralErrorLimit;
    36de:	80 e0       	ldi	r24, 0x00	; 0
    36e0:	90 e0       	ldi	r25, 0x00	; 0
    36e2:	a0 e2       	ldi	r26, 0x20	; 32
    36e4:	b1 e4       	ldi	r27, 0x41	; 65
    36e6:	80 93 0c 02 	sts	0x020C, r24
    36ea:	90 93 0d 02 	sts	0x020D, r25
    36ee:	a0 93 0e 02 	sts	0x020E, r26
    36f2:	b0 93 0f 02 	sts	0x020F, r27
	}
	if(ch->I_err < -integralErrorLimit)
    36f6:	60 91 0c 02 	lds	r22, 0x020C
    36fa:	70 91 0d 02 	lds	r23, 0x020D
    36fe:	80 91 0e 02 	lds	r24, 0x020E
    3702:	90 91 0f 02 	lds	r25, 0x020F
    3706:	20 e0       	ldi	r18, 0x00	; 0
    3708:	30 e0       	ldi	r19, 0x00	; 0
    370a:	40 e2       	ldi	r20, 0x20	; 32
    370c:	51 ec       	ldi	r21, 0xC1	; 193
    370e:	0e 94 ed 38 	call	0x71da	; 0x71da <__cmpsf2>
    3712:	88 23       	and	r24, r24
    3714:	64 f4       	brge	.+24     	; 0x372e <__vector_7+0x826>
	{
		ch->I_err = -integralErrorLimit;
    3716:	80 e0       	ldi	r24, 0x00	; 0
    3718:	90 e0       	ldi	r25, 0x00	; 0
    371a:	a0 e2       	ldi	r26, 0x20	; 32
    371c:	b1 ec       	ldi	r27, 0xC1	; 193
    371e:	80 93 0c 02 	sts	0x020C, r24
    3722:	90 93 0d 02 	sts	0x020D, r25
    3726:	a0 93 0e 02 	sts	0x020E, r26
    372a:	b0 93 0f 02 	sts	0x020F, r27
	}
	
	ch->D_err = (ch->TempError[CtrlErrorIdx] - ch->TempError[CtrlErrorHistIdx]) * ch->Dgain; // D error
    372e:	e0 91 29 03 	lds	r30, 0x0329
    3732:	f0 91 2a 03 	lds	r31, 0x032A
    3736:	c0 e0       	ldi	r28, 0x00	; 0
    3738:	d2 e0       	ldi	r29, 0x02	; 2
    373a:	ee 0f       	add	r30, r30
    373c:	ff 1f       	adc	r31, r31
    373e:	ee 0f       	add	r30, r30
    3740:	ff 1f       	adc	r31, r31
    3742:	e8 5d       	subi	r30, 0xD8	; 216
    3744:	fd 4f       	sbci	r31, 0xFD	; 253
    3746:	60 81       	ld	r22, Z
    3748:	71 81       	ldd	r23, Z+1	; 0x01
    374a:	82 81       	ldd	r24, Z+2	; 0x02
    374c:	93 81       	ldd	r25, Z+3	; 0x03
    374e:	e0 91 02 01 	lds	r30, 0x0102
    3752:	f0 91 03 01 	lds	r31, 0x0103
    3756:	ee 0f       	add	r30, r30
    3758:	ff 1f       	adc	r31, r31
    375a:	ee 0f       	add	r30, r30
    375c:	ff 1f       	adc	r31, r31
    375e:	e8 5d       	subi	r30, 0xD8	; 216
    3760:	fd 4f       	sbci	r31, 0xFD	; 253
    3762:	20 81       	ld	r18, Z
    3764:	31 81       	ldd	r19, Z+1	; 0x01
    3766:	42 81       	ldd	r20, Z+2	; 0x02
    3768:	53 81       	ldd	r21, Z+3	; 0x03
    376a:	cc a0       	ldd	r12, Y+36	; 0x24
    376c:	dd a0       	ldd	r13, Y+37	; 0x25
    376e:	ee a0       	ldd	r14, Y+38	; 0x26
    3770:	ff a0       	ldd	r15, Y+39	; 0x27
    3772:	0e 94 88 38 	call	0x7110	; 0x7110 <__subsf3>
    3776:	a7 01       	movw	r20, r14
    3778:	96 01       	movw	r18, r12
    377a:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <__mulsf3>
    377e:	68 8b       	std	Y+16, r22	; 0x10
    3780:	79 8b       	std	Y+17, r23	; 0x11
    3782:	8a 8b       	std	Y+18, r24	; 0x12
    3784:	9b 8b       	std	Y+19, r25	; 0x13
	
	ch->Control_PID = ch->P_err + ch->I_err + ch->D_err;
    3786:	68 85       	ldd	r22, Y+8	; 0x08
    3788:	79 85       	ldd	r23, Y+9	; 0x09
    378a:	8a 85       	ldd	r24, Y+10	; 0x0a
    378c:	9b 85       	ldd	r25, Y+11	; 0x0b
    378e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3790:	3d 85       	ldd	r19, Y+13	; 0x0d
    3792:	4e 85       	ldd	r20, Y+14	; 0x0e
    3794:	5f 85       	ldd	r21, Y+15	; 0x0f
    3796:	c8 88       	ldd	r12, Y+16	; 0x10
    3798:	d9 88       	ldd	r13, Y+17	; 0x11
    379a:	ea 88       	ldd	r14, Y+18	; 0x12
    379c:	fb 88       	ldd	r15, Y+19	; 0x13
    379e:	0e 94 89 38 	call	0x7112	; 0x7112 <__addsf3>
    37a2:	a7 01       	movw	r20, r14
    37a4:	96 01       	movw	r18, r12
    37a6:	0e 94 89 38 	call	0x7112	; 0x7112 <__addsf3>
    37aa:	68 8f       	std	Y+24, r22	; 0x18
    37ac:	79 8f       	std	Y+25, r23	; 0x19
    37ae:	8a 8f       	std	Y+26, r24	; 0x1a
    37b0:	9b 8f       	std	Y+27, r25	; 0x1b
	ch->Control = ch->Control_PID; // + ch->TempSetPoint * (float)0.21 - 5;
    37b2:	88 8d       	ldd	r24, Y+24	; 0x18
    37b4:	99 8d       	ldd	r25, Y+25	; 0x19
    37b6:	aa 8d       	ldd	r26, Y+26	; 0x1a
    37b8:	bb 8d       	ldd	r27, Y+27	; 0x1b
    37ba:	8c 8b       	std	Y+20, r24	; 0x14
    37bc:	9d 8b       	std	Y+21, r25	; 0x15
    37be:	ae 8b       	std	Y+22, r26	; 0x16
    37c0:	bf 8b       	std	Y+23, r27	; 0x17
	ch->pwm = (round(ch->Control));
    37c2:	6c 89       	ldd	r22, Y+20	; 0x14
    37c4:	7d 89       	ldd	r23, Y+21	; 0x15
    37c6:	8e 89       	ldd	r24, Y+22	; 0x16
    37c8:	9f 89       	ldd	r25, Y+23	; 0x17
    37ca:	0e 94 3b 3a 	call	0x7476	; 0x7476 <round>
    37ce:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <__fixsfsi>
    37d2:	70 93 61 02 	sts	0x0261, r23
    37d6:	60 93 60 02 	sts	0x0260, r22
	
	if(fabs(ch->TempError[CtrlErrorIdx]) > integralErrorActiveWindow)
    37da:	e0 91 29 03 	lds	r30, 0x0329
    37de:	f0 91 2a 03 	lds	r31, 0x032A
    37e2:	ee 0f       	add	r30, r30
    37e4:	ff 1f       	adc	r31, r31
    37e6:	ee 0f       	add	r30, r30
    37e8:	ff 1f       	adc	r31, r31
    37ea:	e8 5d       	subi	r30, 0xD8	; 216
    37ec:	fd 4f       	sbci	r31, 0xFD	; 253
    37ee:	80 81       	ld	r24, Z
    37f0:	91 81       	ldd	r25, Z+1	; 0x01
    37f2:	a2 81       	ldd	r26, Z+2	; 0x02
    37f4:	b3 81       	ldd	r27, Z+3	; 0x03
    37f6:	bc 01       	movw	r22, r24
    37f8:	cd 01       	movw	r24, r26
    37fa:	9f 77       	andi	r25, 0x7F	; 127
    37fc:	20 e0       	ldi	r18, 0x00	; 0
    37fe:	30 e0       	ldi	r19, 0x00	; 0
    3800:	40 ea       	ldi	r20, 0xA0	; 160
    3802:	50 e4       	ldi	r21, 0x40	; 64
    3804:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <__gesf2>
    3808:	18 16       	cp	r1, r24
    380a:	44 f4       	brge	.+16     	; 0x381c <__vector_7+0x914>
	{
		ch->I_err = 0;														// Avoid integral wind-up
    380c:	10 92 0c 02 	sts	0x020C, r1
    3810:	10 92 0d 02 	sts	0x020D, r1
    3814:	10 92 0e 02 	sts	0x020E, r1
    3818:	10 92 0f 02 	sts	0x020F, r1
	}
	
	if(fabs(ch->TempError[CtrlErrorIdx]) <= ch->tempErrorWin)				// Temperature settle window
    381c:	e0 91 29 03 	lds	r30, 0x0329
    3820:	f0 91 2a 03 	lds	r31, 0x032A
    3824:	ee 0f       	add	r30, r30
    3826:	ff 1f       	adc	r31, r31
    3828:	ee 0f       	add	r30, r30
    382a:	ff 1f       	adc	r31, r31
    382c:	e8 5d       	subi	r30, 0xD8	; 216
    382e:	fd 4f       	sbci	r31, 0xFD	; 253
    3830:	80 81       	ld	r24, Z
    3832:	91 81       	ldd	r25, Z+1	; 0x01
    3834:	a2 81       	ldd	r26, Z+2	; 0x02
    3836:	b3 81       	ldd	r27, Z+3	; 0x03
    3838:	20 91 54 02 	lds	r18, 0x0254
    383c:	30 91 55 02 	lds	r19, 0x0255
    3840:	40 91 56 02 	lds	r20, 0x0256
    3844:	50 91 57 02 	lds	r21, 0x0257
    3848:	bc 01       	movw	r22, r24
    384a:	cd 01       	movw	r24, r26
    384c:	9f 77       	andi	r25, 0x7F	; 127
    384e:	0e 94 ed 38 	call	0x71da	; 0x71da <__cmpsf2>
    3852:	18 16       	cp	r1, r24
    3854:	14 f1       	brlt	.+68     	; 0x389a <__vector_7+0x992>
	{
		ch->tempSettleCnt ++;
    3856:	e8 e5       	ldi	r30, 0x58	; 88
    3858:	f2 e0       	ldi	r31, 0x02	; 2
    385a:	80 81       	ld	r24, Z
    385c:	91 81       	ldd	r25, Z+1	; 0x01
    385e:	01 96       	adiw	r24, 0x01	; 1
    3860:	91 83       	std	Z+1, r25	; 0x01
    3862:	80 83       	st	Z, r24
		if(ch->tempSettleCnt >= (int)(ch->tempSettleTime * 61))
    3864:	20 81       	ld	r18, Z
    3866:	31 81       	ldd	r19, Z+1	; 0x01
    3868:	40 91 5a 02 	lds	r20, 0x025A
    386c:	50 91 5b 02 	lds	r21, 0x025B
    3870:	6d e3       	ldi	r22, 0x3D	; 61
    3872:	64 9f       	mul	r22, r20
    3874:	c0 01       	movw	r24, r0
    3876:	65 9f       	mul	r22, r21
    3878:	90 0d       	add	r25, r0
    387a:	11 24       	eor	r1, r1
    387c:	28 17       	cp	r18, r24
    387e:	39 07       	cpc	r19, r25
    3880:	a4 f0       	brlt	.+40     	; 0x38aa <__vector_7+0x9a2>
		{
			ch->tempStable = 1;
    3882:	81 e0       	ldi	r24, 0x01	; 1
    3884:	90 e0       	ldi	r25, 0x00	; 0
    3886:	90 93 5d 02 	sts	0x025D, r25
    388a:	80 93 5c 02 	sts	0x025C, r24
			ch->tempSettleCnt --;
    388e:	80 81       	ld	r24, Z
    3890:	91 81       	ldd	r25, Z+1	; 0x01
    3892:	01 97       	sbiw	r24, 0x01	; 1
    3894:	91 83       	std	Z+1, r25	; 0x01
    3896:	80 83       	st	Z, r24
    3898:	08 c0       	rjmp	.+16     	; 0x38aa <__vector_7+0x9a2>
		}			
	}
	else
	{
		ch->tempSettleCnt = 0;
    389a:	10 92 59 02 	sts	0x0259, r1
    389e:	10 92 58 02 	sts	0x0258, r1
		ch->tempStable = 0;
    38a2:	10 92 5d 02 	sts	0x025D, r1
    38a6:	10 92 5c 02 	sts	0x025C, r1
		case 3:
		PORTD &= 0b10111111;	// Set CS3 low
		break;
						
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
    38aa:	5f 98       	cbi	0x0b, 7	; 11
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
    38ac:	81 e0       	ldi	r24, 0x01	; 1
    38ae:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    38b0:	0d b4       	in	r0, 0x2d	; 45
    38b2:	07 fe       	sbrs	r0, 7
    38b4:	fd cf       	rjmp	.-6      	; 0x38b0 <__vector_7+0x9a8>
	byteword=SPDR;				//just for clearing SPIF
    38b6:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
    38b8:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    38ba:	0d b4       	in	r0, 0x2d	; 45
    38bc:	07 fe       	sbrs	r0, 7
    38be:	fd cf       	rjmp	.-6      	; 0x38ba <__vector_7+0x9b2>
	byteword=SPDR;
    38c0:	9e b5       	in	r25, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
    38c2:	8b b1       	in	r24, 0x0b	; 11
    38c4:	80 6f       	ori	r24, 0xF0	; 240
    38c6:	8b b9       	out	0x0b, r24	; 11
		case 3:
		PORTD &= 0b10111111;	// Set CS3 low
		break;
						
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
    38c8:	5f 98       	cbi	0x0b, 7	; 11
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
    38ca:	82 e0       	ldi	r24, 0x02	; 2
    38cc:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    38ce:	0d b4       	in	r0, 0x2d	; 45
    38d0:	07 fe       	sbrs	r0, 7
    38d2:	fd cf       	rjmp	.-6      	; 0x38ce <__vector_7+0x9c6>
	byteword=SPDR;				//just for clearing SPIF
    38d4:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
    38d6:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    38d8:	0d b4       	in	r0, 0x2d	; 45
    38da:	07 fe       	sbrs	r0, 7
    38dc:	fd cf       	rjmp	.-6      	; 0x38d8 <__vector_7+0x9d0>
	byteword=SPDR;
    38de:	6e b5       	in	r22, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
    38e0:	8b b1       	in	r24, 0x0b	; 11
    38e2:	80 6f       	ori	r24, 0xF0	; 240
    38e4:	8b b9       	out	0x0b, r24	; 11
	uint8_t u8_msb = 0;
	uint8_t u8_lsb = 0;
	
	u8_msb = SPIread(0x01, ch);
	u8_lsb = SPIread(0x02, ch);
	adc_code = (((u8_msb << 8) | u8_lsb) >> 1);
    38e6:	70 e0       	ldi	r23, 0x00	; 0
    38e8:	79 2b       	or	r23, r25
    38ea:	75 95       	asr	r23
    38ec:	67 95       	ror	r22
	return ((float)adc_code / 32.0 - 256.0);
    38ee:	07 2e       	mov	r0, r23
    38f0:	00 0c       	add	r0, r0
    38f2:	88 0b       	sbc	r24, r24
    38f4:	99 0b       	sbc	r25, r25
    38f6:	0e 94 24 39 	call	0x7248	; 0x7248 <__floatsisf>
    38fa:	20 e0       	ldi	r18, 0x00	; 0
    38fc:	30 e0       	ldi	r19, 0x00	; 0
    38fe:	40 e0       	ldi	r20, 0x00	; 0
    3900:	5d e3       	ldi	r21, 0x3D	; 61
    3902:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <__mulsf3>
    3906:	20 e0       	ldi	r18, 0x00	; 0
    3908:	30 e0       	ldi	r19, 0x00	; 0
    390a:	40 e8       	ldi	r20, 0x80	; 128
    390c:	53 e4       	ldi	r21, 0x43	; 67
    390e:	0e 94 88 38 	call	0x7110	; 0x7110 <__subsf3>
	PORTD &= 0b11110111;						// Turn off LED on PCB (Irq call freq: 16MHz / 1024 / 255 = 61.3 Hz )
}

static inline void PIDctrl(channel *ch, int tempSensor)
{
	ch->TempSensor = ReadTempSensor(tempSensor);
    3912:	ed e9       	ldi	r30, 0x9D	; 157
    3914:	f1 e0       	ldi	r31, 0x01	; 1
    3916:	64 83       	std	Z+4, r22	; 0x04
    3918:	75 83       	std	Z+5, r23	; 0x05
    391a:	86 83       	std	Z+6, r24	; 0x06
    391c:	97 83       	std	Z+7, r25	; 0x07
	if(ch->TempSensor > (float)maxAllowedTemp)								// Max temperature limit
    391e:	64 81       	ldd	r22, Z+4	; 0x04
    3920:	75 81       	ldd	r23, Z+5	; 0x05
    3922:	86 81       	ldd	r24, Z+6	; 0x06
    3924:	97 81       	ldd	r25, Z+7	; 0x07
    3926:	20 e0       	ldi	r18, 0x00	; 0
    3928:	30 e0       	ldi	r19, 0x00	; 0
    392a:	40 ef       	ldi	r20, 0xF0	; 240
    392c:	52 e4       	ldi	r21, 0x42	; 66
    392e:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <__gesf2>
    3932:	18 16       	cp	r1, r24
    3934:	2c f4       	brge	.+10     	; 0x3940 <__vector_7+0xa38>
	{
		ch->heaterEnable = false;
    3936:	10 92 ff 01 	sts	0x01FF, r1
		PORTC &= allHeaterOff;
    393a:	88 b1       	in	r24, 0x08	; 8
    393c:	80 7f       	andi	r24, 0xF0	; 240
    393e:	88 b9       	out	0x08, r24	; 8
	}

	ch->TempError[CtrlErrorIdx] = ch->TempSetPoint - ch->TempSensor;		// Control error
    3940:	00 91 29 03 	lds	r16, 0x0329
    3944:	10 91 2a 03 	lds	r17, 0x032A
    3948:	cd e9       	ldi	r28, 0x9D	; 157
    394a:	d1 e0       	ldi	r29, 0x01	; 1
    394c:	68 81       	ld	r22, Y
    394e:	79 81       	ldd	r23, Y+1	; 0x01
    3950:	8a 81       	ldd	r24, Y+2	; 0x02
    3952:	9b 81       	ldd	r25, Y+3	; 0x03
    3954:	2c 81       	ldd	r18, Y+4	; 0x04
    3956:	3d 81       	ldd	r19, Y+5	; 0x05
    3958:	4e 81       	ldd	r20, Y+6	; 0x06
    395a:	5f 81       	ldd	r21, Y+7	; 0x07
    395c:	0e 94 88 38 	call	0x7110	; 0x7110 <__subsf3>
    3960:	00 0f       	add	r16, r16
    3962:	11 1f       	adc	r17, r17
    3964:	00 0f       	add	r16, r16
    3966:	11 1f       	adc	r17, r17
    3968:	f8 01       	movw	r30, r16
    396a:	eb 53       	subi	r30, 0x3B	; 59
    396c:	fe 4f       	sbci	r31, 0xFE	; 254
    396e:	60 83       	st	Z, r22
    3970:	71 83       	std	Z+1, r23	; 0x01
    3972:	82 83       	std	Z+2, r24	; 0x02
    3974:	93 83       	std	Z+3, r25	; 0x03
	
	ch->P_err = ch->TempError[CtrlErrorIdx] * ch->Pgain;					// P error
    3976:	e0 91 29 03 	lds	r30, 0x0329
    397a:	f0 91 2a 03 	lds	r31, 0x032A
    397e:	ee 0f       	add	r30, r30
    3980:	ff 1f       	adc	r31, r31
    3982:	ee 0f       	add	r30, r30
    3984:	ff 1f       	adc	r31, r31
    3986:	eb 53       	subi	r30, 0x3B	; 59
    3988:	fe 4f       	sbci	r31, 0xFE	; 254
    398a:	60 81       	ld	r22, Z
    398c:	71 81       	ldd	r23, Z+1	; 0x01
    398e:	82 81       	ldd	r24, Z+2	; 0x02
    3990:	93 81       	ldd	r25, Z+3	; 0x03
    3992:	2c 8d       	ldd	r18, Y+28	; 0x1c
    3994:	3d 8d       	ldd	r19, Y+29	; 0x1d
    3996:	4e 8d       	ldd	r20, Y+30	; 0x1e
    3998:	5f 8d       	ldd	r21, Y+31	; 0x1f
    399a:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <__mulsf3>
    399e:	68 87       	std	Y+8, r22	; 0x08
    39a0:	79 87       	std	Y+9, r23	; 0x09
    39a2:	8a 87       	std	Y+10, r24	; 0x0a
    39a4:	9b 87       	std	Y+11, r25	; 0x0b
	ch->I_err = ch->I_err + (ch->TempError[CtrlErrorIdx] * ch->Igain);		// I error
    39a6:	cc 84       	ldd	r12, Y+12	; 0x0c
    39a8:	dd 84       	ldd	r13, Y+13	; 0x0d
    39aa:	ee 84       	ldd	r14, Y+14	; 0x0e
    39ac:	ff 84       	ldd	r15, Y+15	; 0x0f
    39ae:	e0 91 29 03 	lds	r30, 0x0329
    39b2:	f0 91 2a 03 	lds	r31, 0x032A
    39b6:	ee 0f       	add	r30, r30
    39b8:	ff 1f       	adc	r31, r31
    39ba:	ee 0f       	add	r30, r30
    39bc:	ff 1f       	adc	r31, r31
    39be:	eb 53       	subi	r30, 0x3B	; 59
    39c0:	fe 4f       	sbci	r31, 0xFE	; 254
    39c2:	60 81       	ld	r22, Z
    39c4:	71 81       	ldd	r23, Z+1	; 0x01
    39c6:	82 81       	ldd	r24, Z+2	; 0x02
    39c8:	93 81       	ldd	r25, Z+3	; 0x03
    39ca:	28 a1       	ldd	r18, Y+32	; 0x20
    39cc:	39 a1       	ldd	r19, Y+33	; 0x21
    39ce:	4a a1       	ldd	r20, Y+34	; 0x22
    39d0:	5b a1       	ldd	r21, Y+35	; 0x23
    39d2:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <__mulsf3>
    39d6:	9b 01       	movw	r18, r22
    39d8:	ac 01       	movw	r20, r24
    39da:	c7 01       	movw	r24, r14
    39dc:	b6 01       	movw	r22, r12
    39de:	0e 94 89 38 	call	0x7112	; 0x7112 <__addsf3>
    39e2:	6c 87       	std	Y+12, r22	; 0x0c
    39e4:	7d 87       	std	Y+13, r23	; 0x0d
    39e6:	8e 87       	std	Y+14, r24	; 0x0e
    39e8:	9f 87       	std	Y+15, r25	; 0x0f
	if(ch->I_err > integralErrorLimit)
    39ea:	6c 85       	ldd	r22, Y+12	; 0x0c
    39ec:	7d 85       	ldd	r23, Y+13	; 0x0d
    39ee:	8e 85       	ldd	r24, Y+14	; 0x0e
    39f0:	9f 85       	ldd	r25, Y+15	; 0x0f
    39f2:	20 e0       	ldi	r18, 0x00	; 0
    39f4:	30 e0       	ldi	r19, 0x00	; 0
    39f6:	40 e2       	ldi	r20, 0x20	; 32
    39f8:	51 e4       	ldi	r21, 0x41	; 65
    39fa:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <__gesf2>
    39fe:	18 16       	cp	r1, r24
    3a00:	64 f4       	brge	.+24     	; 0x3a1a <__vector_7+0xb12>
	{
		ch->I_err = integralErrorLimit;
    3a02:	80 e0       	ldi	r24, 0x00	; 0
    3a04:	90 e0       	ldi	r25, 0x00	; 0
    3a06:	a0 e2       	ldi	r26, 0x20	; 32
    3a08:	b1 e4       	ldi	r27, 0x41	; 65
    3a0a:	80 93 a9 01 	sts	0x01A9, r24
    3a0e:	90 93 aa 01 	sts	0x01AA, r25
    3a12:	a0 93 ab 01 	sts	0x01AB, r26
    3a16:	b0 93 ac 01 	sts	0x01AC, r27
	}
	if(ch->I_err < -integralErrorLimit)
    3a1a:	60 91 a9 01 	lds	r22, 0x01A9
    3a1e:	70 91 aa 01 	lds	r23, 0x01AA
    3a22:	80 91 ab 01 	lds	r24, 0x01AB
    3a26:	90 91 ac 01 	lds	r25, 0x01AC
    3a2a:	20 e0       	ldi	r18, 0x00	; 0
    3a2c:	30 e0       	ldi	r19, 0x00	; 0
    3a2e:	40 e2       	ldi	r20, 0x20	; 32
    3a30:	51 ec       	ldi	r21, 0xC1	; 193
    3a32:	0e 94 ed 38 	call	0x71da	; 0x71da <__cmpsf2>
    3a36:	88 23       	and	r24, r24
    3a38:	64 f4       	brge	.+24     	; 0x3a52 <__vector_7+0xb4a>
	{
		ch->I_err = -integralErrorLimit;
    3a3a:	80 e0       	ldi	r24, 0x00	; 0
    3a3c:	90 e0       	ldi	r25, 0x00	; 0
    3a3e:	a0 e2       	ldi	r26, 0x20	; 32
    3a40:	b1 ec       	ldi	r27, 0xC1	; 193
    3a42:	80 93 a9 01 	sts	0x01A9, r24
    3a46:	90 93 aa 01 	sts	0x01AA, r25
    3a4a:	a0 93 ab 01 	sts	0x01AB, r26
    3a4e:	b0 93 ac 01 	sts	0x01AC, r27
	}
	
	ch->D_err = (ch->TempError[CtrlErrorIdx] - ch->TempError[CtrlErrorHistIdx]) * ch->Dgain; // D error
    3a52:	e0 91 29 03 	lds	r30, 0x0329
    3a56:	f0 91 2a 03 	lds	r31, 0x032A
    3a5a:	cd e9       	ldi	r28, 0x9D	; 157
    3a5c:	d1 e0       	ldi	r29, 0x01	; 1
    3a5e:	ee 0f       	add	r30, r30
    3a60:	ff 1f       	adc	r31, r31
    3a62:	ee 0f       	add	r30, r30
    3a64:	ff 1f       	adc	r31, r31
    3a66:	eb 53       	subi	r30, 0x3B	; 59
    3a68:	fe 4f       	sbci	r31, 0xFE	; 254
    3a6a:	60 81       	ld	r22, Z
    3a6c:	71 81       	ldd	r23, Z+1	; 0x01
    3a6e:	82 81       	ldd	r24, Z+2	; 0x02
    3a70:	93 81       	ldd	r25, Z+3	; 0x03
    3a72:	e0 91 02 01 	lds	r30, 0x0102
    3a76:	f0 91 03 01 	lds	r31, 0x0103
    3a7a:	ee 0f       	add	r30, r30
    3a7c:	ff 1f       	adc	r31, r31
    3a7e:	ee 0f       	add	r30, r30
    3a80:	ff 1f       	adc	r31, r31
    3a82:	eb 53       	subi	r30, 0x3B	; 59
    3a84:	fe 4f       	sbci	r31, 0xFE	; 254
    3a86:	20 81       	ld	r18, Z
    3a88:	31 81       	ldd	r19, Z+1	; 0x01
    3a8a:	42 81       	ldd	r20, Z+2	; 0x02
    3a8c:	53 81       	ldd	r21, Z+3	; 0x03
    3a8e:	cc a0       	ldd	r12, Y+36	; 0x24
    3a90:	dd a0       	ldd	r13, Y+37	; 0x25
    3a92:	ee a0       	ldd	r14, Y+38	; 0x26
    3a94:	ff a0       	ldd	r15, Y+39	; 0x27
    3a96:	0e 94 88 38 	call	0x7110	; 0x7110 <__subsf3>
    3a9a:	a7 01       	movw	r20, r14
    3a9c:	96 01       	movw	r18, r12
    3a9e:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <__mulsf3>
    3aa2:	68 8b       	std	Y+16, r22	; 0x10
    3aa4:	79 8b       	std	Y+17, r23	; 0x11
    3aa6:	8a 8b       	std	Y+18, r24	; 0x12
    3aa8:	9b 8b       	std	Y+19, r25	; 0x13
	
	ch->Control_PID = ch->P_err + ch->I_err + ch->D_err;
    3aaa:	68 85       	ldd	r22, Y+8	; 0x08
    3aac:	79 85       	ldd	r23, Y+9	; 0x09
    3aae:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ab0:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ab2:	2c 85       	ldd	r18, Y+12	; 0x0c
    3ab4:	3d 85       	ldd	r19, Y+13	; 0x0d
    3ab6:	4e 85       	ldd	r20, Y+14	; 0x0e
    3ab8:	5f 85       	ldd	r21, Y+15	; 0x0f
    3aba:	c8 88       	ldd	r12, Y+16	; 0x10
    3abc:	d9 88       	ldd	r13, Y+17	; 0x11
    3abe:	ea 88       	ldd	r14, Y+18	; 0x12
    3ac0:	fb 88       	ldd	r15, Y+19	; 0x13
    3ac2:	0e 94 89 38 	call	0x7112	; 0x7112 <__addsf3>
    3ac6:	a7 01       	movw	r20, r14
    3ac8:	96 01       	movw	r18, r12
    3aca:	0e 94 89 38 	call	0x7112	; 0x7112 <__addsf3>
    3ace:	68 8f       	std	Y+24, r22	; 0x18
    3ad0:	79 8f       	std	Y+25, r23	; 0x19
    3ad2:	8a 8f       	std	Y+26, r24	; 0x1a
    3ad4:	9b 8f       	std	Y+27, r25	; 0x1b
	ch->Control = ch->Control_PID; // + ch->TempSetPoint * (float)0.21 - 5;
    3ad6:	88 8d       	ldd	r24, Y+24	; 0x18
    3ad8:	99 8d       	ldd	r25, Y+25	; 0x19
    3ada:	aa 8d       	ldd	r26, Y+26	; 0x1a
    3adc:	bb 8d       	ldd	r27, Y+27	; 0x1b
    3ade:	8c 8b       	std	Y+20, r24	; 0x14
    3ae0:	9d 8b       	std	Y+21, r25	; 0x15
    3ae2:	ae 8b       	std	Y+22, r26	; 0x16
    3ae4:	bf 8b       	std	Y+23, r27	; 0x17
	ch->pwm = (round(ch->Control));
    3ae6:	6c 89       	ldd	r22, Y+20	; 0x14
    3ae8:	7d 89       	ldd	r23, Y+21	; 0x15
    3aea:	8e 89       	ldd	r24, Y+22	; 0x16
    3aec:	9f 89       	ldd	r25, Y+23	; 0x17
    3aee:	0e 94 3b 3a 	call	0x7476	; 0x7476 <round>
    3af2:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <__fixsfsi>
    3af6:	70 93 fe 01 	sts	0x01FE, r23
    3afa:	60 93 fd 01 	sts	0x01FD, r22
	
	if(fabs(ch->TempError[CtrlErrorIdx]) > integralErrorActiveWindow)
    3afe:	e0 91 29 03 	lds	r30, 0x0329
    3b02:	f0 91 2a 03 	lds	r31, 0x032A
    3b06:	ee 0f       	add	r30, r30
    3b08:	ff 1f       	adc	r31, r31
    3b0a:	ee 0f       	add	r30, r30
    3b0c:	ff 1f       	adc	r31, r31
    3b0e:	eb 53       	subi	r30, 0x3B	; 59
    3b10:	fe 4f       	sbci	r31, 0xFE	; 254
    3b12:	80 81       	ld	r24, Z
    3b14:	91 81       	ldd	r25, Z+1	; 0x01
    3b16:	a2 81       	ldd	r26, Z+2	; 0x02
    3b18:	b3 81       	ldd	r27, Z+3	; 0x03
    3b1a:	bc 01       	movw	r22, r24
    3b1c:	cd 01       	movw	r24, r26
    3b1e:	9f 77       	andi	r25, 0x7F	; 127
    3b20:	20 e0       	ldi	r18, 0x00	; 0
    3b22:	30 e0       	ldi	r19, 0x00	; 0
    3b24:	40 ea       	ldi	r20, 0xA0	; 160
    3b26:	50 e4       	ldi	r21, 0x40	; 64
    3b28:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <__gesf2>
    3b2c:	18 16       	cp	r1, r24
    3b2e:	44 f4       	brge	.+16     	; 0x3b40 <__vector_7+0xc38>
	{
		ch->I_err = 0;														// Avoid integral wind-up
    3b30:	10 92 a9 01 	sts	0x01A9, r1
    3b34:	10 92 aa 01 	sts	0x01AA, r1
    3b38:	10 92 ab 01 	sts	0x01AB, r1
    3b3c:	10 92 ac 01 	sts	0x01AC, r1
	}
	
	if(fabs(ch->TempError[CtrlErrorIdx]) <= ch->tempErrorWin)				// Temperature settle window
    3b40:	e0 91 29 03 	lds	r30, 0x0329
    3b44:	f0 91 2a 03 	lds	r31, 0x032A
    3b48:	ee 0f       	add	r30, r30
    3b4a:	ff 1f       	adc	r31, r31
    3b4c:	ee 0f       	add	r30, r30
    3b4e:	ff 1f       	adc	r31, r31
    3b50:	eb 53       	subi	r30, 0x3B	; 59
    3b52:	fe 4f       	sbci	r31, 0xFE	; 254
    3b54:	80 81       	ld	r24, Z
    3b56:	91 81       	ldd	r25, Z+1	; 0x01
    3b58:	a2 81       	ldd	r26, Z+2	; 0x02
    3b5a:	b3 81       	ldd	r27, Z+3	; 0x03
    3b5c:	20 91 f1 01 	lds	r18, 0x01F1
    3b60:	30 91 f2 01 	lds	r19, 0x01F2
    3b64:	40 91 f3 01 	lds	r20, 0x01F3
    3b68:	50 91 f4 01 	lds	r21, 0x01F4
    3b6c:	bc 01       	movw	r22, r24
    3b6e:	cd 01       	movw	r24, r26
    3b70:	9f 77       	andi	r25, 0x7F	; 127
    3b72:	0e 94 ed 38 	call	0x71da	; 0x71da <__cmpsf2>
    3b76:	18 16       	cp	r1, r24
    3b78:	14 f1       	brlt	.+68     	; 0x3bbe <__vector_7+0xcb6>
	{
		ch->tempSettleCnt ++;
    3b7a:	e5 ef       	ldi	r30, 0xF5	; 245
    3b7c:	f1 e0       	ldi	r31, 0x01	; 1
    3b7e:	80 81       	ld	r24, Z
    3b80:	91 81       	ldd	r25, Z+1	; 0x01
    3b82:	01 96       	adiw	r24, 0x01	; 1
    3b84:	91 83       	std	Z+1, r25	; 0x01
    3b86:	80 83       	st	Z, r24
		if(ch->tempSettleCnt >= (int)(ch->tempSettleTime * 61))
    3b88:	20 81       	ld	r18, Z
    3b8a:	31 81       	ldd	r19, Z+1	; 0x01
    3b8c:	40 91 f7 01 	lds	r20, 0x01F7
    3b90:	50 91 f8 01 	lds	r21, 0x01F8
    3b94:	6d e3       	ldi	r22, 0x3D	; 61
    3b96:	64 9f       	mul	r22, r20
    3b98:	c0 01       	movw	r24, r0
    3b9a:	65 9f       	mul	r22, r21
    3b9c:	90 0d       	add	r25, r0
    3b9e:	11 24       	eor	r1, r1
    3ba0:	28 17       	cp	r18, r24
    3ba2:	39 07       	cpc	r19, r25
    3ba4:	a4 f0       	brlt	.+40     	; 0x3bce <__vector_7+0xcc6>
		{
			ch->tempStable = 1;
    3ba6:	81 e0       	ldi	r24, 0x01	; 1
    3ba8:	90 e0       	ldi	r25, 0x00	; 0
    3baa:	90 93 fa 01 	sts	0x01FA, r25
    3bae:	80 93 f9 01 	sts	0x01F9, r24
			ch->tempSettleCnt --;
    3bb2:	80 81       	ld	r24, Z
    3bb4:	91 81       	ldd	r25, Z+1	; 0x01
    3bb6:	01 97       	sbiw	r24, 0x01	; 1
    3bb8:	91 83       	std	Z+1, r25	; 0x01
    3bba:	80 83       	st	Z, r24
    3bbc:	08 c0       	rjmp	.+16     	; 0x3bce <__vector_7+0xcc6>
		}			
	}
	else
	{
		ch->tempSettleCnt = 0;
    3bbe:	10 92 f6 01 	sts	0x01F6, r1
    3bc2:	10 92 f5 01 	sts	0x01F5, r1
		ch->tempStable = 0;
    3bc6:	10 92 fa 01 	sts	0x01FA, r1
    3bca:	10 92 f9 01 	sts	0x01F9, r1
	PIDctrl(&ch0, 1);
	PIDctrl(&ch1, 2);
	PIDctrl(&ch2, 3);
	PIDctrl(&ch3, 4);

	CtrlErrorIdx ++;							// Control error ring buffer index
    3bce:	80 91 29 03 	lds	r24, 0x0329
    3bd2:	90 91 2a 03 	lds	r25, 0x032A
    3bd6:	01 96       	adiw	r24, 0x01	; 1
    3bd8:	90 93 2a 03 	sts	0x032A, r25
    3bdc:	80 93 29 03 	sts	0x0329, r24
	if(CtrlErrorIdx > errorHistory)
    3be0:	80 91 29 03 	lds	r24, 0x0329
    3be4:	90 91 2a 03 	lds	r25, 0x032A
    3be8:	0b 97       	sbiw	r24, 0x0b	; 11
    3bea:	24 f0       	brlt	.+8      	; 0x3bf4 <__vector_7+0xcec>
	{
		CtrlErrorIdx = 0;
    3bec:	10 92 2a 03 	sts	0x032A, r1
    3bf0:	10 92 29 03 	sts	0x0329, r1
	}
	CtrlErrorHistIdx = CtrlErrorIdx + 1;
    3bf4:	80 91 29 03 	lds	r24, 0x0329
    3bf8:	90 91 2a 03 	lds	r25, 0x032A
    3bfc:	01 96       	adiw	r24, 0x01	; 1
    3bfe:	90 93 03 01 	sts	0x0103, r25
    3c02:	80 93 02 01 	sts	0x0102, r24
	if(CtrlErrorHistIdx > errorHistory)
    3c06:	80 91 02 01 	lds	r24, 0x0102
    3c0a:	90 91 03 01 	lds	r25, 0x0103
    3c0e:	0b 97       	sbiw	r24, 0x0b	; 11
    3c10:	24 f0       	brlt	.+8      	; 0x3c1a <__vector_7+0xd12>
	{
		CtrlErrorHistIdx = 0;
    3c12:	10 92 03 01 	sts	0x0103, r1
    3c16:	10 92 02 01 	sts	0x0102, r1
	}		

	PORTD &= 0b11110111;						// Turn off LED on PCB (Irq call freq: 16MHz / 1024 / 255 = 61.3 Hz )
    3c1a:	5b 98       	cbi	0x0b, 3	; 11
}
    3c1c:	ff 91       	pop	r31
    3c1e:	ef 91       	pop	r30
    3c20:	df 91       	pop	r29
    3c22:	cf 91       	pop	r28
    3c24:	bf 91       	pop	r27
    3c26:	af 91       	pop	r26
    3c28:	9f 91       	pop	r25
    3c2a:	8f 91       	pop	r24
    3c2c:	7f 91       	pop	r23
    3c2e:	6f 91       	pop	r22
    3c30:	5f 91       	pop	r21
    3c32:	4f 91       	pop	r20
    3c34:	3f 91       	pop	r19
    3c36:	2f 91       	pop	r18
    3c38:	1f 91       	pop	r17
    3c3a:	0f 91       	pop	r16
    3c3c:	ff 90       	pop	r15
    3c3e:	ef 90       	pop	r14
    3c40:	df 90       	pop	r13
    3c42:	cf 90       	pop	r12
    3c44:	0f 90       	pop	r0
    3c46:	0f be       	out	0x3f, r0	; 63
    3c48:	0f 90       	pop	r0
    3c4a:	1f 90       	pop	r1
    3c4c:	18 95       	reti

00003c4e <ftoa>:
	printStatus("IntiRead: ");
	printStatus(data);
}

void ftoa(float num, char *str)
{
    3c4e:	8f 92       	push	r8
    3c50:	9f 92       	push	r9
    3c52:	af 92       	push	r10
    3c54:	bf 92       	push	r11
    3c56:	cf 92       	push	r12
    3c58:	df 92       	push	r13
    3c5a:	ef 92       	push	r14
    3c5c:	ff 92       	push	r15
    3c5e:	0f 93       	push	r16
    3c60:	1f 93       	push	r17
    3c62:	cf 93       	push	r28
    3c64:	df 93       	push	r29
    3c66:	cd b7       	in	r28, 0x3d	; 61
    3c68:	de b7       	in	r29, 0x3e	; 62
    3c6a:	64 97       	sbiw	r28, 0x14	; 20
    3c6c:	0f b6       	in	r0, 0x3f	; 63
    3c6e:	f8 94       	cli
    3c70:	de bf       	out	0x3e, r29	; 62
    3c72:	0f be       	out	0x3f, r0	; 63
    3c74:	cd bf       	out	0x3d, r28	; 61
    3c76:	4b 01       	movw	r8, r22
    3c78:	5c 01       	movw	r10, r24
    3c7a:	8a 01       	movw	r16, r20
	int intpart = num;
    3c7c:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <__fixsfsi>
    3c80:	6b 01       	movw	r12, r22
    3c82:	7c 01       	movw	r14, r24
	int i;
	float decimal_part;
	char decimal[20];
	int PRECISION = 3;						// Decimal precision

	memset(str, 0x0, 20);
    3c84:	84 e1       	ldi	r24, 0x14	; 20
    3c86:	f8 01       	movw	r30, r16
    3c88:	11 92       	st	Z+, r1
    3c8a:	8a 95       	dec	r24
    3c8c:	e9 f7       	brne	.-6      	; 0x3c88 <ftoa+0x3a>
    3c8e:	4a e0       	ldi	r20, 0x0A	; 10
    3c90:	b8 01       	movw	r22, r16
    3c92:	c6 01       	movw	r24, r12
    3c94:	0e 94 04 3b 	call	0x7608	; 0x7608 <__itoa_ncheck>
	itoa(num, str, 10);

	strcat(str, ".");
    3c98:	f8 01       	movw	r30, r16
    3c9a:	01 90       	ld	r0, Z+
    3c9c:	00 20       	and	r0, r0
    3c9e:	e9 f7       	brne	.-6      	; 0x3c9a <ftoa+0x4c>
    3ca0:	31 97       	sbiw	r30, 0x01	; 1
    3ca2:	8e e2       	ldi	r24, 0x2E	; 46
    3ca4:	90 e0       	ldi	r25, 0x00	; 0
    3ca6:	91 83       	std	Z+1, r25	; 0x01
    3ca8:	80 83       	st	Z, r24

	decimal_part = num - intpart;
    3caa:	b6 01       	movw	r22, r12
    3cac:	dd 0c       	add	r13, r13
    3cae:	88 0b       	sbc	r24, r24
    3cb0:	99 0b       	sbc	r25, r25
    3cb2:	0e 94 24 39 	call	0x7248	; 0x7248 <__floatsisf>
    3cb6:	9b 01       	movw	r18, r22
    3cb8:	ac 01       	movw	r20, r24
    3cba:	c5 01       	movw	r24, r10
    3cbc:	b4 01       	movw	r22, r8
    3cbe:	0e 94 88 38 	call	0x7110	; 0x7110 <__subsf3>
	intdecimal = decimal_part * 1000;		// If decimal precision is 3 then 1000, 2 -> 100, 1 -> 10 ...;
    3cc2:	20 e0       	ldi	r18, 0x00	; 0
    3cc4:	30 e0       	ldi	r19, 0x00	; 0
    3cc6:	4a e7       	ldi	r20, 0x7A	; 122
    3cc8:	54 e4       	ldi	r21, 0x44	; 68
    3cca:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <__mulsf3>
    3cce:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <__fixsfsi>
    3cd2:	9b 01       	movw	r18, r22
    3cd4:	77 23       	and	r23, r23
    3cd6:	24 f4       	brge	.+8      	; 0x3ce0 <ftoa+0x92>
    3cd8:	22 27       	eor	r18, r18
    3cda:	33 27       	eor	r19, r19
    3cdc:	26 1b       	sub	r18, r22
    3cde:	37 0b       	sbc	r19, r23
    3ce0:	4a e0       	ldi	r20, 0x0A	; 10
    3ce2:	be 01       	movw	r22, r28
    3ce4:	6f 5f       	subi	r22, 0xFF	; 255
    3ce6:	7f 4f       	sbci	r23, 0xFF	; 255
    3ce8:	c9 01       	movw	r24, r18
    3cea:	0e 94 04 3b 	call	0x7608	; 0x7608 <__itoa_ncheck>
	if(intdecimal < 0)
	{
		intdecimal = -intdecimal;
	}
	itoa(intdecimal, decimal, 10);
	for(i =0;i < (PRECISION - strlen(decimal));i++)
    3cee:	80 e0       	ldi	r24, 0x00	; 0
    3cf0:	90 e0       	ldi	r25, 0x00	; 0
    3cf2:	de 01       	movw	r26, r28
    3cf4:	11 96       	adiw	r26, 0x01	; 1
    3cf6:	23 e0       	ldi	r18, 0x03	; 3
    3cf8:	30 e0       	ldi	r19, 0x00	; 0
	{
		strcat(str, "0");
    3cfa:	40 e3       	ldi	r20, 0x30	; 48
    3cfc:	50 e0       	ldi	r21, 0x00	; 0
	if(intdecimal < 0)
	{
		intdecimal = -intdecimal;
	}
	itoa(intdecimal, decimal, 10);
	for(i =0;i < (PRECISION - strlen(decimal));i++)
    3cfe:	08 c0       	rjmp	.+16     	; 0x3d10 <ftoa+0xc2>
	{
		strcat(str, "0");
    3d00:	f8 01       	movw	r30, r16
    3d02:	01 90       	ld	r0, Z+
    3d04:	00 20       	and	r0, r0
    3d06:	e9 f7       	brne	.-6      	; 0x3d02 <ftoa+0xb4>
    3d08:	31 97       	sbiw	r30, 0x01	; 1
    3d0a:	51 83       	std	Z+1, r21	; 0x01
    3d0c:	40 83       	st	Z, r20
	if(intdecimal < 0)
	{
		intdecimal = -intdecimal;
	}
	itoa(intdecimal, decimal, 10);
	for(i =0;i < (PRECISION - strlen(decimal));i++)
    3d0e:	01 96       	adiw	r24, 0x01	; 1
    3d10:	fd 01       	movw	r30, r26
    3d12:	01 90       	ld	r0, Z+
    3d14:	00 20       	and	r0, r0
    3d16:	e9 f7       	brne	.-6      	; 0x3d12 <ftoa+0xc4>
    3d18:	31 97       	sbiw	r30, 0x01	; 1
    3d1a:	ea 1b       	sub	r30, r26
    3d1c:	fb 0b       	sbc	r31, r27
    3d1e:	b9 01       	movw	r22, r18
    3d20:	6e 1b       	sub	r22, r30
    3d22:	7f 0b       	sbc	r23, r31
    3d24:	86 17       	cp	r24, r22
    3d26:	97 07       	cpc	r25, r23
    3d28:	58 f3       	brcs	.-42     	; 0x3d00 <ftoa+0xb2>
	{
		strcat(str, "0");
	}
	strcat(str, decimal);
    3d2a:	be 01       	movw	r22, r28
    3d2c:	6f 5f       	subi	r22, 0xFF	; 255
    3d2e:	7f 4f       	sbci	r23, 0xFF	; 255
    3d30:	c8 01       	movw	r24, r16
    3d32:	0e 94 d0 3a 	call	0x75a0	; 0x75a0 <strcat>
}
    3d36:	64 96       	adiw	r28, 0x14	; 20
    3d38:	0f b6       	in	r0, 0x3f	; 63
    3d3a:	f8 94       	cli
    3d3c:	de bf       	out	0x3e, r29	; 62
    3d3e:	0f be       	out	0x3f, r0	; 63
    3d40:	cd bf       	out	0x3d, r28	; 61
    3d42:	df 91       	pop	r29
    3d44:	cf 91       	pop	r28
    3d46:	1f 91       	pop	r17
    3d48:	0f 91       	pop	r16
    3d4a:	ff 90       	pop	r15
    3d4c:	ef 90       	pop	r14
    3d4e:	df 90       	pop	r13
    3d50:	cf 90       	pop	r12
    3d52:	bf 90       	pop	r11
    3d54:	af 90       	pop	r10
    3d56:	9f 90       	pop	r9
    3d58:	8f 90       	pop	r8
    3d5a:	08 95       	ret

00003d5c <SendParameter>:
	}

}

static inline void SendParameter(int id)
{
    3d5c:	cf 92       	push	r12
    3d5e:	df 92       	push	r13
    3d60:	ef 92       	push	r14
    3d62:	ff 92       	push	r15
    3d64:	0f 93       	push	r16
    3d66:	1f 93       	push	r17
    3d68:	cf 93       	push	r28
    3d6a:	df 93       	push	r29
    3d6c:	cd b7       	in	r28, 0x3d	; 61
    3d6e:	de b7       	in	r29, 0x3e	; 62
    3d70:	ec 97       	sbiw	r28, 0x3c	; 60
    3d72:	0f b6       	in	r0, 0x3f	; 63
    3d74:	f8 94       	cli
    3d76:	de bf       	out	0x3e, r29	; 62
    3d78:	0f be       	out	0x3f, r0	; 63
    3d7a:	cd bf       	out	0x3d, r28	; 61
	char tx_string[20];

	switch(id)
    3d7c:	8d 32       	cpi	r24, 0x2D	; 45
    3d7e:	21 e0       	ldi	r18, 0x01	; 1
    3d80:	92 07       	cpc	r25, r18
    3d82:	11 f4       	brne	.+4      	; 0x3d88 <SendParameter+0x2c>
    3d84:	0c 94 88 27 	jmp	0x4f10	; 0x4f10 <SendParameter+0x11b4>
    3d88:	0c f0       	brlt	.+2      	; 0x3d8c <SendParameter+0x30>
    3d8a:	73 c0       	rjmp	.+230    	; 0x3e72 <SendParameter+0x116>
    3d8c:	88 3c       	cpi	r24, 0xC8	; 200
    3d8e:	91 05       	cpc	r25, r1
    3d90:	09 f4       	brne	.+2      	; 0x3d94 <SendParameter+0x38>
    3d92:	d4 c2       	rjmp	.+1448   	; 0x433c <SendParameter+0x5e0>
    3d94:	bc f5       	brge	.+110    	; 0x3e04 <SendParameter+0xa8>
    3d96:	89 36       	cpi	r24, 0x69	; 105
    3d98:	91 05       	cpc	r25, r1
    3d9a:	09 f4       	brne	.+2      	; 0x3d9e <SendParameter+0x42>
    3d9c:	61 c2       	rjmp	.+1218   	; 0x4260 <SendParameter+0x504>
    3d9e:	cc f4       	brge	.+50     	; 0x3dd2 <SendParameter+0x76>
    3da0:	86 36       	cpi	r24, 0x66	; 102
    3da2:	91 05       	cpc	r25, r1
    3da4:	09 f4       	brne	.+2      	; 0x3da8 <SendParameter+0x4c>
    3da6:	23 c1       	rjmp	.+582    	; 0x3fee <SendParameter+0x292>
    3da8:	54 f4       	brge	.+20     	; 0x3dbe <SendParameter+0x62>
    3daa:	84 36       	cpi	r24, 0x64	; 100
    3dac:	91 05       	cpc	r25, r1
    3dae:	09 f4       	brne	.+2      	; 0x3db2 <SendParameter+0x56>
    3db0:	fa c0       	rjmp	.+500    	; 0x3fa6 <SendParameter+0x24a>
    3db2:	85 36       	cpi	r24, 0x65	; 101
    3db4:	91 05       	cpc	r25, r1
    3db6:	09 f4       	brne	.+2      	; 0x3dba <SendParameter+0x5e>
    3db8:	08 c1       	rjmp	.+528    	; 0x3fca <SendParameter+0x26e>
    3dba:	0c 94 db 34 	jmp	0x69b6	; 0x69b6 <SendParameter+0x2c5a>
    3dbe:	87 36       	cpi	r24, 0x67	; 103
    3dc0:	91 05       	cpc	r25, r1
    3dc2:	09 f4       	brne	.+2      	; 0x3dc6 <SendParameter+0x6a>
    3dc4:	29 c2       	rjmp	.+1106   	; 0x4218 <SendParameter+0x4bc>
    3dc6:	88 36       	cpi	r24, 0x68	; 104
    3dc8:	91 05       	cpc	r25, r1
    3dca:	09 f4       	brne	.+2      	; 0x3dce <SendParameter+0x72>
    3dcc:	37 c2       	rjmp	.+1134   	; 0x423c <SendParameter+0x4e0>
    3dce:	0c 94 db 34 	jmp	0x69b6	; 0x69b6 <SendParameter+0x2c5a>
    3dd2:	8c 36       	cpi	r24, 0x6C	; 108
    3dd4:	91 05       	cpc	r25, r1
    3dd6:	09 f4       	brne	.+2      	; 0x3dda <SendParameter+0x7e>
    3dd8:	79 c2       	rjmp	.+1266   	; 0x42cc <SendParameter+0x570>
    3dda:	54 f4       	brge	.+20     	; 0x3df0 <SendParameter+0x94>
    3ddc:	8a 36       	cpi	r24, 0x6A	; 106
    3dde:	91 05       	cpc	r25, r1
    3de0:	09 f4       	brne	.+2      	; 0x3de4 <SendParameter+0x88>
    3de2:	50 c2       	rjmp	.+1184   	; 0x4284 <SendParameter+0x528>
    3de4:	8b 36       	cpi	r24, 0x6B	; 107
    3de6:	91 05       	cpc	r25, r1
    3de8:	09 f4       	brne	.+2      	; 0x3dec <SendParameter+0x90>
    3dea:	5e c2       	rjmp	.+1212   	; 0x42a8 <SendParameter+0x54c>
    3dec:	0c 94 db 34 	jmp	0x69b6	; 0x69b6 <SendParameter+0x2c5a>
    3df0:	8d 36       	cpi	r24, 0x6D	; 109
    3df2:	91 05       	cpc	r25, r1
    3df4:	09 f4       	brne	.+2      	; 0x3df8 <SendParameter+0x9c>
    3df6:	7c c2       	rjmp	.+1272   	; 0x42f0 <SendParameter+0x594>
    3df8:	8e 36       	cpi	r24, 0x6E	; 110
    3dfa:	91 05       	cpc	r25, r1
    3dfc:	09 f4       	brne	.+2      	; 0x3e00 <SendParameter+0xa4>
    3dfe:	88 c2       	rjmp	.+1296   	; 0x4310 <SendParameter+0x5b4>
    3e00:	0c 94 db 34 	jmp	0x69b6	; 0x69b6 <SendParameter+0x2c5a>
    3e04:	8e 3c       	cpi	r24, 0xCE	; 206
    3e06:	91 05       	cpc	r25, r1
    3e08:	09 f4       	brne	.+2      	; 0x3e0c <SendParameter+0xb0>
    3e0a:	0a c5       	rjmp	.+2580   	; 0x4820 <SendParameter+0xac4>
    3e0c:	cc f4       	brge	.+50     	; 0x3e40 <SendParameter+0xe4>
    3e0e:	8b 3c       	cpi	r24, 0xCB	; 203
    3e10:	91 05       	cpc	r25, r1
    3e12:	09 f4       	brne	.+2      	; 0x3e16 <SendParameter+0xba>
    3e14:	cc c3       	rjmp	.+1944   	; 0x45ae <SendParameter+0x852>
    3e16:	54 f4       	brge	.+20     	; 0x3e2c <SendParameter+0xd0>
    3e18:	89 3c       	cpi	r24, 0xC9	; 201
    3e1a:	91 05       	cpc	r25, r1
    3e1c:	09 f4       	brne	.+2      	; 0x3e20 <SendParameter+0xc4>
    3e1e:	a0 c2       	rjmp	.+1344   	; 0x4360 <SendParameter+0x604>
    3e20:	8a 3c       	cpi	r24, 0xCA	; 202
    3e22:	91 05       	cpc	r25, r1
    3e24:	09 f4       	brne	.+2      	; 0x3e28 <SendParameter+0xcc>
    3e26:	ae c2       	rjmp	.+1372   	; 0x4384 <SendParameter+0x628>
    3e28:	0c 94 db 34 	jmp	0x69b6	; 0x69b6 <SendParameter+0x2c5a>
    3e2c:	8c 3c       	cpi	r24, 0xCC	; 204
    3e2e:	91 05       	cpc	r25, r1
    3e30:	09 f4       	brne	.+2      	; 0x3e34 <SendParameter+0xd8>
    3e32:	cf c3       	rjmp	.+1950   	; 0x45d2 <SendParameter+0x876>
    3e34:	8d 3c       	cpi	r24, 0xCD	; 205
    3e36:	91 05       	cpc	r25, r1
    3e38:	09 f4       	brne	.+2      	; 0x3e3c <SendParameter+0xe0>
    3e3a:	dd c3       	rjmp	.+1978   	; 0x45f6 <SendParameter+0x89a>
    3e3c:	0c 94 db 34 	jmp	0x69b6	; 0x69b6 <SendParameter+0x2c5a>
    3e40:	81 3d       	cpi	r24, 0xD1	; 209
    3e42:	91 05       	cpc	r25, r1
    3e44:	09 f4       	brne	.+2      	; 0x3e48 <SendParameter+0xec>
    3e46:	25 c6       	rjmp	.+3146   	; 0x4a92 <SendParameter+0xd36>
    3e48:	54 f4       	brge	.+20     	; 0x3e5e <SendParameter+0x102>
    3e4a:	8f 3c       	cpi	r24, 0xCF	; 207
    3e4c:	91 05       	cpc	r25, r1
    3e4e:	09 f4       	brne	.+2      	; 0x3e52 <SendParameter+0xf6>
    3e50:	f9 c4       	rjmp	.+2546   	; 0x4844 <SendParameter+0xae8>
    3e52:	80 3d       	cpi	r24, 0xD0	; 208
    3e54:	91 05       	cpc	r25, r1
    3e56:	09 f4       	brne	.+2      	; 0x3e5a <SendParameter+0xfe>
    3e58:	07 c5       	rjmp	.+2574   	; 0x4868 <SendParameter+0xb0c>
    3e5a:	0c 94 db 34 	jmp	0x69b6	; 0x69b6 <SendParameter+0x2c5a>
    3e5e:	82 3d       	cpi	r24, 0xD2	; 210
    3e60:	91 05       	cpc	r25, r1
    3e62:	09 f4       	brne	.+2      	; 0x3e66 <SendParameter+0x10a>
    3e64:	29 c7       	rjmp	.+3666   	; 0x4cb8 <SendParameter+0xf5c>
    3e66:	8c 32       	cpi	r24, 0x2C	; 44
    3e68:	91 40       	sbci	r25, 0x01	; 1
    3e6a:	09 f4       	brne	.+2      	; 0x3e6e <SendParameter+0x112>
    3e6c:	3b c7       	rjmp	.+3702   	; 0x4ce4 <SendParameter+0xf88>
    3e6e:	0c 94 db 34 	jmp	0x69b6	; 0x69b6 <SendParameter+0x2c5a>
    3e72:	82 39       	cpi	r24, 0x92	; 146
    3e74:	e1 e0       	ldi	r30, 0x01	; 1
    3e76:	9e 07       	cpc	r25, r30
    3e78:	11 f4       	brne	.+4      	; 0x3e7e <SendParameter+0x122>
    3e7a:	0c 94 0e 29 	jmp	0x521c	; 0x521c <SendParameter+0x14c0>
    3e7e:	0c f0       	brlt	.+2      	; 0x3e82 <SendParameter+0x126>
    3e80:	49 c0       	rjmp	.+146    	; 0x3f14 <SendParameter+0x1b8>
    3e82:	83 33       	cpi	r24, 0x33	; 51
    3e84:	21 e0       	ldi	r18, 0x01	; 1
    3e86:	92 07       	cpc	r25, r18
    3e88:	11 f4       	brne	.+4      	; 0x3e8e <SendParameter+0x132>
    3e8a:	0c 94 fa 27 	jmp	0x4ff4	; 0x4ff4 <SendParameter+0x1298>
    3e8e:	0c f5       	brge	.+66     	; 0x3ed2 <SendParameter+0x176>
    3e90:	80 33       	cpi	r24, 0x30	; 48
    3e92:	b1 e0       	ldi	r27, 0x01	; 1
    3e94:	9b 07       	cpc	r25, r27
    3e96:	11 f4       	brne	.+4      	; 0x3e9c <SendParameter+0x140>
    3e98:	0c 94 c1 27 	jmp	0x4f82	; 0x4f82 <SendParameter+0x1226>
    3e9c:	6c f4       	brge	.+26     	; 0x3eb8 <SendParameter+0x15c>
    3e9e:	8e 32       	cpi	r24, 0x2E	; 46
    3ea0:	f1 e0       	ldi	r31, 0x01	; 1
    3ea2:	9f 07       	cpc	r25, r31
    3ea4:	11 f4       	brne	.+4      	; 0x3eaa <SendParameter+0x14e>
    3ea6:	0c 94 9b 27 	jmp	0x4f36	; 0x4f36 <SendParameter+0x11da>
    3eaa:	8f 32       	cpi	r24, 0x2F	; 47
    3eac:	91 40       	sbci	r25, 0x01	; 1
    3eae:	11 f4       	brne	.+4      	; 0x3eb4 <SendParameter+0x158>
    3eb0:	0c 94 ae 27 	jmp	0x4f5c	; 0x4f5c <SendParameter+0x1200>
    3eb4:	0c 94 db 34 	jmp	0x69b6	; 0x69b6 <SendParameter+0x2c5a>
    3eb8:	81 33       	cpi	r24, 0x31	; 49
    3eba:	a1 e0       	ldi	r26, 0x01	; 1
    3ebc:	9a 07       	cpc	r25, r26
    3ebe:	11 f4       	brne	.+4      	; 0x3ec4 <SendParameter+0x168>
    3ec0:	0c 94 d4 27 	jmp	0x4fa8	; 0x4fa8 <SendParameter+0x124c>
    3ec4:	82 33       	cpi	r24, 0x32	; 50
    3ec6:	91 40       	sbci	r25, 0x01	; 1
    3ec8:	11 f4       	brne	.+4      	; 0x3ece <SendParameter+0x172>
    3eca:	0c 94 e7 27 	jmp	0x4fce	; 0x4fce <SendParameter+0x1272>
    3ece:	0c 94 db 34 	jmp	0x69b6	; 0x69b6 <SendParameter+0x2c5a>
    3ed2:	86 33       	cpi	r24, 0x36	; 54
    3ed4:	e1 e0       	ldi	r30, 0x01	; 1
    3ed6:	9e 07       	cpc	r25, r30
    3ed8:	11 f4       	brne	.+4      	; 0x3ede <SendParameter+0x182>
    3eda:	0c 94 30 28 	jmp	0x5060	; 0x5060 <SendParameter+0x1304>
    3ede:	6c f4       	brge	.+26     	; 0x3efa <SendParameter+0x19e>
    3ee0:	84 33       	cpi	r24, 0x34	; 52
    3ee2:	21 e0       	ldi	r18, 0x01	; 1
    3ee4:	92 07       	cpc	r25, r18
    3ee6:	11 f4       	brne	.+4      	; 0x3eec <SendParameter+0x190>
    3ee8:	0c 94 0d 28 	jmp	0x501a	; 0x501a <SendParameter+0x12be>
    3eec:	85 33       	cpi	r24, 0x35	; 53
    3eee:	91 40       	sbci	r25, 0x01	; 1
    3ef0:	11 f4       	brne	.+4      	; 0x3ef6 <SendParameter+0x19a>
    3ef2:	0c 94 20 28 	jmp	0x5040	; 0x5040 <SendParameter+0x12e4>
    3ef6:	0c 94 db 34 	jmp	0x69b6	; 0x69b6 <SendParameter+0x2c5a>
    3efa:	80 39       	cpi	r24, 0x90	; 144
    3efc:	b1 e0       	ldi	r27, 0x01	; 1
    3efe:	9b 07       	cpc	r25, r27
    3f00:	11 f4       	brne	.+4      	; 0x3f06 <SendParameter+0x1aa>
    3f02:	0c 94 e8 28 	jmp	0x51d0	; 0x51d0 <SendParameter+0x1474>
    3f06:	81 39       	cpi	r24, 0x91	; 145
    3f08:	91 40       	sbci	r25, 0x01	; 1
    3f0a:	11 f4       	brne	.+4      	; 0x3f10 <SendParameter+0x1b4>
    3f0c:	0c 94 fb 28 	jmp	0x51f6	; 0x51f6 <SendParameter+0x149a>
    3f10:	0c 94 db 34 	jmp	0x69b6	; 0x69b6 <SendParameter+0x2c5a>
    3f14:	88 39       	cpi	r24, 0x98	; 152
    3f16:	f1 e0       	ldi	r31, 0x01	; 1
    3f18:	9f 07       	cpc	r25, r31
    3f1a:	11 f4       	brne	.+4      	; 0x3f20 <SendParameter+0x1c4>
    3f1c:	0c 94 8c 2f 	jmp	0x5f18	; 0x5f18 <SendParameter+0x21bc>
    3f20:	0c f5       	brge	.+66     	; 0x3f64 <SendParameter+0x208>
    3f22:	85 39       	cpi	r24, 0x95	; 149
    3f24:	a1 e0       	ldi	r26, 0x01	; 1
    3f26:	9a 07       	cpc	r25, r26
    3f28:	11 f4       	brne	.+4      	; 0x3f2e <SendParameter+0x1d2>
    3f2a:	0c 94 50 2c 	jmp	0x58a0	; 0x58a0 <SendParameter+0x1b44>
    3f2e:	6c f4       	brge	.+26     	; 0x3f4a <SendParameter+0x1ee>
    3f30:	83 39       	cpi	r24, 0x93	; 147
    3f32:	e1 e0       	ldi	r30, 0x01	; 1
    3f34:	9e 07       	cpc	r25, r30
    3f36:	11 f4       	brne	.+4      	; 0x3f3c <SendParameter+0x1e0>
    3f38:	0c 94 24 2a 	jmp	0x5448	; 0x5448 <SendParameter+0x16ec>
    3f3c:	84 39       	cpi	r24, 0x94	; 148
    3f3e:	91 40       	sbci	r25, 0x01	; 1
    3f40:	11 f4       	brne	.+4      	; 0x3f46 <SendParameter+0x1ea>
    3f42:	0c 94 3a 2b 	jmp	0x5674	; 0x5674 <SendParameter+0x1918>
    3f46:	0c 94 db 34 	jmp	0x69b6	; 0x69b6 <SendParameter+0x2c5a>
    3f4a:	86 39       	cpi	r24, 0x96	; 150
    3f4c:	21 e0       	ldi	r18, 0x01	; 1
    3f4e:	92 07       	cpc	r25, r18
    3f50:	11 f4       	brne	.+4      	; 0x3f56 <SendParameter+0x1fa>
    3f52:	0c 94 66 2d 	jmp	0x5acc	; 0x5acc <SendParameter+0x1d70>
    3f56:	87 39       	cpi	r24, 0x97	; 151
    3f58:	91 40       	sbci	r25, 0x01	; 1
    3f5a:	11 f4       	brne	.+4      	; 0x3f60 <SendParameter+0x204>
    3f5c:	0c 94 79 2e 	jmp	0x5cf2	; 0x5cf2 <SendParameter+0x1f96>
    3f60:	0c 94 db 34 	jmp	0x69b6	; 0x69b6 <SendParameter+0x2c5a>
    3f64:	88 35       	cpi	r24, 0x58	; 88
    3f66:	b2 e0       	ldi	r27, 0x02	; 2
    3f68:	9b 07       	cpc	r25, r27
    3f6a:	11 f4       	brne	.+4      	; 0x3f70 <SendParameter+0x214>
    3f6c:	0c 94 06 32 	jmp	0x640c	; 0x640c <SendParameter+0x26b0>
    3f70:	6c f4       	brge	.+26     	; 0x3f8c <SendParameter+0x230>
    3f72:	89 39       	cpi	r24, 0x99	; 153
    3f74:	f1 e0       	ldi	r31, 0x01	; 1
    3f76:	9f 07       	cpc	r25, r31
    3f78:	11 f4       	brne	.+4      	; 0x3f7e <SendParameter+0x222>
    3f7a:	0c 94 9f 30 	jmp	0x613e	; 0x613e <SendParameter+0x23e2>
    3f7e:	8a 39       	cpi	r24, 0x9A	; 154
    3f80:	91 40       	sbci	r25, 0x01	; 1
    3f82:	11 f4       	brne	.+4      	; 0x3f88 <SendParameter+0x22c>
    3f84:	0c 94 ae 30 	jmp	0x615c	; 0x615c <SendParameter+0x2400>
    3f88:	0c 94 db 34 	jmp	0x69b6	; 0x69b6 <SendParameter+0x2c5a>
    3f8c:	89 35       	cpi	r24, 0x59	; 89
    3f8e:	a2 e0       	ldi	r26, 0x02	; 2
    3f90:	9a 07       	cpc	r25, r26
    3f92:	11 f4       	brne	.+4      	; 0x3f98 <SendParameter+0x23c>
    3f94:	0c 94 bc 32 	jmp	0x6578	; 0x6578 <SendParameter+0x281c>
    3f98:	8a 35       	cpi	r24, 0x5A	; 90
    3f9a:	92 40       	sbci	r25, 0x02	; 2
    3f9c:	11 f4       	brne	.+4      	; 0x3fa2 <SendParameter+0x246>
    3f9e:	0c 94 ce 33 	jmp	0x679c	; 0x679c <SendParameter+0x2a40>
    3fa2:	0c 94 db 34 	jmp	0x69b6	; 0x69b6 <SendParameter+0x2c5a>
	{
		// *** Channel 0 ***
		case 100:	// Send sensor 1 temperature		
		ftoa(ch0.TempSensor, tx_string);
    3fa6:	60 91 ca 02 	lds	r22, 0x02CA
    3faa:	70 91 cb 02 	lds	r23, 0x02CB
    3fae:	80 91 cc 02 	lds	r24, 0x02CC
    3fb2:	90 91 cd 02 	lds	r25, 0x02CD
    3fb6:	ae 01       	movw	r20, r28
    3fb8:	4f 5f       	subi	r20, 0xFF	; 255
    3fba:	5f 4f       	sbci	r21, 0xFF	; 255
    3fbc:	48 de       	rcall	.-880    	; 0x3c4e <ftoa>
		printStatus(tx_string);
    3fbe:	ce 01       	movw	r24, r28
    3fc0:	01 96       	adiw	r24, 0x01	; 1
    3fc2:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
		break;
    3fc6:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
		
		case 101:	// Send P part of PID-controller 1
		ftoa(ch0.P_err, tx_string);
    3fca:	60 91 ce 02 	lds	r22, 0x02CE
    3fce:	70 91 cf 02 	lds	r23, 0x02CF
    3fd2:	80 91 d0 02 	lds	r24, 0x02D0
    3fd6:	90 91 d1 02 	lds	r25, 0x02D1
    3fda:	ae 01       	movw	r20, r28
    3fdc:	4f 5f       	subi	r20, 0xFF	; 255
    3fde:	5f 4f       	sbci	r21, 0xFF	; 255
    3fe0:	36 de       	rcall	.-916    	; 0x3c4e <ftoa>
		printStatus(tx_string);
    3fe2:	ce 01       	movw	r24, r28
    3fe4:	01 96       	adiw	r24, 0x01	; 1
    3fe6:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
		break;
    3fea:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
		
		case 102:	// Send I part of PID-controller 1
		ftoa(ch0.I_err, tx_string);
    3fee:	60 91 d2 02 	lds	r22, 0x02D2
    3ff2:	70 91 d3 02 	lds	r23, 0x02D3
    3ff6:	80 91 d4 02 	lds	r24, 0x02D4
    3ffa:	90 91 d5 02 	lds	r25, 0x02D5
    3ffe:	ae 01       	movw	r20, r28
    4000:	4f 5f       	subi	r20, 0xFF	; 255
    4002:	5f 4f       	sbci	r21, 0xFF	; 255
    4004:	24 de       	rcall	.-952    	; 0x3c4e <ftoa>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    4006:	81 e2       	ldi	r24, 0x21	; 33
    4008:	8d 8b       	std	Y+21, r24	; 0x15
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    400a:	e9 e3       	ldi	r30, 0x39	; 57
    400c:	f5 e0       	ldi	r31, 0x05	; 5
    400e:	81 81       	ldd	r24, Z+1	; 0x01
    4010:	8e 8b       	std	Y+22, r24	; 0x16
    4012:	82 81       	ldd	r24, Z+2	; 0x02
    4014:	8f 8b       	std	Y+23, r24	; 0x17
    4016:	83 81       	ldd	r24, Z+3	; 0x03
    4018:	88 8f       	std	Y+24, r24	; 0x18
    401a:	ae 01       	movw	r20, r28
    401c:	4f 5f       	subi	r20, 0xFF	; 255
    401e:	5f 4f       	sbci	r21, 0xFF	; 255
    4020:	9e 01       	movw	r18, r28
    4022:	27 5e       	subi	r18, 0xE7	; 231
    4024:	3f 4f       	sbci	r19, 0xFF	; 255
    4026:	00 e0       	ldi	r16, 0x00	; 0
    4028:	10 e0       	ldi	r17, 0x00	; 0
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    402a:	da 01       	movw	r26, r20
    402c:	08 c0       	rjmp	.+16     	; 0x403e <SendParameter+0x2e2>
	{
		tx_string[cnt+4] = msg_string[cnt];
    402e:	fa 01       	movw	r30, r20
    4030:	81 91       	ld	r24, Z+
    4032:	af 01       	movw	r20, r30
    4034:	f9 01       	movw	r30, r18
    4036:	81 93       	st	Z+, r24
    4038:	9f 01       	movw	r18, r30
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    403a:	0f 5f       	subi	r16, 0xFF	; 255
    403c:	1f 4f       	sbci	r17, 0xFF	; 255
    403e:	fd 01       	movw	r30, r26
    4040:	01 90       	ld	r0, Z+
    4042:	00 20       	and	r0, r0
    4044:	e9 f7       	brne	.-6      	; 0x4040 <SendParameter+0x2e4>
    4046:	cf 01       	movw	r24, r30
    4048:	8a 1b       	sub	r24, r26
    404a:	9b 0b       	sbc	r25, r27
    404c:	02 96       	adiw	r24, 0x02	; 2
    404e:	08 17       	cp	r16, r24
    4050:	19 07       	cpc	r17, r25
    4052:	68 f3       	brcs	.-38     	; 0x402e <SendParameter+0x2d2>
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    4054:	78 01       	movw	r14, r16
    4056:	ff ef       	ldi	r31, 0xFF	; 255
    4058:	ef 1a       	sub	r14, r31
    405a:	ff 0a       	sbc	r15, r31
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    405c:	1e 14       	cp	r1, r14
    405e:	1f 04       	cpc	r1, r15
    4060:	14 f0       	brlt	.+4      	; 0x4066 <SendParameter+0x30a>
    4062:	0c 94 e0 34 	jmp	0x69c0	; 0x69c0 <SendParameter+0x2c64>
    4066:	fe 01       	movw	r30, r28
    4068:	75 96       	adiw	r30, 0x15	; 21
    406a:	a7 01       	movw	r20, r14
    406c:	4e 0f       	add	r20, r30
    406e:	5f 1f       	adc	r21, r31
    4070:	80 e0       	ldi	r24, 0x00	; 0
    4072:	90 e0       	ldi	r25, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    4074:	b8 e0       	ldi	r27, 0x08	; 8
    4076:	d1 2c       	mov	r13, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    4078:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    407a:	29 2f       	mov	r18, r25
    407c:	33 27       	eor	r19, r19
    407e:	27 fd       	sbrc	r18, 7
    4080:	3a 95       	dec	r19
    4082:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
    4084:	32 2f       	mov	r19, r18
    4086:	22 27       	eor	r18, r18
    4088:	6b 2f       	mov	r22, r27
    408a:	7d 2d       	mov	r23, r13
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    408c:	33 23       	and	r19, r19
    408e:	3c f4       	brge	.+14     	; 0x409e <SendParameter+0x342>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    4090:	22 0f       	add	r18, r18
    4092:	33 1f       	adc	r19, r19
    4094:	a1 e2       	ldi	r26, 0x21	; 33
    4096:	2a 27       	eor	r18, r26
    4098:	a0 e1       	ldi	r26, 0x10	; 16
    409a:	3a 27       	eor	r19, r26
    409c:	02 c0       	rjmp	.+4      	; 0x40a2 <SendParameter+0x346>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    409e:	22 0f       	add	r18, r18
    40a0:	33 1f       	adc	r19, r19
    40a2:	61 50       	subi	r22, 0x01	; 1
    40a4:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    40a6:	91 f7       	brne	.-28     	; 0x408c <SendParameter+0x330>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    40a8:	98 2f       	mov	r25, r24
    40aa:	88 27       	eor	r24, r24
    40ac:	82 27       	eor	r24, r18
    40ae:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    40b0:	e4 17       	cp	r30, r20
    40b2:	f5 07       	cpc	r31, r21
    40b4:	09 f7       	brne	.-62     	; 0x4078 <SendParameter+0x31c>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    40b6:	6c 01       	movw	r12, r24
    40b8:	40 e1       	ldi	r20, 0x10	; 16
    40ba:	6f e2       	ldi	r22, 0x2F	; 47
    40bc:	75 e0       	ldi	r23, 0x05	; 5
    40be:	0e 94 04 3b 	call	0x7608	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    40c2:	8f e2       	ldi	r24, 0x2F	; 47
    40c4:	95 e0       	ldi	r25, 0x05	; 5
    40c6:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <strupr>
	if(crcXmodem < 0x10)
    40ca:	b0 e1       	ldi	r27, 0x10	; 16
    40cc:	cb 16       	cp	r12, r27
    40ce:	d1 04       	cpc	r13, r1
    40d0:	98 f4       	brcc	.+38     	; 0x40f8 <SendParameter+0x39c>
	{
		tx_string[cnt+4] = crc[0];
    40d2:	80 91 2f 05 	lds	r24, 0x052F
    40d6:	fe 01       	movw	r30, r28
    40d8:	e0 0f       	add	r30, r16
    40da:	f1 1f       	adc	r31, r17
    40dc:	81 8f       	std	Z+25, r24	; 0x19
		tx_string[cnt+3] = '0';
    40de:	80 e3       	ldi	r24, 0x30	; 48
    40e0:	fe 01       	movw	r30, r28
    40e2:	e0 0f       	add	r30, r16
    40e4:	f1 1f       	adc	r31, r17
    40e6:	80 8f       	std	Z+24, r24	; 0x18
		tx_string[cnt+2] = '0';
    40e8:	fe 01       	movw	r30, r28
    40ea:	e0 0f       	add	r30, r16
    40ec:	f1 1f       	adc	r31, r17
    40ee:	87 8b       	std	Z+23, r24	; 0x17
		tx_string[cnt+1] = '0';
    40f0:	fe 01       	movw	r30, r28
    40f2:	ee 0d       	add	r30, r14
    40f4:	ff 1d       	adc	r31, r15
    40f6:	85 8b       	std	Z+21, r24	; 0x15
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    40f8:	c6 01       	movw	r24, r12
    40fa:	40 97       	sbiw	r24, 0x10	; 16
    40fc:	80 3f       	cpi	r24, 0xF0	; 240
    40fe:	91 05       	cpc	r25, r1
    4100:	b8 f4       	brcc	.+46     	; 0x4130 <SendParameter+0x3d4>
	{
		tx_string[cnt+4] = crc[1];
    4102:	af e2       	ldi	r26, 0x2F	; 47
    4104:	b5 e0       	ldi	r27, 0x05	; 5
    4106:	11 96       	adiw	r26, 0x01	; 1
    4108:	8c 91       	ld	r24, X
    410a:	11 97       	sbiw	r26, 0x01	; 1
    410c:	fe 01       	movw	r30, r28
    410e:	e0 0f       	add	r30, r16
    4110:	f1 1f       	adc	r31, r17
    4112:	81 8f       	std	Z+25, r24	; 0x19
		tx_string[cnt+3] = crc[0];
    4114:	8c 91       	ld	r24, X
    4116:	fe 01       	movw	r30, r28
    4118:	e0 0f       	add	r30, r16
    411a:	f1 1f       	adc	r31, r17
    411c:	80 8f       	std	Z+24, r24	; 0x18
		tx_string[cnt+2] = '0';
    411e:	80 e3       	ldi	r24, 0x30	; 48
    4120:	fe 01       	movw	r30, r28
    4122:	e0 0f       	add	r30, r16
    4124:	f1 1f       	adc	r31, r17
    4126:	87 8b       	std	Z+23, r24	; 0x17
		tx_string[cnt+1] = '0';		
    4128:	fe 01       	movw	r30, r28
    412a:	ee 0d       	add	r30, r14
    412c:	ff 1d       	adc	r31, r15
    412e:	85 8b       	std	Z+21, r24	; 0x15
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    4130:	c6 01       	movw	r24, r12
    4132:	9a 95       	dec	r25
    4134:	81 15       	cp	r24, r1
    4136:	9f 40       	sbci	r25, 0x0F	; 15
    4138:	b8 f4       	brcc	.+46     	; 0x4168 <SendParameter+0x40c>
	{
		tx_string[cnt+4] = crc[2];
    413a:	ef e2       	ldi	r30, 0x2F	; 47
    413c:	f5 e0       	ldi	r31, 0x05	; 5
    413e:	82 81       	ldd	r24, Z+2	; 0x02
    4140:	de 01       	movw	r26, r28
    4142:	a0 0f       	add	r26, r16
    4144:	b1 1f       	adc	r27, r17
    4146:	59 96       	adiw	r26, 0x19	; 25
    4148:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[1];
    414a:	81 81       	ldd	r24, Z+1	; 0x01
    414c:	de 01       	movw	r26, r28
    414e:	a0 0f       	add	r26, r16
    4150:	b1 1f       	adc	r27, r17
    4152:	58 96       	adiw	r26, 0x18	; 24
    4154:	8c 93       	st	X, r24
    4156:	58 97       	sbiw	r26, 0x18	; 24
		tx_string[cnt+2] = crc[0];
    4158:	80 81       	ld	r24, Z
    415a:	fd 01       	movw	r30, r26
    415c:	87 8b       	std	Z+23, r24	; 0x17
		tx_string[cnt+1] = '0';		
    415e:	80 e3       	ldi	r24, 0x30	; 48
    4160:	fe 01       	movw	r30, r28
    4162:	ee 0d       	add	r30, r14
    4164:	ff 1d       	adc	r31, r15
    4166:	85 8b       	std	Z+21, r24	; 0x15
	}
	if(crcXmodem >= 0x1000)
    4168:	c1 14       	cp	r12, r1
    416a:	f0 e1       	ldi	r31, 0x10	; 16
    416c:	df 06       	cpc	r13, r31
    416e:	c0 f0       	brcs	.+48     	; 0x41a0 <SendParameter+0x444>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    4170:	de 01       	movw	r26, r28
    4172:	ae 0d       	add	r26, r14
    4174:	bf 1d       	adc	r27, r15
    4176:	ef e2       	ldi	r30, 0x2F	; 47
    4178:	f5 e0       	ldi	r31, 0x05	; 5
    417a:	80 81       	ld	r24, Z
    417c:	55 96       	adiw	r26, 0x15	; 21
    417e:	8c 93       	st	X, r24
		tx_string[cnt+2] = crc[1];
    4180:	81 81       	ldd	r24, Z+1	; 0x01
    4182:	de 01       	movw	r26, r28
    4184:	a0 0f       	add	r26, r16
    4186:	b1 1f       	adc	r27, r17
    4188:	57 96       	adiw	r26, 0x17	; 23
    418a:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[2];
    418c:	82 81       	ldd	r24, Z+2	; 0x02
    418e:	de 01       	movw	r26, r28
    4190:	a0 0f       	add	r26, r16
    4192:	b1 1f       	adc	r27, r17
    4194:	58 96       	adiw	r26, 0x18	; 24
    4196:	8c 93       	st	X, r24
    4198:	58 97       	sbiw	r26, 0x18	; 24
		tx_string[cnt+4] = crc[3];
    419a:	83 81       	ldd	r24, Z+3	; 0x03
    419c:	fd 01       	movw	r30, r26
    419e:	81 8f       	std	Z+25, r24	; 0x19
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    41a0:	c8 01       	movw	r24, r16
    41a2:	05 96       	adiw	r24, 0x05	; 5
    41a4:	fe 01       	movw	r30, r28
    41a6:	e8 0f       	add	r30, r24
    41a8:	f9 1f       	adc	r31, r25
    41aa:	2d e0       	ldi	r18, 0x0D	; 13
    41ac:	25 8b       	std	Z+21, r18	; 0x15
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    41ae:	99 23       	and	r25, r25
    41b0:	14 f4       	brge	.+4      	; 0x41b6 <SendParameter+0x45a>
    41b2:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
    41b6:	ae 01       	movw	r20, r28
    41b8:	4b 5e       	subi	r20, 0xEB	; 235
    41ba:	5f 4f       	sbci	r21, 0xFF	; 255
    41bc:	0a 5f       	subi	r16, 0xFA	; 250
    41be:	1f 4f       	sbci	r17, 0xFF	; 255
    41c0:	04 0f       	add	r16, r20
    41c2:	15 1f       	adc	r17, r21
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    41c4:	e7 e5       	ldi	r30, 0x57	; 87
    41c6:	f5 e0       	ldi	r31, 0x05	; 5
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    41c8:	61 ec       	ldi	r22, 0xC1	; 193
    41ca:	70 e0       	ldi	r23, 0x00	; 0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    41cc:	30 e0       	ldi	r19, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    41ce:	da 01       	movw	r26, r20
    41d0:	8d 91       	ld	r24, X+
    41d2:	ad 01       	movw	r20, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    41d4:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    41d6:	21 81       	ldd	r18, Z+1	; 0x01
    41d8:	90 81       	ld	r25, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    41da:	29 13       	cpse	r18, r25
    41dc:	04 c0       	rjmp	.+8      	; 0x41e6 <SendParameter+0x48a>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    41de:	db 01       	movw	r26, r22
    41e0:	9c 91       	ld	r25, X
    41e2:	90 62       	ori	r25, 0x20	; 32
    41e4:	9c 93       	st	X, r25
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    41e6:	90 81       	ld	r25, Z
    41e8:	a3 81       	ldd	r26, Z+3	; 0x03
    41ea:	b4 81       	ldd	r27, Z+4	; 0x04
    41ec:	a9 0f       	add	r26, r25
    41ee:	b1 1d       	adc	r27, r1
    41f0:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    41f2:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    41f4:	a2 2f       	mov	r26, r18
    41f6:	b0 e0       	ldi	r27, 0x00	; 0
    41f8:	82 81       	ldd	r24, Z+2	; 0x02
    41fa:	90 e0       	ldi	r25, 0x00	; 0
    41fc:	01 97       	sbiw	r24, 0x01	; 1
    41fe:	a8 17       	cp	r26, r24
    4200:	b9 07       	cpc	r27, r25
    4202:	11 f0       	breq	.+4      	; 0x4208 <SendParameter+0x4ac>
    4204:	2f 5f       	subi	r18, 0xFF	; 255
    4206:	01 c0       	rjmp	.+2      	; 0x420a <SendParameter+0x4ae>
    4208:	23 2f       	mov	r18, r19
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    420a:	20 83       	st	Z, r18
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    420c:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    420e:	40 17       	cp	r20, r16
    4210:	51 07       	cpc	r21, r17
    4212:	e9 f6       	brne	.-70     	; 0x41ce <SendParameter+0x472>
    4214:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
		ftoa(ch0.I_err, tx_string);
		printStatus(tx_string);
		break;
				
		case 103:	// Send D part of PID-controller 1
		ftoa(ch0.D_err, tx_string);
    4218:	60 91 d6 02 	lds	r22, 0x02D6
    421c:	70 91 d7 02 	lds	r23, 0x02D7
    4220:	80 91 d8 02 	lds	r24, 0x02D8
    4224:	90 91 d9 02 	lds	r25, 0x02D9
    4228:	ae 01       	movw	r20, r28
    422a:	4f 5f       	subi	r20, 0xFF	; 255
    422c:	5f 4f       	sbci	r21, 0xFF	; 255
    422e:	0f dd       	rcall	.-1506   	; 0x3c4e <ftoa>
		printStatus(tx_string);
    4230:	ce 01       	movw	r24, r28
    4232:	01 96       	adiw	r24, 0x01	; 1
    4234:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
		break;
    4238:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
		
		case 104:	// Send ch0.TempSetPoint
		ftoa(ch0.TempSetPoint, tx_string);
    423c:	60 91 c6 02 	lds	r22, 0x02C6
    4240:	70 91 c7 02 	lds	r23, 0x02C7
    4244:	80 91 c8 02 	lds	r24, 0x02C8
    4248:	90 91 c9 02 	lds	r25, 0x02C9
    424c:	ae 01       	movw	r20, r28
    424e:	4f 5f       	subi	r20, 0xFF	; 255
    4250:	5f 4f       	sbci	r21, 0xFF	; 255
    4252:	fd dc       	rcall	.-1542   	; 0x3c4e <ftoa>
		printStatus(tx_string);
    4254:	ce 01       	movw	r24, r28
    4256:	01 96       	adiw	r24, 0x01	; 1
    4258:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
		break;
    425c:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
		
		case 105:	// Send Pgain ch0
		ftoa(ch0.Pgain, tx_string);
    4260:	60 91 e2 02 	lds	r22, 0x02E2
    4264:	70 91 e3 02 	lds	r23, 0x02E3
    4268:	80 91 e4 02 	lds	r24, 0x02E4
    426c:	90 91 e5 02 	lds	r25, 0x02E5
    4270:	ae 01       	movw	r20, r28
    4272:	4f 5f       	subi	r20, 0xFF	; 255
    4274:	5f 4f       	sbci	r21, 0xFF	; 255
    4276:	eb dc       	rcall	.-1578   	; 0x3c4e <ftoa>
		printStatus(tx_string);
    4278:	ce 01       	movw	r24, r28
    427a:	01 96       	adiw	r24, 0x01	; 1
    427c:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
		break;								
    4280:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
		
		case 106:	// Send Igain ch0
		ftoa(ch0.Igain, tx_string);
    4284:	60 91 e6 02 	lds	r22, 0x02E6
    4288:	70 91 e7 02 	lds	r23, 0x02E7
    428c:	80 91 e8 02 	lds	r24, 0x02E8
    4290:	90 91 e9 02 	lds	r25, 0x02E9
    4294:	ae 01       	movw	r20, r28
    4296:	4f 5f       	subi	r20, 0xFF	; 255
    4298:	5f 4f       	sbci	r21, 0xFF	; 255
    429a:	d9 dc       	rcall	.-1614   	; 0x3c4e <ftoa>
		printStatus(tx_string);
    429c:	ce 01       	movw	r24, r28
    429e:	01 96       	adiw	r24, 0x01	; 1
    42a0:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
		break;
    42a4:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
		
		case 107:	// Send Dgain ch0
		ftoa(ch0.Dgain, tx_string);
    42a8:	60 91 ea 02 	lds	r22, 0x02EA
    42ac:	70 91 eb 02 	lds	r23, 0x02EB
    42b0:	80 91 ec 02 	lds	r24, 0x02EC
    42b4:	90 91 ed 02 	lds	r25, 0x02ED
    42b8:	ae 01       	movw	r20, r28
    42ba:	4f 5f       	subi	r20, 0xFF	; 255
    42bc:	5f 4f       	sbci	r21, 0xFF	; 255
    42be:	c7 dc       	rcall	.-1650   	; 0x3c4e <ftoa>
		printStatus(tx_string);
    42c0:	ce 01       	movw	r24, r28
    42c2:	01 96       	adiw	r24, 0x01	; 1
    42c4:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
		break;
    42c8:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
		
		case 108:	// Send TemperatureWindow
		ftoa(ch0.tempErrorWin, tx_string);
    42cc:	60 91 1a 03 	lds	r22, 0x031A
    42d0:	70 91 1b 03 	lds	r23, 0x031B
    42d4:	80 91 1c 03 	lds	r24, 0x031C
    42d8:	90 91 1d 03 	lds	r25, 0x031D
    42dc:	ae 01       	movw	r20, r28
    42de:	4f 5f       	subi	r20, 0xFF	; 255
    42e0:	5f 4f       	sbci	r21, 0xFF	; 255
    42e2:	b5 dc       	rcall	.-1686   	; 0x3c4e <ftoa>
		printStatus(tx_string);
    42e4:	ce 01       	movw	r24, r28
    42e6:	01 96       	adiw	r24, 0x01	; 1
    42e8:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
		break;
    42ec:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
		
		case 109:	// Send SettleTimeTemperature
		itoa(ch0.tempSettleTime, tx_string, 10);
    42f0:	80 91 20 03 	lds	r24, 0x0320
    42f4:	90 91 21 03 	lds	r25, 0x0321
    42f8:	4a e0       	ldi	r20, 0x0A	; 10
    42fa:	be 01       	movw	r22, r28
    42fc:	6f 5f       	subi	r22, 0xFF	; 255
    42fe:	7f 4f       	sbci	r23, 0xFF	; 255
    4300:	0e 94 04 3b 	call	0x7608	; 0x7608 <__itoa_ncheck>
		printStatus(tx_string);
    4304:	ce 01       	movw	r24, r28
    4306:	01 96       	adiw	r24, 0x01	; 1
    4308:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
		break;
    430c:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
		
		case 110:	// Send Temperature stable status
		switch(ch0.tempStable)
    4310:	80 91 22 03 	lds	r24, 0x0322
    4314:	90 91 23 03 	lds	r25, 0x0323
    4318:	00 97       	sbiw	r24, 0x00	; 0
    431a:	21 f0       	breq	.+8      	; 0x4324 <SendParameter+0x5c8>
    431c:	01 97       	sbiw	r24, 0x01	; 1
    431e:	41 f0       	breq	.+16     	; 0x4330 <SendParameter+0x5d4>
    4320:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
		{
			case 0:
			printStatus("0");
    4324:	8b e2       	ldi	r24, 0x2B	; 43
    4326:	91 e0       	ldi	r25, 0x01	; 1
    4328:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
			break;
    432c:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
				
			case 1:
			printStatus("1");
    4330:	8d e2       	ldi	r24, 0x2D	; 45
    4332:	91 e0       	ldi	r25, 0x01	; 1
    4334:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
			break;	
    4338:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
		}
		break;
		
		// *** Channel 1 ***
		case 200:	// Send sensor 1 temperature
		ftoa(ch1.TempSensor, tx_string);
    433c:	60 91 67 02 	lds	r22, 0x0267
    4340:	70 91 68 02 	lds	r23, 0x0268
    4344:	80 91 69 02 	lds	r24, 0x0269
    4348:	90 91 6a 02 	lds	r25, 0x026A
    434c:	ae 01       	movw	r20, r28
    434e:	4f 5f       	subi	r20, 0xFF	; 255
    4350:	5f 4f       	sbci	r21, 0xFF	; 255
    4352:	7d dc       	rcall	.-1798   	; 0x3c4e <ftoa>
		printStatus(tx_string);
    4354:	ce 01       	movw	r24, r28
    4356:	01 96       	adiw	r24, 0x01	; 1
    4358:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
		break;
    435c:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
		
		case 201:	// Send P part of PID-controller 1
		ftoa(ch1.P_err, tx_string);
    4360:	60 91 6b 02 	lds	r22, 0x026B
    4364:	70 91 6c 02 	lds	r23, 0x026C
    4368:	80 91 6d 02 	lds	r24, 0x026D
    436c:	90 91 6e 02 	lds	r25, 0x026E
    4370:	ae 01       	movw	r20, r28
    4372:	4f 5f       	subi	r20, 0xFF	; 255
    4374:	5f 4f       	sbci	r21, 0xFF	; 255
    4376:	6b dc       	rcall	.-1834   	; 0x3c4e <ftoa>
		printStatus(tx_string);
    4378:	ce 01       	movw	r24, r28
    437a:	01 96       	adiw	r24, 0x01	; 1
    437c:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
		break;
    4380:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
		
		case 202:	// Send I part of PID-controller 1
		ftoa(ch1.I_err, tx_string);
    4384:	60 91 6f 02 	lds	r22, 0x026F
    4388:	70 91 70 02 	lds	r23, 0x0270
    438c:	80 91 71 02 	lds	r24, 0x0271
    4390:	90 91 72 02 	lds	r25, 0x0272
    4394:	ae 01       	movw	r20, r28
    4396:	4f 5f       	subi	r20, 0xFF	; 255
    4398:	5f 4f       	sbci	r21, 0xFF	; 255
    439a:	59 dc       	rcall	.-1870   	; 0x3c4e <ftoa>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    439c:	81 e2       	ldi	r24, 0x21	; 33
    439e:	8d 8b       	std	Y+21, r24	; 0x15
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    43a0:	e9 e3       	ldi	r30, 0x39	; 57
    43a2:	f5 e0       	ldi	r31, 0x05	; 5
    43a4:	81 81       	ldd	r24, Z+1	; 0x01
    43a6:	8e 8b       	std	Y+22, r24	; 0x16
    43a8:	82 81       	ldd	r24, Z+2	; 0x02
    43aa:	8f 8b       	std	Y+23, r24	; 0x17
    43ac:	83 81       	ldd	r24, Z+3	; 0x03
    43ae:	88 8f       	std	Y+24, r24	; 0x18
    43b0:	ae 01       	movw	r20, r28
    43b2:	4f 5f       	subi	r20, 0xFF	; 255
    43b4:	5f 4f       	sbci	r21, 0xFF	; 255
    43b6:	9e 01       	movw	r18, r28
    43b8:	27 5e       	subi	r18, 0xE7	; 231
    43ba:	3f 4f       	sbci	r19, 0xFF	; 255
    43bc:	00 e0       	ldi	r16, 0x00	; 0
    43be:	10 e0       	ldi	r17, 0x00	; 0
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    43c0:	da 01       	movw	r26, r20
    43c2:	08 c0       	rjmp	.+16     	; 0x43d4 <SendParameter+0x678>
	{
		tx_string[cnt+4] = msg_string[cnt];
    43c4:	fa 01       	movw	r30, r20
    43c6:	81 91       	ld	r24, Z+
    43c8:	af 01       	movw	r20, r30
    43ca:	f9 01       	movw	r30, r18
    43cc:	81 93       	st	Z+, r24
    43ce:	9f 01       	movw	r18, r30
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    43d0:	0f 5f       	subi	r16, 0xFF	; 255
    43d2:	1f 4f       	sbci	r17, 0xFF	; 255
    43d4:	fd 01       	movw	r30, r26
    43d6:	01 90       	ld	r0, Z+
    43d8:	00 20       	and	r0, r0
    43da:	e9 f7       	brne	.-6      	; 0x43d6 <SendParameter+0x67a>
    43dc:	cf 01       	movw	r24, r30
    43de:	8a 1b       	sub	r24, r26
    43e0:	9b 0b       	sbc	r25, r27
    43e2:	02 96       	adiw	r24, 0x02	; 2
    43e4:	08 17       	cp	r16, r24
    43e6:	19 07       	cpc	r17, r25
    43e8:	68 f3       	brcs	.-38     	; 0x43c4 <SendParameter+0x668>
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    43ea:	78 01       	movw	r14, r16
    43ec:	ff ef       	ldi	r31, 0xFF	; 255
    43ee:	ef 1a       	sub	r14, r31
    43f0:	ff 0a       	sbc	r15, r31
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    43f2:	1e 14       	cp	r1, r14
    43f4:	1f 04       	cpc	r1, r15
    43f6:	14 f0       	brlt	.+4      	; 0x43fc <SendParameter+0x6a0>
    43f8:	0c 94 ed 34 	jmp	0x69da	; 0x69da <SendParameter+0x2c7e>
    43fc:	fe 01       	movw	r30, r28
    43fe:	75 96       	adiw	r30, 0x15	; 21
    4400:	a7 01       	movw	r20, r14
    4402:	4e 0f       	add	r20, r30
    4404:	5f 1f       	adc	r21, r31
    4406:	80 e0       	ldi	r24, 0x00	; 0
    4408:	90 e0       	ldi	r25, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    440a:	b8 e0       	ldi	r27, 0x08	; 8
    440c:	d1 2c       	mov	r13, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    440e:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    4410:	29 2f       	mov	r18, r25
    4412:	33 27       	eor	r19, r19
    4414:	27 fd       	sbrc	r18, 7
    4416:	3a 95       	dec	r19
    4418:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
    441a:	32 2f       	mov	r19, r18
    441c:	22 27       	eor	r18, r18
    441e:	6b 2f       	mov	r22, r27
    4420:	7d 2d       	mov	r23, r13
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    4422:	33 23       	and	r19, r19
    4424:	3c f4       	brge	.+14     	; 0x4434 <SendParameter+0x6d8>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    4426:	22 0f       	add	r18, r18
    4428:	33 1f       	adc	r19, r19
    442a:	a1 e2       	ldi	r26, 0x21	; 33
    442c:	2a 27       	eor	r18, r26
    442e:	a0 e1       	ldi	r26, 0x10	; 16
    4430:	3a 27       	eor	r19, r26
    4432:	02 c0       	rjmp	.+4      	; 0x4438 <SendParameter+0x6dc>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    4434:	22 0f       	add	r18, r18
    4436:	33 1f       	adc	r19, r19
    4438:	61 50       	subi	r22, 0x01	; 1
    443a:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    443c:	91 f7       	brne	.-28     	; 0x4422 <SendParameter+0x6c6>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    443e:	98 2f       	mov	r25, r24
    4440:	88 27       	eor	r24, r24
    4442:	82 27       	eor	r24, r18
    4444:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    4446:	e4 17       	cp	r30, r20
    4448:	f5 07       	cpc	r31, r21
    444a:	09 f7       	brne	.-62     	; 0x440e <SendParameter+0x6b2>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    444c:	6c 01       	movw	r12, r24
    444e:	40 e1       	ldi	r20, 0x10	; 16
    4450:	6f e2       	ldi	r22, 0x2F	; 47
    4452:	75 e0       	ldi	r23, 0x05	; 5
    4454:	0e 94 04 3b 	call	0x7608	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    4458:	8f e2       	ldi	r24, 0x2F	; 47
    445a:	95 e0       	ldi	r25, 0x05	; 5
    445c:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <strupr>
	if(crcXmodem < 0x10)
    4460:	b0 e1       	ldi	r27, 0x10	; 16
    4462:	cb 16       	cp	r12, r27
    4464:	d1 04       	cpc	r13, r1
    4466:	98 f4       	brcc	.+38     	; 0x448e <SendParameter+0x732>
	{
		tx_string[cnt+4] = crc[0];
    4468:	80 91 2f 05 	lds	r24, 0x052F
    446c:	fe 01       	movw	r30, r28
    446e:	e0 0f       	add	r30, r16
    4470:	f1 1f       	adc	r31, r17
    4472:	81 8f       	std	Z+25, r24	; 0x19
		tx_string[cnt+3] = '0';
    4474:	80 e3       	ldi	r24, 0x30	; 48
    4476:	fe 01       	movw	r30, r28
    4478:	e0 0f       	add	r30, r16
    447a:	f1 1f       	adc	r31, r17
    447c:	80 8f       	std	Z+24, r24	; 0x18
		tx_string[cnt+2] = '0';
    447e:	fe 01       	movw	r30, r28
    4480:	e0 0f       	add	r30, r16
    4482:	f1 1f       	adc	r31, r17
    4484:	87 8b       	std	Z+23, r24	; 0x17
		tx_string[cnt+1] = '0';
    4486:	fe 01       	movw	r30, r28
    4488:	ee 0d       	add	r30, r14
    448a:	ff 1d       	adc	r31, r15
    448c:	85 8b       	std	Z+21, r24	; 0x15
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    448e:	c6 01       	movw	r24, r12
    4490:	40 97       	sbiw	r24, 0x10	; 16
    4492:	80 3f       	cpi	r24, 0xF0	; 240
    4494:	91 05       	cpc	r25, r1
    4496:	b8 f4       	brcc	.+46     	; 0x44c6 <SendParameter+0x76a>
	{
		tx_string[cnt+4] = crc[1];
    4498:	af e2       	ldi	r26, 0x2F	; 47
    449a:	b5 e0       	ldi	r27, 0x05	; 5
    449c:	11 96       	adiw	r26, 0x01	; 1
    449e:	8c 91       	ld	r24, X
    44a0:	11 97       	sbiw	r26, 0x01	; 1
    44a2:	fe 01       	movw	r30, r28
    44a4:	e0 0f       	add	r30, r16
    44a6:	f1 1f       	adc	r31, r17
    44a8:	81 8f       	std	Z+25, r24	; 0x19
		tx_string[cnt+3] = crc[0];
    44aa:	8c 91       	ld	r24, X
    44ac:	fe 01       	movw	r30, r28
    44ae:	e0 0f       	add	r30, r16
    44b0:	f1 1f       	adc	r31, r17
    44b2:	80 8f       	std	Z+24, r24	; 0x18
		tx_string[cnt+2] = '0';
    44b4:	80 e3       	ldi	r24, 0x30	; 48
    44b6:	fe 01       	movw	r30, r28
    44b8:	e0 0f       	add	r30, r16
    44ba:	f1 1f       	adc	r31, r17
    44bc:	87 8b       	std	Z+23, r24	; 0x17
		tx_string[cnt+1] = '0';		
    44be:	fe 01       	movw	r30, r28
    44c0:	ee 0d       	add	r30, r14
    44c2:	ff 1d       	adc	r31, r15
    44c4:	85 8b       	std	Z+21, r24	; 0x15
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    44c6:	c6 01       	movw	r24, r12
    44c8:	9a 95       	dec	r25
    44ca:	81 15       	cp	r24, r1
    44cc:	9f 40       	sbci	r25, 0x0F	; 15
    44ce:	b8 f4       	brcc	.+46     	; 0x44fe <SendParameter+0x7a2>
	{
		tx_string[cnt+4] = crc[2];
    44d0:	ef e2       	ldi	r30, 0x2F	; 47
    44d2:	f5 e0       	ldi	r31, 0x05	; 5
    44d4:	82 81       	ldd	r24, Z+2	; 0x02
    44d6:	de 01       	movw	r26, r28
    44d8:	a0 0f       	add	r26, r16
    44da:	b1 1f       	adc	r27, r17
    44dc:	59 96       	adiw	r26, 0x19	; 25
    44de:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[1];
    44e0:	81 81       	ldd	r24, Z+1	; 0x01
    44e2:	de 01       	movw	r26, r28
    44e4:	a0 0f       	add	r26, r16
    44e6:	b1 1f       	adc	r27, r17
    44e8:	58 96       	adiw	r26, 0x18	; 24
    44ea:	8c 93       	st	X, r24
    44ec:	58 97       	sbiw	r26, 0x18	; 24
		tx_string[cnt+2] = crc[0];
    44ee:	80 81       	ld	r24, Z
    44f0:	fd 01       	movw	r30, r26
    44f2:	87 8b       	std	Z+23, r24	; 0x17
		tx_string[cnt+1] = '0';		
    44f4:	80 e3       	ldi	r24, 0x30	; 48
    44f6:	fe 01       	movw	r30, r28
    44f8:	ee 0d       	add	r30, r14
    44fa:	ff 1d       	adc	r31, r15
    44fc:	85 8b       	std	Z+21, r24	; 0x15
	}
	if(crcXmodem >= 0x1000)
    44fe:	c1 14       	cp	r12, r1
    4500:	f0 e1       	ldi	r31, 0x10	; 16
    4502:	df 06       	cpc	r13, r31
    4504:	c0 f0       	brcs	.+48     	; 0x4536 <SendParameter+0x7da>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    4506:	de 01       	movw	r26, r28
    4508:	ae 0d       	add	r26, r14
    450a:	bf 1d       	adc	r27, r15
    450c:	ef e2       	ldi	r30, 0x2F	; 47
    450e:	f5 e0       	ldi	r31, 0x05	; 5
    4510:	80 81       	ld	r24, Z
    4512:	55 96       	adiw	r26, 0x15	; 21
    4514:	8c 93       	st	X, r24
		tx_string[cnt+2] = crc[1];
    4516:	81 81       	ldd	r24, Z+1	; 0x01
    4518:	de 01       	movw	r26, r28
    451a:	a0 0f       	add	r26, r16
    451c:	b1 1f       	adc	r27, r17
    451e:	57 96       	adiw	r26, 0x17	; 23
    4520:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[2];
    4522:	82 81       	ldd	r24, Z+2	; 0x02
    4524:	de 01       	movw	r26, r28
    4526:	a0 0f       	add	r26, r16
    4528:	b1 1f       	adc	r27, r17
    452a:	58 96       	adiw	r26, 0x18	; 24
    452c:	8c 93       	st	X, r24
    452e:	58 97       	sbiw	r26, 0x18	; 24
		tx_string[cnt+4] = crc[3];
    4530:	83 81       	ldd	r24, Z+3	; 0x03
    4532:	fd 01       	movw	r30, r26
    4534:	81 8f       	std	Z+25, r24	; 0x19
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    4536:	c8 01       	movw	r24, r16
    4538:	05 96       	adiw	r24, 0x05	; 5
    453a:	fe 01       	movw	r30, r28
    453c:	e8 0f       	add	r30, r24
    453e:	f9 1f       	adc	r31, r25
    4540:	2d e0       	ldi	r18, 0x0D	; 13
    4542:	25 8b       	std	Z+21, r18	; 0x15
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    4544:	99 23       	and	r25, r25
    4546:	14 f4       	brge	.+4      	; 0x454c <SendParameter+0x7f0>
    4548:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
    454c:	ae 01       	movw	r20, r28
    454e:	4b 5e       	subi	r20, 0xEB	; 235
    4550:	5f 4f       	sbci	r21, 0xFF	; 255
    4552:	0a 5f       	subi	r16, 0xFA	; 250
    4554:	1f 4f       	sbci	r17, 0xFF	; 255
    4556:	04 0f       	add	r16, r20
    4558:	15 1f       	adc	r17, r21
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    455a:	e7 e5       	ldi	r30, 0x57	; 87
    455c:	f5 e0       	ldi	r31, 0x05	; 5
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    455e:	61 ec       	ldi	r22, 0xC1	; 193
    4560:	70 e0       	ldi	r23, 0x00	; 0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    4562:	30 e0       	ldi	r19, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    4564:	da 01       	movw	r26, r20
    4566:	8d 91       	ld	r24, X+
    4568:	ad 01       	movw	r20, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    456a:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    456c:	21 81       	ldd	r18, Z+1	; 0x01
    456e:	90 81       	ld	r25, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    4570:	29 13       	cpse	r18, r25
    4572:	04 c0       	rjmp	.+8      	; 0x457c <SendParameter+0x820>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    4574:	db 01       	movw	r26, r22
    4576:	9c 91       	ld	r25, X
    4578:	90 62       	ori	r25, 0x20	; 32
    457a:	9c 93       	st	X, r25
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    457c:	90 81       	ld	r25, Z
    457e:	a3 81       	ldd	r26, Z+3	; 0x03
    4580:	b4 81       	ldd	r27, Z+4	; 0x04
    4582:	a9 0f       	add	r26, r25
    4584:	b1 1d       	adc	r27, r1
    4586:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    4588:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    458a:	a2 2f       	mov	r26, r18
    458c:	b0 e0       	ldi	r27, 0x00	; 0
    458e:	82 81       	ldd	r24, Z+2	; 0x02
    4590:	90 e0       	ldi	r25, 0x00	; 0
    4592:	01 97       	sbiw	r24, 0x01	; 1
    4594:	a8 17       	cp	r26, r24
    4596:	b9 07       	cpc	r27, r25
    4598:	11 f0       	breq	.+4      	; 0x459e <SendParameter+0x842>
    459a:	2f 5f       	subi	r18, 0xFF	; 255
    459c:	01 c0       	rjmp	.+2      	; 0x45a0 <SendParameter+0x844>
    459e:	23 2f       	mov	r18, r19
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    45a0:	20 83       	st	Z, r18
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    45a2:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    45a4:	40 17       	cp	r20, r16
    45a6:	51 07       	cpc	r21, r17
    45a8:	e9 f6       	brne	.-70     	; 0x4564 <SendParameter+0x808>
    45aa:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
		ftoa(ch1.I_err, tx_string);
		printStatus(tx_string);
		break;
				
		case 203:	// Send D part of PID-controller 1
		ftoa(ch1.D_err, tx_string);
    45ae:	60 91 73 02 	lds	r22, 0x0273
    45b2:	70 91 74 02 	lds	r23, 0x0274
    45b6:	80 91 75 02 	lds	r24, 0x0275
    45ba:	90 91 76 02 	lds	r25, 0x0276
    45be:	ae 01       	movw	r20, r28
    45c0:	4f 5f       	subi	r20, 0xFF	; 255
    45c2:	5f 4f       	sbci	r21, 0xFF	; 255
    45c4:	44 db       	rcall	.-2424   	; 0x3c4e <ftoa>
		printStatus(tx_string);
    45c6:	ce 01       	movw	r24, r28
    45c8:	01 96       	adiw	r24, 0x01	; 1
    45ca:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
		break;
    45ce:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
		
		case 204:	// Send ch1.TempSetPoint
		ftoa(ch1.TempSetPoint, tx_string);
    45d2:	60 91 63 02 	lds	r22, 0x0263
    45d6:	70 91 64 02 	lds	r23, 0x0264
    45da:	80 91 65 02 	lds	r24, 0x0265
    45de:	90 91 66 02 	lds	r25, 0x0266
    45e2:	ae 01       	movw	r20, r28
    45e4:	4f 5f       	subi	r20, 0xFF	; 255
    45e6:	5f 4f       	sbci	r21, 0xFF	; 255
    45e8:	32 db       	rcall	.-2460   	; 0x3c4e <ftoa>
		printStatus(tx_string);
    45ea:	ce 01       	movw	r24, r28
    45ec:	01 96       	adiw	r24, 0x01	; 1
    45ee:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
		break;
    45f2:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
		
		case 205:	// Send Pgain ch1
		ftoa(ch1.Pgain, tx_string);
    45f6:	60 91 7f 02 	lds	r22, 0x027F
    45fa:	70 91 80 02 	lds	r23, 0x0280
    45fe:	80 91 81 02 	lds	r24, 0x0281
    4602:	90 91 82 02 	lds	r25, 0x0282
    4606:	ae 01       	movw	r20, r28
    4608:	4f 5f       	subi	r20, 0xFF	; 255
    460a:	5f 4f       	sbci	r21, 0xFF	; 255
    460c:	20 db       	rcall	.-2496   	; 0x3c4e <ftoa>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    460e:	81 e2       	ldi	r24, 0x21	; 33
    4610:	8d 8b       	std	Y+21, r24	; 0x15
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    4612:	e9 e3       	ldi	r30, 0x39	; 57
    4614:	f5 e0       	ldi	r31, 0x05	; 5
    4616:	81 81       	ldd	r24, Z+1	; 0x01
    4618:	8e 8b       	std	Y+22, r24	; 0x16
    461a:	82 81       	ldd	r24, Z+2	; 0x02
    461c:	8f 8b       	std	Y+23, r24	; 0x17
    461e:	83 81       	ldd	r24, Z+3	; 0x03
    4620:	88 8f       	std	Y+24, r24	; 0x18
    4622:	ae 01       	movw	r20, r28
    4624:	4f 5f       	subi	r20, 0xFF	; 255
    4626:	5f 4f       	sbci	r21, 0xFF	; 255
    4628:	9e 01       	movw	r18, r28
    462a:	27 5e       	subi	r18, 0xE7	; 231
    462c:	3f 4f       	sbci	r19, 0xFF	; 255
    462e:	00 e0       	ldi	r16, 0x00	; 0
    4630:	10 e0       	ldi	r17, 0x00	; 0
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    4632:	da 01       	movw	r26, r20
    4634:	08 c0       	rjmp	.+16     	; 0x4646 <SendParameter+0x8ea>
	{
		tx_string[cnt+4] = msg_string[cnt];
    4636:	fa 01       	movw	r30, r20
    4638:	81 91       	ld	r24, Z+
    463a:	af 01       	movw	r20, r30
    463c:	f9 01       	movw	r30, r18
    463e:	81 93       	st	Z+, r24
    4640:	9f 01       	movw	r18, r30
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    4642:	0f 5f       	subi	r16, 0xFF	; 255
    4644:	1f 4f       	sbci	r17, 0xFF	; 255
    4646:	fd 01       	movw	r30, r26
    4648:	01 90       	ld	r0, Z+
    464a:	00 20       	and	r0, r0
    464c:	e9 f7       	brne	.-6      	; 0x4648 <SendParameter+0x8ec>
    464e:	cf 01       	movw	r24, r30
    4650:	8a 1b       	sub	r24, r26
    4652:	9b 0b       	sbc	r25, r27
    4654:	02 96       	adiw	r24, 0x02	; 2
    4656:	08 17       	cp	r16, r24
    4658:	19 07       	cpc	r17, r25
    465a:	68 f3       	brcs	.-38     	; 0x4636 <SendParameter+0x8da>
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    465c:	78 01       	movw	r14, r16
    465e:	ff ef       	ldi	r31, 0xFF	; 255
    4660:	ef 1a       	sub	r14, r31
    4662:	ff 0a       	sbc	r15, r31
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    4664:	1e 14       	cp	r1, r14
    4666:	1f 04       	cpc	r1, r15
    4668:	14 f0       	brlt	.+4      	; 0x466e <SendParameter+0x912>
    466a:	0c 94 fa 34 	jmp	0x69f4	; 0x69f4 <SendParameter+0x2c98>
    466e:	fe 01       	movw	r30, r28
    4670:	75 96       	adiw	r30, 0x15	; 21
    4672:	a7 01       	movw	r20, r14
    4674:	4e 0f       	add	r20, r30
    4676:	5f 1f       	adc	r21, r31
    4678:	80 e0       	ldi	r24, 0x00	; 0
    467a:	90 e0       	ldi	r25, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    467c:	b8 e0       	ldi	r27, 0x08	; 8
    467e:	d1 2c       	mov	r13, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    4680:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    4682:	29 2f       	mov	r18, r25
    4684:	33 27       	eor	r19, r19
    4686:	27 fd       	sbrc	r18, 7
    4688:	3a 95       	dec	r19
    468a:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
    468c:	32 2f       	mov	r19, r18
    468e:	22 27       	eor	r18, r18
    4690:	6b 2f       	mov	r22, r27
    4692:	7d 2d       	mov	r23, r13
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    4694:	33 23       	and	r19, r19
    4696:	3c f4       	brge	.+14     	; 0x46a6 <SendParameter+0x94a>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    4698:	22 0f       	add	r18, r18
    469a:	33 1f       	adc	r19, r19
    469c:	a1 e2       	ldi	r26, 0x21	; 33
    469e:	2a 27       	eor	r18, r26
    46a0:	a0 e1       	ldi	r26, 0x10	; 16
    46a2:	3a 27       	eor	r19, r26
    46a4:	02 c0       	rjmp	.+4      	; 0x46aa <SendParameter+0x94e>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    46a6:	22 0f       	add	r18, r18
    46a8:	33 1f       	adc	r19, r19
    46aa:	61 50       	subi	r22, 0x01	; 1
    46ac:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    46ae:	91 f7       	brne	.-28     	; 0x4694 <SendParameter+0x938>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    46b0:	98 2f       	mov	r25, r24
    46b2:	88 27       	eor	r24, r24
    46b4:	82 27       	eor	r24, r18
    46b6:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    46b8:	e4 17       	cp	r30, r20
    46ba:	f5 07       	cpc	r31, r21
    46bc:	09 f7       	brne	.-62     	; 0x4680 <SendParameter+0x924>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    46be:	6c 01       	movw	r12, r24
    46c0:	40 e1       	ldi	r20, 0x10	; 16
    46c2:	6f e2       	ldi	r22, 0x2F	; 47
    46c4:	75 e0       	ldi	r23, 0x05	; 5
    46c6:	0e 94 04 3b 	call	0x7608	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    46ca:	8f e2       	ldi	r24, 0x2F	; 47
    46cc:	95 e0       	ldi	r25, 0x05	; 5
    46ce:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <strupr>
	if(crcXmodem < 0x10)
    46d2:	b0 e1       	ldi	r27, 0x10	; 16
    46d4:	cb 16       	cp	r12, r27
    46d6:	d1 04       	cpc	r13, r1
    46d8:	98 f4       	brcc	.+38     	; 0x4700 <SendParameter+0x9a4>
	{
		tx_string[cnt+4] = crc[0];
    46da:	80 91 2f 05 	lds	r24, 0x052F
    46de:	fe 01       	movw	r30, r28
    46e0:	e0 0f       	add	r30, r16
    46e2:	f1 1f       	adc	r31, r17
    46e4:	81 8f       	std	Z+25, r24	; 0x19
		tx_string[cnt+3] = '0';
    46e6:	80 e3       	ldi	r24, 0x30	; 48
    46e8:	fe 01       	movw	r30, r28
    46ea:	e0 0f       	add	r30, r16
    46ec:	f1 1f       	adc	r31, r17
    46ee:	80 8f       	std	Z+24, r24	; 0x18
		tx_string[cnt+2] = '0';
    46f0:	fe 01       	movw	r30, r28
    46f2:	e0 0f       	add	r30, r16
    46f4:	f1 1f       	adc	r31, r17
    46f6:	87 8b       	std	Z+23, r24	; 0x17
		tx_string[cnt+1] = '0';
    46f8:	fe 01       	movw	r30, r28
    46fa:	ee 0d       	add	r30, r14
    46fc:	ff 1d       	adc	r31, r15
    46fe:	85 8b       	std	Z+21, r24	; 0x15
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    4700:	c6 01       	movw	r24, r12
    4702:	40 97       	sbiw	r24, 0x10	; 16
    4704:	80 3f       	cpi	r24, 0xF0	; 240
    4706:	91 05       	cpc	r25, r1
    4708:	b8 f4       	brcc	.+46     	; 0x4738 <SendParameter+0x9dc>
	{
		tx_string[cnt+4] = crc[1];
    470a:	af e2       	ldi	r26, 0x2F	; 47
    470c:	b5 e0       	ldi	r27, 0x05	; 5
    470e:	11 96       	adiw	r26, 0x01	; 1
    4710:	8c 91       	ld	r24, X
    4712:	11 97       	sbiw	r26, 0x01	; 1
    4714:	fe 01       	movw	r30, r28
    4716:	e0 0f       	add	r30, r16
    4718:	f1 1f       	adc	r31, r17
    471a:	81 8f       	std	Z+25, r24	; 0x19
		tx_string[cnt+3] = crc[0];
    471c:	8c 91       	ld	r24, X
    471e:	fe 01       	movw	r30, r28
    4720:	e0 0f       	add	r30, r16
    4722:	f1 1f       	adc	r31, r17
    4724:	80 8f       	std	Z+24, r24	; 0x18
		tx_string[cnt+2] = '0';
    4726:	80 e3       	ldi	r24, 0x30	; 48
    4728:	fe 01       	movw	r30, r28
    472a:	e0 0f       	add	r30, r16
    472c:	f1 1f       	adc	r31, r17
    472e:	87 8b       	std	Z+23, r24	; 0x17
		tx_string[cnt+1] = '0';		
    4730:	fe 01       	movw	r30, r28
    4732:	ee 0d       	add	r30, r14
    4734:	ff 1d       	adc	r31, r15
    4736:	85 8b       	std	Z+21, r24	; 0x15
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    4738:	c6 01       	movw	r24, r12
    473a:	9a 95       	dec	r25
    473c:	81 15       	cp	r24, r1
    473e:	9f 40       	sbci	r25, 0x0F	; 15
    4740:	b8 f4       	brcc	.+46     	; 0x4770 <SendParameter+0xa14>
	{
		tx_string[cnt+4] = crc[2];
    4742:	ef e2       	ldi	r30, 0x2F	; 47
    4744:	f5 e0       	ldi	r31, 0x05	; 5
    4746:	82 81       	ldd	r24, Z+2	; 0x02
    4748:	de 01       	movw	r26, r28
    474a:	a0 0f       	add	r26, r16
    474c:	b1 1f       	adc	r27, r17
    474e:	59 96       	adiw	r26, 0x19	; 25
    4750:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[1];
    4752:	81 81       	ldd	r24, Z+1	; 0x01
    4754:	de 01       	movw	r26, r28
    4756:	a0 0f       	add	r26, r16
    4758:	b1 1f       	adc	r27, r17
    475a:	58 96       	adiw	r26, 0x18	; 24
    475c:	8c 93       	st	X, r24
    475e:	58 97       	sbiw	r26, 0x18	; 24
		tx_string[cnt+2] = crc[0];
    4760:	80 81       	ld	r24, Z
    4762:	fd 01       	movw	r30, r26
    4764:	87 8b       	std	Z+23, r24	; 0x17
		tx_string[cnt+1] = '0';		
    4766:	80 e3       	ldi	r24, 0x30	; 48
    4768:	fe 01       	movw	r30, r28
    476a:	ee 0d       	add	r30, r14
    476c:	ff 1d       	adc	r31, r15
    476e:	85 8b       	std	Z+21, r24	; 0x15
	}
	if(crcXmodem >= 0x1000)
    4770:	c1 14       	cp	r12, r1
    4772:	f0 e1       	ldi	r31, 0x10	; 16
    4774:	df 06       	cpc	r13, r31
    4776:	c0 f0       	brcs	.+48     	; 0x47a8 <SendParameter+0xa4c>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    4778:	de 01       	movw	r26, r28
    477a:	ae 0d       	add	r26, r14
    477c:	bf 1d       	adc	r27, r15
    477e:	ef e2       	ldi	r30, 0x2F	; 47
    4780:	f5 e0       	ldi	r31, 0x05	; 5
    4782:	80 81       	ld	r24, Z
    4784:	55 96       	adiw	r26, 0x15	; 21
    4786:	8c 93       	st	X, r24
		tx_string[cnt+2] = crc[1];
    4788:	81 81       	ldd	r24, Z+1	; 0x01
    478a:	de 01       	movw	r26, r28
    478c:	a0 0f       	add	r26, r16
    478e:	b1 1f       	adc	r27, r17
    4790:	57 96       	adiw	r26, 0x17	; 23
    4792:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[2];
    4794:	82 81       	ldd	r24, Z+2	; 0x02
    4796:	de 01       	movw	r26, r28
    4798:	a0 0f       	add	r26, r16
    479a:	b1 1f       	adc	r27, r17
    479c:	58 96       	adiw	r26, 0x18	; 24
    479e:	8c 93       	st	X, r24
    47a0:	58 97       	sbiw	r26, 0x18	; 24
		tx_string[cnt+4] = crc[3];
    47a2:	83 81       	ldd	r24, Z+3	; 0x03
    47a4:	fd 01       	movw	r30, r26
    47a6:	81 8f       	std	Z+25, r24	; 0x19
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    47a8:	c8 01       	movw	r24, r16
    47aa:	05 96       	adiw	r24, 0x05	; 5
    47ac:	fe 01       	movw	r30, r28
    47ae:	e8 0f       	add	r30, r24
    47b0:	f9 1f       	adc	r31, r25
    47b2:	2d e0       	ldi	r18, 0x0D	; 13
    47b4:	25 8b       	std	Z+21, r18	; 0x15
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    47b6:	99 23       	and	r25, r25
    47b8:	14 f4       	brge	.+4      	; 0x47be <SendParameter+0xa62>
    47ba:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
    47be:	ae 01       	movw	r20, r28
    47c0:	4b 5e       	subi	r20, 0xEB	; 235
    47c2:	5f 4f       	sbci	r21, 0xFF	; 255
    47c4:	0a 5f       	subi	r16, 0xFA	; 250
    47c6:	1f 4f       	sbci	r17, 0xFF	; 255
    47c8:	04 0f       	add	r16, r20
    47ca:	15 1f       	adc	r17, r21
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    47cc:	e7 e5       	ldi	r30, 0x57	; 87
    47ce:	f5 e0       	ldi	r31, 0x05	; 5
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    47d0:	61 ec       	ldi	r22, 0xC1	; 193
    47d2:	70 e0       	ldi	r23, 0x00	; 0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    47d4:	30 e0       	ldi	r19, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    47d6:	da 01       	movw	r26, r20
    47d8:	8d 91       	ld	r24, X+
    47da:	ad 01       	movw	r20, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    47dc:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    47de:	21 81       	ldd	r18, Z+1	; 0x01
    47e0:	90 81       	ld	r25, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    47e2:	29 13       	cpse	r18, r25
    47e4:	04 c0       	rjmp	.+8      	; 0x47ee <SendParameter+0xa92>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    47e6:	db 01       	movw	r26, r22
    47e8:	9c 91       	ld	r25, X
    47ea:	90 62       	ori	r25, 0x20	; 32
    47ec:	9c 93       	st	X, r25
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    47ee:	90 81       	ld	r25, Z
    47f0:	a3 81       	ldd	r26, Z+3	; 0x03
    47f2:	b4 81       	ldd	r27, Z+4	; 0x04
    47f4:	a9 0f       	add	r26, r25
    47f6:	b1 1d       	adc	r27, r1
    47f8:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    47fa:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    47fc:	a2 2f       	mov	r26, r18
    47fe:	b0 e0       	ldi	r27, 0x00	; 0
    4800:	82 81       	ldd	r24, Z+2	; 0x02
    4802:	90 e0       	ldi	r25, 0x00	; 0
    4804:	01 97       	sbiw	r24, 0x01	; 1
    4806:	a8 17       	cp	r26, r24
    4808:	b9 07       	cpc	r27, r25
    480a:	11 f0       	breq	.+4      	; 0x4810 <SendParameter+0xab4>
    480c:	2f 5f       	subi	r18, 0xFF	; 255
    480e:	01 c0       	rjmp	.+2      	; 0x4812 <SendParameter+0xab6>
    4810:	23 2f       	mov	r18, r19
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    4812:	20 83       	st	Z, r18
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    4814:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    4816:	40 17       	cp	r20, r16
    4818:	51 07       	cpc	r21, r17
    481a:	e9 f6       	brne	.-70     	; 0x47d6 <SendParameter+0xa7a>
    481c:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
		ftoa(ch1.Pgain, tx_string);
		printStatus(tx_string);
		break;
		
		case 206:	// Send Igain ch1
		ftoa(ch1.Igain, tx_string);
    4820:	60 91 83 02 	lds	r22, 0x0283
    4824:	70 91 84 02 	lds	r23, 0x0284
    4828:	80 91 85 02 	lds	r24, 0x0285
    482c:	90 91 86 02 	lds	r25, 0x0286
    4830:	ae 01       	movw	r20, r28
    4832:	4f 5f       	subi	r20, 0xFF	; 255
    4834:	5f 4f       	sbci	r21, 0xFF	; 255
    4836:	0b da       	rcall	.-3050   	; 0x3c4e <ftoa>
		printStatus(tx_string);
    4838:	ce 01       	movw	r24, r28
    483a:	01 96       	adiw	r24, 0x01	; 1
    483c:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
		break;
    4840:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
		
		case 207:	// Send Dgain ch1
		ftoa(ch1.Dgain, tx_string);
    4844:	60 91 87 02 	lds	r22, 0x0287
    4848:	70 91 88 02 	lds	r23, 0x0288
    484c:	80 91 89 02 	lds	r24, 0x0289
    4850:	90 91 8a 02 	lds	r25, 0x028A
    4854:	ae 01       	movw	r20, r28
    4856:	4f 5f       	subi	r20, 0xFF	; 255
    4858:	5f 4f       	sbci	r21, 0xFF	; 255
    485a:	f9 d9       	rcall	.-3086   	; 0x3c4e <ftoa>
		printStatus(tx_string);
    485c:	ce 01       	movw	r24, r28
    485e:	01 96       	adiw	r24, 0x01	; 1
    4860:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
		break;
    4864:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
		
		case 208:	// Send TemperatureWindow
		ftoa(ch1.tempErrorWin, tx_string);
    4868:	60 91 b7 02 	lds	r22, 0x02B7
    486c:	70 91 b8 02 	lds	r23, 0x02B8
    4870:	80 91 b9 02 	lds	r24, 0x02B9
    4874:	90 91 ba 02 	lds	r25, 0x02BA
    4878:	ae 01       	movw	r20, r28
    487a:	4f 5f       	subi	r20, 0xFF	; 255
    487c:	5f 4f       	sbci	r21, 0xFF	; 255
    487e:	e7 d9       	rcall	.-3122   	; 0x3c4e <ftoa>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    4880:	81 e2       	ldi	r24, 0x21	; 33
    4882:	8d 8b       	std	Y+21, r24	; 0x15
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    4884:	e9 e3       	ldi	r30, 0x39	; 57
    4886:	f5 e0       	ldi	r31, 0x05	; 5
    4888:	81 81       	ldd	r24, Z+1	; 0x01
    488a:	8e 8b       	std	Y+22, r24	; 0x16
    488c:	82 81       	ldd	r24, Z+2	; 0x02
    488e:	8f 8b       	std	Y+23, r24	; 0x17
    4890:	83 81       	ldd	r24, Z+3	; 0x03
    4892:	88 8f       	std	Y+24, r24	; 0x18
    4894:	ae 01       	movw	r20, r28
    4896:	4f 5f       	subi	r20, 0xFF	; 255
    4898:	5f 4f       	sbci	r21, 0xFF	; 255
    489a:	9e 01       	movw	r18, r28
    489c:	27 5e       	subi	r18, 0xE7	; 231
    489e:	3f 4f       	sbci	r19, 0xFF	; 255
    48a0:	00 e0       	ldi	r16, 0x00	; 0
    48a2:	10 e0       	ldi	r17, 0x00	; 0
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    48a4:	da 01       	movw	r26, r20
    48a6:	08 c0       	rjmp	.+16     	; 0x48b8 <SendParameter+0xb5c>
	{
		tx_string[cnt+4] = msg_string[cnt];
    48a8:	fa 01       	movw	r30, r20
    48aa:	81 91       	ld	r24, Z+
    48ac:	af 01       	movw	r20, r30
    48ae:	f9 01       	movw	r30, r18
    48b0:	81 93       	st	Z+, r24
    48b2:	9f 01       	movw	r18, r30
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    48b4:	0f 5f       	subi	r16, 0xFF	; 255
    48b6:	1f 4f       	sbci	r17, 0xFF	; 255
    48b8:	fd 01       	movw	r30, r26
    48ba:	01 90       	ld	r0, Z+
    48bc:	00 20       	and	r0, r0
    48be:	e9 f7       	brne	.-6      	; 0x48ba <SendParameter+0xb5e>
    48c0:	cf 01       	movw	r24, r30
    48c2:	8a 1b       	sub	r24, r26
    48c4:	9b 0b       	sbc	r25, r27
    48c6:	02 96       	adiw	r24, 0x02	; 2
    48c8:	08 17       	cp	r16, r24
    48ca:	19 07       	cpc	r17, r25
    48cc:	68 f3       	brcs	.-38     	; 0x48a8 <SendParameter+0xb4c>
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    48ce:	78 01       	movw	r14, r16
    48d0:	ff ef       	ldi	r31, 0xFF	; 255
    48d2:	ef 1a       	sub	r14, r31
    48d4:	ff 0a       	sbc	r15, r31
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    48d6:	1e 14       	cp	r1, r14
    48d8:	1f 04       	cpc	r1, r15
    48da:	14 f0       	brlt	.+4      	; 0x48e0 <SendParameter+0xb84>
    48dc:	0c 94 07 35 	jmp	0x6a0e	; 0x6a0e <SendParameter+0x2cb2>
    48e0:	fe 01       	movw	r30, r28
    48e2:	75 96       	adiw	r30, 0x15	; 21
    48e4:	a7 01       	movw	r20, r14
    48e6:	4e 0f       	add	r20, r30
    48e8:	5f 1f       	adc	r21, r31
    48ea:	80 e0       	ldi	r24, 0x00	; 0
    48ec:	90 e0       	ldi	r25, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    48ee:	b8 e0       	ldi	r27, 0x08	; 8
    48f0:	d1 2c       	mov	r13, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    48f2:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    48f4:	29 2f       	mov	r18, r25
    48f6:	33 27       	eor	r19, r19
    48f8:	27 fd       	sbrc	r18, 7
    48fa:	3a 95       	dec	r19
    48fc:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
    48fe:	32 2f       	mov	r19, r18
    4900:	22 27       	eor	r18, r18
    4902:	6b 2f       	mov	r22, r27
    4904:	7d 2d       	mov	r23, r13
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    4906:	33 23       	and	r19, r19
    4908:	3c f4       	brge	.+14     	; 0x4918 <SendParameter+0xbbc>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    490a:	22 0f       	add	r18, r18
    490c:	33 1f       	adc	r19, r19
    490e:	a1 e2       	ldi	r26, 0x21	; 33
    4910:	2a 27       	eor	r18, r26
    4912:	a0 e1       	ldi	r26, 0x10	; 16
    4914:	3a 27       	eor	r19, r26
    4916:	02 c0       	rjmp	.+4      	; 0x491c <SendParameter+0xbc0>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    4918:	22 0f       	add	r18, r18
    491a:	33 1f       	adc	r19, r19
    491c:	61 50       	subi	r22, 0x01	; 1
    491e:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    4920:	91 f7       	brne	.-28     	; 0x4906 <SendParameter+0xbaa>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    4922:	98 2f       	mov	r25, r24
    4924:	88 27       	eor	r24, r24
    4926:	82 27       	eor	r24, r18
    4928:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    492a:	e4 17       	cp	r30, r20
    492c:	f5 07       	cpc	r31, r21
    492e:	09 f7       	brne	.-62     	; 0x48f2 <SendParameter+0xb96>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    4930:	6c 01       	movw	r12, r24
    4932:	40 e1       	ldi	r20, 0x10	; 16
    4934:	6f e2       	ldi	r22, 0x2F	; 47
    4936:	75 e0       	ldi	r23, 0x05	; 5
    4938:	0e 94 04 3b 	call	0x7608	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    493c:	8f e2       	ldi	r24, 0x2F	; 47
    493e:	95 e0       	ldi	r25, 0x05	; 5
    4940:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <strupr>
	if(crcXmodem < 0x10)
    4944:	b0 e1       	ldi	r27, 0x10	; 16
    4946:	cb 16       	cp	r12, r27
    4948:	d1 04       	cpc	r13, r1
    494a:	98 f4       	brcc	.+38     	; 0x4972 <SendParameter+0xc16>
	{
		tx_string[cnt+4] = crc[0];
    494c:	80 91 2f 05 	lds	r24, 0x052F
    4950:	fe 01       	movw	r30, r28
    4952:	e0 0f       	add	r30, r16
    4954:	f1 1f       	adc	r31, r17
    4956:	81 8f       	std	Z+25, r24	; 0x19
		tx_string[cnt+3] = '0';
    4958:	80 e3       	ldi	r24, 0x30	; 48
    495a:	fe 01       	movw	r30, r28
    495c:	e0 0f       	add	r30, r16
    495e:	f1 1f       	adc	r31, r17
    4960:	80 8f       	std	Z+24, r24	; 0x18
		tx_string[cnt+2] = '0';
    4962:	fe 01       	movw	r30, r28
    4964:	e0 0f       	add	r30, r16
    4966:	f1 1f       	adc	r31, r17
    4968:	87 8b       	std	Z+23, r24	; 0x17
		tx_string[cnt+1] = '0';
    496a:	fe 01       	movw	r30, r28
    496c:	ee 0d       	add	r30, r14
    496e:	ff 1d       	adc	r31, r15
    4970:	85 8b       	std	Z+21, r24	; 0x15
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    4972:	c6 01       	movw	r24, r12
    4974:	40 97       	sbiw	r24, 0x10	; 16
    4976:	80 3f       	cpi	r24, 0xF0	; 240
    4978:	91 05       	cpc	r25, r1
    497a:	b8 f4       	brcc	.+46     	; 0x49aa <SendParameter+0xc4e>
	{
		tx_string[cnt+4] = crc[1];
    497c:	af e2       	ldi	r26, 0x2F	; 47
    497e:	b5 e0       	ldi	r27, 0x05	; 5
    4980:	11 96       	adiw	r26, 0x01	; 1
    4982:	8c 91       	ld	r24, X
    4984:	11 97       	sbiw	r26, 0x01	; 1
    4986:	fe 01       	movw	r30, r28
    4988:	e0 0f       	add	r30, r16
    498a:	f1 1f       	adc	r31, r17
    498c:	81 8f       	std	Z+25, r24	; 0x19
		tx_string[cnt+3] = crc[0];
    498e:	8c 91       	ld	r24, X
    4990:	fe 01       	movw	r30, r28
    4992:	e0 0f       	add	r30, r16
    4994:	f1 1f       	adc	r31, r17
    4996:	80 8f       	std	Z+24, r24	; 0x18
		tx_string[cnt+2] = '0';
    4998:	80 e3       	ldi	r24, 0x30	; 48
    499a:	fe 01       	movw	r30, r28
    499c:	e0 0f       	add	r30, r16
    499e:	f1 1f       	adc	r31, r17
    49a0:	87 8b       	std	Z+23, r24	; 0x17
		tx_string[cnt+1] = '0';		
    49a2:	fe 01       	movw	r30, r28
    49a4:	ee 0d       	add	r30, r14
    49a6:	ff 1d       	adc	r31, r15
    49a8:	85 8b       	std	Z+21, r24	; 0x15
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    49aa:	c6 01       	movw	r24, r12
    49ac:	9a 95       	dec	r25
    49ae:	81 15       	cp	r24, r1
    49b0:	9f 40       	sbci	r25, 0x0F	; 15
    49b2:	b8 f4       	brcc	.+46     	; 0x49e2 <SendParameter+0xc86>
	{
		tx_string[cnt+4] = crc[2];
    49b4:	ef e2       	ldi	r30, 0x2F	; 47
    49b6:	f5 e0       	ldi	r31, 0x05	; 5
    49b8:	82 81       	ldd	r24, Z+2	; 0x02
    49ba:	de 01       	movw	r26, r28
    49bc:	a0 0f       	add	r26, r16
    49be:	b1 1f       	adc	r27, r17
    49c0:	59 96       	adiw	r26, 0x19	; 25
    49c2:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[1];
    49c4:	81 81       	ldd	r24, Z+1	; 0x01
    49c6:	de 01       	movw	r26, r28
    49c8:	a0 0f       	add	r26, r16
    49ca:	b1 1f       	adc	r27, r17
    49cc:	58 96       	adiw	r26, 0x18	; 24
    49ce:	8c 93       	st	X, r24
    49d0:	58 97       	sbiw	r26, 0x18	; 24
		tx_string[cnt+2] = crc[0];
    49d2:	80 81       	ld	r24, Z
    49d4:	fd 01       	movw	r30, r26
    49d6:	87 8b       	std	Z+23, r24	; 0x17
		tx_string[cnt+1] = '0';		
    49d8:	80 e3       	ldi	r24, 0x30	; 48
    49da:	fe 01       	movw	r30, r28
    49dc:	ee 0d       	add	r30, r14
    49de:	ff 1d       	adc	r31, r15
    49e0:	85 8b       	std	Z+21, r24	; 0x15
	}
	if(crcXmodem >= 0x1000)
    49e2:	c1 14       	cp	r12, r1
    49e4:	f0 e1       	ldi	r31, 0x10	; 16
    49e6:	df 06       	cpc	r13, r31
    49e8:	c0 f0       	brcs	.+48     	; 0x4a1a <SendParameter+0xcbe>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    49ea:	de 01       	movw	r26, r28
    49ec:	ae 0d       	add	r26, r14
    49ee:	bf 1d       	adc	r27, r15
    49f0:	ef e2       	ldi	r30, 0x2F	; 47
    49f2:	f5 e0       	ldi	r31, 0x05	; 5
    49f4:	80 81       	ld	r24, Z
    49f6:	55 96       	adiw	r26, 0x15	; 21
    49f8:	8c 93       	st	X, r24
		tx_string[cnt+2] = crc[1];
    49fa:	81 81       	ldd	r24, Z+1	; 0x01
    49fc:	de 01       	movw	r26, r28
    49fe:	a0 0f       	add	r26, r16
    4a00:	b1 1f       	adc	r27, r17
    4a02:	57 96       	adiw	r26, 0x17	; 23
    4a04:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[2];
    4a06:	82 81       	ldd	r24, Z+2	; 0x02
    4a08:	de 01       	movw	r26, r28
    4a0a:	a0 0f       	add	r26, r16
    4a0c:	b1 1f       	adc	r27, r17
    4a0e:	58 96       	adiw	r26, 0x18	; 24
    4a10:	8c 93       	st	X, r24
    4a12:	58 97       	sbiw	r26, 0x18	; 24
		tx_string[cnt+4] = crc[3];
    4a14:	83 81       	ldd	r24, Z+3	; 0x03
    4a16:	fd 01       	movw	r30, r26
    4a18:	81 8f       	std	Z+25, r24	; 0x19
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    4a1a:	c8 01       	movw	r24, r16
    4a1c:	05 96       	adiw	r24, 0x05	; 5
    4a1e:	fe 01       	movw	r30, r28
    4a20:	e8 0f       	add	r30, r24
    4a22:	f9 1f       	adc	r31, r25
    4a24:	2d e0       	ldi	r18, 0x0D	; 13
    4a26:	25 8b       	std	Z+21, r18	; 0x15
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    4a28:	99 23       	and	r25, r25
    4a2a:	14 f4       	brge	.+4      	; 0x4a30 <SendParameter+0xcd4>
    4a2c:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
    4a30:	ae 01       	movw	r20, r28
    4a32:	4b 5e       	subi	r20, 0xEB	; 235
    4a34:	5f 4f       	sbci	r21, 0xFF	; 255
    4a36:	0a 5f       	subi	r16, 0xFA	; 250
    4a38:	1f 4f       	sbci	r17, 0xFF	; 255
    4a3a:	04 0f       	add	r16, r20
    4a3c:	15 1f       	adc	r17, r21
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    4a3e:	e7 e5       	ldi	r30, 0x57	; 87
    4a40:	f5 e0       	ldi	r31, 0x05	; 5
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    4a42:	61 ec       	ldi	r22, 0xC1	; 193
    4a44:	70 e0       	ldi	r23, 0x00	; 0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    4a46:	30 e0       	ldi	r19, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    4a48:	da 01       	movw	r26, r20
    4a4a:	8d 91       	ld	r24, X+
    4a4c:	ad 01       	movw	r20, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    4a4e:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    4a50:	21 81       	ldd	r18, Z+1	; 0x01
    4a52:	90 81       	ld	r25, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    4a54:	29 13       	cpse	r18, r25
    4a56:	04 c0       	rjmp	.+8      	; 0x4a60 <SendParameter+0xd04>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    4a58:	db 01       	movw	r26, r22
    4a5a:	9c 91       	ld	r25, X
    4a5c:	90 62       	ori	r25, 0x20	; 32
    4a5e:	9c 93       	st	X, r25
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    4a60:	90 81       	ld	r25, Z
    4a62:	a3 81       	ldd	r26, Z+3	; 0x03
    4a64:	b4 81       	ldd	r27, Z+4	; 0x04
    4a66:	a9 0f       	add	r26, r25
    4a68:	b1 1d       	adc	r27, r1
    4a6a:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    4a6c:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    4a6e:	a2 2f       	mov	r26, r18
    4a70:	b0 e0       	ldi	r27, 0x00	; 0
    4a72:	82 81       	ldd	r24, Z+2	; 0x02
    4a74:	90 e0       	ldi	r25, 0x00	; 0
    4a76:	01 97       	sbiw	r24, 0x01	; 1
    4a78:	a8 17       	cp	r26, r24
    4a7a:	b9 07       	cpc	r27, r25
    4a7c:	11 f0       	breq	.+4      	; 0x4a82 <SendParameter+0xd26>
    4a7e:	2f 5f       	subi	r18, 0xFF	; 255
    4a80:	01 c0       	rjmp	.+2      	; 0x4a84 <SendParameter+0xd28>
    4a82:	23 2f       	mov	r18, r19
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    4a84:	20 83       	st	Z, r18
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    4a86:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    4a88:	40 17       	cp	r20, r16
    4a8a:	51 07       	cpc	r21, r17
    4a8c:	e9 f6       	brne	.-70     	; 0x4a48 <SendParameter+0xcec>
    4a8e:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
		ftoa(ch1.tempErrorWin, tx_string);
		printStatus(tx_string);
		break;
		
		case 209:	// Send SettleTimeTemperature
		itoa(ch1.tempSettleTime, tx_string, 10);
    4a92:	80 91 bd 02 	lds	r24, 0x02BD
    4a96:	90 91 be 02 	lds	r25, 0x02BE
    4a9a:	4a e0       	ldi	r20, 0x0A	; 10
    4a9c:	be 01       	movw	r22, r28
    4a9e:	6f 5f       	subi	r22, 0xFF	; 255
    4aa0:	7f 4f       	sbci	r23, 0xFF	; 255
    4aa2:	0e 94 04 3b 	call	0x7608	; 0x7608 <__itoa_ncheck>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    4aa6:	81 e2       	ldi	r24, 0x21	; 33
    4aa8:	8d 8b       	std	Y+21, r24	; 0x15
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    4aaa:	e9 e3       	ldi	r30, 0x39	; 57
    4aac:	f5 e0       	ldi	r31, 0x05	; 5
    4aae:	81 81       	ldd	r24, Z+1	; 0x01
    4ab0:	8e 8b       	std	Y+22, r24	; 0x16
    4ab2:	82 81       	ldd	r24, Z+2	; 0x02
    4ab4:	8f 8b       	std	Y+23, r24	; 0x17
    4ab6:	83 81       	ldd	r24, Z+3	; 0x03
    4ab8:	88 8f       	std	Y+24, r24	; 0x18
    4aba:	ae 01       	movw	r20, r28
    4abc:	4f 5f       	subi	r20, 0xFF	; 255
    4abe:	5f 4f       	sbci	r21, 0xFF	; 255
    4ac0:	9e 01       	movw	r18, r28
    4ac2:	27 5e       	subi	r18, 0xE7	; 231
    4ac4:	3f 4f       	sbci	r19, 0xFF	; 255
    4ac6:	00 e0       	ldi	r16, 0x00	; 0
    4ac8:	10 e0       	ldi	r17, 0x00	; 0
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    4aca:	da 01       	movw	r26, r20
    4acc:	08 c0       	rjmp	.+16     	; 0x4ade <SendParameter+0xd82>
	{
		tx_string[cnt+4] = msg_string[cnt];
    4ace:	fa 01       	movw	r30, r20
    4ad0:	81 91       	ld	r24, Z+
    4ad2:	af 01       	movw	r20, r30
    4ad4:	f9 01       	movw	r30, r18
    4ad6:	81 93       	st	Z+, r24
    4ad8:	9f 01       	movw	r18, r30
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    4ada:	0f 5f       	subi	r16, 0xFF	; 255
    4adc:	1f 4f       	sbci	r17, 0xFF	; 255
    4ade:	fd 01       	movw	r30, r26
    4ae0:	01 90       	ld	r0, Z+
    4ae2:	00 20       	and	r0, r0
    4ae4:	e9 f7       	brne	.-6      	; 0x4ae0 <SendParameter+0xd84>
    4ae6:	cf 01       	movw	r24, r30
    4ae8:	8a 1b       	sub	r24, r26
    4aea:	9b 0b       	sbc	r25, r27
    4aec:	02 96       	adiw	r24, 0x02	; 2
    4aee:	08 17       	cp	r16, r24
    4af0:	19 07       	cpc	r17, r25
    4af2:	68 f3       	brcs	.-38     	; 0x4ace <SendParameter+0xd72>
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    4af4:	78 01       	movw	r14, r16
    4af6:	ff ef       	ldi	r31, 0xFF	; 255
    4af8:	ef 1a       	sub	r14, r31
    4afa:	ff 0a       	sbc	r15, r31
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    4afc:	1e 14       	cp	r1, r14
    4afe:	1f 04       	cpc	r1, r15
    4b00:	14 f0       	brlt	.+4      	; 0x4b06 <SendParameter+0xdaa>
    4b02:	0c 94 14 35 	jmp	0x6a28	; 0x6a28 <SendParameter+0x2ccc>
    4b06:	fe 01       	movw	r30, r28
    4b08:	75 96       	adiw	r30, 0x15	; 21
    4b0a:	a7 01       	movw	r20, r14
    4b0c:	4e 0f       	add	r20, r30
    4b0e:	5f 1f       	adc	r21, r31
    4b10:	80 e0       	ldi	r24, 0x00	; 0
    4b12:	90 e0       	ldi	r25, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    4b14:	b8 e0       	ldi	r27, 0x08	; 8
    4b16:	d1 2c       	mov	r13, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    4b18:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    4b1a:	29 2f       	mov	r18, r25
    4b1c:	33 27       	eor	r19, r19
    4b1e:	27 fd       	sbrc	r18, 7
    4b20:	3a 95       	dec	r19
    4b22:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
    4b24:	32 2f       	mov	r19, r18
    4b26:	22 27       	eor	r18, r18
    4b28:	6b 2f       	mov	r22, r27
    4b2a:	7d 2d       	mov	r23, r13
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    4b2c:	33 23       	and	r19, r19
    4b2e:	3c f4       	brge	.+14     	; 0x4b3e <SendParameter+0xde2>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    4b30:	22 0f       	add	r18, r18
    4b32:	33 1f       	adc	r19, r19
    4b34:	a1 e2       	ldi	r26, 0x21	; 33
    4b36:	2a 27       	eor	r18, r26
    4b38:	a0 e1       	ldi	r26, 0x10	; 16
    4b3a:	3a 27       	eor	r19, r26
    4b3c:	02 c0       	rjmp	.+4      	; 0x4b42 <SendParameter+0xde6>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    4b3e:	22 0f       	add	r18, r18
    4b40:	33 1f       	adc	r19, r19
    4b42:	61 50       	subi	r22, 0x01	; 1
    4b44:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    4b46:	91 f7       	brne	.-28     	; 0x4b2c <SendParameter+0xdd0>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    4b48:	98 2f       	mov	r25, r24
    4b4a:	88 27       	eor	r24, r24
    4b4c:	82 27       	eor	r24, r18
    4b4e:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    4b50:	e4 17       	cp	r30, r20
    4b52:	f5 07       	cpc	r31, r21
    4b54:	09 f7       	brne	.-62     	; 0x4b18 <SendParameter+0xdbc>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    4b56:	6c 01       	movw	r12, r24
    4b58:	40 e1       	ldi	r20, 0x10	; 16
    4b5a:	6f e2       	ldi	r22, 0x2F	; 47
    4b5c:	75 e0       	ldi	r23, 0x05	; 5
    4b5e:	0e 94 04 3b 	call	0x7608	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    4b62:	8f e2       	ldi	r24, 0x2F	; 47
    4b64:	95 e0       	ldi	r25, 0x05	; 5
    4b66:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <strupr>
	if(crcXmodem < 0x10)
    4b6a:	b0 e1       	ldi	r27, 0x10	; 16
    4b6c:	cb 16       	cp	r12, r27
    4b6e:	d1 04       	cpc	r13, r1
    4b70:	98 f4       	brcc	.+38     	; 0x4b98 <SendParameter+0xe3c>
	{
		tx_string[cnt+4] = crc[0];
    4b72:	80 91 2f 05 	lds	r24, 0x052F
    4b76:	fe 01       	movw	r30, r28
    4b78:	e0 0f       	add	r30, r16
    4b7a:	f1 1f       	adc	r31, r17
    4b7c:	81 8f       	std	Z+25, r24	; 0x19
		tx_string[cnt+3] = '0';
    4b7e:	80 e3       	ldi	r24, 0x30	; 48
    4b80:	fe 01       	movw	r30, r28
    4b82:	e0 0f       	add	r30, r16
    4b84:	f1 1f       	adc	r31, r17
    4b86:	80 8f       	std	Z+24, r24	; 0x18
		tx_string[cnt+2] = '0';
    4b88:	fe 01       	movw	r30, r28
    4b8a:	e0 0f       	add	r30, r16
    4b8c:	f1 1f       	adc	r31, r17
    4b8e:	87 8b       	std	Z+23, r24	; 0x17
		tx_string[cnt+1] = '0';
    4b90:	fe 01       	movw	r30, r28
    4b92:	ee 0d       	add	r30, r14
    4b94:	ff 1d       	adc	r31, r15
    4b96:	85 8b       	std	Z+21, r24	; 0x15
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    4b98:	c6 01       	movw	r24, r12
    4b9a:	40 97       	sbiw	r24, 0x10	; 16
    4b9c:	80 3f       	cpi	r24, 0xF0	; 240
    4b9e:	91 05       	cpc	r25, r1
    4ba0:	b8 f4       	brcc	.+46     	; 0x4bd0 <SendParameter+0xe74>
	{
		tx_string[cnt+4] = crc[1];
    4ba2:	af e2       	ldi	r26, 0x2F	; 47
    4ba4:	b5 e0       	ldi	r27, 0x05	; 5
    4ba6:	11 96       	adiw	r26, 0x01	; 1
    4ba8:	8c 91       	ld	r24, X
    4baa:	11 97       	sbiw	r26, 0x01	; 1
    4bac:	fe 01       	movw	r30, r28
    4bae:	e0 0f       	add	r30, r16
    4bb0:	f1 1f       	adc	r31, r17
    4bb2:	81 8f       	std	Z+25, r24	; 0x19
		tx_string[cnt+3] = crc[0];
    4bb4:	8c 91       	ld	r24, X
    4bb6:	fe 01       	movw	r30, r28
    4bb8:	e0 0f       	add	r30, r16
    4bba:	f1 1f       	adc	r31, r17
    4bbc:	80 8f       	std	Z+24, r24	; 0x18
		tx_string[cnt+2] = '0';
    4bbe:	80 e3       	ldi	r24, 0x30	; 48
    4bc0:	fe 01       	movw	r30, r28
    4bc2:	e0 0f       	add	r30, r16
    4bc4:	f1 1f       	adc	r31, r17
    4bc6:	87 8b       	std	Z+23, r24	; 0x17
		tx_string[cnt+1] = '0';		
    4bc8:	fe 01       	movw	r30, r28
    4bca:	ee 0d       	add	r30, r14
    4bcc:	ff 1d       	adc	r31, r15
    4bce:	85 8b       	std	Z+21, r24	; 0x15
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    4bd0:	c6 01       	movw	r24, r12
    4bd2:	9a 95       	dec	r25
    4bd4:	81 15       	cp	r24, r1
    4bd6:	9f 40       	sbci	r25, 0x0F	; 15
    4bd8:	b8 f4       	brcc	.+46     	; 0x4c08 <SendParameter+0xeac>
	{
		tx_string[cnt+4] = crc[2];
    4bda:	ef e2       	ldi	r30, 0x2F	; 47
    4bdc:	f5 e0       	ldi	r31, 0x05	; 5
    4bde:	82 81       	ldd	r24, Z+2	; 0x02
    4be0:	de 01       	movw	r26, r28
    4be2:	a0 0f       	add	r26, r16
    4be4:	b1 1f       	adc	r27, r17
    4be6:	59 96       	adiw	r26, 0x19	; 25
    4be8:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[1];
    4bea:	81 81       	ldd	r24, Z+1	; 0x01
    4bec:	de 01       	movw	r26, r28
    4bee:	a0 0f       	add	r26, r16
    4bf0:	b1 1f       	adc	r27, r17
    4bf2:	58 96       	adiw	r26, 0x18	; 24
    4bf4:	8c 93       	st	X, r24
    4bf6:	58 97       	sbiw	r26, 0x18	; 24
		tx_string[cnt+2] = crc[0];
    4bf8:	80 81       	ld	r24, Z
    4bfa:	fd 01       	movw	r30, r26
    4bfc:	87 8b       	std	Z+23, r24	; 0x17
		tx_string[cnt+1] = '0';		
    4bfe:	80 e3       	ldi	r24, 0x30	; 48
    4c00:	fe 01       	movw	r30, r28
    4c02:	ee 0d       	add	r30, r14
    4c04:	ff 1d       	adc	r31, r15
    4c06:	85 8b       	std	Z+21, r24	; 0x15
	}
	if(crcXmodem >= 0x1000)
    4c08:	c1 14       	cp	r12, r1
    4c0a:	f0 e1       	ldi	r31, 0x10	; 16
    4c0c:	df 06       	cpc	r13, r31
    4c0e:	c0 f0       	brcs	.+48     	; 0x4c40 <SendParameter+0xee4>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    4c10:	de 01       	movw	r26, r28
    4c12:	ae 0d       	add	r26, r14
    4c14:	bf 1d       	adc	r27, r15
    4c16:	ef e2       	ldi	r30, 0x2F	; 47
    4c18:	f5 e0       	ldi	r31, 0x05	; 5
    4c1a:	80 81       	ld	r24, Z
    4c1c:	55 96       	adiw	r26, 0x15	; 21
    4c1e:	8c 93       	st	X, r24
		tx_string[cnt+2] = crc[1];
    4c20:	81 81       	ldd	r24, Z+1	; 0x01
    4c22:	de 01       	movw	r26, r28
    4c24:	a0 0f       	add	r26, r16
    4c26:	b1 1f       	adc	r27, r17
    4c28:	57 96       	adiw	r26, 0x17	; 23
    4c2a:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[2];
    4c2c:	82 81       	ldd	r24, Z+2	; 0x02
    4c2e:	de 01       	movw	r26, r28
    4c30:	a0 0f       	add	r26, r16
    4c32:	b1 1f       	adc	r27, r17
    4c34:	58 96       	adiw	r26, 0x18	; 24
    4c36:	8c 93       	st	X, r24
    4c38:	58 97       	sbiw	r26, 0x18	; 24
		tx_string[cnt+4] = crc[3];
    4c3a:	83 81       	ldd	r24, Z+3	; 0x03
    4c3c:	fd 01       	movw	r30, r26
    4c3e:	81 8f       	std	Z+25, r24	; 0x19
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    4c40:	c8 01       	movw	r24, r16
    4c42:	05 96       	adiw	r24, 0x05	; 5
    4c44:	fe 01       	movw	r30, r28
    4c46:	e8 0f       	add	r30, r24
    4c48:	f9 1f       	adc	r31, r25
    4c4a:	2d e0       	ldi	r18, 0x0D	; 13
    4c4c:	25 8b       	std	Z+21, r18	; 0x15
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    4c4e:	99 23       	and	r25, r25
    4c50:	14 f4       	brge	.+4      	; 0x4c56 <SendParameter+0xefa>
    4c52:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
    4c56:	ae 01       	movw	r20, r28
    4c58:	4b 5e       	subi	r20, 0xEB	; 235
    4c5a:	5f 4f       	sbci	r21, 0xFF	; 255
    4c5c:	0a 5f       	subi	r16, 0xFA	; 250
    4c5e:	1f 4f       	sbci	r17, 0xFF	; 255
    4c60:	04 0f       	add	r16, r20
    4c62:	15 1f       	adc	r17, r21
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    4c64:	e7 e5       	ldi	r30, 0x57	; 87
    4c66:	f5 e0       	ldi	r31, 0x05	; 5
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    4c68:	61 ec       	ldi	r22, 0xC1	; 193
    4c6a:	70 e0       	ldi	r23, 0x00	; 0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    4c6c:	30 e0       	ldi	r19, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    4c6e:	da 01       	movw	r26, r20
    4c70:	8d 91       	ld	r24, X+
    4c72:	ad 01       	movw	r20, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    4c74:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    4c76:	21 81       	ldd	r18, Z+1	; 0x01
    4c78:	90 81       	ld	r25, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    4c7a:	29 13       	cpse	r18, r25
    4c7c:	04 c0       	rjmp	.+8      	; 0x4c86 <SendParameter+0xf2a>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    4c7e:	db 01       	movw	r26, r22
    4c80:	9c 91       	ld	r25, X
    4c82:	90 62       	ori	r25, 0x20	; 32
    4c84:	9c 93       	st	X, r25
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    4c86:	90 81       	ld	r25, Z
    4c88:	a3 81       	ldd	r26, Z+3	; 0x03
    4c8a:	b4 81       	ldd	r27, Z+4	; 0x04
    4c8c:	a9 0f       	add	r26, r25
    4c8e:	b1 1d       	adc	r27, r1
    4c90:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    4c92:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    4c94:	a2 2f       	mov	r26, r18
    4c96:	b0 e0       	ldi	r27, 0x00	; 0
    4c98:	82 81       	ldd	r24, Z+2	; 0x02
    4c9a:	90 e0       	ldi	r25, 0x00	; 0
    4c9c:	01 97       	sbiw	r24, 0x01	; 1
    4c9e:	a8 17       	cp	r26, r24
    4ca0:	b9 07       	cpc	r27, r25
    4ca2:	11 f0       	breq	.+4      	; 0x4ca8 <SendParameter+0xf4c>
    4ca4:	2f 5f       	subi	r18, 0xFF	; 255
    4ca6:	01 c0       	rjmp	.+2      	; 0x4caa <SendParameter+0xf4e>
    4ca8:	23 2f       	mov	r18, r19
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    4caa:	20 83       	st	Z, r18
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    4cac:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    4cae:	40 17       	cp	r20, r16
    4cb0:	51 07       	cpc	r21, r17
    4cb2:	e9 f6       	brne	.-70     	; 0x4c6e <SendParameter+0xf12>
    4cb4:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
		itoa(ch1.tempSettleTime, tx_string, 10);
		printStatus(tx_string);
		break;
		
		case 210:	// Send Temperature stable status
		switch(ch1.tempStable)
    4cb8:	80 91 bf 02 	lds	r24, 0x02BF
    4cbc:	90 91 c0 02 	lds	r25, 0x02C0
    4cc0:	00 97       	sbiw	r24, 0x00	; 0
    4cc2:	21 f0       	breq	.+8      	; 0x4ccc <SendParameter+0xf70>
    4cc4:	01 97       	sbiw	r24, 0x01	; 1
    4cc6:	41 f0       	breq	.+16     	; 0x4cd8 <SendParameter+0xf7c>
    4cc8:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
		{
			case 0:
			printStatus("0");
    4ccc:	8b e2       	ldi	r24, 0x2B	; 43
    4cce:	91 e0       	ldi	r25, 0x01	; 1
    4cd0:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
			break;
    4cd4:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
			
			case 1:
			printStatus("1");
    4cd8:	8d e2       	ldi	r24, 0x2D	; 45
    4cda:	91 e0       	ldi	r25, 0x01	; 1
    4cdc:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
			break;
    4ce0:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
		}
		break;		
		
		// *** Channel 2 ***		
		case 300:	// Send sensor 2 temperature
		ftoa(ch2.TempSensor, tx_string);
    4ce4:	60 91 04 02 	lds	r22, 0x0204
    4ce8:	70 91 05 02 	lds	r23, 0x0205
    4cec:	80 91 06 02 	lds	r24, 0x0206
    4cf0:	90 91 07 02 	lds	r25, 0x0207
    4cf4:	ae 01       	movw	r20, r28
    4cf6:	4f 5f       	subi	r20, 0xFF	; 255
    4cf8:	5f 4f       	sbci	r21, 0xFF	; 255
    4cfa:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <ftoa>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    4cfe:	81 e2       	ldi	r24, 0x21	; 33
    4d00:	8d 8b       	std	Y+21, r24	; 0x15
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    4d02:	e9 e3       	ldi	r30, 0x39	; 57
    4d04:	f5 e0       	ldi	r31, 0x05	; 5
    4d06:	81 81       	ldd	r24, Z+1	; 0x01
    4d08:	8e 8b       	std	Y+22, r24	; 0x16
    4d0a:	82 81       	ldd	r24, Z+2	; 0x02
    4d0c:	8f 8b       	std	Y+23, r24	; 0x17
    4d0e:	83 81       	ldd	r24, Z+3	; 0x03
    4d10:	88 8f       	std	Y+24, r24	; 0x18
    4d12:	ae 01       	movw	r20, r28
    4d14:	4f 5f       	subi	r20, 0xFF	; 255
    4d16:	5f 4f       	sbci	r21, 0xFF	; 255
    4d18:	9e 01       	movw	r18, r28
    4d1a:	27 5e       	subi	r18, 0xE7	; 231
    4d1c:	3f 4f       	sbci	r19, 0xFF	; 255
    4d1e:	00 e0       	ldi	r16, 0x00	; 0
    4d20:	10 e0       	ldi	r17, 0x00	; 0
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    4d22:	da 01       	movw	r26, r20
    4d24:	08 c0       	rjmp	.+16     	; 0x4d36 <SendParameter+0xfda>
	{
		tx_string[cnt+4] = msg_string[cnt];
    4d26:	fa 01       	movw	r30, r20
    4d28:	81 91       	ld	r24, Z+
    4d2a:	af 01       	movw	r20, r30
    4d2c:	f9 01       	movw	r30, r18
    4d2e:	81 93       	st	Z+, r24
    4d30:	9f 01       	movw	r18, r30
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    4d32:	0f 5f       	subi	r16, 0xFF	; 255
    4d34:	1f 4f       	sbci	r17, 0xFF	; 255
    4d36:	fd 01       	movw	r30, r26
    4d38:	01 90       	ld	r0, Z+
    4d3a:	00 20       	and	r0, r0
    4d3c:	e9 f7       	brne	.-6      	; 0x4d38 <SendParameter+0xfdc>
    4d3e:	cf 01       	movw	r24, r30
    4d40:	8a 1b       	sub	r24, r26
    4d42:	9b 0b       	sbc	r25, r27
    4d44:	02 96       	adiw	r24, 0x02	; 2
    4d46:	08 17       	cp	r16, r24
    4d48:	19 07       	cpc	r17, r25
    4d4a:	68 f3       	brcs	.-38     	; 0x4d26 <SendParameter+0xfca>
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    4d4c:	78 01       	movw	r14, r16
    4d4e:	ff ef       	ldi	r31, 0xFF	; 255
    4d50:	ef 1a       	sub	r14, r31
    4d52:	ff 0a       	sbc	r15, r31
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    4d54:	1e 14       	cp	r1, r14
    4d56:	1f 04       	cpc	r1, r15
    4d58:	14 f0       	brlt	.+4      	; 0x4d5e <SendParameter+0x1002>
    4d5a:	0c 94 21 35 	jmp	0x6a42	; 0x6a42 <SendParameter+0x2ce6>
    4d5e:	fe 01       	movw	r30, r28
    4d60:	75 96       	adiw	r30, 0x15	; 21
    4d62:	a7 01       	movw	r20, r14
    4d64:	4e 0f       	add	r20, r30
    4d66:	5f 1f       	adc	r21, r31
    4d68:	80 e0       	ldi	r24, 0x00	; 0
    4d6a:	90 e0       	ldi	r25, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    4d6c:	b8 e0       	ldi	r27, 0x08	; 8
    4d6e:	d1 2c       	mov	r13, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    4d70:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    4d72:	29 2f       	mov	r18, r25
    4d74:	33 27       	eor	r19, r19
    4d76:	27 fd       	sbrc	r18, 7
    4d78:	3a 95       	dec	r19
    4d7a:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
    4d7c:	32 2f       	mov	r19, r18
    4d7e:	22 27       	eor	r18, r18
    4d80:	6b 2f       	mov	r22, r27
    4d82:	7d 2d       	mov	r23, r13
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    4d84:	33 23       	and	r19, r19
    4d86:	3c f4       	brge	.+14     	; 0x4d96 <SendParameter+0x103a>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    4d88:	22 0f       	add	r18, r18
    4d8a:	33 1f       	adc	r19, r19
    4d8c:	a1 e2       	ldi	r26, 0x21	; 33
    4d8e:	2a 27       	eor	r18, r26
    4d90:	a0 e1       	ldi	r26, 0x10	; 16
    4d92:	3a 27       	eor	r19, r26
    4d94:	02 c0       	rjmp	.+4      	; 0x4d9a <SendParameter+0x103e>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    4d96:	22 0f       	add	r18, r18
    4d98:	33 1f       	adc	r19, r19
    4d9a:	61 50       	subi	r22, 0x01	; 1
    4d9c:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    4d9e:	91 f7       	brne	.-28     	; 0x4d84 <SendParameter+0x1028>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    4da0:	98 2f       	mov	r25, r24
    4da2:	88 27       	eor	r24, r24
    4da4:	82 27       	eor	r24, r18
    4da6:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    4da8:	e4 17       	cp	r30, r20
    4daa:	f5 07       	cpc	r31, r21
    4dac:	09 f7       	brne	.-62     	; 0x4d70 <SendParameter+0x1014>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    4dae:	6c 01       	movw	r12, r24
    4db0:	40 e1       	ldi	r20, 0x10	; 16
    4db2:	6f e2       	ldi	r22, 0x2F	; 47
    4db4:	75 e0       	ldi	r23, 0x05	; 5
    4db6:	0e 94 04 3b 	call	0x7608	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    4dba:	8f e2       	ldi	r24, 0x2F	; 47
    4dbc:	95 e0       	ldi	r25, 0x05	; 5
    4dbe:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <strupr>
	if(crcXmodem < 0x10)
    4dc2:	b0 e1       	ldi	r27, 0x10	; 16
    4dc4:	cb 16       	cp	r12, r27
    4dc6:	d1 04       	cpc	r13, r1
    4dc8:	98 f4       	brcc	.+38     	; 0x4df0 <SendParameter+0x1094>
	{
		tx_string[cnt+4] = crc[0];
    4dca:	80 91 2f 05 	lds	r24, 0x052F
    4dce:	fe 01       	movw	r30, r28
    4dd0:	e0 0f       	add	r30, r16
    4dd2:	f1 1f       	adc	r31, r17
    4dd4:	81 8f       	std	Z+25, r24	; 0x19
		tx_string[cnt+3] = '0';
    4dd6:	80 e3       	ldi	r24, 0x30	; 48
    4dd8:	fe 01       	movw	r30, r28
    4dda:	e0 0f       	add	r30, r16
    4ddc:	f1 1f       	adc	r31, r17
    4dde:	80 8f       	std	Z+24, r24	; 0x18
		tx_string[cnt+2] = '0';
    4de0:	fe 01       	movw	r30, r28
    4de2:	e0 0f       	add	r30, r16
    4de4:	f1 1f       	adc	r31, r17
    4de6:	87 8b       	std	Z+23, r24	; 0x17
		tx_string[cnt+1] = '0';
    4de8:	fe 01       	movw	r30, r28
    4dea:	ee 0d       	add	r30, r14
    4dec:	ff 1d       	adc	r31, r15
    4dee:	85 8b       	std	Z+21, r24	; 0x15
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    4df0:	c6 01       	movw	r24, r12
    4df2:	40 97       	sbiw	r24, 0x10	; 16
    4df4:	80 3f       	cpi	r24, 0xF0	; 240
    4df6:	91 05       	cpc	r25, r1
    4df8:	b8 f4       	brcc	.+46     	; 0x4e28 <SendParameter+0x10cc>
	{
		tx_string[cnt+4] = crc[1];
    4dfa:	af e2       	ldi	r26, 0x2F	; 47
    4dfc:	b5 e0       	ldi	r27, 0x05	; 5
    4dfe:	11 96       	adiw	r26, 0x01	; 1
    4e00:	8c 91       	ld	r24, X
    4e02:	11 97       	sbiw	r26, 0x01	; 1
    4e04:	fe 01       	movw	r30, r28
    4e06:	e0 0f       	add	r30, r16
    4e08:	f1 1f       	adc	r31, r17
    4e0a:	81 8f       	std	Z+25, r24	; 0x19
		tx_string[cnt+3] = crc[0];
    4e0c:	8c 91       	ld	r24, X
    4e0e:	fe 01       	movw	r30, r28
    4e10:	e0 0f       	add	r30, r16
    4e12:	f1 1f       	adc	r31, r17
    4e14:	80 8f       	std	Z+24, r24	; 0x18
		tx_string[cnt+2] = '0';
    4e16:	80 e3       	ldi	r24, 0x30	; 48
    4e18:	fe 01       	movw	r30, r28
    4e1a:	e0 0f       	add	r30, r16
    4e1c:	f1 1f       	adc	r31, r17
    4e1e:	87 8b       	std	Z+23, r24	; 0x17
		tx_string[cnt+1] = '0';		
    4e20:	fe 01       	movw	r30, r28
    4e22:	ee 0d       	add	r30, r14
    4e24:	ff 1d       	adc	r31, r15
    4e26:	85 8b       	std	Z+21, r24	; 0x15
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    4e28:	c6 01       	movw	r24, r12
    4e2a:	9a 95       	dec	r25
    4e2c:	81 15       	cp	r24, r1
    4e2e:	9f 40       	sbci	r25, 0x0F	; 15
    4e30:	b8 f4       	brcc	.+46     	; 0x4e60 <SendParameter+0x1104>
	{
		tx_string[cnt+4] = crc[2];
    4e32:	ef e2       	ldi	r30, 0x2F	; 47
    4e34:	f5 e0       	ldi	r31, 0x05	; 5
    4e36:	82 81       	ldd	r24, Z+2	; 0x02
    4e38:	de 01       	movw	r26, r28
    4e3a:	a0 0f       	add	r26, r16
    4e3c:	b1 1f       	adc	r27, r17
    4e3e:	59 96       	adiw	r26, 0x19	; 25
    4e40:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[1];
    4e42:	81 81       	ldd	r24, Z+1	; 0x01
    4e44:	de 01       	movw	r26, r28
    4e46:	a0 0f       	add	r26, r16
    4e48:	b1 1f       	adc	r27, r17
    4e4a:	58 96       	adiw	r26, 0x18	; 24
    4e4c:	8c 93       	st	X, r24
    4e4e:	58 97       	sbiw	r26, 0x18	; 24
		tx_string[cnt+2] = crc[0];
    4e50:	80 81       	ld	r24, Z
    4e52:	fd 01       	movw	r30, r26
    4e54:	87 8b       	std	Z+23, r24	; 0x17
		tx_string[cnt+1] = '0';		
    4e56:	80 e3       	ldi	r24, 0x30	; 48
    4e58:	fe 01       	movw	r30, r28
    4e5a:	ee 0d       	add	r30, r14
    4e5c:	ff 1d       	adc	r31, r15
    4e5e:	85 8b       	std	Z+21, r24	; 0x15
	}
	if(crcXmodem >= 0x1000)
    4e60:	c1 14       	cp	r12, r1
    4e62:	f0 e1       	ldi	r31, 0x10	; 16
    4e64:	df 06       	cpc	r13, r31
    4e66:	c0 f0       	brcs	.+48     	; 0x4e98 <SendParameter+0x113c>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    4e68:	de 01       	movw	r26, r28
    4e6a:	ae 0d       	add	r26, r14
    4e6c:	bf 1d       	adc	r27, r15
    4e6e:	ef e2       	ldi	r30, 0x2F	; 47
    4e70:	f5 e0       	ldi	r31, 0x05	; 5
    4e72:	80 81       	ld	r24, Z
    4e74:	55 96       	adiw	r26, 0x15	; 21
    4e76:	8c 93       	st	X, r24
		tx_string[cnt+2] = crc[1];
    4e78:	81 81       	ldd	r24, Z+1	; 0x01
    4e7a:	de 01       	movw	r26, r28
    4e7c:	a0 0f       	add	r26, r16
    4e7e:	b1 1f       	adc	r27, r17
    4e80:	57 96       	adiw	r26, 0x17	; 23
    4e82:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[2];
    4e84:	82 81       	ldd	r24, Z+2	; 0x02
    4e86:	de 01       	movw	r26, r28
    4e88:	a0 0f       	add	r26, r16
    4e8a:	b1 1f       	adc	r27, r17
    4e8c:	58 96       	adiw	r26, 0x18	; 24
    4e8e:	8c 93       	st	X, r24
    4e90:	58 97       	sbiw	r26, 0x18	; 24
		tx_string[cnt+4] = crc[3];
    4e92:	83 81       	ldd	r24, Z+3	; 0x03
    4e94:	fd 01       	movw	r30, r26
    4e96:	81 8f       	std	Z+25, r24	; 0x19
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    4e98:	c8 01       	movw	r24, r16
    4e9a:	05 96       	adiw	r24, 0x05	; 5
    4e9c:	fe 01       	movw	r30, r28
    4e9e:	e8 0f       	add	r30, r24
    4ea0:	f9 1f       	adc	r31, r25
    4ea2:	2d e0       	ldi	r18, 0x0D	; 13
    4ea4:	25 8b       	std	Z+21, r18	; 0x15
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    4ea6:	99 23       	and	r25, r25
    4ea8:	14 f4       	brge	.+4      	; 0x4eae <SendParameter+0x1152>
    4eaa:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
    4eae:	ae 01       	movw	r20, r28
    4eb0:	4b 5e       	subi	r20, 0xEB	; 235
    4eb2:	5f 4f       	sbci	r21, 0xFF	; 255
    4eb4:	0a 5f       	subi	r16, 0xFA	; 250
    4eb6:	1f 4f       	sbci	r17, 0xFF	; 255
    4eb8:	04 0f       	add	r16, r20
    4eba:	15 1f       	adc	r17, r21
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    4ebc:	e7 e5       	ldi	r30, 0x57	; 87
    4ebe:	f5 e0       	ldi	r31, 0x05	; 5
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    4ec0:	61 ec       	ldi	r22, 0xC1	; 193
    4ec2:	70 e0       	ldi	r23, 0x00	; 0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    4ec4:	30 e0       	ldi	r19, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    4ec6:	da 01       	movw	r26, r20
    4ec8:	8d 91       	ld	r24, X+
    4eca:	ad 01       	movw	r20, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    4ecc:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    4ece:	21 81       	ldd	r18, Z+1	; 0x01
    4ed0:	90 81       	ld	r25, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    4ed2:	29 13       	cpse	r18, r25
    4ed4:	04 c0       	rjmp	.+8      	; 0x4ede <SendParameter+0x1182>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    4ed6:	db 01       	movw	r26, r22
    4ed8:	9c 91       	ld	r25, X
    4eda:	90 62       	ori	r25, 0x20	; 32
    4edc:	9c 93       	st	X, r25
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    4ede:	90 81       	ld	r25, Z
    4ee0:	a3 81       	ldd	r26, Z+3	; 0x03
    4ee2:	b4 81       	ldd	r27, Z+4	; 0x04
    4ee4:	a9 0f       	add	r26, r25
    4ee6:	b1 1d       	adc	r27, r1
    4ee8:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    4eea:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    4eec:	a2 2f       	mov	r26, r18
    4eee:	b0 e0       	ldi	r27, 0x00	; 0
    4ef0:	82 81       	ldd	r24, Z+2	; 0x02
    4ef2:	90 e0       	ldi	r25, 0x00	; 0
    4ef4:	01 97       	sbiw	r24, 0x01	; 1
    4ef6:	a8 17       	cp	r26, r24
    4ef8:	b9 07       	cpc	r27, r25
    4efa:	11 f0       	breq	.+4      	; 0x4f00 <SendParameter+0x11a4>
    4efc:	2f 5f       	subi	r18, 0xFF	; 255
    4efe:	01 c0       	rjmp	.+2      	; 0x4f02 <SendParameter+0x11a6>
    4f00:	23 2f       	mov	r18, r19
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    4f02:	20 83       	st	Z, r18
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    4f04:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    4f06:	40 17       	cp	r20, r16
    4f08:	51 07       	cpc	r21, r17
    4f0a:	e9 f6       	brne	.-70     	; 0x4ec6 <SendParameter+0x116a>
    4f0c:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
		ftoa(ch2.TempSensor, tx_string);
		printStatus(tx_string);
		break;
		
		case 301:	// Send P part of PID-controller 2
		ftoa(ch2.P_err, tx_string);
    4f10:	60 91 08 02 	lds	r22, 0x0208
    4f14:	70 91 09 02 	lds	r23, 0x0209
    4f18:	80 91 0a 02 	lds	r24, 0x020A
    4f1c:	90 91 0b 02 	lds	r25, 0x020B
    4f20:	ae 01       	movw	r20, r28
    4f22:	4f 5f       	subi	r20, 0xFF	; 255
    4f24:	5f 4f       	sbci	r21, 0xFF	; 255
    4f26:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <ftoa>
		printStatus(tx_string);
    4f2a:	ce 01       	movw	r24, r28
    4f2c:	01 96       	adiw	r24, 0x01	; 1
    4f2e:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
		break;
    4f32:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
		
		case 302:	// Send I part of PID-controller 2
		ftoa(ch2.I_err, tx_string);
    4f36:	60 91 0c 02 	lds	r22, 0x020C
    4f3a:	70 91 0d 02 	lds	r23, 0x020D
    4f3e:	80 91 0e 02 	lds	r24, 0x020E
    4f42:	90 91 0f 02 	lds	r25, 0x020F
    4f46:	ae 01       	movw	r20, r28
    4f48:	4f 5f       	subi	r20, 0xFF	; 255
    4f4a:	5f 4f       	sbci	r21, 0xFF	; 255
    4f4c:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <ftoa>
		printStatus(tx_string);
    4f50:	ce 01       	movw	r24, r28
    4f52:	01 96       	adiw	r24, 0x01	; 1
    4f54:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
		break;
    4f58:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
		
		case 303:	// Send D part of PID-controller 2
		ftoa(ch2.D_err, tx_string);
    4f5c:	60 91 10 02 	lds	r22, 0x0210
    4f60:	70 91 11 02 	lds	r23, 0x0211
    4f64:	80 91 12 02 	lds	r24, 0x0212
    4f68:	90 91 13 02 	lds	r25, 0x0213
    4f6c:	ae 01       	movw	r20, r28
    4f6e:	4f 5f       	subi	r20, 0xFF	; 255
    4f70:	5f 4f       	sbci	r21, 0xFF	; 255
    4f72:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <ftoa>
		printStatus(tx_string);
    4f76:	ce 01       	movw	r24, r28
    4f78:	01 96       	adiw	r24, 0x01	; 1
    4f7a:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
		break;
    4f7e:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
		
		case 304:	// Send ch2.TempSetPoint
		ftoa(ch2.TempSetPoint, tx_string);
    4f82:	60 91 00 02 	lds	r22, 0x0200
    4f86:	70 91 01 02 	lds	r23, 0x0201
    4f8a:	80 91 02 02 	lds	r24, 0x0202
    4f8e:	90 91 03 02 	lds	r25, 0x0203
    4f92:	ae 01       	movw	r20, r28
    4f94:	4f 5f       	subi	r20, 0xFF	; 255
    4f96:	5f 4f       	sbci	r21, 0xFF	; 255
    4f98:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <ftoa>
		printStatus(tx_string);
    4f9c:	ce 01       	movw	r24, r28
    4f9e:	01 96       	adiw	r24, 0x01	; 1
    4fa0:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
		break;
    4fa4:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
		
		case 305:	// Send Pgain ch2
		ftoa(ch2.Pgain, tx_string);
    4fa8:	60 91 1c 02 	lds	r22, 0x021C
    4fac:	70 91 1d 02 	lds	r23, 0x021D
    4fb0:	80 91 1e 02 	lds	r24, 0x021E
    4fb4:	90 91 1f 02 	lds	r25, 0x021F
    4fb8:	ae 01       	movw	r20, r28
    4fba:	4f 5f       	subi	r20, 0xFF	; 255
    4fbc:	5f 4f       	sbci	r21, 0xFF	; 255
    4fbe:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <ftoa>
		printStatus(tx_string);
    4fc2:	ce 01       	movw	r24, r28
    4fc4:	01 96       	adiw	r24, 0x01	; 1
    4fc6:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
		break;
    4fca:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
		
		case 306:	// Send Igain ch2
		ftoa(ch2.Igain, tx_string);
    4fce:	60 91 20 02 	lds	r22, 0x0220
    4fd2:	70 91 21 02 	lds	r23, 0x0221
    4fd6:	80 91 22 02 	lds	r24, 0x0222
    4fda:	90 91 23 02 	lds	r25, 0x0223
    4fde:	ae 01       	movw	r20, r28
    4fe0:	4f 5f       	subi	r20, 0xFF	; 255
    4fe2:	5f 4f       	sbci	r21, 0xFF	; 255
    4fe4:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <ftoa>
		printStatus(tx_string);
    4fe8:	ce 01       	movw	r24, r28
    4fea:	01 96       	adiw	r24, 0x01	; 1
    4fec:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
		break;
    4ff0:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
		
		case 307:	// Send Dgain ch2
		ftoa(ch2.Dgain, tx_string);
    4ff4:	60 91 24 02 	lds	r22, 0x0224
    4ff8:	70 91 25 02 	lds	r23, 0x0225
    4ffc:	80 91 26 02 	lds	r24, 0x0226
    5000:	90 91 27 02 	lds	r25, 0x0227
    5004:	ae 01       	movw	r20, r28
    5006:	4f 5f       	subi	r20, 0xFF	; 255
    5008:	5f 4f       	sbci	r21, 0xFF	; 255
    500a:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <ftoa>
		printStatus(tx_string);
    500e:	ce 01       	movw	r24, r28
    5010:	01 96       	adiw	r24, 0x01	; 1
    5012:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
		break;
    5016:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
		
		case 308:	// Send TemperatureWindow
		ftoa(ch2.tempErrorWin, tx_string);
    501a:	60 91 54 02 	lds	r22, 0x0254
    501e:	70 91 55 02 	lds	r23, 0x0255
    5022:	80 91 56 02 	lds	r24, 0x0256
    5026:	90 91 57 02 	lds	r25, 0x0257
    502a:	ae 01       	movw	r20, r28
    502c:	4f 5f       	subi	r20, 0xFF	; 255
    502e:	5f 4f       	sbci	r21, 0xFF	; 255
    5030:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <ftoa>
		printStatus(tx_string);
    5034:	ce 01       	movw	r24, r28
    5036:	01 96       	adiw	r24, 0x01	; 1
    5038:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
		break;
    503c:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
		
		case 309:	// Send SettleTimeTemperature
		itoa(ch2.tempSettleTime, tx_string, 10);
    5040:	80 91 5a 02 	lds	r24, 0x025A
    5044:	90 91 5b 02 	lds	r25, 0x025B
    5048:	4a e0       	ldi	r20, 0x0A	; 10
    504a:	be 01       	movw	r22, r28
    504c:	6f 5f       	subi	r22, 0xFF	; 255
    504e:	7f 4f       	sbci	r23, 0xFF	; 255
    5050:	0e 94 04 3b 	call	0x7608	; 0x7608 <__itoa_ncheck>
		printStatus(tx_string);
    5054:	ce 01       	movw	r24, r28
    5056:	01 96       	adiw	r24, 0x01	; 1
    5058:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
		break;
    505c:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
		
		case 310:	// Send Temperature stable status
		switch(ch2.tempStable)
    5060:	80 91 5c 02 	lds	r24, 0x025C
    5064:	90 91 5d 02 	lds	r25, 0x025D
    5068:	00 97       	sbiw	r24, 0x00	; 0
    506a:	21 f0       	breq	.+8      	; 0x5074 <SendParameter+0x1318>
    506c:	01 97       	sbiw	r24, 0x01	; 1
    506e:	41 f0       	breq	.+16     	; 0x5080 <SendParameter+0x1324>
    5070:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
		{
			case 0:
			printStatus("0");
    5074:	8b e2       	ldi	r24, 0x2B	; 43
    5076:	91 e0       	ldi	r25, 0x01	; 1
    5078:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
			break;
    507c:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    5080:	81 e2       	ldi	r24, 0x21	; 33
    5082:	8d 8b       	std	Y+21, r24	; 0x15
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    5084:	e9 e3       	ldi	r30, 0x39	; 57
    5086:	f5 e0       	ldi	r31, 0x05	; 5
    5088:	81 81       	ldd	r24, Z+1	; 0x01
    508a:	8e 8b       	std	Y+22, r24	; 0x16
    508c:	82 81       	ldd	r24, Z+2	; 0x02
    508e:	8f 8b       	std	Y+23, r24	; 0x17
    5090:	83 81       	ldd	r24, Z+3	; 0x03
    5092:	88 8f       	std	Y+24, r24	; 0x18
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    5094:	81 e3       	ldi	r24, 0x31	; 49
    5096:	89 8f       	std	Y+25, r24	; 0x19
    5098:	1a 8e       	std	Y+26, r1	; 0x1a
    509a:	1b 8e       	std	Y+27, r1	; 0x1b
    509c:	1c 8e       	std	Y+28, r1	; 0x1c
    509e:	8e 01       	movw	r16, r28
    50a0:	0b 5e       	subi	r16, 0xEB	; 235
    50a2:	1f 4f       	sbci	r17, 0xFF	; 255
    50a4:	be 01       	movw	r22, r28
    50a6:	66 5e       	subi	r22, 0xE6	; 230
    50a8:	7f 4f       	sbci	r23, 0xFF	; 255
    50aa:	f8 01       	movw	r30, r16
    50ac:	80 e0       	ldi	r24, 0x00	; 0
    50ae:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    50b0:	b8 e0       	ldi	r27, 0x08	; 8
    50b2:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    50b4:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    50b6:	29 2f       	mov	r18, r25
    50b8:	33 27       	eor	r19, r19
    50ba:	27 fd       	sbrc	r18, 7
    50bc:	3a 95       	dec	r19
    50be:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    50c0:	32 2f       	mov	r19, r18
    50c2:	22 27       	eor	r18, r18
    50c4:	4b 2f       	mov	r20, r27
    50c6:	5f 2d       	mov	r21, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    50c8:	33 23       	and	r19, r19
    50ca:	3c f4       	brge	.+14     	; 0x50da <SendParameter+0x137e>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    50cc:	22 0f       	add	r18, r18
    50ce:	33 1f       	adc	r19, r19
    50d0:	a1 e2       	ldi	r26, 0x21	; 33
    50d2:	2a 27       	eor	r18, r26
    50d4:	a0 e1       	ldi	r26, 0x10	; 16
    50d6:	3a 27       	eor	r19, r26
    50d8:	02 c0       	rjmp	.+4      	; 0x50de <SendParameter+0x1382>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    50da:	22 0f       	add	r18, r18
    50dc:	33 1f       	adc	r19, r19
    50de:	41 50       	subi	r20, 0x01	; 1
    50e0:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    50e2:	91 f7       	brne	.-28     	; 0x50c8 <SendParameter+0x136c>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    50e4:	98 2f       	mov	r25, r24
    50e6:	88 27       	eor	r24, r24
    50e8:	82 27       	eor	r24, r18
    50ea:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    50ec:	e6 17       	cp	r30, r22
    50ee:	f7 07       	cpc	r31, r23
    50f0:	09 f7       	brne	.-62     	; 0x50b4 <SendParameter+0x1358>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    50f2:	7c 01       	movw	r14, r24
    50f4:	40 e1       	ldi	r20, 0x10	; 16
    50f6:	6f e2       	ldi	r22, 0x2F	; 47
    50f8:	75 e0       	ldi	r23, 0x05	; 5
    50fa:	0e 94 04 3b 	call	0x7608	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    50fe:	8f e2       	ldi	r24, 0x2F	; 47
    5100:	95 e0       	ldi	r25, 0x05	; 5
    5102:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <strupr>
	if(crcXmodem < 0x10)
    5106:	b0 e1       	ldi	r27, 0x10	; 16
    5108:	eb 16       	cp	r14, r27
    510a:	f1 04       	cpc	r15, r1
    510c:	38 f4       	brcc	.+14     	; 0x511c <SendParameter+0x13c0>
	{
		tx_string[cnt+4] = crc[0];
    510e:	80 91 2f 05 	lds	r24, 0x052F
    5112:	8d 8f       	std	Y+29, r24	; 0x1d
		tx_string[cnt+3] = '0';
    5114:	80 e3       	ldi	r24, 0x30	; 48
    5116:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+2] = '0';
    5118:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+1] = '0';
    511a:	8a 8f       	std	Y+26, r24	; 0x1a
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    511c:	c7 01       	movw	r24, r14
    511e:	40 97       	sbiw	r24, 0x10	; 16
    5120:	80 3f       	cpi	r24, 0xF0	; 240
    5122:	91 05       	cpc	r25, r1
    5124:	48 f4       	brcc	.+18     	; 0x5138 <SendParameter+0x13dc>
	{
		tx_string[cnt+4] = crc[1];
    5126:	ef e2       	ldi	r30, 0x2F	; 47
    5128:	f5 e0       	ldi	r31, 0x05	; 5
    512a:	81 81       	ldd	r24, Z+1	; 0x01
    512c:	8d 8f       	std	Y+29, r24	; 0x1d
		tx_string[cnt+3] = crc[0];
    512e:	80 81       	ld	r24, Z
    5130:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+2] = '0';
    5132:	80 e3       	ldi	r24, 0x30	; 48
    5134:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+1] = '0';		
    5136:	8a 8f       	std	Y+26, r24	; 0x1a
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    5138:	c7 01       	movw	r24, r14
    513a:	9a 95       	dec	r25
    513c:	81 15       	cp	r24, r1
    513e:	9f 40       	sbci	r25, 0x0F	; 15
    5140:	50 f4       	brcc	.+20     	; 0x5156 <SendParameter+0x13fa>
	{
		tx_string[cnt+4] = crc[2];
    5142:	ef e2       	ldi	r30, 0x2F	; 47
    5144:	f5 e0       	ldi	r31, 0x05	; 5
    5146:	82 81       	ldd	r24, Z+2	; 0x02
    5148:	8d 8f       	std	Y+29, r24	; 0x1d
		tx_string[cnt+3] = crc[1];
    514a:	81 81       	ldd	r24, Z+1	; 0x01
    514c:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+2] = crc[0];
    514e:	80 81       	ld	r24, Z
    5150:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+1] = '0';		
    5152:	80 e3       	ldi	r24, 0x30	; 48
    5154:	8a 8f       	std	Y+26, r24	; 0x1a
	}
	if(crcXmodem >= 0x1000)
    5156:	e1 14       	cp	r14, r1
    5158:	f0 e1       	ldi	r31, 0x10	; 16
    515a:	ff 06       	cpc	r15, r31
    515c:	50 f0       	brcs	.+20     	; 0x5172 <SendParameter+0x1416>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    515e:	ef e2       	ldi	r30, 0x2F	; 47
    5160:	f5 e0       	ldi	r31, 0x05	; 5
    5162:	80 81       	ld	r24, Z
    5164:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+2] = crc[1];
    5166:	81 81       	ldd	r24, Z+1	; 0x01
    5168:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+3] = crc[2];
    516a:	82 81       	ldd	r24, Z+2	; 0x02
    516c:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+4] = crc[3];
    516e:	83 81       	ldd	r24, Z+3	; 0x03
    5170:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    5172:	8d e0       	ldi	r24, 0x0D	; 13
    5174:	8e 8f       	std	Y+30, r24	; 0x1e
    5176:	ae 01       	movw	r20, r28
    5178:	41 5e       	subi	r20, 0xE1	; 225
    517a:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    517c:	e7 e5       	ldi	r30, 0x57	; 87
    517e:	f5 e0       	ldi	r31, 0x05	; 5
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    5180:	61 ec       	ldi	r22, 0xC1	; 193
    5182:	70 e0       	ldi	r23, 0x00	; 0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    5184:	30 e0       	ldi	r19, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    5186:	d8 01       	movw	r26, r16
    5188:	8d 91       	ld	r24, X+
    518a:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    518c:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    518e:	21 81       	ldd	r18, Z+1	; 0x01
    5190:	90 81       	ld	r25, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    5192:	29 13       	cpse	r18, r25
    5194:	04 c0       	rjmp	.+8      	; 0x519e <SendParameter+0x1442>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    5196:	db 01       	movw	r26, r22
    5198:	9c 91       	ld	r25, X
    519a:	90 62       	ori	r25, 0x20	; 32
    519c:	9c 93       	st	X, r25
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    519e:	90 81       	ld	r25, Z
    51a0:	a3 81       	ldd	r26, Z+3	; 0x03
    51a2:	b4 81       	ldd	r27, Z+4	; 0x04
    51a4:	a9 0f       	add	r26, r25
    51a6:	b1 1d       	adc	r27, r1
    51a8:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    51aa:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    51ac:	a2 2f       	mov	r26, r18
    51ae:	b0 e0       	ldi	r27, 0x00	; 0
    51b0:	82 81       	ldd	r24, Z+2	; 0x02
    51b2:	90 e0       	ldi	r25, 0x00	; 0
    51b4:	01 97       	sbiw	r24, 0x01	; 1
    51b6:	a8 17       	cp	r26, r24
    51b8:	b9 07       	cpc	r27, r25
    51ba:	11 f0       	breq	.+4      	; 0x51c0 <SendParameter+0x1464>
    51bc:	2f 5f       	subi	r18, 0xFF	; 255
    51be:	01 c0       	rjmp	.+2      	; 0x51c2 <SendParameter+0x1466>
    51c0:	23 2f       	mov	r18, r19
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    51c2:	20 83       	st	Z, r18
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    51c4:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    51c6:	04 17       	cp	r16, r20
    51c8:	15 07       	cpc	r17, r21
    51ca:	e9 f6       	brne	.-70     	; 0x5186 <SendParameter+0x142a>
    51cc:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
		}
		break;		
		
		// *** Channel 3 ***
		case 400:	// Send sensor 3 temperature
		ftoa(ch3.TempSensor, tx_string);
    51d0:	60 91 a1 01 	lds	r22, 0x01A1
    51d4:	70 91 a2 01 	lds	r23, 0x01A2
    51d8:	80 91 a3 01 	lds	r24, 0x01A3
    51dc:	90 91 a4 01 	lds	r25, 0x01A4
    51e0:	ae 01       	movw	r20, r28
    51e2:	4f 5f       	subi	r20, 0xFF	; 255
    51e4:	5f 4f       	sbci	r21, 0xFF	; 255
    51e6:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <ftoa>
		printStatus(tx_string);
    51ea:	ce 01       	movw	r24, r28
    51ec:	01 96       	adiw	r24, 0x01	; 1
    51ee:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
		break;
    51f2:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
		
		case 401:	// Send P part of PID-controller 3
		ftoa(ch3.P_err, tx_string);
    51f6:	60 91 a5 01 	lds	r22, 0x01A5
    51fa:	70 91 a6 01 	lds	r23, 0x01A6
    51fe:	80 91 a7 01 	lds	r24, 0x01A7
    5202:	90 91 a8 01 	lds	r25, 0x01A8
    5206:	ae 01       	movw	r20, r28
    5208:	4f 5f       	subi	r20, 0xFF	; 255
    520a:	5f 4f       	sbci	r21, 0xFF	; 255
    520c:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <ftoa>
		printStatus(tx_string);
    5210:	ce 01       	movw	r24, r28
    5212:	01 96       	adiw	r24, 0x01	; 1
    5214:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
		break;
    5218:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
		
		case 402:	// Send I part of PID-controller 3
		ftoa(ch3.I_err, tx_string);
    521c:	60 91 a9 01 	lds	r22, 0x01A9
    5220:	70 91 aa 01 	lds	r23, 0x01AA
    5224:	80 91 ab 01 	lds	r24, 0x01AB
    5228:	90 91 ac 01 	lds	r25, 0x01AC
    522c:	ae 01       	movw	r20, r28
    522e:	4f 5f       	subi	r20, 0xFF	; 255
    5230:	5f 4f       	sbci	r21, 0xFF	; 255
    5232:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <ftoa>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    5236:	81 e2       	ldi	r24, 0x21	; 33
    5238:	8d 8b       	std	Y+21, r24	; 0x15
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    523a:	e9 e3       	ldi	r30, 0x39	; 57
    523c:	f5 e0       	ldi	r31, 0x05	; 5
    523e:	81 81       	ldd	r24, Z+1	; 0x01
    5240:	8e 8b       	std	Y+22, r24	; 0x16
    5242:	82 81       	ldd	r24, Z+2	; 0x02
    5244:	8f 8b       	std	Y+23, r24	; 0x17
    5246:	83 81       	ldd	r24, Z+3	; 0x03
    5248:	88 8f       	std	Y+24, r24	; 0x18
    524a:	ae 01       	movw	r20, r28
    524c:	4f 5f       	subi	r20, 0xFF	; 255
    524e:	5f 4f       	sbci	r21, 0xFF	; 255
    5250:	9e 01       	movw	r18, r28
    5252:	27 5e       	subi	r18, 0xE7	; 231
    5254:	3f 4f       	sbci	r19, 0xFF	; 255
    5256:	00 e0       	ldi	r16, 0x00	; 0
    5258:	10 e0       	ldi	r17, 0x00	; 0
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    525a:	da 01       	movw	r26, r20
    525c:	08 c0       	rjmp	.+16     	; 0x526e <SendParameter+0x1512>
	{
		tx_string[cnt+4] = msg_string[cnt];
    525e:	fa 01       	movw	r30, r20
    5260:	81 91       	ld	r24, Z+
    5262:	af 01       	movw	r20, r30
    5264:	f9 01       	movw	r30, r18
    5266:	81 93       	st	Z+, r24
    5268:	9f 01       	movw	r18, r30
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    526a:	0f 5f       	subi	r16, 0xFF	; 255
    526c:	1f 4f       	sbci	r17, 0xFF	; 255
    526e:	fd 01       	movw	r30, r26
    5270:	01 90       	ld	r0, Z+
    5272:	00 20       	and	r0, r0
    5274:	e9 f7       	brne	.-6      	; 0x5270 <SendParameter+0x1514>
    5276:	cf 01       	movw	r24, r30
    5278:	8a 1b       	sub	r24, r26
    527a:	9b 0b       	sbc	r25, r27
    527c:	02 96       	adiw	r24, 0x02	; 2
    527e:	08 17       	cp	r16, r24
    5280:	19 07       	cpc	r17, r25
    5282:	68 f3       	brcs	.-38     	; 0x525e <SendParameter+0x1502>
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    5284:	78 01       	movw	r14, r16
    5286:	ff ef       	ldi	r31, 0xFF	; 255
    5288:	ef 1a       	sub	r14, r31
    528a:	ff 0a       	sbc	r15, r31
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    528c:	1e 14       	cp	r1, r14
    528e:	1f 04       	cpc	r1, r15
    5290:	14 f0       	brlt	.+4      	; 0x5296 <SendParameter+0x153a>
    5292:	0c 94 2e 35 	jmp	0x6a5c	; 0x6a5c <SendParameter+0x2d00>
    5296:	fe 01       	movw	r30, r28
    5298:	75 96       	adiw	r30, 0x15	; 21
    529a:	a7 01       	movw	r20, r14
    529c:	4e 0f       	add	r20, r30
    529e:	5f 1f       	adc	r21, r31
    52a0:	80 e0       	ldi	r24, 0x00	; 0
    52a2:	90 e0       	ldi	r25, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    52a4:	b8 e0       	ldi	r27, 0x08	; 8
    52a6:	d1 2c       	mov	r13, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    52a8:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    52aa:	29 2f       	mov	r18, r25
    52ac:	33 27       	eor	r19, r19
    52ae:	27 fd       	sbrc	r18, 7
    52b0:	3a 95       	dec	r19
    52b2:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
    52b4:	32 2f       	mov	r19, r18
    52b6:	22 27       	eor	r18, r18
    52b8:	6b 2f       	mov	r22, r27
    52ba:	7d 2d       	mov	r23, r13
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    52bc:	33 23       	and	r19, r19
    52be:	3c f4       	brge	.+14     	; 0x52ce <SendParameter+0x1572>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    52c0:	22 0f       	add	r18, r18
    52c2:	33 1f       	adc	r19, r19
    52c4:	a1 e2       	ldi	r26, 0x21	; 33
    52c6:	2a 27       	eor	r18, r26
    52c8:	a0 e1       	ldi	r26, 0x10	; 16
    52ca:	3a 27       	eor	r19, r26
    52cc:	02 c0       	rjmp	.+4      	; 0x52d2 <SendParameter+0x1576>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    52ce:	22 0f       	add	r18, r18
    52d0:	33 1f       	adc	r19, r19
    52d2:	61 50       	subi	r22, 0x01	; 1
    52d4:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    52d6:	91 f7       	brne	.-28     	; 0x52bc <SendParameter+0x1560>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    52d8:	98 2f       	mov	r25, r24
    52da:	88 27       	eor	r24, r24
    52dc:	82 27       	eor	r24, r18
    52de:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    52e0:	e4 17       	cp	r30, r20
    52e2:	f5 07       	cpc	r31, r21
    52e4:	09 f7       	brne	.-62     	; 0x52a8 <SendParameter+0x154c>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    52e6:	6c 01       	movw	r12, r24
    52e8:	40 e1       	ldi	r20, 0x10	; 16
    52ea:	6f e2       	ldi	r22, 0x2F	; 47
    52ec:	75 e0       	ldi	r23, 0x05	; 5
    52ee:	0e 94 04 3b 	call	0x7608	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    52f2:	8f e2       	ldi	r24, 0x2F	; 47
    52f4:	95 e0       	ldi	r25, 0x05	; 5
    52f6:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <strupr>
	if(crcXmodem < 0x10)
    52fa:	b0 e1       	ldi	r27, 0x10	; 16
    52fc:	cb 16       	cp	r12, r27
    52fe:	d1 04       	cpc	r13, r1
    5300:	98 f4       	brcc	.+38     	; 0x5328 <SendParameter+0x15cc>
	{
		tx_string[cnt+4] = crc[0];
    5302:	80 91 2f 05 	lds	r24, 0x052F
    5306:	fe 01       	movw	r30, r28
    5308:	e0 0f       	add	r30, r16
    530a:	f1 1f       	adc	r31, r17
    530c:	81 8f       	std	Z+25, r24	; 0x19
		tx_string[cnt+3] = '0';
    530e:	80 e3       	ldi	r24, 0x30	; 48
    5310:	fe 01       	movw	r30, r28
    5312:	e0 0f       	add	r30, r16
    5314:	f1 1f       	adc	r31, r17
    5316:	80 8f       	std	Z+24, r24	; 0x18
		tx_string[cnt+2] = '0';
    5318:	fe 01       	movw	r30, r28
    531a:	e0 0f       	add	r30, r16
    531c:	f1 1f       	adc	r31, r17
    531e:	87 8b       	std	Z+23, r24	; 0x17
		tx_string[cnt+1] = '0';
    5320:	fe 01       	movw	r30, r28
    5322:	ee 0d       	add	r30, r14
    5324:	ff 1d       	adc	r31, r15
    5326:	85 8b       	std	Z+21, r24	; 0x15
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    5328:	c6 01       	movw	r24, r12
    532a:	40 97       	sbiw	r24, 0x10	; 16
    532c:	80 3f       	cpi	r24, 0xF0	; 240
    532e:	91 05       	cpc	r25, r1
    5330:	b8 f4       	brcc	.+46     	; 0x5360 <SendParameter+0x1604>
	{
		tx_string[cnt+4] = crc[1];
    5332:	af e2       	ldi	r26, 0x2F	; 47
    5334:	b5 e0       	ldi	r27, 0x05	; 5
    5336:	11 96       	adiw	r26, 0x01	; 1
    5338:	8c 91       	ld	r24, X
    533a:	11 97       	sbiw	r26, 0x01	; 1
    533c:	fe 01       	movw	r30, r28
    533e:	e0 0f       	add	r30, r16
    5340:	f1 1f       	adc	r31, r17
    5342:	81 8f       	std	Z+25, r24	; 0x19
		tx_string[cnt+3] = crc[0];
    5344:	8c 91       	ld	r24, X
    5346:	fe 01       	movw	r30, r28
    5348:	e0 0f       	add	r30, r16
    534a:	f1 1f       	adc	r31, r17
    534c:	80 8f       	std	Z+24, r24	; 0x18
		tx_string[cnt+2] = '0';
    534e:	80 e3       	ldi	r24, 0x30	; 48
    5350:	fe 01       	movw	r30, r28
    5352:	e0 0f       	add	r30, r16
    5354:	f1 1f       	adc	r31, r17
    5356:	87 8b       	std	Z+23, r24	; 0x17
		tx_string[cnt+1] = '0';		
    5358:	fe 01       	movw	r30, r28
    535a:	ee 0d       	add	r30, r14
    535c:	ff 1d       	adc	r31, r15
    535e:	85 8b       	std	Z+21, r24	; 0x15
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    5360:	c6 01       	movw	r24, r12
    5362:	9a 95       	dec	r25
    5364:	81 15       	cp	r24, r1
    5366:	9f 40       	sbci	r25, 0x0F	; 15
    5368:	b8 f4       	brcc	.+46     	; 0x5398 <SendParameter+0x163c>
	{
		tx_string[cnt+4] = crc[2];
    536a:	ef e2       	ldi	r30, 0x2F	; 47
    536c:	f5 e0       	ldi	r31, 0x05	; 5
    536e:	82 81       	ldd	r24, Z+2	; 0x02
    5370:	de 01       	movw	r26, r28
    5372:	a0 0f       	add	r26, r16
    5374:	b1 1f       	adc	r27, r17
    5376:	59 96       	adiw	r26, 0x19	; 25
    5378:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[1];
    537a:	81 81       	ldd	r24, Z+1	; 0x01
    537c:	de 01       	movw	r26, r28
    537e:	a0 0f       	add	r26, r16
    5380:	b1 1f       	adc	r27, r17
    5382:	58 96       	adiw	r26, 0x18	; 24
    5384:	8c 93       	st	X, r24
    5386:	58 97       	sbiw	r26, 0x18	; 24
		tx_string[cnt+2] = crc[0];
    5388:	80 81       	ld	r24, Z
    538a:	fd 01       	movw	r30, r26
    538c:	87 8b       	std	Z+23, r24	; 0x17
		tx_string[cnt+1] = '0';		
    538e:	80 e3       	ldi	r24, 0x30	; 48
    5390:	fe 01       	movw	r30, r28
    5392:	ee 0d       	add	r30, r14
    5394:	ff 1d       	adc	r31, r15
    5396:	85 8b       	std	Z+21, r24	; 0x15
	}
	if(crcXmodem >= 0x1000)
    5398:	c1 14       	cp	r12, r1
    539a:	f0 e1       	ldi	r31, 0x10	; 16
    539c:	df 06       	cpc	r13, r31
    539e:	c0 f0       	brcs	.+48     	; 0x53d0 <SendParameter+0x1674>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    53a0:	de 01       	movw	r26, r28
    53a2:	ae 0d       	add	r26, r14
    53a4:	bf 1d       	adc	r27, r15
    53a6:	ef e2       	ldi	r30, 0x2F	; 47
    53a8:	f5 e0       	ldi	r31, 0x05	; 5
    53aa:	80 81       	ld	r24, Z
    53ac:	55 96       	adiw	r26, 0x15	; 21
    53ae:	8c 93       	st	X, r24
		tx_string[cnt+2] = crc[1];
    53b0:	81 81       	ldd	r24, Z+1	; 0x01
    53b2:	de 01       	movw	r26, r28
    53b4:	a0 0f       	add	r26, r16
    53b6:	b1 1f       	adc	r27, r17
    53b8:	57 96       	adiw	r26, 0x17	; 23
    53ba:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[2];
    53bc:	82 81       	ldd	r24, Z+2	; 0x02
    53be:	de 01       	movw	r26, r28
    53c0:	a0 0f       	add	r26, r16
    53c2:	b1 1f       	adc	r27, r17
    53c4:	58 96       	adiw	r26, 0x18	; 24
    53c6:	8c 93       	st	X, r24
    53c8:	58 97       	sbiw	r26, 0x18	; 24
		tx_string[cnt+4] = crc[3];
    53ca:	83 81       	ldd	r24, Z+3	; 0x03
    53cc:	fd 01       	movw	r30, r26
    53ce:	81 8f       	std	Z+25, r24	; 0x19
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    53d0:	c8 01       	movw	r24, r16
    53d2:	05 96       	adiw	r24, 0x05	; 5
    53d4:	fe 01       	movw	r30, r28
    53d6:	e8 0f       	add	r30, r24
    53d8:	f9 1f       	adc	r31, r25
    53da:	2d e0       	ldi	r18, 0x0D	; 13
    53dc:	25 8b       	std	Z+21, r18	; 0x15
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    53de:	99 23       	and	r25, r25
    53e0:	14 f4       	brge	.+4      	; 0x53e6 <SendParameter+0x168a>
    53e2:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
    53e6:	ae 01       	movw	r20, r28
    53e8:	4b 5e       	subi	r20, 0xEB	; 235
    53ea:	5f 4f       	sbci	r21, 0xFF	; 255
    53ec:	0a 5f       	subi	r16, 0xFA	; 250
    53ee:	1f 4f       	sbci	r17, 0xFF	; 255
    53f0:	04 0f       	add	r16, r20
    53f2:	15 1f       	adc	r17, r21
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    53f4:	e7 e5       	ldi	r30, 0x57	; 87
    53f6:	f5 e0       	ldi	r31, 0x05	; 5
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    53f8:	61 ec       	ldi	r22, 0xC1	; 193
    53fa:	70 e0       	ldi	r23, 0x00	; 0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    53fc:	30 e0       	ldi	r19, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    53fe:	da 01       	movw	r26, r20
    5400:	8d 91       	ld	r24, X+
    5402:	ad 01       	movw	r20, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    5404:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    5406:	21 81       	ldd	r18, Z+1	; 0x01
    5408:	90 81       	ld	r25, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    540a:	29 13       	cpse	r18, r25
    540c:	04 c0       	rjmp	.+8      	; 0x5416 <SendParameter+0x16ba>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    540e:	db 01       	movw	r26, r22
    5410:	9c 91       	ld	r25, X
    5412:	90 62       	ori	r25, 0x20	; 32
    5414:	9c 93       	st	X, r25
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    5416:	90 81       	ld	r25, Z
    5418:	a3 81       	ldd	r26, Z+3	; 0x03
    541a:	b4 81       	ldd	r27, Z+4	; 0x04
    541c:	a9 0f       	add	r26, r25
    541e:	b1 1d       	adc	r27, r1
    5420:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    5422:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    5424:	a2 2f       	mov	r26, r18
    5426:	b0 e0       	ldi	r27, 0x00	; 0
    5428:	82 81       	ldd	r24, Z+2	; 0x02
    542a:	90 e0       	ldi	r25, 0x00	; 0
    542c:	01 97       	sbiw	r24, 0x01	; 1
    542e:	a8 17       	cp	r26, r24
    5430:	b9 07       	cpc	r27, r25
    5432:	11 f0       	breq	.+4      	; 0x5438 <SendParameter+0x16dc>
    5434:	2f 5f       	subi	r18, 0xFF	; 255
    5436:	01 c0       	rjmp	.+2      	; 0x543a <SendParameter+0x16de>
    5438:	23 2f       	mov	r18, r19
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    543a:	20 83       	st	Z, r18
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    543c:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    543e:	40 17       	cp	r20, r16
    5440:	51 07       	cpc	r21, r17
    5442:	e9 f6       	brne	.-70     	; 0x53fe <SendParameter+0x16a2>
    5444:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
		ftoa(ch3.I_err, tx_string);
		printStatus(tx_string);
		break;
		
		case 403:	// Send D part of PID-controller 3
		ftoa(ch3.D_err, tx_string);
    5448:	60 91 ad 01 	lds	r22, 0x01AD
    544c:	70 91 ae 01 	lds	r23, 0x01AE
    5450:	80 91 af 01 	lds	r24, 0x01AF
    5454:	90 91 b0 01 	lds	r25, 0x01B0
    5458:	ae 01       	movw	r20, r28
    545a:	4f 5f       	subi	r20, 0xFF	; 255
    545c:	5f 4f       	sbci	r21, 0xFF	; 255
    545e:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <ftoa>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    5462:	81 e2       	ldi	r24, 0x21	; 33
    5464:	8d 8b       	std	Y+21, r24	; 0x15
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    5466:	e9 e3       	ldi	r30, 0x39	; 57
    5468:	f5 e0       	ldi	r31, 0x05	; 5
    546a:	81 81       	ldd	r24, Z+1	; 0x01
    546c:	8e 8b       	std	Y+22, r24	; 0x16
    546e:	82 81       	ldd	r24, Z+2	; 0x02
    5470:	8f 8b       	std	Y+23, r24	; 0x17
    5472:	83 81       	ldd	r24, Z+3	; 0x03
    5474:	88 8f       	std	Y+24, r24	; 0x18
    5476:	ae 01       	movw	r20, r28
    5478:	4f 5f       	subi	r20, 0xFF	; 255
    547a:	5f 4f       	sbci	r21, 0xFF	; 255
    547c:	9e 01       	movw	r18, r28
    547e:	27 5e       	subi	r18, 0xE7	; 231
    5480:	3f 4f       	sbci	r19, 0xFF	; 255
    5482:	00 e0       	ldi	r16, 0x00	; 0
    5484:	10 e0       	ldi	r17, 0x00	; 0
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    5486:	da 01       	movw	r26, r20
    5488:	08 c0       	rjmp	.+16     	; 0x549a <SendParameter+0x173e>
	{
		tx_string[cnt+4] = msg_string[cnt];
    548a:	fa 01       	movw	r30, r20
    548c:	81 91       	ld	r24, Z+
    548e:	af 01       	movw	r20, r30
    5490:	f9 01       	movw	r30, r18
    5492:	81 93       	st	Z+, r24
    5494:	9f 01       	movw	r18, r30
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    5496:	0f 5f       	subi	r16, 0xFF	; 255
    5498:	1f 4f       	sbci	r17, 0xFF	; 255
    549a:	fd 01       	movw	r30, r26
    549c:	01 90       	ld	r0, Z+
    549e:	00 20       	and	r0, r0
    54a0:	e9 f7       	brne	.-6      	; 0x549c <SendParameter+0x1740>
    54a2:	cf 01       	movw	r24, r30
    54a4:	8a 1b       	sub	r24, r26
    54a6:	9b 0b       	sbc	r25, r27
    54a8:	02 96       	adiw	r24, 0x02	; 2
    54aa:	08 17       	cp	r16, r24
    54ac:	19 07       	cpc	r17, r25
    54ae:	68 f3       	brcs	.-38     	; 0x548a <SendParameter+0x172e>
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    54b0:	78 01       	movw	r14, r16
    54b2:	ff ef       	ldi	r31, 0xFF	; 255
    54b4:	ef 1a       	sub	r14, r31
    54b6:	ff 0a       	sbc	r15, r31
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    54b8:	1e 14       	cp	r1, r14
    54ba:	1f 04       	cpc	r1, r15
    54bc:	14 f0       	brlt	.+4      	; 0x54c2 <SendParameter+0x1766>
    54be:	0c 94 3b 35 	jmp	0x6a76	; 0x6a76 <SendParameter+0x2d1a>
    54c2:	fe 01       	movw	r30, r28
    54c4:	75 96       	adiw	r30, 0x15	; 21
    54c6:	a7 01       	movw	r20, r14
    54c8:	4e 0f       	add	r20, r30
    54ca:	5f 1f       	adc	r21, r31
    54cc:	80 e0       	ldi	r24, 0x00	; 0
    54ce:	90 e0       	ldi	r25, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    54d0:	b8 e0       	ldi	r27, 0x08	; 8
    54d2:	d1 2c       	mov	r13, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    54d4:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    54d6:	29 2f       	mov	r18, r25
    54d8:	33 27       	eor	r19, r19
    54da:	27 fd       	sbrc	r18, 7
    54dc:	3a 95       	dec	r19
    54de:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
    54e0:	32 2f       	mov	r19, r18
    54e2:	22 27       	eor	r18, r18
    54e4:	6b 2f       	mov	r22, r27
    54e6:	7d 2d       	mov	r23, r13
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    54e8:	33 23       	and	r19, r19
    54ea:	3c f4       	brge	.+14     	; 0x54fa <SendParameter+0x179e>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    54ec:	22 0f       	add	r18, r18
    54ee:	33 1f       	adc	r19, r19
    54f0:	a1 e2       	ldi	r26, 0x21	; 33
    54f2:	2a 27       	eor	r18, r26
    54f4:	a0 e1       	ldi	r26, 0x10	; 16
    54f6:	3a 27       	eor	r19, r26
    54f8:	02 c0       	rjmp	.+4      	; 0x54fe <SendParameter+0x17a2>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    54fa:	22 0f       	add	r18, r18
    54fc:	33 1f       	adc	r19, r19
    54fe:	61 50       	subi	r22, 0x01	; 1
    5500:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    5502:	91 f7       	brne	.-28     	; 0x54e8 <SendParameter+0x178c>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    5504:	98 2f       	mov	r25, r24
    5506:	88 27       	eor	r24, r24
    5508:	82 27       	eor	r24, r18
    550a:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    550c:	e4 17       	cp	r30, r20
    550e:	f5 07       	cpc	r31, r21
    5510:	09 f7       	brne	.-62     	; 0x54d4 <SendParameter+0x1778>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    5512:	6c 01       	movw	r12, r24
    5514:	40 e1       	ldi	r20, 0x10	; 16
    5516:	6f e2       	ldi	r22, 0x2F	; 47
    5518:	75 e0       	ldi	r23, 0x05	; 5
    551a:	0e 94 04 3b 	call	0x7608	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    551e:	8f e2       	ldi	r24, 0x2F	; 47
    5520:	95 e0       	ldi	r25, 0x05	; 5
    5522:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <strupr>
	if(crcXmodem < 0x10)
    5526:	b0 e1       	ldi	r27, 0x10	; 16
    5528:	cb 16       	cp	r12, r27
    552a:	d1 04       	cpc	r13, r1
    552c:	98 f4       	brcc	.+38     	; 0x5554 <SendParameter+0x17f8>
	{
		tx_string[cnt+4] = crc[0];
    552e:	80 91 2f 05 	lds	r24, 0x052F
    5532:	fe 01       	movw	r30, r28
    5534:	e0 0f       	add	r30, r16
    5536:	f1 1f       	adc	r31, r17
    5538:	81 8f       	std	Z+25, r24	; 0x19
		tx_string[cnt+3] = '0';
    553a:	80 e3       	ldi	r24, 0x30	; 48
    553c:	fe 01       	movw	r30, r28
    553e:	e0 0f       	add	r30, r16
    5540:	f1 1f       	adc	r31, r17
    5542:	80 8f       	std	Z+24, r24	; 0x18
		tx_string[cnt+2] = '0';
    5544:	fe 01       	movw	r30, r28
    5546:	e0 0f       	add	r30, r16
    5548:	f1 1f       	adc	r31, r17
    554a:	87 8b       	std	Z+23, r24	; 0x17
		tx_string[cnt+1] = '0';
    554c:	fe 01       	movw	r30, r28
    554e:	ee 0d       	add	r30, r14
    5550:	ff 1d       	adc	r31, r15
    5552:	85 8b       	std	Z+21, r24	; 0x15
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    5554:	c6 01       	movw	r24, r12
    5556:	40 97       	sbiw	r24, 0x10	; 16
    5558:	80 3f       	cpi	r24, 0xF0	; 240
    555a:	91 05       	cpc	r25, r1
    555c:	b8 f4       	brcc	.+46     	; 0x558c <SendParameter+0x1830>
	{
		tx_string[cnt+4] = crc[1];
    555e:	af e2       	ldi	r26, 0x2F	; 47
    5560:	b5 e0       	ldi	r27, 0x05	; 5
    5562:	11 96       	adiw	r26, 0x01	; 1
    5564:	8c 91       	ld	r24, X
    5566:	11 97       	sbiw	r26, 0x01	; 1
    5568:	fe 01       	movw	r30, r28
    556a:	e0 0f       	add	r30, r16
    556c:	f1 1f       	adc	r31, r17
    556e:	81 8f       	std	Z+25, r24	; 0x19
		tx_string[cnt+3] = crc[0];
    5570:	8c 91       	ld	r24, X
    5572:	fe 01       	movw	r30, r28
    5574:	e0 0f       	add	r30, r16
    5576:	f1 1f       	adc	r31, r17
    5578:	80 8f       	std	Z+24, r24	; 0x18
		tx_string[cnt+2] = '0';
    557a:	80 e3       	ldi	r24, 0x30	; 48
    557c:	fe 01       	movw	r30, r28
    557e:	e0 0f       	add	r30, r16
    5580:	f1 1f       	adc	r31, r17
    5582:	87 8b       	std	Z+23, r24	; 0x17
		tx_string[cnt+1] = '0';		
    5584:	fe 01       	movw	r30, r28
    5586:	ee 0d       	add	r30, r14
    5588:	ff 1d       	adc	r31, r15
    558a:	85 8b       	std	Z+21, r24	; 0x15
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    558c:	c6 01       	movw	r24, r12
    558e:	9a 95       	dec	r25
    5590:	81 15       	cp	r24, r1
    5592:	9f 40       	sbci	r25, 0x0F	; 15
    5594:	b8 f4       	brcc	.+46     	; 0x55c4 <SendParameter+0x1868>
	{
		tx_string[cnt+4] = crc[2];
    5596:	ef e2       	ldi	r30, 0x2F	; 47
    5598:	f5 e0       	ldi	r31, 0x05	; 5
    559a:	82 81       	ldd	r24, Z+2	; 0x02
    559c:	de 01       	movw	r26, r28
    559e:	a0 0f       	add	r26, r16
    55a0:	b1 1f       	adc	r27, r17
    55a2:	59 96       	adiw	r26, 0x19	; 25
    55a4:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[1];
    55a6:	81 81       	ldd	r24, Z+1	; 0x01
    55a8:	de 01       	movw	r26, r28
    55aa:	a0 0f       	add	r26, r16
    55ac:	b1 1f       	adc	r27, r17
    55ae:	58 96       	adiw	r26, 0x18	; 24
    55b0:	8c 93       	st	X, r24
    55b2:	58 97       	sbiw	r26, 0x18	; 24
		tx_string[cnt+2] = crc[0];
    55b4:	80 81       	ld	r24, Z
    55b6:	fd 01       	movw	r30, r26
    55b8:	87 8b       	std	Z+23, r24	; 0x17
		tx_string[cnt+1] = '0';		
    55ba:	80 e3       	ldi	r24, 0x30	; 48
    55bc:	fe 01       	movw	r30, r28
    55be:	ee 0d       	add	r30, r14
    55c0:	ff 1d       	adc	r31, r15
    55c2:	85 8b       	std	Z+21, r24	; 0x15
	}
	if(crcXmodem >= 0x1000)
    55c4:	c1 14       	cp	r12, r1
    55c6:	f0 e1       	ldi	r31, 0x10	; 16
    55c8:	df 06       	cpc	r13, r31
    55ca:	c0 f0       	brcs	.+48     	; 0x55fc <SendParameter+0x18a0>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    55cc:	de 01       	movw	r26, r28
    55ce:	ae 0d       	add	r26, r14
    55d0:	bf 1d       	adc	r27, r15
    55d2:	ef e2       	ldi	r30, 0x2F	; 47
    55d4:	f5 e0       	ldi	r31, 0x05	; 5
    55d6:	80 81       	ld	r24, Z
    55d8:	55 96       	adiw	r26, 0x15	; 21
    55da:	8c 93       	st	X, r24
		tx_string[cnt+2] = crc[1];
    55dc:	81 81       	ldd	r24, Z+1	; 0x01
    55de:	de 01       	movw	r26, r28
    55e0:	a0 0f       	add	r26, r16
    55e2:	b1 1f       	adc	r27, r17
    55e4:	57 96       	adiw	r26, 0x17	; 23
    55e6:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[2];
    55e8:	82 81       	ldd	r24, Z+2	; 0x02
    55ea:	de 01       	movw	r26, r28
    55ec:	a0 0f       	add	r26, r16
    55ee:	b1 1f       	adc	r27, r17
    55f0:	58 96       	adiw	r26, 0x18	; 24
    55f2:	8c 93       	st	X, r24
    55f4:	58 97       	sbiw	r26, 0x18	; 24
		tx_string[cnt+4] = crc[3];
    55f6:	83 81       	ldd	r24, Z+3	; 0x03
    55f8:	fd 01       	movw	r30, r26
    55fa:	81 8f       	std	Z+25, r24	; 0x19
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    55fc:	c8 01       	movw	r24, r16
    55fe:	05 96       	adiw	r24, 0x05	; 5
    5600:	fe 01       	movw	r30, r28
    5602:	e8 0f       	add	r30, r24
    5604:	f9 1f       	adc	r31, r25
    5606:	2d e0       	ldi	r18, 0x0D	; 13
    5608:	25 8b       	std	Z+21, r18	; 0x15
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    560a:	99 23       	and	r25, r25
    560c:	14 f4       	brge	.+4      	; 0x5612 <SendParameter+0x18b6>
    560e:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
    5612:	ae 01       	movw	r20, r28
    5614:	4b 5e       	subi	r20, 0xEB	; 235
    5616:	5f 4f       	sbci	r21, 0xFF	; 255
    5618:	0a 5f       	subi	r16, 0xFA	; 250
    561a:	1f 4f       	sbci	r17, 0xFF	; 255
    561c:	04 0f       	add	r16, r20
    561e:	15 1f       	adc	r17, r21
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    5620:	e7 e5       	ldi	r30, 0x57	; 87
    5622:	f5 e0       	ldi	r31, 0x05	; 5
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    5624:	61 ec       	ldi	r22, 0xC1	; 193
    5626:	70 e0       	ldi	r23, 0x00	; 0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    5628:	30 e0       	ldi	r19, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    562a:	da 01       	movw	r26, r20
    562c:	8d 91       	ld	r24, X+
    562e:	ad 01       	movw	r20, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    5630:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    5632:	21 81       	ldd	r18, Z+1	; 0x01
    5634:	90 81       	ld	r25, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    5636:	29 13       	cpse	r18, r25
    5638:	04 c0       	rjmp	.+8      	; 0x5642 <SendParameter+0x18e6>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    563a:	db 01       	movw	r26, r22
    563c:	9c 91       	ld	r25, X
    563e:	90 62       	ori	r25, 0x20	; 32
    5640:	9c 93       	st	X, r25
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    5642:	90 81       	ld	r25, Z
    5644:	a3 81       	ldd	r26, Z+3	; 0x03
    5646:	b4 81       	ldd	r27, Z+4	; 0x04
    5648:	a9 0f       	add	r26, r25
    564a:	b1 1d       	adc	r27, r1
    564c:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    564e:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    5650:	a2 2f       	mov	r26, r18
    5652:	b0 e0       	ldi	r27, 0x00	; 0
    5654:	82 81       	ldd	r24, Z+2	; 0x02
    5656:	90 e0       	ldi	r25, 0x00	; 0
    5658:	01 97       	sbiw	r24, 0x01	; 1
    565a:	a8 17       	cp	r26, r24
    565c:	b9 07       	cpc	r27, r25
    565e:	11 f0       	breq	.+4      	; 0x5664 <SendParameter+0x1908>
    5660:	2f 5f       	subi	r18, 0xFF	; 255
    5662:	01 c0       	rjmp	.+2      	; 0x5666 <SendParameter+0x190a>
    5664:	23 2f       	mov	r18, r19
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    5666:	20 83       	st	Z, r18
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    5668:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    566a:	40 17       	cp	r20, r16
    566c:	51 07       	cpc	r21, r17
    566e:	e9 f6       	brne	.-70     	; 0x562a <SendParameter+0x18ce>
    5670:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
		ftoa(ch3.D_err, tx_string);
		printStatus(tx_string);
		break;
		
		case 404:	// Send ch3.TempSetPoint
		ftoa(ch3.TempSetPoint, tx_string);
    5674:	60 91 9d 01 	lds	r22, 0x019D
    5678:	70 91 9e 01 	lds	r23, 0x019E
    567c:	80 91 9f 01 	lds	r24, 0x019F
    5680:	90 91 a0 01 	lds	r25, 0x01A0
    5684:	ae 01       	movw	r20, r28
    5686:	4f 5f       	subi	r20, 0xFF	; 255
    5688:	5f 4f       	sbci	r21, 0xFF	; 255
    568a:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <ftoa>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    568e:	81 e2       	ldi	r24, 0x21	; 33
    5690:	8d 8b       	std	Y+21, r24	; 0x15
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    5692:	e9 e3       	ldi	r30, 0x39	; 57
    5694:	f5 e0       	ldi	r31, 0x05	; 5
    5696:	81 81       	ldd	r24, Z+1	; 0x01
    5698:	8e 8b       	std	Y+22, r24	; 0x16
    569a:	82 81       	ldd	r24, Z+2	; 0x02
    569c:	8f 8b       	std	Y+23, r24	; 0x17
    569e:	83 81       	ldd	r24, Z+3	; 0x03
    56a0:	88 8f       	std	Y+24, r24	; 0x18
    56a2:	ae 01       	movw	r20, r28
    56a4:	4f 5f       	subi	r20, 0xFF	; 255
    56a6:	5f 4f       	sbci	r21, 0xFF	; 255
    56a8:	9e 01       	movw	r18, r28
    56aa:	27 5e       	subi	r18, 0xE7	; 231
    56ac:	3f 4f       	sbci	r19, 0xFF	; 255
    56ae:	00 e0       	ldi	r16, 0x00	; 0
    56b0:	10 e0       	ldi	r17, 0x00	; 0
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    56b2:	da 01       	movw	r26, r20
    56b4:	08 c0       	rjmp	.+16     	; 0x56c6 <SendParameter+0x196a>
	{
		tx_string[cnt+4] = msg_string[cnt];
    56b6:	fa 01       	movw	r30, r20
    56b8:	81 91       	ld	r24, Z+
    56ba:	af 01       	movw	r20, r30
    56bc:	f9 01       	movw	r30, r18
    56be:	81 93       	st	Z+, r24
    56c0:	9f 01       	movw	r18, r30
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    56c2:	0f 5f       	subi	r16, 0xFF	; 255
    56c4:	1f 4f       	sbci	r17, 0xFF	; 255
    56c6:	fd 01       	movw	r30, r26
    56c8:	01 90       	ld	r0, Z+
    56ca:	00 20       	and	r0, r0
    56cc:	e9 f7       	brne	.-6      	; 0x56c8 <SendParameter+0x196c>
    56ce:	cf 01       	movw	r24, r30
    56d0:	8a 1b       	sub	r24, r26
    56d2:	9b 0b       	sbc	r25, r27
    56d4:	02 96       	adiw	r24, 0x02	; 2
    56d6:	08 17       	cp	r16, r24
    56d8:	19 07       	cpc	r17, r25
    56da:	68 f3       	brcs	.-38     	; 0x56b6 <SendParameter+0x195a>
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    56dc:	78 01       	movw	r14, r16
    56de:	ff ef       	ldi	r31, 0xFF	; 255
    56e0:	ef 1a       	sub	r14, r31
    56e2:	ff 0a       	sbc	r15, r31
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    56e4:	1e 14       	cp	r1, r14
    56e6:	1f 04       	cpc	r1, r15
    56e8:	14 f0       	brlt	.+4      	; 0x56ee <SendParameter+0x1992>
    56ea:	0c 94 48 35 	jmp	0x6a90	; 0x6a90 <SendParameter+0x2d34>
    56ee:	fe 01       	movw	r30, r28
    56f0:	75 96       	adiw	r30, 0x15	; 21
    56f2:	a7 01       	movw	r20, r14
    56f4:	4e 0f       	add	r20, r30
    56f6:	5f 1f       	adc	r21, r31
    56f8:	80 e0       	ldi	r24, 0x00	; 0
    56fa:	90 e0       	ldi	r25, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    56fc:	b8 e0       	ldi	r27, 0x08	; 8
    56fe:	d1 2c       	mov	r13, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    5700:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    5702:	29 2f       	mov	r18, r25
    5704:	33 27       	eor	r19, r19
    5706:	27 fd       	sbrc	r18, 7
    5708:	3a 95       	dec	r19
    570a:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
    570c:	32 2f       	mov	r19, r18
    570e:	22 27       	eor	r18, r18
    5710:	6b 2f       	mov	r22, r27
    5712:	7d 2d       	mov	r23, r13
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    5714:	33 23       	and	r19, r19
    5716:	3c f4       	brge	.+14     	; 0x5726 <SendParameter+0x19ca>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    5718:	22 0f       	add	r18, r18
    571a:	33 1f       	adc	r19, r19
    571c:	a1 e2       	ldi	r26, 0x21	; 33
    571e:	2a 27       	eor	r18, r26
    5720:	a0 e1       	ldi	r26, 0x10	; 16
    5722:	3a 27       	eor	r19, r26
    5724:	02 c0       	rjmp	.+4      	; 0x572a <SendParameter+0x19ce>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    5726:	22 0f       	add	r18, r18
    5728:	33 1f       	adc	r19, r19
    572a:	61 50       	subi	r22, 0x01	; 1
    572c:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    572e:	91 f7       	brne	.-28     	; 0x5714 <SendParameter+0x19b8>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    5730:	98 2f       	mov	r25, r24
    5732:	88 27       	eor	r24, r24
    5734:	82 27       	eor	r24, r18
    5736:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    5738:	e4 17       	cp	r30, r20
    573a:	f5 07       	cpc	r31, r21
    573c:	09 f7       	brne	.-62     	; 0x5700 <SendParameter+0x19a4>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    573e:	6c 01       	movw	r12, r24
    5740:	40 e1       	ldi	r20, 0x10	; 16
    5742:	6f e2       	ldi	r22, 0x2F	; 47
    5744:	75 e0       	ldi	r23, 0x05	; 5
    5746:	0e 94 04 3b 	call	0x7608	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    574a:	8f e2       	ldi	r24, 0x2F	; 47
    574c:	95 e0       	ldi	r25, 0x05	; 5
    574e:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <strupr>
	if(crcXmodem < 0x10)
    5752:	b0 e1       	ldi	r27, 0x10	; 16
    5754:	cb 16       	cp	r12, r27
    5756:	d1 04       	cpc	r13, r1
    5758:	98 f4       	brcc	.+38     	; 0x5780 <SendParameter+0x1a24>
	{
		tx_string[cnt+4] = crc[0];
    575a:	80 91 2f 05 	lds	r24, 0x052F
    575e:	fe 01       	movw	r30, r28
    5760:	e0 0f       	add	r30, r16
    5762:	f1 1f       	adc	r31, r17
    5764:	81 8f       	std	Z+25, r24	; 0x19
		tx_string[cnt+3] = '0';
    5766:	80 e3       	ldi	r24, 0x30	; 48
    5768:	fe 01       	movw	r30, r28
    576a:	e0 0f       	add	r30, r16
    576c:	f1 1f       	adc	r31, r17
    576e:	80 8f       	std	Z+24, r24	; 0x18
		tx_string[cnt+2] = '0';
    5770:	fe 01       	movw	r30, r28
    5772:	e0 0f       	add	r30, r16
    5774:	f1 1f       	adc	r31, r17
    5776:	87 8b       	std	Z+23, r24	; 0x17
		tx_string[cnt+1] = '0';
    5778:	fe 01       	movw	r30, r28
    577a:	ee 0d       	add	r30, r14
    577c:	ff 1d       	adc	r31, r15
    577e:	85 8b       	std	Z+21, r24	; 0x15
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    5780:	c6 01       	movw	r24, r12
    5782:	40 97       	sbiw	r24, 0x10	; 16
    5784:	80 3f       	cpi	r24, 0xF0	; 240
    5786:	91 05       	cpc	r25, r1
    5788:	b8 f4       	brcc	.+46     	; 0x57b8 <SendParameter+0x1a5c>
	{
		tx_string[cnt+4] = crc[1];
    578a:	af e2       	ldi	r26, 0x2F	; 47
    578c:	b5 e0       	ldi	r27, 0x05	; 5
    578e:	11 96       	adiw	r26, 0x01	; 1
    5790:	8c 91       	ld	r24, X
    5792:	11 97       	sbiw	r26, 0x01	; 1
    5794:	fe 01       	movw	r30, r28
    5796:	e0 0f       	add	r30, r16
    5798:	f1 1f       	adc	r31, r17
    579a:	81 8f       	std	Z+25, r24	; 0x19
		tx_string[cnt+3] = crc[0];
    579c:	8c 91       	ld	r24, X
    579e:	fe 01       	movw	r30, r28
    57a0:	e0 0f       	add	r30, r16
    57a2:	f1 1f       	adc	r31, r17
    57a4:	80 8f       	std	Z+24, r24	; 0x18
		tx_string[cnt+2] = '0';
    57a6:	80 e3       	ldi	r24, 0x30	; 48
    57a8:	fe 01       	movw	r30, r28
    57aa:	e0 0f       	add	r30, r16
    57ac:	f1 1f       	adc	r31, r17
    57ae:	87 8b       	std	Z+23, r24	; 0x17
		tx_string[cnt+1] = '0';		
    57b0:	fe 01       	movw	r30, r28
    57b2:	ee 0d       	add	r30, r14
    57b4:	ff 1d       	adc	r31, r15
    57b6:	85 8b       	std	Z+21, r24	; 0x15
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    57b8:	c6 01       	movw	r24, r12
    57ba:	9a 95       	dec	r25
    57bc:	81 15       	cp	r24, r1
    57be:	9f 40       	sbci	r25, 0x0F	; 15
    57c0:	b8 f4       	brcc	.+46     	; 0x57f0 <SendParameter+0x1a94>
	{
		tx_string[cnt+4] = crc[2];
    57c2:	ef e2       	ldi	r30, 0x2F	; 47
    57c4:	f5 e0       	ldi	r31, 0x05	; 5
    57c6:	82 81       	ldd	r24, Z+2	; 0x02
    57c8:	de 01       	movw	r26, r28
    57ca:	a0 0f       	add	r26, r16
    57cc:	b1 1f       	adc	r27, r17
    57ce:	59 96       	adiw	r26, 0x19	; 25
    57d0:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[1];
    57d2:	81 81       	ldd	r24, Z+1	; 0x01
    57d4:	de 01       	movw	r26, r28
    57d6:	a0 0f       	add	r26, r16
    57d8:	b1 1f       	adc	r27, r17
    57da:	58 96       	adiw	r26, 0x18	; 24
    57dc:	8c 93       	st	X, r24
    57de:	58 97       	sbiw	r26, 0x18	; 24
		tx_string[cnt+2] = crc[0];
    57e0:	80 81       	ld	r24, Z
    57e2:	fd 01       	movw	r30, r26
    57e4:	87 8b       	std	Z+23, r24	; 0x17
		tx_string[cnt+1] = '0';		
    57e6:	80 e3       	ldi	r24, 0x30	; 48
    57e8:	fe 01       	movw	r30, r28
    57ea:	ee 0d       	add	r30, r14
    57ec:	ff 1d       	adc	r31, r15
    57ee:	85 8b       	std	Z+21, r24	; 0x15
	}
	if(crcXmodem >= 0x1000)
    57f0:	c1 14       	cp	r12, r1
    57f2:	f0 e1       	ldi	r31, 0x10	; 16
    57f4:	df 06       	cpc	r13, r31
    57f6:	c0 f0       	brcs	.+48     	; 0x5828 <SendParameter+0x1acc>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    57f8:	de 01       	movw	r26, r28
    57fa:	ae 0d       	add	r26, r14
    57fc:	bf 1d       	adc	r27, r15
    57fe:	ef e2       	ldi	r30, 0x2F	; 47
    5800:	f5 e0       	ldi	r31, 0x05	; 5
    5802:	80 81       	ld	r24, Z
    5804:	55 96       	adiw	r26, 0x15	; 21
    5806:	8c 93       	st	X, r24
		tx_string[cnt+2] = crc[1];
    5808:	81 81       	ldd	r24, Z+1	; 0x01
    580a:	de 01       	movw	r26, r28
    580c:	a0 0f       	add	r26, r16
    580e:	b1 1f       	adc	r27, r17
    5810:	57 96       	adiw	r26, 0x17	; 23
    5812:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[2];
    5814:	82 81       	ldd	r24, Z+2	; 0x02
    5816:	de 01       	movw	r26, r28
    5818:	a0 0f       	add	r26, r16
    581a:	b1 1f       	adc	r27, r17
    581c:	58 96       	adiw	r26, 0x18	; 24
    581e:	8c 93       	st	X, r24
    5820:	58 97       	sbiw	r26, 0x18	; 24
		tx_string[cnt+4] = crc[3];
    5822:	83 81       	ldd	r24, Z+3	; 0x03
    5824:	fd 01       	movw	r30, r26
    5826:	81 8f       	std	Z+25, r24	; 0x19
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    5828:	c8 01       	movw	r24, r16
    582a:	05 96       	adiw	r24, 0x05	; 5
    582c:	fe 01       	movw	r30, r28
    582e:	e8 0f       	add	r30, r24
    5830:	f9 1f       	adc	r31, r25
    5832:	2d e0       	ldi	r18, 0x0D	; 13
    5834:	25 8b       	std	Z+21, r18	; 0x15
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    5836:	99 23       	and	r25, r25
    5838:	14 f4       	brge	.+4      	; 0x583e <SendParameter+0x1ae2>
    583a:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
    583e:	ae 01       	movw	r20, r28
    5840:	4b 5e       	subi	r20, 0xEB	; 235
    5842:	5f 4f       	sbci	r21, 0xFF	; 255
    5844:	0a 5f       	subi	r16, 0xFA	; 250
    5846:	1f 4f       	sbci	r17, 0xFF	; 255
    5848:	04 0f       	add	r16, r20
    584a:	15 1f       	adc	r17, r21
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    584c:	e7 e5       	ldi	r30, 0x57	; 87
    584e:	f5 e0       	ldi	r31, 0x05	; 5
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    5850:	61 ec       	ldi	r22, 0xC1	; 193
    5852:	70 e0       	ldi	r23, 0x00	; 0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    5854:	30 e0       	ldi	r19, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    5856:	da 01       	movw	r26, r20
    5858:	8d 91       	ld	r24, X+
    585a:	ad 01       	movw	r20, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    585c:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    585e:	21 81       	ldd	r18, Z+1	; 0x01
    5860:	90 81       	ld	r25, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    5862:	29 13       	cpse	r18, r25
    5864:	04 c0       	rjmp	.+8      	; 0x586e <SendParameter+0x1b12>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    5866:	db 01       	movw	r26, r22
    5868:	9c 91       	ld	r25, X
    586a:	90 62       	ori	r25, 0x20	; 32
    586c:	9c 93       	st	X, r25
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    586e:	90 81       	ld	r25, Z
    5870:	a3 81       	ldd	r26, Z+3	; 0x03
    5872:	b4 81       	ldd	r27, Z+4	; 0x04
    5874:	a9 0f       	add	r26, r25
    5876:	b1 1d       	adc	r27, r1
    5878:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    587a:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    587c:	a2 2f       	mov	r26, r18
    587e:	b0 e0       	ldi	r27, 0x00	; 0
    5880:	82 81       	ldd	r24, Z+2	; 0x02
    5882:	90 e0       	ldi	r25, 0x00	; 0
    5884:	01 97       	sbiw	r24, 0x01	; 1
    5886:	a8 17       	cp	r26, r24
    5888:	b9 07       	cpc	r27, r25
    588a:	11 f0       	breq	.+4      	; 0x5890 <SendParameter+0x1b34>
    588c:	2f 5f       	subi	r18, 0xFF	; 255
    588e:	01 c0       	rjmp	.+2      	; 0x5892 <SendParameter+0x1b36>
    5890:	23 2f       	mov	r18, r19
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    5892:	20 83       	st	Z, r18
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    5894:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    5896:	40 17       	cp	r20, r16
    5898:	51 07       	cpc	r21, r17
    589a:	e9 f6       	brne	.-70     	; 0x5856 <SendParameter+0x1afa>
    589c:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
		ftoa(ch3.TempSetPoint, tx_string);
		printStatus(tx_string);
		break;
		
		case 405:	// Send Pgain ch3
		ftoa(ch3.Pgain, tx_string);
    58a0:	60 91 b9 01 	lds	r22, 0x01B9
    58a4:	70 91 ba 01 	lds	r23, 0x01BA
    58a8:	80 91 bb 01 	lds	r24, 0x01BB
    58ac:	90 91 bc 01 	lds	r25, 0x01BC
    58b0:	ae 01       	movw	r20, r28
    58b2:	4f 5f       	subi	r20, 0xFF	; 255
    58b4:	5f 4f       	sbci	r21, 0xFF	; 255
    58b6:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <ftoa>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    58ba:	81 e2       	ldi	r24, 0x21	; 33
    58bc:	8d 8b       	std	Y+21, r24	; 0x15
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    58be:	e9 e3       	ldi	r30, 0x39	; 57
    58c0:	f5 e0       	ldi	r31, 0x05	; 5
    58c2:	81 81       	ldd	r24, Z+1	; 0x01
    58c4:	8e 8b       	std	Y+22, r24	; 0x16
    58c6:	82 81       	ldd	r24, Z+2	; 0x02
    58c8:	8f 8b       	std	Y+23, r24	; 0x17
    58ca:	83 81       	ldd	r24, Z+3	; 0x03
    58cc:	88 8f       	std	Y+24, r24	; 0x18
    58ce:	ae 01       	movw	r20, r28
    58d0:	4f 5f       	subi	r20, 0xFF	; 255
    58d2:	5f 4f       	sbci	r21, 0xFF	; 255
    58d4:	9e 01       	movw	r18, r28
    58d6:	27 5e       	subi	r18, 0xE7	; 231
    58d8:	3f 4f       	sbci	r19, 0xFF	; 255
    58da:	00 e0       	ldi	r16, 0x00	; 0
    58dc:	10 e0       	ldi	r17, 0x00	; 0
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    58de:	da 01       	movw	r26, r20
    58e0:	08 c0       	rjmp	.+16     	; 0x58f2 <SendParameter+0x1b96>
	{
		tx_string[cnt+4] = msg_string[cnt];
    58e2:	fa 01       	movw	r30, r20
    58e4:	81 91       	ld	r24, Z+
    58e6:	af 01       	movw	r20, r30
    58e8:	f9 01       	movw	r30, r18
    58ea:	81 93       	st	Z+, r24
    58ec:	9f 01       	movw	r18, r30
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    58ee:	0f 5f       	subi	r16, 0xFF	; 255
    58f0:	1f 4f       	sbci	r17, 0xFF	; 255
    58f2:	fd 01       	movw	r30, r26
    58f4:	01 90       	ld	r0, Z+
    58f6:	00 20       	and	r0, r0
    58f8:	e9 f7       	brne	.-6      	; 0x58f4 <SendParameter+0x1b98>
    58fa:	cf 01       	movw	r24, r30
    58fc:	8a 1b       	sub	r24, r26
    58fe:	9b 0b       	sbc	r25, r27
    5900:	02 96       	adiw	r24, 0x02	; 2
    5902:	08 17       	cp	r16, r24
    5904:	19 07       	cpc	r17, r25
    5906:	68 f3       	brcs	.-38     	; 0x58e2 <SendParameter+0x1b86>
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    5908:	78 01       	movw	r14, r16
    590a:	ff ef       	ldi	r31, 0xFF	; 255
    590c:	ef 1a       	sub	r14, r31
    590e:	ff 0a       	sbc	r15, r31
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    5910:	1e 14       	cp	r1, r14
    5912:	1f 04       	cpc	r1, r15
    5914:	14 f0       	brlt	.+4      	; 0x591a <SendParameter+0x1bbe>
    5916:	0c 94 55 35 	jmp	0x6aaa	; 0x6aaa <SendParameter+0x2d4e>
    591a:	fe 01       	movw	r30, r28
    591c:	75 96       	adiw	r30, 0x15	; 21
    591e:	a7 01       	movw	r20, r14
    5920:	4e 0f       	add	r20, r30
    5922:	5f 1f       	adc	r21, r31
    5924:	80 e0       	ldi	r24, 0x00	; 0
    5926:	90 e0       	ldi	r25, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    5928:	b8 e0       	ldi	r27, 0x08	; 8
    592a:	d1 2c       	mov	r13, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    592c:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    592e:	29 2f       	mov	r18, r25
    5930:	33 27       	eor	r19, r19
    5932:	27 fd       	sbrc	r18, 7
    5934:	3a 95       	dec	r19
    5936:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
    5938:	32 2f       	mov	r19, r18
    593a:	22 27       	eor	r18, r18
    593c:	6b 2f       	mov	r22, r27
    593e:	7d 2d       	mov	r23, r13
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    5940:	33 23       	and	r19, r19
    5942:	3c f4       	brge	.+14     	; 0x5952 <SendParameter+0x1bf6>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    5944:	22 0f       	add	r18, r18
    5946:	33 1f       	adc	r19, r19
    5948:	a1 e2       	ldi	r26, 0x21	; 33
    594a:	2a 27       	eor	r18, r26
    594c:	a0 e1       	ldi	r26, 0x10	; 16
    594e:	3a 27       	eor	r19, r26
    5950:	02 c0       	rjmp	.+4      	; 0x5956 <SendParameter+0x1bfa>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    5952:	22 0f       	add	r18, r18
    5954:	33 1f       	adc	r19, r19
    5956:	61 50       	subi	r22, 0x01	; 1
    5958:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    595a:	91 f7       	brne	.-28     	; 0x5940 <SendParameter+0x1be4>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    595c:	98 2f       	mov	r25, r24
    595e:	88 27       	eor	r24, r24
    5960:	82 27       	eor	r24, r18
    5962:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    5964:	e4 17       	cp	r30, r20
    5966:	f5 07       	cpc	r31, r21
    5968:	09 f7       	brne	.-62     	; 0x592c <SendParameter+0x1bd0>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    596a:	6c 01       	movw	r12, r24
    596c:	40 e1       	ldi	r20, 0x10	; 16
    596e:	6f e2       	ldi	r22, 0x2F	; 47
    5970:	75 e0       	ldi	r23, 0x05	; 5
    5972:	0e 94 04 3b 	call	0x7608	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    5976:	8f e2       	ldi	r24, 0x2F	; 47
    5978:	95 e0       	ldi	r25, 0x05	; 5
    597a:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <strupr>
	if(crcXmodem < 0x10)
    597e:	b0 e1       	ldi	r27, 0x10	; 16
    5980:	cb 16       	cp	r12, r27
    5982:	d1 04       	cpc	r13, r1
    5984:	98 f4       	brcc	.+38     	; 0x59ac <SendParameter+0x1c50>
	{
		tx_string[cnt+4] = crc[0];
    5986:	80 91 2f 05 	lds	r24, 0x052F
    598a:	fe 01       	movw	r30, r28
    598c:	e0 0f       	add	r30, r16
    598e:	f1 1f       	adc	r31, r17
    5990:	81 8f       	std	Z+25, r24	; 0x19
		tx_string[cnt+3] = '0';
    5992:	80 e3       	ldi	r24, 0x30	; 48
    5994:	fe 01       	movw	r30, r28
    5996:	e0 0f       	add	r30, r16
    5998:	f1 1f       	adc	r31, r17
    599a:	80 8f       	std	Z+24, r24	; 0x18
		tx_string[cnt+2] = '0';
    599c:	fe 01       	movw	r30, r28
    599e:	e0 0f       	add	r30, r16
    59a0:	f1 1f       	adc	r31, r17
    59a2:	87 8b       	std	Z+23, r24	; 0x17
		tx_string[cnt+1] = '0';
    59a4:	fe 01       	movw	r30, r28
    59a6:	ee 0d       	add	r30, r14
    59a8:	ff 1d       	adc	r31, r15
    59aa:	85 8b       	std	Z+21, r24	; 0x15
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    59ac:	c6 01       	movw	r24, r12
    59ae:	40 97       	sbiw	r24, 0x10	; 16
    59b0:	80 3f       	cpi	r24, 0xF0	; 240
    59b2:	91 05       	cpc	r25, r1
    59b4:	b8 f4       	brcc	.+46     	; 0x59e4 <SendParameter+0x1c88>
	{
		tx_string[cnt+4] = crc[1];
    59b6:	af e2       	ldi	r26, 0x2F	; 47
    59b8:	b5 e0       	ldi	r27, 0x05	; 5
    59ba:	11 96       	adiw	r26, 0x01	; 1
    59bc:	8c 91       	ld	r24, X
    59be:	11 97       	sbiw	r26, 0x01	; 1
    59c0:	fe 01       	movw	r30, r28
    59c2:	e0 0f       	add	r30, r16
    59c4:	f1 1f       	adc	r31, r17
    59c6:	81 8f       	std	Z+25, r24	; 0x19
		tx_string[cnt+3] = crc[0];
    59c8:	8c 91       	ld	r24, X
    59ca:	fe 01       	movw	r30, r28
    59cc:	e0 0f       	add	r30, r16
    59ce:	f1 1f       	adc	r31, r17
    59d0:	80 8f       	std	Z+24, r24	; 0x18
		tx_string[cnt+2] = '0';
    59d2:	80 e3       	ldi	r24, 0x30	; 48
    59d4:	fe 01       	movw	r30, r28
    59d6:	e0 0f       	add	r30, r16
    59d8:	f1 1f       	adc	r31, r17
    59da:	87 8b       	std	Z+23, r24	; 0x17
		tx_string[cnt+1] = '0';		
    59dc:	fe 01       	movw	r30, r28
    59de:	ee 0d       	add	r30, r14
    59e0:	ff 1d       	adc	r31, r15
    59e2:	85 8b       	std	Z+21, r24	; 0x15
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    59e4:	c6 01       	movw	r24, r12
    59e6:	9a 95       	dec	r25
    59e8:	81 15       	cp	r24, r1
    59ea:	9f 40       	sbci	r25, 0x0F	; 15
    59ec:	b8 f4       	brcc	.+46     	; 0x5a1c <SendParameter+0x1cc0>
	{
		tx_string[cnt+4] = crc[2];
    59ee:	ef e2       	ldi	r30, 0x2F	; 47
    59f0:	f5 e0       	ldi	r31, 0x05	; 5
    59f2:	82 81       	ldd	r24, Z+2	; 0x02
    59f4:	de 01       	movw	r26, r28
    59f6:	a0 0f       	add	r26, r16
    59f8:	b1 1f       	adc	r27, r17
    59fa:	59 96       	adiw	r26, 0x19	; 25
    59fc:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[1];
    59fe:	81 81       	ldd	r24, Z+1	; 0x01
    5a00:	de 01       	movw	r26, r28
    5a02:	a0 0f       	add	r26, r16
    5a04:	b1 1f       	adc	r27, r17
    5a06:	58 96       	adiw	r26, 0x18	; 24
    5a08:	8c 93       	st	X, r24
    5a0a:	58 97       	sbiw	r26, 0x18	; 24
		tx_string[cnt+2] = crc[0];
    5a0c:	80 81       	ld	r24, Z
    5a0e:	fd 01       	movw	r30, r26
    5a10:	87 8b       	std	Z+23, r24	; 0x17
		tx_string[cnt+1] = '0';		
    5a12:	80 e3       	ldi	r24, 0x30	; 48
    5a14:	fe 01       	movw	r30, r28
    5a16:	ee 0d       	add	r30, r14
    5a18:	ff 1d       	adc	r31, r15
    5a1a:	85 8b       	std	Z+21, r24	; 0x15
	}
	if(crcXmodem >= 0x1000)
    5a1c:	c1 14       	cp	r12, r1
    5a1e:	f0 e1       	ldi	r31, 0x10	; 16
    5a20:	df 06       	cpc	r13, r31
    5a22:	c0 f0       	brcs	.+48     	; 0x5a54 <SendParameter+0x1cf8>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    5a24:	de 01       	movw	r26, r28
    5a26:	ae 0d       	add	r26, r14
    5a28:	bf 1d       	adc	r27, r15
    5a2a:	ef e2       	ldi	r30, 0x2F	; 47
    5a2c:	f5 e0       	ldi	r31, 0x05	; 5
    5a2e:	80 81       	ld	r24, Z
    5a30:	55 96       	adiw	r26, 0x15	; 21
    5a32:	8c 93       	st	X, r24
		tx_string[cnt+2] = crc[1];
    5a34:	81 81       	ldd	r24, Z+1	; 0x01
    5a36:	de 01       	movw	r26, r28
    5a38:	a0 0f       	add	r26, r16
    5a3a:	b1 1f       	adc	r27, r17
    5a3c:	57 96       	adiw	r26, 0x17	; 23
    5a3e:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[2];
    5a40:	82 81       	ldd	r24, Z+2	; 0x02
    5a42:	de 01       	movw	r26, r28
    5a44:	a0 0f       	add	r26, r16
    5a46:	b1 1f       	adc	r27, r17
    5a48:	58 96       	adiw	r26, 0x18	; 24
    5a4a:	8c 93       	st	X, r24
    5a4c:	58 97       	sbiw	r26, 0x18	; 24
		tx_string[cnt+4] = crc[3];
    5a4e:	83 81       	ldd	r24, Z+3	; 0x03
    5a50:	fd 01       	movw	r30, r26
    5a52:	81 8f       	std	Z+25, r24	; 0x19
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    5a54:	c8 01       	movw	r24, r16
    5a56:	05 96       	adiw	r24, 0x05	; 5
    5a58:	fe 01       	movw	r30, r28
    5a5a:	e8 0f       	add	r30, r24
    5a5c:	f9 1f       	adc	r31, r25
    5a5e:	2d e0       	ldi	r18, 0x0D	; 13
    5a60:	25 8b       	std	Z+21, r18	; 0x15
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    5a62:	99 23       	and	r25, r25
    5a64:	14 f4       	brge	.+4      	; 0x5a6a <SendParameter+0x1d0e>
    5a66:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
    5a6a:	ae 01       	movw	r20, r28
    5a6c:	4b 5e       	subi	r20, 0xEB	; 235
    5a6e:	5f 4f       	sbci	r21, 0xFF	; 255
    5a70:	0a 5f       	subi	r16, 0xFA	; 250
    5a72:	1f 4f       	sbci	r17, 0xFF	; 255
    5a74:	04 0f       	add	r16, r20
    5a76:	15 1f       	adc	r17, r21
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    5a78:	e7 e5       	ldi	r30, 0x57	; 87
    5a7a:	f5 e0       	ldi	r31, 0x05	; 5
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    5a7c:	61 ec       	ldi	r22, 0xC1	; 193
    5a7e:	70 e0       	ldi	r23, 0x00	; 0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    5a80:	30 e0       	ldi	r19, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    5a82:	da 01       	movw	r26, r20
    5a84:	8d 91       	ld	r24, X+
    5a86:	ad 01       	movw	r20, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    5a88:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    5a8a:	21 81       	ldd	r18, Z+1	; 0x01
    5a8c:	90 81       	ld	r25, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    5a8e:	29 13       	cpse	r18, r25
    5a90:	04 c0       	rjmp	.+8      	; 0x5a9a <SendParameter+0x1d3e>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    5a92:	db 01       	movw	r26, r22
    5a94:	9c 91       	ld	r25, X
    5a96:	90 62       	ori	r25, 0x20	; 32
    5a98:	9c 93       	st	X, r25
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    5a9a:	90 81       	ld	r25, Z
    5a9c:	a3 81       	ldd	r26, Z+3	; 0x03
    5a9e:	b4 81       	ldd	r27, Z+4	; 0x04
    5aa0:	a9 0f       	add	r26, r25
    5aa2:	b1 1d       	adc	r27, r1
    5aa4:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    5aa6:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    5aa8:	a2 2f       	mov	r26, r18
    5aaa:	b0 e0       	ldi	r27, 0x00	; 0
    5aac:	82 81       	ldd	r24, Z+2	; 0x02
    5aae:	90 e0       	ldi	r25, 0x00	; 0
    5ab0:	01 97       	sbiw	r24, 0x01	; 1
    5ab2:	a8 17       	cp	r26, r24
    5ab4:	b9 07       	cpc	r27, r25
    5ab6:	11 f0       	breq	.+4      	; 0x5abc <SendParameter+0x1d60>
    5ab8:	2f 5f       	subi	r18, 0xFF	; 255
    5aba:	01 c0       	rjmp	.+2      	; 0x5abe <SendParameter+0x1d62>
    5abc:	23 2f       	mov	r18, r19
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    5abe:	20 83       	st	Z, r18
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    5ac0:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    5ac2:	40 17       	cp	r20, r16
    5ac4:	51 07       	cpc	r21, r17
    5ac6:	e9 f6       	brne	.-70     	; 0x5a82 <SendParameter+0x1d26>
    5ac8:	0c 94 9e 35 	jmp	0x6b3c	; 0x6b3c <SendParameter+0x2de0>
		ftoa(ch3.Pgain, tx_string);
		printStatus(tx_string);
		break;
		
		case 406:	// Send Igain ch3
		ftoa(ch3.Igain, tx_string);
    5acc:	60 91 bd 01 	lds	r22, 0x01BD
    5ad0:	70 91 be 01 	lds	r23, 0x01BE
    5ad4:	80 91 bf 01 	lds	r24, 0x01BF
    5ad8:	90 91 c0 01 	lds	r25, 0x01C0
    5adc:	ae 01       	movw	r20, r28
    5ade:	4f 5f       	subi	r20, 0xFF	; 255
    5ae0:	5f 4f       	sbci	r21, 0xFF	; 255
    5ae2:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <ftoa>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    5ae6:	81 e2       	ldi	r24, 0x21	; 33
    5ae8:	8d 8b       	std	Y+21, r24	; 0x15
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    5aea:	e9 e3       	ldi	r30, 0x39	; 57
    5aec:	f5 e0       	ldi	r31, 0x05	; 5
    5aee:	81 81       	ldd	r24, Z+1	; 0x01
    5af0:	8e 8b       	std	Y+22, r24	; 0x16
    5af2:	82 81       	ldd	r24, Z+2	; 0x02
    5af4:	8f 8b       	std	Y+23, r24	; 0x17
    5af6:	83 81       	ldd	r24, Z+3	; 0x03
    5af8:	88 8f       	std	Y+24, r24	; 0x18
    5afa:	ae 01       	movw	r20, r28
    5afc:	4f 5f       	subi	r20, 0xFF	; 255
    5afe:	5f 4f       	sbci	r21, 0xFF	; 255
    5b00:	9e 01       	movw	r18, r28
    5b02:	27 5e       	subi	r18, 0xE7	; 231
    5b04:	3f 4f       	sbci	r19, 0xFF	; 255
    5b06:	00 e0       	ldi	r16, 0x00	; 0
    5b08:	10 e0       	ldi	r17, 0x00	; 0
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    5b0a:	da 01       	movw	r26, r20
    5b0c:	08 c0       	rjmp	.+16     	; 0x5b1e <SendParameter+0x1dc2>
	{
		tx_string[cnt+4] = msg_string[cnt];
    5b0e:	fa 01       	movw	r30, r20
    5b10:	81 91       	ld	r24, Z+
    5b12:	af 01       	movw	r20, r30
    5b14:	f9 01       	movw	r30, r18
    5b16:	81 93       	st	Z+, r24
    5b18:	9f 01       	movw	r18, r30
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    5b1a:	0f 5f       	subi	r16, 0xFF	; 255
    5b1c:	1f 4f       	sbci	r17, 0xFF	; 255
    5b1e:	fd 01       	movw	r30, r26
    5b20:	01 90       	ld	r0, Z+
    5b22:	00 20       	and	r0, r0
    5b24:	e9 f7       	brne	.-6      	; 0x5b20 <SendParameter+0x1dc4>
    5b26:	cf 01       	movw	r24, r30
    5b28:	8a 1b       	sub	r24, r26
    5b2a:	9b 0b       	sbc	r25, r27
    5b2c:	02 96       	adiw	r24, 0x02	; 2
    5b2e:	08 17       	cp	r16, r24
    5b30:	19 07       	cpc	r17, r25
    5b32:	68 f3       	brcs	.-38     	; 0x5b0e <SendParameter+0x1db2>
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    5b34:	78 01       	movw	r14, r16
    5b36:	ff ef       	ldi	r31, 0xFF	; 255
    5b38:	ef 1a       	sub	r14, r31
    5b3a:	ff 0a       	sbc	r15, r31
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    5b3c:	1e 14       	cp	r1, r14
    5b3e:	1f 04       	cpc	r1, r15
    5b40:	0c f0       	brlt	.+2      	; 0x5b44 <SendParameter+0x1de8>
    5b42:	c0 c7       	rjmp	.+3968   	; 0x6ac4 <SendParameter+0x2d68>
    5b44:	fe 01       	movw	r30, r28
    5b46:	75 96       	adiw	r30, 0x15	; 21
    5b48:	a7 01       	movw	r20, r14
    5b4a:	4e 0f       	add	r20, r30
    5b4c:	5f 1f       	adc	r21, r31
    5b4e:	80 e0       	ldi	r24, 0x00	; 0
    5b50:	90 e0       	ldi	r25, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    5b52:	b8 e0       	ldi	r27, 0x08	; 8
    5b54:	d1 2c       	mov	r13, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    5b56:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    5b58:	29 2f       	mov	r18, r25
    5b5a:	33 27       	eor	r19, r19
    5b5c:	27 fd       	sbrc	r18, 7
    5b5e:	3a 95       	dec	r19
    5b60:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
    5b62:	32 2f       	mov	r19, r18
    5b64:	22 27       	eor	r18, r18
    5b66:	6b 2f       	mov	r22, r27
    5b68:	7d 2d       	mov	r23, r13
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    5b6a:	33 23       	and	r19, r19
    5b6c:	3c f4       	brge	.+14     	; 0x5b7c <SendParameter+0x1e20>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    5b6e:	22 0f       	add	r18, r18
    5b70:	33 1f       	adc	r19, r19
    5b72:	a1 e2       	ldi	r26, 0x21	; 33
    5b74:	2a 27       	eor	r18, r26
    5b76:	a0 e1       	ldi	r26, 0x10	; 16
    5b78:	3a 27       	eor	r19, r26
    5b7a:	02 c0       	rjmp	.+4      	; 0x5b80 <SendParameter+0x1e24>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    5b7c:	22 0f       	add	r18, r18
    5b7e:	33 1f       	adc	r19, r19
    5b80:	61 50       	subi	r22, 0x01	; 1
    5b82:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    5b84:	91 f7       	brne	.-28     	; 0x5b6a <SendParameter+0x1e0e>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    5b86:	98 2f       	mov	r25, r24
    5b88:	88 27       	eor	r24, r24
    5b8a:	82 27       	eor	r24, r18
    5b8c:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    5b8e:	e4 17       	cp	r30, r20
    5b90:	f5 07       	cpc	r31, r21
    5b92:	09 f7       	brne	.-62     	; 0x5b56 <SendParameter+0x1dfa>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    5b94:	6c 01       	movw	r12, r24
    5b96:	40 e1       	ldi	r20, 0x10	; 16
    5b98:	6f e2       	ldi	r22, 0x2F	; 47
    5b9a:	75 e0       	ldi	r23, 0x05	; 5
    5b9c:	0e 94 04 3b 	call	0x7608	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    5ba0:	8f e2       	ldi	r24, 0x2F	; 47
    5ba2:	95 e0       	ldi	r25, 0x05	; 5
    5ba4:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <strupr>
	if(crcXmodem < 0x10)
    5ba8:	b0 e1       	ldi	r27, 0x10	; 16
    5baa:	cb 16       	cp	r12, r27
    5bac:	d1 04       	cpc	r13, r1
    5bae:	98 f4       	brcc	.+38     	; 0x5bd6 <SendParameter+0x1e7a>
	{
		tx_string[cnt+4] = crc[0];
    5bb0:	80 91 2f 05 	lds	r24, 0x052F
    5bb4:	fe 01       	movw	r30, r28
    5bb6:	e0 0f       	add	r30, r16
    5bb8:	f1 1f       	adc	r31, r17
    5bba:	81 8f       	std	Z+25, r24	; 0x19
		tx_string[cnt+3] = '0';
    5bbc:	80 e3       	ldi	r24, 0x30	; 48
    5bbe:	fe 01       	movw	r30, r28
    5bc0:	e0 0f       	add	r30, r16
    5bc2:	f1 1f       	adc	r31, r17
    5bc4:	80 8f       	std	Z+24, r24	; 0x18
		tx_string[cnt+2] = '0';
    5bc6:	fe 01       	movw	r30, r28
    5bc8:	e0 0f       	add	r30, r16
    5bca:	f1 1f       	adc	r31, r17
    5bcc:	87 8b       	std	Z+23, r24	; 0x17
		tx_string[cnt+1] = '0';
    5bce:	fe 01       	movw	r30, r28
    5bd0:	ee 0d       	add	r30, r14
    5bd2:	ff 1d       	adc	r31, r15
    5bd4:	85 8b       	std	Z+21, r24	; 0x15
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    5bd6:	c6 01       	movw	r24, r12
    5bd8:	40 97       	sbiw	r24, 0x10	; 16
    5bda:	80 3f       	cpi	r24, 0xF0	; 240
    5bdc:	91 05       	cpc	r25, r1
    5bde:	b8 f4       	brcc	.+46     	; 0x5c0e <SendParameter+0x1eb2>
	{
		tx_string[cnt+4] = crc[1];
    5be0:	af e2       	ldi	r26, 0x2F	; 47
    5be2:	b5 e0       	ldi	r27, 0x05	; 5
    5be4:	11 96       	adiw	r26, 0x01	; 1
    5be6:	8c 91       	ld	r24, X
    5be8:	11 97       	sbiw	r26, 0x01	; 1
    5bea:	fe 01       	movw	r30, r28
    5bec:	e0 0f       	add	r30, r16
    5bee:	f1 1f       	adc	r31, r17
    5bf0:	81 8f       	std	Z+25, r24	; 0x19
		tx_string[cnt+3] = crc[0];
    5bf2:	8c 91       	ld	r24, X
    5bf4:	fe 01       	movw	r30, r28
    5bf6:	e0 0f       	add	r30, r16
    5bf8:	f1 1f       	adc	r31, r17
    5bfa:	80 8f       	std	Z+24, r24	; 0x18
		tx_string[cnt+2] = '0';
    5bfc:	80 e3       	ldi	r24, 0x30	; 48
    5bfe:	fe 01       	movw	r30, r28
    5c00:	e0 0f       	add	r30, r16
    5c02:	f1 1f       	adc	r31, r17
    5c04:	87 8b       	std	Z+23, r24	; 0x17
		tx_string[cnt+1] = '0';		
    5c06:	fe 01       	movw	r30, r28
    5c08:	ee 0d       	add	r30, r14
    5c0a:	ff 1d       	adc	r31, r15
    5c0c:	85 8b       	std	Z+21, r24	; 0x15
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    5c0e:	c6 01       	movw	r24, r12
    5c10:	9a 95       	dec	r25
    5c12:	81 15       	cp	r24, r1
    5c14:	9f 40       	sbci	r25, 0x0F	; 15
    5c16:	b8 f4       	brcc	.+46     	; 0x5c46 <SendParameter+0x1eea>
	{
		tx_string[cnt+4] = crc[2];
    5c18:	ef e2       	ldi	r30, 0x2F	; 47
    5c1a:	f5 e0       	ldi	r31, 0x05	; 5
    5c1c:	82 81       	ldd	r24, Z+2	; 0x02
    5c1e:	de 01       	movw	r26, r28
    5c20:	a0 0f       	add	r26, r16
    5c22:	b1 1f       	adc	r27, r17
    5c24:	59 96       	adiw	r26, 0x19	; 25
    5c26:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[1];
    5c28:	81 81       	ldd	r24, Z+1	; 0x01
    5c2a:	de 01       	movw	r26, r28
    5c2c:	a0 0f       	add	r26, r16
    5c2e:	b1 1f       	adc	r27, r17
    5c30:	58 96       	adiw	r26, 0x18	; 24
    5c32:	8c 93       	st	X, r24
    5c34:	58 97       	sbiw	r26, 0x18	; 24
		tx_string[cnt+2] = crc[0];
    5c36:	80 81       	ld	r24, Z
    5c38:	fd 01       	movw	r30, r26
    5c3a:	87 8b       	std	Z+23, r24	; 0x17
		tx_string[cnt+1] = '0';		
    5c3c:	80 e3       	ldi	r24, 0x30	; 48
    5c3e:	fe 01       	movw	r30, r28
    5c40:	ee 0d       	add	r30, r14
    5c42:	ff 1d       	adc	r31, r15
    5c44:	85 8b       	std	Z+21, r24	; 0x15
	}
	if(crcXmodem >= 0x1000)
    5c46:	c1 14       	cp	r12, r1
    5c48:	f0 e1       	ldi	r31, 0x10	; 16
    5c4a:	df 06       	cpc	r13, r31
    5c4c:	c0 f0       	brcs	.+48     	; 0x5c7e <SendParameter+0x1f22>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    5c4e:	de 01       	movw	r26, r28
    5c50:	ae 0d       	add	r26, r14
    5c52:	bf 1d       	adc	r27, r15
    5c54:	ef e2       	ldi	r30, 0x2F	; 47
    5c56:	f5 e0       	ldi	r31, 0x05	; 5
    5c58:	80 81       	ld	r24, Z
    5c5a:	55 96       	adiw	r26, 0x15	; 21
    5c5c:	8c 93       	st	X, r24
		tx_string[cnt+2] = crc[1];
    5c5e:	81 81       	ldd	r24, Z+1	; 0x01
    5c60:	de 01       	movw	r26, r28
    5c62:	a0 0f       	add	r26, r16
    5c64:	b1 1f       	adc	r27, r17
    5c66:	57 96       	adiw	r26, 0x17	; 23
    5c68:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[2];
    5c6a:	82 81       	ldd	r24, Z+2	; 0x02
    5c6c:	de 01       	movw	r26, r28
    5c6e:	a0 0f       	add	r26, r16
    5c70:	b1 1f       	adc	r27, r17
    5c72:	58 96       	adiw	r26, 0x18	; 24
    5c74:	8c 93       	st	X, r24
    5c76:	58 97       	sbiw	r26, 0x18	; 24
		tx_string[cnt+4] = crc[3];
    5c78:	83 81       	ldd	r24, Z+3	; 0x03
    5c7a:	fd 01       	movw	r30, r26
    5c7c:	81 8f       	std	Z+25, r24	; 0x19
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    5c7e:	c8 01       	movw	r24, r16
    5c80:	05 96       	adiw	r24, 0x05	; 5
    5c82:	fe 01       	movw	r30, r28
    5c84:	e8 0f       	add	r30, r24
    5c86:	f9 1f       	adc	r31, r25
    5c88:	2d e0       	ldi	r18, 0x0D	; 13
    5c8a:	25 8b       	std	Z+21, r18	; 0x15
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    5c8c:	99 23       	and	r25, r25
    5c8e:	0c f4       	brge	.+2      	; 0x5c92 <SendParameter+0x1f36>
    5c90:	55 c7       	rjmp	.+3754   	; 0x6b3c <SendParameter+0x2de0>
    5c92:	ae 01       	movw	r20, r28
    5c94:	4b 5e       	subi	r20, 0xEB	; 235
    5c96:	5f 4f       	sbci	r21, 0xFF	; 255
    5c98:	0a 5f       	subi	r16, 0xFA	; 250
    5c9a:	1f 4f       	sbci	r17, 0xFF	; 255
    5c9c:	04 0f       	add	r16, r20
    5c9e:	15 1f       	adc	r17, r21
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    5ca0:	e7 e5       	ldi	r30, 0x57	; 87
    5ca2:	f5 e0       	ldi	r31, 0x05	; 5
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    5ca4:	61 ec       	ldi	r22, 0xC1	; 193
    5ca6:	70 e0       	ldi	r23, 0x00	; 0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    5ca8:	30 e0       	ldi	r19, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    5caa:	da 01       	movw	r26, r20
    5cac:	8d 91       	ld	r24, X+
    5cae:	ad 01       	movw	r20, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    5cb0:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    5cb2:	21 81       	ldd	r18, Z+1	; 0x01
    5cb4:	90 81       	ld	r25, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    5cb6:	29 13       	cpse	r18, r25
    5cb8:	04 c0       	rjmp	.+8      	; 0x5cc2 <SendParameter+0x1f66>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    5cba:	db 01       	movw	r26, r22
    5cbc:	9c 91       	ld	r25, X
    5cbe:	90 62       	ori	r25, 0x20	; 32
    5cc0:	9c 93       	st	X, r25
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    5cc2:	90 81       	ld	r25, Z
    5cc4:	a3 81       	ldd	r26, Z+3	; 0x03
    5cc6:	b4 81       	ldd	r27, Z+4	; 0x04
    5cc8:	a9 0f       	add	r26, r25
    5cca:	b1 1d       	adc	r27, r1
    5ccc:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    5cce:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    5cd0:	a2 2f       	mov	r26, r18
    5cd2:	b0 e0       	ldi	r27, 0x00	; 0
    5cd4:	82 81       	ldd	r24, Z+2	; 0x02
    5cd6:	90 e0       	ldi	r25, 0x00	; 0
    5cd8:	01 97       	sbiw	r24, 0x01	; 1
    5cda:	a8 17       	cp	r26, r24
    5cdc:	b9 07       	cpc	r27, r25
    5cde:	11 f0       	breq	.+4      	; 0x5ce4 <SendParameter+0x1f88>
    5ce0:	2f 5f       	subi	r18, 0xFF	; 255
    5ce2:	01 c0       	rjmp	.+2      	; 0x5ce6 <SendParameter+0x1f8a>
    5ce4:	23 2f       	mov	r18, r19
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    5ce6:	20 83       	st	Z, r18
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    5ce8:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    5cea:	40 17       	cp	r20, r16
    5cec:	51 07       	cpc	r21, r17
    5cee:	e9 f6       	brne	.-70     	; 0x5caa <SendParameter+0x1f4e>
    5cf0:	25 c7       	rjmp	.+3658   	; 0x6b3c <SendParameter+0x2de0>
		ftoa(ch3.Igain, tx_string);
		printStatus(tx_string);
		break;
		
		case 407:	// Send Dgain ch3
		ftoa(ch3.Dgain, tx_string);
    5cf2:	60 91 c1 01 	lds	r22, 0x01C1
    5cf6:	70 91 c2 01 	lds	r23, 0x01C2
    5cfa:	80 91 c3 01 	lds	r24, 0x01C3
    5cfe:	90 91 c4 01 	lds	r25, 0x01C4
    5d02:	ae 01       	movw	r20, r28
    5d04:	4f 5f       	subi	r20, 0xFF	; 255
    5d06:	5f 4f       	sbci	r21, 0xFF	; 255
    5d08:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <ftoa>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    5d0c:	81 e2       	ldi	r24, 0x21	; 33
    5d0e:	8d 8b       	std	Y+21, r24	; 0x15
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    5d10:	e9 e3       	ldi	r30, 0x39	; 57
    5d12:	f5 e0       	ldi	r31, 0x05	; 5
    5d14:	81 81       	ldd	r24, Z+1	; 0x01
    5d16:	8e 8b       	std	Y+22, r24	; 0x16
    5d18:	82 81       	ldd	r24, Z+2	; 0x02
    5d1a:	8f 8b       	std	Y+23, r24	; 0x17
    5d1c:	83 81       	ldd	r24, Z+3	; 0x03
    5d1e:	88 8f       	std	Y+24, r24	; 0x18
    5d20:	ae 01       	movw	r20, r28
    5d22:	4f 5f       	subi	r20, 0xFF	; 255
    5d24:	5f 4f       	sbci	r21, 0xFF	; 255
    5d26:	9e 01       	movw	r18, r28
    5d28:	27 5e       	subi	r18, 0xE7	; 231
    5d2a:	3f 4f       	sbci	r19, 0xFF	; 255
    5d2c:	00 e0       	ldi	r16, 0x00	; 0
    5d2e:	10 e0       	ldi	r17, 0x00	; 0
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    5d30:	da 01       	movw	r26, r20
    5d32:	08 c0       	rjmp	.+16     	; 0x5d44 <SendParameter+0x1fe8>
	{
		tx_string[cnt+4] = msg_string[cnt];
    5d34:	fa 01       	movw	r30, r20
    5d36:	81 91       	ld	r24, Z+
    5d38:	af 01       	movw	r20, r30
    5d3a:	f9 01       	movw	r30, r18
    5d3c:	81 93       	st	Z+, r24
    5d3e:	9f 01       	movw	r18, r30
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    5d40:	0f 5f       	subi	r16, 0xFF	; 255
    5d42:	1f 4f       	sbci	r17, 0xFF	; 255
    5d44:	fd 01       	movw	r30, r26
    5d46:	01 90       	ld	r0, Z+
    5d48:	00 20       	and	r0, r0
    5d4a:	e9 f7       	brne	.-6      	; 0x5d46 <SendParameter+0x1fea>
    5d4c:	cf 01       	movw	r24, r30
    5d4e:	8a 1b       	sub	r24, r26
    5d50:	9b 0b       	sbc	r25, r27
    5d52:	02 96       	adiw	r24, 0x02	; 2
    5d54:	08 17       	cp	r16, r24
    5d56:	19 07       	cpc	r17, r25
    5d58:	68 f3       	brcs	.-38     	; 0x5d34 <SendParameter+0x1fd8>
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    5d5a:	78 01       	movw	r14, r16
    5d5c:	ff ef       	ldi	r31, 0xFF	; 255
    5d5e:	ef 1a       	sub	r14, r31
    5d60:	ff 0a       	sbc	r15, r31
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    5d62:	1e 14       	cp	r1, r14
    5d64:	1f 04       	cpc	r1, r15
    5d66:	0c f0       	brlt	.+2      	; 0x5d6a <SendParameter+0x200e>
    5d68:	b9 c6       	rjmp	.+3442   	; 0x6adc <SendParameter+0x2d80>
    5d6a:	fe 01       	movw	r30, r28
    5d6c:	75 96       	adiw	r30, 0x15	; 21
    5d6e:	a7 01       	movw	r20, r14
    5d70:	4e 0f       	add	r20, r30
    5d72:	5f 1f       	adc	r21, r31
    5d74:	80 e0       	ldi	r24, 0x00	; 0
    5d76:	90 e0       	ldi	r25, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    5d78:	b8 e0       	ldi	r27, 0x08	; 8
    5d7a:	d1 2c       	mov	r13, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    5d7c:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    5d7e:	29 2f       	mov	r18, r25
    5d80:	33 27       	eor	r19, r19
    5d82:	27 fd       	sbrc	r18, 7
    5d84:	3a 95       	dec	r19
    5d86:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
    5d88:	32 2f       	mov	r19, r18
    5d8a:	22 27       	eor	r18, r18
    5d8c:	6b 2f       	mov	r22, r27
    5d8e:	7d 2d       	mov	r23, r13
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    5d90:	33 23       	and	r19, r19
    5d92:	3c f4       	brge	.+14     	; 0x5da2 <SendParameter+0x2046>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    5d94:	22 0f       	add	r18, r18
    5d96:	33 1f       	adc	r19, r19
    5d98:	a1 e2       	ldi	r26, 0x21	; 33
    5d9a:	2a 27       	eor	r18, r26
    5d9c:	a0 e1       	ldi	r26, 0x10	; 16
    5d9e:	3a 27       	eor	r19, r26
    5da0:	02 c0       	rjmp	.+4      	; 0x5da6 <SendParameter+0x204a>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    5da2:	22 0f       	add	r18, r18
    5da4:	33 1f       	adc	r19, r19
    5da6:	61 50       	subi	r22, 0x01	; 1
    5da8:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    5daa:	91 f7       	brne	.-28     	; 0x5d90 <SendParameter+0x2034>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    5dac:	98 2f       	mov	r25, r24
    5dae:	88 27       	eor	r24, r24
    5db0:	82 27       	eor	r24, r18
    5db2:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    5db4:	e4 17       	cp	r30, r20
    5db6:	f5 07       	cpc	r31, r21
    5db8:	09 f7       	brne	.-62     	; 0x5d7c <SendParameter+0x2020>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    5dba:	6c 01       	movw	r12, r24
    5dbc:	40 e1       	ldi	r20, 0x10	; 16
    5dbe:	6f e2       	ldi	r22, 0x2F	; 47
    5dc0:	75 e0       	ldi	r23, 0x05	; 5
    5dc2:	0e 94 04 3b 	call	0x7608	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    5dc6:	8f e2       	ldi	r24, 0x2F	; 47
    5dc8:	95 e0       	ldi	r25, 0x05	; 5
    5dca:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <strupr>
	if(crcXmodem < 0x10)
    5dce:	b0 e1       	ldi	r27, 0x10	; 16
    5dd0:	cb 16       	cp	r12, r27
    5dd2:	d1 04       	cpc	r13, r1
    5dd4:	98 f4       	brcc	.+38     	; 0x5dfc <SendParameter+0x20a0>
	{
		tx_string[cnt+4] = crc[0];
    5dd6:	80 91 2f 05 	lds	r24, 0x052F
    5dda:	fe 01       	movw	r30, r28
    5ddc:	e0 0f       	add	r30, r16
    5dde:	f1 1f       	adc	r31, r17
    5de0:	81 8f       	std	Z+25, r24	; 0x19
		tx_string[cnt+3] = '0';
    5de2:	80 e3       	ldi	r24, 0x30	; 48
    5de4:	fe 01       	movw	r30, r28
    5de6:	e0 0f       	add	r30, r16
    5de8:	f1 1f       	adc	r31, r17
    5dea:	80 8f       	std	Z+24, r24	; 0x18
		tx_string[cnt+2] = '0';
    5dec:	fe 01       	movw	r30, r28
    5dee:	e0 0f       	add	r30, r16
    5df0:	f1 1f       	adc	r31, r17
    5df2:	87 8b       	std	Z+23, r24	; 0x17
		tx_string[cnt+1] = '0';
    5df4:	fe 01       	movw	r30, r28
    5df6:	ee 0d       	add	r30, r14
    5df8:	ff 1d       	adc	r31, r15
    5dfa:	85 8b       	std	Z+21, r24	; 0x15
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    5dfc:	c6 01       	movw	r24, r12
    5dfe:	40 97       	sbiw	r24, 0x10	; 16
    5e00:	80 3f       	cpi	r24, 0xF0	; 240
    5e02:	91 05       	cpc	r25, r1
    5e04:	b8 f4       	brcc	.+46     	; 0x5e34 <SendParameter+0x20d8>
	{
		tx_string[cnt+4] = crc[1];
    5e06:	af e2       	ldi	r26, 0x2F	; 47
    5e08:	b5 e0       	ldi	r27, 0x05	; 5
    5e0a:	11 96       	adiw	r26, 0x01	; 1
    5e0c:	8c 91       	ld	r24, X
    5e0e:	11 97       	sbiw	r26, 0x01	; 1
    5e10:	fe 01       	movw	r30, r28
    5e12:	e0 0f       	add	r30, r16
    5e14:	f1 1f       	adc	r31, r17
    5e16:	81 8f       	std	Z+25, r24	; 0x19
		tx_string[cnt+3] = crc[0];
    5e18:	8c 91       	ld	r24, X
    5e1a:	fe 01       	movw	r30, r28
    5e1c:	e0 0f       	add	r30, r16
    5e1e:	f1 1f       	adc	r31, r17
    5e20:	80 8f       	std	Z+24, r24	; 0x18
		tx_string[cnt+2] = '0';
    5e22:	80 e3       	ldi	r24, 0x30	; 48
    5e24:	fe 01       	movw	r30, r28
    5e26:	e0 0f       	add	r30, r16
    5e28:	f1 1f       	adc	r31, r17
    5e2a:	87 8b       	std	Z+23, r24	; 0x17
		tx_string[cnt+1] = '0';		
    5e2c:	fe 01       	movw	r30, r28
    5e2e:	ee 0d       	add	r30, r14
    5e30:	ff 1d       	adc	r31, r15
    5e32:	85 8b       	std	Z+21, r24	; 0x15
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    5e34:	c6 01       	movw	r24, r12
    5e36:	9a 95       	dec	r25
    5e38:	81 15       	cp	r24, r1
    5e3a:	9f 40       	sbci	r25, 0x0F	; 15
    5e3c:	b8 f4       	brcc	.+46     	; 0x5e6c <SendParameter+0x2110>
	{
		tx_string[cnt+4] = crc[2];
    5e3e:	ef e2       	ldi	r30, 0x2F	; 47
    5e40:	f5 e0       	ldi	r31, 0x05	; 5
    5e42:	82 81       	ldd	r24, Z+2	; 0x02
    5e44:	de 01       	movw	r26, r28
    5e46:	a0 0f       	add	r26, r16
    5e48:	b1 1f       	adc	r27, r17
    5e4a:	59 96       	adiw	r26, 0x19	; 25
    5e4c:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[1];
    5e4e:	81 81       	ldd	r24, Z+1	; 0x01
    5e50:	de 01       	movw	r26, r28
    5e52:	a0 0f       	add	r26, r16
    5e54:	b1 1f       	adc	r27, r17
    5e56:	58 96       	adiw	r26, 0x18	; 24
    5e58:	8c 93       	st	X, r24
    5e5a:	58 97       	sbiw	r26, 0x18	; 24
		tx_string[cnt+2] = crc[0];
    5e5c:	80 81       	ld	r24, Z
    5e5e:	fd 01       	movw	r30, r26
    5e60:	87 8b       	std	Z+23, r24	; 0x17
		tx_string[cnt+1] = '0';		
    5e62:	80 e3       	ldi	r24, 0x30	; 48
    5e64:	fe 01       	movw	r30, r28
    5e66:	ee 0d       	add	r30, r14
    5e68:	ff 1d       	adc	r31, r15
    5e6a:	85 8b       	std	Z+21, r24	; 0x15
	}
	if(crcXmodem >= 0x1000)
    5e6c:	c1 14       	cp	r12, r1
    5e6e:	f0 e1       	ldi	r31, 0x10	; 16
    5e70:	df 06       	cpc	r13, r31
    5e72:	c0 f0       	brcs	.+48     	; 0x5ea4 <SendParameter+0x2148>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    5e74:	de 01       	movw	r26, r28
    5e76:	ae 0d       	add	r26, r14
    5e78:	bf 1d       	adc	r27, r15
    5e7a:	ef e2       	ldi	r30, 0x2F	; 47
    5e7c:	f5 e0       	ldi	r31, 0x05	; 5
    5e7e:	80 81       	ld	r24, Z
    5e80:	55 96       	adiw	r26, 0x15	; 21
    5e82:	8c 93       	st	X, r24
		tx_string[cnt+2] = crc[1];
    5e84:	81 81       	ldd	r24, Z+1	; 0x01
    5e86:	de 01       	movw	r26, r28
    5e88:	a0 0f       	add	r26, r16
    5e8a:	b1 1f       	adc	r27, r17
    5e8c:	57 96       	adiw	r26, 0x17	; 23
    5e8e:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[2];
    5e90:	82 81       	ldd	r24, Z+2	; 0x02
    5e92:	de 01       	movw	r26, r28
    5e94:	a0 0f       	add	r26, r16
    5e96:	b1 1f       	adc	r27, r17
    5e98:	58 96       	adiw	r26, 0x18	; 24
    5e9a:	8c 93       	st	X, r24
    5e9c:	58 97       	sbiw	r26, 0x18	; 24
		tx_string[cnt+4] = crc[3];
    5e9e:	83 81       	ldd	r24, Z+3	; 0x03
    5ea0:	fd 01       	movw	r30, r26
    5ea2:	81 8f       	std	Z+25, r24	; 0x19
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    5ea4:	c8 01       	movw	r24, r16
    5ea6:	05 96       	adiw	r24, 0x05	; 5
    5ea8:	fe 01       	movw	r30, r28
    5eaa:	e8 0f       	add	r30, r24
    5eac:	f9 1f       	adc	r31, r25
    5eae:	2d e0       	ldi	r18, 0x0D	; 13
    5eb0:	25 8b       	std	Z+21, r18	; 0x15
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    5eb2:	99 23       	and	r25, r25
    5eb4:	0c f4       	brge	.+2      	; 0x5eb8 <SendParameter+0x215c>
    5eb6:	42 c6       	rjmp	.+3204   	; 0x6b3c <SendParameter+0x2de0>
    5eb8:	ae 01       	movw	r20, r28
    5eba:	4b 5e       	subi	r20, 0xEB	; 235
    5ebc:	5f 4f       	sbci	r21, 0xFF	; 255
    5ebe:	0a 5f       	subi	r16, 0xFA	; 250
    5ec0:	1f 4f       	sbci	r17, 0xFF	; 255
    5ec2:	04 0f       	add	r16, r20
    5ec4:	15 1f       	adc	r17, r21
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    5ec6:	e7 e5       	ldi	r30, 0x57	; 87
    5ec8:	f5 e0       	ldi	r31, 0x05	; 5
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    5eca:	61 ec       	ldi	r22, 0xC1	; 193
    5ecc:	70 e0       	ldi	r23, 0x00	; 0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    5ece:	30 e0       	ldi	r19, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    5ed0:	da 01       	movw	r26, r20
    5ed2:	8d 91       	ld	r24, X+
    5ed4:	ad 01       	movw	r20, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    5ed6:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    5ed8:	21 81       	ldd	r18, Z+1	; 0x01
    5eda:	90 81       	ld	r25, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    5edc:	29 13       	cpse	r18, r25
    5ede:	04 c0       	rjmp	.+8      	; 0x5ee8 <SendParameter+0x218c>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    5ee0:	db 01       	movw	r26, r22
    5ee2:	9c 91       	ld	r25, X
    5ee4:	90 62       	ori	r25, 0x20	; 32
    5ee6:	9c 93       	st	X, r25
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    5ee8:	90 81       	ld	r25, Z
    5eea:	a3 81       	ldd	r26, Z+3	; 0x03
    5eec:	b4 81       	ldd	r27, Z+4	; 0x04
    5eee:	a9 0f       	add	r26, r25
    5ef0:	b1 1d       	adc	r27, r1
    5ef2:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    5ef4:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    5ef6:	a2 2f       	mov	r26, r18
    5ef8:	b0 e0       	ldi	r27, 0x00	; 0
    5efa:	82 81       	ldd	r24, Z+2	; 0x02
    5efc:	90 e0       	ldi	r25, 0x00	; 0
    5efe:	01 97       	sbiw	r24, 0x01	; 1
    5f00:	a8 17       	cp	r26, r24
    5f02:	b9 07       	cpc	r27, r25
    5f04:	11 f0       	breq	.+4      	; 0x5f0a <SendParameter+0x21ae>
    5f06:	2f 5f       	subi	r18, 0xFF	; 255
    5f08:	01 c0       	rjmp	.+2      	; 0x5f0c <SendParameter+0x21b0>
    5f0a:	23 2f       	mov	r18, r19
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    5f0c:	20 83       	st	Z, r18
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    5f0e:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    5f10:	40 17       	cp	r20, r16
    5f12:	51 07       	cpc	r21, r17
    5f14:	e9 f6       	brne	.-70     	; 0x5ed0 <SendParameter+0x2174>
    5f16:	12 c6       	rjmp	.+3108   	; 0x6b3c <SendParameter+0x2de0>
		ftoa(ch3.Dgain, tx_string);
		printStatus(tx_string);
		break;	
		
		case 408:	// Send TemperatureWindow
		ftoa(ch3.tempErrorWin, tx_string);
    5f18:	60 91 f1 01 	lds	r22, 0x01F1
    5f1c:	70 91 f2 01 	lds	r23, 0x01F2
    5f20:	80 91 f3 01 	lds	r24, 0x01F3
    5f24:	90 91 f4 01 	lds	r25, 0x01F4
    5f28:	ae 01       	movw	r20, r28
    5f2a:	4f 5f       	subi	r20, 0xFF	; 255
    5f2c:	5f 4f       	sbci	r21, 0xFF	; 255
    5f2e:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <ftoa>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    5f32:	81 e2       	ldi	r24, 0x21	; 33
    5f34:	8d 8b       	std	Y+21, r24	; 0x15
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    5f36:	e9 e3       	ldi	r30, 0x39	; 57
    5f38:	f5 e0       	ldi	r31, 0x05	; 5
    5f3a:	81 81       	ldd	r24, Z+1	; 0x01
    5f3c:	8e 8b       	std	Y+22, r24	; 0x16
    5f3e:	82 81       	ldd	r24, Z+2	; 0x02
    5f40:	8f 8b       	std	Y+23, r24	; 0x17
    5f42:	83 81       	ldd	r24, Z+3	; 0x03
    5f44:	88 8f       	std	Y+24, r24	; 0x18
    5f46:	ae 01       	movw	r20, r28
    5f48:	4f 5f       	subi	r20, 0xFF	; 255
    5f4a:	5f 4f       	sbci	r21, 0xFF	; 255
    5f4c:	9e 01       	movw	r18, r28
    5f4e:	27 5e       	subi	r18, 0xE7	; 231
    5f50:	3f 4f       	sbci	r19, 0xFF	; 255
    5f52:	00 e0       	ldi	r16, 0x00	; 0
    5f54:	10 e0       	ldi	r17, 0x00	; 0
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    5f56:	da 01       	movw	r26, r20
    5f58:	08 c0       	rjmp	.+16     	; 0x5f6a <SendParameter+0x220e>
	{
		tx_string[cnt+4] = msg_string[cnt];
    5f5a:	fa 01       	movw	r30, r20
    5f5c:	81 91       	ld	r24, Z+
    5f5e:	af 01       	movw	r20, r30
    5f60:	f9 01       	movw	r30, r18
    5f62:	81 93       	st	Z+, r24
    5f64:	9f 01       	movw	r18, r30
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    5f66:	0f 5f       	subi	r16, 0xFF	; 255
    5f68:	1f 4f       	sbci	r17, 0xFF	; 255
    5f6a:	fd 01       	movw	r30, r26
    5f6c:	01 90       	ld	r0, Z+
    5f6e:	00 20       	and	r0, r0
    5f70:	e9 f7       	brne	.-6      	; 0x5f6c <SendParameter+0x2210>
    5f72:	cf 01       	movw	r24, r30
    5f74:	8a 1b       	sub	r24, r26
    5f76:	9b 0b       	sbc	r25, r27
    5f78:	02 96       	adiw	r24, 0x02	; 2
    5f7a:	08 17       	cp	r16, r24
    5f7c:	19 07       	cpc	r17, r25
    5f7e:	68 f3       	brcs	.-38     	; 0x5f5a <SendParameter+0x21fe>
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    5f80:	78 01       	movw	r14, r16
    5f82:	ff ef       	ldi	r31, 0xFF	; 255
    5f84:	ef 1a       	sub	r14, r31
    5f86:	ff 0a       	sbc	r15, r31
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    5f88:	1e 14       	cp	r1, r14
    5f8a:	1f 04       	cpc	r1, r15
    5f8c:	0c f0       	brlt	.+2      	; 0x5f90 <SendParameter+0x2234>
    5f8e:	b2 c5       	rjmp	.+2916   	; 0x6af4 <SendParameter+0x2d98>
    5f90:	fe 01       	movw	r30, r28
    5f92:	75 96       	adiw	r30, 0x15	; 21
    5f94:	a7 01       	movw	r20, r14
    5f96:	4e 0f       	add	r20, r30
    5f98:	5f 1f       	adc	r21, r31
    5f9a:	80 e0       	ldi	r24, 0x00	; 0
    5f9c:	90 e0       	ldi	r25, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    5f9e:	b8 e0       	ldi	r27, 0x08	; 8
    5fa0:	d1 2c       	mov	r13, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    5fa2:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    5fa4:	29 2f       	mov	r18, r25
    5fa6:	33 27       	eor	r19, r19
    5fa8:	27 fd       	sbrc	r18, 7
    5faa:	3a 95       	dec	r19
    5fac:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
    5fae:	32 2f       	mov	r19, r18
    5fb0:	22 27       	eor	r18, r18
    5fb2:	6b 2f       	mov	r22, r27
    5fb4:	7d 2d       	mov	r23, r13
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    5fb6:	33 23       	and	r19, r19
    5fb8:	3c f4       	brge	.+14     	; 0x5fc8 <SendParameter+0x226c>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    5fba:	22 0f       	add	r18, r18
    5fbc:	33 1f       	adc	r19, r19
    5fbe:	a1 e2       	ldi	r26, 0x21	; 33
    5fc0:	2a 27       	eor	r18, r26
    5fc2:	a0 e1       	ldi	r26, 0x10	; 16
    5fc4:	3a 27       	eor	r19, r26
    5fc6:	02 c0       	rjmp	.+4      	; 0x5fcc <SendParameter+0x2270>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    5fc8:	22 0f       	add	r18, r18
    5fca:	33 1f       	adc	r19, r19
    5fcc:	61 50       	subi	r22, 0x01	; 1
    5fce:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    5fd0:	91 f7       	brne	.-28     	; 0x5fb6 <SendParameter+0x225a>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    5fd2:	98 2f       	mov	r25, r24
    5fd4:	88 27       	eor	r24, r24
    5fd6:	82 27       	eor	r24, r18
    5fd8:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    5fda:	e4 17       	cp	r30, r20
    5fdc:	f5 07       	cpc	r31, r21
    5fde:	09 f7       	brne	.-62     	; 0x5fa2 <SendParameter+0x2246>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    5fe0:	6c 01       	movw	r12, r24
    5fe2:	40 e1       	ldi	r20, 0x10	; 16
    5fe4:	6f e2       	ldi	r22, 0x2F	; 47
    5fe6:	75 e0       	ldi	r23, 0x05	; 5
    5fe8:	0e 94 04 3b 	call	0x7608	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    5fec:	8f e2       	ldi	r24, 0x2F	; 47
    5fee:	95 e0       	ldi	r25, 0x05	; 5
    5ff0:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <strupr>
	if(crcXmodem < 0x10)
    5ff4:	b0 e1       	ldi	r27, 0x10	; 16
    5ff6:	cb 16       	cp	r12, r27
    5ff8:	d1 04       	cpc	r13, r1
    5ffa:	98 f4       	brcc	.+38     	; 0x6022 <SendParameter+0x22c6>
	{
		tx_string[cnt+4] = crc[0];
    5ffc:	80 91 2f 05 	lds	r24, 0x052F
    6000:	fe 01       	movw	r30, r28
    6002:	e0 0f       	add	r30, r16
    6004:	f1 1f       	adc	r31, r17
    6006:	81 8f       	std	Z+25, r24	; 0x19
		tx_string[cnt+3] = '0';
    6008:	80 e3       	ldi	r24, 0x30	; 48
    600a:	fe 01       	movw	r30, r28
    600c:	e0 0f       	add	r30, r16
    600e:	f1 1f       	adc	r31, r17
    6010:	80 8f       	std	Z+24, r24	; 0x18
		tx_string[cnt+2] = '0';
    6012:	fe 01       	movw	r30, r28
    6014:	e0 0f       	add	r30, r16
    6016:	f1 1f       	adc	r31, r17
    6018:	87 8b       	std	Z+23, r24	; 0x17
		tx_string[cnt+1] = '0';
    601a:	fe 01       	movw	r30, r28
    601c:	ee 0d       	add	r30, r14
    601e:	ff 1d       	adc	r31, r15
    6020:	85 8b       	std	Z+21, r24	; 0x15
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    6022:	c6 01       	movw	r24, r12
    6024:	40 97       	sbiw	r24, 0x10	; 16
    6026:	80 3f       	cpi	r24, 0xF0	; 240
    6028:	91 05       	cpc	r25, r1
    602a:	b8 f4       	brcc	.+46     	; 0x605a <SendParameter+0x22fe>
	{
		tx_string[cnt+4] = crc[1];
    602c:	af e2       	ldi	r26, 0x2F	; 47
    602e:	b5 e0       	ldi	r27, 0x05	; 5
    6030:	11 96       	adiw	r26, 0x01	; 1
    6032:	8c 91       	ld	r24, X
    6034:	11 97       	sbiw	r26, 0x01	; 1
    6036:	fe 01       	movw	r30, r28
    6038:	e0 0f       	add	r30, r16
    603a:	f1 1f       	adc	r31, r17
    603c:	81 8f       	std	Z+25, r24	; 0x19
		tx_string[cnt+3] = crc[0];
    603e:	8c 91       	ld	r24, X
    6040:	fe 01       	movw	r30, r28
    6042:	e0 0f       	add	r30, r16
    6044:	f1 1f       	adc	r31, r17
    6046:	80 8f       	std	Z+24, r24	; 0x18
		tx_string[cnt+2] = '0';
    6048:	80 e3       	ldi	r24, 0x30	; 48
    604a:	fe 01       	movw	r30, r28
    604c:	e0 0f       	add	r30, r16
    604e:	f1 1f       	adc	r31, r17
    6050:	87 8b       	std	Z+23, r24	; 0x17
		tx_string[cnt+1] = '0';		
    6052:	fe 01       	movw	r30, r28
    6054:	ee 0d       	add	r30, r14
    6056:	ff 1d       	adc	r31, r15
    6058:	85 8b       	std	Z+21, r24	; 0x15
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    605a:	c6 01       	movw	r24, r12
    605c:	9a 95       	dec	r25
    605e:	81 15       	cp	r24, r1
    6060:	9f 40       	sbci	r25, 0x0F	; 15
    6062:	b8 f4       	brcc	.+46     	; 0x6092 <SendParameter+0x2336>
	{
		tx_string[cnt+4] = crc[2];
    6064:	ef e2       	ldi	r30, 0x2F	; 47
    6066:	f5 e0       	ldi	r31, 0x05	; 5
    6068:	82 81       	ldd	r24, Z+2	; 0x02
    606a:	de 01       	movw	r26, r28
    606c:	a0 0f       	add	r26, r16
    606e:	b1 1f       	adc	r27, r17
    6070:	59 96       	adiw	r26, 0x19	; 25
    6072:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[1];
    6074:	81 81       	ldd	r24, Z+1	; 0x01
    6076:	de 01       	movw	r26, r28
    6078:	a0 0f       	add	r26, r16
    607a:	b1 1f       	adc	r27, r17
    607c:	58 96       	adiw	r26, 0x18	; 24
    607e:	8c 93       	st	X, r24
    6080:	58 97       	sbiw	r26, 0x18	; 24
		tx_string[cnt+2] = crc[0];
    6082:	80 81       	ld	r24, Z
    6084:	fd 01       	movw	r30, r26
    6086:	87 8b       	std	Z+23, r24	; 0x17
		tx_string[cnt+1] = '0';		
    6088:	80 e3       	ldi	r24, 0x30	; 48
    608a:	fe 01       	movw	r30, r28
    608c:	ee 0d       	add	r30, r14
    608e:	ff 1d       	adc	r31, r15
    6090:	85 8b       	std	Z+21, r24	; 0x15
	}
	if(crcXmodem >= 0x1000)
    6092:	c1 14       	cp	r12, r1
    6094:	f0 e1       	ldi	r31, 0x10	; 16
    6096:	df 06       	cpc	r13, r31
    6098:	c0 f0       	brcs	.+48     	; 0x60ca <SendParameter+0x236e>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    609a:	de 01       	movw	r26, r28
    609c:	ae 0d       	add	r26, r14
    609e:	bf 1d       	adc	r27, r15
    60a0:	ef e2       	ldi	r30, 0x2F	; 47
    60a2:	f5 e0       	ldi	r31, 0x05	; 5
    60a4:	80 81       	ld	r24, Z
    60a6:	55 96       	adiw	r26, 0x15	; 21
    60a8:	8c 93       	st	X, r24
		tx_string[cnt+2] = crc[1];
    60aa:	81 81       	ldd	r24, Z+1	; 0x01
    60ac:	de 01       	movw	r26, r28
    60ae:	a0 0f       	add	r26, r16
    60b0:	b1 1f       	adc	r27, r17
    60b2:	57 96       	adiw	r26, 0x17	; 23
    60b4:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[2];
    60b6:	82 81       	ldd	r24, Z+2	; 0x02
    60b8:	de 01       	movw	r26, r28
    60ba:	a0 0f       	add	r26, r16
    60bc:	b1 1f       	adc	r27, r17
    60be:	58 96       	adiw	r26, 0x18	; 24
    60c0:	8c 93       	st	X, r24
    60c2:	58 97       	sbiw	r26, 0x18	; 24
		tx_string[cnt+4] = crc[3];
    60c4:	83 81       	ldd	r24, Z+3	; 0x03
    60c6:	fd 01       	movw	r30, r26
    60c8:	81 8f       	std	Z+25, r24	; 0x19
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    60ca:	c8 01       	movw	r24, r16
    60cc:	05 96       	adiw	r24, 0x05	; 5
    60ce:	fe 01       	movw	r30, r28
    60d0:	e8 0f       	add	r30, r24
    60d2:	f9 1f       	adc	r31, r25
    60d4:	2d e0       	ldi	r18, 0x0D	; 13
    60d6:	25 8b       	std	Z+21, r18	; 0x15
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    60d8:	99 23       	and	r25, r25
    60da:	0c f4       	brge	.+2      	; 0x60de <SendParameter+0x2382>
    60dc:	2f c5       	rjmp	.+2654   	; 0x6b3c <SendParameter+0x2de0>
    60de:	ae 01       	movw	r20, r28
    60e0:	4b 5e       	subi	r20, 0xEB	; 235
    60e2:	5f 4f       	sbci	r21, 0xFF	; 255
    60e4:	0a 5f       	subi	r16, 0xFA	; 250
    60e6:	1f 4f       	sbci	r17, 0xFF	; 255
    60e8:	04 0f       	add	r16, r20
    60ea:	15 1f       	adc	r17, r21
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    60ec:	e7 e5       	ldi	r30, 0x57	; 87
    60ee:	f5 e0       	ldi	r31, 0x05	; 5
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    60f0:	61 ec       	ldi	r22, 0xC1	; 193
    60f2:	70 e0       	ldi	r23, 0x00	; 0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    60f4:	30 e0       	ldi	r19, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    60f6:	da 01       	movw	r26, r20
    60f8:	8d 91       	ld	r24, X+
    60fa:	ad 01       	movw	r20, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    60fc:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    60fe:	21 81       	ldd	r18, Z+1	; 0x01
    6100:	90 81       	ld	r25, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    6102:	29 13       	cpse	r18, r25
    6104:	04 c0       	rjmp	.+8      	; 0x610e <SendParameter+0x23b2>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    6106:	db 01       	movw	r26, r22
    6108:	9c 91       	ld	r25, X
    610a:	90 62       	ori	r25, 0x20	; 32
    610c:	9c 93       	st	X, r25
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    610e:	90 81       	ld	r25, Z
    6110:	a3 81       	ldd	r26, Z+3	; 0x03
    6112:	b4 81       	ldd	r27, Z+4	; 0x04
    6114:	a9 0f       	add	r26, r25
    6116:	b1 1d       	adc	r27, r1
    6118:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    611a:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    611c:	a2 2f       	mov	r26, r18
    611e:	b0 e0       	ldi	r27, 0x00	; 0
    6120:	82 81       	ldd	r24, Z+2	; 0x02
    6122:	90 e0       	ldi	r25, 0x00	; 0
    6124:	01 97       	sbiw	r24, 0x01	; 1
    6126:	a8 17       	cp	r26, r24
    6128:	b9 07       	cpc	r27, r25
    612a:	11 f0       	breq	.+4      	; 0x6130 <SendParameter+0x23d4>
    612c:	2f 5f       	subi	r18, 0xFF	; 255
    612e:	01 c0       	rjmp	.+2      	; 0x6132 <SendParameter+0x23d6>
    6130:	23 2f       	mov	r18, r19
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    6132:	20 83       	st	Z, r18
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    6134:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    6136:	40 17       	cp	r20, r16
    6138:	51 07       	cpc	r21, r17
    613a:	e9 f6       	brne	.-70     	; 0x60f6 <SendParameter+0x239a>
    613c:	ff c4       	rjmp	.+2558   	; 0x6b3c <SendParameter+0x2de0>
		ftoa(ch3.tempErrorWin, tx_string);
		printStatus(tx_string);
		break;
		
		case 409:	// Send SettleTimeTemperature
		itoa(ch3.tempSettleTime, tx_string, 10);
    613e:	80 91 f7 01 	lds	r24, 0x01F7
    6142:	90 91 f8 01 	lds	r25, 0x01F8
    6146:	4a e0       	ldi	r20, 0x0A	; 10
    6148:	be 01       	movw	r22, r28
    614a:	6f 5f       	subi	r22, 0xFF	; 255
    614c:	7f 4f       	sbci	r23, 0xFF	; 255
    614e:	0e 94 04 3b 	call	0x7608	; 0x7608 <__itoa_ncheck>
		printStatus(tx_string);
    6152:	ce 01       	movw	r24, r28
    6154:	01 96       	adiw	r24, 0x01	; 1
    6156:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
		break;
    615a:	f0 c4       	rjmp	.+2528   	; 0x6b3c <SendParameter+0x2de0>
		
		case 410:	// Send Temperature stable status
		switch(ch3.tempStable)
    615c:	80 91 f9 01 	lds	r24, 0x01F9
    6160:	90 91 fa 01 	lds	r25, 0x01FA
    6164:	00 97       	sbiw	r24, 0x00	; 0
    6166:	21 f0       	breq	.+8      	; 0x6170 <SendParameter+0x2414>
    6168:	01 97       	sbiw	r24, 0x01	; 1
    616a:	09 f4       	brne	.+2      	; 0x616e <SendParameter+0x2412>
    616c:	a8 c0       	rjmp	.+336    	; 0x62be <SendParameter+0x2562>
    616e:	e6 c4       	rjmp	.+2508   	; 0x6b3c <SendParameter+0x2de0>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    6170:	81 e2       	ldi	r24, 0x21	; 33
    6172:	8d 8b       	std	Y+21, r24	; 0x15
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    6174:	e9 e3       	ldi	r30, 0x39	; 57
    6176:	f5 e0       	ldi	r31, 0x05	; 5
    6178:	81 81       	ldd	r24, Z+1	; 0x01
    617a:	8e 8b       	std	Y+22, r24	; 0x16
    617c:	82 81       	ldd	r24, Z+2	; 0x02
    617e:	8f 8b       	std	Y+23, r24	; 0x17
    6180:	83 81       	ldd	r24, Z+3	; 0x03
    6182:	88 8f       	std	Y+24, r24	; 0x18
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    6184:	80 e3       	ldi	r24, 0x30	; 48
    6186:	89 8f       	std	Y+25, r24	; 0x19
    6188:	1a 8e       	std	Y+26, r1	; 0x1a
    618a:	1b 8e       	std	Y+27, r1	; 0x1b
    618c:	1c 8e       	std	Y+28, r1	; 0x1c
    618e:	8e 01       	movw	r16, r28
    6190:	0b 5e       	subi	r16, 0xEB	; 235
    6192:	1f 4f       	sbci	r17, 0xFF	; 255
    6194:	be 01       	movw	r22, r28
    6196:	66 5e       	subi	r22, 0xE6	; 230
    6198:	7f 4f       	sbci	r23, 0xFF	; 255
    619a:	f8 01       	movw	r30, r16
    619c:	80 e0       	ldi	r24, 0x00	; 0
    619e:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    61a0:	b8 e0       	ldi	r27, 0x08	; 8
    61a2:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    61a4:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    61a6:	29 2f       	mov	r18, r25
    61a8:	33 27       	eor	r19, r19
    61aa:	27 fd       	sbrc	r18, 7
    61ac:	3a 95       	dec	r19
    61ae:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    61b0:	32 2f       	mov	r19, r18
    61b2:	22 27       	eor	r18, r18
    61b4:	4b 2f       	mov	r20, r27
    61b6:	5f 2d       	mov	r21, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    61b8:	33 23       	and	r19, r19
    61ba:	3c f4       	brge	.+14     	; 0x61ca <SendParameter+0x246e>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    61bc:	22 0f       	add	r18, r18
    61be:	33 1f       	adc	r19, r19
    61c0:	a1 e2       	ldi	r26, 0x21	; 33
    61c2:	2a 27       	eor	r18, r26
    61c4:	a0 e1       	ldi	r26, 0x10	; 16
    61c6:	3a 27       	eor	r19, r26
    61c8:	02 c0       	rjmp	.+4      	; 0x61ce <SendParameter+0x2472>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    61ca:	22 0f       	add	r18, r18
    61cc:	33 1f       	adc	r19, r19
    61ce:	41 50       	subi	r20, 0x01	; 1
    61d0:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    61d2:	91 f7       	brne	.-28     	; 0x61b8 <SendParameter+0x245c>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    61d4:	98 2f       	mov	r25, r24
    61d6:	88 27       	eor	r24, r24
    61d8:	82 27       	eor	r24, r18
    61da:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    61dc:	e6 17       	cp	r30, r22
    61de:	f7 07       	cpc	r31, r23
    61e0:	09 f7       	brne	.-62     	; 0x61a4 <SendParameter+0x2448>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    61e2:	7c 01       	movw	r14, r24
    61e4:	40 e1       	ldi	r20, 0x10	; 16
    61e6:	6f e2       	ldi	r22, 0x2F	; 47
    61e8:	75 e0       	ldi	r23, 0x05	; 5
    61ea:	0e 94 04 3b 	call	0x7608	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    61ee:	8f e2       	ldi	r24, 0x2F	; 47
    61f0:	95 e0       	ldi	r25, 0x05	; 5
    61f2:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <strupr>
	if(crcXmodem < 0x10)
    61f6:	b0 e1       	ldi	r27, 0x10	; 16
    61f8:	eb 16       	cp	r14, r27
    61fa:	f1 04       	cpc	r15, r1
    61fc:	38 f4       	brcc	.+14     	; 0x620c <SendParameter+0x24b0>
	{
		tx_string[cnt+4] = crc[0];
    61fe:	80 91 2f 05 	lds	r24, 0x052F
    6202:	8d 8f       	std	Y+29, r24	; 0x1d
		tx_string[cnt+3] = '0';
    6204:	80 e3       	ldi	r24, 0x30	; 48
    6206:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+2] = '0';
    6208:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+1] = '0';
    620a:	8a 8f       	std	Y+26, r24	; 0x1a
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    620c:	c7 01       	movw	r24, r14
    620e:	40 97       	sbiw	r24, 0x10	; 16
    6210:	80 3f       	cpi	r24, 0xF0	; 240
    6212:	91 05       	cpc	r25, r1
    6214:	48 f4       	brcc	.+18     	; 0x6228 <SendParameter+0x24cc>
	{
		tx_string[cnt+4] = crc[1];
    6216:	ef e2       	ldi	r30, 0x2F	; 47
    6218:	f5 e0       	ldi	r31, 0x05	; 5
    621a:	81 81       	ldd	r24, Z+1	; 0x01
    621c:	8d 8f       	std	Y+29, r24	; 0x1d
		tx_string[cnt+3] = crc[0];
    621e:	80 81       	ld	r24, Z
    6220:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+2] = '0';
    6222:	80 e3       	ldi	r24, 0x30	; 48
    6224:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+1] = '0';		
    6226:	8a 8f       	std	Y+26, r24	; 0x1a
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    6228:	c7 01       	movw	r24, r14
    622a:	9a 95       	dec	r25
    622c:	81 15       	cp	r24, r1
    622e:	9f 40       	sbci	r25, 0x0F	; 15
    6230:	50 f4       	brcc	.+20     	; 0x6246 <SendParameter+0x24ea>
	{
		tx_string[cnt+4] = crc[2];
    6232:	ef e2       	ldi	r30, 0x2F	; 47
    6234:	f5 e0       	ldi	r31, 0x05	; 5
    6236:	82 81       	ldd	r24, Z+2	; 0x02
    6238:	8d 8f       	std	Y+29, r24	; 0x1d
		tx_string[cnt+3] = crc[1];
    623a:	81 81       	ldd	r24, Z+1	; 0x01
    623c:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+2] = crc[0];
    623e:	80 81       	ld	r24, Z
    6240:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+1] = '0';		
    6242:	80 e3       	ldi	r24, 0x30	; 48
    6244:	8a 8f       	std	Y+26, r24	; 0x1a
	}
	if(crcXmodem >= 0x1000)
    6246:	e1 14       	cp	r14, r1
    6248:	f0 e1       	ldi	r31, 0x10	; 16
    624a:	ff 06       	cpc	r15, r31
    624c:	50 f0       	brcs	.+20     	; 0x6262 <SendParameter+0x2506>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    624e:	ef e2       	ldi	r30, 0x2F	; 47
    6250:	f5 e0       	ldi	r31, 0x05	; 5
    6252:	80 81       	ld	r24, Z
    6254:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+2] = crc[1];
    6256:	81 81       	ldd	r24, Z+1	; 0x01
    6258:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+3] = crc[2];
    625a:	82 81       	ldd	r24, Z+2	; 0x02
    625c:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+4] = crc[3];
    625e:	83 81       	ldd	r24, Z+3	; 0x03
    6260:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    6262:	8d e0       	ldi	r24, 0x0D	; 13
    6264:	8e 8f       	std	Y+30, r24	; 0x1e
    6266:	ae 01       	movw	r20, r28
    6268:	41 5e       	subi	r20, 0xE1	; 225
    626a:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    626c:	e7 e5       	ldi	r30, 0x57	; 87
    626e:	f5 e0       	ldi	r31, 0x05	; 5
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    6270:	61 ec       	ldi	r22, 0xC1	; 193
    6272:	70 e0       	ldi	r23, 0x00	; 0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    6274:	30 e0       	ldi	r19, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    6276:	d8 01       	movw	r26, r16
    6278:	8d 91       	ld	r24, X+
    627a:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    627c:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    627e:	21 81       	ldd	r18, Z+1	; 0x01
    6280:	90 81       	ld	r25, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    6282:	29 13       	cpse	r18, r25
    6284:	04 c0       	rjmp	.+8      	; 0x628e <SendParameter+0x2532>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    6286:	db 01       	movw	r26, r22
    6288:	9c 91       	ld	r25, X
    628a:	90 62       	ori	r25, 0x20	; 32
    628c:	9c 93       	st	X, r25
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    628e:	90 81       	ld	r25, Z
    6290:	a3 81       	ldd	r26, Z+3	; 0x03
    6292:	b4 81       	ldd	r27, Z+4	; 0x04
    6294:	a9 0f       	add	r26, r25
    6296:	b1 1d       	adc	r27, r1
    6298:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    629a:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    629c:	a2 2f       	mov	r26, r18
    629e:	b0 e0       	ldi	r27, 0x00	; 0
    62a0:	82 81       	ldd	r24, Z+2	; 0x02
    62a2:	90 e0       	ldi	r25, 0x00	; 0
    62a4:	01 97       	sbiw	r24, 0x01	; 1
    62a6:	a8 17       	cp	r26, r24
    62a8:	b9 07       	cpc	r27, r25
    62aa:	11 f0       	breq	.+4      	; 0x62b0 <SendParameter+0x2554>
    62ac:	2f 5f       	subi	r18, 0xFF	; 255
    62ae:	01 c0       	rjmp	.+2      	; 0x62b2 <SendParameter+0x2556>
    62b0:	23 2f       	mov	r18, r19
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    62b2:	20 83       	st	Z, r18
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    62b4:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    62b6:	04 17       	cp	r16, r20
    62b8:	15 07       	cpc	r17, r21
    62ba:	e9 f6       	brne	.-70     	; 0x6276 <SendParameter+0x251a>
    62bc:	3f c4       	rjmp	.+2174   	; 0x6b3c <SendParameter+0x2de0>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    62be:	81 e2       	ldi	r24, 0x21	; 33
    62c0:	8d 8b       	std	Y+21, r24	; 0x15
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    62c2:	e9 e3       	ldi	r30, 0x39	; 57
    62c4:	f5 e0       	ldi	r31, 0x05	; 5
    62c6:	81 81       	ldd	r24, Z+1	; 0x01
    62c8:	8e 8b       	std	Y+22, r24	; 0x16
    62ca:	82 81       	ldd	r24, Z+2	; 0x02
    62cc:	8f 8b       	std	Y+23, r24	; 0x17
    62ce:	83 81       	ldd	r24, Z+3	; 0x03
    62d0:	88 8f       	std	Y+24, r24	; 0x18
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    62d2:	81 e3       	ldi	r24, 0x31	; 49
    62d4:	89 8f       	std	Y+25, r24	; 0x19
    62d6:	1a 8e       	std	Y+26, r1	; 0x1a
    62d8:	1b 8e       	std	Y+27, r1	; 0x1b
    62da:	1c 8e       	std	Y+28, r1	; 0x1c
    62dc:	8e 01       	movw	r16, r28
    62de:	0b 5e       	subi	r16, 0xEB	; 235
    62e0:	1f 4f       	sbci	r17, 0xFF	; 255
    62e2:	be 01       	movw	r22, r28
    62e4:	66 5e       	subi	r22, 0xE6	; 230
    62e6:	7f 4f       	sbci	r23, 0xFF	; 255
    62e8:	f8 01       	movw	r30, r16
    62ea:	80 e0       	ldi	r24, 0x00	; 0
    62ec:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    62ee:	b8 e0       	ldi	r27, 0x08	; 8
    62f0:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    62f2:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    62f4:	29 2f       	mov	r18, r25
    62f6:	33 27       	eor	r19, r19
    62f8:	27 fd       	sbrc	r18, 7
    62fa:	3a 95       	dec	r19
    62fc:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    62fe:	32 2f       	mov	r19, r18
    6300:	22 27       	eor	r18, r18
    6302:	4b 2f       	mov	r20, r27
    6304:	5f 2d       	mov	r21, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    6306:	33 23       	and	r19, r19
    6308:	3c f4       	brge	.+14     	; 0x6318 <SendParameter+0x25bc>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    630a:	22 0f       	add	r18, r18
    630c:	33 1f       	adc	r19, r19
    630e:	a1 e2       	ldi	r26, 0x21	; 33
    6310:	2a 27       	eor	r18, r26
    6312:	a0 e1       	ldi	r26, 0x10	; 16
    6314:	3a 27       	eor	r19, r26
    6316:	02 c0       	rjmp	.+4      	; 0x631c <SendParameter+0x25c0>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    6318:	22 0f       	add	r18, r18
    631a:	33 1f       	adc	r19, r19
    631c:	41 50       	subi	r20, 0x01	; 1
    631e:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    6320:	91 f7       	brne	.-28     	; 0x6306 <SendParameter+0x25aa>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    6322:	98 2f       	mov	r25, r24
    6324:	88 27       	eor	r24, r24
    6326:	82 27       	eor	r24, r18
    6328:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    632a:	e6 17       	cp	r30, r22
    632c:	f7 07       	cpc	r31, r23
    632e:	09 f7       	brne	.-62     	; 0x62f2 <SendParameter+0x2596>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    6330:	7c 01       	movw	r14, r24
    6332:	40 e1       	ldi	r20, 0x10	; 16
    6334:	6f e2       	ldi	r22, 0x2F	; 47
    6336:	75 e0       	ldi	r23, 0x05	; 5
    6338:	0e 94 04 3b 	call	0x7608	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    633c:	8f e2       	ldi	r24, 0x2F	; 47
    633e:	95 e0       	ldi	r25, 0x05	; 5
    6340:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <strupr>
	if(crcXmodem < 0x10)
    6344:	b0 e1       	ldi	r27, 0x10	; 16
    6346:	eb 16       	cp	r14, r27
    6348:	f1 04       	cpc	r15, r1
    634a:	38 f4       	brcc	.+14     	; 0x635a <SendParameter+0x25fe>
	{
		tx_string[cnt+4] = crc[0];
    634c:	80 91 2f 05 	lds	r24, 0x052F
    6350:	8d 8f       	std	Y+29, r24	; 0x1d
		tx_string[cnt+3] = '0';
    6352:	80 e3       	ldi	r24, 0x30	; 48
    6354:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+2] = '0';
    6356:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+1] = '0';
    6358:	8a 8f       	std	Y+26, r24	; 0x1a
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    635a:	c7 01       	movw	r24, r14
    635c:	40 97       	sbiw	r24, 0x10	; 16
    635e:	80 3f       	cpi	r24, 0xF0	; 240
    6360:	91 05       	cpc	r25, r1
    6362:	48 f4       	brcc	.+18     	; 0x6376 <SendParameter+0x261a>
	{
		tx_string[cnt+4] = crc[1];
    6364:	ef e2       	ldi	r30, 0x2F	; 47
    6366:	f5 e0       	ldi	r31, 0x05	; 5
    6368:	81 81       	ldd	r24, Z+1	; 0x01
    636a:	8d 8f       	std	Y+29, r24	; 0x1d
		tx_string[cnt+3] = crc[0];
    636c:	80 81       	ld	r24, Z
    636e:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+2] = '0';
    6370:	80 e3       	ldi	r24, 0x30	; 48
    6372:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+1] = '0';		
    6374:	8a 8f       	std	Y+26, r24	; 0x1a
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    6376:	c7 01       	movw	r24, r14
    6378:	9a 95       	dec	r25
    637a:	81 15       	cp	r24, r1
    637c:	9f 40       	sbci	r25, 0x0F	; 15
    637e:	50 f4       	brcc	.+20     	; 0x6394 <SendParameter+0x2638>
	{
		tx_string[cnt+4] = crc[2];
    6380:	ef e2       	ldi	r30, 0x2F	; 47
    6382:	f5 e0       	ldi	r31, 0x05	; 5
    6384:	82 81       	ldd	r24, Z+2	; 0x02
    6386:	8d 8f       	std	Y+29, r24	; 0x1d
		tx_string[cnt+3] = crc[1];
    6388:	81 81       	ldd	r24, Z+1	; 0x01
    638a:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+2] = crc[0];
    638c:	80 81       	ld	r24, Z
    638e:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+1] = '0';		
    6390:	80 e3       	ldi	r24, 0x30	; 48
    6392:	8a 8f       	std	Y+26, r24	; 0x1a
	}
	if(crcXmodem >= 0x1000)
    6394:	e1 14       	cp	r14, r1
    6396:	f0 e1       	ldi	r31, 0x10	; 16
    6398:	ff 06       	cpc	r15, r31
    639a:	50 f0       	brcs	.+20     	; 0x63b0 <SendParameter+0x2654>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    639c:	ef e2       	ldi	r30, 0x2F	; 47
    639e:	f5 e0       	ldi	r31, 0x05	; 5
    63a0:	80 81       	ld	r24, Z
    63a2:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+2] = crc[1];
    63a4:	81 81       	ldd	r24, Z+1	; 0x01
    63a6:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+3] = crc[2];
    63a8:	82 81       	ldd	r24, Z+2	; 0x02
    63aa:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+4] = crc[3];
    63ac:	83 81       	ldd	r24, Z+3	; 0x03
    63ae:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    63b0:	8d e0       	ldi	r24, 0x0D	; 13
    63b2:	8e 8f       	std	Y+30, r24	; 0x1e
    63b4:	ae 01       	movw	r20, r28
    63b6:	41 5e       	subi	r20, 0xE1	; 225
    63b8:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    63ba:	e7 e5       	ldi	r30, 0x57	; 87
    63bc:	f5 e0       	ldi	r31, 0x05	; 5
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    63be:	61 ec       	ldi	r22, 0xC1	; 193
    63c0:	70 e0       	ldi	r23, 0x00	; 0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    63c2:	30 e0       	ldi	r19, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    63c4:	d8 01       	movw	r26, r16
    63c6:	8d 91       	ld	r24, X+
    63c8:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    63ca:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    63cc:	21 81       	ldd	r18, Z+1	; 0x01
    63ce:	90 81       	ld	r25, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    63d0:	29 13       	cpse	r18, r25
    63d2:	04 c0       	rjmp	.+8      	; 0x63dc <SendParameter+0x2680>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    63d4:	db 01       	movw	r26, r22
    63d6:	9c 91       	ld	r25, X
    63d8:	90 62       	ori	r25, 0x20	; 32
    63da:	9c 93       	st	X, r25
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    63dc:	90 81       	ld	r25, Z
    63de:	a3 81       	ldd	r26, Z+3	; 0x03
    63e0:	b4 81       	ldd	r27, Z+4	; 0x04
    63e2:	a9 0f       	add	r26, r25
    63e4:	b1 1d       	adc	r27, r1
    63e6:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    63e8:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    63ea:	a2 2f       	mov	r26, r18
    63ec:	b0 e0       	ldi	r27, 0x00	; 0
    63ee:	82 81       	ldd	r24, Z+2	; 0x02
    63f0:	90 e0       	ldi	r25, 0x00	; 0
    63f2:	01 97       	sbiw	r24, 0x01	; 1
    63f4:	a8 17       	cp	r26, r24
    63f6:	b9 07       	cpc	r27, r25
    63f8:	11 f0       	breq	.+4      	; 0x63fe <SendParameter+0x26a2>
    63fa:	2f 5f       	subi	r18, 0xFF	; 255
    63fc:	01 c0       	rjmp	.+2      	; 0x6400 <SendParameter+0x26a4>
    63fe:	23 2f       	mov	r18, r19
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    6400:	20 83       	st	Z, r18
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    6402:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    6404:	04 17       	cp	r16, r20
    6406:	15 07       	cpc	r17, r21
    6408:	e9 f6       	brne	.-70     	; 0x63c4 <SendParameter+0x2668>
    640a:	98 c3       	rjmp	.+1840   	; 0x6b3c <SendParameter+0x2de0>
			break;
		}
		break;
		
		case 600:	// Send home switch status
		switch(homeSwitch)
    640c:	80 91 92 01 	lds	r24, 0x0192
    6410:	90 91 93 01 	lds	r25, 0x0193
    6414:	00 97       	sbiw	r24, 0x00	; 0
    6416:	21 f0       	breq	.+8      	; 0x6420 <SendParameter+0x26c4>
    6418:	01 97       	sbiw	r24, 0x01	; 1
    641a:	09 f4       	brne	.+2      	; 0x641e <SendParameter+0x26c2>
    641c:	a8 c0       	rjmp	.+336    	; 0x656e <SendParameter+0x2812>
    641e:	8e c3       	rjmp	.+1820   	; 0x6b3c <SendParameter+0x2de0>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    6420:	81 e2       	ldi	r24, 0x21	; 33
    6422:	8d 8b       	std	Y+21, r24	; 0x15
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    6424:	e9 e3       	ldi	r30, 0x39	; 57
    6426:	f5 e0       	ldi	r31, 0x05	; 5
    6428:	81 81       	ldd	r24, Z+1	; 0x01
    642a:	8e 8b       	std	Y+22, r24	; 0x16
    642c:	82 81       	ldd	r24, Z+2	; 0x02
    642e:	8f 8b       	std	Y+23, r24	; 0x17
    6430:	83 81       	ldd	r24, Z+3	; 0x03
    6432:	88 8f       	std	Y+24, r24	; 0x18
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    6434:	80 e3       	ldi	r24, 0x30	; 48
    6436:	89 8f       	std	Y+25, r24	; 0x19
    6438:	1a 8e       	std	Y+26, r1	; 0x1a
    643a:	1b 8e       	std	Y+27, r1	; 0x1b
    643c:	1c 8e       	std	Y+28, r1	; 0x1c
    643e:	8e 01       	movw	r16, r28
    6440:	0b 5e       	subi	r16, 0xEB	; 235
    6442:	1f 4f       	sbci	r17, 0xFF	; 255
    6444:	be 01       	movw	r22, r28
    6446:	66 5e       	subi	r22, 0xE6	; 230
    6448:	7f 4f       	sbci	r23, 0xFF	; 255
    644a:	f8 01       	movw	r30, r16
    644c:	80 e0       	ldi	r24, 0x00	; 0
    644e:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    6450:	b8 e0       	ldi	r27, 0x08	; 8
    6452:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    6454:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    6456:	29 2f       	mov	r18, r25
    6458:	33 27       	eor	r19, r19
    645a:	27 fd       	sbrc	r18, 7
    645c:	3a 95       	dec	r19
    645e:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    6460:	32 2f       	mov	r19, r18
    6462:	22 27       	eor	r18, r18
    6464:	4b 2f       	mov	r20, r27
    6466:	5f 2d       	mov	r21, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    6468:	33 23       	and	r19, r19
    646a:	3c f4       	brge	.+14     	; 0x647a <SendParameter+0x271e>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    646c:	22 0f       	add	r18, r18
    646e:	33 1f       	adc	r19, r19
    6470:	a1 e2       	ldi	r26, 0x21	; 33
    6472:	2a 27       	eor	r18, r26
    6474:	a0 e1       	ldi	r26, 0x10	; 16
    6476:	3a 27       	eor	r19, r26
    6478:	02 c0       	rjmp	.+4      	; 0x647e <SendParameter+0x2722>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    647a:	22 0f       	add	r18, r18
    647c:	33 1f       	adc	r19, r19
    647e:	41 50       	subi	r20, 0x01	; 1
    6480:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    6482:	91 f7       	brne	.-28     	; 0x6468 <SendParameter+0x270c>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    6484:	98 2f       	mov	r25, r24
    6486:	88 27       	eor	r24, r24
    6488:	82 27       	eor	r24, r18
    648a:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    648c:	e6 17       	cp	r30, r22
    648e:	f7 07       	cpc	r31, r23
    6490:	09 f7       	brne	.-62     	; 0x6454 <SendParameter+0x26f8>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    6492:	7c 01       	movw	r14, r24
    6494:	40 e1       	ldi	r20, 0x10	; 16
    6496:	6f e2       	ldi	r22, 0x2F	; 47
    6498:	75 e0       	ldi	r23, 0x05	; 5
    649a:	0e 94 04 3b 	call	0x7608	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    649e:	8f e2       	ldi	r24, 0x2F	; 47
    64a0:	95 e0       	ldi	r25, 0x05	; 5
    64a2:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <strupr>
	if(crcXmodem < 0x10)
    64a6:	b0 e1       	ldi	r27, 0x10	; 16
    64a8:	eb 16       	cp	r14, r27
    64aa:	f1 04       	cpc	r15, r1
    64ac:	38 f4       	brcc	.+14     	; 0x64bc <SendParameter+0x2760>
	{
		tx_string[cnt+4] = crc[0];
    64ae:	80 91 2f 05 	lds	r24, 0x052F
    64b2:	8d 8f       	std	Y+29, r24	; 0x1d
		tx_string[cnt+3] = '0';
    64b4:	80 e3       	ldi	r24, 0x30	; 48
    64b6:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+2] = '0';
    64b8:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+1] = '0';
    64ba:	8a 8f       	std	Y+26, r24	; 0x1a
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    64bc:	c7 01       	movw	r24, r14
    64be:	40 97       	sbiw	r24, 0x10	; 16
    64c0:	80 3f       	cpi	r24, 0xF0	; 240
    64c2:	91 05       	cpc	r25, r1
    64c4:	48 f4       	brcc	.+18     	; 0x64d8 <SendParameter+0x277c>
	{
		tx_string[cnt+4] = crc[1];
    64c6:	ef e2       	ldi	r30, 0x2F	; 47
    64c8:	f5 e0       	ldi	r31, 0x05	; 5
    64ca:	81 81       	ldd	r24, Z+1	; 0x01
    64cc:	8d 8f       	std	Y+29, r24	; 0x1d
		tx_string[cnt+3] = crc[0];
    64ce:	80 81       	ld	r24, Z
    64d0:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+2] = '0';
    64d2:	80 e3       	ldi	r24, 0x30	; 48
    64d4:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+1] = '0';		
    64d6:	8a 8f       	std	Y+26, r24	; 0x1a
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    64d8:	c7 01       	movw	r24, r14
    64da:	9a 95       	dec	r25
    64dc:	81 15       	cp	r24, r1
    64de:	9f 40       	sbci	r25, 0x0F	; 15
    64e0:	50 f4       	brcc	.+20     	; 0x64f6 <SendParameter+0x279a>
	{
		tx_string[cnt+4] = crc[2];
    64e2:	ef e2       	ldi	r30, 0x2F	; 47
    64e4:	f5 e0       	ldi	r31, 0x05	; 5
    64e6:	82 81       	ldd	r24, Z+2	; 0x02
    64e8:	8d 8f       	std	Y+29, r24	; 0x1d
		tx_string[cnt+3] = crc[1];
    64ea:	81 81       	ldd	r24, Z+1	; 0x01
    64ec:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+2] = crc[0];
    64ee:	80 81       	ld	r24, Z
    64f0:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+1] = '0';		
    64f2:	80 e3       	ldi	r24, 0x30	; 48
    64f4:	8a 8f       	std	Y+26, r24	; 0x1a
	}
	if(crcXmodem >= 0x1000)
    64f6:	e1 14       	cp	r14, r1
    64f8:	f0 e1       	ldi	r31, 0x10	; 16
    64fa:	ff 06       	cpc	r15, r31
    64fc:	50 f0       	brcs	.+20     	; 0x6512 <SendParameter+0x27b6>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    64fe:	ef e2       	ldi	r30, 0x2F	; 47
    6500:	f5 e0       	ldi	r31, 0x05	; 5
    6502:	80 81       	ld	r24, Z
    6504:	8a 8f       	std	Y+26, r24	; 0x1a
		tx_string[cnt+2] = crc[1];
    6506:	81 81       	ldd	r24, Z+1	; 0x01
    6508:	8b 8f       	std	Y+27, r24	; 0x1b
		tx_string[cnt+3] = crc[2];
    650a:	82 81       	ldd	r24, Z+2	; 0x02
    650c:	8c 8f       	std	Y+28, r24	; 0x1c
		tx_string[cnt+4] = crc[3];
    650e:	83 81       	ldd	r24, Z+3	; 0x03
    6510:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    6512:	8d e0       	ldi	r24, 0x0D	; 13
    6514:	8e 8f       	std	Y+30, r24	; 0x1e
    6516:	ae 01       	movw	r20, r28
    6518:	41 5e       	subi	r20, 0xE1	; 225
    651a:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    651c:	e7 e5       	ldi	r30, 0x57	; 87
    651e:	f5 e0       	ldi	r31, 0x05	; 5
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    6520:	61 ec       	ldi	r22, 0xC1	; 193
    6522:	70 e0       	ldi	r23, 0x00	; 0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    6524:	30 e0       	ldi	r19, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    6526:	d8 01       	movw	r26, r16
    6528:	8d 91       	ld	r24, X+
    652a:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    652c:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    652e:	21 81       	ldd	r18, Z+1	; 0x01
    6530:	90 81       	ld	r25, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    6532:	29 13       	cpse	r18, r25
    6534:	04 c0       	rjmp	.+8      	; 0x653e <SendParameter+0x27e2>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    6536:	db 01       	movw	r26, r22
    6538:	9c 91       	ld	r25, X
    653a:	90 62       	ori	r25, 0x20	; 32
    653c:	9c 93       	st	X, r25
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    653e:	90 81       	ld	r25, Z
    6540:	a3 81       	ldd	r26, Z+3	; 0x03
    6542:	b4 81       	ldd	r27, Z+4	; 0x04
    6544:	a9 0f       	add	r26, r25
    6546:	b1 1d       	adc	r27, r1
    6548:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    654a:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    654c:	a2 2f       	mov	r26, r18
    654e:	b0 e0       	ldi	r27, 0x00	; 0
    6550:	82 81       	ldd	r24, Z+2	; 0x02
    6552:	90 e0       	ldi	r25, 0x00	; 0
    6554:	01 97       	sbiw	r24, 0x01	; 1
    6556:	a8 17       	cp	r26, r24
    6558:	b9 07       	cpc	r27, r25
    655a:	11 f0       	breq	.+4      	; 0x6560 <SendParameter+0x2804>
    655c:	2f 5f       	subi	r18, 0xFF	; 255
    655e:	01 c0       	rjmp	.+2      	; 0x6562 <SendParameter+0x2806>
    6560:	23 2f       	mov	r18, r19
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    6562:	20 83       	st	Z, r18
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    6564:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    6566:	04 17       	cp	r16, r20
    6568:	15 07       	cpc	r17, r21
    656a:	e9 f6       	brne	.-70     	; 0x6526 <SendParameter+0x27ca>
    656c:	e7 c2       	rjmp	.+1486   	; 0x6b3c <SendParameter+0x2de0>
			case 0:
			printStatus("0");
			break;
			
			case 1:
			printStatus("1");
    656e:	8d e2       	ldi	r24, 0x2D	; 45
    6570:	91 e0       	ldi	r25, 0x01	; 1
    6572:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
			break;
    6576:	e2 c2       	rjmp	.+1476   	; 0x6b3c <SendParameter+0x2de0>
		}
		break;
		
		case 601:	// Send motor position		
		ltoa(motorPos, tx_string, 10);
    6578:	60 91 99 01 	lds	r22, 0x0199
    657c:	70 91 9a 01 	lds	r23, 0x019A
    6580:	80 91 9b 01 	lds	r24, 0x019B
    6584:	90 91 9c 01 	lds	r25, 0x019C
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
    6588:	2a e0       	ldi	r18, 0x0A	; 10
    658a:	ae 01       	movw	r20, r28
    658c:	4f 5f       	subi	r20, 0xFF	; 255
    658e:	5f 4f       	sbci	r21, 0xFF	; 255
    6590:	0e 94 0e 3b 	call	0x761c	; 0x761c <__ltoa_ncheck>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    6594:	81 e2       	ldi	r24, 0x21	; 33
    6596:	8d 8b       	std	Y+21, r24	; 0x15
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    6598:	e9 e3       	ldi	r30, 0x39	; 57
    659a:	f5 e0       	ldi	r31, 0x05	; 5
    659c:	81 81       	ldd	r24, Z+1	; 0x01
    659e:	8e 8b       	std	Y+22, r24	; 0x16
    65a0:	82 81       	ldd	r24, Z+2	; 0x02
    65a2:	8f 8b       	std	Y+23, r24	; 0x17
    65a4:	83 81       	ldd	r24, Z+3	; 0x03
    65a6:	88 8f       	std	Y+24, r24	; 0x18
    65a8:	ae 01       	movw	r20, r28
    65aa:	4f 5f       	subi	r20, 0xFF	; 255
    65ac:	5f 4f       	sbci	r21, 0xFF	; 255
    65ae:	9e 01       	movw	r18, r28
    65b0:	27 5e       	subi	r18, 0xE7	; 231
    65b2:	3f 4f       	sbci	r19, 0xFF	; 255
    65b4:	00 e0       	ldi	r16, 0x00	; 0
    65b6:	10 e0       	ldi	r17, 0x00	; 0
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    65b8:	da 01       	movw	r26, r20
    65ba:	08 c0       	rjmp	.+16     	; 0x65cc <SendParameter+0x2870>
	{
		tx_string[cnt+4] = msg_string[cnt];
    65bc:	fa 01       	movw	r30, r20
    65be:	81 91       	ld	r24, Z+
    65c0:	af 01       	movw	r20, r30
    65c2:	f9 01       	movw	r30, r18
    65c4:	81 93       	st	Z+, r24
    65c6:	9f 01       	movw	r18, r30
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    65c8:	0f 5f       	subi	r16, 0xFF	; 255
    65ca:	1f 4f       	sbci	r17, 0xFF	; 255
    65cc:	fd 01       	movw	r30, r26
    65ce:	01 90       	ld	r0, Z+
    65d0:	00 20       	and	r0, r0
    65d2:	e9 f7       	brne	.-6      	; 0x65ce <SendParameter+0x2872>
    65d4:	cf 01       	movw	r24, r30
    65d6:	8a 1b       	sub	r24, r26
    65d8:	9b 0b       	sbc	r25, r27
    65da:	02 96       	adiw	r24, 0x02	; 2
    65dc:	08 17       	cp	r16, r24
    65de:	19 07       	cpc	r17, r25
    65e0:	68 f3       	brcs	.-38     	; 0x65bc <SendParameter+0x2860>
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    65e2:	78 01       	movw	r14, r16
    65e4:	ff ef       	ldi	r31, 0xFF	; 255
    65e6:	ef 1a       	sub	r14, r31
    65e8:	ff 0a       	sbc	r15, r31
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    65ea:	1e 14       	cp	r1, r14
    65ec:	1f 04       	cpc	r1, r15
    65ee:	0c f0       	brlt	.+2      	; 0x65f2 <SendParameter+0x2896>
    65f0:	8d c2       	rjmp	.+1306   	; 0x6b0c <SendParameter+0x2db0>
    65f2:	fe 01       	movw	r30, r28
    65f4:	75 96       	adiw	r30, 0x15	; 21
    65f6:	a7 01       	movw	r20, r14
    65f8:	4e 0f       	add	r20, r30
    65fa:	5f 1f       	adc	r21, r31
    65fc:	80 e0       	ldi	r24, 0x00	; 0
    65fe:	90 e0       	ldi	r25, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    6600:	b8 e0       	ldi	r27, 0x08	; 8
    6602:	d1 2c       	mov	r13, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    6604:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    6606:	29 2f       	mov	r18, r25
    6608:	33 27       	eor	r19, r19
    660a:	27 fd       	sbrc	r18, 7
    660c:	3a 95       	dec	r19
    660e:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
    6610:	32 2f       	mov	r19, r18
    6612:	22 27       	eor	r18, r18
    6614:	6b 2f       	mov	r22, r27
    6616:	7d 2d       	mov	r23, r13
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    6618:	33 23       	and	r19, r19
    661a:	3c f4       	brge	.+14     	; 0x662a <SendParameter+0x28ce>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    661c:	22 0f       	add	r18, r18
    661e:	33 1f       	adc	r19, r19
    6620:	a1 e2       	ldi	r26, 0x21	; 33
    6622:	2a 27       	eor	r18, r26
    6624:	a0 e1       	ldi	r26, 0x10	; 16
    6626:	3a 27       	eor	r19, r26
    6628:	02 c0       	rjmp	.+4      	; 0x662e <SendParameter+0x28d2>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    662a:	22 0f       	add	r18, r18
    662c:	33 1f       	adc	r19, r19
    662e:	61 50       	subi	r22, 0x01	; 1
    6630:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    6632:	91 f7       	brne	.-28     	; 0x6618 <SendParameter+0x28bc>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    6634:	98 2f       	mov	r25, r24
    6636:	88 27       	eor	r24, r24
    6638:	82 27       	eor	r24, r18
    663a:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    663c:	e4 17       	cp	r30, r20
    663e:	f5 07       	cpc	r31, r21
    6640:	09 f7       	brne	.-62     	; 0x6604 <SendParameter+0x28a8>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    6642:	6c 01       	movw	r12, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    6644:	40 e1       	ldi	r20, 0x10	; 16
    6646:	6f e2       	ldi	r22, 0x2F	; 47
    6648:	75 e0       	ldi	r23, 0x05	; 5
    664a:	de d7       	rcall	.+4028   	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    664c:	8f e2       	ldi	r24, 0x2F	; 47
    664e:	95 e0       	ldi	r25, 0x05	; 5
    6650:	d1 d7       	rcall	.+4002   	; 0x75f4 <strupr>
	if(crcXmodem < 0x10)
    6652:	b0 e1       	ldi	r27, 0x10	; 16
    6654:	cb 16       	cp	r12, r27
    6656:	d1 04       	cpc	r13, r1
    6658:	98 f4       	brcc	.+38     	; 0x6680 <SendParameter+0x2924>
	{
		tx_string[cnt+4] = crc[0];
    665a:	80 91 2f 05 	lds	r24, 0x052F
    665e:	fe 01       	movw	r30, r28
    6660:	e0 0f       	add	r30, r16
    6662:	f1 1f       	adc	r31, r17
    6664:	81 8f       	std	Z+25, r24	; 0x19
		tx_string[cnt+3] = '0';
    6666:	80 e3       	ldi	r24, 0x30	; 48
    6668:	fe 01       	movw	r30, r28
    666a:	e0 0f       	add	r30, r16
    666c:	f1 1f       	adc	r31, r17
    666e:	80 8f       	std	Z+24, r24	; 0x18
		tx_string[cnt+2] = '0';
    6670:	fe 01       	movw	r30, r28
    6672:	e0 0f       	add	r30, r16
    6674:	f1 1f       	adc	r31, r17
    6676:	87 8b       	std	Z+23, r24	; 0x17
		tx_string[cnt+1] = '0';
    6678:	fe 01       	movw	r30, r28
    667a:	ee 0d       	add	r30, r14
    667c:	ff 1d       	adc	r31, r15
    667e:	85 8b       	std	Z+21, r24	; 0x15
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    6680:	c6 01       	movw	r24, r12
    6682:	40 97       	sbiw	r24, 0x10	; 16
    6684:	80 3f       	cpi	r24, 0xF0	; 240
    6686:	91 05       	cpc	r25, r1
    6688:	b8 f4       	brcc	.+46     	; 0x66b8 <SendParameter+0x295c>
	{
		tx_string[cnt+4] = crc[1];
    668a:	af e2       	ldi	r26, 0x2F	; 47
    668c:	b5 e0       	ldi	r27, 0x05	; 5
    668e:	11 96       	adiw	r26, 0x01	; 1
    6690:	8c 91       	ld	r24, X
    6692:	11 97       	sbiw	r26, 0x01	; 1
    6694:	fe 01       	movw	r30, r28
    6696:	e0 0f       	add	r30, r16
    6698:	f1 1f       	adc	r31, r17
    669a:	81 8f       	std	Z+25, r24	; 0x19
		tx_string[cnt+3] = crc[0];
    669c:	8c 91       	ld	r24, X
    669e:	fe 01       	movw	r30, r28
    66a0:	e0 0f       	add	r30, r16
    66a2:	f1 1f       	adc	r31, r17
    66a4:	80 8f       	std	Z+24, r24	; 0x18
		tx_string[cnt+2] = '0';
    66a6:	80 e3       	ldi	r24, 0x30	; 48
    66a8:	fe 01       	movw	r30, r28
    66aa:	e0 0f       	add	r30, r16
    66ac:	f1 1f       	adc	r31, r17
    66ae:	87 8b       	std	Z+23, r24	; 0x17
		tx_string[cnt+1] = '0';		
    66b0:	fe 01       	movw	r30, r28
    66b2:	ee 0d       	add	r30, r14
    66b4:	ff 1d       	adc	r31, r15
    66b6:	85 8b       	std	Z+21, r24	; 0x15
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    66b8:	c6 01       	movw	r24, r12
    66ba:	9a 95       	dec	r25
    66bc:	81 15       	cp	r24, r1
    66be:	9f 40       	sbci	r25, 0x0F	; 15
    66c0:	b8 f4       	brcc	.+46     	; 0x66f0 <SendParameter+0x2994>
	{
		tx_string[cnt+4] = crc[2];
    66c2:	ef e2       	ldi	r30, 0x2F	; 47
    66c4:	f5 e0       	ldi	r31, 0x05	; 5
    66c6:	82 81       	ldd	r24, Z+2	; 0x02
    66c8:	de 01       	movw	r26, r28
    66ca:	a0 0f       	add	r26, r16
    66cc:	b1 1f       	adc	r27, r17
    66ce:	59 96       	adiw	r26, 0x19	; 25
    66d0:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[1];
    66d2:	81 81       	ldd	r24, Z+1	; 0x01
    66d4:	de 01       	movw	r26, r28
    66d6:	a0 0f       	add	r26, r16
    66d8:	b1 1f       	adc	r27, r17
    66da:	58 96       	adiw	r26, 0x18	; 24
    66dc:	8c 93       	st	X, r24
    66de:	58 97       	sbiw	r26, 0x18	; 24
		tx_string[cnt+2] = crc[0];
    66e0:	80 81       	ld	r24, Z
    66e2:	fd 01       	movw	r30, r26
    66e4:	87 8b       	std	Z+23, r24	; 0x17
		tx_string[cnt+1] = '0';		
    66e6:	80 e3       	ldi	r24, 0x30	; 48
    66e8:	fe 01       	movw	r30, r28
    66ea:	ee 0d       	add	r30, r14
    66ec:	ff 1d       	adc	r31, r15
    66ee:	85 8b       	std	Z+21, r24	; 0x15
	}
	if(crcXmodem >= 0x1000)
    66f0:	c1 14       	cp	r12, r1
    66f2:	f0 e1       	ldi	r31, 0x10	; 16
    66f4:	df 06       	cpc	r13, r31
    66f6:	c0 f0       	brcs	.+48     	; 0x6728 <SendParameter+0x29cc>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    66f8:	de 01       	movw	r26, r28
    66fa:	ae 0d       	add	r26, r14
    66fc:	bf 1d       	adc	r27, r15
    66fe:	ef e2       	ldi	r30, 0x2F	; 47
    6700:	f5 e0       	ldi	r31, 0x05	; 5
    6702:	80 81       	ld	r24, Z
    6704:	55 96       	adiw	r26, 0x15	; 21
    6706:	8c 93       	st	X, r24
		tx_string[cnt+2] = crc[1];
    6708:	81 81       	ldd	r24, Z+1	; 0x01
    670a:	de 01       	movw	r26, r28
    670c:	a0 0f       	add	r26, r16
    670e:	b1 1f       	adc	r27, r17
    6710:	57 96       	adiw	r26, 0x17	; 23
    6712:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[2];
    6714:	82 81       	ldd	r24, Z+2	; 0x02
    6716:	de 01       	movw	r26, r28
    6718:	a0 0f       	add	r26, r16
    671a:	b1 1f       	adc	r27, r17
    671c:	58 96       	adiw	r26, 0x18	; 24
    671e:	8c 93       	st	X, r24
    6720:	58 97       	sbiw	r26, 0x18	; 24
		tx_string[cnt+4] = crc[3];
    6722:	83 81       	ldd	r24, Z+3	; 0x03
    6724:	fd 01       	movw	r30, r26
    6726:	81 8f       	std	Z+25, r24	; 0x19
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    6728:	c8 01       	movw	r24, r16
    672a:	05 96       	adiw	r24, 0x05	; 5
    672c:	fe 01       	movw	r30, r28
    672e:	e8 0f       	add	r30, r24
    6730:	f9 1f       	adc	r31, r25
    6732:	2d e0       	ldi	r18, 0x0D	; 13
    6734:	25 8b       	std	Z+21, r18	; 0x15
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    6736:	99 23       	and	r25, r25
    6738:	0c f4       	brge	.+2      	; 0x673c <SendParameter+0x29e0>
    673a:	00 c2       	rjmp	.+1024   	; 0x6b3c <SendParameter+0x2de0>
    673c:	ae 01       	movw	r20, r28
    673e:	4b 5e       	subi	r20, 0xEB	; 235
    6740:	5f 4f       	sbci	r21, 0xFF	; 255
    6742:	0a 5f       	subi	r16, 0xFA	; 250
    6744:	1f 4f       	sbci	r17, 0xFF	; 255
    6746:	04 0f       	add	r16, r20
    6748:	15 1f       	adc	r17, r21
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    674a:	e7 e5       	ldi	r30, 0x57	; 87
    674c:	f5 e0       	ldi	r31, 0x05	; 5
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    674e:	61 ec       	ldi	r22, 0xC1	; 193
    6750:	70 e0       	ldi	r23, 0x00	; 0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    6752:	30 e0       	ldi	r19, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    6754:	da 01       	movw	r26, r20
    6756:	8d 91       	ld	r24, X+
    6758:	ad 01       	movw	r20, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    675a:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    675c:	21 81       	ldd	r18, Z+1	; 0x01
    675e:	90 81       	ld	r25, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    6760:	29 13       	cpse	r18, r25
    6762:	04 c0       	rjmp	.+8      	; 0x676c <SendParameter+0x2a10>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    6764:	db 01       	movw	r26, r22
    6766:	9c 91       	ld	r25, X
    6768:	90 62       	ori	r25, 0x20	; 32
    676a:	9c 93       	st	X, r25
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    676c:	90 81       	ld	r25, Z
    676e:	a3 81       	ldd	r26, Z+3	; 0x03
    6770:	b4 81       	ldd	r27, Z+4	; 0x04
    6772:	a9 0f       	add	r26, r25
    6774:	b1 1d       	adc	r27, r1
    6776:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    6778:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    677a:	a2 2f       	mov	r26, r18
    677c:	b0 e0       	ldi	r27, 0x00	; 0
    677e:	82 81       	ldd	r24, Z+2	; 0x02
    6780:	90 e0       	ldi	r25, 0x00	; 0
    6782:	01 97       	sbiw	r24, 0x01	; 1
    6784:	a8 17       	cp	r26, r24
    6786:	b9 07       	cpc	r27, r25
    6788:	11 f0       	breq	.+4      	; 0x678e <SendParameter+0x2a32>
    678a:	2f 5f       	subi	r18, 0xFF	; 255
    678c:	01 c0       	rjmp	.+2      	; 0x6790 <SendParameter+0x2a34>
    678e:	23 2f       	mov	r18, r19
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    6790:	20 83       	st	Z, r18
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    6792:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    6794:	40 17       	cp	r20, r16
    6796:	51 07       	cpc	r21, r17
    6798:	e9 f6       	brne	.-70     	; 0x6754 <SendParameter+0x29f8>
    679a:	d0 c1       	rjmp	.+928    	; 0x6b3c <SendParameter+0x2de0>
		ltoa(motorPos, tx_string, 10);
		printStatus(tx_string);
		break;
		
		case 602:	// Send current motor speed
		itoa(motorSpeed, tx_string, 10);
    679c:	80 91 00 01 	lds	r24, 0x0100
    67a0:	90 91 01 01 	lds	r25, 0x0101
    67a4:	4a e0       	ldi	r20, 0x0A	; 10
    67a6:	be 01       	movw	r22, r28
    67a8:	6f 5f       	subi	r22, 0xFF	; 255
    67aa:	7f 4f       	sbci	r23, 0xFF	; 255
    67ac:	2d d7       	rcall	.+3674   	; 0x7608 <__itoa_ncheck>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    67ae:	81 e2       	ldi	r24, 0x21	; 33
    67b0:	8d 8b       	std	Y+21, r24	; 0x15
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    67b2:	e9 e3       	ldi	r30, 0x39	; 57
    67b4:	f5 e0       	ldi	r31, 0x05	; 5
    67b6:	81 81       	ldd	r24, Z+1	; 0x01
    67b8:	8e 8b       	std	Y+22, r24	; 0x16
    67ba:	82 81       	ldd	r24, Z+2	; 0x02
    67bc:	8f 8b       	std	Y+23, r24	; 0x17
    67be:	83 81       	ldd	r24, Z+3	; 0x03
    67c0:	88 8f       	std	Y+24, r24	; 0x18
    67c2:	ae 01       	movw	r20, r28
    67c4:	4f 5f       	subi	r20, 0xFF	; 255
    67c6:	5f 4f       	sbci	r21, 0xFF	; 255
    67c8:	9e 01       	movw	r18, r28
    67ca:	27 5e       	subi	r18, 0xE7	; 231
    67cc:	3f 4f       	sbci	r19, 0xFF	; 255
    67ce:	00 e0       	ldi	r16, 0x00	; 0
    67d0:	10 e0       	ldi	r17, 0x00	; 0
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    67d2:	da 01       	movw	r26, r20
    67d4:	08 c0       	rjmp	.+16     	; 0x67e6 <SendParameter+0x2a8a>
	{
		tx_string[cnt+4] = msg_string[cnt];
    67d6:	fa 01       	movw	r30, r20
    67d8:	81 91       	ld	r24, Z+
    67da:	af 01       	movw	r20, r30
    67dc:	f9 01       	movw	r30, r18
    67de:	81 93       	st	Z+, r24
    67e0:	9f 01       	movw	r18, r30
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    67e2:	0f 5f       	subi	r16, 0xFF	; 255
    67e4:	1f 4f       	sbci	r17, 0xFF	; 255
    67e6:	fd 01       	movw	r30, r26
    67e8:	01 90       	ld	r0, Z+
    67ea:	00 20       	and	r0, r0
    67ec:	e9 f7       	brne	.-6      	; 0x67e8 <SendParameter+0x2a8c>
    67ee:	cf 01       	movw	r24, r30
    67f0:	8a 1b       	sub	r24, r26
    67f2:	9b 0b       	sbc	r25, r27
    67f4:	02 96       	adiw	r24, 0x02	; 2
    67f6:	08 17       	cp	r16, r24
    67f8:	19 07       	cpc	r17, r25
    67fa:	68 f3       	brcs	.-38     	; 0x67d6 <SendParameter+0x2a7a>
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    67fc:	78 01       	movw	r14, r16
    67fe:	ff ef       	ldi	r31, 0xFF	; 255
    6800:	ef 1a       	sub	r14, r31
    6802:	ff 0a       	sbc	r15, r31
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    6804:	1e 14       	cp	r1, r14
    6806:	1f 04       	cpc	r1, r15
    6808:	0c f0       	brlt	.+2      	; 0x680c <SendParameter+0x2ab0>
    680a:	8c c1       	rjmp	.+792    	; 0x6b24 <SendParameter+0x2dc8>
    680c:	fe 01       	movw	r30, r28
    680e:	75 96       	adiw	r30, 0x15	; 21
    6810:	a7 01       	movw	r20, r14
    6812:	4e 0f       	add	r20, r30
    6814:	5f 1f       	adc	r21, r31
    6816:	80 e0       	ldi	r24, 0x00	; 0
    6818:	90 e0       	ldi	r25, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    681a:	b8 e0       	ldi	r27, 0x08	; 8
    681c:	d1 2c       	mov	r13, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    681e:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    6820:	29 2f       	mov	r18, r25
    6822:	33 27       	eor	r19, r19
    6824:	27 fd       	sbrc	r18, 7
    6826:	3a 95       	dec	r19
    6828:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
    682a:	32 2f       	mov	r19, r18
    682c:	22 27       	eor	r18, r18
    682e:	6b 2f       	mov	r22, r27
    6830:	7d 2d       	mov	r23, r13
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    6832:	33 23       	and	r19, r19
    6834:	3c f4       	brge	.+14     	; 0x6844 <SendParameter+0x2ae8>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    6836:	22 0f       	add	r18, r18
    6838:	33 1f       	adc	r19, r19
    683a:	a1 e2       	ldi	r26, 0x21	; 33
    683c:	2a 27       	eor	r18, r26
    683e:	a0 e1       	ldi	r26, 0x10	; 16
    6840:	3a 27       	eor	r19, r26
    6842:	02 c0       	rjmp	.+4      	; 0x6848 <SendParameter+0x2aec>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    6844:	22 0f       	add	r18, r18
    6846:	33 1f       	adc	r19, r19
    6848:	61 50       	subi	r22, 0x01	; 1
    684a:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    684c:	91 f7       	brne	.-28     	; 0x6832 <SendParameter+0x2ad6>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    684e:	98 2f       	mov	r25, r24
    6850:	88 27       	eor	r24, r24
    6852:	82 27       	eor	r24, r18
    6854:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    6856:	e4 17       	cp	r30, r20
    6858:	f5 07       	cpc	r31, r21
    685a:	09 f7       	brne	.-62     	; 0x681e <SendParameter+0x2ac2>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    685c:	6c 01       	movw	r12, r24
    685e:	40 e1       	ldi	r20, 0x10	; 16
    6860:	6f e2       	ldi	r22, 0x2F	; 47
    6862:	75 e0       	ldi	r23, 0x05	; 5
    6864:	d1 d6       	rcall	.+3490   	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    6866:	8f e2       	ldi	r24, 0x2F	; 47
    6868:	95 e0       	ldi	r25, 0x05	; 5
    686a:	c4 d6       	rcall	.+3464   	; 0x75f4 <strupr>
	if(crcXmodem < 0x10)
    686c:	b0 e1       	ldi	r27, 0x10	; 16
    686e:	cb 16       	cp	r12, r27
    6870:	d1 04       	cpc	r13, r1
    6872:	98 f4       	brcc	.+38     	; 0x689a <SendParameter+0x2b3e>
	{
		tx_string[cnt+4] = crc[0];
    6874:	80 91 2f 05 	lds	r24, 0x052F
    6878:	fe 01       	movw	r30, r28
    687a:	e0 0f       	add	r30, r16
    687c:	f1 1f       	adc	r31, r17
    687e:	81 8f       	std	Z+25, r24	; 0x19
		tx_string[cnt+3] = '0';
    6880:	80 e3       	ldi	r24, 0x30	; 48
    6882:	fe 01       	movw	r30, r28
    6884:	e0 0f       	add	r30, r16
    6886:	f1 1f       	adc	r31, r17
    6888:	80 8f       	std	Z+24, r24	; 0x18
		tx_string[cnt+2] = '0';
    688a:	fe 01       	movw	r30, r28
    688c:	e0 0f       	add	r30, r16
    688e:	f1 1f       	adc	r31, r17
    6890:	87 8b       	std	Z+23, r24	; 0x17
		tx_string[cnt+1] = '0';
    6892:	fe 01       	movw	r30, r28
    6894:	ee 0d       	add	r30, r14
    6896:	ff 1d       	adc	r31, r15
    6898:	85 8b       	std	Z+21, r24	; 0x15
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    689a:	c6 01       	movw	r24, r12
    689c:	40 97       	sbiw	r24, 0x10	; 16
    689e:	80 3f       	cpi	r24, 0xF0	; 240
    68a0:	91 05       	cpc	r25, r1
    68a2:	b8 f4       	brcc	.+46     	; 0x68d2 <SendParameter+0x2b76>
	{
		tx_string[cnt+4] = crc[1];
    68a4:	af e2       	ldi	r26, 0x2F	; 47
    68a6:	b5 e0       	ldi	r27, 0x05	; 5
    68a8:	11 96       	adiw	r26, 0x01	; 1
    68aa:	8c 91       	ld	r24, X
    68ac:	11 97       	sbiw	r26, 0x01	; 1
    68ae:	fe 01       	movw	r30, r28
    68b0:	e0 0f       	add	r30, r16
    68b2:	f1 1f       	adc	r31, r17
    68b4:	81 8f       	std	Z+25, r24	; 0x19
		tx_string[cnt+3] = crc[0];
    68b6:	8c 91       	ld	r24, X
    68b8:	fe 01       	movw	r30, r28
    68ba:	e0 0f       	add	r30, r16
    68bc:	f1 1f       	adc	r31, r17
    68be:	80 8f       	std	Z+24, r24	; 0x18
		tx_string[cnt+2] = '0';
    68c0:	80 e3       	ldi	r24, 0x30	; 48
    68c2:	fe 01       	movw	r30, r28
    68c4:	e0 0f       	add	r30, r16
    68c6:	f1 1f       	adc	r31, r17
    68c8:	87 8b       	std	Z+23, r24	; 0x17
		tx_string[cnt+1] = '0';		
    68ca:	fe 01       	movw	r30, r28
    68cc:	ee 0d       	add	r30, r14
    68ce:	ff 1d       	adc	r31, r15
    68d0:	85 8b       	std	Z+21, r24	; 0x15
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    68d2:	c6 01       	movw	r24, r12
    68d4:	9a 95       	dec	r25
    68d6:	81 15       	cp	r24, r1
    68d8:	9f 40       	sbci	r25, 0x0F	; 15
    68da:	b8 f4       	brcc	.+46     	; 0x690a <SendParameter+0x2bae>
	{
		tx_string[cnt+4] = crc[2];
    68dc:	ef e2       	ldi	r30, 0x2F	; 47
    68de:	f5 e0       	ldi	r31, 0x05	; 5
    68e0:	82 81       	ldd	r24, Z+2	; 0x02
    68e2:	de 01       	movw	r26, r28
    68e4:	a0 0f       	add	r26, r16
    68e6:	b1 1f       	adc	r27, r17
    68e8:	59 96       	adiw	r26, 0x19	; 25
    68ea:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[1];
    68ec:	81 81       	ldd	r24, Z+1	; 0x01
    68ee:	de 01       	movw	r26, r28
    68f0:	a0 0f       	add	r26, r16
    68f2:	b1 1f       	adc	r27, r17
    68f4:	58 96       	adiw	r26, 0x18	; 24
    68f6:	8c 93       	st	X, r24
    68f8:	58 97       	sbiw	r26, 0x18	; 24
		tx_string[cnt+2] = crc[0];
    68fa:	80 81       	ld	r24, Z
    68fc:	fd 01       	movw	r30, r26
    68fe:	87 8b       	std	Z+23, r24	; 0x17
		tx_string[cnt+1] = '0';		
    6900:	80 e3       	ldi	r24, 0x30	; 48
    6902:	fe 01       	movw	r30, r28
    6904:	ee 0d       	add	r30, r14
    6906:	ff 1d       	adc	r31, r15
    6908:	85 8b       	std	Z+21, r24	; 0x15
	}
	if(crcXmodem >= 0x1000)
    690a:	c1 14       	cp	r12, r1
    690c:	f0 e1       	ldi	r31, 0x10	; 16
    690e:	df 06       	cpc	r13, r31
    6910:	c0 f0       	brcs	.+48     	; 0x6942 <SendParameter+0x2be6>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    6912:	de 01       	movw	r26, r28
    6914:	ae 0d       	add	r26, r14
    6916:	bf 1d       	adc	r27, r15
    6918:	ef e2       	ldi	r30, 0x2F	; 47
    691a:	f5 e0       	ldi	r31, 0x05	; 5
    691c:	80 81       	ld	r24, Z
    691e:	55 96       	adiw	r26, 0x15	; 21
    6920:	8c 93       	st	X, r24
		tx_string[cnt+2] = crc[1];
    6922:	81 81       	ldd	r24, Z+1	; 0x01
    6924:	de 01       	movw	r26, r28
    6926:	a0 0f       	add	r26, r16
    6928:	b1 1f       	adc	r27, r17
    692a:	57 96       	adiw	r26, 0x17	; 23
    692c:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[2];
    692e:	82 81       	ldd	r24, Z+2	; 0x02
    6930:	de 01       	movw	r26, r28
    6932:	a0 0f       	add	r26, r16
    6934:	b1 1f       	adc	r27, r17
    6936:	58 96       	adiw	r26, 0x18	; 24
    6938:	8c 93       	st	X, r24
    693a:	58 97       	sbiw	r26, 0x18	; 24
		tx_string[cnt+4] = crc[3];
    693c:	83 81       	ldd	r24, Z+3	; 0x03
    693e:	fd 01       	movw	r30, r26
    6940:	81 8f       	std	Z+25, r24	; 0x19
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    6942:	c8 01       	movw	r24, r16
    6944:	05 96       	adiw	r24, 0x05	; 5
    6946:	fe 01       	movw	r30, r28
    6948:	e8 0f       	add	r30, r24
    694a:	f9 1f       	adc	r31, r25
    694c:	2d e0       	ldi	r18, 0x0D	; 13
    694e:	25 8b       	std	Z+21, r18	; 0x15
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    6950:	99 23       	and	r25, r25
    6952:	0c f4       	brge	.+2      	; 0x6956 <SendParameter+0x2bfa>
    6954:	f3 c0       	rjmp	.+486    	; 0x6b3c <SendParameter+0x2de0>
    6956:	ae 01       	movw	r20, r28
    6958:	4b 5e       	subi	r20, 0xEB	; 235
    695a:	5f 4f       	sbci	r21, 0xFF	; 255
    695c:	0a 5f       	subi	r16, 0xFA	; 250
    695e:	1f 4f       	sbci	r17, 0xFF	; 255
    6960:	04 0f       	add	r16, r20
    6962:	15 1f       	adc	r17, r21
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    6964:	e7 e5       	ldi	r30, 0x57	; 87
    6966:	f5 e0       	ldi	r31, 0x05	; 5
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    6968:	61 ec       	ldi	r22, 0xC1	; 193
    696a:	70 e0       	ldi	r23, 0x00	; 0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    696c:	30 e0       	ldi	r19, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    696e:	da 01       	movw	r26, r20
    6970:	8d 91       	ld	r24, X+
    6972:	ad 01       	movw	r20, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    6974:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    6976:	21 81       	ldd	r18, Z+1	; 0x01
    6978:	90 81       	ld	r25, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    697a:	29 13       	cpse	r18, r25
    697c:	04 c0       	rjmp	.+8      	; 0x6986 <SendParameter+0x2c2a>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    697e:	db 01       	movw	r26, r22
    6980:	9c 91       	ld	r25, X
    6982:	90 62       	ori	r25, 0x20	; 32
    6984:	9c 93       	st	X, r25
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    6986:	90 81       	ld	r25, Z
    6988:	a3 81       	ldd	r26, Z+3	; 0x03
    698a:	b4 81       	ldd	r27, Z+4	; 0x04
    698c:	a9 0f       	add	r26, r25
    698e:	b1 1d       	adc	r27, r1
    6990:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    6992:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    6994:	a2 2f       	mov	r26, r18
    6996:	b0 e0       	ldi	r27, 0x00	; 0
    6998:	82 81       	ldd	r24, Z+2	; 0x02
    699a:	90 e0       	ldi	r25, 0x00	; 0
    699c:	01 97       	sbiw	r24, 0x01	; 1
    699e:	a8 17       	cp	r26, r24
    69a0:	b9 07       	cpc	r27, r25
    69a2:	11 f0       	breq	.+4      	; 0x69a8 <SendParameter+0x2c4c>
    69a4:	2f 5f       	subi	r18, 0xFF	; 255
    69a6:	01 c0       	rjmp	.+2      	; 0x69aa <SendParameter+0x2c4e>
    69a8:	23 2f       	mov	r18, r19
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    69aa:	20 83       	st	Z, r18
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    69ac:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    69ae:	40 17       	cp	r20, r16
    69b0:	51 07       	cpc	r21, r17
    69b2:	e9 f6       	brne	.-70     	; 0x696e <SendParameter+0x2c12>
    69b4:	c3 c0       	rjmp	.+390    	; 0x6b3c <SendParameter+0x2de0>
		itoa(motorSpeed, tx_string, 10);
		printStatus(tx_string);
		break;
		
		default:
		printStatus("VRerror");
    69b6:	8f e2       	ldi	r24, 0x2F	; 47
    69b8:	91 e0       	ldi	r25, 0x01	; 1
    69ba:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
    69be:	be c0       	rjmp	.+380    	; 0x6b3c <SendParameter+0x2de0>
    69c0:	40 e1       	ldi	r20, 0x10	; 16
    69c2:	6f e2       	ldi	r22, 0x2F	; 47
    69c4:	75 e0       	ldi	r23, 0x05	; 5
    69c6:	80 e0       	ldi	r24, 0x00	; 0
    69c8:	90 e0       	ldi	r25, 0x00	; 0
    69ca:	1e d6       	rcall	.+3132   	; 0x7608 <__itoa_ncheck>
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    69cc:	8f e2       	ldi	r24, 0x2F	; 47
    69ce:	95 e0       	ldi	r25, 0x05	; 5
    69d0:	11 d6       	rcall	.+3106   	; 0x75f4 <strupr>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    69d2:	c1 2c       	mov	r12, r1
    69d4:	d1 2c       	mov	r13, r1
    69d6:	0c 94 69 20 	jmp	0x40d2	; 0x40d2 <SendParameter+0x376>
    69da:	40 e1       	ldi	r20, 0x10	; 16
    69dc:	6f e2       	ldi	r22, 0x2F	; 47
    69de:	75 e0       	ldi	r23, 0x05	; 5
    69e0:	80 e0       	ldi	r24, 0x00	; 0
    69e2:	90 e0       	ldi	r25, 0x00	; 0
    69e4:	11 d6       	rcall	.+3106   	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    69e6:	8f e2       	ldi	r24, 0x2F	; 47
    69e8:	95 e0       	ldi	r25, 0x05	; 5
    69ea:	04 d6       	rcall	.+3080   	; 0x75f4 <strupr>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    69ec:	c1 2c       	mov	r12, r1
    69ee:	d1 2c       	mov	r13, r1
    69f0:	0c 94 34 22 	jmp	0x4468	; 0x4468 <SendParameter+0x70c>
    69f4:	40 e1       	ldi	r20, 0x10	; 16
    69f6:	6f e2       	ldi	r22, 0x2F	; 47
    69f8:	75 e0       	ldi	r23, 0x05	; 5
    69fa:	80 e0       	ldi	r24, 0x00	; 0
    69fc:	90 e0       	ldi	r25, 0x00	; 0
    69fe:	04 d6       	rcall	.+3080   	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    6a00:	8f e2       	ldi	r24, 0x2F	; 47
    6a02:	95 e0       	ldi	r25, 0x05	; 5
    6a04:	f7 d5       	rcall	.+3054   	; 0x75f4 <strupr>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    6a06:	c1 2c       	mov	r12, r1
    6a08:	d1 2c       	mov	r13, r1
    6a0a:	0c 94 6d 23 	jmp	0x46da	; 0x46da <SendParameter+0x97e>
    6a0e:	40 e1       	ldi	r20, 0x10	; 16
    6a10:	6f e2       	ldi	r22, 0x2F	; 47
    6a12:	75 e0       	ldi	r23, 0x05	; 5
    6a14:	80 e0       	ldi	r24, 0x00	; 0
    6a16:	90 e0       	ldi	r25, 0x00	; 0
    6a18:	f7 d5       	rcall	.+3054   	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    6a1a:	8f e2       	ldi	r24, 0x2F	; 47
    6a1c:	95 e0       	ldi	r25, 0x05	; 5
    6a1e:	ea d5       	rcall	.+3028   	; 0x75f4 <strupr>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    6a20:	c1 2c       	mov	r12, r1
    6a22:	d1 2c       	mov	r13, r1
    6a24:	0c 94 a6 24 	jmp	0x494c	; 0x494c <SendParameter+0xbf0>
    6a28:	40 e1       	ldi	r20, 0x10	; 16
    6a2a:	6f e2       	ldi	r22, 0x2F	; 47
    6a2c:	75 e0       	ldi	r23, 0x05	; 5
    6a2e:	80 e0       	ldi	r24, 0x00	; 0
    6a30:	90 e0       	ldi	r25, 0x00	; 0
    6a32:	ea d5       	rcall	.+3028   	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    6a34:	8f e2       	ldi	r24, 0x2F	; 47
    6a36:	95 e0       	ldi	r25, 0x05	; 5
    6a38:	dd d5       	rcall	.+3002   	; 0x75f4 <strupr>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    6a3a:	c1 2c       	mov	r12, r1
    6a3c:	d1 2c       	mov	r13, r1
    6a3e:	0c 94 b9 25 	jmp	0x4b72	; 0x4b72 <SendParameter+0xe16>
    6a42:	40 e1       	ldi	r20, 0x10	; 16
    6a44:	6f e2       	ldi	r22, 0x2F	; 47
    6a46:	75 e0       	ldi	r23, 0x05	; 5
    6a48:	80 e0       	ldi	r24, 0x00	; 0
    6a4a:	90 e0       	ldi	r25, 0x00	; 0
    6a4c:	dd d5       	rcall	.+3002   	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    6a4e:	8f e2       	ldi	r24, 0x2F	; 47
    6a50:	95 e0       	ldi	r25, 0x05	; 5
    6a52:	d0 d5       	rcall	.+2976   	; 0x75f4 <strupr>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    6a54:	c1 2c       	mov	r12, r1
    6a56:	d1 2c       	mov	r13, r1
    6a58:	0c 94 e5 26 	jmp	0x4dca	; 0x4dca <SendParameter+0x106e>
    6a5c:	40 e1       	ldi	r20, 0x10	; 16
    6a5e:	6f e2       	ldi	r22, 0x2F	; 47
    6a60:	75 e0       	ldi	r23, 0x05	; 5
    6a62:	80 e0       	ldi	r24, 0x00	; 0
    6a64:	90 e0       	ldi	r25, 0x00	; 0
    6a66:	d0 d5       	rcall	.+2976   	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    6a68:	8f e2       	ldi	r24, 0x2F	; 47
    6a6a:	95 e0       	ldi	r25, 0x05	; 5
    6a6c:	c3 d5       	rcall	.+2950   	; 0x75f4 <strupr>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    6a6e:	c1 2c       	mov	r12, r1
    6a70:	d1 2c       	mov	r13, r1
    6a72:	0c 94 81 29 	jmp	0x5302	; 0x5302 <SendParameter+0x15a6>
    6a76:	40 e1       	ldi	r20, 0x10	; 16
    6a78:	6f e2       	ldi	r22, 0x2F	; 47
    6a7a:	75 e0       	ldi	r23, 0x05	; 5
    6a7c:	80 e0       	ldi	r24, 0x00	; 0
    6a7e:	90 e0       	ldi	r25, 0x00	; 0
    6a80:	c3 d5       	rcall	.+2950   	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    6a82:	8f e2       	ldi	r24, 0x2F	; 47
    6a84:	95 e0       	ldi	r25, 0x05	; 5
    6a86:	b6 d5       	rcall	.+2924   	; 0x75f4 <strupr>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    6a88:	c1 2c       	mov	r12, r1
    6a8a:	d1 2c       	mov	r13, r1
    6a8c:	0c 94 97 2a 	jmp	0x552e	; 0x552e <SendParameter+0x17d2>
    6a90:	40 e1       	ldi	r20, 0x10	; 16
    6a92:	6f e2       	ldi	r22, 0x2F	; 47
    6a94:	75 e0       	ldi	r23, 0x05	; 5
    6a96:	80 e0       	ldi	r24, 0x00	; 0
    6a98:	90 e0       	ldi	r25, 0x00	; 0
    6a9a:	b6 d5       	rcall	.+2924   	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    6a9c:	8f e2       	ldi	r24, 0x2F	; 47
    6a9e:	95 e0       	ldi	r25, 0x05	; 5
    6aa0:	a9 d5       	rcall	.+2898   	; 0x75f4 <strupr>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    6aa2:	c1 2c       	mov	r12, r1
    6aa4:	d1 2c       	mov	r13, r1
    6aa6:	0c 94 ad 2b 	jmp	0x575a	; 0x575a <SendParameter+0x19fe>
    6aaa:	40 e1       	ldi	r20, 0x10	; 16
    6aac:	6f e2       	ldi	r22, 0x2F	; 47
    6aae:	75 e0       	ldi	r23, 0x05	; 5
    6ab0:	80 e0       	ldi	r24, 0x00	; 0
    6ab2:	90 e0       	ldi	r25, 0x00	; 0
    6ab4:	a9 d5       	rcall	.+2898   	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    6ab6:	8f e2       	ldi	r24, 0x2F	; 47
    6ab8:	95 e0       	ldi	r25, 0x05	; 5
    6aba:	9c d5       	rcall	.+2872   	; 0x75f4 <strupr>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    6abc:	c1 2c       	mov	r12, r1
    6abe:	d1 2c       	mov	r13, r1
    6ac0:	0c 94 c3 2c 	jmp	0x5986	; 0x5986 <SendParameter+0x1c2a>
    6ac4:	40 e1       	ldi	r20, 0x10	; 16
    6ac6:	6f e2       	ldi	r22, 0x2F	; 47
    6ac8:	75 e0       	ldi	r23, 0x05	; 5
    6aca:	80 e0       	ldi	r24, 0x00	; 0
    6acc:	90 e0       	ldi	r25, 0x00	; 0
    6ace:	9c d5       	rcall	.+2872   	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    6ad0:	8f e2       	ldi	r24, 0x2F	; 47
    6ad2:	95 e0       	ldi	r25, 0x05	; 5
    6ad4:	8f d5       	rcall	.+2846   	; 0x75f4 <strupr>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    6ad6:	c1 2c       	mov	r12, r1
    6ad8:	d1 2c       	mov	r13, r1
    6ada:	6a c8       	rjmp	.-3884   	; 0x5bb0 <SendParameter+0x1e54>
    6adc:	40 e1       	ldi	r20, 0x10	; 16
    6ade:	6f e2       	ldi	r22, 0x2F	; 47
    6ae0:	75 e0       	ldi	r23, 0x05	; 5
    6ae2:	80 e0       	ldi	r24, 0x00	; 0
    6ae4:	90 e0       	ldi	r25, 0x00	; 0
    6ae6:	90 d5       	rcall	.+2848   	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    6ae8:	8f e2       	ldi	r24, 0x2F	; 47
    6aea:	95 e0       	ldi	r25, 0x05	; 5
    6aec:	83 d5       	rcall	.+2822   	; 0x75f4 <strupr>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    6aee:	c1 2c       	mov	r12, r1
    6af0:	d1 2c       	mov	r13, r1
    6af2:	71 c9       	rjmp	.-3358   	; 0x5dd6 <SendParameter+0x207a>
    6af4:	40 e1       	ldi	r20, 0x10	; 16
    6af6:	6f e2       	ldi	r22, 0x2F	; 47
    6af8:	75 e0       	ldi	r23, 0x05	; 5
    6afa:	80 e0       	ldi	r24, 0x00	; 0
    6afc:	90 e0       	ldi	r25, 0x00	; 0
    6afe:	84 d5       	rcall	.+2824   	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    6b00:	8f e2       	ldi	r24, 0x2F	; 47
    6b02:	95 e0       	ldi	r25, 0x05	; 5
    6b04:	77 d5       	rcall	.+2798   	; 0x75f4 <strupr>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    6b06:	c1 2c       	mov	r12, r1
    6b08:	d1 2c       	mov	r13, r1
    6b0a:	78 ca       	rjmp	.-2832   	; 0x5ffc <SendParameter+0x22a0>
    6b0c:	40 e1       	ldi	r20, 0x10	; 16
    6b0e:	6f e2       	ldi	r22, 0x2F	; 47
    6b10:	75 e0       	ldi	r23, 0x05	; 5
    6b12:	80 e0       	ldi	r24, 0x00	; 0
    6b14:	90 e0       	ldi	r25, 0x00	; 0
    6b16:	78 d5       	rcall	.+2800   	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    6b18:	8f e2       	ldi	r24, 0x2F	; 47
    6b1a:	95 e0       	ldi	r25, 0x05	; 5
    6b1c:	6b d5       	rcall	.+2774   	; 0x75f4 <strupr>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    6b1e:	c1 2c       	mov	r12, r1
    6b20:	d1 2c       	mov	r13, r1
    6b22:	9b cd       	rjmp	.-1226   	; 0x665a <SendParameter+0x28fe>
    6b24:	40 e1       	ldi	r20, 0x10	; 16
    6b26:	6f e2       	ldi	r22, 0x2F	; 47
    6b28:	75 e0       	ldi	r23, 0x05	; 5
    6b2a:	80 e0       	ldi	r24, 0x00	; 0
    6b2c:	90 e0       	ldi	r25, 0x00	; 0
    6b2e:	6c d5       	rcall	.+2776   	; 0x7608 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    6b30:	8f e2       	ldi	r24, 0x2F	; 47
    6b32:	95 e0       	ldi	r25, 0x05	; 5
    6b34:	5f d5       	rcall	.+2750   	; 0x75f4 <strupr>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    6b36:	c1 2c       	mov	r12, r1
    6b38:	d1 2c       	mov	r13, r1
    6b3a:	9c ce       	rjmp	.-712    	; 0x6874 <SendParameter+0x2b18>
		break;
		
		default:
		printStatus("VRerror");
	}
}
    6b3c:	ec 96       	adiw	r28, 0x3c	; 60
    6b3e:	0f b6       	in	r0, 0x3f	; 63
    6b40:	f8 94       	cli
    6b42:	de bf       	out	0x3e, r29	; 62
    6b44:	0f be       	out	0x3f, r0	; 63
    6b46:	cd bf       	out	0x3d, r28	; 61
    6b48:	df 91       	pop	r29
    6b4a:	cf 91       	pop	r28
    6b4c:	1f 91       	pop	r17
    6b4e:	0f 91       	pop	r16
    6b50:	ff 90       	pop	r15
    6b52:	ef 90       	pop	r14
    6b54:	df 90       	pop	r13
    6b56:	cf 90       	pop	r12
    6b58:	08 95       	ret

00006b5a <main>:
	eeprom_write_float( (float*)eepromAdr_TempErrWin3, ch3.tempErrorWin );
	eeprom_write_word(	(uint16_t*)eepromAdr_TSettleTime3, ch3.tempSettleTime );	
}

int main (void)
  {
    6b5a:	cf 93       	push	r28
    6b5c:	df 93       	push	r29
    6b5e:	cd b7       	in	r28, 0x3d	; 61
    6b60:	de b7       	in	r29, 0x3e	; 62
    6b62:	e9 97       	sbiw	r28, 0x39	; 57
    6b64:	0f b6       	in	r0, 0x3f	; 63
    6b66:	f8 94       	cli
    6b68:	de bf       	out	0x3e, r29	; 62
    6b6a:	0f be       	out	0x3f, r0	; 63
    6b6c:	cd bf       	out	0x3d, r28	; 61
	char requestID[4];
	char s_string[20] = "C2CA SA ADP 1.0";
    6b6e:	80 e1       	ldi	r24, 0x10	; 16
    6b70:	e4 e0       	ldi	r30, 0x04	; 4
    6b72:	f1 e0       	ldi	r31, 0x01	; 1
    6b74:	de 01       	movw	r26, r28
    6b76:	59 96       	adiw	r26, 0x19	; 25
    6b78:	01 90       	ld	r0, Z+
    6b7a:	0d 92       	st	X+, r0
    6b7c:	8a 95       	dec	r24
    6b7e:	e1 f7       	brne	.-8      	; 0x6b78 <main+0x1e>
    6b80:	19 a6       	std	Y+41, r1	; 0x29
    6b82:	1a a6       	std	Y+42, r1	; 0x2a
    6b84:	1b a6       	std	Y+43, r1	; 0x2b
    6b86:	1c a6       	std	Y+44, r1	; 0x2c
	char *pos;
	char inCrC_string[5];
	int i;
	int var;
	
	cli();
    6b88:	f8 94       	cli
 */
static void uart_init(void)
{
#if defined UBRR0H
	// get the values from the setbaud tool
	UBRR0H = UBRRH_VALUE;
    6b8a:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBRRL_VALUE;
    6b8e:	82 e2       	ldi	r24, 0x22	; 34
    6b90:	80 93 c4 00 	sts	0x00C4, r24
#else
#error "Device is not supported by the driver"
#endif

#if USE_2X
	UCSR0A |= (1 << U2X0);
    6b94:	e0 ec       	ldi	r30, 0xC0	; 192
    6b96:	f0 e0       	ldi	r31, 0x00	; 0
    6b98:	80 81       	ld	r24, Z
    6b9a:	82 60       	ori	r24, 0x02	; 2
    6b9c:	80 83       	st	Z, r24
#endif

	// enable RX and TX and set interrupts on rx complete
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
    6b9e:	88 e9       	ldi	r24, 0x98	; 152
    6ba0:	80 93 c1 00 	sts	0x00C1, r24

	// 8-bit, 1 stop bit, no parity, asynchronous UART
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00) | (0 << USBS0) |
    6ba4:	86 e0       	ldi	r24, 0x06	; 6
    6ba6:	80 93 c2 00 	sts	0x00C2, r24
 * \retval struct ring_buffer a struct containing the ring buffer
 */
static inline struct ring_buffer ring_buffer_init(uint8_t *buffer, uint8_t size)
{
	struct ring_buffer ring;
	ring.write_offset = 0;
    6baa:	1a aa       	std	Y+50, r1	; 0x32
	ring.read_offset = 0;
    6bac:	1b aa       	std	Y+51, r1	; 0x33
	ring.size = size;
    6bae:	99 24       	eor	r9, r9
    6bb0:	9a 94       	dec	r9
    6bb2:	9c aa       	std	Y+52, r9	; 0x34
	ring.buffer = buffer;
    6bb4:	8e e2       	ldi	r24, 0x2E	; 46
    6bb6:	93 e0       	ldi	r25, 0x03	; 3
    6bb8:	9e ab       	std	Y+54, r25	; 0x36
    6bba:	8d ab       	std	Y+53, r24	; 0x35
	return ring;
    6bbc:	85 e0       	ldi	r24, 0x05	; 5
    6bbe:	fe 01       	movw	r30, r28
    6bc0:	f2 96       	adiw	r30, 0x32	; 50
    6bc2:	de 01       	movw	r26, r28
    6bc4:	16 96       	adiw	r26, 0x06	; 6
    6bc6:	01 90       	ld	r0, Z+
    6bc8:	0d 92       	st	X+, r0
    6bca:	8a 95       	dec	r24
    6bcc:	e1 f7       	brne	.-8      	; 0x6bc6 <main+0x6c>
    6bce:	85 e0       	ldi	r24, 0x05	; 5
    6bd0:	fe 01       	movw	r30, r28
    6bd2:	36 96       	adiw	r30, 0x06	; 6
    6bd4:	de 01       	movw	r26, r28
    6bd6:	11 96       	adiw	r26, 0x01	; 1
    6bd8:	01 90       	ld	r0, Z+
    6bda:	0d 92       	st	X+, r0
    6bdc:	8a 95       	dec	r24
    6bde:	e1 f7       	brne	.-8      	; 0x6bd8 <main+0x7e>
			(0 << UPM01) | (0 << UPM00) | (0 << UMSEL01) |
			(0 << UMSEL00);

	// initialize the in and out buffer for the UART
	ring_buffer_out = ring_buffer_init(out_buffer, BUFFER_SIZE);
    6be0:	85 e0       	ldi	r24, 0x05	; 5
    6be2:	fe 01       	movw	r30, r28
    6be4:	31 96       	adiw	r30, 0x01	; 1
    6be6:	a7 e5       	ldi	r26, 0x57	; 87
    6be8:	b5 e0       	ldi	r27, 0x05	; 5
    6bea:	01 90       	ld	r0, Z+
    6bec:	0d 92       	st	X+, r0
    6bee:	8a 95       	dec	r24
    6bf0:	e1 f7       	brne	.-8      	; 0x6bea <main+0x90>
 * \retval struct ring_buffer a struct containing the ring buffer
 */
static inline struct ring_buffer ring_buffer_init(uint8_t *buffer, uint8_t size)
{
	struct ring_buffer ring;
	ring.write_offset = 0;
    6bf2:	1a aa       	std	Y+50, r1	; 0x32
	ring.read_offset = 0;
    6bf4:	1b aa       	std	Y+51, r1	; 0x33
	ring.size = size;
    6bf6:	9c aa       	std	Y+52, r9	; 0x34
	ring.buffer = buffer;
    6bf8:	8d e2       	ldi	r24, 0x2D	; 45
    6bfa:	94 e0       	ldi	r25, 0x04	; 4
    6bfc:	9e ab       	std	Y+54, r25	; 0x36
    6bfe:	8d ab       	std	Y+53, r24	; 0x35
	return ring;
    6c00:	85 e0       	ldi	r24, 0x05	; 5
    6c02:	fe 01       	movw	r30, r28
    6c04:	f2 96       	adiw	r30, 0x32	; 50
    6c06:	de 01       	movw	r26, r28
    6c08:	50 96       	adiw	r26, 0x10	; 16
    6c0a:	01 90       	ld	r0, Z+
    6c0c:	0d 92       	st	X+, r0
    6c0e:	8a 95       	dec	r24
    6c10:	e1 f7       	brne	.-8      	; 0x6c0a <main+0xb0>
    6c12:	85 e0       	ldi	r24, 0x05	; 5
    6c14:	fe 01       	movw	r30, r28
    6c16:	70 96       	adiw	r30, 0x10	; 16
    6c18:	de 01       	movw	r26, r28
    6c1a:	1b 96       	adiw	r26, 0x0b	; 11
    6c1c:	01 90       	ld	r0, Z+
    6c1e:	0d 92       	st	X+, r0
    6c20:	8a 95       	dec	r24
    6c22:	e1 f7       	brne	.-8      	; 0x6c1c <main+0xc2>
	ring_buffer_in = ring_buffer_init(in_buffer, BUFFER_SIZE);
    6c24:	85 e0       	ldi	r24, 0x05	; 5
    6c26:	fe 01       	movw	r30, r28
    6c28:	3b 96       	adiw	r30, 0x0b	; 11
    6c2a:	a4 e3       	ldi	r26, 0x34	; 52
    6c2c:	b5 e0       	ldi	r27, 0x05	; 5
    6c2e:	01 90       	ld	r0, Z+
    6c30:	0d 92       	st	X+, r0
    6c32:	8a 95       	dec	r24
    6c34:	e1 f7       	brne	.-8      	; 0x6c2e <main+0xd4>
	int i;
	int var;
	
	cli();
	uart_init();
	sei();
    6c36:	78 94       	sei
/************************************************
SPI INITIALISATION
*************************************************/
static inline void SPIinit(void)
{
	SPI_DDR &= 0b11101111;							// PB4 = Input = MISO
    6c38:	24 98       	cbi	0x04, 4	; 4
	SPI_DDR = (1<<PORTB3)|(1<<PORTB5|(1<<PORTB2));	// Set MOSI, SCK and SS as output
    6c3a:	8c e2       	ldi	r24, 0x2C	; 44
    6c3c:	84 b9       	out	0x04, r24	; 4
	
	
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0)|(1<<CPHA)|(1<<CPOL); // Enable SPI, Master, set clock rate fck/16
    6c3e:	8d e5       	ldi	r24, 0x5D	; 93
    6c40:	8c bd       	out	0x2c, r24	; 44
	cli();
	uart_init();
	sei();
	SPIinit();

	ch0.pwm = 1;
    6c42:	0f 2e       	mov	r0, r31
    6c44:	f6 ec       	ldi	r31, 0xC6	; 198
    6c46:	af 2e       	mov	r10, r31
    6c48:	f2 e0       	ldi	r31, 0x02	; 2
    6c4a:	bf 2e       	mov	r11, r31
    6c4c:	f0 2d       	mov	r31, r0
    6c4e:	81 e0       	ldi	r24, 0x01	; 1
    6c50:	90 e0       	ldi	r25, 0x00	; 0
    6c52:	90 93 27 03 	sts	0x0327, r25
    6c56:	80 93 26 03 	sts	0x0326, r24
	ch1.pwm = 1;
    6c5a:	0f 2e       	mov	r0, r31
    6c5c:	f3 e6       	ldi	r31, 0x63	; 99
    6c5e:	cf 2e       	mov	r12, r31
    6c60:	f2 e0       	ldi	r31, 0x02	; 2
    6c62:	df 2e       	mov	r13, r31
    6c64:	f0 2d       	mov	r31, r0
    6c66:	90 93 c4 02 	sts	0x02C4, r25
    6c6a:	80 93 c3 02 	sts	0x02C3, r24
	ch2.pwm = 1;
    6c6e:	0f 2e       	mov	r0, r31
    6c70:	f0 e0       	ldi	r31, 0x00	; 0
    6c72:	ef 2e       	mov	r14, r31
    6c74:	f2 e0       	ldi	r31, 0x02	; 2
    6c76:	ff 2e       	mov	r15, r31
    6c78:	f0 2d       	mov	r31, r0
    6c7a:	90 93 61 02 	sts	0x0261, r25
    6c7e:	80 93 60 02 	sts	0x0260, r24
	ch3.pwm = 1;
    6c82:	0d e9       	ldi	r16, 0x9D	; 157
    6c84:	11 e0       	ldi	r17, 0x01	; 1
    6c86:	90 93 fe 01 	sts	0x01FE, r25
    6c8a:	80 93 fd 01 	sts	0x01FD, r24

	DDRD = 0b11111000;			// 1 = output 0 = input
    6c8e:	88 ef       	ldi	r24, 0xF8	; 248
    6c90:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0b00001111;
    6c92:	8f e0       	ldi	r24, 0x0F	; 15
    6c94:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1<<PORTB1);		// Set stepper Dir to output
    6c96:	21 9a       	sbi	0x04, 1	; 4
	//DDRB -= _BV(PORTB0);		// Set home switch to input
	
	PORTD |=(1<<PORTD7)|(1<<PORTD6)|(1<<PORTD5)|(1<<PORTD4);	// Set initially all CS high
    6c98:	8b b1       	in	r24, 0x0b	; 11
    6c9a:	80 6f       	ori	r24, 0xF0	; 240
    6c9c:	8b b9       	out	0x0b, r24	; 11
	return step;
}

static inline void ReadParmEEPROM()
{
	ch0.TempSetPoint = eeprom_read_float((float*)eepromAdr_TempSetPoint0);
    6c9e:	80 e0       	ldi	r24, 0x00	; 0
    6ca0:	90 e0       	ldi	r25, 0x00	; 0
    6ca2:	a6 d6       	rcall	.+3404   	; 0x79f0 <eeprom_read_dword>
    6ca4:	d5 01       	movw	r26, r10
    6ca6:	6d 93       	st	X+, r22
    6ca8:	7d 93       	st	X+, r23
    6caa:	8d 93       	st	X+, r24
    6cac:	9c 93       	st	X, r25
    6cae:	13 97       	sbiw	r26, 0x03	; 3
	ch0.Pgain = eeprom_read_float((float*)eepromAdr_PgainCh0);
    6cb0:	84 e0       	ldi	r24, 0x04	; 4
    6cb2:	90 e0       	ldi	r25, 0x00	; 0
    6cb4:	9d d6       	rcall	.+3386   	; 0x79f0 <eeprom_read_dword>
    6cb6:	f5 01       	movw	r30, r10
    6cb8:	64 8f       	std	Z+28, r22	; 0x1c
    6cba:	75 8f       	std	Z+29, r23	; 0x1d
    6cbc:	86 8f       	std	Z+30, r24	; 0x1e
    6cbe:	97 8f       	std	Z+31, r25	; 0x1f
	ch0.Igain = eeprom_read_float((float*)eepromAdr_IgainCh0);
    6cc0:	88 e0       	ldi	r24, 0x08	; 8
    6cc2:	90 e0       	ldi	r25, 0x00	; 0
    6cc4:	95 d6       	rcall	.+3370   	; 0x79f0 <eeprom_read_dword>
    6cc6:	d5 01       	movw	r26, r10
    6cc8:	90 96       	adiw	r26, 0x20	; 32
    6cca:	6d 93       	st	X+, r22
    6ccc:	7d 93       	st	X+, r23
    6cce:	8d 93       	st	X+, r24
    6cd0:	9c 93       	st	X, r25
    6cd2:	93 97       	sbiw	r26, 0x23	; 35
	ch0.Dgain = eeprom_read_float((float*)eepromAdr_DgainCh0);
    6cd4:	8c e0       	ldi	r24, 0x0C	; 12
    6cd6:	90 e0       	ldi	r25, 0x00	; 0
    6cd8:	8b d6       	rcall	.+3350   	; 0x79f0 <eeprom_read_dword>
    6cda:	f5 01       	movw	r30, r10
    6cdc:	64 a3       	std	Z+36, r22	; 0x24
    6cde:	75 a3       	std	Z+37, r23	; 0x25
    6ce0:	86 a3       	std	Z+38, r24	; 0x26
    6ce2:	97 a3       	std	Z+39, r25	; 0x27
	ch0.tempErrorWin = eeprom_read_float((float*)eepromAdr_TempErrWin0);
    6ce4:	80 e1       	ldi	r24, 0x10	; 16
    6ce6:	90 e0       	ldi	r25, 0x00	; 0
    6ce8:	83 d6       	rcall	.+3334   	; 0x79f0 <eeprom_read_dword>
    6cea:	60 93 1a 03 	sts	0x031A, r22
    6cee:	70 93 1b 03 	sts	0x031B, r23
    6cf2:	80 93 1c 03 	sts	0x031C, r24
    6cf6:	90 93 1d 03 	sts	0x031D, r25
	ch0.tempSettleTime = eeprom_read_word((uint16_t*)eepromAdr_TSettleTime0);
    6cfa:	84 e1       	ldi	r24, 0x14	; 20
    6cfc:	90 e0       	ldi	r25, 0x00	; 0
    6cfe:	7d d6       	rcall	.+3322   	; 0x79fa <eeprom_read_word>
    6d00:	90 93 21 03 	sts	0x0321, r25
    6d04:	80 93 20 03 	sts	0x0320, r24
	
	ch1.TempSetPoint = eeprom_read_float((float*)eepromAdr_TempSetPoint1);
    6d08:	88 e1       	ldi	r24, 0x18	; 24
    6d0a:	90 e0       	ldi	r25, 0x00	; 0
    6d0c:	71 d6       	rcall	.+3298   	; 0x79f0 <eeprom_read_dword>
    6d0e:	d6 01       	movw	r26, r12
    6d10:	6d 93       	st	X+, r22
    6d12:	7d 93       	st	X+, r23
    6d14:	8d 93       	st	X+, r24
    6d16:	9c 93       	st	X, r25
    6d18:	13 97       	sbiw	r26, 0x03	; 3
	ch1.Pgain = eeprom_read_float((float*)eepromAdr_PgainCh1);
    6d1a:	8c e1       	ldi	r24, 0x1C	; 28
    6d1c:	90 e0       	ldi	r25, 0x00	; 0
    6d1e:	68 d6       	rcall	.+3280   	; 0x79f0 <eeprom_read_dword>
    6d20:	f6 01       	movw	r30, r12
    6d22:	64 8f       	std	Z+28, r22	; 0x1c
    6d24:	75 8f       	std	Z+29, r23	; 0x1d
    6d26:	86 8f       	std	Z+30, r24	; 0x1e
    6d28:	97 8f       	std	Z+31, r25	; 0x1f
	ch1.Igain = eeprom_read_float((float*)eepromAdr_IgainCh1);
    6d2a:	80 e2       	ldi	r24, 0x20	; 32
    6d2c:	90 e0       	ldi	r25, 0x00	; 0
    6d2e:	60 d6       	rcall	.+3264   	; 0x79f0 <eeprom_read_dword>
    6d30:	d6 01       	movw	r26, r12
    6d32:	90 96       	adiw	r26, 0x20	; 32
    6d34:	6d 93       	st	X+, r22
    6d36:	7d 93       	st	X+, r23
    6d38:	8d 93       	st	X+, r24
    6d3a:	9c 93       	st	X, r25
    6d3c:	93 97       	sbiw	r26, 0x23	; 35
	ch1.Dgain = eeprom_read_float((float*)eepromAdr_DgainCh1);
    6d3e:	84 e2       	ldi	r24, 0x24	; 36
    6d40:	90 e0       	ldi	r25, 0x00	; 0
    6d42:	56 d6       	rcall	.+3244   	; 0x79f0 <eeprom_read_dword>
    6d44:	f6 01       	movw	r30, r12
    6d46:	64 a3       	std	Z+36, r22	; 0x24
    6d48:	75 a3       	std	Z+37, r23	; 0x25
    6d4a:	86 a3       	std	Z+38, r24	; 0x26
    6d4c:	97 a3       	std	Z+39, r25	; 0x27
	ch1.tempErrorWin = eeprom_read_float((float*)eepromAdr_TempErrWin1);
    6d4e:	88 e2       	ldi	r24, 0x28	; 40
    6d50:	90 e0       	ldi	r25, 0x00	; 0
    6d52:	4e d6       	rcall	.+3228   	; 0x79f0 <eeprom_read_dword>
    6d54:	60 93 b7 02 	sts	0x02B7, r22
    6d58:	70 93 b8 02 	sts	0x02B8, r23
    6d5c:	80 93 b9 02 	sts	0x02B9, r24
    6d60:	90 93 ba 02 	sts	0x02BA, r25
	ch1.tempSettleTime = eeprom_read_word((uint16_t*)eepromAdr_TSettleTime1);	
    6d64:	8c e2       	ldi	r24, 0x2C	; 44
    6d66:	90 e0       	ldi	r25, 0x00	; 0
    6d68:	48 d6       	rcall	.+3216   	; 0x79fa <eeprom_read_word>
    6d6a:	90 93 be 02 	sts	0x02BE, r25
    6d6e:	80 93 bd 02 	sts	0x02BD, r24
	
	ch2.TempSetPoint = eeprom_read_float((float*)eepromAdr_TempSetPoint2);
    6d72:	80 e3       	ldi	r24, 0x30	; 48
    6d74:	90 e0       	ldi	r25, 0x00	; 0
    6d76:	3c d6       	rcall	.+3192   	; 0x79f0 <eeprom_read_dword>
    6d78:	d7 01       	movw	r26, r14
    6d7a:	6d 93       	st	X+, r22
    6d7c:	7d 93       	st	X+, r23
    6d7e:	8d 93       	st	X+, r24
    6d80:	9c 93       	st	X, r25
    6d82:	13 97       	sbiw	r26, 0x03	; 3
	ch2.Pgain = eeprom_read_float((float*)eepromAdr_PgainCh2);
    6d84:	84 e3       	ldi	r24, 0x34	; 52
    6d86:	90 e0       	ldi	r25, 0x00	; 0
    6d88:	33 d6       	rcall	.+3174   	; 0x79f0 <eeprom_read_dword>
    6d8a:	f7 01       	movw	r30, r14
    6d8c:	64 8f       	std	Z+28, r22	; 0x1c
    6d8e:	75 8f       	std	Z+29, r23	; 0x1d
    6d90:	86 8f       	std	Z+30, r24	; 0x1e
    6d92:	97 8f       	std	Z+31, r25	; 0x1f
	ch2.Igain = eeprom_read_float((float*)eepromAdr_IgainCh2);
    6d94:	88 e3       	ldi	r24, 0x38	; 56
    6d96:	90 e0       	ldi	r25, 0x00	; 0
    6d98:	2b d6       	rcall	.+3158   	; 0x79f0 <eeprom_read_dword>
    6d9a:	d7 01       	movw	r26, r14
    6d9c:	90 96       	adiw	r26, 0x20	; 32
    6d9e:	6d 93       	st	X+, r22
    6da0:	7d 93       	st	X+, r23
    6da2:	8d 93       	st	X+, r24
    6da4:	9c 93       	st	X, r25
    6da6:	93 97       	sbiw	r26, 0x23	; 35
	ch2.Dgain = eeprom_read_float((float*)eepromAdr_DgainCh2);
    6da8:	8c e3       	ldi	r24, 0x3C	; 60
    6daa:	90 e0       	ldi	r25, 0x00	; 0
    6dac:	21 d6       	rcall	.+3138   	; 0x79f0 <eeprom_read_dword>
    6dae:	f7 01       	movw	r30, r14
    6db0:	64 a3       	std	Z+36, r22	; 0x24
    6db2:	75 a3       	std	Z+37, r23	; 0x25
    6db4:	86 a3       	std	Z+38, r24	; 0x26
    6db6:	97 a3       	std	Z+39, r25	; 0x27
	ch2.tempErrorWin = eeprom_read_float((float*)eepromAdr_TempErrWin2);
    6db8:	80 e4       	ldi	r24, 0x40	; 64
    6dba:	90 e0       	ldi	r25, 0x00	; 0
    6dbc:	19 d6       	rcall	.+3122   	; 0x79f0 <eeprom_read_dword>
    6dbe:	60 93 54 02 	sts	0x0254, r22
    6dc2:	70 93 55 02 	sts	0x0255, r23
    6dc6:	80 93 56 02 	sts	0x0256, r24
    6dca:	90 93 57 02 	sts	0x0257, r25
	ch2.tempSettleTime = eeprom_read_word((uint16_t*)eepromAdr_TSettleTime2);	
    6dce:	84 e4       	ldi	r24, 0x44	; 68
    6dd0:	90 e0       	ldi	r25, 0x00	; 0
    6dd2:	13 d6       	rcall	.+3110   	; 0x79fa <eeprom_read_word>
    6dd4:	90 93 5b 02 	sts	0x025B, r25
    6dd8:	80 93 5a 02 	sts	0x025A, r24
	
	ch3.TempSetPoint = eeprom_read_float((float*)eepromAdr_TempSetPoint3);
    6ddc:	88 e4       	ldi	r24, 0x48	; 72
    6dde:	90 e0       	ldi	r25, 0x00	; 0
    6de0:	07 d6       	rcall	.+3086   	; 0x79f0 <eeprom_read_dword>
    6de2:	d8 01       	movw	r26, r16
    6de4:	6d 93       	st	X+, r22
    6de6:	7d 93       	st	X+, r23
    6de8:	8d 93       	st	X+, r24
    6dea:	9c 93       	st	X, r25
    6dec:	13 97       	sbiw	r26, 0x03	; 3
	ch3.Pgain = eeprom_read_float((float*)eepromAdr_PgainCh3);
    6dee:	8c e4       	ldi	r24, 0x4C	; 76
    6df0:	90 e0       	ldi	r25, 0x00	; 0
    6df2:	fe d5       	rcall	.+3068   	; 0x79f0 <eeprom_read_dword>
    6df4:	f8 01       	movw	r30, r16
    6df6:	64 8f       	std	Z+28, r22	; 0x1c
    6df8:	75 8f       	std	Z+29, r23	; 0x1d
    6dfa:	86 8f       	std	Z+30, r24	; 0x1e
    6dfc:	97 8f       	std	Z+31, r25	; 0x1f
	ch3.Igain = eeprom_read_float((float*)eepromAdr_IgainCh3);
    6dfe:	80 e5       	ldi	r24, 0x50	; 80
    6e00:	90 e0       	ldi	r25, 0x00	; 0
    6e02:	f6 d5       	rcall	.+3052   	; 0x79f0 <eeprom_read_dword>
    6e04:	d8 01       	movw	r26, r16
    6e06:	90 96       	adiw	r26, 0x20	; 32
    6e08:	6d 93       	st	X+, r22
    6e0a:	7d 93       	st	X+, r23
    6e0c:	8d 93       	st	X+, r24
    6e0e:	9c 93       	st	X, r25
    6e10:	93 97       	sbiw	r26, 0x23	; 35
	ch3.Dgain = eeprom_read_float((float*)eepromAdr_DgainCh3);			
    6e12:	84 e5       	ldi	r24, 0x54	; 84
    6e14:	90 e0       	ldi	r25, 0x00	; 0
    6e16:	ec d5       	rcall	.+3032   	; 0x79f0 <eeprom_read_dword>
    6e18:	f8 01       	movw	r30, r16
    6e1a:	64 a3       	std	Z+36, r22	; 0x24
    6e1c:	75 a3       	std	Z+37, r23	; 0x25
    6e1e:	86 a3       	std	Z+38, r24	; 0x26
    6e20:	97 a3       	std	Z+39, r25	; 0x27
	ch3.tempErrorWin = eeprom_read_float((float*)eepromAdr_TempErrWin3);
    6e22:	88 e5       	ldi	r24, 0x58	; 88
    6e24:	90 e0       	ldi	r25, 0x00	; 0
    6e26:	e4 d5       	rcall	.+3016   	; 0x79f0 <eeprom_read_dword>
    6e28:	60 93 f1 01 	sts	0x01F1, r22
    6e2c:	70 93 f2 01 	sts	0x01F2, r23
    6e30:	80 93 f3 01 	sts	0x01F3, r24
    6e34:	90 93 f4 01 	sts	0x01F4, r25
	ch3.tempSettleTime = eeprom_read_word((uint16_t*)eepromAdr_TSettleTime3);	
    6e38:	8c e5       	ldi	r24, 0x5C	; 92
    6e3a:	90 e0       	ldi	r25, 0x00	; 0
    6e3c:	de d5       	rcall	.+3004   	; 0x79fa <eeprom_read_word>
    6e3e:	90 93 f8 01 	sts	0x01F8, r25
    6e42:	80 93 f7 01 	sts	0x01F7, r24
	printStatus(data);
}

static inline void MAX31865initAuto(uint8_t ch)
{
	MaxRTDinit(0xC3, ch);
    6e46:	61 e0       	ldi	r22, 0x01	; 1
    6e48:	83 ec       	ldi	r24, 0xC3	; 195
    6e4a:	0e 94 78 00 	call	0xf0	; 0xf0 <MaxRTDinit>
    6e4e:	62 e0       	ldi	r22, 0x02	; 2
    6e50:	83 ec       	ldi	r24, 0xC3	; 195
    6e52:	0e 94 78 00 	call	0xf0	; 0xf0 <MaxRTDinit>
    6e56:	63 e0       	ldi	r22, 0x03	; 3
    6e58:	83 ec       	ldi	r24, 0xC3	; 195
    6e5a:	0e 94 78 00 	call	0xf0	; 0xf0 <MaxRTDinit>
    6e5e:	64 e0       	ldi	r22, 0x04	; 4
    6e60:	83 ec       	ldi	r24, 0xC3	; 195
    6e62:	0e 94 78 00 	call	0xf0	; 0xf0 <MaxRTDinit>
}

static inline void TimerInit(void)
{
	// Timer0 Heater PWM output
	TIMSK0 = _BV(OCIE0A);				// Enable Interrupt TimerCounter0 Compare Match A (TIMER0_COMPA_vect)
    6e66:	82 e0       	ldi	r24, 0x02	; 2
    6e68:	80 93 6e 00 	sts	0x006E, r24
	TCCR0A = _BV(WGM01);				// Mode = CTC (Clear Timer on Compare)
    6e6c:	84 bd       	out	0x24, r24	; 36
	TCCR0B = _BV(CS02) | _BV(CS00);		// 16MHz/1024, 0.000064 seconds per tick
    6e6e:	95 e0       	ldi	r25, 0x05	; 5
    6e70:	95 bd       	out	0x25, r25	; 37
	OCR0A = 16;							// TIMER0_COMPA_vect will be triggered each 0.000064 x 16 = 0.001024 s (976.5 Hz)
    6e72:	90 e1       	ldi	r25, 0x10	; 16
    6e74:	97 bd       	out	0x27, r25	; 39
	
	// Timer 1 Step motor output
	TIMSK1 = _BV(OCIE1A);				// Enable Interrupt TimerCounter1-16Bit Compare Match A (TIMER1_COMPA_vect)
    6e76:	80 93 6f 00 	sts	0x006F, r24
	TCCR1B = _BV(WGM12) | _BV(WGM13) | _BV(CS11);// | _BV(CS10); // Mode = CTC (Clear Timer on Compare), 16MHz/1024, 0.000064 seconds per tick
    6e7a:	9a e1       	ldi	r25, 0x1A	; 26
    6e7c:	90 93 81 00 	sts	0x0081, r25
	ICR1 = 300;							// TIMER1_COMPA_vecr will be called every timer reach the 16-bit value int ICR1
    6e80:	e6 e8       	ldi	r30, 0x86	; 134
    6e82:	f0 e0       	ldi	r31, 0x00	; 0
    6e84:	2c e2       	ldi	r18, 0x2C	; 44
    6e86:	31 e0       	ldi	r19, 0x01	; 1
    6e88:	31 83       	std	Z+1, r19	; 0x01
    6e8a:	20 83       	st	Z, r18
	int dummy = ICR1;
    6e8c:	20 81       	ld	r18, Z
    6e8e:	31 81       	ldd	r19, Z+1	; 0x01
	
	// Timer2 PID controller	
	TIMSK2 = _BV(OCIE2A);				// Enable Interrupt TimerCounter2 Compare Match A (TIMER2_COMPA_vect)
    6e90:	80 93 70 00 	sts	0x0070, r24
	TCCR2A = _BV(WGM21);				// Mode = CTC (Clear Timer on Compare)
    6e94:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B = _BV(CS22) | _BV(CS21) | _BV(CS20);		// 16MHz/1024, 0.000064 seconds per tick
    6e98:	87 e0       	ldi	r24, 0x07	; 7
    6e9a:	80 93 b1 00 	sts	0x00B1, r24
	OCR2A = 255;						// TIMER2_COMPA_vect will be triggered each 0.000064 x 255 = 0.01632 s (61.3 Hz)
    6e9e:	90 92 b3 00 	sts	0x00B3, r9
	
	sei();
    6ea2:	78 94       	sei
	*	PC:		#12A?VR104
	*	ATMega:	!12A70.0006DCA
	***********************************************************/
	while(1)
	{
		memset(rx_string, 0x00, rx_size);			// Purge rx_string
    6ea4:	0f 2e       	mov	r0, r31
    6ea6:	f9 e3       	ldi	r31, 0x39	; 57
    6ea8:	af 2e       	mov	r10, r31
    6eaa:	f5 e0       	ldi	r31, 0x05	; 5
    6eac:	bf 2e       	mov	r11, r31
    6eae:	f0 2d       	mov	r31, r0
 * \returns next data byte in buffer
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
    6eb0:	04 e3       	ldi	r16, 0x34	; 52
    6eb2:	15 e0       	ldi	r17, 0x05	; 5
    6eb4:	0f 2e       	mov	r0, r31
    6eb6:	f7 e5       	ldi	r31, 0x57	; 87
    6eb8:	ef 2e       	mov	r14, r31
    6eba:	f5 e0       	ldi	r31, 0x05	; 5
    6ebc:	ff 2e       	mov	r15, r31
    6ebe:	f0 2d       	mov	r31, r0
    6ec0:	3e 01       	movw	r6, r28
    6ec2:	fd e2       	ldi	r31, 0x2D	; 45
    6ec4:	6f 0e       	add	r6, r31
    6ec6:	71 1c       	adc	r7, r1
    6ec8:	3a 2c       	mov	r3, r10
    6eca:	4b 2c       	mov	r4, r11
    6ecc:	a8 ae       	std	Y+56, r10	; 0x38
    6ece:	b9 ae       	std	Y+57, r11	; 0x39
    6ed0:	26 2c       	mov	r2, r6
    6ed2:	7f aa       	std	Y+55, r7	; 0x37
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    6ed4:	51 2c       	mov	r5, r1
		{
			pos = NULL;
			pos = strchr(rx_string, '?');
			if(pos != NULL)							
			{
				requestCmd[0] = *(pos + 1);			// Parse request command	
    6ed6:	0f 2e       	mov	r0, r31
    6ed8:	fb e2       	ldi	r31, 0x2B	; 43
    6eda:	8f 2e       	mov	r8, r31
    6edc:	f3 e0       	ldi	r31, 0x03	; 3
    6ede:	9f 2e       	mov	r9, r31
    6ee0:	f0 2d       	mov	r31, r0
	*	PC:		#12A?VR104
	*	ATMega:	!12A70.0006DCA
	***********************************************************/
	while(1)
	{
		memset(rx_string, 0x00, rx_size);			// Purge rx_string
    6ee2:	6e e1       	ldi	r22, 0x1E	; 30
    6ee4:	d5 01       	movw	r26, r10
    6ee6:	e6 2f       	mov	r30, r22
    6ee8:	1d 92       	st	X+, r1
    6eea:	ea 95       	dec	r30
    6eec:	e9 f7       	brne	.-6      	; 0x6ee8 <main+0x38e>
 * \returns next data byte in buffer
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
    6eee:	d8 01       	movw	r26, r16
    6ef0:	13 96       	adiw	r26, 0x03	; 3
    6ef2:	4d 91       	ld	r20, X+
    6ef4:	5c 91       	ld	r21, X
    6ef6:	14 97       	sbiw	r26, 0x04	; 4
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    6ef8:	12 96       	adiw	r26, 0x02	; 2
    6efa:	2c 91       	ld	r18, X
    6efc:	30 e0       	ldi	r19, 0x00	; 0
    6efe:	21 50       	subi	r18, 0x01	; 1
    6f00:	31 09       	sbc	r19, r1
    6f02:	e8 ad       	ldd	r30, Y+56	; 0x38
    6f04:	f9 ad       	ldd	r31, Y+57	; 0x39
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    6f06:	d8 01       	movw	r26, r16
    6f08:	11 96       	adiw	r26, 0x01	; 1
    6f0a:	8c 91       	ld	r24, X
    6f0c:	11 97       	sbiw	r26, 0x01	; 1
    6f0e:	9c 91       	ld	r25, X

		for(i = 0; i < rx_size; i++)
		{
			while(!uart_char_waiting());
    6f10:	98 17       	cp	r25, r24
    6f12:	c9 f3       	breq	.-14     	; 0x6f06 <main+0x3ac>
 * \returns next data byte in buffer
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
    6f14:	11 96       	adiw	r26, 0x01	; 1
    6f16:	8c 91       	ld	r24, X
    6f18:	da 01       	movw	r26, r20
    6f1a:	a8 0f       	add	r26, r24
    6f1c:	b1 1d       	adc	r27, r1
    6f1e:	dc 90       	ld	r13, X
 *
 * \returns the next read offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_read(const struct ring_buffer *ring)
{
	return get_next(ring->read_offset, ring->size);
    6f20:	d8 01       	movw	r26, r16
    6f22:	11 96       	adiw	r26, 0x01	; 1
    6f24:	7c 91       	ld	r23, X
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    6f26:	87 2f       	mov	r24, r23
    6f28:	90 e0       	ldi	r25, 0x00	; 0
    6f2a:	82 17       	cp	r24, r18
    6f2c:	93 07       	cpc	r25, r19
    6f2e:	11 f0       	breq	.+4      	; 0x6f34 <main+0x3da>
    6f30:	7f 5f       	subi	r23, 0xFF	; 255
    6f32:	01 c0       	rjmp	.+2      	; 0x6f36 <main+0x3dc>
    6f34:	75 2d       	mov	r23, r5
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
	ring->read_offset = ring_buffer_get_next_read(ring);
    6f36:	d8 01       	movw	r26, r16
    6f38:	11 96       	adiw	r26, 0x01	; 1
    6f3a:	7c 93       	st	X, r23
			rx_string[i] = uart_getchar();			// Collect the message
    6f3c:	d1 92       	st	Z+, r13
			if(rx_string[i] == 0x0D)				// Terminate acquisition if <CR> received
    6f3e:	bd e0       	ldi	r27, 0x0D	; 13
    6f40:	db 16       	cp	r13, r27
    6f42:	19 f0       	breq	.+6      	; 0x6f4a <main+0x3f0>
	***********************************************************/
	while(1)
	{
		memset(rx_string, 0x00, rx_size);			// Purge rx_string

		for(i = 0; i < rx_size; i++)
    6f44:	ee 15       	cp	r30, r14
    6f46:	ff 05       	cpc	r31, r15
    6f48:	f1 f6       	brne	.-68     	; 0x6f06 <main+0x3ac>
			{
				break;
			}	
		}

		if(rx_string[0] == '#')
    6f4a:	f5 01       	movw	r30, r10
    6f4c:	80 81       	ld	r24, Z
    6f4e:	83 32       	cpi	r24, 0x23	; 35
    6f50:	49 f6       	brne	.-110    	; 0x6ee4 <main+0x38a>
		{
			pos = NULL;
			pos = strchr(rx_string, '?');
    6f52:	6f e3       	ldi	r22, 0x3F	; 63
    6f54:	70 e0       	ldi	r23, 0x00	; 0
    6f56:	83 2d       	mov	r24, r3
    6f58:	94 2d       	mov	r25, r4
    6f5a:	2d d3       	rcall	.+1626   	; 0x75b6 <strchr>
    6f5c:	6c 01       	movw	r12, r24
			if(pos != NULL)							
    6f5e:	00 97       	sbiw	r24, 0x00	; 0
    6f60:	09 f4       	brne	.+2      	; 0x6f64 <main+0x40a>
    6f62:	85 c0       	rjmp	.+266    	; 0x706e <main+0x514>
			{
				requestCmd[0] = *(pos + 1);			// Parse request command	
    6f64:	dc 01       	movw	r26, r24
    6f66:	11 96       	adiw	r26, 0x01	; 1
    6f68:	8c 91       	ld	r24, X
    6f6a:	11 97       	sbiw	r26, 0x01	; 1
    6f6c:	f4 01       	movw	r30, r8
    6f6e:	80 83       	st	Z, r24
				requestCmd[1] = *(pos + 2);
    6f70:	12 96       	adiw	r26, 0x02	; 2
    6f72:	8c 91       	ld	r24, X
    6f74:	81 83       	std	Z+1, r24	; 0x01

				if(strcmp(requestCmd, "IF") == 0)
    6f76:	67 e3       	ldi	r22, 0x37	; 55
    6f78:	71 e0       	ldi	r23, 0x01	; 1
    6f7a:	c4 01       	movw	r24, r8
    6f7c:	27 d3       	rcall	.+1614   	; 0x75cc <strcmp>
    6f7e:	89 2b       	or	r24, r25
    6f80:	99 f5       	brne	.+102    	; 0x6fe8 <main+0x48e>
				{
					crc[0] = *(pos + 3);			// Parse incoming crc
    6f82:	ef e2       	ldi	r30, 0x2F	; 47
    6f84:	f5 e0       	ldi	r31, 0x05	; 5
    6f86:	d6 01       	movw	r26, r12
    6f88:	13 96       	adiw	r26, 0x03	; 3
    6f8a:	8c 91       	ld	r24, X
    6f8c:	13 97       	sbiw	r26, 0x03	; 3
    6f8e:	80 83       	st	Z, r24
					crc[1] = *(pos + 4);
    6f90:	14 96       	adiw	r26, 0x04	; 4
    6f92:	8c 91       	ld	r24, X
    6f94:	14 97       	sbiw	r26, 0x04	; 4
    6f96:	81 83       	std	Z+1, r24	; 0x01
					crc[2] = *(pos + 5);
    6f98:	15 96       	adiw	r26, 0x05	; 5
    6f9a:	8c 91       	ld	r24, X
    6f9c:	15 97       	sbiw	r26, 0x05	; 5
    6f9e:	82 83       	std	Z+2, r24	; 0x02
					crc[3] = *(pos + 6);
    6fa0:	16 96       	adiw	r26, 0x06	; 6
    6fa2:	8c 91       	ld	r24, X
    6fa4:	83 83       	std	Z+3, r24	; 0x03

					itoa(GenCrc16(rx_string, (int)strnlen(rx_string, rx_size)-5), inCrC_string, 16);
    6fa6:	6e e1       	ldi	r22, 0x1E	; 30
    6fa8:	70 e0       	ldi	r23, 0x00	; 0
    6faa:	83 2d       	mov	r24, r3
    6fac:	94 2d       	mov	r25, r4
    6fae:	17 d3       	rcall	.+1582   	; 0x75de <strnlen>
    6fb0:	bc 01       	movw	r22, r24
    6fb2:	65 50       	subi	r22, 0x05	; 5
    6fb4:	71 09       	sbc	r23, r1
    6fb6:	83 2d       	mov	r24, r3
    6fb8:	94 2d       	mov	r25, r4
    6fba:	0e 94 99 00 	call	0x132	; 0x132 <GenCrc16>
    6fbe:	40 e1       	ldi	r20, 0x10	; 16
    6fc0:	62 2d       	mov	r22, r2
    6fc2:	7f a9       	ldd	r23, Y+55	; 0x37
    6fc4:	21 d3       	rcall	.+1602   	; 0x7608 <__itoa_ncheck>
					if(CrcCompare(crc, inCrC_string) == true)
    6fc6:	62 2d       	mov	r22, r2
    6fc8:	7f a9       	ldd	r23, Y+55	; 0x37
    6fca:	8f e2       	ldi	r24, 0x2F	; 47
    6fcc:	95 e0       	ldi	r25, 0x05	; 5
    6fce:	0e 94 c8 00 	call	0x190	; 0x190 <CrcCompare>
    6fd2:	88 23       	and	r24, r24
    6fd4:	29 f0       	breq	.+10     	; 0x6fe0 <main+0x486>
					{
						printStatus(s_string);	
    6fd6:	ce 01       	movw	r24, r28
    6fd8:	49 96       	adiw	r24, 0x19	; 25
    6fda:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
    6fde:	04 c0       	rjmp	.+8      	; 0x6fe8 <main+0x48e>
					}
					else
					{
						printStatus("CRC error");
    6fe0:	8a e3       	ldi	r24, 0x3A	; 58
    6fe2:	91 e0       	ldi	r25, 0x01	; 1
    6fe4:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
						//printStatus(rx_string);
					}
				}
					
				if(strcmp(requestCmd, "VR") == 0)
    6fe8:	64 e4       	ldi	r22, 0x44	; 68
    6fea:	71 e0       	ldi	r23, 0x01	; 1
    6fec:	c4 01       	movw	r24, r8
    6fee:	ee d2       	rcall	.+1500   	; 0x75cc <strcmp>
    6ff0:	89 2b       	or	r24, r25
    6ff2:	09 f0       	breq	.+2      	; 0x6ff6 <main+0x49c>
    6ff4:	3c c0       	rjmp	.+120    	; 0x706e <main+0x514>
				{
					requestID[0] = *(pos + 3);		// Parse request ID
    6ff6:	f6 01       	movw	r30, r12
    6ff8:	83 81       	ldd	r24, Z+3	; 0x03
    6ffa:	8d 8b       	std	Y+21, r24	; 0x15
					requestID[1] = *(pos + 4);
    6ffc:	84 81       	ldd	r24, Z+4	; 0x04
    6ffe:	8e 8b       	std	Y+22, r24	; 0x16
					requestID[2] = *(pos + 5);
    7000:	85 81       	ldd	r24, Z+5	; 0x05
    7002:	8f 8b       	std	Y+23, r24	; 0x17
					crc[0] = *(pos + 6);			// Parse incoming crc
    7004:	ef e2       	ldi	r30, 0x2F	; 47
    7006:	f5 e0       	ldi	r31, 0x05	; 5
    7008:	d6 01       	movw	r26, r12
    700a:	16 96       	adiw	r26, 0x06	; 6
    700c:	8c 91       	ld	r24, X
    700e:	16 97       	sbiw	r26, 0x06	; 6
    7010:	80 83       	st	Z, r24
					crc[1] = *(pos + 7);
    7012:	17 96       	adiw	r26, 0x07	; 7
    7014:	8c 91       	ld	r24, X
    7016:	17 97       	sbiw	r26, 0x07	; 7
    7018:	81 83       	std	Z+1, r24	; 0x01
					crc[2] = *(pos + 8);
    701a:	18 96       	adiw	r26, 0x08	; 8
    701c:	8c 91       	ld	r24, X
    701e:	18 97       	sbiw	r26, 0x08	; 8
    7020:	82 83       	std	Z+2, r24	; 0x02
					crc[3] = *(pos + 9);
    7022:	19 96       	adiw	r26, 0x09	; 9
    7024:	8c 91       	ld	r24, X
    7026:	83 83       	std	Z+3, r24	; 0x03
					
					itoa(GenCrc16(rx_string, (int)strnlen(rx_string, rx_size)-5), inCrC_string, 16);
    7028:	6e e1       	ldi	r22, 0x1E	; 30
    702a:	70 e0       	ldi	r23, 0x00	; 0
    702c:	83 2d       	mov	r24, r3
    702e:	94 2d       	mov	r25, r4
    7030:	d6 d2       	rcall	.+1452   	; 0x75de <strnlen>
    7032:	bc 01       	movw	r22, r24
    7034:	65 50       	subi	r22, 0x05	; 5
    7036:	71 09       	sbc	r23, r1
    7038:	83 2d       	mov	r24, r3
    703a:	94 2d       	mov	r25, r4
    703c:	0e 94 99 00 	call	0x132	; 0x132 <GenCrc16>
    7040:	40 e1       	ldi	r20, 0x10	; 16
    7042:	62 2d       	mov	r22, r2
    7044:	7f a9       	ldd	r23, Y+55	; 0x37
    7046:	e0 d2       	rcall	.+1472   	; 0x7608 <__itoa_ncheck>
					if(CrcCompare(crc, inCrC_string) == true)
    7048:	62 2d       	mov	r22, r2
    704a:	7f a9       	ldd	r23, Y+55	; 0x37
    704c:	8f e2       	ldi	r24, 0x2F	; 47
    704e:	95 e0       	ldi	r25, 0x05	; 5
    7050:	0e 94 c8 00 	call	0x190	; 0x190 <CrcCompare>
    7054:	88 23       	and	r24, r24
    7056:	39 f0       	breq	.+14     	; 0x7066 <main+0x50c>
					{					
						var = atol(requestID);
    7058:	ce 01       	movw	r24, r28
    705a:	45 96       	adiw	r24, 0x15	; 21
    705c:	7b d2       	rcall	.+1270   	; 0x7554 <atol>
						SendParameter(var);
    705e:	cb 01       	movw	r24, r22
    7060:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <SendParameter>
    7064:	04 c0       	rjmp	.+8      	; 0x706e <main+0x514>
					}
					else
					{
						printStatus("CRC error");
    7066:	8a e3       	ldi	r24, 0x3A	; 58
    7068:	91 e0       	ldi	r25, 0x01	; 1
    706a:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
					}
				}
			}	
			
			pos = NULL;
			pos = strchr(rx_string, '&');
    706e:	66 e2       	ldi	r22, 0x26	; 38
    7070:	70 e0       	ldi	r23, 0x00	; 0
    7072:	83 2d       	mov	r24, r3
    7074:	94 2d       	mov	r25, r4
    7076:	9f d2       	rcall	.+1342   	; 0x75b6 <strchr>
    7078:	fc 01       	movw	r30, r24
			if(pos != NULL)
    707a:	89 2b       	or	r24, r25
    707c:	09 f4       	brne	.+2      	; 0x7080 <main+0x526>
    707e:	31 cf       	rjmp	.-414    	; 0x6ee2 <main+0x388>
			{
				setCmd[0] = *(pos + 1);					// Parse set command
    7080:	ac e2       	ldi	r26, 0x2C	; 44
    7082:	b5 e0       	ldi	r27, 0x05	; 5
    7084:	81 81       	ldd	r24, Z+1	; 0x01
    7086:	8c 93       	st	X, r24
				setCmd[1] = *(pos + 2);
    7088:	82 81       	ldd	r24, Z+2	; 0x02
    708a:	11 96       	adiw	r26, 0x01	; 1
    708c:	8c 93       	st	X, r24
    708e:	11 97       	sbiw	r26, 0x01	; 1
				requestID[0] = *(pos + 3);				// Parse request ID
    7090:	83 81       	ldd	r24, Z+3	; 0x03
    7092:	8d 8b       	std	Y+21, r24	; 0x15
				requestID[1] = *(pos + 4);
    7094:	84 81       	ldd	r24, Z+4	; 0x04
    7096:	8e 8b       	std	Y+22, r24	; 0x16
				requestID[2] = *(pos + 5);				
    7098:	85 81       	ldd	r24, Z+5	; 0x05
    709a:	8f 8b       	std	Y+23, r24	; 0x17
				
				if(strcmp(setCmd, "VS") == 0)
    709c:	67 e4       	ldi	r22, 0x47	; 71
    709e:	71 e0       	ldi	r23, 0x01	; 1
    70a0:	cd 01       	movw	r24, r26
    70a2:	94 d2       	rcall	.+1320   	; 0x75cc <strcmp>
    70a4:	89 2b       	or	r24, r25
    70a6:	09 f0       	breq	.+2      	; 0x70aa <main+0x550>
    70a8:	15 cf       	rjmp	.-470    	; 0x6ed4 <main+0x37a>
				{
					pos = strchr(rx_string, 0x0D);		// Find end of message
    70aa:	6d e0       	ldi	r22, 0x0D	; 13
    70ac:	70 e0       	ldi	r23, 0x00	; 0
    70ae:	c5 01       	movw	r24, r10
    70b0:	82 d2       	rcall	.+1284   	; 0x75b6 <strchr>
					crc[0] = *(pos - 4);				// Parse incoming crc
    70b2:	ef e2       	ldi	r30, 0x2F	; 47
    70b4:	f5 e0       	ldi	r31, 0x05	; 5
    70b6:	dc 01       	movw	r26, r24
    70b8:	14 97       	sbiw	r26, 0x04	; 4
    70ba:	2c 91       	ld	r18, X
    70bc:	20 83       	st	Z, r18
					crc[1] = *(pos - 3);
    70be:	11 96       	adiw	r26, 0x01	; 1
    70c0:	2c 91       	ld	r18, X
    70c2:	21 83       	std	Z+1, r18	; 0x01
					crc[2] = *(pos - 2);
    70c4:	11 96       	adiw	r26, 0x01	; 1
    70c6:	2c 91       	ld	r18, X
    70c8:	22 83       	std	Z+2, r18	; 0x02
					crc[3] = *(pos - 1);
    70ca:	11 96       	adiw	r26, 0x01	; 1
    70cc:	8c 91       	ld	r24, X
    70ce:	83 83       	std	Z+3, r24	; 0x03
					
					itoa(GenCrc16(rx_string, (int)strnlen(rx_string, rx_size)-5), inCrC_string, 16);
    70d0:	6e e1       	ldi	r22, 0x1E	; 30
    70d2:	70 e0       	ldi	r23, 0x00	; 0
    70d4:	c5 01       	movw	r24, r10
    70d6:	83 d2       	rcall	.+1286   	; 0x75de <strnlen>
    70d8:	bc 01       	movw	r22, r24
    70da:	65 50       	subi	r22, 0x05	; 5
    70dc:	71 09       	sbc	r23, r1
    70de:	c5 01       	movw	r24, r10
    70e0:	0e 94 99 00 	call	0x132	; 0x132 <GenCrc16>
    70e4:	40 e1       	ldi	r20, 0x10	; 16
    70e6:	b3 01       	movw	r22, r6
    70e8:	8f d2       	rcall	.+1310   	; 0x7608 <__itoa_ncheck>
					if(CrcCompare(crc, inCrC_string) == true)
    70ea:	b3 01       	movw	r22, r6
    70ec:	8f e2       	ldi	r24, 0x2F	; 47
    70ee:	95 e0       	ldi	r25, 0x05	; 5
    70f0:	0e 94 c8 00 	call	0x190	; 0x190 <CrcCompare>
    70f4:	88 23       	and	r24, r24
    70f6:	39 f0       	breq	.+14     	; 0x7106 <main+0x5ac>
					{
						var = atol(requestID);
						SetParameter(atol(requestID));
    70f8:	ce 01       	movw	r24, r28
    70fa:	45 96       	adiw	r24, 0x15	; 21
    70fc:	2b d2       	rcall	.+1110   	; 0x7554 <atol>
    70fe:	cb 01       	movw	r24, r22
    7100:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <SetParameter>
    7104:	e5 ce       	rjmp	.-566    	; 0x6ed0 <main+0x376>
					}
					else
					{
						printStatus("CRC error");
    7106:	8a e3       	ldi	r24, 0x3A	; 58
    7108:	91 e0       	ldi	r25, 0x01	; 1
    710a:	0e 94 25 01 	call	0x24a	; 0x24a <printStatus>
    710e:	e0 ce       	rjmp	.-576    	; 0x6ed0 <main+0x376>

00007110 <__subsf3>:
    7110:	50 58       	subi	r21, 0x80	; 128

00007112 <__addsf3>:
    7112:	bb 27       	eor	r27, r27
    7114:	aa 27       	eor	r26, r26
    7116:	0e d0       	rcall	.+28     	; 0x7134 <__addsf3x>
    7118:	0d c1       	rjmp	.+538    	; 0x7334 <__fp_round>
    711a:	fe d0       	rcall	.+508    	; 0x7318 <__fp_pscA>
    711c:	30 f0       	brcs	.+12     	; 0x712a <__addsf3+0x18>
    711e:	03 d1       	rcall	.+518    	; 0x7326 <__fp_pscB>
    7120:	20 f0       	brcs	.+8      	; 0x712a <__addsf3+0x18>
    7122:	31 f4       	brne	.+12     	; 0x7130 <__addsf3+0x1e>
    7124:	9f 3f       	cpi	r25, 0xFF	; 255
    7126:	11 f4       	brne	.+4      	; 0x712c <__addsf3+0x1a>
    7128:	1e f4       	brtc	.+6      	; 0x7130 <__addsf3+0x1e>
    712a:	f3 c0       	rjmp	.+486    	; 0x7312 <__fp_nan>
    712c:	0e f4       	brtc	.+2      	; 0x7130 <__addsf3+0x1e>
    712e:	e0 95       	com	r30
    7130:	e7 fb       	bst	r30, 7
    7132:	e9 c0       	rjmp	.+466    	; 0x7306 <__fp_inf>

00007134 <__addsf3x>:
    7134:	e9 2f       	mov	r30, r25
    7136:	0f d1       	rcall	.+542    	; 0x7356 <__fp_split3>
    7138:	80 f3       	brcs	.-32     	; 0x711a <__addsf3+0x8>
    713a:	ba 17       	cp	r27, r26
    713c:	62 07       	cpc	r22, r18
    713e:	73 07       	cpc	r23, r19
    7140:	84 07       	cpc	r24, r20
    7142:	95 07       	cpc	r25, r21
    7144:	18 f0       	brcs	.+6      	; 0x714c <__addsf3x+0x18>
    7146:	71 f4       	brne	.+28     	; 0x7164 <__addsf3x+0x30>
    7148:	9e f5       	brtc	.+102    	; 0x71b0 <__addsf3x+0x7c>
    714a:	27 c1       	rjmp	.+590    	; 0x739a <__fp_zero>
    714c:	0e f4       	brtc	.+2      	; 0x7150 <__addsf3x+0x1c>
    714e:	e0 95       	com	r30
    7150:	0b 2e       	mov	r0, r27
    7152:	ba 2f       	mov	r27, r26
    7154:	a0 2d       	mov	r26, r0
    7156:	0b 01       	movw	r0, r22
    7158:	b9 01       	movw	r22, r18
    715a:	90 01       	movw	r18, r0
    715c:	0c 01       	movw	r0, r24
    715e:	ca 01       	movw	r24, r20
    7160:	a0 01       	movw	r20, r0
    7162:	11 24       	eor	r1, r1
    7164:	ff 27       	eor	r31, r31
    7166:	59 1b       	sub	r21, r25
    7168:	99 f0       	breq	.+38     	; 0x7190 <__addsf3x+0x5c>
    716a:	59 3f       	cpi	r21, 0xF9	; 249
    716c:	50 f4       	brcc	.+20     	; 0x7182 <__addsf3x+0x4e>
    716e:	50 3e       	cpi	r21, 0xE0	; 224
    7170:	68 f1       	brcs	.+90     	; 0x71cc <__addsf3x+0x98>
    7172:	1a 16       	cp	r1, r26
    7174:	f0 40       	sbci	r31, 0x00	; 0
    7176:	a2 2f       	mov	r26, r18
    7178:	23 2f       	mov	r18, r19
    717a:	34 2f       	mov	r19, r20
    717c:	44 27       	eor	r20, r20
    717e:	58 5f       	subi	r21, 0xF8	; 248
    7180:	f3 cf       	rjmp	.-26     	; 0x7168 <__addsf3x+0x34>
    7182:	46 95       	lsr	r20
    7184:	37 95       	ror	r19
    7186:	27 95       	ror	r18
    7188:	a7 95       	ror	r26
    718a:	f0 40       	sbci	r31, 0x00	; 0
    718c:	53 95       	inc	r21
    718e:	c9 f7       	brne	.-14     	; 0x7182 <__addsf3x+0x4e>
    7190:	7e f4       	brtc	.+30     	; 0x71b0 <__addsf3x+0x7c>
    7192:	1f 16       	cp	r1, r31
    7194:	ba 0b       	sbc	r27, r26
    7196:	62 0b       	sbc	r22, r18
    7198:	73 0b       	sbc	r23, r19
    719a:	84 0b       	sbc	r24, r20
    719c:	ba f0       	brmi	.+46     	; 0x71cc <__addsf3x+0x98>
    719e:	91 50       	subi	r25, 0x01	; 1
    71a0:	a1 f0       	breq	.+40     	; 0x71ca <__addsf3x+0x96>
    71a2:	ff 0f       	add	r31, r31
    71a4:	bb 1f       	adc	r27, r27
    71a6:	66 1f       	adc	r22, r22
    71a8:	77 1f       	adc	r23, r23
    71aa:	88 1f       	adc	r24, r24
    71ac:	c2 f7       	brpl	.-16     	; 0x719e <__addsf3x+0x6a>
    71ae:	0e c0       	rjmp	.+28     	; 0x71cc <__addsf3x+0x98>
    71b0:	ba 0f       	add	r27, r26
    71b2:	62 1f       	adc	r22, r18
    71b4:	73 1f       	adc	r23, r19
    71b6:	84 1f       	adc	r24, r20
    71b8:	48 f4       	brcc	.+18     	; 0x71cc <__addsf3x+0x98>
    71ba:	87 95       	ror	r24
    71bc:	77 95       	ror	r23
    71be:	67 95       	ror	r22
    71c0:	b7 95       	ror	r27
    71c2:	f7 95       	ror	r31
    71c4:	9e 3f       	cpi	r25, 0xFE	; 254
    71c6:	08 f0       	brcs	.+2      	; 0x71ca <__addsf3x+0x96>
    71c8:	b3 cf       	rjmp	.-154    	; 0x7130 <__addsf3+0x1e>
    71ca:	93 95       	inc	r25
    71cc:	88 0f       	add	r24, r24
    71ce:	08 f0       	brcs	.+2      	; 0x71d2 <__addsf3x+0x9e>
    71d0:	99 27       	eor	r25, r25
    71d2:	ee 0f       	add	r30, r30
    71d4:	97 95       	ror	r25
    71d6:	87 95       	ror	r24
    71d8:	08 95       	ret

000071da <__cmpsf2>:
    71da:	71 d0       	rcall	.+226    	; 0x72be <__fp_cmp>
    71dc:	08 f4       	brcc	.+2      	; 0x71e0 <__cmpsf2+0x6>
    71de:	81 e0       	ldi	r24, 0x01	; 1
    71e0:	08 95       	ret

000071e2 <__fixsfsi>:
    71e2:	04 d0       	rcall	.+8      	; 0x71ec <__fixunssfsi>
    71e4:	68 94       	set
    71e6:	b1 11       	cpse	r27, r1
    71e8:	d9 c0       	rjmp	.+434    	; 0x739c <__fp_szero>
    71ea:	08 95       	ret

000071ec <__fixunssfsi>:
    71ec:	bc d0       	rcall	.+376    	; 0x7366 <__fp_splitA>
    71ee:	88 f0       	brcs	.+34     	; 0x7212 <__fixunssfsi+0x26>
    71f0:	9f 57       	subi	r25, 0x7F	; 127
    71f2:	90 f0       	brcs	.+36     	; 0x7218 <__fixunssfsi+0x2c>
    71f4:	b9 2f       	mov	r27, r25
    71f6:	99 27       	eor	r25, r25
    71f8:	b7 51       	subi	r27, 0x17	; 23
    71fa:	a0 f0       	brcs	.+40     	; 0x7224 <__fixunssfsi+0x38>
    71fc:	d1 f0       	breq	.+52     	; 0x7232 <__fixunssfsi+0x46>
    71fe:	66 0f       	add	r22, r22
    7200:	77 1f       	adc	r23, r23
    7202:	88 1f       	adc	r24, r24
    7204:	99 1f       	adc	r25, r25
    7206:	1a f0       	brmi	.+6      	; 0x720e <__fixunssfsi+0x22>
    7208:	ba 95       	dec	r27
    720a:	c9 f7       	brne	.-14     	; 0x71fe <__fixunssfsi+0x12>
    720c:	12 c0       	rjmp	.+36     	; 0x7232 <__fixunssfsi+0x46>
    720e:	b1 30       	cpi	r27, 0x01	; 1
    7210:	81 f0       	breq	.+32     	; 0x7232 <__fixunssfsi+0x46>
    7212:	c3 d0       	rcall	.+390    	; 0x739a <__fp_zero>
    7214:	b1 e0       	ldi	r27, 0x01	; 1
    7216:	08 95       	ret
    7218:	c0 c0       	rjmp	.+384    	; 0x739a <__fp_zero>
    721a:	67 2f       	mov	r22, r23
    721c:	78 2f       	mov	r23, r24
    721e:	88 27       	eor	r24, r24
    7220:	b8 5f       	subi	r27, 0xF8	; 248
    7222:	39 f0       	breq	.+14     	; 0x7232 <__fixunssfsi+0x46>
    7224:	b9 3f       	cpi	r27, 0xF9	; 249
    7226:	cc f3       	brlt	.-14     	; 0x721a <__fixunssfsi+0x2e>
    7228:	86 95       	lsr	r24
    722a:	77 95       	ror	r23
    722c:	67 95       	ror	r22
    722e:	b3 95       	inc	r27
    7230:	d9 f7       	brne	.-10     	; 0x7228 <__fixunssfsi+0x3c>
    7232:	3e f4       	brtc	.+14     	; 0x7242 <__fixunssfsi+0x56>
    7234:	90 95       	com	r25
    7236:	80 95       	com	r24
    7238:	70 95       	com	r23
    723a:	61 95       	neg	r22
    723c:	7f 4f       	sbci	r23, 0xFF	; 255
    723e:	8f 4f       	sbci	r24, 0xFF	; 255
    7240:	9f 4f       	sbci	r25, 0xFF	; 255
    7242:	08 95       	ret

00007244 <__floatunsisf>:
    7244:	e8 94       	clt
    7246:	09 c0       	rjmp	.+18     	; 0x725a <__floatsisf+0x12>

00007248 <__floatsisf>:
    7248:	97 fb       	bst	r25, 7
    724a:	3e f4       	brtc	.+14     	; 0x725a <__floatsisf+0x12>
    724c:	90 95       	com	r25
    724e:	80 95       	com	r24
    7250:	70 95       	com	r23
    7252:	61 95       	neg	r22
    7254:	7f 4f       	sbci	r23, 0xFF	; 255
    7256:	8f 4f       	sbci	r24, 0xFF	; 255
    7258:	9f 4f       	sbci	r25, 0xFF	; 255
    725a:	99 23       	and	r25, r25
    725c:	a9 f0       	breq	.+42     	; 0x7288 <__floatsisf+0x40>
    725e:	f9 2f       	mov	r31, r25
    7260:	96 e9       	ldi	r25, 0x96	; 150
    7262:	bb 27       	eor	r27, r27
    7264:	93 95       	inc	r25
    7266:	f6 95       	lsr	r31
    7268:	87 95       	ror	r24
    726a:	77 95       	ror	r23
    726c:	67 95       	ror	r22
    726e:	b7 95       	ror	r27
    7270:	f1 11       	cpse	r31, r1
    7272:	f8 cf       	rjmp	.-16     	; 0x7264 <__floatsisf+0x1c>
    7274:	fa f4       	brpl	.+62     	; 0x72b4 <__floatsisf+0x6c>
    7276:	bb 0f       	add	r27, r27
    7278:	11 f4       	brne	.+4      	; 0x727e <__floatsisf+0x36>
    727a:	60 ff       	sbrs	r22, 0
    727c:	1b c0       	rjmp	.+54     	; 0x72b4 <__floatsisf+0x6c>
    727e:	6f 5f       	subi	r22, 0xFF	; 255
    7280:	7f 4f       	sbci	r23, 0xFF	; 255
    7282:	8f 4f       	sbci	r24, 0xFF	; 255
    7284:	9f 4f       	sbci	r25, 0xFF	; 255
    7286:	16 c0       	rjmp	.+44     	; 0x72b4 <__floatsisf+0x6c>
    7288:	88 23       	and	r24, r24
    728a:	11 f0       	breq	.+4      	; 0x7290 <__floatsisf+0x48>
    728c:	96 e9       	ldi	r25, 0x96	; 150
    728e:	11 c0       	rjmp	.+34     	; 0x72b2 <__floatsisf+0x6a>
    7290:	77 23       	and	r23, r23
    7292:	21 f0       	breq	.+8      	; 0x729c <__floatsisf+0x54>
    7294:	9e e8       	ldi	r25, 0x8E	; 142
    7296:	87 2f       	mov	r24, r23
    7298:	76 2f       	mov	r23, r22
    729a:	05 c0       	rjmp	.+10     	; 0x72a6 <__floatsisf+0x5e>
    729c:	66 23       	and	r22, r22
    729e:	71 f0       	breq	.+28     	; 0x72bc <__floatsisf+0x74>
    72a0:	96 e8       	ldi	r25, 0x86	; 134
    72a2:	86 2f       	mov	r24, r22
    72a4:	70 e0       	ldi	r23, 0x00	; 0
    72a6:	60 e0       	ldi	r22, 0x00	; 0
    72a8:	2a f0       	brmi	.+10     	; 0x72b4 <__floatsisf+0x6c>
    72aa:	9a 95       	dec	r25
    72ac:	66 0f       	add	r22, r22
    72ae:	77 1f       	adc	r23, r23
    72b0:	88 1f       	adc	r24, r24
    72b2:	da f7       	brpl	.-10     	; 0x72aa <__floatsisf+0x62>
    72b4:	88 0f       	add	r24, r24
    72b6:	96 95       	lsr	r25
    72b8:	87 95       	ror	r24
    72ba:	97 f9       	bld	r25, 7
    72bc:	08 95       	ret

000072be <__fp_cmp>:
    72be:	99 0f       	add	r25, r25
    72c0:	00 08       	sbc	r0, r0
    72c2:	55 0f       	add	r21, r21
    72c4:	aa 0b       	sbc	r26, r26
    72c6:	e0 e8       	ldi	r30, 0x80	; 128
    72c8:	fe ef       	ldi	r31, 0xFE	; 254
    72ca:	16 16       	cp	r1, r22
    72cc:	17 06       	cpc	r1, r23
    72ce:	e8 07       	cpc	r30, r24
    72d0:	f9 07       	cpc	r31, r25
    72d2:	c0 f0       	brcs	.+48     	; 0x7304 <__fp_cmp+0x46>
    72d4:	12 16       	cp	r1, r18
    72d6:	13 06       	cpc	r1, r19
    72d8:	e4 07       	cpc	r30, r20
    72da:	f5 07       	cpc	r31, r21
    72dc:	98 f0       	brcs	.+38     	; 0x7304 <__fp_cmp+0x46>
    72de:	62 1b       	sub	r22, r18
    72e0:	73 0b       	sbc	r23, r19
    72e2:	84 0b       	sbc	r24, r20
    72e4:	95 0b       	sbc	r25, r21
    72e6:	39 f4       	brne	.+14     	; 0x72f6 <__fp_cmp+0x38>
    72e8:	0a 26       	eor	r0, r26
    72ea:	61 f0       	breq	.+24     	; 0x7304 <__fp_cmp+0x46>
    72ec:	23 2b       	or	r18, r19
    72ee:	24 2b       	or	r18, r20
    72f0:	25 2b       	or	r18, r21
    72f2:	21 f4       	brne	.+8      	; 0x72fc <__fp_cmp+0x3e>
    72f4:	08 95       	ret
    72f6:	0a 26       	eor	r0, r26
    72f8:	09 f4       	brne	.+2      	; 0x72fc <__fp_cmp+0x3e>
    72fa:	a1 40       	sbci	r26, 0x01	; 1
    72fc:	a6 95       	lsr	r26
    72fe:	8f ef       	ldi	r24, 0xFF	; 255
    7300:	81 1d       	adc	r24, r1
    7302:	81 1d       	adc	r24, r1
    7304:	08 95       	ret

00007306 <__fp_inf>:
    7306:	97 f9       	bld	r25, 7
    7308:	9f 67       	ori	r25, 0x7F	; 127
    730a:	80 e8       	ldi	r24, 0x80	; 128
    730c:	70 e0       	ldi	r23, 0x00	; 0
    730e:	60 e0       	ldi	r22, 0x00	; 0
    7310:	08 95       	ret

00007312 <__fp_nan>:
    7312:	9f ef       	ldi	r25, 0xFF	; 255
    7314:	80 ec       	ldi	r24, 0xC0	; 192
    7316:	08 95       	ret

00007318 <__fp_pscA>:
    7318:	00 24       	eor	r0, r0
    731a:	0a 94       	dec	r0
    731c:	16 16       	cp	r1, r22
    731e:	17 06       	cpc	r1, r23
    7320:	18 06       	cpc	r1, r24
    7322:	09 06       	cpc	r0, r25
    7324:	08 95       	ret

00007326 <__fp_pscB>:
    7326:	00 24       	eor	r0, r0
    7328:	0a 94       	dec	r0
    732a:	12 16       	cp	r1, r18
    732c:	13 06       	cpc	r1, r19
    732e:	14 06       	cpc	r1, r20
    7330:	05 06       	cpc	r0, r21
    7332:	08 95       	ret

00007334 <__fp_round>:
    7334:	09 2e       	mov	r0, r25
    7336:	03 94       	inc	r0
    7338:	00 0c       	add	r0, r0
    733a:	11 f4       	brne	.+4      	; 0x7340 <__fp_round+0xc>
    733c:	88 23       	and	r24, r24
    733e:	52 f0       	brmi	.+20     	; 0x7354 <__fp_round+0x20>
    7340:	bb 0f       	add	r27, r27
    7342:	40 f4       	brcc	.+16     	; 0x7354 <__fp_round+0x20>
    7344:	bf 2b       	or	r27, r31
    7346:	11 f4       	brne	.+4      	; 0x734c <__fp_round+0x18>
    7348:	60 ff       	sbrs	r22, 0
    734a:	04 c0       	rjmp	.+8      	; 0x7354 <__fp_round+0x20>
    734c:	6f 5f       	subi	r22, 0xFF	; 255
    734e:	7f 4f       	sbci	r23, 0xFF	; 255
    7350:	8f 4f       	sbci	r24, 0xFF	; 255
    7352:	9f 4f       	sbci	r25, 0xFF	; 255
    7354:	08 95       	ret

00007356 <__fp_split3>:
    7356:	57 fd       	sbrc	r21, 7
    7358:	90 58       	subi	r25, 0x80	; 128
    735a:	44 0f       	add	r20, r20
    735c:	55 1f       	adc	r21, r21
    735e:	59 f0       	breq	.+22     	; 0x7376 <__fp_splitA+0x10>
    7360:	5f 3f       	cpi	r21, 0xFF	; 255
    7362:	71 f0       	breq	.+28     	; 0x7380 <__fp_splitA+0x1a>
    7364:	47 95       	ror	r20

00007366 <__fp_splitA>:
    7366:	88 0f       	add	r24, r24
    7368:	97 fb       	bst	r25, 7
    736a:	99 1f       	adc	r25, r25
    736c:	61 f0       	breq	.+24     	; 0x7386 <__fp_splitA+0x20>
    736e:	9f 3f       	cpi	r25, 0xFF	; 255
    7370:	79 f0       	breq	.+30     	; 0x7390 <__fp_splitA+0x2a>
    7372:	87 95       	ror	r24
    7374:	08 95       	ret
    7376:	12 16       	cp	r1, r18
    7378:	13 06       	cpc	r1, r19
    737a:	14 06       	cpc	r1, r20
    737c:	55 1f       	adc	r21, r21
    737e:	f2 cf       	rjmp	.-28     	; 0x7364 <__fp_split3+0xe>
    7380:	46 95       	lsr	r20
    7382:	f1 df       	rcall	.-30     	; 0x7366 <__fp_splitA>
    7384:	08 c0       	rjmp	.+16     	; 0x7396 <__fp_splitA+0x30>
    7386:	16 16       	cp	r1, r22
    7388:	17 06       	cpc	r1, r23
    738a:	18 06       	cpc	r1, r24
    738c:	99 1f       	adc	r25, r25
    738e:	f1 cf       	rjmp	.-30     	; 0x7372 <__fp_splitA+0xc>
    7390:	86 95       	lsr	r24
    7392:	71 05       	cpc	r23, r1
    7394:	61 05       	cpc	r22, r1
    7396:	08 94       	sec
    7398:	08 95       	ret

0000739a <__fp_zero>:
    739a:	e8 94       	clt

0000739c <__fp_szero>:
    739c:	bb 27       	eor	r27, r27
    739e:	66 27       	eor	r22, r22
    73a0:	77 27       	eor	r23, r23
    73a2:	cb 01       	movw	r24, r22
    73a4:	97 f9       	bld	r25, 7
    73a6:	08 95       	ret

000073a8 <__gesf2>:
    73a8:	8a df       	rcall	.-236    	; 0x72be <__fp_cmp>
    73aa:	08 f4       	brcc	.+2      	; 0x73ae <__gesf2+0x6>
    73ac:	8f ef       	ldi	r24, 0xFF	; 255
    73ae:	08 95       	ret

000073b0 <__mulsf3>:
    73b0:	0b d0       	rcall	.+22     	; 0x73c8 <__mulsf3x>
    73b2:	c0 cf       	rjmp	.-128    	; 0x7334 <__fp_round>
    73b4:	b1 df       	rcall	.-158    	; 0x7318 <__fp_pscA>
    73b6:	28 f0       	brcs	.+10     	; 0x73c2 <__mulsf3+0x12>
    73b8:	b6 df       	rcall	.-148    	; 0x7326 <__fp_pscB>
    73ba:	18 f0       	brcs	.+6      	; 0x73c2 <__mulsf3+0x12>
    73bc:	95 23       	and	r25, r21
    73be:	09 f0       	breq	.+2      	; 0x73c2 <__mulsf3+0x12>
    73c0:	a2 cf       	rjmp	.-188    	; 0x7306 <__fp_inf>
    73c2:	a7 cf       	rjmp	.-178    	; 0x7312 <__fp_nan>
    73c4:	11 24       	eor	r1, r1
    73c6:	ea cf       	rjmp	.-44     	; 0x739c <__fp_szero>

000073c8 <__mulsf3x>:
    73c8:	c6 df       	rcall	.-116    	; 0x7356 <__fp_split3>
    73ca:	a0 f3       	brcs	.-24     	; 0x73b4 <__mulsf3+0x4>

000073cc <__mulsf3_pse>:
    73cc:	95 9f       	mul	r25, r21
    73ce:	d1 f3       	breq	.-12     	; 0x73c4 <__mulsf3+0x14>
    73d0:	95 0f       	add	r25, r21
    73d2:	50 e0       	ldi	r21, 0x00	; 0
    73d4:	55 1f       	adc	r21, r21
    73d6:	62 9f       	mul	r22, r18
    73d8:	f0 01       	movw	r30, r0
    73da:	72 9f       	mul	r23, r18
    73dc:	bb 27       	eor	r27, r27
    73de:	f0 0d       	add	r31, r0
    73e0:	b1 1d       	adc	r27, r1
    73e2:	63 9f       	mul	r22, r19
    73e4:	aa 27       	eor	r26, r26
    73e6:	f0 0d       	add	r31, r0
    73e8:	b1 1d       	adc	r27, r1
    73ea:	aa 1f       	adc	r26, r26
    73ec:	64 9f       	mul	r22, r20
    73ee:	66 27       	eor	r22, r22
    73f0:	b0 0d       	add	r27, r0
    73f2:	a1 1d       	adc	r26, r1
    73f4:	66 1f       	adc	r22, r22
    73f6:	82 9f       	mul	r24, r18
    73f8:	22 27       	eor	r18, r18
    73fa:	b0 0d       	add	r27, r0
    73fc:	a1 1d       	adc	r26, r1
    73fe:	62 1f       	adc	r22, r18
    7400:	73 9f       	mul	r23, r19
    7402:	b0 0d       	add	r27, r0
    7404:	a1 1d       	adc	r26, r1
    7406:	62 1f       	adc	r22, r18
    7408:	83 9f       	mul	r24, r19
    740a:	a0 0d       	add	r26, r0
    740c:	61 1d       	adc	r22, r1
    740e:	22 1f       	adc	r18, r18
    7410:	74 9f       	mul	r23, r20
    7412:	33 27       	eor	r19, r19
    7414:	a0 0d       	add	r26, r0
    7416:	61 1d       	adc	r22, r1
    7418:	23 1f       	adc	r18, r19
    741a:	84 9f       	mul	r24, r20
    741c:	60 0d       	add	r22, r0
    741e:	21 1d       	adc	r18, r1
    7420:	82 2f       	mov	r24, r18
    7422:	76 2f       	mov	r23, r22
    7424:	6a 2f       	mov	r22, r26
    7426:	11 24       	eor	r1, r1
    7428:	9f 57       	subi	r25, 0x7F	; 127
    742a:	50 40       	sbci	r21, 0x00	; 0
    742c:	8a f0       	brmi	.+34     	; 0x7450 <__mulsf3_pse+0x84>
    742e:	e1 f0       	breq	.+56     	; 0x7468 <__mulsf3_pse+0x9c>
    7430:	88 23       	and	r24, r24
    7432:	4a f0       	brmi	.+18     	; 0x7446 <__mulsf3_pse+0x7a>
    7434:	ee 0f       	add	r30, r30
    7436:	ff 1f       	adc	r31, r31
    7438:	bb 1f       	adc	r27, r27
    743a:	66 1f       	adc	r22, r22
    743c:	77 1f       	adc	r23, r23
    743e:	88 1f       	adc	r24, r24
    7440:	91 50       	subi	r25, 0x01	; 1
    7442:	50 40       	sbci	r21, 0x00	; 0
    7444:	a9 f7       	brne	.-22     	; 0x7430 <__mulsf3_pse+0x64>
    7446:	9e 3f       	cpi	r25, 0xFE	; 254
    7448:	51 05       	cpc	r21, r1
    744a:	70 f0       	brcs	.+28     	; 0x7468 <__mulsf3_pse+0x9c>
    744c:	5c cf       	rjmp	.-328    	; 0x7306 <__fp_inf>
    744e:	a6 cf       	rjmp	.-180    	; 0x739c <__fp_szero>
    7450:	5f 3f       	cpi	r21, 0xFF	; 255
    7452:	ec f3       	brlt	.-6      	; 0x744e <__mulsf3_pse+0x82>
    7454:	98 3e       	cpi	r25, 0xE8	; 232
    7456:	dc f3       	brlt	.-10     	; 0x744e <__mulsf3_pse+0x82>
    7458:	86 95       	lsr	r24
    745a:	77 95       	ror	r23
    745c:	67 95       	ror	r22
    745e:	b7 95       	ror	r27
    7460:	f7 95       	ror	r31
    7462:	e7 95       	ror	r30
    7464:	9f 5f       	subi	r25, 0xFF	; 255
    7466:	c1 f7       	brne	.-16     	; 0x7458 <__mulsf3_pse+0x8c>
    7468:	fe 2b       	or	r31, r30
    746a:	88 0f       	add	r24, r24
    746c:	91 1d       	adc	r25, r1
    746e:	96 95       	lsr	r25
    7470:	87 95       	ror	r24
    7472:	97 f9       	bld	r25, 7
    7474:	08 95       	ret

00007476 <round>:
    7476:	77 df       	rcall	.-274    	; 0x7366 <__fp_splitA>
    7478:	e0 f0       	brcs	.+56     	; 0x74b2 <round+0x3c>
    747a:	9e 37       	cpi	r25, 0x7E	; 126
    747c:	d8 f0       	brcs	.+54     	; 0x74b4 <round+0x3e>
    747e:	96 39       	cpi	r25, 0x96	; 150
    7480:	b8 f4       	brcc	.+46     	; 0x74b0 <round+0x3a>
    7482:	9e 38       	cpi	r25, 0x8E	; 142
    7484:	48 f4       	brcc	.+18     	; 0x7498 <round+0x22>
    7486:	67 2f       	mov	r22, r23
    7488:	78 2f       	mov	r23, r24
    748a:	88 27       	eor	r24, r24
    748c:	98 5f       	subi	r25, 0xF8	; 248
    748e:	f9 cf       	rjmp	.-14     	; 0x7482 <round+0xc>
    7490:	86 95       	lsr	r24
    7492:	77 95       	ror	r23
    7494:	67 95       	ror	r22
    7496:	93 95       	inc	r25
    7498:	95 39       	cpi	r25, 0x95	; 149
    749a:	d0 f3       	brcs	.-12     	; 0x7490 <round+0x1a>
    749c:	b6 2f       	mov	r27, r22
    749e:	b1 70       	andi	r27, 0x01	; 1
    74a0:	6b 0f       	add	r22, r27
    74a2:	71 1d       	adc	r23, r1
    74a4:	81 1d       	adc	r24, r1
    74a6:	20 f4       	brcc	.+8      	; 0x74b0 <round+0x3a>
    74a8:	87 95       	ror	r24
    74aa:	77 95       	ror	r23
    74ac:	67 95       	ror	r22
    74ae:	93 95       	inc	r25
    74b0:	02 c0       	rjmp	.+4      	; 0x74b6 <__fp_mintl>
    74b2:	1c c0       	rjmp	.+56     	; 0x74ec <__fp_mpack>
    74b4:	73 cf       	rjmp	.-282    	; 0x739c <__fp_szero>

000074b6 <__fp_mintl>:
    74b6:	88 23       	and	r24, r24
    74b8:	71 f4       	brne	.+28     	; 0x74d6 <__fp_mintl+0x20>
    74ba:	77 23       	and	r23, r23
    74bc:	21 f0       	breq	.+8      	; 0x74c6 <__fp_mintl+0x10>
    74be:	98 50       	subi	r25, 0x08	; 8
    74c0:	87 2b       	or	r24, r23
    74c2:	76 2f       	mov	r23, r22
    74c4:	07 c0       	rjmp	.+14     	; 0x74d4 <__fp_mintl+0x1e>
    74c6:	66 23       	and	r22, r22
    74c8:	11 f4       	brne	.+4      	; 0x74ce <__fp_mintl+0x18>
    74ca:	99 27       	eor	r25, r25
    74cc:	0d c0       	rjmp	.+26     	; 0x74e8 <__fp_mintl+0x32>
    74ce:	90 51       	subi	r25, 0x10	; 16
    74d0:	86 2b       	or	r24, r22
    74d2:	70 e0       	ldi	r23, 0x00	; 0
    74d4:	60 e0       	ldi	r22, 0x00	; 0
    74d6:	2a f0       	brmi	.+10     	; 0x74e2 <__fp_mintl+0x2c>
    74d8:	9a 95       	dec	r25
    74da:	66 0f       	add	r22, r22
    74dc:	77 1f       	adc	r23, r23
    74de:	88 1f       	adc	r24, r24
    74e0:	da f7       	brpl	.-10     	; 0x74d8 <__fp_mintl+0x22>
    74e2:	88 0f       	add	r24, r24
    74e4:	96 95       	lsr	r25
    74e6:	87 95       	ror	r24
    74e8:	97 f9       	bld	r25, 7
    74ea:	08 95       	ret

000074ec <__fp_mpack>:
    74ec:	9f 3f       	cpi	r25, 0xFF	; 255
    74ee:	31 f0       	breq	.+12     	; 0x74fc <__fp_mpack_finite+0xc>

000074f0 <__fp_mpack_finite>:
    74f0:	91 50       	subi	r25, 0x01	; 1
    74f2:	20 f4       	brcc	.+8      	; 0x74fc <__fp_mpack_finite+0xc>
    74f4:	87 95       	ror	r24
    74f6:	77 95       	ror	r23
    74f8:	67 95       	ror	r22
    74fa:	b7 95       	ror	r27
    74fc:	88 0f       	add	r24, r24
    74fe:	91 1d       	adc	r25, r1
    7500:	96 95       	lsr	r25
    7502:	87 95       	ror	r24
    7504:	97 f9       	bld	r25, 7
    7506:	08 95       	ret

00007508 <__tablejump2__>:
    7508:	ee 0f       	add	r30, r30
    750a:	ff 1f       	adc	r31, r31
    750c:	05 90       	lpm	r0, Z+
    750e:	f4 91       	lpm	r31, Z
    7510:	e0 2d       	mov	r30, r0
    7512:	09 94       	ijmp

00007514 <atof>:
    7514:	66 27       	eor	r22, r22
    7516:	77 27       	eor	r23, r23
    7518:	e6 c0       	rjmp	.+460    	; 0x76e6 <strtod>

0000751a <atoi>:
    751a:	fc 01       	movw	r30, r24
    751c:	88 27       	eor	r24, r24
    751e:	99 27       	eor	r25, r25
    7520:	e8 94       	clt
    7522:	21 91       	ld	r18, Z+
    7524:	20 32       	cpi	r18, 0x20	; 32
    7526:	e9 f3       	breq	.-6      	; 0x7522 <atoi+0x8>
    7528:	29 30       	cpi	r18, 0x09	; 9
    752a:	10 f0       	brcs	.+4      	; 0x7530 <atoi+0x16>
    752c:	2e 30       	cpi	r18, 0x0E	; 14
    752e:	c8 f3       	brcs	.-14     	; 0x7522 <atoi+0x8>
    7530:	2b 32       	cpi	r18, 0x2B	; 43
    7532:	39 f0       	breq	.+14     	; 0x7542 <atoi+0x28>
    7534:	2d 32       	cpi	r18, 0x2D	; 45
    7536:	31 f4       	brne	.+12     	; 0x7544 <atoi+0x2a>
    7538:	68 94       	set
    753a:	03 c0       	rjmp	.+6      	; 0x7542 <atoi+0x28>
    753c:	92 d0       	rcall	.+292    	; 0x7662 <__mulhi_const_10>
    753e:	82 0f       	add	r24, r18
    7540:	91 1d       	adc	r25, r1
    7542:	21 91       	ld	r18, Z+
    7544:	20 53       	subi	r18, 0x30	; 48
    7546:	2a 30       	cpi	r18, 0x0A	; 10
    7548:	c8 f3       	brcs	.-14     	; 0x753c <atoi+0x22>
    754a:	1e f4       	brtc	.+6      	; 0x7552 <atoi+0x38>
    754c:	90 95       	com	r25
    754e:	81 95       	neg	r24
    7550:	9f 4f       	sbci	r25, 0xFF	; 255
    7552:	08 95       	ret

00007554 <atol>:
    7554:	1f 93       	push	r17
    7556:	fc 01       	movw	r30, r24
    7558:	99 27       	eor	r25, r25
    755a:	88 27       	eor	r24, r24
    755c:	bc 01       	movw	r22, r24
    755e:	e8 94       	clt
    7560:	11 91       	ld	r17, Z+
    7562:	10 32       	cpi	r17, 0x20	; 32
    7564:	e9 f3       	breq	.-6      	; 0x7560 <atol+0xc>
    7566:	19 30       	cpi	r17, 0x09	; 9
    7568:	10 f0       	brcs	.+4      	; 0x756e <atol+0x1a>
    756a:	1e 30       	cpi	r17, 0x0E	; 14
    756c:	c8 f3       	brcs	.-14     	; 0x7560 <atol+0xc>
    756e:	1b 32       	cpi	r17, 0x2B	; 43
    7570:	49 f0       	breq	.+18     	; 0x7584 <atol+0x30>
    7572:	1d 32       	cpi	r17, 0x2D	; 45
    7574:	41 f4       	brne	.+16     	; 0x7586 <atol+0x32>
    7576:	68 94       	set
    7578:	05 c0       	rjmp	.+10     	; 0x7584 <atol+0x30>
    757a:	5e d0       	rcall	.+188    	; 0x7638 <__mulsi_const_10>
    757c:	61 0f       	add	r22, r17
    757e:	71 1d       	adc	r23, r1
    7580:	81 1d       	adc	r24, r1
    7582:	91 1d       	adc	r25, r1
    7584:	11 91       	ld	r17, Z+
    7586:	10 53       	subi	r17, 0x30	; 48
    7588:	1a 30       	cpi	r17, 0x0A	; 10
    758a:	b8 f3       	brcs	.-18     	; 0x757a <atol+0x26>
    758c:	3e f4       	brtc	.+14     	; 0x759c <atol+0x48>
    758e:	90 95       	com	r25
    7590:	80 95       	com	r24
    7592:	70 95       	com	r23
    7594:	61 95       	neg	r22
    7596:	7f 4f       	sbci	r23, 0xFF	; 255
    7598:	8f 4f       	sbci	r24, 0xFF	; 255
    759a:	9f 4f       	sbci	r25, 0xFF	; 255
    759c:	1f 91       	pop	r17
    759e:	08 95       	ret

000075a0 <strcat>:
    75a0:	fb 01       	movw	r30, r22
    75a2:	dc 01       	movw	r26, r24
    75a4:	0d 90       	ld	r0, X+
    75a6:	00 20       	and	r0, r0
    75a8:	e9 f7       	brne	.-6      	; 0x75a4 <strcat+0x4>
    75aa:	11 97       	sbiw	r26, 0x01	; 1
    75ac:	01 90       	ld	r0, Z+
    75ae:	0d 92       	st	X+, r0
    75b0:	00 20       	and	r0, r0
    75b2:	e1 f7       	brne	.-8      	; 0x75ac <strcat+0xc>
    75b4:	08 95       	ret

000075b6 <strchr>:
    75b6:	fc 01       	movw	r30, r24
    75b8:	81 91       	ld	r24, Z+
    75ba:	86 17       	cp	r24, r22
    75bc:	21 f0       	breq	.+8      	; 0x75c6 <strchr+0x10>
    75be:	88 23       	and	r24, r24
    75c0:	d9 f7       	brne	.-10     	; 0x75b8 <strchr+0x2>
    75c2:	99 27       	eor	r25, r25
    75c4:	08 95       	ret
    75c6:	31 97       	sbiw	r30, 0x01	; 1
    75c8:	cf 01       	movw	r24, r30
    75ca:	08 95       	ret

000075cc <strcmp>:
    75cc:	fb 01       	movw	r30, r22
    75ce:	dc 01       	movw	r26, r24
    75d0:	8d 91       	ld	r24, X+
    75d2:	01 90       	ld	r0, Z+
    75d4:	80 19       	sub	r24, r0
    75d6:	01 10       	cpse	r0, r1
    75d8:	d9 f3       	breq	.-10     	; 0x75d0 <strcmp+0x4>
    75da:	99 0b       	sbc	r25, r25
    75dc:	08 95       	ret

000075de <strnlen>:
    75de:	fc 01       	movw	r30, r24
    75e0:	61 50       	subi	r22, 0x01	; 1
    75e2:	70 40       	sbci	r23, 0x00	; 0
    75e4:	01 90       	ld	r0, Z+
    75e6:	01 10       	cpse	r0, r1
    75e8:	d8 f7       	brcc	.-10     	; 0x75e0 <strnlen+0x2>
    75ea:	80 95       	com	r24
    75ec:	90 95       	com	r25
    75ee:	8e 0f       	add	r24, r30
    75f0:	9f 1f       	adc	r25, r31
    75f2:	08 95       	ret

000075f4 <strupr>:
    75f4:	dc 01       	movw	r26, r24
    75f6:	6c 91       	ld	r22, X
    75f8:	61 56       	subi	r22, 0x61	; 97
    75fa:	6a 31       	cpi	r22, 0x1A	; 26
    75fc:	08 f0       	brcs	.+2      	; 0x7600 <strupr+0xc>
    75fe:	60 5e       	subi	r22, 0xE0	; 224
    7600:	6f 5b       	subi	r22, 0xBF	; 191
    7602:	6d 93       	st	X+, r22
    7604:	c1 f7       	brne	.-16     	; 0x75f6 <strupr+0x2>
    7606:	08 95       	ret

00007608 <__itoa_ncheck>:
    7608:	bb 27       	eor	r27, r27
    760a:	4a 30       	cpi	r20, 0x0A	; 10
    760c:	31 f4       	brne	.+12     	; 0x761a <__itoa_ncheck+0x12>
    760e:	99 23       	and	r25, r25
    7610:	22 f4       	brpl	.+8      	; 0x761a <__itoa_ncheck+0x12>
    7612:	bd e2       	ldi	r27, 0x2D	; 45
    7614:	90 95       	com	r25
    7616:	81 95       	neg	r24
    7618:	9f 4f       	sbci	r25, 0xFF	; 255
    761a:	4d c0       	rjmp	.+154    	; 0x76b6 <__utoa_common>

0000761c <__ltoa_ncheck>:
    761c:	bb 27       	eor	r27, r27
    761e:	2a 30       	cpi	r18, 0x0A	; 10
    7620:	51 f4       	brne	.+20     	; 0x7636 <__ltoa_ncheck+0x1a>
    7622:	99 23       	and	r25, r25
    7624:	42 f4       	brpl	.+16     	; 0x7636 <__ltoa_ncheck+0x1a>
    7626:	bd e2       	ldi	r27, 0x2D	; 45
    7628:	90 95       	com	r25
    762a:	80 95       	com	r24
    762c:	70 95       	com	r23
    762e:	61 95       	neg	r22
    7630:	7f 4f       	sbci	r23, 0xFF	; 255
    7632:	8f 4f       	sbci	r24, 0xFF	; 255
    7634:	9f 4f       	sbci	r25, 0xFF	; 255
    7636:	1e c0       	rjmp	.+60     	; 0x7674 <__ultoa_common>

00007638 <__mulsi_const_10>:
    7638:	59 2f       	mov	r21, r25
    763a:	48 2f       	mov	r20, r24
    763c:	37 2f       	mov	r19, r23
    763e:	26 2f       	mov	r18, r22
    7640:	66 0f       	add	r22, r22
    7642:	77 1f       	adc	r23, r23
    7644:	88 1f       	adc	r24, r24
    7646:	99 1f       	adc	r25, r25
    7648:	66 0f       	add	r22, r22
    764a:	77 1f       	adc	r23, r23
    764c:	88 1f       	adc	r24, r24
    764e:	99 1f       	adc	r25, r25
    7650:	62 0f       	add	r22, r18
    7652:	73 1f       	adc	r23, r19
    7654:	84 1f       	adc	r24, r20
    7656:	95 1f       	adc	r25, r21
    7658:	66 0f       	add	r22, r22
    765a:	77 1f       	adc	r23, r23
    765c:	88 1f       	adc	r24, r24
    765e:	99 1f       	adc	r25, r25
    7660:	08 95       	ret

00007662 <__mulhi_const_10>:
    7662:	7a e0       	ldi	r23, 0x0A	; 10
    7664:	97 9f       	mul	r25, r23
    7666:	90 2d       	mov	r25, r0
    7668:	87 9f       	mul	r24, r23
    766a:	80 2d       	mov	r24, r0
    766c:	91 0d       	add	r25, r1
    766e:	11 24       	eor	r1, r1
    7670:	08 95       	ret

00007672 <__ultoa_ncheck>:
    7672:	bb 27       	eor	r27, r27

00007674 <__ultoa_common>:
    7674:	fa 01       	movw	r30, r20
    7676:	a6 2f       	mov	r26, r22
    7678:	62 17       	cp	r22, r18
    767a:	71 05       	cpc	r23, r1
    767c:	81 05       	cpc	r24, r1
    767e:	91 05       	cpc	r25, r1
    7680:	33 0b       	sbc	r19, r19
    7682:	30 fb       	bst	r19, 0
    7684:	66 f0       	brts	.+24     	; 0x769e <__ultoa_common+0x2a>
    7686:	aa 27       	eor	r26, r26
    7688:	66 0f       	add	r22, r22
    768a:	77 1f       	adc	r23, r23
    768c:	88 1f       	adc	r24, r24
    768e:	99 1f       	adc	r25, r25
    7690:	aa 1f       	adc	r26, r26
    7692:	a2 17       	cp	r26, r18
    7694:	10 f0       	brcs	.+4      	; 0x769a <__ultoa_common+0x26>
    7696:	a2 1b       	sub	r26, r18
    7698:	63 95       	inc	r22
    769a:	38 50       	subi	r19, 0x08	; 8
    769c:	a9 f7       	brne	.-22     	; 0x7688 <__ultoa_common+0x14>
    769e:	a0 5d       	subi	r26, 0xD0	; 208
    76a0:	aa 33       	cpi	r26, 0x3A	; 58
    76a2:	08 f0       	brcs	.+2      	; 0x76a6 <__ultoa_common+0x32>
    76a4:	a9 5d       	subi	r26, 0xD9	; 217
    76a6:	a1 93       	st	Z+, r26
    76a8:	36 f7       	brtc	.-52     	; 0x7676 <__ultoa_common+0x2>
    76aa:	b1 11       	cpse	r27, r1
    76ac:	b1 93       	st	Z+, r27
    76ae:	10 82       	st	Z, r1
    76b0:	ca 01       	movw	r24, r20
    76b2:	8b c1       	rjmp	.+790    	; 0x79ca <strrev>

000076b4 <__utoa_ncheck>:
    76b4:	bb 27       	eor	r27, r27

000076b6 <__utoa_common>:
    76b6:	fb 01       	movw	r30, r22
    76b8:	55 27       	eor	r21, r21
    76ba:	aa 27       	eor	r26, r26
    76bc:	88 0f       	add	r24, r24
    76be:	99 1f       	adc	r25, r25
    76c0:	aa 1f       	adc	r26, r26
    76c2:	a4 17       	cp	r26, r20
    76c4:	10 f0       	brcs	.+4      	; 0x76ca <__utoa_common+0x14>
    76c6:	a4 1b       	sub	r26, r20
    76c8:	83 95       	inc	r24
    76ca:	50 51       	subi	r21, 0x10	; 16
    76cc:	b9 f7       	brne	.-18     	; 0x76bc <__utoa_common+0x6>
    76ce:	a0 5d       	subi	r26, 0xD0	; 208
    76d0:	aa 33       	cpi	r26, 0x3A	; 58
    76d2:	08 f0       	brcs	.+2      	; 0x76d6 <__utoa_common+0x20>
    76d4:	a9 5d       	subi	r26, 0xD9	; 217
    76d6:	a1 93       	st	Z+, r26
    76d8:	00 97       	sbiw	r24, 0x00	; 0
    76da:	79 f7       	brne	.-34     	; 0x76ba <__utoa_common+0x4>
    76dc:	b1 11       	cpse	r27, r1
    76de:	b1 93       	st	Z+, r27
    76e0:	11 92       	st	Z+, r1
    76e2:	cb 01       	movw	r24, r22
    76e4:	72 c1       	rjmp	.+740    	; 0x79ca <strrev>

000076e6 <strtod>:
    76e6:	a0 e0       	ldi	r26, 0x00	; 0
    76e8:	b0 e0       	ldi	r27, 0x00	; 0
    76ea:	e8 e7       	ldi	r30, 0x78	; 120
    76ec:	fb e3       	ldi	r31, 0x3B	; 59
    76ee:	be c1       	rjmp	.+892    	; 0x7a6c <__prologue_saves__+0x8>
    76f0:	ec 01       	movw	r28, r24
    76f2:	7b 01       	movw	r14, r22
    76f4:	61 15       	cp	r22, r1
    76f6:	71 05       	cpc	r23, r1
    76f8:	19 f0       	breq	.+6      	; 0x7700 <strtod+0x1a>
    76fa:	db 01       	movw	r26, r22
    76fc:	8d 93       	st	X+, r24
    76fe:	9c 93       	st	X, r25
    7700:	8e 01       	movw	r16, r28
    7702:	0f 5f       	subi	r16, 0xFF	; 255
    7704:	1f 4f       	sbci	r17, 0xFF	; 255
    7706:	78 80       	ld	r7, Y
    7708:	87 2d       	mov	r24, r7
    770a:	90 e0       	ldi	r25, 0x00	; 0
    770c:	3e d1       	rcall	.+636    	; 0x798a <isspace>
    770e:	89 2b       	or	r24, r25
    7710:	11 f0       	breq	.+4      	; 0x7716 <strtod+0x30>
    7712:	e8 01       	movw	r28, r16
    7714:	f5 cf       	rjmp	.-22     	; 0x7700 <strtod+0x1a>
    7716:	bd e2       	ldi	r27, 0x2D	; 45
    7718:	7b 12       	cpse	r7, r27
    771a:	05 c0       	rjmp	.+10     	; 0x7726 <strtod+0x40>
    771c:	0f 5f       	subi	r16, 0xFF	; 255
    771e:	1f 4f       	sbci	r17, 0xFF	; 255
    7720:	79 80       	ldd	r7, Y+1	; 0x01
    7722:	c1 e0       	ldi	r28, 0x01	; 1
    7724:	08 c0       	rjmp	.+16     	; 0x7736 <strtod+0x50>
    7726:	eb e2       	ldi	r30, 0x2B	; 43
    7728:	7e 12       	cpse	r7, r30
    772a:	04 c0       	rjmp	.+8      	; 0x7734 <strtod+0x4e>
    772c:	8e 01       	movw	r16, r28
    772e:	0e 5f       	subi	r16, 0xFE	; 254
    7730:	1f 4f       	sbci	r17, 0xFF	; 255
    7732:	79 80       	ldd	r7, Y+1	; 0x01
    7734:	c0 e0       	ldi	r28, 0x00	; 0
    7736:	68 01       	movw	r12, r16
    7738:	f1 e0       	ldi	r31, 0x01	; 1
    773a:	cf 1a       	sub	r12, r31
    773c:	d1 08       	sbc	r13, r1
    773e:	43 e0       	ldi	r20, 0x03	; 3
    7740:	50 e0       	ldi	r21, 0x00	; 0
    7742:	60 e8       	ldi	r22, 0x80	; 128
    7744:	70 e0       	ldi	r23, 0x00	; 0
    7746:	c6 01       	movw	r24, r12
    7748:	28 d1       	rcall	.+592    	; 0x799a <strncasecmp_P>
    774a:	89 2b       	or	r24, r25
    774c:	e9 f4       	brne	.+58     	; 0x7788 <strtod+0xa2>
    774e:	68 01       	movw	r12, r16
    7750:	22 e0       	ldi	r18, 0x02	; 2
    7752:	c2 0e       	add	r12, r18
    7754:	d1 1c       	adc	r13, r1
    7756:	45 e0       	ldi	r20, 0x05	; 5
    7758:	50 e0       	ldi	r21, 0x00	; 0
    775a:	6b e7       	ldi	r22, 0x7B	; 123
    775c:	70 e0       	ldi	r23, 0x00	; 0
    775e:	c6 01       	movw	r24, r12
    7760:	1c d1       	rcall	.+568    	; 0x799a <strncasecmp_P>
    7762:	89 2b       	or	r24, r25
    7764:	21 f4       	brne	.+8      	; 0x776e <strtod+0x88>
    7766:	68 01       	movw	r12, r16
    7768:	87 e0       	ldi	r24, 0x07	; 7
    776a:	c8 0e       	add	r12, r24
    776c:	d1 1c       	adc	r13, r1
    776e:	e1 14       	cp	r14, r1
    7770:	f1 04       	cpc	r15, r1
    7772:	19 f0       	breq	.+6      	; 0x777a <strtod+0x94>
    7774:	d7 01       	movw	r26, r14
    7776:	cd 92       	st	X+, r12
    7778:	dc 92       	st	X, r13
    777a:	c1 11       	cpse	r28, r1
    777c:	f9 c0       	rjmp	.+498    	; 0x7970 <strtod+0x28a>
    777e:	60 e0       	ldi	r22, 0x00	; 0
    7780:	70 e0       	ldi	r23, 0x00	; 0
    7782:	80 e8       	ldi	r24, 0x80	; 128
    7784:	9f e7       	ldi	r25, 0x7F	; 127
    7786:	fd c0       	rjmp	.+506    	; 0x7982 <strtod+0x29c>
    7788:	43 e0       	ldi	r20, 0x03	; 3
    778a:	50 e0       	ldi	r21, 0x00	; 0
    778c:	68 e7       	ldi	r22, 0x78	; 120
    778e:	70 e0       	ldi	r23, 0x00	; 0
    7790:	c6 01       	movw	r24, r12
    7792:	03 d1       	rcall	.+518    	; 0x799a <strncasecmp_P>
    7794:	89 2b       	or	r24, r25
    7796:	51 f4       	brne	.+20     	; 0x77ac <strtod+0xc6>
    7798:	e1 14       	cp	r14, r1
    779a:	f1 04       	cpc	r15, r1
    779c:	09 f4       	brne	.+2      	; 0x77a0 <strtod+0xba>
    779e:	ed c0       	rjmp	.+474    	; 0x797a <strtod+0x294>
    77a0:	0e 5f       	subi	r16, 0xFE	; 254
    77a2:	1f 4f       	sbci	r17, 0xFF	; 255
    77a4:	f7 01       	movw	r30, r14
    77a6:	11 83       	std	Z+1, r17	; 0x01
    77a8:	00 83       	st	Z, r16
    77aa:	e7 c0       	rjmp	.+462    	; 0x797a <strtod+0x294>
    77ac:	68 01       	movw	r12, r16
    77ae:	60 e0       	ldi	r22, 0x00	; 0
    77b0:	70 e0       	ldi	r23, 0x00	; 0
    77b2:	cb 01       	movw	r24, r22
    77b4:	00 e0       	ldi	r16, 0x00	; 0
    77b6:	10 e0       	ldi	r17, 0x00	; 0
    77b8:	f6 01       	movw	r30, r12
    77ba:	d0 ed       	ldi	r29, 0xD0	; 208
    77bc:	d7 0d       	add	r29, r7
    77be:	da 30       	cpi	r29, 0x0A	; 10
    77c0:	50 f5       	brcc	.+84     	; 0x7816 <strtod+0x130>
    77c2:	2c 2f       	mov	r18, r28
    77c4:	22 60       	ori	r18, 0x02	; 2
    77c6:	62 2e       	mov	r6, r18
    77c8:	2c 2f       	mov	r18, r28
    77ca:	28 70       	andi	r18, 0x08	; 8
    77cc:	c2 ff       	sbrs	r28, 2
    77ce:	05 c0       	rjmp	.+10     	; 0x77da <strtod+0xf4>
    77d0:	21 11       	cpse	r18, r1
    77d2:	27 c0       	rjmp	.+78     	; 0x7822 <strtod+0x13c>
    77d4:	0f 5f       	subi	r16, 0xFF	; 255
    77d6:	1f 4f       	sbci	r17, 0xFF	; 255
    77d8:	24 c0       	rjmp	.+72     	; 0x7822 <strtod+0x13c>
    77da:	22 23       	and	r18, r18
    77dc:	11 f0       	breq	.+4      	; 0x77e2 <strtod+0xfc>
    77de:	01 50       	subi	r16, 0x01	; 1
    77e0:	11 09       	sbc	r17, r1
    77e2:	a5 e0       	ldi	r26, 0x05	; 5
    77e4:	b0 e0       	ldi	r27, 0x00	; 0
    77e6:	9b 01       	movw	r18, r22
    77e8:	ac 01       	movw	r20, r24
    77ea:	32 d1       	rcall	.+612    	; 0x7a50 <__muluhisi3>
    77ec:	4b 01       	movw	r8, r22
    77ee:	5c 01       	movw	r10, r24
    77f0:	88 0c       	add	r8, r8
    77f2:	99 1c       	adc	r9, r9
    77f4:	aa 1c       	adc	r10, r10
    77f6:	bb 1c       	adc	r11, r11
    77f8:	c5 01       	movw	r24, r10
    77fa:	b4 01       	movw	r22, r8
    77fc:	6d 0f       	add	r22, r29
    77fe:	71 1d       	adc	r23, r1
    7800:	81 1d       	adc	r24, r1
    7802:	91 1d       	adc	r25, r1
    7804:	68 39       	cpi	r22, 0x98	; 152
    7806:	a9 e9       	ldi	r26, 0x99	; 153
    7808:	7a 07       	cpc	r23, r26
    780a:	8a 07       	cpc	r24, r26
    780c:	a9 e1       	ldi	r26, 0x19	; 25
    780e:	9a 07       	cpc	r25, r26
    7810:	40 f0       	brcs	.+16     	; 0x7822 <strtod+0x13c>
    7812:	c6 60       	ori	r28, 0x06	; 6
    7814:	05 c0       	rjmp	.+10     	; 0x7820 <strtod+0x13a>
    7816:	de 3f       	cpi	r29, 0xFE	; 254
    7818:	51 f4       	brne	.+20     	; 0x782e <strtod+0x148>
    781a:	c3 fd       	sbrc	r28, 3
    781c:	44 c0       	rjmp	.+136    	; 0x78a6 <strtod+0x1c0>
    781e:	c8 60       	ori	r28, 0x08	; 8
    7820:	6c 2e       	mov	r6, r28
    7822:	bf ef       	ldi	r27, 0xFF	; 255
    7824:	cb 1a       	sub	r12, r27
    7826:	db 0a       	sbc	r13, r27
    7828:	70 80       	ld	r7, Z
    782a:	c6 2d       	mov	r28, r6
    782c:	c5 cf       	rjmp	.-118    	; 0x77b8 <strtod+0xd2>
    782e:	2d 2f       	mov	r18, r29
    7830:	2f 7d       	andi	r18, 0xDF	; 223
    7832:	25 31       	cpi	r18, 0x15	; 21
    7834:	c1 f5       	brne	.+112    	; 0x78a6 <strtod+0x1c0>
    7836:	40 81       	ld	r20, Z
    7838:	4d 32       	cpi	r20, 0x2D	; 45
    783a:	11 f4       	brne	.+4      	; 0x7840 <strtod+0x15a>
    783c:	c0 61       	ori	r28, 0x10	; 16
    783e:	06 c0       	rjmp	.+12     	; 0x784c <strtod+0x166>
    7840:	4b 32       	cpi	r20, 0x2B	; 43
    7842:	21 f0       	breq	.+8      	; 0x784c <strtod+0x166>
    7844:	31 96       	adiw	r30, 0x01	; 1
    7846:	21 e0       	ldi	r18, 0x01	; 1
    7848:	30 e0       	ldi	r19, 0x00	; 0
    784a:	06 c0       	rjmp	.+12     	; 0x7858 <strtod+0x172>
    784c:	32 96       	adiw	r30, 0x02	; 2
    784e:	d6 01       	movw	r26, r12
    7850:	11 96       	adiw	r26, 0x01	; 1
    7852:	4c 91       	ld	r20, X
    7854:	22 e0       	ldi	r18, 0x02	; 2
    7856:	30 e0       	ldi	r19, 0x00	; 0
    7858:	a0 ed       	ldi	r26, 0xD0	; 208
    785a:	a4 0f       	add	r26, r20
    785c:	aa 30       	cpi	r26, 0x0A	; 10
    785e:	18 f0       	brcs	.+6      	; 0x7866 <strtod+0x180>
    7860:	e2 1b       	sub	r30, r18
    7862:	f3 0b       	sbc	r31, r19
    7864:	20 c0       	rjmp	.+64     	; 0x78a6 <strtod+0x1c0>
    7866:	40 e0       	ldi	r20, 0x00	; 0
    7868:	50 e0       	ldi	r21, 0x00	; 0
    786a:	40 38       	cpi	r20, 0x80	; 128
    786c:	bc e0       	ldi	r27, 0x0C	; 12
    786e:	5b 07       	cpc	r21, r27
    7870:	5c f4       	brge	.+22     	; 0x7888 <strtod+0x1a2>
    7872:	9a 01       	movw	r18, r20
    7874:	22 0f       	add	r18, r18
    7876:	33 1f       	adc	r19, r19
    7878:	22 0f       	add	r18, r18
    787a:	33 1f       	adc	r19, r19
    787c:	42 0f       	add	r20, r18
    787e:	53 1f       	adc	r21, r19
    7880:	44 0f       	add	r20, r20
    7882:	55 1f       	adc	r21, r21
    7884:	4a 0f       	add	r20, r26
    7886:	51 1d       	adc	r21, r1
    7888:	31 96       	adiw	r30, 0x01	; 1
    788a:	df 01       	movw	r26, r30
    788c:	11 97       	sbiw	r26, 0x01	; 1
    788e:	2c 91       	ld	r18, X
    7890:	a0 ed       	ldi	r26, 0xD0	; 208
    7892:	a2 0f       	add	r26, r18
    7894:	aa 30       	cpi	r26, 0x0A	; 10
    7896:	48 f3       	brcs	.-46     	; 0x786a <strtod+0x184>
    7898:	c4 ff       	sbrs	r28, 4
    789a:	03 c0       	rjmp	.+6      	; 0x78a2 <strtod+0x1bc>
    789c:	51 95       	neg	r21
    789e:	41 95       	neg	r20
    78a0:	51 09       	sbc	r21, r1
    78a2:	04 0f       	add	r16, r20
    78a4:	15 1f       	adc	r17, r21
    78a6:	c1 ff       	sbrs	r28, 1
    78a8:	07 c0       	rjmp	.+14     	; 0x78b8 <strtod+0x1d2>
    78aa:	e1 14       	cp	r14, r1
    78ac:	f1 04       	cpc	r15, r1
    78ae:	21 f0       	breq	.+8      	; 0x78b8 <strtod+0x1d2>
    78b0:	31 97       	sbiw	r30, 0x01	; 1
    78b2:	d7 01       	movw	r26, r14
    78b4:	ed 93       	st	X+, r30
    78b6:	fc 93       	st	X, r31
    78b8:	c5 dc       	rcall	.-1654   	; 0x7244 <__floatunsisf>
    78ba:	c3 70       	andi	r28, 0x03	; 3
    78bc:	c3 30       	cpi	r28, 0x03	; 3
    78be:	19 f0       	breq	.+6      	; 0x78c6 <strtod+0x1e0>
    78c0:	6b 01       	movw	r12, r22
    78c2:	7c 01       	movw	r14, r24
    78c4:	06 c0       	rjmp	.+12     	; 0x78d2 <strtod+0x1ec>
    78c6:	6b 01       	movw	r12, r22
    78c8:	7c 01       	movw	r14, r24
    78ca:	f7 fa       	bst	r15, 7
    78cc:	f0 94       	com	r15
    78ce:	f7 f8       	bld	r15, 7
    78d0:	f0 94       	com	r15
    78d2:	20 e0       	ldi	r18, 0x00	; 0
    78d4:	30 e0       	ldi	r19, 0x00	; 0
    78d6:	a9 01       	movw	r20, r18
    78d8:	c7 01       	movw	r24, r14
    78da:	b6 01       	movw	r22, r12
    78dc:	7e dc       	rcall	.-1796   	; 0x71da <__cmpsf2>
    78de:	88 23       	and	r24, r24
    78e0:	09 f4       	brne	.+2      	; 0x78e4 <strtod+0x1fe>
    78e2:	43 c0       	rjmp	.+134    	; 0x796a <strtod+0x284>
    78e4:	17 ff       	sbrs	r17, 7
    78e6:	06 c0       	rjmp	.+12     	; 0x78f4 <strtod+0x20e>
    78e8:	11 95       	neg	r17
    78ea:	01 95       	neg	r16
    78ec:	11 09       	sbc	r17, r1
    78ee:	c7 e9       	ldi	r28, 0x97	; 151
    78f0:	d0 e0       	ldi	r29, 0x00	; 0
    78f2:	02 c0       	rjmp	.+4      	; 0x78f8 <strtod+0x212>
    78f4:	cf ea       	ldi	r28, 0xAF	; 175
    78f6:	d0 e0       	ldi	r29, 0x00	; 0
    78f8:	5e 01       	movw	r10, r28
    78fa:	b8 e1       	ldi	r27, 0x18	; 24
    78fc:	ab 1a       	sub	r10, r27
    78fe:	b1 08       	sbc	r11, r1
    7900:	46 01       	movw	r8, r12
    7902:	be 2d       	mov	r27, r14
    7904:	af 2d       	mov	r26, r15
    7906:	90 e2       	ldi	r25, 0x20	; 32
    7908:	e9 2e       	mov	r14, r25
    790a:	f1 2c       	mov	r15, r1
    790c:	0e 15       	cp	r16, r14
    790e:	1f 05       	cpc	r17, r15
    7910:	7c f0       	brlt	.+30     	; 0x7930 <strtod+0x24a>
    7912:	fe 01       	movw	r30, r28
    7914:	25 91       	lpm	r18, Z+
    7916:	35 91       	lpm	r19, Z+
    7918:	45 91       	lpm	r20, Z+
    791a:	54 91       	lpm	r21, Z
    791c:	b4 01       	movw	r22, r8
    791e:	8b 2f       	mov	r24, r27
    7920:	9a 2f       	mov	r25, r26
    7922:	46 dd       	rcall	.-1396   	; 0x73b0 <__mulsf3>
    7924:	4b 01       	movw	r8, r22
    7926:	b8 2f       	mov	r27, r24
    7928:	a9 2f       	mov	r26, r25
    792a:	0e 19       	sub	r16, r14
    792c:	1f 09       	sbc	r17, r15
    792e:	ee cf       	rjmp	.-36     	; 0x790c <strtod+0x226>
    7930:	24 97       	sbiw	r28, 0x04	; 4
    7932:	f5 94       	asr	r15
    7934:	e7 94       	ror	r14
    7936:	ca 15       	cp	r28, r10
    7938:	db 05       	cpc	r29, r11
    793a:	41 f7       	brne	.-48     	; 0x790c <strtod+0x226>
    793c:	64 01       	movw	r12, r8
    793e:	eb 2e       	mov	r14, r27
    7940:	fa 2e       	mov	r15, r26
    7942:	8e 2d       	mov	r24, r14
    7944:	88 0f       	add	r24, r24
    7946:	8f 2d       	mov	r24, r15
    7948:	88 1f       	adc	r24, r24
    794a:	8f 3f       	cpi	r24, 0xFF	; 255
    794c:	41 f0       	breq	.+16     	; 0x795e <strtod+0x278>
    794e:	20 e0       	ldi	r18, 0x00	; 0
    7950:	30 e0       	ldi	r19, 0x00	; 0
    7952:	a9 01       	movw	r20, r18
    7954:	c7 01       	movw	r24, r14
    7956:	b6 01       	movw	r22, r12
    7958:	40 dc       	rcall	.-1920   	; 0x71da <__cmpsf2>
    795a:	81 11       	cpse	r24, r1
    795c:	06 c0       	rjmp	.+12     	; 0x796a <strtod+0x284>
    795e:	82 e2       	ldi	r24, 0x22	; 34
    7960:	90 e0       	ldi	r25, 0x00	; 0
    7962:	90 93 5d 05 	sts	0x055D, r25
    7966:	80 93 5c 05 	sts	0x055C, r24
    796a:	c7 01       	movw	r24, r14
    796c:	b6 01       	movw	r22, r12
    796e:	09 c0       	rjmp	.+18     	; 0x7982 <strtod+0x29c>
    7970:	60 e0       	ldi	r22, 0x00	; 0
    7972:	70 e0       	ldi	r23, 0x00	; 0
    7974:	80 e8       	ldi	r24, 0x80	; 128
    7976:	9f ef       	ldi	r25, 0xFF	; 255
    7978:	04 c0       	rjmp	.+8      	; 0x7982 <strtod+0x29c>
    797a:	60 e0       	ldi	r22, 0x00	; 0
    797c:	70 e0       	ldi	r23, 0x00	; 0
    797e:	80 ec       	ldi	r24, 0xC0	; 192
    7980:	9f e7       	ldi	r25, 0x7F	; 127
    7982:	cd b7       	in	r28, 0x3d	; 61
    7984:	de b7       	in	r29, 0x3e	; 62
    7986:	ee e0       	ldi	r30, 0x0E	; 14
    7988:	8d c0       	rjmp	.+282    	; 0x7aa4 <__epilogue_restores__+0x8>

0000798a <isspace>:
    798a:	91 11       	cpse	r25, r1
    798c:	2e c0       	rjmp	.+92     	; 0x79ea <__ctype_isfalse>
    798e:	80 32       	cpi	r24, 0x20	; 32
    7990:	19 f0       	breq	.+6      	; 0x7998 <isspace+0xe>
    7992:	89 50       	subi	r24, 0x09	; 9
    7994:	85 50       	subi	r24, 0x05	; 5
    7996:	d0 f7       	brcc	.-12     	; 0x798c <isspace+0x2>
    7998:	08 95       	ret

0000799a <strncasecmp_P>:
    799a:	fb 01       	movw	r30, r22
    799c:	dc 01       	movw	r26, r24
    799e:	41 50       	subi	r20, 0x01	; 1
    79a0:	50 40       	sbci	r21, 0x00	; 0
    79a2:	88 f0       	brcs	.+34     	; 0x79c6 <strncasecmp_P+0x2c>
    79a4:	8d 91       	ld	r24, X+
    79a6:	81 34       	cpi	r24, 0x41	; 65
    79a8:	1c f0       	brlt	.+6      	; 0x79b0 <strncasecmp_P+0x16>
    79aa:	8b 35       	cpi	r24, 0x5B	; 91
    79ac:	0c f4       	brge	.+2      	; 0x79b0 <strncasecmp_P+0x16>
    79ae:	80 5e       	subi	r24, 0xE0	; 224
    79b0:	65 91       	lpm	r22, Z+
    79b2:	61 34       	cpi	r22, 0x41	; 65
    79b4:	1c f0       	brlt	.+6      	; 0x79bc <strncasecmp_P+0x22>
    79b6:	6b 35       	cpi	r22, 0x5B	; 91
    79b8:	0c f4       	brge	.+2      	; 0x79bc <strncasecmp_P+0x22>
    79ba:	60 5e       	subi	r22, 0xE0	; 224
    79bc:	86 1b       	sub	r24, r22
    79be:	61 11       	cpse	r22, r1
    79c0:	71 f3       	breq	.-36     	; 0x799e <strncasecmp_P+0x4>
    79c2:	99 0b       	sbc	r25, r25
    79c4:	08 95       	ret
    79c6:	88 1b       	sub	r24, r24
    79c8:	fc cf       	rjmp	.-8      	; 0x79c2 <strncasecmp_P+0x28>

000079ca <strrev>:
    79ca:	dc 01       	movw	r26, r24
    79cc:	fc 01       	movw	r30, r24
    79ce:	67 2f       	mov	r22, r23
    79d0:	71 91       	ld	r23, Z+
    79d2:	77 23       	and	r23, r23
    79d4:	e1 f7       	brne	.-8      	; 0x79ce <strrev+0x4>
    79d6:	32 97       	sbiw	r30, 0x02	; 2
    79d8:	04 c0       	rjmp	.+8      	; 0x79e2 <strrev+0x18>
    79da:	7c 91       	ld	r23, X
    79dc:	6d 93       	st	X+, r22
    79de:	70 83       	st	Z, r23
    79e0:	62 91       	ld	r22, -Z
    79e2:	ae 17       	cp	r26, r30
    79e4:	bf 07       	cpc	r27, r31
    79e6:	c8 f3       	brcs	.-14     	; 0x79da <strrev+0x10>
    79e8:	08 95       	ret

000079ea <__ctype_isfalse>:
    79ea:	99 27       	eor	r25, r25
    79ec:	88 27       	eor	r24, r24

000079ee <__ctype_istrue>:
    79ee:	08 95       	ret

000079f0 <eeprom_read_dword>:
    79f0:	a6 e1       	ldi	r26, 0x16	; 22
    79f2:	b0 e0       	ldi	r27, 0x00	; 0
    79f4:	44 e0       	ldi	r20, 0x04	; 4
    79f6:	50 e0       	ldi	r21, 0x00	; 0
    79f8:	0f c0       	rjmp	.+30     	; 0x7a18 <eeprom_read_blraw>

000079fa <eeprom_read_word>:
    79fa:	a8 e1       	ldi	r26, 0x18	; 24
    79fc:	b0 e0       	ldi	r27, 0x00	; 0
    79fe:	42 e0       	ldi	r20, 0x02	; 2
    7a00:	50 e0       	ldi	r21, 0x00	; 0
    7a02:	0a c0       	rjmp	.+20     	; 0x7a18 <eeprom_read_blraw>

00007a04 <eeprom_write_dword>:
    7a04:	24 2f       	mov	r18, r20
    7a06:	17 d0       	rcall	.+46     	; 0x7a36 <eeprom_write_r18>
    7a08:	25 2f       	mov	r18, r21
    7a0a:	15 d0       	rcall	.+42     	; 0x7a36 <eeprom_write_r18>
    7a0c:	00 c0       	rjmp	.+0      	; 0x7a0e <eeprom_write_word>

00007a0e <eeprom_write_word>:
    7a0e:	12 d0       	rcall	.+36     	; 0x7a34 <eeprom_write_byte>
    7a10:	27 2f       	mov	r18, r23
    7a12:	11 c0       	rjmp	.+34     	; 0x7a36 <eeprom_write_r18>

00007a14 <eeprom_read_block>:
    7a14:	dc 01       	movw	r26, r24
    7a16:	cb 01       	movw	r24, r22

00007a18 <eeprom_read_blraw>:
    7a18:	fc 01       	movw	r30, r24
    7a1a:	f9 99       	sbic	0x1f, 1	; 31
    7a1c:	fe cf       	rjmp	.-4      	; 0x7a1a <eeprom_read_blraw+0x2>
    7a1e:	06 c0       	rjmp	.+12     	; 0x7a2c <eeprom_read_blraw+0x14>
    7a20:	f2 bd       	out	0x22, r31	; 34
    7a22:	e1 bd       	out	0x21, r30	; 33
    7a24:	f8 9a       	sbi	0x1f, 0	; 31
    7a26:	31 96       	adiw	r30, 0x01	; 1
    7a28:	00 b4       	in	r0, 0x20	; 32
    7a2a:	0d 92       	st	X+, r0
    7a2c:	41 50       	subi	r20, 0x01	; 1
    7a2e:	50 40       	sbci	r21, 0x00	; 0
    7a30:	b8 f7       	brcc	.-18     	; 0x7a20 <eeprom_read_blraw+0x8>
    7a32:	08 95       	ret

00007a34 <eeprom_write_byte>:
    7a34:	26 2f       	mov	r18, r22

00007a36 <eeprom_write_r18>:
    7a36:	f9 99       	sbic	0x1f, 1	; 31
    7a38:	fe cf       	rjmp	.-4      	; 0x7a36 <eeprom_write_r18>
    7a3a:	1f ba       	out	0x1f, r1	; 31
    7a3c:	92 bd       	out	0x22, r25	; 34
    7a3e:	81 bd       	out	0x21, r24	; 33
    7a40:	20 bd       	out	0x20, r18	; 32
    7a42:	0f b6       	in	r0, 0x3f	; 63
    7a44:	f8 94       	cli
    7a46:	fa 9a       	sbi	0x1f, 2	; 31
    7a48:	f9 9a       	sbi	0x1f, 1	; 31
    7a4a:	0f be       	out	0x3f, r0	; 63
    7a4c:	01 96       	adiw	r24, 0x01	; 1
    7a4e:	08 95       	ret

00007a50 <__muluhisi3>:
    7a50:	40 d0       	rcall	.+128    	; 0x7ad2 <__umulhisi3>
    7a52:	a5 9f       	mul	r26, r21
    7a54:	90 0d       	add	r25, r0
    7a56:	b4 9f       	mul	r27, r20
    7a58:	90 0d       	add	r25, r0
    7a5a:	a4 9f       	mul	r26, r20
    7a5c:	80 0d       	add	r24, r0
    7a5e:	91 1d       	adc	r25, r1
    7a60:	11 24       	eor	r1, r1
    7a62:	08 95       	ret

00007a64 <__prologue_saves__>:
    7a64:	2f 92       	push	r2
    7a66:	3f 92       	push	r3
    7a68:	4f 92       	push	r4
    7a6a:	5f 92       	push	r5
    7a6c:	6f 92       	push	r6
    7a6e:	7f 92       	push	r7
    7a70:	8f 92       	push	r8
    7a72:	9f 92       	push	r9
    7a74:	af 92       	push	r10
    7a76:	bf 92       	push	r11
    7a78:	cf 92       	push	r12
    7a7a:	df 92       	push	r13
    7a7c:	ef 92       	push	r14
    7a7e:	ff 92       	push	r15
    7a80:	0f 93       	push	r16
    7a82:	1f 93       	push	r17
    7a84:	cf 93       	push	r28
    7a86:	df 93       	push	r29
    7a88:	cd b7       	in	r28, 0x3d	; 61
    7a8a:	de b7       	in	r29, 0x3e	; 62
    7a8c:	ca 1b       	sub	r28, r26
    7a8e:	db 0b       	sbc	r29, r27
    7a90:	0f b6       	in	r0, 0x3f	; 63
    7a92:	f8 94       	cli
    7a94:	de bf       	out	0x3e, r29	; 62
    7a96:	0f be       	out	0x3f, r0	; 63
    7a98:	cd bf       	out	0x3d, r28	; 61
    7a9a:	09 94       	ijmp

00007a9c <__epilogue_restores__>:
    7a9c:	2a 88       	ldd	r2, Y+18	; 0x12
    7a9e:	39 88       	ldd	r3, Y+17	; 0x11
    7aa0:	48 88       	ldd	r4, Y+16	; 0x10
    7aa2:	5f 84       	ldd	r5, Y+15	; 0x0f
    7aa4:	6e 84       	ldd	r6, Y+14	; 0x0e
    7aa6:	7d 84       	ldd	r7, Y+13	; 0x0d
    7aa8:	8c 84       	ldd	r8, Y+12	; 0x0c
    7aaa:	9b 84       	ldd	r9, Y+11	; 0x0b
    7aac:	aa 84       	ldd	r10, Y+10	; 0x0a
    7aae:	b9 84       	ldd	r11, Y+9	; 0x09
    7ab0:	c8 84       	ldd	r12, Y+8	; 0x08
    7ab2:	df 80       	ldd	r13, Y+7	; 0x07
    7ab4:	ee 80       	ldd	r14, Y+6	; 0x06
    7ab6:	fd 80       	ldd	r15, Y+5	; 0x05
    7ab8:	0c 81       	ldd	r16, Y+4	; 0x04
    7aba:	1b 81       	ldd	r17, Y+3	; 0x03
    7abc:	aa 81       	ldd	r26, Y+2	; 0x02
    7abe:	b9 81       	ldd	r27, Y+1	; 0x01
    7ac0:	ce 0f       	add	r28, r30
    7ac2:	d1 1d       	adc	r29, r1
    7ac4:	0f b6       	in	r0, 0x3f	; 63
    7ac6:	f8 94       	cli
    7ac8:	de bf       	out	0x3e, r29	; 62
    7aca:	0f be       	out	0x3f, r0	; 63
    7acc:	cd bf       	out	0x3d, r28	; 61
    7ace:	ed 01       	movw	r28, r26
    7ad0:	08 95       	ret

00007ad2 <__umulhisi3>:
    7ad2:	a2 9f       	mul	r26, r18
    7ad4:	b0 01       	movw	r22, r0
    7ad6:	b3 9f       	mul	r27, r19
    7ad8:	c0 01       	movw	r24, r0
    7ada:	a3 9f       	mul	r26, r19
    7adc:	70 0d       	add	r23, r0
    7ade:	81 1d       	adc	r24, r1
    7ae0:	11 24       	eor	r1, r1
    7ae2:	91 1d       	adc	r25, r1
    7ae4:	b2 9f       	mul	r27, r18
    7ae6:	70 0d       	add	r23, r0
    7ae8:	81 1d       	adc	r24, r1
    7aea:	11 24       	eor	r1, r1
    7aec:	91 1d       	adc	r25, r1
    7aee:	08 95       	ret

00007af0 <_exit>:
    7af0:	f8 94       	cli

00007af2 <__stop_program>:
    7af2:	ff cf       	rjmp	.-2      	; 0x7af2 <__stop_program>

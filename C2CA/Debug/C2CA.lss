
C2CA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  00004b38  00004bcc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004b38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000393  00800146  00800146  00004c12  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004c12  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004c70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00004cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004645  00000000  00000000  00004d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000433  00000000  00000000  0000936d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000029b9  00000000  00000000  000097a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000290  00000000  00000000  0000c15c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000106e1  00000000  00000000  0000c3ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004d0e  00000000  00000000  0001cacd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000948  00000000  00000000  000217db  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00000624  00000000  00000000  00022123  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	85 c1       	rjmp	.+778    	; 0x30c <__ctors_end>
       2:	00 00       	nop
       4:	a0 c1       	rjmp	.+832    	; 0x346 <__bad_interrupt>
       6:	00 00       	nop
       8:	9e c1       	rjmp	.+828    	; 0x346 <__bad_interrupt>
       a:	00 00       	nop
       c:	9c c1       	rjmp	.+824    	; 0x346 <__bad_interrupt>
       e:	00 00       	nop
      10:	9a c1       	rjmp	.+820    	; 0x346 <__bad_interrupt>
      12:	00 00       	nop
      14:	98 c1       	rjmp	.+816    	; 0x346 <__bad_interrupt>
      16:	00 00       	nop
      18:	96 c1       	rjmp	.+812    	; 0x346 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	1f c5       	rjmp	.+2622   	; 0xa5c <__vector_7>
      1e:	00 00       	nop
      20:	92 c1       	rjmp	.+804    	; 0x346 <__bad_interrupt>
      22:	00 00       	nop
      24:	90 c1       	rjmp	.+800    	; 0x346 <__bad_interrupt>
      26:	00 00       	nop
      28:	8e c1       	rjmp	.+796    	; 0x346 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8c c1       	rjmp	.+792    	; 0x346 <__bad_interrupt>
      2e:	00 00       	nop
      30:	8a c1       	rjmp	.+788    	; 0x346 <__bad_interrupt>
      32:	00 00       	nop
      34:	88 c1       	rjmp	.+784    	; 0x346 <__bad_interrupt>
      36:	00 00       	nop
      38:	67 c4       	rjmp	.+2254   	; 0x908 <__vector_14>
      3a:	00 00       	nop
      3c:	84 c1       	rjmp	.+776    	; 0x346 <__bad_interrupt>
      3e:	00 00       	nop
      40:	82 c1       	rjmp	.+772    	; 0x346 <__bad_interrupt>
      42:	00 00       	nop
      44:	80 c1       	rjmp	.+768    	; 0x346 <__bad_interrupt>
      46:	00 00       	nop
      48:	2b c4       	rjmp	.+2134   	; 0x8a0 <__vector_18>
      4a:	00 00       	nop
      4c:	e9 c3       	rjmp	.+2002   	; 0x820 <__vector_19>
      4e:	00 00       	nop
      50:	7a c1       	rjmp	.+756    	; 0x346 <__bad_interrupt>
      52:	00 00       	nop
      54:	78 c1       	rjmp	.+752    	; 0x346 <__bad_interrupt>
      56:	00 00       	nop
      58:	76 c1       	rjmp	.+748    	; 0x346 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	74 c1       	rjmp	.+744    	; 0x346 <__bad_interrupt>
      5e:	00 00       	nop
      60:	72 c1       	rjmp	.+740    	; 0x346 <__bad_interrupt>
      62:	00 00       	nop
      64:	70 c1       	rjmp	.+736    	; 0x346 <__bad_interrupt>
      66:	00 00       	nop
      68:	d7 0e       	add	r13, r23
      6a:	e7 0e       	add	r14, r23
      6c:	02 10       	cpse	r0, r2
      6e:	1d 11       	cpse	r17, r13
      70:	38 12       	cpse	r3, r24
      72:	53 13       	cpse	r21, r19
      74:	63 13       	cpse	r22, r19
      76:	73 13       	cpse	r23, r19
      78:	1e 16       	cp	r1, r30
      7a:	1e 16       	cp	r1, r30
      7c:	1e 16       	cp	r1, r30
      7e:	1e 16       	cp	r1, r30
      80:	1e 16       	cp	r1, r30
      82:	1e 16       	cp	r1, r30
      84:	1e 16       	cp	r1, r30
      86:	1e 16       	cp	r1, r30
      88:	1e 16       	cp	r1, r30
      8a:	1e 16       	cp	r1, r30
      8c:	1e 16       	cp	r1, r30
      8e:	1e 16       	cp	r1, r30
      90:	1e 16       	cp	r1, r30
      92:	1e 16       	cp	r1, r30
      94:	1e 16       	cp	r1, r30
      96:	1e 16       	cp	r1, r30
      98:	1e 16       	cp	r1, r30
      9a:	1e 16       	cp	r1, r30
      9c:	1e 16       	cp	r1, r30
      9e:	1e 16       	cp	r1, r30
      a0:	1e 16       	cp	r1, r30
      a2:	1e 16       	cp	r1, r30
      a4:	1e 16       	cp	r1, r30
      a6:	1e 16       	cp	r1, r30
      a8:	1e 16       	cp	r1, r30
      aa:	1e 16       	cp	r1, r30
      ac:	1e 16       	cp	r1, r30
      ae:	1e 16       	cp	r1, r30
      b0:	1e 16       	cp	r1, r30
      b2:	1e 16       	cp	r1, r30
      b4:	1e 16       	cp	r1, r30
      b6:	1e 16       	cp	r1, r30
      b8:	1e 16       	cp	r1, r30
      ba:	1e 16       	cp	r1, r30
      bc:	1e 16       	cp	r1, r30
      be:	1e 16       	cp	r1, r30
      c0:	1e 16       	cp	r1, r30
      c2:	1e 16       	cp	r1, r30
      c4:	1e 16       	cp	r1, r30
      c6:	1e 16       	cp	r1, r30
      c8:	1e 16       	cp	r1, r30
      ca:	1e 16       	cp	r1, r30
      cc:	1e 16       	cp	r1, r30
      ce:	1e 16       	cp	r1, r30
      d0:	1e 16       	cp	r1, r30
      d2:	1e 16       	cp	r1, r30
      d4:	1e 16       	cp	r1, r30
      d6:	1e 16       	cp	r1, r30
      d8:	1e 16       	cp	r1, r30
      da:	1e 16       	cp	r1, r30
      dc:	1e 16       	cp	r1, r30
      de:	1e 16       	cp	r1, r30
      e0:	1e 16       	cp	r1, r30
      e2:	1e 16       	cp	r1, r30
      e4:	1e 16       	cp	r1, r30
      e6:	1e 16       	cp	r1, r30
      e8:	1e 16       	cp	r1, r30
      ea:	1e 16       	cp	r1, r30
      ec:	1e 16       	cp	r1, r30
      ee:	1e 16       	cp	r1, r30
      f0:	1e 16       	cp	r1, r30
      f2:	1e 16       	cp	r1, r30
      f4:	1e 16       	cp	r1, r30
      f6:	1e 16       	cp	r1, r30
      f8:	1e 16       	cp	r1, r30
      fa:	1e 16       	cp	r1, r30
      fc:	1e 16       	cp	r1, r30
      fe:	1e 16       	cp	r1, r30
     100:	1e 16       	cp	r1, r30
     102:	1e 16       	cp	r1, r30
     104:	1e 16       	cp	r1, r30
     106:	1e 16       	cp	r1, r30
     108:	1e 16       	cp	r1, r30
     10a:	1e 16       	cp	r1, r30
     10c:	1e 16       	cp	r1, r30
     10e:	1e 16       	cp	r1, r30
     110:	1e 16       	cp	r1, r30
     112:	1e 16       	cp	r1, r30
     114:	1e 16       	cp	r1, r30
     116:	1e 16       	cp	r1, r30
     118:	1e 16       	cp	r1, r30
     11a:	1e 16       	cp	r1, r30
     11c:	1e 16       	cp	r1, r30
     11e:	1e 16       	cp	r1, r30
     120:	1e 16       	cp	r1, r30
     122:	1e 16       	cp	r1, r30
     124:	1e 16       	cp	r1, r30
     126:	1e 16       	cp	r1, r30
     128:	1e 16       	cp	r1, r30
     12a:	1e 16       	cp	r1, r30
     12c:	1e 16       	cp	r1, r30
     12e:	1e 16       	cp	r1, r30
     130:	83 13       	cpse	r24, r19
     132:	93 13       	cpse	r25, r19
     134:	a3 13       	cpse	r26, r19
     136:	b3 13       	cpse	r27, r19
     138:	c3 13       	cpse	r28, r19
     13a:	d3 13       	cpse	r29, r19
     13c:	e3 13       	cpse	r30, r19
     13e:	f3 13       	cpse	r31, r19
     140:	1e 16       	cp	r1, r30
     142:	1e 16       	cp	r1, r30
     144:	1e 16       	cp	r1, r30
     146:	1e 16       	cp	r1, r30
     148:	1e 16       	cp	r1, r30
     14a:	1e 16       	cp	r1, r30
     14c:	1e 16       	cp	r1, r30
     14e:	1e 16       	cp	r1, r30
     150:	1e 16       	cp	r1, r30
     152:	1e 16       	cp	r1, r30
     154:	1e 16       	cp	r1, r30
     156:	1e 16       	cp	r1, r30
     158:	1e 16       	cp	r1, r30
     15a:	1e 16       	cp	r1, r30
     15c:	1e 16       	cp	r1, r30
     15e:	1e 16       	cp	r1, r30
     160:	1e 16       	cp	r1, r30
     162:	1e 16       	cp	r1, r30
     164:	1e 16       	cp	r1, r30
     166:	1e 16       	cp	r1, r30
     168:	1e 16       	cp	r1, r30
     16a:	1e 16       	cp	r1, r30
     16c:	1e 16       	cp	r1, r30
     16e:	1e 16       	cp	r1, r30
     170:	1e 16       	cp	r1, r30
     172:	1e 16       	cp	r1, r30
     174:	1e 16       	cp	r1, r30
     176:	1e 16       	cp	r1, r30
     178:	1e 16       	cp	r1, r30
     17a:	1e 16       	cp	r1, r30
     17c:	1e 16       	cp	r1, r30
     17e:	1e 16       	cp	r1, r30
     180:	1e 16       	cp	r1, r30
     182:	1e 16       	cp	r1, r30
     184:	1e 16       	cp	r1, r30
     186:	1e 16       	cp	r1, r30
     188:	1e 16       	cp	r1, r30
     18a:	1e 16       	cp	r1, r30
     18c:	1e 16       	cp	r1, r30
     18e:	1e 16       	cp	r1, r30
     190:	1e 16       	cp	r1, r30
     192:	1e 16       	cp	r1, r30
     194:	1e 16       	cp	r1, r30
     196:	1e 16       	cp	r1, r30
     198:	1e 16       	cp	r1, r30
     19a:	1e 16       	cp	r1, r30
     19c:	1e 16       	cp	r1, r30
     19e:	1e 16       	cp	r1, r30
     1a0:	1e 16       	cp	r1, r30
     1a2:	1e 16       	cp	r1, r30
     1a4:	1e 16       	cp	r1, r30
     1a6:	1e 16       	cp	r1, r30
     1a8:	1e 16       	cp	r1, r30
     1aa:	1e 16       	cp	r1, r30
     1ac:	1e 16       	cp	r1, r30
     1ae:	1e 16       	cp	r1, r30
     1b0:	1e 16       	cp	r1, r30
     1b2:	1e 16       	cp	r1, r30
     1b4:	1e 16       	cp	r1, r30
     1b6:	1e 16       	cp	r1, r30
     1b8:	1e 16       	cp	r1, r30
     1ba:	1e 16       	cp	r1, r30
     1bc:	1e 16       	cp	r1, r30
     1be:	1e 16       	cp	r1, r30
     1c0:	1e 16       	cp	r1, r30
     1c2:	1e 16       	cp	r1, r30
     1c4:	1e 16       	cp	r1, r30
     1c6:	1e 16       	cp	r1, r30
     1c8:	1e 16       	cp	r1, r30
     1ca:	1e 16       	cp	r1, r30
     1cc:	1e 16       	cp	r1, r30
     1ce:	1e 16       	cp	r1, r30
     1d0:	1e 16       	cp	r1, r30
     1d2:	1e 16       	cp	r1, r30
     1d4:	1e 16       	cp	r1, r30
     1d6:	1e 16       	cp	r1, r30
     1d8:	1e 16       	cp	r1, r30
     1da:	1e 16       	cp	r1, r30
     1dc:	1e 16       	cp	r1, r30
     1de:	1e 16       	cp	r1, r30
     1e0:	1e 16       	cp	r1, r30
     1e2:	1e 16       	cp	r1, r30
     1e4:	1e 16       	cp	r1, r30
     1e6:	1e 16       	cp	r1, r30
     1e8:	1e 16       	cp	r1, r30
     1ea:	1e 16       	cp	r1, r30
     1ec:	1e 16       	cp	r1, r30
     1ee:	1e 16       	cp	r1, r30
     1f0:	1e 16       	cp	r1, r30
     1f2:	1e 16       	cp	r1, r30
     1f4:	1e 16       	cp	r1, r30
     1f6:	1e 16       	cp	r1, r30
     1f8:	03 14       	cp	r0, r3
     1fa:	14 14       	cp	r1, r4
     1fc:	25 14       	cp	r2, r5
     1fe:	36 14       	cp	r3, r6
     200:	47 14       	cp	r4, r7
     202:	63 15       	cp	r22, r3
     204:	74 15       	cp	r23, r4
     206:	85 15       	cp	r24, r5
     208:	1e 16       	cp	r1, r30
     20a:	1e 16       	cp	r1, r30
     20c:	1e 16       	cp	r1, r30
     20e:	1e 16       	cp	r1, r30
     210:	1e 16       	cp	r1, r30
     212:	1e 16       	cp	r1, r30
     214:	1e 16       	cp	r1, r30
     216:	1e 16       	cp	r1, r30
     218:	1e 16       	cp	r1, r30
     21a:	1e 16       	cp	r1, r30
     21c:	1e 16       	cp	r1, r30
     21e:	1e 16       	cp	r1, r30
     220:	1e 16       	cp	r1, r30
     222:	1e 16       	cp	r1, r30
     224:	1e 16       	cp	r1, r30
     226:	1e 16       	cp	r1, r30
     228:	1e 16       	cp	r1, r30
     22a:	1e 16       	cp	r1, r30
     22c:	1e 16       	cp	r1, r30
     22e:	1e 16       	cp	r1, r30
     230:	1e 16       	cp	r1, r30
     232:	1e 16       	cp	r1, r30
     234:	1e 16       	cp	r1, r30
     236:	1e 16       	cp	r1, r30
     238:	1e 16       	cp	r1, r30
     23a:	1e 16       	cp	r1, r30
     23c:	1e 16       	cp	r1, r30
     23e:	1e 16       	cp	r1, r30
     240:	1e 16       	cp	r1, r30
     242:	1e 16       	cp	r1, r30
     244:	1e 16       	cp	r1, r30
     246:	1e 16       	cp	r1, r30
     248:	1e 16       	cp	r1, r30
     24a:	1e 16       	cp	r1, r30
     24c:	1e 16       	cp	r1, r30
     24e:	1e 16       	cp	r1, r30
     250:	1e 16       	cp	r1, r30
     252:	1e 16       	cp	r1, r30
     254:	1e 16       	cp	r1, r30
     256:	1e 16       	cp	r1, r30
     258:	1e 16       	cp	r1, r30
     25a:	1e 16       	cp	r1, r30
     25c:	1e 16       	cp	r1, r30
     25e:	1e 16       	cp	r1, r30
     260:	1e 16       	cp	r1, r30
     262:	1e 16       	cp	r1, r30
     264:	1e 16       	cp	r1, r30
     266:	1e 16       	cp	r1, r30
     268:	1e 16       	cp	r1, r30
     26a:	1e 16       	cp	r1, r30
     26c:	1e 16       	cp	r1, r30
     26e:	1e 16       	cp	r1, r30
     270:	1e 16       	cp	r1, r30
     272:	1e 16       	cp	r1, r30
     274:	1e 16       	cp	r1, r30
     276:	1e 16       	cp	r1, r30
     278:	1e 16       	cp	r1, r30
     27a:	1e 16       	cp	r1, r30
     27c:	1e 16       	cp	r1, r30
     27e:	1e 16       	cp	r1, r30
     280:	1e 16       	cp	r1, r30
     282:	1e 16       	cp	r1, r30
     284:	1e 16       	cp	r1, r30
     286:	1e 16       	cp	r1, r30
     288:	1e 16       	cp	r1, r30
     28a:	1e 16       	cp	r1, r30
     28c:	1e 16       	cp	r1, r30
     28e:	1e 16       	cp	r1, r30
     290:	1e 16       	cp	r1, r30
     292:	1e 16       	cp	r1, r30
     294:	1e 16       	cp	r1, r30
     296:	1e 16       	cp	r1, r30
     298:	1e 16       	cp	r1, r30
     29a:	1e 16       	cp	r1, r30
     29c:	1e 16       	cp	r1, r30
     29e:	1e 16       	cp	r1, r30
     2a0:	1e 16       	cp	r1, r30
     2a2:	1e 16       	cp	r1, r30
     2a4:	1e 16       	cp	r1, r30
     2a6:	1e 16       	cp	r1, r30
     2a8:	1e 16       	cp	r1, r30
     2aa:	1e 16       	cp	r1, r30
     2ac:	1e 16       	cp	r1, r30
     2ae:	1e 16       	cp	r1, r30
     2b0:	1e 16       	cp	r1, r30
     2b2:	1e 16       	cp	r1, r30
     2b4:	1e 16       	cp	r1, r30
     2b6:	1e 16       	cp	r1, r30
     2b8:	1e 16       	cp	r1, r30
     2ba:	1e 16       	cp	r1, r30
     2bc:	1e 16       	cp	r1, r30
     2be:	1e 16       	cp	r1, r30
     2c0:	96 15       	cp	r25, r6
     2c2:	a7 15       	cp	r26, r7
     2c4:	b8 15       	cp	r27, r8
     2c6:	c9 15       	cp	r28, r9
     2c8:	da 15       	cp	r29, r10
     2ca:	eb 15       	cp	r30, r11
     2cc:	fc 15       	cp	r31, r12
     2ce:	0d 16       	cp	r0, r29

000002d0 <__trampolines_end>:
     2d0:	4e 41       	sbci	r20, 0x1E	; 30
     2d2:	4e 49       	sbci	r20, 0x9E	; 158

000002d3 <pstr_inity>:
     2d3:	49 4e 49 54 59                                      INITY

000002d8 <pstr_inf>:
     2d8:	49 4e 46                                            INF

000002db <pwr_m10>:
     2db:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     2eb:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000002f3 <pwr_p10>:
     2f3:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     303:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

0000030c <__ctors_end>:
     30c:	11 24       	eor	r1, r1
     30e:	1f be       	out	0x3f, r1	; 63
     310:	cf ef       	ldi	r28, 0xFF	; 255
     312:	d8 e0       	ldi	r29, 0x08	; 8
     314:	de bf       	out	0x3e, r29	; 62
     316:	cd bf       	out	0x3d, r28	; 61

00000318 <__do_copy_data>:
     318:	11 e0       	ldi	r17, 0x01	; 1
     31a:	a0 e0       	ldi	r26, 0x00	; 0
     31c:	b1 e0       	ldi	r27, 0x01	; 1
     31e:	e8 e3       	ldi	r30, 0x38	; 56
     320:	fb e4       	ldi	r31, 0x4B	; 75
     322:	02 c0       	rjmp	.+4      	; 0x328 <__do_copy_data+0x10>
     324:	05 90       	lpm	r0, Z+
     326:	0d 92       	st	X+, r0
     328:	a6 34       	cpi	r26, 0x46	; 70
     32a:	b1 07       	cpc	r27, r17
     32c:	d9 f7       	brne	.-10     	; 0x324 <__do_copy_data+0xc>

0000032e <__do_clear_bss>:
     32e:	24 e0       	ldi	r18, 0x04	; 4
     330:	a6 e4       	ldi	r26, 0x46	; 70
     332:	b1 e0       	ldi	r27, 0x01	; 1
     334:	01 c0       	rjmp	.+2      	; 0x338 <.do_clear_bss_start>

00000336 <.do_clear_bss_loop>:
     336:	1d 92       	st	X+, r1

00000338 <.do_clear_bss_start>:
     338:	a9 3d       	cpi	r26, 0xD9	; 217
     33a:	b2 07       	cpc	r27, r18
     33c:	e1 f7       	brne	.-8      	; 0x336 <.do_clear_bss_loop>
     33e:	0e 94 90 0c 	call	0x1920	; 0x1920 <main>
     342:	0c 94 9a 25 	jmp	0x4b34	; 0x4b34 <_exit>

00000346 <__bad_interrupt>:
     346:	5c ce       	rjmp	.-840    	; 0x0 <__vectors>

00000348 <uart_init>:
 * This function will initialize the UART baud rate registers with the correct
 * values using the AVR libc setbaud utility. In addition set the UART to
 * 8-bit, 1 stop and no parity.
 */
static void uart_init(void)
{
     348:	cf 93       	push	r28
     34a:	df 93       	push	r29
     34c:	cd b7       	in	r28, 0x3d	; 61
     34e:	de b7       	in	r29, 0x3e	; 62
     350:	69 97       	sbiw	r28, 0x19	; 25
     352:	0f b6       	in	r0, 0x3f	; 63
     354:	f8 94       	cli
     356:	de bf       	out	0x3e, r29	; 62
     358:	0f be       	out	0x3f, r0	; 63
     35a:	cd bf       	out	0x3d, r28	; 61
#if defined UBRR0H
	// get the values from the setbaud tool
	UBRR0H = UBRRH_VALUE;
     35c:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBRRL_VALUE;
     360:	82 e2       	ldi	r24, 0x22	; 34
     362:	80 93 c4 00 	sts	0x00C4, r24
#else
#error "Device is not supported by the driver"
#endif

#if USE_2X
	UCSR0A |= (1 << U2X0);
     366:	e0 ec       	ldi	r30, 0xC0	; 192
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	80 81       	ld	r24, Z
     36c:	82 60       	ori	r24, 0x02	; 2
     36e:	80 83       	st	Z, r24
#endif

	// enable RX and TX and set interrupts on rx complete
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
     370:	88 e9       	ldi	r24, 0x98	; 152
     372:	80 93 c1 00 	sts	0x00C1, r24

	// 8-bit, 1 stop bit, no parity, asynchronous UART
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00) | (0 << USBS0) |
     376:	86 e0       	ldi	r24, 0x06	; 6
     378:	80 93 c2 00 	sts	0x00C2, r24
 * \retval struct ring_buffer a struct containing the ring buffer
 */
static inline struct ring_buffer ring_buffer_init(uint8_t *buffer, uint8_t size)
{
	struct ring_buffer ring;
	ring.write_offset = 0;
     37c:	1d 8a       	std	Y+21, r1	; 0x15
	ring.read_offset = 0;
     37e:	1e 8a       	std	Y+22, r1	; 0x16
	ring.size = size;
     380:	8f ef       	ldi	r24, 0xFF	; 255
     382:	8f 8b       	std	Y+23, r24	; 0x17
	ring.buffer = buffer;
     384:	21 e0       	ldi	r18, 0x01	; 1
     386:	32 e0       	ldi	r19, 0x02	; 2
     388:	39 8f       	std	Y+25, r19	; 0x19
     38a:	28 8f       	std	Y+24, r18	; 0x18
	return ring;
     38c:	95 e0       	ldi	r25, 0x05	; 5
     38e:	fe 01       	movw	r30, r28
     390:	75 96       	adiw	r30, 0x15	; 21
     392:	de 01       	movw	r26, r28
     394:	1b 96       	adiw	r26, 0x0b	; 11
     396:	01 90       	ld	r0, Z+
     398:	0d 92       	st	X+, r0
     39a:	9a 95       	dec	r25
     39c:	e1 f7       	brne	.-8      	; 0x396 <uart_init+0x4e>
     39e:	95 e0       	ldi	r25, 0x05	; 5
     3a0:	fe 01       	movw	r30, r28
     3a2:	3b 96       	adiw	r30, 0x0b	; 11
     3a4:	de 01       	movw	r26, r28
     3a6:	50 96       	adiw	r26, 0x10	; 16
     3a8:	01 90       	ld	r0, Z+
     3aa:	0d 92       	st	X+, r0
     3ac:	9a 95       	dec	r25
     3ae:	e1 f7       	brne	.-8      	; 0x3a8 <uart_init+0x60>
			(0 << UPM01) | (0 << UPM00) | (0 << UMSEL01) |
			(0 << UMSEL00);

	// initialize the in and out buffer for the UART
	ring_buffer_out = ring_buffer_init(out_buffer, BUFFER_SIZE);
     3b0:	95 e0       	ldi	r25, 0x05	; 5
     3b2:	fe 01       	movw	r30, r28
     3b4:	70 96       	adiw	r30, 0x10	; 16
     3b6:	a2 ed       	ldi	r26, 0xD2	; 210
     3b8:	b4 e0       	ldi	r27, 0x04	; 4
     3ba:	01 90       	ld	r0, Z+
     3bc:	0d 92       	st	X+, r0
     3be:	9a 95       	dec	r25
     3c0:	e1 f7       	brne	.-8      	; 0x3ba <uart_init+0x72>
 * \retval struct ring_buffer a struct containing the ring buffer
 */
static inline struct ring_buffer ring_buffer_init(uint8_t *buffer, uint8_t size)
{
	struct ring_buffer ring;
	ring.write_offset = 0;
     3c2:	1d 8a       	std	Y+21, r1	; 0x15
	ring.read_offset = 0;
     3c4:	1e 8a       	std	Y+22, r1	; 0x16
	ring.size = size;
     3c6:	8f 8b       	std	Y+23, r24	; 0x17
	ring.buffer = buffer;
     3c8:	88 e0       	ldi	r24, 0x08	; 8
     3ca:	93 e0       	ldi	r25, 0x03	; 3
     3cc:	99 8f       	std	Y+25, r25	; 0x19
     3ce:	88 8f       	std	Y+24, r24	; 0x18
	return ring;
     3d0:	85 e0       	ldi	r24, 0x05	; 5
     3d2:	fe 01       	movw	r30, r28
     3d4:	75 96       	adiw	r30, 0x15	; 21
     3d6:	de 01       	movw	r26, r28
     3d8:	11 96       	adiw	r26, 0x01	; 1
     3da:	01 90       	ld	r0, Z+
     3dc:	0d 92       	st	X+, r0
     3de:	8a 95       	dec	r24
     3e0:	e1 f7       	brne	.-8      	; 0x3da <uart_init+0x92>
     3e2:	85 e0       	ldi	r24, 0x05	; 5
     3e4:	fe 01       	movw	r30, r28
     3e6:	31 96       	adiw	r30, 0x01	; 1
     3e8:	de 01       	movw	r26, r28
     3ea:	16 96       	adiw	r26, 0x06	; 6
     3ec:	01 90       	ld	r0, Z+
     3ee:	0d 92       	st	X+, r0
     3f0:	8a 95       	dec	r24
     3f2:	e1 f7       	brne	.-8      	; 0x3ec <uart_init+0xa4>
	ring_buffer_in = ring_buffer_init(in_buffer, BUFFER_SIZE);
     3f4:	85 e0       	ldi	r24, 0x05	; 5
     3f6:	fe 01       	movw	r30, r28
     3f8:	36 96       	adiw	r30, 0x06	; 6
     3fa:	a3 ea       	ldi	r26, 0xA3	; 163
     3fc:	b4 e0       	ldi	r27, 0x04	; 4
     3fe:	01 90       	ld	r0, Z+
     400:	0d 92       	st	X+, r0
     402:	8a 95       	dec	r24
     404:	e1 f7       	brne	.-8      	; 0x3fe <uart_init+0xb6>
}
     406:	69 96       	adiw	r28, 0x19	; 25
     408:	0f b6       	in	r0, 0x3f	; 63
     40a:	f8 94       	cli
     40c:	de bf       	out	0x3e, r29	; 62
     40e:	0f be       	out	0x3f, r0	; 63
     410:	cd bf       	out	0x3d, r28	; 61
     412:	df 91       	pop	r29
     414:	cf 91       	pop	r28
     416:	08 95       	ret

00000418 <MaxRTDinit>:
*************************************************/
static inline void MaxRTDinit( unsigned char dataWrite, unsigned char ch)
{
	unsigned char dummy;

	switch (ch)
     418:	62 30       	cpi	r22, 0x02	; 2
     41a:	59 f0       	breq	.+22     	; 0x432 <MaxRTDinit+0x1a>
     41c:	18 f4       	brcc	.+6      	; 0x424 <MaxRTDinit+0xc>
     41e:	61 30       	cpi	r22, 0x01	; 1
     420:	31 f0       	breq	.+12     	; 0x42e <MaxRTDinit+0x16>
     422:	0c c0       	rjmp	.+24     	; 0x43c <MaxRTDinit+0x24>
     424:	63 30       	cpi	r22, 0x03	; 3
     426:	39 f0       	breq	.+14     	; 0x436 <MaxRTDinit+0x1e>
     428:	64 30       	cpi	r22, 0x04	; 4
     42a:	39 f0       	breq	.+14     	; 0x43a <MaxRTDinit+0x22>
     42c:	07 c0       	rjmp	.+14     	; 0x43c <MaxRTDinit+0x24>
	{
		case 1:
		PORTD &= 0b11101111;	// Set CS1 low
     42e:	5c 98       	cbi	0x0b, 4	; 11
		break;
     430:	05 c0       	rjmp	.+10     	; 0x43c <MaxRTDinit+0x24>
		
		case 2:
		PORTD &= 0b11011111;	// Set CS2 low
     432:	5d 98       	cbi	0x0b, 5	; 11
		break;
     434:	03 c0       	rjmp	.+6      	; 0x43c <MaxRTDinit+0x24>
		
		case 3:
		PORTD &= 0b10111111;	// Set CS3 low
     436:	5e 98       	cbi	0x0b, 6	; 11
		break;
     438:	01 c0       	rjmp	.+2      	; 0x43c <MaxRTDinit+0x24>
		
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
     43a:	5f 98       	cbi	0x0b, 7	; 11
		break;
	}
	SPDR = 0x80;				// Configuration
     43c:	90 e8       	ldi	r25, 0x80	; 128
     43e:	9e bd       	out	0x2e, r25	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     440:	0d b4       	in	r0, 0x2d	; 45
     442:	07 fe       	sbrs	r0, 7
     444:	fd cf       	rjmp	.-6      	; 0x440 <MaxRTDinit+0x28>
	dummy = SPDR;				//just for clearing SPIF
     446:	9e b5       	in	r25, 0x2e	; 46
	SPDR = dataWrite;
     448:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     44a:	0d b4       	in	r0, 0x2d	; 45
     44c:	07 fe       	sbrs	r0, 7
     44e:	fd cf       	rjmp	.-6      	; 0x44a <MaxRTDinit+0x32>
	dummy = SPDR;
     450:	8e b5       	in	r24, 0x2e	; 46
	
	PORTD |= 0b11110000;		// Set all CS High
     452:	8b b1       	in	r24, 0x0b	; 11
     454:	80 6f       	ori	r24, 0xF0	; 240
     456:	8b b9       	out	0x0b, r24	; 11
     458:	08 95       	ret

0000045a <GenCrc16>:
		idx ++;
	}	
}

static inline int GenCrc16(char c[], int nByte)	// CRC-CCITT (XModem)
{
     45a:	cf 93       	push	r28
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
     45c:	16 16       	cp	r1, r22
     45e:	17 06       	cpc	r1, r23
     460:	3c f5       	brge	.+78     	; 0x4b0 <GenCrc16+0x56>
     462:	fc 01       	movw	r30, r24
     464:	68 0f       	add	r22, r24
     466:	79 1f       	adc	r23, r25
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	90 e0       	ldi	r25, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
     46c:	b8 e0       	ldi	r27, 0x08	; 8
     46e:	a0 e0       	ldi	r26, 0x00	; 0
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
     470:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
     472:	29 2f       	mov	r18, r25
     474:	33 27       	eor	r19, r19
     476:	27 fd       	sbrc	r18, 7
     478:	3a 95       	dec	r19
     47a:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
     47c:	32 2f       	mov	r19, r18
     47e:	22 27       	eor	r18, r18
     480:	4b 2f       	mov	r20, r27
     482:	5a 2f       	mov	r21, r26
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
     484:	33 23       	and	r19, r19
     486:	3c f4       	brge	.+14     	; 0x496 <GenCrc16+0x3c>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
     488:	22 0f       	add	r18, r18
     48a:	33 1f       	adc	r19, r19
     48c:	c1 e2       	ldi	r28, 0x21	; 33
     48e:	2c 27       	eor	r18, r28
     490:	c0 e1       	ldi	r28, 0x10	; 16
     492:	3c 27       	eor	r19, r28
     494:	02 c0       	rjmp	.+4      	; 0x49a <GenCrc16+0x40>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
     496:	22 0f       	add	r18, r18
     498:	33 1f       	adc	r19, r19
     49a:	41 50       	subi	r20, 0x01	; 1
     49c:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
     49e:	91 f7       	brne	.-28     	; 0x484 <GenCrc16+0x2a>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
     4a0:	98 2f       	mov	r25, r24
     4a2:	88 27       	eor	r24, r24
     4a4:	82 27       	eor	r24, r18
     4a6:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
     4a8:	e6 17       	cp	r30, r22
     4aa:	f7 07       	cpc	r31, r23
     4ac:	09 f7       	brne	.-62     	; 0x470 <GenCrc16+0x16>
     4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <GenCrc16+0x5a>
{
	int Polynominal = 0x1021;
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	90 e0       	ldi	r25, 0x00	; 0
		}
		CRC = (int)((CRC << 8) ^ Remainder);
		index++;
	}
	return CRC;
}
     4b4:	cf 91       	pop	r28
     4b6:	08 95       	ret

000004b8 <ParamParse>:
		printStatus("VSerror");
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
     4b8:	0f 93       	push	r16
     4ba:	1f 93       	push	r17
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	ec 01       	movw	r28, r24
     4c2:	06 2f       	mov	r16, r22
     4c4:	17 2f       	mov	r17, r23
	int s_len = strnlen(stringToParse, rx_size) - 5;
     4c6:	6e e1       	ldi	r22, 0x1E	; 30
     4c8:	70 e0       	ldi	r23, 0x00	; 0
     4ca:	0e 94 4d 23 	call	0x469a	; 0x469a <strnlen>
     4ce:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
     4d0:	8b 30       	cpi	r24, 0x0B	; 11
     4d2:	91 05       	cpc	r25, r1
     4d4:	64 f0       	brlt	.+24     	; 0x4ee <ParamParse+0x36>
     4d6:	fe 01       	movw	r30, r28
     4d8:	3a 96       	adiw	r30, 0x0a	; 10
     4da:	a0 2f       	mov	r26, r16
     4dc:	b1 2f       	mov	r27, r17
     4de:	9e 01       	movw	r18, r28
     4e0:	28 0f       	add	r18, r24
     4e2:	39 1f       	adc	r19, r25
	{
		param[idx] = stringToParse[i];
     4e4:	91 91       	ld	r25, Z+
     4e6:	9d 93       	st	X+, r25
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
     4e8:	e2 17       	cp	r30, r18
     4ea:	f3 07       	cpc	r31, r19
     4ec:	d9 f7       	brne	.-10     	; 0x4e4 <ParamParse+0x2c>
	{
		param[idx] = stringToParse[i];
		idx ++;
	}	
}
     4ee:	df 91       	pop	r29
     4f0:	cf 91       	pop	r28
     4f2:	1f 91       	pop	r17
     4f4:	0f 91       	pop	r16
     4f6:	08 95       	ret

000004f8 <CrcCompare>:
	}
	return CRC;
}

static inline bool CrcCompare(char *crc_in, char *crc_calc)
{
     4f8:	0f 93       	push	r16
     4fa:	1f 93       	push	r17
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	ec 01       	movw	r28, r24
     502:	8b 01       	movw	r16, r22
	strupr(crc_in);
     504:	0e 94 58 23 	call	0x46b0	; 0x46b0 <strupr>
	strupr(crc_calc);
     508:	c8 01       	movw	r24, r16
     50a:	0e 94 58 23 	call	0x46b0	; 0x46b0 <strupr>
	
	if(crc_in[0] == '0' && crc_in[1] == '0' && crc_in[2] == '0')
     50e:	88 81       	ld	r24, Y
     510:	80 33       	cpi	r24, 0x30	; 48
     512:	19 f5       	brne	.+70     	; 0x55a <CrcCompare+0x62>
     514:	89 81       	ldd	r24, Y+1	; 0x01
     516:	80 33       	cpi	r24, 0x30	; 48
     518:	09 f0       	breq	.+2      	; 0x51c <CrcCompare+0x24>
     51a:	41 c0       	rjmp	.+130    	; 0x59e <CrcCompare+0xa6>
     51c:	8a 81       	ldd	r24, Y+2	; 0x02
     51e:	80 33       	cpi	r24, 0x30	; 48
     520:	b9 f5       	brne	.+110    	; 0x590 <CrcCompare+0x98>
	{
			if(crc_in[3] == crc_calc[0])
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	2b 81       	ldd	r18, Y+3	; 0x03
     526:	f8 01       	movw	r30, r16
     528:	90 81       	ld	r25, Z
     52a:	29 17       	cp	r18, r25
     52c:	e9 f1       	breq	.+122    	; 0x5a8 <CrcCompare+0xb0>
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	3b c0       	rjmp	.+118    	; 0x5a8 <CrcCompare+0xb0>
			}
	}

	if(crc_in[0] == '0' && crc_in[1] == '0')
	{
		if((crc_in[2] == crc_calc[0]) && (crc_in[3] == crc_calc[1]))
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	2b 81       	ldd	r18, Y+3	; 0x03
     536:	f8 01       	movw	r30, r16
     538:	91 81       	ldd	r25, Z+1	; 0x01
     53a:	29 17       	cp	r18, r25
     53c:	a9 f1       	breq	.+106    	; 0x5a8 <CrcCompare+0xb0>
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	33 c0       	rjmp	.+102    	; 0x5a8 <CrcCompare+0xb0>
		}
	}
	
	if(crc_in[0] == '0')
	{
		if((crc_in[1] == crc_calc[0]) && (crc_in[2] == crc_calc[1]) &&
     542:	9a 81       	ldd	r25, Y+2	; 0x02
     544:	f8 01       	movw	r30, r16
     546:	81 81       	ldd	r24, Z+1	; 0x01
     548:	98 13       	cpse	r25, r24
     54a:	1a c0       	rjmp	.+52     	; 0x580 <CrcCompare+0x88>
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	2b 81       	ldd	r18, Y+3	; 0x03
     550:	92 81       	ldd	r25, Z+2	; 0x02
     552:	29 17       	cp	r18, r25
     554:	49 f1       	breq	.+82     	; 0x5a8 <CrcCompare+0xb0>
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	27 c0       	rjmp	.+78     	; 0x5a8 <CrcCompare+0xb0>
			return false;
		}
	}	
	else
	{
		if((crc_in[0] == crc_calc[0]) && (crc_in[1] == crc_calc[1]) &&
     55a:	f8 01       	movw	r30, r16
     55c:	90 81       	ld	r25, Z
     55e:	89 13       	cpse	r24, r25
     560:	11 c0       	rjmp	.+34     	; 0x584 <CrcCompare+0x8c>
     562:	99 81       	ldd	r25, Y+1	; 0x01
     564:	81 81       	ldd	r24, Z+1	; 0x01
     566:	98 13       	cpse	r25, r24
     568:	0f c0       	rjmp	.+30     	; 0x588 <CrcCompare+0x90>
     56a:	9a 81       	ldd	r25, Y+2	; 0x02
     56c:	82 81       	ldd	r24, Z+2	; 0x02
     56e:	98 13       	cpse	r25, r24
     570:	0d c0       	rjmp	.+26     	; 0x58c <CrcCompare+0x94>
			(crc_in[2] == crc_calc[2]) && (crc_in[3] == crc_calc[3]))
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	2b 81       	ldd	r18, Y+3	; 0x03
     576:	93 81       	ldd	r25, Z+3	; 0x03
     578:	29 17       	cp	r18, r25
     57a:	b1 f0       	breq	.+44     	; 0x5a8 <CrcCompare+0xb0>
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	14 c0       	rjmp	.+40     	; 0x5a8 <CrcCompare+0xb0>
		{
			return true;
		}
		else
		{
			return false;
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	12 c0       	rjmp	.+36     	; 0x5a8 <CrcCompare+0xb0>
			{
				return true;
			}
			else
			{
				return false;
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	10 c0       	rjmp	.+32     	; 0x5a8 <CrcCompare+0xb0>
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	0e c0       	rjmp	.+28     	; 0x5a8 <CrcCompare+0xb0>
     58c:	80 e0       	ldi	r24, 0x00	; 0
     58e:	0c c0       	rjmp	.+24     	; 0x5a8 <CrcCompare+0xb0>
			}
	}

	if(crc_in[0] == '0' && crc_in[1] == '0')
	{
		if((crc_in[2] == crc_calc[0]) && (crc_in[3] == crc_calc[1]))
     590:	9a 81       	ldd	r25, Y+2	; 0x02
     592:	f8 01       	movw	r30, r16
     594:	80 81       	ld	r24, Z
     596:	98 17       	cp	r25, r24
     598:	61 f2       	breq	.-104    	; 0x532 <CrcCompare+0x3a>
		{
			return true;
		}
		else
		{
			return false;
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	05 c0       	rjmp	.+10     	; 0x5a8 <CrcCompare+0xb0>
		}
	}
	
	if(crc_in[0] == '0')
	{
		if((crc_in[1] == crc_calc[0]) && (crc_in[2] == crc_calc[1]) &&
     59e:	f8 01       	movw	r30, r16
     5a0:	90 81       	ld	r25, Z
     5a2:	89 17       	cp	r24, r25
     5a4:	71 f2       	breq	.-100    	; 0x542 <CrcCompare+0x4a>
		{
			return true;
		}
		else
		{
			return false;
     5a6:	80 e0       	ldi	r24, 0x00	; 0
			else
			{
				return false;
			}
	}
}
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	1f 91       	pop	r17
     5ae:	0f 91       	pop	r16
     5b0:	08 95       	ret

000005b2 <printStatus>:
	
	PORTD |= 0b11110000;		// Set all CS High
}

static inline void printStatus (char msg_string[])	// Send string on UART
{
     5b2:	cf 92       	push	r12
     5b4:	df 92       	push	r13
     5b6:	ef 92       	push	r14
     5b8:	ff 92       	push	r15
     5ba:	0f 93       	push	r16
     5bc:	1f 93       	push	r17
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
     5c2:	cd b7       	in	r28, 0x3d	; 61
     5c4:	de b7       	in	r29, 0x3e	; 62
     5c6:	a8 97       	sbiw	r28, 0x28	; 40
     5c8:	0f b6       	in	r0, 0x3f	; 63
     5ca:	f8 94       	cli
     5cc:	de bf       	out	0x3e, r29	; 62
     5ce:	0f be       	out	0x3f, r0	; 63
     5d0:	cd bf       	out	0x3d, r28	; 61
     5d2:	fc 01       	movw	r30, r24
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
     5d4:	81 e2       	ldi	r24, 0x21	; 33
     5d6:	89 83       	std	Y+1, r24	; 0x01
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
     5d8:	a4 eb       	ldi	r26, 0xB4	; 180
     5da:	b4 e0       	ldi	r27, 0x04	; 4
     5dc:	11 96       	adiw	r26, 0x01	; 1
     5de:	8c 91       	ld	r24, X
     5e0:	11 97       	sbiw	r26, 0x01	; 1
     5e2:	8a 83       	std	Y+2, r24	; 0x02
     5e4:	12 96       	adiw	r26, 0x02	; 2
     5e6:	8c 91       	ld	r24, X
     5e8:	12 97       	sbiw	r26, 0x02	; 2
     5ea:	8b 83       	std	Y+3, r24	; 0x03
     5ec:	13 96       	adiw	r26, 0x03	; 3
     5ee:	8c 91       	ld	r24, X
     5f0:	8c 83       	std	Y+4, r24	; 0x04
     5f2:	cf 01       	movw	r24, r30
     5f4:	ae 01       	movw	r20, r28
     5f6:	4b 5f       	subi	r20, 0xFB	; 251
     5f8:	5f 4f       	sbci	r21, 0xFF	; 255
     5fa:	00 e0       	ldi	r16, 0x00	; 0
     5fc:	10 e0       	ldi	r17, 0x00	; 0
     5fe:	08 c0       	rjmp	.+16     	; 0x610 <printStatus+0x5e>
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
     600:	dc 01       	movw	r26, r24
     602:	2d 91       	ld	r18, X+
     604:	cd 01       	movw	r24, r26
     606:	da 01       	movw	r26, r20
     608:	2d 93       	st	X+, r18
     60a:	ad 01       	movw	r20, r26
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
     60c:	0f 5f       	subi	r16, 0xFF	; 255
     60e:	1f 4f       	sbci	r17, 0xFF	; 255
     610:	df 01       	movw	r26, r30
     612:	0d 90       	ld	r0, X+
     614:	00 20       	and	r0, r0
     616:	e9 f7       	brne	.-6      	; 0x612 <printStatus+0x60>
     618:	9d 01       	movw	r18, r26
     61a:	2e 1b       	sub	r18, r30
     61c:	3f 0b       	sbc	r19, r31
     61e:	2e 5f       	subi	r18, 0xFE	; 254
     620:	3f 4f       	sbci	r19, 0xFF	; 255
     622:	02 17       	cp	r16, r18
     624:	13 07       	cpc	r17, r19
     626:	60 f3       	brcs	.-40     	; 0x600 <printStatus+0x4e>
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
     628:	78 01       	movw	r14, r16
     62a:	bf ef       	ldi	r27, 0xFF	; 255
     62c:	eb 1a       	sub	r14, r27
     62e:	fb 0a       	sbc	r15, r27
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
     630:	1e 14       	cp	r1, r14
     632:	1f 04       	cpc	r1, r15
     634:	0c f0       	brlt	.+2      	; 0x638 <printStatus+0x86>
     636:	d7 c0       	rjmp	.+430    	; 0x7e6 <printStatus+0x234>
     638:	fe 01       	movw	r30, r28
     63a:	31 96       	adiw	r30, 0x01	; 1
     63c:	a7 01       	movw	r20, r14
     63e:	4e 0f       	add	r20, r30
     640:	5f 1f       	adc	r21, r31
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	90 e0       	ldi	r25, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
     646:	b8 e0       	ldi	r27, 0x08	; 8
     648:	d1 2c       	mov	r13, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
     64a:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
     64c:	29 2f       	mov	r18, r25
     64e:	33 27       	eor	r19, r19
     650:	27 fd       	sbrc	r18, 7
     652:	3a 95       	dec	r19
     654:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
     656:	32 2f       	mov	r19, r18
     658:	22 27       	eor	r18, r18
     65a:	6b 2f       	mov	r22, r27
     65c:	7d 2d       	mov	r23, r13
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
     65e:	33 23       	and	r19, r19
     660:	3c f4       	brge	.+14     	; 0x670 <printStatus+0xbe>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
     662:	22 0f       	add	r18, r18
     664:	33 1f       	adc	r19, r19
     666:	a1 e2       	ldi	r26, 0x21	; 33
     668:	2a 27       	eor	r18, r26
     66a:	a0 e1       	ldi	r26, 0x10	; 16
     66c:	3a 27       	eor	r19, r26
     66e:	02 c0       	rjmp	.+4      	; 0x674 <printStatus+0xc2>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
     670:	22 0f       	add	r18, r18
     672:	33 1f       	adc	r19, r19
     674:	61 50       	subi	r22, 0x01	; 1
     676:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
     678:	91 f7       	brne	.-28     	; 0x65e <printStatus+0xac>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
     67a:	98 2f       	mov	r25, r24
     67c:	88 27       	eor	r24, r24
     67e:	82 27       	eor	r24, r18
     680:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
     682:	e4 17       	cp	r30, r20
     684:	f5 07       	cpc	r31, r21
     686:	09 f7       	brne	.-62     	; 0x64a <printStatus+0x98>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
     688:	6c 01       	movw	r12, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     68a:	40 e1       	ldi	r20, 0x10	; 16
     68c:	62 e6       	ldi	r22, 0x62	; 98
     68e:	74 e0       	ldi	r23, 0x04	; 4
     690:	0e 94 62 23 	call	0x46c4	; 0x46c4 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
     694:	82 e6       	ldi	r24, 0x62	; 98
     696:	94 e0       	ldi	r25, 0x04	; 4
     698:	0e 94 58 23 	call	0x46b0	; 0x46b0 <strupr>
	if(crcXmodem < 0x10)
     69c:	b0 e1       	ldi	r27, 0x10	; 16
     69e:	cb 16       	cp	r12, r27
     6a0:	d1 04       	cpc	r13, r1
     6a2:	98 f4       	brcc	.+38     	; 0x6ca <printStatus+0x118>
	{
		tx_string[cnt+4] = crc[0];
     6a4:	80 91 62 04 	lds	r24, 0x0462
     6a8:	fe 01       	movw	r30, r28
     6aa:	e0 0f       	add	r30, r16
     6ac:	f1 1f       	adc	r31, r17
     6ae:	85 83       	std	Z+5, r24	; 0x05
		tx_string[cnt+3] = '0';
     6b0:	80 e3       	ldi	r24, 0x30	; 48
     6b2:	fe 01       	movw	r30, r28
     6b4:	e0 0f       	add	r30, r16
     6b6:	f1 1f       	adc	r31, r17
     6b8:	84 83       	std	Z+4, r24	; 0x04
		tx_string[cnt+2] = '0';
     6ba:	fe 01       	movw	r30, r28
     6bc:	e0 0f       	add	r30, r16
     6be:	f1 1f       	adc	r31, r17
     6c0:	83 83       	std	Z+3, r24	; 0x03
		tx_string[cnt+1] = '0';
     6c2:	fe 01       	movw	r30, r28
     6c4:	ee 0d       	add	r30, r14
     6c6:	ff 1d       	adc	r31, r15
     6c8:	81 83       	std	Z+1, r24	; 0x01
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
     6ca:	c6 01       	movw	r24, r12
     6cc:	40 97       	sbiw	r24, 0x10	; 16
     6ce:	80 3f       	cpi	r24, 0xF0	; 240
     6d0:	91 05       	cpc	r25, r1
     6d2:	b8 f4       	brcc	.+46     	; 0x702 <printStatus+0x150>
	{
		tx_string[cnt+4] = crc[1];
     6d4:	a2 e6       	ldi	r26, 0x62	; 98
     6d6:	b4 e0       	ldi	r27, 0x04	; 4
     6d8:	11 96       	adiw	r26, 0x01	; 1
     6da:	8c 91       	ld	r24, X
     6dc:	11 97       	sbiw	r26, 0x01	; 1
     6de:	fe 01       	movw	r30, r28
     6e0:	e0 0f       	add	r30, r16
     6e2:	f1 1f       	adc	r31, r17
     6e4:	85 83       	std	Z+5, r24	; 0x05
		tx_string[cnt+3] = crc[0];
     6e6:	8c 91       	ld	r24, X
     6e8:	fe 01       	movw	r30, r28
     6ea:	e0 0f       	add	r30, r16
     6ec:	f1 1f       	adc	r31, r17
     6ee:	84 83       	std	Z+4, r24	; 0x04
		tx_string[cnt+2] = '0';
     6f0:	80 e3       	ldi	r24, 0x30	; 48
     6f2:	fe 01       	movw	r30, r28
     6f4:	e0 0f       	add	r30, r16
     6f6:	f1 1f       	adc	r31, r17
     6f8:	83 83       	std	Z+3, r24	; 0x03
		tx_string[cnt+1] = '0';		
     6fa:	fe 01       	movw	r30, r28
     6fc:	ee 0d       	add	r30, r14
     6fe:	ff 1d       	adc	r31, r15
     700:	81 83       	std	Z+1, r24	; 0x01
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
     702:	c6 01       	movw	r24, r12
     704:	9a 95       	dec	r25
     706:	81 15       	cp	r24, r1
     708:	9f 40       	sbci	r25, 0x0F	; 15
     70a:	b8 f4       	brcc	.+46     	; 0x73a <printStatus+0x188>
	{
		tx_string[cnt+4] = crc[2];
     70c:	e2 e6       	ldi	r30, 0x62	; 98
     70e:	f4 e0       	ldi	r31, 0x04	; 4
     710:	82 81       	ldd	r24, Z+2	; 0x02
     712:	de 01       	movw	r26, r28
     714:	a0 0f       	add	r26, r16
     716:	b1 1f       	adc	r27, r17
     718:	15 96       	adiw	r26, 0x05	; 5
     71a:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[1];
     71c:	81 81       	ldd	r24, Z+1	; 0x01
     71e:	de 01       	movw	r26, r28
     720:	a0 0f       	add	r26, r16
     722:	b1 1f       	adc	r27, r17
     724:	14 96       	adiw	r26, 0x04	; 4
     726:	8c 93       	st	X, r24
     728:	14 97       	sbiw	r26, 0x04	; 4
		tx_string[cnt+2] = crc[0];
     72a:	80 81       	ld	r24, Z
     72c:	fd 01       	movw	r30, r26
     72e:	83 83       	std	Z+3, r24	; 0x03
		tx_string[cnt+1] = '0';		
     730:	80 e3       	ldi	r24, 0x30	; 48
     732:	fe 01       	movw	r30, r28
     734:	ee 0d       	add	r30, r14
     736:	ff 1d       	adc	r31, r15
     738:	81 83       	std	Z+1, r24	; 0x01
	}
	if(crcXmodem >= 0x1000)
     73a:	c1 14       	cp	r12, r1
     73c:	80 e1       	ldi	r24, 0x10	; 16
     73e:	d8 06       	cpc	r13, r24
     740:	c0 f0       	brcs	.+48     	; 0x772 <printStatus+0x1c0>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
     742:	de 01       	movw	r26, r28
     744:	ae 0d       	add	r26, r14
     746:	bf 1d       	adc	r27, r15
     748:	e2 e6       	ldi	r30, 0x62	; 98
     74a:	f4 e0       	ldi	r31, 0x04	; 4
     74c:	80 81       	ld	r24, Z
     74e:	11 96       	adiw	r26, 0x01	; 1
     750:	8c 93       	st	X, r24
		tx_string[cnt+2] = crc[1];
     752:	81 81       	ldd	r24, Z+1	; 0x01
     754:	de 01       	movw	r26, r28
     756:	a0 0f       	add	r26, r16
     758:	b1 1f       	adc	r27, r17
     75a:	13 96       	adiw	r26, 0x03	; 3
     75c:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[2];
     75e:	82 81       	ldd	r24, Z+2	; 0x02
     760:	de 01       	movw	r26, r28
     762:	a0 0f       	add	r26, r16
     764:	b1 1f       	adc	r27, r17
     766:	14 96       	adiw	r26, 0x04	; 4
     768:	8c 93       	st	X, r24
     76a:	14 97       	sbiw	r26, 0x04	; 4
		tx_string[cnt+4] = crc[3];
     76c:	83 81       	ldd	r24, Z+3	; 0x03
     76e:	fd 01       	movw	r30, r26
     770:	85 83       	std	Z+5, r24	; 0x05
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
     772:	c8 01       	movw	r24, r16
     774:	05 96       	adiw	r24, 0x05	; 5
     776:	fe 01       	movw	r30, r28
     778:	e8 0f       	add	r30, r24
     77a:	f9 1f       	adc	r31, r25
     77c:	2d e0       	ldi	r18, 0x0D	; 13
     77e:	21 83       	std	Z+1, r18	; 0x01
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
     780:	99 23       	and	r25, r25
     782:	0c f4       	brge	.+2      	; 0x786 <printStatus+0x1d4>
     784:	3e c0       	rjmp	.+124    	; 0x802 <printStatus+0x250>
     786:	ae 01       	movw	r20, r28
     788:	4f 5f       	subi	r20, 0xFF	; 255
     78a:	5f 4f       	sbci	r21, 0xFF	; 255
     78c:	0a 5f       	subi	r16, 0xFA	; 250
     78e:	1f 4f       	sbci	r17, 0xFF	; 255
     790:	04 0f       	add	r16, r20
     792:	15 1f       	adc	r17, r21
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
     794:	e2 ed       	ldi	r30, 0xD2	; 210
     796:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
     798:	61 ec       	ldi	r22, 0xC1	; 193
     79a:	70 e0       	ldi	r23, 0x00	; 0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     79c:	30 e0       	ldi	r19, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
     79e:	da 01       	movw	r26, r20
     7a0:	8d 91       	ld	r24, X+
     7a2:	ad 01       	movw	r20, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
     7a4:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
     7a6:	21 81       	ldd	r18, Z+1	; 0x01
     7a8:	90 81       	ld	r25, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
     7aa:	29 13       	cpse	r18, r25
     7ac:	04 c0       	rjmp	.+8      	; 0x7b6 <printStatus+0x204>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
     7ae:	db 01       	movw	r26, r22
     7b0:	9c 91       	ld	r25, X
     7b2:	90 62       	ori	r25, 0x20	; 32
     7b4:	9c 93       	st	X, r25
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
     7b6:	90 81       	ld	r25, Z
     7b8:	a3 81       	ldd	r26, Z+3	; 0x03
     7ba:	b4 81       	ldd	r27, Z+4	; 0x04
     7bc:	a9 0f       	add	r26, r25
     7be:	b1 1d       	adc	r27, r1
     7c0:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
     7c2:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     7c4:	a2 2f       	mov	r26, r18
     7c6:	b0 e0       	ldi	r27, 0x00	; 0
     7c8:	82 81       	ldd	r24, Z+2	; 0x02
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	01 97       	sbiw	r24, 0x01	; 1
     7ce:	a8 17       	cp	r26, r24
     7d0:	b9 07       	cpc	r27, r25
     7d2:	11 f0       	breq	.+4      	; 0x7d8 <printStatus+0x226>
     7d4:	2f 5f       	subi	r18, 0xFF	; 255
     7d6:	01 c0       	rjmp	.+2      	; 0x7da <printStatus+0x228>
     7d8:	23 2f       	mov	r18, r19
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
     7da:	20 83       	st	Z, r18
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
     7dc:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
     7de:	40 17       	cp	r20, r16
     7e0:	51 07       	cpc	r21, r17
     7e2:	e9 f6       	brne	.-70     	; 0x79e <printStatus+0x1ec>
     7e4:	0e c0       	rjmp	.+28     	; 0x802 <printStatus+0x250>
     7e6:	40 e1       	ldi	r20, 0x10	; 16
     7e8:	62 e6       	ldi	r22, 0x62	; 98
     7ea:	74 e0       	ldi	r23, 0x04	; 4
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	0e 94 62 23 	call	0x46c4	; 0x46c4 <__itoa_ncheck>
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
     7f4:	82 e6       	ldi	r24, 0x62	; 98
     7f6:	94 e0       	ldi	r25, 0x04	; 4
     7f8:	0e 94 58 23 	call	0x46b0	; 0x46b0 <strupr>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
     7fc:	c1 2c       	mov	r12, r1
     7fe:	d1 2c       	mov	r13, r1
     800:	51 cf       	rjmp	.-350    	; 0x6a4 <printStatus+0xf2>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
	}	
}
     802:	a8 96       	adiw	r28, 0x28	; 40
     804:	0f b6       	in	r0, 0x3f	; 63
     806:	f8 94       	cli
     808:	de bf       	out	0x3e, r29	; 62
     80a:	0f be       	out	0x3f, r0	; 63
     80c:	cd bf       	out	0x3d, r28	; 61
     80e:	df 91       	pop	r29
     810:	cf 91       	pop	r28
     812:	1f 91       	pop	r17
     814:	0f 91       	pop	r16
     816:	ff 90       	pop	r15
     818:	ef 90       	pop	r14
     81a:	df 90       	pop	r13
     81c:	cf 90       	pop	r12
     81e:	08 95       	ret

00000820 <__vector_19>:
 *
 * This handler is called each time the UART data register is available for
 * sending data.
 */
ISR(UART0_DATA_EMPTY_IRQ)
{
     820:	1f 92       	push	r1
     822:	0f 92       	push	r0
     824:	0f b6       	in	r0, 0x3f	; 63
     826:	0f 92       	push	r0
     828:	11 24       	eor	r1, r1
     82a:	2f 93       	push	r18
     82c:	3f 93       	push	r19
     82e:	4f 93       	push	r20
     830:	5f 93       	push	r21
     832:	8f 93       	push	r24
     834:	9f 93       	push	r25
     836:	af 93       	push	r26
     838:	bf 93       	push	r27
     83a:	ef 93       	push	r30
     83c:	ff 93       	push	r31
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
     83e:	e2 ed       	ldi	r30, 0xD2	; 210
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	91 81       	ldd	r25, Z+1	; 0x01
     844:	80 81       	ld	r24, Z
	// if there is data in the ring buffer, fetch it and send it
	if (!ring_buffer_is_empty(&ring_buffer_out))
     846:	98 17       	cp	r25, r24
     848:	b9 f0       	breq	.+46     	; 0x878 <__vector_19+0x58>
 * \returns next data byte in buffer
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
     84a:	81 81       	ldd	r24, Z+1	; 0x01
     84c:	a3 81       	ldd	r26, Z+3	; 0x03
     84e:	b4 81       	ldd	r27, Z+4	; 0x04
     850:	a8 0f       	add	r26, r24
     852:	b1 1d       	adc	r27, r1
     854:	3c 91       	ld	r19, X
 *
 * \returns the next read offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_read(const struct ring_buffer *ring)
{
	return get_next(ring->read_offset, ring->size);
     856:	21 81       	ldd	r18, Z+1	; 0x01
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     858:	42 2f       	mov	r20, r18
     85a:	50 e0       	ldi	r21, 0x00	; 0
     85c:	82 81       	ldd	r24, Z+2	; 0x02
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	01 97       	sbiw	r24, 0x01	; 1
     862:	48 17       	cp	r20, r24
     864:	59 07       	cpc	r21, r25
     866:	11 f0       	breq	.+4      	; 0x86c <__vector_19+0x4c>
     868:	2f 5f       	subi	r18, 0xFF	; 255
     86a:	01 c0       	rjmp	.+2      	; 0x86e <__vector_19+0x4e>
     86c:	20 e0       	ldi	r18, 0x00	; 0
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
	ring->read_offset = ring_buffer_get_next_read(ring);
     86e:	20 93 d3 04 	sts	0x04D3, r18
	{
		UDR0 = ring_buffer_get(&ring_buffer_out);
     872:	30 93 c6 00 	sts	0x00C6, r19
     876:	05 c0       	rjmp	.+10     	; 0x882 <__vector_19+0x62>
	}
	else 
	{
		// no more data to send, turn off data ready interrupt
		UCSR0B &= ~(1 << UDRIE0);
     878:	e1 ec       	ldi	r30, 0xC1	; 193
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	80 81       	ld	r24, Z
     87e:	8f 7d       	andi	r24, 0xDF	; 223
     880:	80 83       	st	Z, r24
	}
}
     882:	ff 91       	pop	r31
     884:	ef 91       	pop	r30
     886:	bf 91       	pop	r27
     888:	af 91       	pop	r26
     88a:	9f 91       	pop	r25
     88c:	8f 91       	pop	r24
     88e:	5f 91       	pop	r21
     890:	4f 91       	pop	r20
     892:	3f 91       	pop	r19
     894:	2f 91       	pop	r18
     896:	0f 90       	pop	r0
     898:	0f be       	out	0x3f, r0	; 63
     89a:	0f 90       	pop	r0
     89c:	1f 90       	pop	r1
     89e:	18 95       	reti

000008a0 <__vector_18>:
 * \brief Data RX interrupt handler
 *
 * This is the handler for UART receive data
 */
ISR(UART0_RX_IRQ)
{
     8a0:	1f 92       	push	r1
     8a2:	0f 92       	push	r0
     8a4:	0f b6       	in	r0, 0x3f	; 63
     8a6:	0f 92       	push	r0
     8a8:	11 24       	eor	r1, r1
     8aa:	2f 93       	push	r18
     8ac:	4f 93       	push	r20
     8ae:	5f 93       	push	r21
     8b0:	8f 93       	push	r24
     8b2:	9f 93       	push	r25
     8b4:	af 93       	push	r26
     8b6:	bf 93       	push	r27
     8b8:	ef 93       	push	r30
     8ba:	ff 93       	push	r31
	ring_buffer_put(&ring_buffer_in, UDR0);
     8bc:	80 91 c6 00 	lds	r24, 0x00C6
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
     8c0:	e3 ea       	ldi	r30, 0xA3	; 163
     8c2:	f4 e0       	ldi	r31, 0x04	; 4
     8c4:	90 81       	ld	r25, Z
     8c6:	a3 81       	ldd	r26, Z+3	; 0x03
     8c8:	b4 81       	ldd	r27, Z+4	; 0x04
     8ca:	a9 0f       	add	r26, r25
     8cc:	b1 1d       	adc	r27, r1
     8ce:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
     8d0:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     8d2:	42 2f       	mov	r20, r18
     8d4:	50 e0       	ldi	r21, 0x00	; 0
     8d6:	82 81       	ldd	r24, Z+2	; 0x02
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	01 97       	sbiw	r24, 0x01	; 1
     8dc:	48 17       	cp	r20, r24
     8de:	59 07       	cpc	r21, r25
     8e0:	11 f0       	breq	.+4      	; 0x8e6 <__vector_18+0x46>
     8e2:	2f 5f       	subi	r18, 0xFF	; 255
     8e4:	01 c0       	rjmp	.+2      	; 0x8e8 <__vector_18+0x48>
     8e6:	20 e0       	ldi	r18, 0x00	; 0
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
     8e8:	20 93 a3 04 	sts	0x04A3, r18
}
     8ec:	ff 91       	pop	r31
     8ee:	ef 91       	pop	r30
     8f0:	bf 91       	pop	r27
     8f2:	af 91       	pop	r26
     8f4:	9f 91       	pop	r25
     8f6:	8f 91       	pop	r24
     8f8:	5f 91       	pop	r21
     8fa:	4f 91       	pop	r20
     8fc:	2f 91       	pop	r18
     8fe:	0f 90       	pop	r0
     900:	0f be       	out	0x3f, r0	; 63
     902:	0f 90       	pop	r0
     904:	1f 90       	pop	r1
     906:	18 95       	reti

00000908 <__vector_14>:
	
	sei();
}

ISR(TIMER0_COMPA_vect)	// PWM output
{
     908:	1f 92       	push	r1
     90a:	0f 92       	push	r0
     90c:	0f b6       	in	r0, 0x3f	; 63
     90e:	0f 92       	push	r0
     910:	11 24       	eor	r1, r1
     912:	2f 93       	push	r18
     914:	3f 93       	push	r19
     916:	8f 93       	push	r24
     918:	9f 93       	push	r25
	pwmCnt_Ch0++;
     91a:	80 91 c4 01 	lds	r24, 0x01C4
     91e:	90 91 c5 01 	lds	r25, 0x01C5
     922:	01 96       	adiw	r24, 0x01	; 1
     924:	90 93 c5 01 	sts	0x01C5, r25
     928:	80 93 c4 01 	sts	0x01C4, r24
	if(pwmCnt_Ch0 < pwmCh0 )
     92c:	20 91 c4 01 	lds	r18, 0x01C4
     930:	30 91 c5 01 	lds	r19, 0x01C5
     934:	80 91 c2 01 	lds	r24, 0x01C2
     938:	90 91 c3 01 	lds	r25, 0x01C3
     93c:	28 17       	cp	r18, r24
     93e:	39 07       	cpc	r19, r25
     940:	34 f4       	brge	.+12     	; 0x94e <__vector_14+0x46>
static inline void SetHeaterOutputON(uint8_t ch)
{
	switch (ch)
	{
		case 0:
			if(heaterEnableCh0)
     942:	80 91 bb 01 	lds	r24, 0x01BB
     946:	88 23       	and	r24, r24
     948:	19 f0       	breq	.+6      	; 0x950 <__vector_14+0x48>
			{
				PORTC |= 0b00000001;
     94a:	40 9a       	sbi	0x08, 0	; 8
     94c:	01 c0       	rjmp	.+2      	; 0x950 <__vector_14+0x48>
	{
		SetHeaterOutputON(0);
	}
	else
	{
		PORTC &= 0b11111110;
     94e:	40 98       	cbi	0x08, 0	; 8
	}
	if(pwmCnt_Ch0 >= 100)
     950:	80 91 c4 01 	lds	r24, 0x01C4
     954:	90 91 c5 01 	lds	r25, 0x01C5
     958:	84 36       	cpi	r24, 0x64	; 100
     95a:	91 05       	cpc	r25, r1
     95c:	24 f0       	brlt	.+8      	; 0x966 <__vector_14+0x5e>
	{
		pwmCnt_Ch0 = 0;
     95e:	10 92 c5 01 	sts	0x01C5, r1
     962:	10 92 c4 01 	sts	0x01C4, r1
	}
	
	pwmCnt_Ch1++;
     966:	80 91 06 01 	lds	r24, 0x0106
     96a:	90 91 07 01 	lds	r25, 0x0107
     96e:	01 96       	adiw	r24, 0x01	; 1
     970:	90 93 07 01 	sts	0x0107, r25
     974:	80 93 06 01 	sts	0x0106, r24
	if(pwmCnt_Ch1 < pwmCh1 )
     978:	20 91 06 01 	lds	r18, 0x0106
     97c:	30 91 07 01 	lds	r19, 0x0107
     980:	80 91 c0 01 	lds	r24, 0x01C0
     984:	90 91 c1 01 	lds	r25, 0x01C1
     988:	28 17       	cp	r18, r24
     98a:	39 07       	cpc	r19, r25
     98c:	34 f4       	brge	.+12     	; 0x99a <__vector_14+0x92>
				PORTC |= 0b00000001;
			}
			break;
	
		case 1:
			if(heaterEnableCh1)
     98e:	80 91 ba 01 	lds	r24, 0x01BA
     992:	88 23       	and	r24, r24
     994:	19 f0       	breq	.+6      	; 0x99c <__vector_14+0x94>
			{
				PORTC |= 0b00000010;	
     996:	41 9a       	sbi	0x08, 1	; 8
     998:	01 c0       	rjmp	.+2      	; 0x99c <__vector_14+0x94>
	{
		SetHeaterOutputON(1);
	}
	else
	{
		PORTC &= 0b11111101;
     99a:	41 98       	cbi	0x08, 1	; 8
	}
	if(pwmCnt_Ch1 >= 100)
     99c:	80 91 06 01 	lds	r24, 0x0106
     9a0:	90 91 07 01 	lds	r25, 0x0107
     9a4:	84 36       	cpi	r24, 0x64	; 100
     9a6:	91 05       	cpc	r25, r1
     9a8:	24 f0       	brlt	.+8      	; 0x9b2 <__vector_14+0xaa>
	{
		pwmCnt_Ch1 = 0;
     9aa:	10 92 07 01 	sts	0x0107, r1
     9ae:	10 92 06 01 	sts	0x0106, r1
	}
	
	pwmCnt_Ch2++;
     9b2:	80 91 04 01 	lds	r24, 0x0104
     9b6:	90 91 05 01 	lds	r25, 0x0105
     9ba:	01 96       	adiw	r24, 0x01	; 1
     9bc:	90 93 05 01 	sts	0x0105, r25
     9c0:	80 93 04 01 	sts	0x0104, r24
	if(pwmCnt_Ch2 < pwmCh2 )
     9c4:	20 91 04 01 	lds	r18, 0x0104
     9c8:	30 91 05 01 	lds	r19, 0x0105
     9cc:	80 91 be 01 	lds	r24, 0x01BE
     9d0:	90 91 bf 01 	lds	r25, 0x01BF
     9d4:	28 17       	cp	r18, r24
     9d6:	39 07       	cpc	r19, r25
     9d8:	34 f4       	brge	.+12     	; 0x9e6 <__vector_14+0xde>
				PORTC |= 0b00000010;	
			}
			break;

		case 2:
			if(heaterEnableCh2)
     9da:	80 91 b9 01 	lds	r24, 0x01B9
     9de:	88 23       	and	r24, r24
     9e0:	19 f0       	breq	.+6      	; 0x9e8 <__vector_14+0xe0>
			{
				PORTC |= 0b00000100;
     9e2:	42 9a       	sbi	0x08, 2	; 8
     9e4:	01 c0       	rjmp	.+2      	; 0x9e8 <__vector_14+0xe0>
	{
		SetHeaterOutputON(2);
	}
	else
	{
		PORTC &= 0b11111011;
     9e6:	42 98       	cbi	0x08, 2	; 8
	}
	if(pwmCnt_Ch2 >= 100)
     9e8:	80 91 04 01 	lds	r24, 0x0104
     9ec:	90 91 05 01 	lds	r25, 0x0105
     9f0:	84 36       	cpi	r24, 0x64	; 100
     9f2:	91 05       	cpc	r25, r1
     9f4:	24 f0       	brlt	.+8      	; 0x9fe <__vector_14+0xf6>
	{
		pwmCnt_Ch2 = 0;
     9f6:	10 92 05 01 	sts	0x0105, r1
     9fa:	10 92 04 01 	sts	0x0104, r1
	}
	
	pwmCnt_Ch3++;
     9fe:	80 91 02 01 	lds	r24, 0x0102
     a02:	90 91 03 01 	lds	r25, 0x0103
     a06:	01 96       	adiw	r24, 0x01	; 1
     a08:	90 93 03 01 	sts	0x0103, r25
     a0c:	80 93 02 01 	sts	0x0102, r24
	if(pwmCnt_Ch3 < pwmCh3 )
     a10:	20 91 02 01 	lds	r18, 0x0102
     a14:	30 91 03 01 	lds	r19, 0x0103
     a18:	80 91 bc 01 	lds	r24, 0x01BC
     a1c:	90 91 bd 01 	lds	r25, 0x01BD
     a20:	28 17       	cp	r18, r24
     a22:	39 07       	cpc	r19, r25
     a24:	34 f4       	brge	.+12     	; 0xa32 <__vector_14+0x12a>
				PORTC |= 0b00000100;
			}
			break;

		case 3:
			if(heaterEnableCh3)
     a26:	80 91 b8 01 	lds	r24, 0x01B8
     a2a:	88 23       	and	r24, r24
     a2c:	19 f0       	breq	.+6      	; 0xa34 <__vector_14+0x12c>
			{
				PORTC |= 0b00001000;	
     a2e:	43 9a       	sbi	0x08, 3	; 8
     a30:	01 c0       	rjmp	.+2      	; 0xa34 <__vector_14+0x12c>
	{
		SetHeaterOutputON(3);
	}
	else
	{
		PORTC &= 0b11110111;
     a32:	43 98       	cbi	0x08, 3	; 8
	}
	if(pwmCnt_Ch3 >= 100)
     a34:	80 91 02 01 	lds	r24, 0x0102
     a38:	90 91 03 01 	lds	r25, 0x0103
     a3c:	84 36       	cpi	r24, 0x64	; 100
     a3e:	91 05       	cpc	r25, r1
     a40:	24 f0       	brlt	.+8      	; 0xa4a <__vector_14+0x142>
	{
		pwmCnt_Ch3 = 0;
     a42:	10 92 03 01 	sts	0x0103, r1
     a46:	10 92 02 01 	sts	0x0102, r1
	}

}
     a4a:	9f 91       	pop	r25
     a4c:	8f 91       	pop	r24
     a4e:	3f 91       	pop	r19
     a50:	2f 91       	pop	r18
     a52:	0f 90       	pop	r0
     a54:	0f be       	out	0x3f, r0	; 63
     a56:	0f 90       	pop	r0
     a58:	1f 90       	pop	r1
     a5a:	18 95       	reti

00000a5c <__vector_7>:

ISR(TIMER2_COMPA_vect)	// PID Controller
{
     a5c:	1f 92       	push	r1
     a5e:	0f 92       	push	r0
     a60:	0f b6       	in	r0, 0x3f	; 63
     a62:	0f 92       	push	r0
     a64:	11 24       	eor	r1, r1
     a66:	cf 92       	push	r12
     a68:	df 92       	push	r13
     a6a:	ef 92       	push	r14
     a6c:	ff 92       	push	r15
     a6e:	2f 93       	push	r18
     a70:	3f 93       	push	r19
     a72:	4f 93       	push	r20
     a74:	5f 93       	push	r21
     a76:	6f 93       	push	r22
     a78:	7f 93       	push	r23
     a7a:	8f 93       	push	r24
     a7c:	9f 93       	push	r25
     a7e:	af 93       	push	r26
     a80:	bf 93       	push	r27
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29
     a86:	ef 93       	push	r30
     a88:	ff 93       	push	r31
	sei();	// Enable nested interrupt
     a8a:	78 94       	sei
	PORTD |= statusLed;
     a8c:	5b 9a       	sbi	0x0b, 3	; 11
static inline unsigned char SPIread( unsigned char byteword, unsigned char ch)
{
	switch (ch)
	{
		case 1:
		PORTD &= 0b11101111;	// Set CS1 low
     a8e:	5c 98       	cbi	0x0b, 4	; 11
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     a94:	0d b4       	in	r0, 0x2d	; 45
     a96:	07 fe       	sbrs	r0, 7
     a98:	fd cf       	rjmp	.-6      	; 0xa94 <__vector_7+0x38>
	byteword=SPDR;				//just for clearing SPIF
     a9a:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
     a9c:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     a9e:	0d b4       	in	r0, 0x2d	; 45
     aa0:	07 fe       	sbrs	r0, 7
     aa2:	fd cf       	rjmp	.-6      	; 0xa9e <__vector_7+0x42>
	byteword=SPDR;
     aa4:	9e b5       	in	r25, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
     aa6:	8b b1       	in	r24, 0x0b	; 11
     aa8:	80 6f       	ori	r24, 0xF0	; 240
     aaa:	8b b9       	out	0x0b, r24	; 11
static inline unsigned char SPIread( unsigned char byteword, unsigned char ch)
{
	switch (ch)
	{
		case 1:
		PORTD &= 0b11101111;	// Set CS1 low
     aac:	5c 98       	cbi	0x0b, 4	; 11
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
     aae:	82 e0       	ldi	r24, 0x02	; 2
     ab0:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     ab2:	0d b4       	in	r0, 0x2d	; 45
     ab4:	07 fe       	sbrs	r0, 7
     ab6:	fd cf       	rjmp	.-6      	; 0xab2 <__vector_7+0x56>
	byteword=SPDR;				//just for clearing SPIF
     ab8:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
     aba:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     abc:	0d b4       	in	r0, 0x2d	; 45
     abe:	07 fe       	sbrs	r0, 7
     ac0:	fd cf       	rjmp	.-6      	; 0xabc <__vector_7+0x60>
	byteword=SPDR;
     ac2:	6e b5       	in	r22, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
     ac4:	8b b1       	in	r24, 0x0b	; 11
     ac6:	80 6f       	ori	r24, 0xF0	; 240
     ac8:	8b b9       	out	0x0b, r24	; 11
	uint8_t u8_msb = 0;
	uint8_t u8_lsb = 0;
	
	u8_msb = SPIread(0x01, ch);
	u8_lsb = SPIread(0x02, ch);
	adc_code = (((u8_msb << 8) | u8_lsb) >> 1);
     aca:	70 e0       	ldi	r23, 0x00	; 0
     acc:	79 2b       	or	r23, r25
     ace:	75 95       	asr	r23
     ad0:	67 95       	ror	r22
	return ((float)adc_code / 32.0 - 256.0);
     ad2:	07 2e       	mov	r0, r23
     ad4:	00 0c       	add	r0, r0
     ad6:	88 0b       	sbc	r24, r24
     ad8:	99 0b       	sbc	r25, r25
     ada:	0e 94 9f 21 	call	0x433e	; 0x433e <__floatsisf>
     ade:	20 e0       	ldi	r18, 0x00	; 0
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	40 e0       	ldi	r20, 0x00	; 0
     ae4:	5d e3       	ldi	r21, 0x3D	; 61
     ae6:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__mulsf3>
     aea:	20 e0       	ldi	r18, 0x00	; 0
     aec:	30 e0       	ldi	r19, 0x00	; 0
     aee:	40 e8       	ldi	r20, 0x80	; 128
     af0:	53 e4       	ldi	r21, 0x43	; 67
     af2:	0e 94 03 21 	call	0x4206	; 0x4206 <__subsf3>
{
	sei();	// Enable nested interrupt
	PORTD |= statusLed;
	int D_hist;
	
	TempSensor0 = ReadTempSensor(1);
     af6:	60 93 b4 01 	sts	0x01B4, r22
     afa:	70 93 b5 01 	sts	0x01B5, r23
     afe:	80 93 b6 01 	sts	0x01B6, r24
     b02:	90 93 b7 01 	sts	0x01B7, r25
	if(TempSensor0 > (float)maxAllowedTemp)					// Max temperature limit
     b06:	60 91 b4 01 	lds	r22, 0x01B4
     b0a:	70 91 b5 01 	lds	r23, 0x01B5
     b0e:	80 91 b6 01 	lds	r24, 0x01B6
     b12:	90 91 b7 01 	lds	r25, 0x01B7
     b16:	20 e0       	ldi	r18, 0x00	; 0
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	40 ef       	ldi	r20, 0xF0	; 240
     b1c:	52 e4       	ldi	r21, 0x42	; 66
     b1e:	0e 94 4f 22 	call	0x449e	; 0x449e <__gesf2>
     b22:	18 16       	cp	r1, r24
     b24:	2c f4       	brge	.+10     	; 0xb30 <__vector_7+0xd4>
	{
		heaterEnableCh0 = false;
     b26:	10 92 bb 01 	sts	0x01BB, r1
		PORTC &= allHeaterOff;
     b2a:	88 b1       	in	r24, 0x08	; 8
     b2c:	80 7f       	andi	r24, 0xF0	; 240
     b2e:	88 b9       	out	0x08, r24	; 8
	}

	TempError0[CtrlErrorIdx] = TempSetPoint0 - TempSensor0;			// Control error
     b30:	c0 91 a6 01 	lds	r28, 0x01A6
     b34:	d0 91 a7 01 	lds	r29, 0x01A7
     b38:	60 91 a2 01 	lds	r22, 0x01A2
     b3c:	70 91 a3 01 	lds	r23, 0x01A3
     b40:	80 91 a4 01 	lds	r24, 0x01A4
     b44:	90 91 a5 01 	lds	r25, 0x01A5
     b48:	20 91 b4 01 	lds	r18, 0x01B4
     b4c:	30 91 b5 01 	lds	r19, 0x01B5
     b50:	40 91 b6 01 	lds	r20, 0x01B6
     b54:	50 91 b7 01 	lds	r21, 0x01B7
     b58:	0e 94 03 21 	call	0x4206	; 0x4206 <__subsf3>
     b5c:	cc 0f       	add	r28, r28
     b5e:	dd 1f       	adc	r29, r29
     b60:	cc 0f       	add	r28, r28
     b62:	dd 1f       	adc	r29, r29
     b64:	c3 53       	subi	r28, 0x33	; 51
     b66:	de 4f       	sbci	r29, 0xFE	; 254
     b68:	68 83       	st	Y, r22
     b6a:	79 83       	std	Y+1, r23	; 0x01
     b6c:	8a 83       	std	Y+2, r24	; 0x02
     b6e:	9b 83       	std	Y+3, r25	; 0x03
	
	P_ch0 = TempError0[CtrlErrorIdx] * Pgain_ch0;					// P error
     b70:	e0 91 a6 01 	lds	r30, 0x01A6
     b74:	f0 91 a7 01 	lds	r31, 0x01A7
     b78:	ee 0f       	add	r30, r30
     b7a:	ff 1f       	adc	r31, r31
     b7c:	ee 0f       	add	r30, r30
     b7e:	ff 1f       	adc	r31, r31
     b80:	e3 53       	subi	r30, 0x33	; 51
     b82:	fe 4f       	sbci	r31, 0xFE	; 254
     b84:	60 81       	ld	r22, Z
     b86:	71 81       	ldd	r23, Z+1	; 0x01
     b88:	82 81       	ldd	r24, Z+2	; 0x02
     b8a:	93 81       	ldd	r25, Z+3	; 0x03
     b8c:	20 91 00 03 	lds	r18, 0x0300
     b90:	30 91 01 03 	lds	r19, 0x0301
     b94:	40 91 02 03 	lds	r20, 0x0302
     b98:	50 91 03 03 	lds	r21, 0x0303
     b9c:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__mulsf3>
     ba0:	60 93 9e 01 	sts	0x019E, r22
     ba4:	70 93 9f 01 	sts	0x019F, r23
     ba8:	80 93 a0 01 	sts	0x01A0, r24
     bac:	90 93 a1 01 	sts	0x01A1, r25
	I_ch0 = I_ch0 + (TempError0[CtrlErrorIdx] * Igain_ch0);			// I error
     bb0:	e0 91 a6 01 	lds	r30, 0x01A6
     bb4:	f0 91 a7 01 	lds	r31, 0x01A7
     bb8:	ee 0f       	add	r30, r30
     bba:	ff 1f       	adc	r31, r31
     bbc:	ee 0f       	add	r30, r30
     bbe:	ff 1f       	adc	r31, r31
     bc0:	e3 53       	subi	r30, 0x33	; 51
     bc2:	fe 4f       	sbci	r31, 0xFE	; 254
     bc4:	60 81       	ld	r22, Z
     bc6:	71 81       	ldd	r23, Z+1	; 0x01
     bc8:	82 81       	ldd	r24, Z+2	; 0x02
     bca:	93 81       	ldd	r25, Z+3	; 0x03
     bcc:	20 91 b0 04 	lds	r18, 0x04B0
     bd0:	30 91 b1 04 	lds	r19, 0x04B1
     bd4:	40 91 b2 04 	lds	r20, 0x04B2
     bd8:	50 91 b3 04 	lds	r21, 0x04B3
     bdc:	c0 90 9a 01 	lds	r12, 0x019A
     be0:	d0 90 9b 01 	lds	r13, 0x019B
     be4:	e0 90 9c 01 	lds	r14, 0x019C
     be8:	f0 90 9d 01 	lds	r15, 0x019D
     bec:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__mulsf3>
     bf0:	a7 01       	movw	r20, r14
     bf2:	96 01       	movw	r18, r12
     bf4:	0e 94 04 21 	call	0x4208	; 0x4208 <__addsf3>
     bf8:	60 93 9a 01 	sts	0x019A, r22
     bfc:	70 93 9b 01 	sts	0x019B, r23
     c00:	80 93 9c 01 	sts	0x019C, r24
     c04:	90 93 9d 01 	sts	0x019D, r25
	if(I_ch0 > integralErrorLimit)
     c08:	60 91 9a 01 	lds	r22, 0x019A
     c0c:	70 91 9b 01 	lds	r23, 0x019B
     c10:	80 91 9c 01 	lds	r24, 0x019C
     c14:	90 91 9d 01 	lds	r25, 0x019D
     c18:	20 e0       	ldi	r18, 0x00	; 0
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	40 e2       	ldi	r20, 0x20	; 32
     c1e:	51 e4       	ldi	r21, 0x41	; 65
     c20:	0e 94 4f 22 	call	0x449e	; 0x449e <__gesf2>
     c24:	18 16       	cp	r1, r24
     c26:	64 f4       	brge	.+24     	; 0xc40 <__vector_7+0x1e4>
	{
	I_ch0 = integralErrorLimit;
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e2       	ldi	r26, 0x20	; 32
     c2e:	b1 e4       	ldi	r27, 0x41	; 65
     c30:	80 93 9a 01 	sts	0x019A, r24
     c34:	90 93 9b 01 	sts	0x019B, r25
     c38:	a0 93 9c 01 	sts	0x019C, r26
     c3c:	b0 93 9d 01 	sts	0x019D, r27
	}
	if(I_ch0 < -integralErrorLimit)
     c40:	60 91 9a 01 	lds	r22, 0x019A
     c44:	70 91 9b 01 	lds	r23, 0x019B
     c48:	80 91 9c 01 	lds	r24, 0x019C
     c4c:	90 91 9d 01 	lds	r25, 0x019D
     c50:	20 e0       	ldi	r18, 0x00	; 0
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	40 e2       	ldi	r20, 0x20	; 32
     c56:	51 ec       	ldi	r21, 0xC1	; 193
     c58:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__cmpsf2>
     c5c:	88 23       	and	r24, r24
     c5e:	64 f4       	brge	.+24     	; 0xc78 <__vector_7+0x21c>
	{
	I_ch0 = -integralErrorLimit;
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	a0 e2       	ldi	r26, 0x20	; 32
     c66:	b1 ec       	ldi	r27, 0xC1	; 193
     c68:	80 93 9a 01 	sts	0x019A, r24
     c6c:	90 93 9b 01 	sts	0x019B, r25
     c70:	a0 93 9c 01 	sts	0x019C, r26
     c74:	b0 93 9d 01 	sts	0x019D, r27
	}
	
	D_ch0 = (TempError0[CtrlErrorIdx] - TempError0[CtrlErrorHistIdx]) * Dgain_ch0; // D error
     c78:	e0 91 a6 01 	lds	r30, 0x01A6
     c7c:	f0 91 a7 01 	lds	r31, 0x01A7
     c80:	ee 0f       	add	r30, r30
     c82:	ff 1f       	adc	r31, r31
     c84:	ee 0f       	add	r30, r30
     c86:	ff 1f       	adc	r31, r31
     c88:	e3 53       	subi	r30, 0x33	; 51
     c8a:	fe 4f       	sbci	r31, 0xFE	; 254
     c8c:	60 81       	ld	r22, Z
     c8e:	71 81       	ldd	r23, Z+1	; 0x01
     c90:	82 81       	ldd	r24, Z+2	; 0x02
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	e0 91 00 01 	lds	r30, 0x0100
     c98:	f0 91 01 01 	lds	r31, 0x0101
     c9c:	ee 0f       	add	r30, r30
     c9e:	ff 1f       	adc	r31, r31
     ca0:	ee 0f       	add	r30, r30
     ca2:	ff 1f       	adc	r31, r31
     ca4:	e3 53       	subi	r30, 0x33	; 51
     ca6:	fe 4f       	sbci	r31, 0xFE	; 254
     ca8:	20 81       	ld	r18, Z
     caa:	31 81       	ldd	r19, Z+1	; 0x01
     cac:	42 81       	ldd	r20, Z+2	; 0x02
     cae:	53 81       	ldd	r21, Z+3	; 0x03
     cb0:	c0 90 fd 01 	lds	r12, 0x01FD
     cb4:	d0 90 fe 01 	lds	r13, 0x01FE
     cb8:	e0 90 ff 01 	lds	r14, 0x01FF
     cbc:	f0 90 00 02 	lds	r15, 0x0200
     cc0:	0e 94 03 21 	call	0x4206	; 0x4206 <__subsf3>
     cc4:	a7 01       	movw	r20, r14
     cc6:	96 01       	movw	r18, r12
     cc8:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__mulsf3>
     ccc:	60 93 96 01 	sts	0x0196, r22
     cd0:	70 93 97 01 	sts	0x0197, r23
     cd4:	80 93 98 01 	sts	0x0198, r24
     cd8:	90 93 99 01 	sts	0x0199, r25
	
	Control_ch0_PID = P_ch0 + I_ch0 + D_ch0;
     cdc:	60 91 9e 01 	lds	r22, 0x019E
     ce0:	70 91 9f 01 	lds	r23, 0x019F
     ce4:	80 91 a0 01 	lds	r24, 0x01A0
     ce8:	90 91 a1 01 	lds	r25, 0x01A1
     cec:	20 91 9a 01 	lds	r18, 0x019A
     cf0:	30 91 9b 01 	lds	r19, 0x019B
     cf4:	40 91 9c 01 	lds	r20, 0x019C
     cf8:	50 91 9d 01 	lds	r21, 0x019D
     cfc:	c0 90 96 01 	lds	r12, 0x0196
     d00:	d0 90 97 01 	lds	r13, 0x0197
     d04:	e0 90 98 01 	lds	r14, 0x0198
     d08:	f0 90 99 01 	lds	r15, 0x0199
     d0c:	0e 94 04 21 	call	0x4208	; 0x4208 <__addsf3>
     d10:	a7 01       	movw	r20, r14
     d12:	96 01       	movw	r18, r12
     d14:	0e 94 04 21 	call	0x4208	; 0x4208 <__addsf3>
     d18:	60 93 8e 01 	sts	0x018E, r22
     d1c:	70 93 8f 01 	sts	0x018F, r23
     d20:	80 93 90 01 	sts	0x0190, r24
     d24:	90 93 91 01 	sts	0x0191, r25
	Control_ch0 = Control_ch0_PID + TempSetPoint0 * (float)0.21 - 5;
     d28:	60 91 a2 01 	lds	r22, 0x01A2
     d2c:	70 91 a3 01 	lds	r23, 0x01A3
     d30:	80 91 a4 01 	lds	r24, 0x01A4
     d34:	90 91 a5 01 	lds	r25, 0x01A5
     d38:	c0 90 8e 01 	lds	r12, 0x018E
     d3c:	d0 90 8f 01 	lds	r13, 0x018F
     d40:	e0 90 90 01 	lds	r14, 0x0190
     d44:	f0 90 91 01 	lds	r15, 0x0191
     d48:	2d e3       	ldi	r18, 0x3D	; 61
     d4a:	3a e0       	ldi	r19, 0x0A	; 10
     d4c:	47 e5       	ldi	r20, 0x57	; 87
     d4e:	5e e3       	ldi	r21, 0x3E	; 62
     d50:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__mulsf3>
     d54:	a7 01       	movw	r20, r14
     d56:	96 01       	movw	r18, r12
     d58:	0e 94 04 21 	call	0x4208	; 0x4208 <__addsf3>
     d5c:	20 e0       	ldi	r18, 0x00	; 0
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	40 ea       	ldi	r20, 0xA0	; 160
     d62:	50 e4       	ldi	r21, 0x40	; 64
     d64:	0e 94 03 21 	call	0x4206	; 0x4206 <__subsf3>
     d68:	60 93 92 01 	sts	0x0192, r22
     d6c:	70 93 93 01 	sts	0x0193, r23
     d70:	80 93 94 01 	sts	0x0194, r24
     d74:	90 93 95 01 	sts	0x0195, r25
	pwmCh0 = (round(Control_ch0));
     d78:	60 91 92 01 	lds	r22, 0x0192
     d7c:	70 91 93 01 	lds	r23, 0x0193
     d80:	80 91 94 01 	lds	r24, 0x0194
     d84:	90 91 95 01 	lds	r25, 0x0195
     d88:	0e 94 b6 22 	call	0x456c	; 0x456c <round>
     d8c:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <__fixsfsi>
     d90:	70 93 c3 01 	sts	0x01C3, r23
     d94:	60 93 c2 01 	sts	0x01C2, r22
	
	if(abs(TempError0[0]) > integralErrorActiveWindow)
     d98:	60 91 cd 01 	lds	r22, 0x01CD
     d9c:	70 91 ce 01 	lds	r23, 0x01CE
     da0:	80 91 cf 01 	lds	r24, 0x01CF
     da4:	90 91 d0 01 	lds	r25, 0x01D0
     da8:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <__fixsfsi>
     dac:	9b 01       	movw	r18, r22
     dae:	77 23       	and	r23, r23
     db0:	24 f4       	brge	.+8      	; 0xdba <__vector_7+0x35e>
     db2:	22 27       	eor	r18, r18
     db4:	33 27       	eor	r19, r19
     db6:	26 1b       	sub	r18, r22
     db8:	37 0b       	sbc	r19, r23
     dba:	26 30       	cpi	r18, 0x06	; 6
     dbc:	31 05       	cpc	r19, r1
     dbe:	44 f0       	brlt	.+16     	; 0xdd0 <__vector_7+0x374>
	{
	I_ch0 = 0;									// Avoid integral wind-up
     dc0:	10 92 9a 01 	sts	0x019A, r1
     dc4:	10 92 9b 01 	sts	0x019B, r1
     dc8:	10 92 9c 01 	sts	0x019C, r1
     dcc:	10 92 9d 01 	sts	0x019D, r1
		case 1:
		PORTD &= 0b11101111;	// Set CS1 low
		break;
		
		case 2:
		PORTD &= 0b11011111;	// Set CS2 low
     dd0:	5d 98       	cbi	0x0b, 5	; 11
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     dd6:	0d b4       	in	r0, 0x2d	; 45
     dd8:	07 fe       	sbrs	r0, 7
     dda:	fd cf       	rjmp	.-6      	; 0xdd6 <__vector_7+0x37a>
	byteword=SPDR;				//just for clearing SPIF
     ddc:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
     dde:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     de0:	0d b4       	in	r0, 0x2d	; 45
     de2:	07 fe       	sbrs	r0, 7
     de4:	fd cf       	rjmp	.-6      	; 0xde0 <__vector_7+0x384>
	byteword=SPDR;
     de6:	9e b5       	in	r25, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
     de8:	8b b1       	in	r24, 0x0b	; 11
     dea:	80 6f       	ori	r24, 0xF0	; 240
     dec:	8b b9       	out	0x0b, r24	; 11
		case 1:
		PORTD &= 0b11101111;	// Set CS1 low
		break;
		
		case 2:
		PORTD &= 0b11011111;	// Set CS2 low
     dee:	5d 98       	cbi	0x0b, 5	; 11
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
     df0:	82 e0       	ldi	r24, 0x02	; 2
     df2:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     df4:	0d b4       	in	r0, 0x2d	; 45
     df6:	07 fe       	sbrs	r0, 7
     df8:	fd cf       	rjmp	.-6      	; 0xdf4 <__vector_7+0x398>
	byteword=SPDR;				//just for clearing SPIF
     dfa:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
     dfc:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     dfe:	0d b4       	in	r0, 0x2d	; 45
     e00:	07 fe       	sbrs	r0, 7
     e02:	fd cf       	rjmp	.-6      	; 0xdfe <__vector_7+0x3a2>
	byteword=SPDR;
     e04:	6e b5       	in	r22, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
     e06:	8b b1       	in	r24, 0x0b	; 11
     e08:	80 6f       	ori	r24, 0xF0	; 240
     e0a:	8b b9       	out	0x0b, r24	; 11
	uint8_t u8_msb = 0;
	uint8_t u8_lsb = 0;
	
	u8_msb = SPIread(0x01, ch);
	u8_lsb = SPIread(0x02, ch);
	adc_code = (((u8_msb << 8) | u8_lsb) >> 1);
     e0c:	70 e0       	ldi	r23, 0x00	; 0
     e0e:	79 2b       	or	r23, r25
     e10:	75 95       	asr	r23
     e12:	67 95       	ror	r22
	return ((float)adc_code / 32.0 - 256.0);
     e14:	07 2e       	mov	r0, r23
     e16:	00 0c       	add	r0, r0
     e18:	88 0b       	sbc	r24, r24
     e1a:	99 0b       	sbc	r25, r25
     e1c:	0e 94 9f 21 	call	0x433e	; 0x433e <__floatsisf>
     e20:	20 e0       	ldi	r18, 0x00	; 0
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	40 e0       	ldi	r20, 0x00	; 0
     e26:	5d e3       	ldi	r21, 0x3D	; 61
     e28:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__mulsf3>
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	40 e8       	ldi	r20, 0x80	; 128
     e32:	53 e4       	ldi	r21, 0x43	; 67
     e34:	0e 94 03 21 	call	0x4206	; 0x4206 <__subsf3>
	{
	I_ch0 = 0;									// Avoid integral wind-up
	}	
	
	////*** Channel 1 ***
	TempSensor1 = ReadTempSensor(2);
     e38:	60 93 b0 01 	sts	0x01B0, r22
     e3c:	70 93 b1 01 	sts	0x01B1, r23
     e40:	80 93 b2 01 	sts	0x01B2, r24
     e44:	90 93 b3 01 	sts	0x01B3, r25
		
	if(TempSensor1 > (float)maxAllowedTemp)					// Max temperature limit
     e48:	60 91 b0 01 	lds	r22, 0x01B0
     e4c:	70 91 b1 01 	lds	r23, 0x01B1
     e50:	80 91 b2 01 	lds	r24, 0x01B2
     e54:	90 91 b3 01 	lds	r25, 0x01B3
     e58:	20 e0       	ldi	r18, 0x00	; 0
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	40 ef       	ldi	r20, 0xF0	; 240
     e5e:	52 e4       	ldi	r21, 0x42	; 66
     e60:	0e 94 4f 22 	call	0x449e	; 0x449e <__gesf2>
     e64:	18 16       	cp	r1, r24
     e66:	2c f4       	brge	.+10     	; 0xe72 <__vector_7+0x416>
	{
		heaterEnableCh1 = false;
     e68:	10 92 ba 01 	sts	0x01BA, r1
		PORTC &= allHeaterOff;
     e6c:	88 b1       	in	r24, 0x08	; 8
     e6e:	80 7f       	andi	r24, 0xF0	; 240
     e70:	88 b9       	out	0x08, r24	; 8
	}

	TempError1[CtrlErrorIdx] = TempSetPoint1 - TempSensor1;			// Control error
     e72:	c0 91 a6 01 	lds	r28, 0x01A6
     e76:	d0 91 a7 01 	lds	r29, 0x01A7
     e7a:	60 91 8a 01 	lds	r22, 0x018A
     e7e:	70 91 8b 01 	lds	r23, 0x018B
     e82:	80 91 8c 01 	lds	r24, 0x018C
     e86:	90 91 8d 01 	lds	r25, 0x018D
     e8a:	20 91 b0 01 	lds	r18, 0x01B0
     e8e:	30 91 b1 01 	lds	r19, 0x01B1
     e92:	40 91 b2 01 	lds	r20, 0x01B2
     e96:	50 91 b3 01 	lds	r21, 0x01B3
     e9a:	0e 94 03 21 	call	0x4206	; 0x4206 <__subsf3>
     e9e:	cc 0f       	add	r28, r28
     ea0:	dd 1f       	adc	r29, r29
     ea2:	cc 0f       	add	r28, r28
     ea4:	dd 1f       	adc	r29, r29
     ea6:	c9 5f       	subi	r28, 0xF9	; 249
     ea8:	db 4f       	sbci	r29, 0xFB	; 251
     eaa:	68 83       	st	Y, r22
     eac:	79 83       	std	Y+1, r23	; 0x01
     eae:	8a 83       	std	Y+2, r24	; 0x02
     eb0:	9b 83       	std	Y+3, r25	; 0x03
	
	P_ch1 = TempError1[CtrlErrorIdx] * Pgain_ch1;					// P error
     eb2:	e0 91 a6 01 	lds	r30, 0x01A6
     eb6:	f0 91 a7 01 	lds	r31, 0x01A7
     eba:	ee 0f       	add	r30, r30
     ebc:	ff 1f       	adc	r31, r31
     ebe:	ee 0f       	add	r30, r30
     ec0:	ff 1f       	adc	r31, r31
     ec2:	e9 5f       	subi	r30, 0xF9	; 249
     ec4:	fb 4f       	sbci	r31, 0xFB	; 251
     ec6:	60 81       	ld	r22, Z
     ec8:	71 81       	ldd	r23, Z+1	; 0x01
     eca:	82 81       	ldd	r24, Z+2	; 0x02
     ecc:	93 81       	ldd	r25, Z+3	; 0x03
     ece:	20 91 6b 04 	lds	r18, 0x046B
     ed2:	30 91 6c 04 	lds	r19, 0x046C
     ed6:	40 91 6d 04 	lds	r20, 0x046D
     eda:	50 91 6e 04 	lds	r21, 0x046E
     ede:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__mulsf3>
     ee2:	60 93 86 01 	sts	0x0186, r22
     ee6:	70 93 87 01 	sts	0x0187, r23
     eea:	80 93 88 01 	sts	0x0188, r24
     eee:	90 93 89 01 	sts	0x0189, r25
	I_ch1 = I_ch1 + (TempError1[CtrlErrorIdx] * Igain_ch1);			// I error
     ef2:	e0 91 a6 01 	lds	r30, 0x01A6
     ef6:	f0 91 a7 01 	lds	r31, 0x01A7
     efa:	ee 0f       	add	r30, r30
     efc:	ff 1f       	adc	r31, r31
     efe:	ee 0f       	add	r30, r30
     f00:	ff 1f       	adc	r31, r31
     f02:	e9 5f       	subi	r30, 0xF9	; 249
     f04:	fb 4f       	sbci	r31, 0xFB	; 251
     f06:	60 81       	ld	r22, Z
     f08:	71 81       	ldd	r23, Z+1	; 0x01
     f0a:	82 81       	ldd	r24, Z+2	; 0x02
     f0c:	93 81       	ldd	r25, Z+3	; 0x03
     f0e:	20 91 c6 01 	lds	r18, 0x01C6
     f12:	30 91 c7 01 	lds	r19, 0x01C7
     f16:	40 91 c8 01 	lds	r20, 0x01C8
     f1a:	50 91 c9 01 	lds	r21, 0x01C9
     f1e:	c0 90 82 01 	lds	r12, 0x0182
     f22:	d0 90 83 01 	lds	r13, 0x0183
     f26:	e0 90 84 01 	lds	r14, 0x0184
     f2a:	f0 90 85 01 	lds	r15, 0x0185
     f2e:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__mulsf3>
     f32:	a7 01       	movw	r20, r14
     f34:	96 01       	movw	r18, r12
     f36:	0e 94 04 21 	call	0x4208	; 0x4208 <__addsf3>
     f3a:	60 93 82 01 	sts	0x0182, r22
     f3e:	70 93 83 01 	sts	0x0183, r23
     f42:	80 93 84 01 	sts	0x0184, r24
     f46:	90 93 85 01 	sts	0x0185, r25
	if(I_ch1 > integralErrorLimit)
     f4a:	60 91 82 01 	lds	r22, 0x0182
     f4e:	70 91 83 01 	lds	r23, 0x0183
     f52:	80 91 84 01 	lds	r24, 0x0184
     f56:	90 91 85 01 	lds	r25, 0x0185
     f5a:	20 e0       	ldi	r18, 0x00	; 0
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	40 e2       	ldi	r20, 0x20	; 32
     f60:	51 e4       	ldi	r21, 0x41	; 65
     f62:	0e 94 4f 22 	call	0x449e	; 0x449e <__gesf2>
     f66:	18 16       	cp	r1, r24
     f68:	64 f4       	brge	.+24     	; 0xf82 <__vector_7+0x526>
	{
		I_ch1 = integralErrorLimit;
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	a0 e2       	ldi	r26, 0x20	; 32
     f70:	b1 e4       	ldi	r27, 0x41	; 65
     f72:	80 93 82 01 	sts	0x0182, r24
     f76:	90 93 83 01 	sts	0x0183, r25
     f7a:	a0 93 84 01 	sts	0x0184, r26
     f7e:	b0 93 85 01 	sts	0x0185, r27
	}
	if(I_ch1 < -integralErrorLimit)
     f82:	60 91 82 01 	lds	r22, 0x0182
     f86:	70 91 83 01 	lds	r23, 0x0183
     f8a:	80 91 84 01 	lds	r24, 0x0184
     f8e:	90 91 85 01 	lds	r25, 0x0185
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	40 e2       	ldi	r20, 0x20	; 32
     f98:	51 ec       	ldi	r21, 0xC1	; 193
     f9a:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__cmpsf2>
     f9e:	88 23       	and	r24, r24
     fa0:	64 f4       	brge	.+24     	; 0xfba <__vector_7+0x55e>
	{
		I_ch1 = -integralErrorLimit;
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	a0 e2       	ldi	r26, 0x20	; 32
     fa8:	b1 ec       	ldi	r27, 0xC1	; 193
     faa:	80 93 82 01 	sts	0x0182, r24
     fae:	90 93 83 01 	sts	0x0183, r25
     fb2:	a0 93 84 01 	sts	0x0184, r26
     fb6:	b0 93 85 01 	sts	0x0185, r27
	}
	
	D_ch1 = (TempError1[CtrlErrorIdx] - TempError1[CtrlErrorHistIdx]) * Dgain_ch1; // D error
     fba:	e0 91 a6 01 	lds	r30, 0x01A6
     fbe:	f0 91 a7 01 	lds	r31, 0x01A7
     fc2:	ee 0f       	add	r30, r30
     fc4:	ff 1f       	adc	r31, r31
     fc6:	ee 0f       	add	r30, r30
     fc8:	ff 1f       	adc	r31, r31
     fca:	e9 5f       	subi	r30, 0xF9	; 249
     fcc:	fb 4f       	sbci	r31, 0xFB	; 251
     fce:	60 81       	ld	r22, Z
     fd0:	71 81       	ldd	r23, Z+1	; 0x01
     fd2:	82 81       	ldd	r24, Z+2	; 0x02
     fd4:	93 81       	ldd	r25, Z+3	; 0x03
     fd6:	e0 91 00 01 	lds	r30, 0x0100
     fda:	f0 91 01 01 	lds	r31, 0x0101
     fde:	ee 0f       	add	r30, r30
     fe0:	ff 1f       	adc	r31, r31
     fe2:	ee 0f       	add	r30, r30
     fe4:	ff 1f       	adc	r31, r31
     fe6:	e9 5f       	subi	r30, 0xF9	; 249
     fe8:	fb 4f       	sbci	r31, 0xFB	; 251
     fea:	20 81       	ld	r18, Z
     fec:	31 81       	ldd	r19, Z+1	; 0x01
     fee:	42 81       	ldd	r20, Z+2	; 0x02
     ff0:	53 81       	ldd	r21, Z+3	; 0x03
     ff2:	c0 90 ac 04 	lds	r12, 0x04AC
     ff6:	d0 90 ad 04 	lds	r13, 0x04AD
     ffa:	e0 90 ae 04 	lds	r14, 0x04AE
     ffe:	f0 90 af 04 	lds	r15, 0x04AF
    1002:	0e 94 03 21 	call	0x4206	; 0x4206 <__subsf3>
    1006:	a7 01       	movw	r20, r14
    1008:	96 01       	movw	r18, r12
    100a:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__mulsf3>
    100e:	60 93 7e 01 	sts	0x017E, r22
    1012:	70 93 7f 01 	sts	0x017F, r23
    1016:	80 93 80 01 	sts	0x0180, r24
    101a:	90 93 81 01 	sts	0x0181, r25
	
	Control_ch1_PID = P_ch1 + I_ch1 + D_ch1;
    101e:	60 91 86 01 	lds	r22, 0x0186
    1022:	70 91 87 01 	lds	r23, 0x0187
    1026:	80 91 88 01 	lds	r24, 0x0188
    102a:	90 91 89 01 	lds	r25, 0x0189
    102e:	20 91 82 01 	lds	r18, 0x0182
    1032:	30 91 83 01 	lds	r19, 0x0183
    1036:	40 91 84 01 	lds	r20, 0x0184
    103a:	50 91 85 01 	lds	r21, 0x0185
    103e:	c0 90 7e 01 	lds	r12, 0x017E
    1042:	d0 90 7f 01 	lds	r13, 0x017F
    1046:	e0 90 80 01 	lds	r14, 0x0180
    104a:	f0 90 81 01 	lds	r15, 0x0181
    104e:	0e 94 04 21 	call	0x4208	; 0x4208 <__addsf3>
    1052:	a7 01       	movw	r20, r14
    1054:	96 01       	movw	r18, r12
    1056:	0e 94 04 21 	call	0x4208	; 0x4208 <__addsf3>
    105a:	60 93 76 01 	sts	0x0176, r22
    105e:	70 93 77 01 	sts	0x0177, r23
    1062:	80 93 78 01 	sts	0x0178, r24
    1066:	90 93 79 01 	sts	0x0179, r25
	Control_ch1 = Control_ch1_PID + TempSetPoint1 * (float)0.21 - 5;
    106a:	60 91 8a 01 	lds	r22, 0x018A
    106e:	70 91 8b 01 	lds	r23, 0x018B
    1072:	80 91 8c 01 	lds	r24, 0x018C
    1076:	90 91 8d 01 	lds	r25, 0x018D
    107a:	c0 90 76 01 	lds	r12, 0x0176
    107e:	d0 90 77 01 	lds	r13, 0x0177
    1082:	e0 90 78 01 	lds	r14, 0x0178
    1086:	f0 90 79 01 	lds	r15, 0x0179
    108a:	2d e3       	ldi	r18, 0x3D	; 61
    108c:	3a e0       	ldi	r19, 0x0A	; 10
    108e:	47 e5       	ldi	r20, 0x57	; 87
    1090:	5e e3       	ldi	r21, 0x3E	; 62
    1092:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__mulsf3>
    1096:	a7 01       	movw	r20, r14
    1098:	96 01       	movw	r18, r12
    109a:	0e 94 04 21 	call	0x4208	; 0x4208 <__addsf3>
    109e:	20 e0       	ldi	r18, 0x00	; 0
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	40 ea       	ldi	r20, 0xA0	; 160
    10a4:	50 e4       	ldi	r21, 0x40	; 64
    10a6:	0e 94 03 21 	call	0x4206	; 0x4206 <__subsf3>
    10aa:	60 93 7a 01 	sts	0x017A, r22
    10ae:	70 93 7b 01 	sts	0x017B, r23
    10b2:	80 93 7c 01 	sts	0x017C, r24
    10b6:	90 93 7d 01 	sts	0x017D, r25
	pwmCh1 = (round(Control_ch1));
    10ba:	60 91 7a 01 	lds	r22, 0x017A
    10be:	70 91 7b 01 	lds	r23, 0x017B
    10c2:	80 91 7c 01 	lds	r24, 0x017C
    10c6:	90 91 7d 01 	lds	r25, 0x017D
    10ca:	0e 94 b6 22 	call	0x456c	; 0x456c <round>
    10ce:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <__fixsfsi>
    10d2:	70 93 c1 01 	sts	0x01C1, r23
    10d6:	60 93 c0 01 	sts	0x01C0, r22
	
	if(abs(TempError1[0]) > integralErrorActiveWindow)
    10da:	60 91 07 04 	lds	r22, 0x0407
    10de:	70 91 08 04 	lds	r23, 0x0408
    10e2:	80 91 09 04 	lds	r24, 0x0409
    10e6:	90 91 0a 04 	lds	r25, 0x040A
    10ea:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <__fixsfsi>
    10ee:	9b 01       	movw	r18, r22
    10f0:	77 23       	and	r23, r23
    10f2:	24 f4       	brge	.+8      	; 0x10fc <__vector_7+0x6a0>
    10f4:	22 27       	eor	r18, r18
    10f6:	33 27       	eor	r19, r19
    10f8:	26 1b       	sub	r18, r22
    10fa:	37 0b       	sbc	r19, r23
    10fc:	26 30       	cpi	r18, 0x06	; 6
    10fe:	31 05       	cpc	r19, r1
    1100:	44 f0       	brlt	.+16     	; 0x1112 <__vector_7+0x6b6>
	{
		I_ch1 = 0;									// Avoid integral wind-up
    1102:	10 92 82 01 	sts	0x0182, r1
    1106:	10 92 83 01 	sts	0x0183, r1
    110a:	10 92 84 01 	sts	0x0184, r1
    110e:	10 92 85 01 	sts	0x0185, r1
		case 2:
		PORTD &= 0b11011111;	// Set CS2 low
		break;
				
		case 3:
		PORTD &= 0b10111111;	// Set CS3 low
    1112:	5e 98       	cbi	0x0b, 6	; 11
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    1118:	0d b4       	in	r0, 0x2d	; 45
    111a:	07 fe       	sbrs	r0, 7
    111c:	fd cf       	rjmp	.-6      	; 0x1118 <__vector_7+0x6bc>
	byteword=SPDR;				//just for clearing SPIF
    111e:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
    1120:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    1122:	0d b4       	in	r0, 0x2d	; 45
    1124:	07 fe       	sbrs	r0, 7
    1126:	fd cf       	rjmp	.-6      	; 0x1122 <__vector_7+0x6c6>
	byteword=SPDR;
    1128:	9e b5       	in	r25, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
    112a:	8b b1       	in	r24, 0x0b	; 11
    112c:	80 6f       	ori	r24, 0xF0	; 240
    112e:	8b b9       	out	0x0b, r24	; 11
		case 2:
		PORTD &= 0b11011111;	// Set CS2 low
		break;
				
		case 3:
		PORTD &= 0b10111111;	// Set CS3 low
    1130:	5e 98       	cbi	0x0b, 6	; 11
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
    1132:	82 e0       	ldi	r24, 0x02	; 2
    1134:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    1136:	0d b4       	in	r0, 0x2d	; 45
    1138:	07 fe       	sbrs	r0, 7
    113a:	fd cf       	rjmp	.-6      	; 0x1136 <__vector_7+0x6da>
	byteword=SPDR;				//just for clearing SPIF
    113c:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
    113e:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    1140:	0d b4       	in	r0, 0x2d	; 45
    1142:	07 fe       	sbrs	r0, 7
    1144:	fd cf       	rjmp	.-6      	; 0x1140 <__vector_7+0x6e4>
	byteword=SPDR;
    1146:	6e b5       	in	r22, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
    1148:	8b b1       	in	r24, 0x0b	; 11
    114a:	80 6f       	ori	r24, 0xF0	; 240
    114c:	8b b9       	out	0x0b, r24	; 11
	uint8_t u8_msb = 0;
	uint8_t u8_lsb = 0;
	
	u8_msb = SPIread(0x01, ch);
	u8_lsb = SPIread(0x02, ch);
	adc_code = (((u8_msb << 8) | u8_lsb) >> 1);
    114e:	70 e0       	ldi	r23, 0x00	; 0
    1150:	79 2b       	or	r23, r25
    1152:	75 95       	asr	r23
    1154:	67 95       	ror	r22
	return ((float)adc_code / 32.0 - 256.0);
    1156:	07 2e       	mov	r0, r23
    1158:	00 0c       	add	r0, r0
    115a:	88 0b       	sbc	r24, r24
    115c:	99 0b       	sbc	r25, r25
    115e:	0e 94 9f 21 	call	0x433e	; 0x433e <__floatsisf>
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	40 e0       	ldi	r20, 0x00	; 0
    1168:	5d e3       	ldi	r21, 0x3D	; 61
    116a:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__mulsf3>
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	40 e8       	ldi	r20, 0x80	; 128
    1174:	53 e4       	ldi	r21, 0x43	; 67
    1176:	0e 94 03 21 	call	0x4206	; 0x4206 <__subsf3>
	{
		I_ch1 = 0;									// Avoid integral wind-up
	}
	
	// *** Channel 2 ***
	TempSensor2 = ReadTempSensor(3);
    117a:	60 93 ac 01 	sts	0x01AC, r22
    117e:	70 93 ad 01 	sts	0x01AD, r23
    1182:	80 93 ae 01 	sts	0x01AE, r24
    1186:	90 93 af 01 	sts	0x01AF, r25
	
	if(TempSensor2 > (float)maxAllowedTemp)					// Max temperature limit
    118a:	60 91 ac 01 	lds	r22, 0x01AC
    118e:	70 91 ad 01 	lds	r23, 0x01AD
    1192:	80 91 ae 01 	lds	r24, 0x01AE
    1196:	90 91 af 01 	lds	r25, 0x01AF
    119a:	20 e0       	ldi	r18, 0x00	; 0
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	40 ef       	ldi	r20, 0xF0	; 240
    11a0:	52 e4       	ldi	r21, 0x42	; 66
    11a2:	0e 94 4f 22 	call	0x449e	; 0x449e <__gesf2>
    11a6:	18 16       	cp	r1, r24
    11a8:	2c f4       	brge	.+10     	; 0x11b4 <__vector_7+0x758>
	{
		heaterEnableCh2 = false;
    11aa:	10 92 b9 01 	sts	0x01B9, r1
		PORTC &= allHeaterOff;
    11ae:	88 b1       	in	r24, 0x08	; 8
    11b0:	80 7f       	andi	r24, 0xF0	; 240
    11b2:	88 b9       	out	0x08, r24	; 8
	}
	
	TempError2[CtrlErrorIdx] = TempSetPoint2 - TempSensor2;			// Control error
    11b4:	c0 91 a6 01 	lds	r28, 0x01A6
    11b8:	d0 91 a7 01 	lds	r29, 0x01A7
    11bc:	60 91 72 01 	lds	r22, 0x0172
    11c0:	70 91 73 01 	lds	r23, 0x0173
    11c4:	80 91 74 01 	lds	r24, 0x0174
    11c8:	90 91 75 01 	lds	r25, 0x0175
    11cc:	20 91 ac 01 	lds	r18, 0x01AC
    11d0:	30 91 ad 01 	lds	r19, 0x01AD
    11d4:	40 91 ae 01 	lds	r20, 0x01AE
    11d8:	50 91 af 01 	lds	r21, 0x01AF
    11dc:	0e 94 03 21 	call	0x4206	; 0x4206 <__subsf3>
    11e0:	cc 0f       	add	r28, r28
    11e2:	dd 1f       	adc	r29, r29
    11e4:	cc 0f       	add	r28, r28
    11e6:	dd 1f       	adc	r29, r29
    11e8:	c9 58       	subi	r28, 0x89	; 137
    11ea:	db 4f       	sbci	r29, 0xFB	; 251
    11ec:	68 83       	st	Y, r22
    11ee:	79 83       	std	Y+1, r23	; 0x01
    11f0:	8a 83       	std	Y+2, r24	; 0x02
    11f2:	9b 83       	std	Y+3, r25	; 0x03
		
	P_ch2 = TempError2[CtrlErrorIdx] * Pgain_ch2;					// P error
    11f4:	e0 91 a6 01 	lds	r30, 0x01A6
    11f8:	f0 91 a7 01 	lds	r31, 0x01A7
    11fc:	ee 0f       	add	r30, r30
    11fe:	ff 1f       	adc	r31, r31
    1200:	ee 0f       	add	r30, r30
    1202:	ff 1f       	adc	r31, r31
    1204:	e9 58       	subi	r30, 0x89	; 137
    1206:	fb 4f       	sbci	r31, 0xFB	; 251
    1208:	60 81       	ld	r22, Z
    120a:	71 81       	ldd	r23, Z+1	; 0x01
    120c:	82 81       	ldd	r24, Z+2	; 0x02
    120e:	93 81       	ldd	r25, Z+3	; 0x03
    1210:	20 91 67 04 	lds	r18, 0x0467
    1214:	30 91 68 04 	lds	r19, 0x0468
    1218:	40 91 69 04 	lds	r20, 0x0469
    121c:	50 91 6a 04 	lds	r21, 0x046A
    1220:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__mulsf3>
    1224:	60 93 6e 01 	sts	0x016E, r22
    1228:	70 93 6f 01 	sts	0x016F, r23
    122c:	80 93 70 01 	sts	0x0170, r24
    1230:	90 93 71 01 	sts	0x0171, r25
	I_ch2 = I_ch2 + (TempError2[CtrlErrorIdx] * Igain_ch2);			// I error
    1234:	e0 91 a6 01 	lds	r30, 0x01A6
    1238:	f0 91 a7 01 	lds	r31, 0x01A7
    123c:	ee 0f       	add	r30, r30
    123e:	ff 1f       	adc	r31, r31
    1240:	ee 0f       	add	r30, r30
    1242:	ff 1f       	adc	r31, r31
    1244:	e9 58       	subi	r30, 0x89	; 137
    1246:	fb 4f       	sbci	r31, 0xFB	; 251
    1248:	60 81       	ld	r22, Z
    124a:	71 81       	ldd	r23, Z+1	; 0x01
    124c:	82 81       	ldd	r24, Z+2	; 0x02
    124e:	93 81       	ldd	r25, Z+3	; 0x03
    1250:	20 91 6f 04 	lds	r18, 0x046F
    1254:	30 91 70 04 	lds	r19, 0x0470
    1258:	40 91 71 04 	lds	r20, 0x0471
    125c:	50 91 72 04 	lds	r21, 0x0472
    1260:	c0 90 6a 01 	lds	r12, 0x016A
    1264:	d0 90 6b 01 	lds	r13, 0x016B
    1268:	e0 90 6c 01 	lds	r14, 0x016C
    126c:	f0 90 6d 01 	lds	r15, 0x016D
    1270:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__mulsf3>
    1274:	a7 01       	movw	r20, r14
    1276:	96 01       	movw	r18, r12
    1278:	0e 94 04 21 	call	0x4208	; 0x4208 <__addsf3>
    127c:	60 93 6a 01 	sts	0x016A, r22
    1280:	70 93 6b 01 	sts	0x016B, r23
    1284:	80 93 6c 01 	sts	0x016C, r24
    1288:	90 93 6d 01 	sts	0x016D, r25
	if(I_ch2 > integralErrorLimit)
    128c:	60 91 6a 01 	lds	r22, 0x016A
    1290:	70 91 6b 01 	lds	r23, 0x016B
    1294:	80 91 6c 01 	lds	r24, 0x016C
    1298:	90 91 6d 01 	lds	r25, 0x016D
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	40 e2       	ldi	r20, 0x20	; 32
    12a2:	51 e4       	ldi	r21, 0x41	; 65
    12a4:	0e 94 4f 22 	call	0x449e	; 0x449e <__gesf2>
    12a8:	18 16       	cp	r1, r24
    12aa:	64 f4       	brge	.+24     	; 0x12c4 <__vector_7+0x868>
	{
		I_ch2 = integralErrorLimit;
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	a0 e2       	ldi	r26, 0x20	; 32
    12b2:	b1 e4       	ldi	r27, 0x41	; 65
    12b4:	80 93 6a 01 	sts	0x016A, r24
    12b8:	90 93 6b 01 	sts	0x016B, r25
    12bc:	a0 93 6c 01 	sts	0x016C, r26
    12c0:	b0 93 6d 01 	sts	0x016D, r27
	}
	if(I_ch2 < -integralErrorLimit)
    12c4:	60 91 6a 01 	lds	r22, 0x016A
    12c8:	70 91 6b 01 	lds	r23, 0x016B
    12cc:	80 91 6c 01 	lds	r24, 0x016C
    12d0:	90 91 6d 01 	lds	r25, 0x016D
    12d4:	20 e0       	ldi	r18, 0x00	; 0
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	40 e2       	ldi	r20, 0x20	; 32
    12da:	51 ec       	ldi	r21, 0xC1	; 193
    12dc:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__cmpsf2>
    12e0:	88 23       	and	r24, r24
    12e2:	64 f4       	brge	.+24     	; 0x12fc <__vector_7+0x8a0>
	{
		I_ch2 = -integralErrorLimit;
    12e4:	80 e0       	ldi	r24, 0x00	; 0
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	a0 e2       	ldi	r26, 0x20	; 32
    12ea:	b1 ec       	ldi	r27, 0xC1	; 193
    12ec:	80 93 6a 01 	sts	0x016A, r24
    12f0:	90 93 6b 01 	sts	0x016B, r25
    12f4:	a0 93 6c 01 	sts	0x016C, r26
    12f8:	b0 93 6d 01 	sts	0x016D, r27
	}
		
	D_ch2 = (TempError2[CtrlErrorIdx] - TempError2[CtrlErrorHistIdx]) * Dgain_ch2; // D error
    12fc:	e0 91 a6 01 	lds	r30, 0x01A6
    1300:	f0 91 a7 01 	lds	r31, 0x01A7
    1304:	ee 0f       	add	r30, r30
    1306:	ff 1f       	adc	r31, r31
    1308:	ee 0f       	add	r30, r30
    130a:	ff 1f       	adc	r31, r31
    130c:	e9 58       	subi	r30, 0x89	; 137
    130e:	fb 4f       	sbci	r31, 0xFB	; 251
    1310:	60 81       	ld	r22, Z
    1312:	71 81       	ldd	r23, Z+1	; 0x01
    1314:	82 81       	ldd	r24, Z+2	; 0x02
    1316:	93 81       	ldd	r25, Z+3	; 0x03
    1318:	e0 91 00 01 	lds	r30, 0x0100
    131c:	f0 91 01 01 	lds	r31, 0x0101
    1320:	ee 0f       	add	r30, r30
    1322:	ff 1f       	adc	r31, r31
    1324:	ee 0f       	add	r30, r30
    1326:	ff 1f       	adc	r31, r31
    1328:	e9 58       	subi	r30, 0x89	; 137
    132a:	fb 4f       	sbci	r31, 0xFB	; 251
    132c:	20 81       	ld	r18, Z
    132e:	31 81       	ldd	r19, Z+1	; 0x01
    1330:	42 81       	ldd	r20, Z+2	; 0x02
    1332:	53 81       	ldd	r21, Z+3	; 0x03
    1334:	c0 90 a8 04 	lds	r12, 0x04A8
    1338:	d0 90 a9 04 	lds	r13, 0x04A9
    133c:	e0 90 aa 04 	lds	r14, 0x04AA
    1340:	f0 90 ab 04 	lds	r15, 0x04AB
    1344:	0e 94 03 21 	call	0x4206	; 0x4206 <__subsf3>
    1348:	a7 01       	movw	r20, r14
    134a:	96 01       	movw	r18, r12
    134c:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__mulsf3>
    1350:	60 93 66 01 	sts	0x0166, r22
    1354:	70 93 67 01 	sts	0x0167, r23
    1358:	80 93 68 01 	sts	0x0168, r24
    135c:	90 93 69 01 	sts	0x0169, r25
		
	Control_ch2_PID = P_ch2 + I_ch2 + D_ch2;
    1360:	60 91 6e 01 	lds	r22, 0x016E
    1364:	70 91 6f 01 	lds	r23, 0x016F
    1368:	80 91 70 01 	lds	r24, 0x0170
    136c:	90 91 71 01 	lds	r25, 0x0171
    1370:	20 91 6a 01 	lds	r18, 0x016A
    1374:	30 91 6b 01 	lds	r19, 0x016B
    1378:	40 91 6c 01 	lds	r20, 0x016C
    137c:	50 91 6d 01 	lds	r21, 0x016D
    1380:	c0 90 66 01 	lds	r12, 0x0166
    1384:	d0 90 67 01 	lds	r13, 0x0167
    1388:	e0 90 68 01 	lds	r14, 0x0168
    138c:	f0 90 69 01 	lds	r15, 0x0169
    1390:	0e 94 04 21 	call	0x4208	; 0x4208 <__addsf3>
    1394:	a7 01       	movw	r20, r14
    1396:	96 01       	movw	r18, r12
    1398:	0e 94 04 21 	call	0x4208	; 0x4208 <__addsf3>
    139c:	60 93 5e 01 	sts	0x015E, r22
    13a0:	70 93 5f 01 	sts	0x015F, r23
    13a4:	80 93 60 01 	sts	0x0160, r24
    13a8:	90 93 61 01 	sts	0x0161, r25
	Control_ch2 = Control_ch2_PID + TempSetPoint2 * (float)0.21 - 5;
    13ac:	60 91 72 01 	lds	r22, 0x0172
    13b0:	70 91 73 01 	lds	r23, 0x0173
    13b4:	80 91 74 01 	lds	r24, 0x0174
    13b8:	90 91 75 01 	lds	r25, 0x0175
    13bc:	c0 90 5e 01 	lds	r12, 0x015E
    13c0:	d0 90 5f 01 	lds	r13, 0x015F
    13c4:	e0 90 60 01 	lds	r14, 0x0160
    13c8:	f0 90 61 01 	lds	r15, 0x0161
    13cc:	2d e3       	ldi	r18, 0x3D	; 61
    13ce:	3a e0       	ldi	r19, 0x0A	; 10
    13d0:	47 e5       	ldi	r20, 0x57	; 87
    13d2:	5e e3       	ldi	r21, 0x3E	; 62
    13d4:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__mulsf3>
    13d8:	a7 01       	movw	r20, r14
    13da:	96 01       	movw	r18, r12
    13dc:	0e 94 04 21 	call	0x4208	; 0x4208 <__addsf3>
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	40 ea       	ldi	r20, 0xA0	; 160
    13e6:	50 e4       	ldi	r21, 0x40	; 64
    13e8:	0e 94 03 21 	call	0x4206	; 0x4206 <__subsf3>
    13ec:	60 93 62 01 	sts	0x0162, r22
    13f0:	70 93 63 01 	sts	0x0163, r23
    13f4:	80 93 64 01 	sts	0x0164, r24
    13f8:	90 93 65 01 	sts	0x0165, r25
	pwmCh2 = (round(Control_ch2));
    13fc:	60 91 62 01 	lds	r22, 0x0162
    1400:	70 91 63 01 	lds	r23, 0x0163
    1404:	80 91 64 01 	lds	r24, 0x0164
    1408:	90 91 65 01 	lds	r25, 0x0165
    140c:	0e 94 b6 22 	call	0x456c	; 0x456c <round>
    1410:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <__fixsfsi>
    1414:	70 93 bf 01 	sts	0x01BF, r23
    1418:	60 93 be 01 	sts	0x01BE, r22
		
	if(abs(TempError2[0]) > integralErrorActiveWindow)
    141c:	60 91 77 04 	lds	r22, 0x0477
    1420:	70 91 78 04 	lds	r23, 0x0478
    1424:	80 91 79 04 	lds	r24, 0x0479
    1428:	90 91 7a 04 	lds	r25, 0x047A
    142c:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <__fixsfsi>
    1430:	9b 01       	movw	r18, r22
    1432:	77 23       	and	r23, r23
    1434:	24 f4       	brge	.+8      	; 0x143e <__vector_7+0x9e2>
    1436:	22 27       	eor	r18, r18
    1438:	33 27       	eor	r19, r19
    143a:	26 1b       	sub	r18, r22
    143c:	37 0b       	sbc	r19, r23
    143e:	26 30       	cpi	r18, 0x06	; 6
    1440:	31 05       	cpc	r19, r1
    1442:	44 f0       	brlt	.+16     	; 0x1454 <__vector_7+0x9f8>
	{
		I_ch2 = 0;									// Avoid integral wind-up
    1444:	10 92 6a 01 	sts	0x016A, r1
    1448:	10 92 6b 01 	sts	0x016B, r1
    144c:	10 92 6c 01 	sts	0x016C, r1
    1450:	10 92 6d 01 	sts	0x016D, r1
		case 3:
		PORTD &= 0b10111111;	// Set CS3 low
		break;
						
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
    1454:	5f 98       	cbi	0x0b, 7	; 11
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    145a:	0d b4       	in	r0, 0x2d	; 45
    145c:	07 fe       	sbrs	r0, 7
    145e:	fd cf       	rjmp	.-6      	; 0x145a <__vector_7+0x9fe>
	byteword=SPDR;				//just for clearing SPIF
    1460:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
    1462:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    1464:	0d b4       	in	r0, 0x2d	; 45
    1466:	07 fe       	sbrs	r0, 7
    1468:	fd cf       	rjmp	.-6      	; 0x1464 <__vector_7+0xa08>
	byteword=SPDR;
    146a:	9e b5       	in	r25, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
    146c:	8b b1       	in	r24, 0x0b	; 11
    146e:	80 6f       	ori	r24, 0xF0	; 240
    1470:	8b b9       	out	0x0b, r24	; 11
		case 3:
		PORTD &= 0b10111111;	// Set CS3 low
		break;
						
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
    1472:	5f 98       	cbi	0x0b, 7	; 11
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
    1474:	82 e0       	ldi	r24, 0x02	; 2
    1476:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    1478:	0d b4       	in	r0, 0x2d	; 45
    147a:	07 fe       	sbrs	r0, 7
    147c:	fd cf       	rjmp	.-6      	; 0x1478 <__vector_7+0xa1c>
	byteword=SPDR;				//just for clearing SPIF
    147e:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
    1480:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    1482:	0d b4       	in	r0, 0x2d	; 45
    1484:	07 fe       	sbrs	r0, 7
    1486:	fd cf       	rjmp	.-6      	; 0x1482 <__vector_7+0xa26>
	byteword=SPDR;
    1488:	6e b5       	in	r22, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
    148a:	8b b1       	in	r24, 0x0b	; 11
    148c:	80 6f       	ori	r24, 0xF0	; 240
    148e:	8b b9       	out	0x0b, r24	; 11
	uint8_t u8_msb = 0;
	uint8_t u8_lsb = 0;
	
	u8_msb = SPIread(0x01, ch);
	u8_lsb = SPIread(0x02, ch);
	adc_code = (((u8_msb << 8) | u8_lsb) >> 1);
    1490:	70 e0       	ldi	r23, 0x00	; 0
    1492:	79 2b       	or	r23, r25
    1494:	75 95       	asr	r23
    1496:	67 95       	ror	r22
	return ((float)adc_code / 32.0 - 256.0);
    1498:	07 2e       	mov	r0, r23
    149a:	00 0c       	add	r0, r0
    149c:	88 0b       	sbc	r24, r24
    149e:	99 0b       	sbc	r25, r25
    14a0:	0e 94 9f 21 	call	0x433e	; 0x433e <__floatsisf>
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	40 e0       	ldi	r20, 0x00	; 0
    14aa:	5d e3       	ldi	r21, 0x3D	; 61
    14ac:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__mulsf3>
    14b0:	20 e0       	ldi	r18, 0x00	; 0
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	40 e8       	ldi	r20, 0x80	; 128
    14b6:	53 e4       	ldi	r21, 0x43	; 67
    14b8:	0e 94 03 21 	call	0x4206	; 0x4206 <__subsf3>
	{
		I_ch2 = 0;									// Avoid integral wind-up
	}

	// *** Channel 3 ***
	TempSensor3 = ReadTempSensor(4);
    14bc:	60 93 a8 01 	sts	0x01A8, r22
    14c0:	70 93 a9 01 	sts	0x01A9, r23
    14c4:	80 93 aa 01 	sts	0x01AA, r24
    14c8:	90 93 ab 01 	sts	0x01AB, r25
	
	if(TempSensor3 > (float)maxAllowedTemp)					// Max temperature limit
    14cc:	60 91 a8 01 	lds	r22, 0x01A8
    14d0:	70 91 a9 01 	lds	r23, 0x01A9
    14d4:	80 91 aa 01 	lds	r24, 0x01AA
    14d8:	90 91 ab 01 	lds	r25, 0x01AB
    14dc:	20 e0       	ldi	r18, 0x00	; 0
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	40 ef       	ldi	r20, 0xF0	; 240
    14e2:	52 e4       	ldi	r21, 0x42	; 66
    14e4:	0e 94 4f 22 	call	0x449e	; 0x449e <__gesf2>
    14e8:	18 16       	cp	r1, r24
    14ea:	2c f4       	brge	.+10     	; 0x14f6 <__vector_7+0xa9a>
	{
		heaterEnableCh3 = false;
    14ec:	10 92 b8 01 	sts	0x01B8, r1
		PORTC &= allHeaterOff;
    14f0:	88 b1       	in	r24, 0x08	; 8
    14f2:	80 7f       	andi	r24, 0xF0	; 240
    14f4:	88 b9       	out	0x08, r24	; 8
	}
	
	TempError3[CtrlErrorIdx] = TempSetPoint3 - TempSensor3;			// Control error
    14f6:	c0 91 a6 01 	lds	r28, 0x01A6
    14fa:	d0 91 a7 01 	lds	r29, 0x01A7
    14fe:	60 91 5a 01 	lds	r22, 0x015A
    1502:	70 91 5b 01 	lds	r23, 0x015B
    1506:	80 91 5c 01 	lds	r24, 0x015C
    150a:	90 91 5d 01 	lds	r25, 0x015D
    150e:	20 91 a8 01 	lds	r18, 0x01A8
    1512:	30 91 a9 01 	lds	r19, 0x01A9
    1516:	40 91 aa 01 	lds	r20, 0x01AA
    151a:	50 91 ab 01 	lds	r21, 0x01AB
    151e:	0e 94 03 21 	call	0x4206	; 0x4206 <__subsf3>
    1522:	cc 0f       	add	r28, r28
    1524:	dd 1f       	adc	r29, r29
    1526:	cc 0f       	add	r28, r28
    1528:	dd 1f       	adc	r29, r29
    152a:	cd 5c       	subi	r28, 0xCD	; 205
    152c:	db 4f       	sbci	r29, 0xFB	; 251
    152e:	68 83       	st	Y, r22
    1530:	79 83       	std	Y+1, r23	; 0x01
    1532:	8a 83       	std	Y+2, r24	; 0x02
    1534:	9b 83       	std	Y+3, r25	; 0x03
	
	P_ch3 = TempError3[CtrlErrorIdx] * Pgain_ch3;					// P error
    1536:	e0 91 a6 01 	lds	r30, 0x01A6
    153a:	f0 91 a7 01 	lds	r31, 0x01A7
    153e:	ee 0f       	add	r30, r30
    1540:	ff 1f       	adc	r31, r31
    1542:	ee 0f       	add	r30, r30
    1544:	ff 1f       	adc	r31, r31
    1546:	ed 5c       	subi	r30, 0xCD	; 205
    1548:	fb 4f       	sbci	r31, 0xFB	; 251
    154a:	60 81       	ld	r22, Z
    154c:	71 81       	ldd	r23, Z+1	; 0x01
    154e:	82 81       	ldd	r24, Z+2	; 0x02
    1550:	93 81       	ldd	r25, Z+3	; 0x03
    1552:	20 91 04 03 	lds	r18, 0x0304
    1556:	30 91 05 03 	lds	r19, 0x0305
    155a:	40 91 06 03 	lds	r20, 0x0306
    155e:	50 91 07 03 	lds	r21, 0x0307
    1562:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__mulsf3>
    1566:	60 93 56 01 	sts	0x0156, r22
    156a:	70 93 57 01 	sts	0x0157, r23
    156e:	80 93 58 01 	sts	0x0158, r24
    1572:	90 93 59 01 	sts	0x0159, r25
	I_ch3 = I_ch3 + (TempError3[CtrlErrorIdx] * Igain_ch3);			// I error
    1576:	e0 91 a6 01 	lds	r30, 0x01A6
    157a:	f0 91 a7 01 	lds	r31, 0x01A7
    157e:	ee 0f       	add	r30, r30
    1580:	ff 1f       	adc	r31, r31
    1582:	ee 0f       	add	r30, r30
    1584:	ff 1f       	adc	r31, r31
    1586:	ed 5c       	subi	r30, 0xCD	; 205
    1588:	fb 4f       	sbci	r31, 0xFB	; 251
    158a:	60 81       	ld	r22, Z
    158c:	71 81       	ldd	r23, Z+1	; 0x01
    158e:	82 81       	ldd	r24, Z+2	; 0x02
    1590:	93 81       	ldd	r25, Z+3	; 0x03
    1592:	20 91 f9 01 	lds	r18, 0x01F9
    1596:	30 91 fa 01 	lds	r19, 0x01FA
    159a:	40 91 fb 01 	lds	r20, 0x01FB
    159e:	50 91 fc 01 	lds	r21, 0x01FC
    15a2:	c0 90 52 01 	lds	r12, 0x0152
    15a6:	d0 90 53 01 	lds	r13, 0x0153
    15aa:	e0 90 54 01 	lds	r14, 0x0154
    15ae:	f0 90 55 01 	lds	r15, 0x0155
    15b2:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__mulsf3>
    15b6:	a7 01       	movw	r20, r14
    15b8:	96 01       	movw	r18, r12
    15ba:	0e 94 04 21 	call	0x4208	; 0x4208 <__addsf3>
    15be:	60 93 52 01 	sts	0x0152, r22
    15c2:	70 93 53 01 	sts	0x0153, r23
    15c6:	80 93 54 01 	sts	0x0154, r24
    15ca:	90 93 55 01 	sts	0x0155, r25
	if(I_ch3 > integralErrorLimit)
    15ce:	60 91 52 01 	lds	r22, 0x0152
    15d2:	70 91 53 01 	lds	r23, 0x0153
    15d6:	80 91 54 01 	lds	r24, 0x0154
    15da:	90 91 55 01 	lds	r25, 0x0155
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	40 e2       	ldi	r20, 0x20	; 32
    15e4:	51 e4       	ldi	r21, 0x41	; 65
    15e6:	0e 94 4f 22 	call	0x449e	; 0x449e <__gesf2>
    15ea:	18 16       	cp	r1, r24
    15ec:	64 f4       	brge	.+24     	; 0x1606 <__vector_7+0xbaa>
	{
		I_ch3 = integralErrorLimit;
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	a0 e2       	ldi	r26, 0x20	; 32
    15f4:	b1 e4       	ldi	r27, 0x41	; 65
    15f6:	80 93 52 01 	sts	0x0152, r24
    15fa:	90 93 53 01 	sts	0x0153, r25
    15fe:	a0 93 54 01 	sts	0x0154, r26
    1602:	b0 93 55 01 	sts	0x0155, r27
	}
	if(I_ch3 < -integralErrorLimit)
    1606:	60 91 52 01 	lds	r22, 0x0152
    160a:	70 91 53 01 	lds	r23, 0x0153
    160e:	80 91 54 01 	lds	r24, 0x0154
    1612:	90 91 55 01 	lds	r25, 0x0155
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	40 e2       	ldi	r20, 0x20	; 32
    161c:	51 ec       	ldi	r21, 0xC1	; 193
    161e:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__cmpsf2>
    1622:	88 23       	and	r24, r24
    1624:	64 f4       	brge	.+24     	; 0x163e <__vector_7+0xbe2>
	{
		I_ch3 = -integralErrorLimit;
    1626:	80 e0       	ldi	r24, 0x00	; 0
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	a0 e2       	ldi	r26, 0x20	; 32
    162c:	b1 ec       	ldi	r27, 0xC1	; 193
    162e:	80 93 52 01 	sts	0x0152, r24
    1632:	90 93 53 01 	sts	0x0153, r25
    1636:	a0 93 54 01 	sts	0x0154, r26
    163a:	b0 93 55 01 	sts	0x0155, r27
	}
	
	D_ch3 = (TempError3[CtrlErrorIdx] - TempError3[CtrlErrorHistIdx]) * Dgain_ch3; // D error
    163e:	e0 91 a6 01 	lds	r30, 0x01A6
    1642:	f0 91 a7 01 	lds	r31, 0x01A7
    1646:	ee 0f       	add	r30, r30
    1648:	ff 1f       	adc	r31, r31
    164a:	ee 0f       	add	r30, r30
    164c:	ff 1f       	adc	r31, r31
    164e:	ed 5c       	subi	r30, 0xCD	; 205
    1650:	fb 4f       	sbci	r31, 0xFB	; 251
    1652:	60 81       	ld	r22, Z
    1654:	71 81       	ldd	r23, Z+1	; 0x01
    1656:	82 81       	ldd	r24, Z+2	; 0x02
    1658:	93 81       	ldd	r25, Z+3	; 0x03
    165a:	e0 91 00 01 	lds	r30, 0x0100
    165e:	f0 91 01 01 	lds	r31, 0x0101
    1662:	ee 0f       	add	r30, r30
    1664:	ff 1f       	adc	r31, r31
    1666:	ee 0f       	add	r30, r30
    1668:	ff 1f       	adc	r31, r31
    166a:	ed 5c       	subi	r30, 0xCD	; 205
    166c:	fb 4f       	sbci	r31, 0xFB	; 251
    166e:	20 81       	ld	r18, Z
    1670:	31 81       	ldd	r19, Z+1	; 0x01
    1672:	42 81       	ldd	r20, Z+2	; 0x02
    1674:	53 81       	ldd	r21, Z+3	; 0x03
    1676:	c0 90 73 04 	lds	r12, 0x0473
    167a:	d0 90 74 04 	lds	r13, 0x0474
    167e:	e0 90 75 04 	lds	r14, 0x0475
    1682:	f0 90 76 04 	lds	r15, 0x0476
    1686:	0e 94 03 21 	call	0x4206	; 0x4206 <__subsf3>
    168a:	a7 01       	movw	r20, r14
    168c:	96 01       	movw	r18, r12
    168e:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__mulsf3>
    1692:	60 93 4e 01 	sts	0x014E, r22
    1696:	70 93 4f 01 	sts	0x014F, r23
    169a:	80 93 50 01 	sts	0x0150, r24
    169e:	90 93 51 01 	sts	0x0151, r25
	
	Control_ch3_PID = P_ch3 + I_ch3 + D_ch3;
    16a2:	60 91 56 01 	lds	r22, 0x0156
    16a6:	70 91 57 01 	lds	r23, 0x0157
    16aa:	80 91 58 01 	lds	r24, 0x0158
    16ae:	90 91 59 01 	lds	r25, 0x0159
    16b2:	20 91 52 01 	lds	r18, 0x0152
    16b6:	30 91 53 01 	lds	r19, 0x0153
    16ba:	40 91 54 01 	lds	r20, 0x0154
    16be:	50 91 55 01 	lds	r21, 0x0155
    16c2:	c0 90 4e 01 	lds	r12, 0x014E
    16c6:	d0 90 4f 01 	lds	r13, 0x014F
    16ca:	e0 90 50 01 	lds	r14, 0x0150
    16ce:	f0 90 51 01 	lds	r15, 0x0151
    16d2:	0e 94 04 21 	call	0x4208	; 0x4208 <__addsf3>
    16d6:	a7 01       	movw	r20, r14
    16d8:	96 01       	movw	r18, r12
    16da:	0e 94 04 21 	call	0x4208	; 0x4208 <__addsf3>
    16de:	60 93 46 01 	sts	0x0146, r22
    16e2:	70 93 47 01 	sts	0x0147, r23
    16e6:	80 93 48 01 	sts	0x0148, r24
    16ea:	90 93 49 01 	sts	0x0149, r25
	Control_ch3 = Control_ch3_PID + TempSetPoint3 * (float)0.21 - 5;
    16ee:	60 91 5a 01 	lds	r22, 0x015A
    16f2:	70 91 5b 01 	lds	r23, 0x015B
    16f6:	80 91 5c 01 	lds	r24, 0x015C
    16fa:	90 91 5d 01 	lds	r25, 0x015D
    16fe:	c0 90 46 01 	lds	r12, 0x0146
    1702:	d0 90 47 01 	lds	r13, 0x0147
    1706:	e0 90 48 01 	lds	r14, 0x0148
    170a:	f0 90 49 01 	lds	r15, 0x0149
    170e:	2d e3       	ldi	r18, 0x3D	; 61
    1710:	3a e0       	ldi	r19, 0x0A	; 10
    1712:	47 e5       	ldi	r20, 0x57	; 87
    1714:	5e e3       	ldi	r21, 0x3E	; 62
    1716:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__mulsf3>
    171a:	a7 01       	movw	r20, r14
    171c:	96 01       	movw	r18, r12
    171e:	0e 94 04 21 	call	0x4208	; 0x4208 <__addsf3>
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	40 ea       	ldi	r20, 0xA0	; 160
    1728:	50 e4       	ldi	r21, 0x40	; 64
    172a:	0e 94 03 21 	call	0x4206	; 0x4206 <__subsf3>
    172e:	60 93 4a 01 	sts	0x014A, r22
    1732:	70 93 4b 01 	sts	0x014B, r23
    1736:	80 93 4c 01 	sts	0x014C, r24
    173a:	90 93 4d 01 	sts	0x014D, r25
	pwmCh3 = (round(Control_ch3));
    173e:	60 91 4a 01 	lds	r22, 0x014A
    1742:	70 91 4b 01 	lds	r23, 0x014B
    1746:	80 91 4c 01 	lds	r24, 0x014C
    174a:	90 91 4d 01 	lds	r25, 0x014D
    174e:	0e 94 b6 22 	call	0x456c	; 0x456c <round>
    1752:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <__fixsfsi>
    1756:	70 93 bd 01 	sts	0x01BD, r23
    175a:	60 93 bc 01 	sts	0x01BC, r22
	
	if(abs(TempError3[0]) > integralErrorActiveWindow)
    175e:	60 91 33 04 	lds	r22, 0x0433
    1762:	70 91 34 04 	lds	r23, 0x0434
    1766:	80 91 35 04 	lds	r24, 0x0435
    176a:	90 91 36 04 	lds	r25, 0x0436
    176e:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <__fixsfsi>
    1772:	9b 01       	movw	r18, r22
    1774:	77 23       	and	r23, r23
    1776:	24 f4       	brge	.+8      	; 0x1780 <__vector_7+0xd24>
    1778:	22 27       	eor	r18, r18
    177a:	33 27       	eor	r19, r19
    177c:	26 1b       	sub	r18, r22
    177e:	37 0b       	sbc	r19, r23
    1780:	26 30       	cpi	r18, 0x06	; 6
    1782:	31 05       	cpc	r19, r1
    1784:	44 f0       	brlt	.+16     	; 0x1796 <__vector_7+0xd3a>
	{
		I_ch3 = 0;									// Avoid integral wind-up
    1786:	10 92 52 01 	sts	0x0152, r1
    178a:	10 92 53 01 	sts	0x0153, r1
    178e:	10 92 54 01 	sts	0x0154, r1
    1792:	10 92 55 01 	sts	0x0155, r1
	}	

	CtrlErrorIdx ++;							// Control error ring buffer index
    1796:	80 91 a6 01 	lds	r24, 0x01A6
    179a:	90 91 a7 01 	lds	r25, 0x01A7
    179e:	01 96       	adiw	r24, 0x01	; 1
    17a0:	90 93 a7 01 	sts	0x01A7, r25
    17a4:	80 93 a6 01 	sts	0x01A6, r24
	if(CtrlErrorIdx > errorHistory)
    17a8:	80 91 a6 01 	lds	r24, 0x01A6
    17ac:	90 91 a7 01 	lds	r25, 0x01A7
    17b0:	0b 97       	sbiw	r24, 0x0b	; 11
    17b2:	24 f0       	brlt	.+8      	; 0x17bc <__vector_7+0xd60>
	{
		CtrlErrorIdx = 0;
    17b4:	10 92 a7 01 	sts	0x01A7, r1
    17b8:	10 92 a6 01 	sts	0x01A6, r1
	}
	CtrlErrorHistIdx = CtrlErrorIdx + 1;
    17bc:	80 91 a6 01 	lds	r24, 0x01A6
    17c0:	90 91 a7 01 	lds	r25, 0x01A7
    17c4:	01 96       	adiw	r24, 0x01	; 1
    17c6:	90 93 01 01 	sts	0x0101, r25
    17ca:	80 93 00 01 	sts	0x0100, r24
	if(CtrlErrorHistIdx > errorHistory)
    17ce:	80 91 00 01 	lds	r24, 0x0100
    17d2:	90 91 01 01 	lds	r25, 0x0101
    17d6:	0b 97       	sbiw	r24, 0x0b	; 11
    17d8:	24 f0       	brlt	.+8      	; 0x17e2 <__vector_7+0xd86>
	{
		CtrlErrorHistIdx = 0;
    17da:	10 92 01 01 	sts	0x0101, r1
    17de:	10 92 00 01 	sts	0x0100, r1
	}		

	PORTD &= 0b11110111;						// Turn off LED on PCB (irq call freq: 16MHz / 1024 / 255 = 61.3 Hz )
    17e2:	5b 98       	cbi	0x0b, 3	; 11
}
    17e4:	ff 91       	pop	r31
    17e6:	ef 91       	pop	r30
    17e8:	df 91       	pop	r29
    17ea:	cf 91       	pop	r28
    17ec:	bf 91       	pop	r27
    17ee:	af 91       	pop	r26
    17f0:	9f 91       	pop	r25
    17f2:	8f 91       	pop	r24
    17f4:	7f 91       	pop	r23
    17f6:	6f 91       	pop	r22
    17f8:	5f 91       	pop	r21
    17fa:	4f 91       	pop	r20
    17fc:	3f 91       	pop	r19
    17fe:	2f 91       	pop	r18
    1800:	ff 90       	pop	r15
    1802:	ef 90       	pop	r14
    1804:	df 90       	pop	r13
    1806:	cf 90       	pop	r12
    1808:	0f 90       	pop	r0
    180a:	0f be       	out	0x3f, r0	; 63
    180c:	0f 90       	pop	r0
    180e:	1f 90       	pop	r1
    1810:	18 95       	reti

00001812 <ftoa>:
	printStatus("IntiRead: ");
	printStatus(data);
}

void ftoa(float num, char *str)
{
    1812:	8f 92       	push	r8
    1814:	9f 92       	push	r9
    1816:	af 92       	push	r10
    1818:	bf 92       	push	r11
    181a:	cf 92       	push	r12
    181c:	df 92       	push	r13
    181e:	ef 92       	push	r14
    1820:	ff 92       	push	r15
    1822:	0f 93       	push	r16
    1824:	1f 93       	push	r17
    1826:	cf 93       	push	r28
    1828:	df 93       	push	r29
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
    182e:	64 97       	sbiw	r28, 0x14	; 20
    1830:	0f b6       	in	r0, 0x3f	; 63
    1832:	f8 94       	cli
    1834:	de bf       	out	0x3e, r29	; 62
    1836:	0f be       	out	0x3f, r0	; 63
    1838:	cd bf       	out	0x3d, r28	; 61
    183a:	4b 01       	movw	r8, r22
    183c:	5c 01       	movw	r10, r24
    183e:	8a 01       	movw	r16, r20
	int intpart = num;
    1840:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <__fixsfsi>
    1844:	6b 01       	movw	r12, r22
    1846:	7c 01       	movw	r14, r24
	int i;
	float decimal_part;
	char decimal[20];
	int PRECISION = 3;						// Decimal precision

	memset(str, 0x0, 20);
    1848:	84 e1       	ldi	r24, 0x14	; 20
    184a:	f8 01       	movw	r30, r16
    184c:	11 92       	st	Z+, r1
    184e:	8a 95       	dec	r24
    1850:	e9 f7       	brne	.-6      	; 0x184c <ftoa+0x3a>
    1852:	4a e0       	ldi	r20, 0x0A	; 10
    1854:	b8 01       	movw	r22, r16
    1856:	c6 01       	movw	r24, r12
    1858:	0e 94 62 23 	call	0x46c4	; 0x46c4 <__itoa_ncheck>
	itoa(num, str, 10);

	strcat(str, ".");
    185c:	f8 01       	movw	r30, r16
    185e:	01 90       	ld	r0, Z+
    1860:	00 20       	and	r0, r0
    1862:	e9 f7       	brne	.-6      	; 0x185e <ftoa+0x4c>
    1864:	31 97       	sbiw	r30, 0x01	; 1
    1866:	8e e2       	ldi	r24, 0x2E	; 46
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	91 83       	std	Z+1, r25	; 0x01
    186c:	80 83       	st	Z, r24

	decimal_part = num - intpart;
    186e:	b6 01       	movw	r22, r12
    1870:	dd 0c       	add	r13, r13
    1872:	88 0b       	sbc	r24, r24
    1874:	99 0b       	sbc	r25, r25
    1876:	0e 94 9f 21 	call	0x433e	; 0x433e <__floatsisf>
    187a:	9b 01       	movw	r18, r22
    187c:	ac 01       	movw	r20, r24
    187e:	c5 01       	movw	r24, r10
    1880:	b4 01       	movw	r22, r8
    1882:	0e 94 03 21 	call	0x4206	; 0x4206 <__subsf3>
	intdecimal = decimal_part * 1000;		// If decimal precision is 3 then 1000, 2 -> 100, 1 -> 10 ...;
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	4a e7       	ldi	r20, 0x7A	; 122
    188c:	54 e4       	ldi	r21, 0x44	; 68
    188e:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__mulsf3>
    1892:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <__fixsfsi>
    1896:	9b 01       	movw	r18, r22
    1898:	77 23       	and	r23, r23
    189a:	24 f4       	brge	.+8      	; 0x18a4 <ftoa+0x92>
    189c:	22 27       	eor	r18, r18
    189e:	33 27       	eor	r19, r19
    18a0:	26 1b       	sub	r18, r22
    18a2:	37 0b       	sbc	r19, r23
    18a4:	4a e0       	ldi	r20, 0x0A	; 10
    18a6:	be 01       	movw	r22, r28
    18a8:	6f 5f       	subi	r22, 0xFF	; 255
    18aa:	7f 4f       	sbci	r23, 0xFF	; 255
    18ac:	c9 01       	movw	r24, r18
    18ae:	0e 94 62 23 	call	0x46c4	; 0x46c4 <__itoa_ncheck>
	if(intdecimal < 0)
	{
		intdecimal = -intdecimal;
	}
	itoa(intdecimal, decimal, 10);
	for(i =0;i < (PRECISION - strlen(decimal));i++)
    18b2:	80 e0       	ldi	r24, 0x00	; 0
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	de 01       	movw	r26, r28
    18b8:	11 96       	adiw	r26, 0x01	; 1
    18ba:	23 e0       	ldi	r18, 0x03	; 3
    18bc:	30 e0       	ldi	r19, 0x00	; 0
	{
		strcat(str, "0");
    18be:	40 e3       	ldi	r20, 0x30	; 48
    18c0:	50 e0       	ldi	r21, 0x00	; 0
	if(intdecimal < 0)
	{
		intdecimal = -intdecimal;
	}
	itoa(intdecimal, decimal, 10);
	for(i =0;i < (PRECISION - strlen(decimal));i++)
    18c2:	08 c0       	rjmp	.+16     	; 0x18d4 <ftoa+0xc2>
	{
		strcat(str, "0");
    18c4:	f8 01       	movw	r30, r16
    18c6:	01 90       	ld	r0, Z+
    18c8:	00 20       	and	r0, r0
    18ca:	e9 f7       	brne	.-6      	; 0x18c6 <ftoa+0xb4>
    18cc:	31 97       	sbiw	r30, 0x01	; 1
    18ce:	51 83       	std	Z+1, r21	; 0x01
    18d0:	40 83       	st	Z, r20
	if(intdecimal < 0)
	{
		intdecimal = -intdecimal;
	}
	itoa(intdecimal, decimal, 10);
	for(i =0;i < (PRECISION - strlen(decimal));i++)
    18d2:	01 96       	adiw	r24, 0x01	; 1
    18d4:	fd 01       	movw	r30, r26
    18d6:	01 90       	ld	r0, Z+
    18d8:	00 20       	and	r0, r0
    18da:	e9 f7       	brne	.-6      	; 0x18d6 <ftoa+0xc4>
    18dc:	31 97       	sbiw	r30, 0x01	; 1
    18de:	ea 1b       	sub	r30, r26
    18e0:	fb 0b       	sbc	r31, r27
    18e2:	b9 01       	movw	r22, r18
    18e4:	6e 1b       	sub	r22, r30
    18e6:	7f 0b       	sbc	r23, r31
    18e8:	86 17       	cp	r24, r22
    18ea:	97 07       	cpc	r25, r23
    18ec:	58 f3       	brcs	.-42     	; 0x18c4 <ftoa+0xb2>
	{
		strcat(str, "0");
	}
	strcat(str, decimal);
    18ee:	be 01       	movw	r22, r28
    18f0:	6f 5f       	subi	r22, 0xFF	; 255
    18f2:	7f 4f       	sbci	r23, 0xFF	; 255
    18f4:	c8 01       	movw	r24, r16
    18f6:	0e 94 2e 23 	call	0x465c	; 0x465c <strcat>
}
    18fa:	64 96       	adiw	r28, 0x14	; 20
    18fc:	0f b6       	in	r0, 0x3f	; 63
    18fe:	f8 94       	cli
    1900:	de bf       	out	0x3e, r29	; 62
    1902:	0f be       	out	0x3f, r0	; 63
    1904:	cd bf       	out	0x3d, r28	; 61
    1906:	df 91       	pop	r29
    1908:	cf 91       	pop	r28
    190a:	1f 91       	pop	r17
    190c:	0f 91       	pop	r16
    190e:	ff 90       	pop	r15
    1910:	ef 90       	pop	r14
    1912:	df 90       	pop	r13
    1914:	cf 90       	pop	r12
    1916:	bf 90       	pop	r11
    1918:	af 90       	pop	r10
    191a:	9f 90       	pop	r9
    191c:	8f 90       	pop	r8
    191e:	08 95       	ret

00001920 <main>:
	eeprom_write_float( (float*)eepromAdr_IgainCh3, Igain_ch3 );
	eeprom_write_float( (float*)eepromAdr_DgainCh3, Dgain_ch3 );			
}

int main(void)
{
    1920:	cf 93       	push	r28
    1922:	df 93       	push	r29
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
    1928:	cf 55       	subi	r28, 0x5F	; 95
    192a:	d1 09       	sbc	r29, r1
    192c:	0f b6       	in	r0, 0x3f	; 63
    192e:	f8 94       	cli
    1930:	de bf       	out	0x3e, r29	; 62
    1932:	0f be       	out	0x3f, r0	; 63
    1934:	cd bf       	out	0x3d, r28	; 61
	char requestID[4];
	char s_string[20] = "C2CA SA ADP 1.0";
    1936:	80 e1       	ldi	r24, 0x10	; 16
    1938:	e8 e0       	ldi	r30, 0x08	; 8
    193a:	f1 e0       	ldi	r31, 0x01	; 1
    193c:	de 01       	movw	r26, r28
    193e:	15 96       	adiw	r26, 0x05	; 5
    1940:	01 90       	ld	r0, Z+
    1942:	0d 92       	st	X+, r0
    1944:	8a 95       	dec	r24
    1946:	e1 f7       	brne	.-8      	; 0x1940 <main+0x20>
    1948:	1d 8a       	std	Y+21, r1	; 0x15
    194a:	1e 8a       	std	Y+22, r1	; 0x16
    194c:	1f 8a       	std	Y+23, r1	; 0x17
    194e:	18 8e       	std	Y+24, r1	; 0x18
	char *pos;
	char inCrC_string[5];
	int i;
	int var;
	
	cli();
    1950:	f8 94       	cli
	uart_init();
    1952:	0e 94 a4 01 	call	0x348	; 0x348 <uart_init>
	sei();
    1956:	78 94       	sei
/************************************************
SPI INITIALISATION
*************************************************/
static inline void SPIinit(void)
{
	SPI_DDR &= 0b11101111;							// PB4 = Input = MISO
    1958:	24 98       	cbi	0x04, 4	; 4
	SPI_DDR = (1<<PORTB3)|(1<<PORTB5|(1<<PORTB2));	// Set MOSI, SCK and SS as output
    195a:	8c e2       	ldi	r24, 0x2C	; 44
    195c:	84 b9       	out	0x04, r24	; 4
	
	
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0)|(1<<CPHA)|(1<<CPOL); // Enable SPI, Master, set clock rate fck/16
    195e:	8d e5       	ldi	r24, 0x5D	; 93
    1960:	8c bd       	out	0x2c, r24	; 44
	cli();
	uart_init();
	sei();
	SPIinit();

	pwmCh0 = 1;
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	90 93 c3 01 	sts	0x01C3, r25
    196a:	80 93 c2 01 	sts	0x01C2, r24
	pwmCh1 = 1;
    196e:	90 93 c1 01 	sts	0x01C1, r25
    1972:	80 93 c0 01 	sts	0x01C0, r24
	pwmCh2 = 1;
    1976:	90 93 bf 01 	sts	0x01BF, r25
    197a:	80 93 be 01 	sts	0x01BE, r24
	pwmCh3 = 1;
    197e:	90 93 bd 01 	sts	0x01BD, r25
    1982:	80 93 bc 01 	sts	0x01BC, r24

	DDRD = 0b11111000;			// 1 = output 0 = input
    1986:	88 ef       	ldi	r24, 0xF8	; 248
    1988:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0b00001111;
    198a:	8f e0       	ldi	r24, 0x0F	; 15
    198c:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1<<PORTB1);		// Set stepper Dir to output
    198e:	21 9a       	sbi	0x04, 1	; 4
	
	PORTD |=(1<<PORTD7)|(1<<PORTD6)|(1<<PORTD5)|(1<<PORTD4);	// Set initially all CS high
    1990:	8b b1       	in	r24, 0x0b	; 11
    1992:	80 6f       	ori	r24, 0xF0	; 240
    1994:	8b b9       	out	0x0b, r24	; 11
	}
}

static inline void ReadParmEEPROM()
{
	TempSetPoint0 = eeprom_read_float((float*)eepromAdr_TempSetPoint0);
    1996:	80 e0       	ldi	r24, 0x00	; 0
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <eeprom_read_dword>
    199e:	60 93 a2 01 	sts	0x01A2, r22
    19a2:	70 93 a3 01 	sts	0x01A3, r23
    19a6:	80 93 a4 01 	sts	0x01A4, r24
    19aa:	90 93 a5 01 	sts	0x01A5, r25
	Pgain_ch0 = eeprom_read_float((float*)eepromAdr_PgainCh0);
    19ae:	84 e0       	ldi	r24, 0x04	; 4
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <eeprom_read_dword>
    19b6:	60 93 00 03 	sts	0x0300, r22
    19ba:	70 93 01 03 	sts	0x0301, r23
    19be:	80 93 02 03 	sts	0x0302, r24
    19c2:	90 93 03 03 	sts	0x0303, r25
	Igain_ch0 = eeprom_read_float((float*)eepromAdr_IgainCh0);
    19c6:	88 e0       	ldi	r24, 0x08	; 8
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <eeprom_read_dword>
    19ce:	60 93 b0 04 	sts	0x04B0, r22
    19d2:	70 93 b1 04 	sts	0x04B1, r23
    19d6:	80 93 b2 04 	sts	0x04B2, r24
    19da:	90 93 b3 04 	sts	0x04B3, r25
	Dgain_ch0 = eeprom_read_float((float*)eepromAdr_DgainCh0);
    19de:	8c e0       	ldi	r24, 0x0C	; 12
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <eeprom_read_dword>
    19e6:	60 93 fd 01 	sts	0x01FD, r22
    19ea:	70 93 fe 01 	sts	0x01FE, r23
    19ee:	80 93 ff 01 	sts	0x01FF, r24
    19f2:	90 93 00 02 	sts	0x0200, r25
	
	TempSetPoint1 = eeprom_read_float((float*)eepromAdr_TempSetPoint1);
    19f6:	80 e1       	ldi	r24, 0x10	; 16
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <eeprom_read_dword>
    19fe:	60 93 8a 01 	sts	0x018A, r22
    1a02:	70 93 8b 01 	sts	0x018B, r23
    1a06:	80 93 8c 01 	sts	0x018C, r24
    1a0a:	90 93 8d 01 	sts	0x018D, r25
	Pgain_ch1 = eeprom_read_float((float*)eepromAdr_PgainCh1);
    1a0e:	84 e1       	ldi	r24, 0x14	; 20
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <eeprom_read_dword>
    1a16:	60 93 6b 04 	sts	0x046B, r22
    1a1a:	70 93 6c 04 	sts	0x046C, r23
    1a1e:	80 93 6d 04 	sts	0x046D, r24
    1a22:	90 93 6e 04 	sts	0x046E, r25
	Igain_ch1 = eeprom_read_float((float*)eepromAdr_IgainCh1);
    1a26:	88 e1       	ldi	r24, 0x18	; 24
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <eeprom_read_dword>
    1a2e:	60 93 c6 01 	sts	0x01C6, r22
    1a32:	70 93 c7 01 	sts	0x01C7, r23
    1a36:	80 93 c8 01 	sts	0x01C8, r24
    1a3a:	90 93 c9 01 	sts	0x01C9, r25
	Dgain_ch1 = eeprom_read_float((float*)eepromAdr_DgainCh1);
    1a3e:	8c e1       	ldi	r24, 0x1C	; 28
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <eeprom_read_dword>
    1a46:	60 93 ac 04 	sts	0x04AC, r22
    1a4a:	70 93 ad 04 	sts	0x04AD, r23
    1a4e:	80 93 ae 04 	sts	0x04AE, r24
    1a52:	90 93 af 04 	sts	0x04AF, r25
	
	TempSetPoint2 = eeprom_read_float((float*)eepromAdr_TempSetPoint2);
    1a56:	80 e2       	ldi	r24, 0x20	; 32
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <eeprom_read_dword>
    1a5e:	60 93 72 01 	sts	0x0172, r22
    1a62:	70 93 73 01 	sts	0x0173, r23
    1a66:	80 93 74 01 	sts	0x0174, r24
    1a6a:	90 93 75 01 	sts	0x0175, r25
	Pgain_ch2 = eeprom_read_float((float*)eepromAdr_PgainCh2);
    1a6e:	84 e2       	ldi	r24, 0x24	; 36
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <eeprom_read_dword>
    1a76:	60 93 67 04 	sts	0x0467, r22
    1a7a:	70 93 68 04 	sts	0x0468, r23
    1a7e:	80 93 69 04 	sts	0x0469, r24
    1a82:	90 93 6a 04 	sts	0x046A, r25
	Igain_ch2 = eeprom_read_float((float*)eepromAdr_IgainCh2);
    1a86:	88 e2       	ldi	r24, 0x28	; 40
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <eeprom_read_dword>
    1a8e:	60 93 6f 04 	sts	0x046F, r22
    1a92:	70 93 70 04 	sts	0x0470, r23
    1a96:	80 93 71 04 	sts	0x0471, r24
    1a9a:	90 93 72 04 	sts	0x0472, r25
	Dgain_ch2 = eeprom_read_float((float*)eepromAdr_DgainCh2);
    1a9e:	8c e2       	ldi	r24, 0x2C	; 44
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <eeprom_read_dword>
    1aa6:	60 93 a8 04 	sts	0x04A8, r22
    1aaa:	70 93 a9 04 	sts	0x04A9, r23
    1aae:	80 93 aa 04 	sts	0x04AA, r24
    1ab2:	90 93 ab 04 	sts	0x04AB, r25
	
	TempSetPoint3 = eeprom_read_float((float*)eepromAdr_TempSetPoint3);
    1ab6:	80 e3       	ldi	r24, 0x30	; 48
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <eeprom_read_dword>
    1abe:	60 93 5a 01 	sts	0x015A, r22
    1ac2:	70 93 5b 01 	sts	0x015B, r23
    1ac6:	80 93 5c 01 	sts	0x015C, r24
    1aca:	90 93 5d 01 	sts	0x015D, r25
	Pgain_ch3 = eeprom_read_float((float*)eepromAdr_PgainCh3);
    1ace:	84 e3       	ldi	r24, 0x34	; 52
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <eeprom_read_dword>
    1ad6:	60 93 04 03 	sts	0x0304, r22
    1ada:	70 93 05 03 	sts	0x0305, r23
    1ade:	80 93 06 03 	sts	0x0306, r24
    1ae2:	90 93 07 03 	sts	0x0307, r25
	Igain_ch3 = eeprom_read_float((float*)eepromAdr_IgainCh3);
    1ae6:	88 e3       	ldi	r24, 0x38	; 56
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <eeprom_read_dword>
    1aee:	60 93 f9 01 	sts	0x01F9, r22
    1af2:	70 93 fa 01 	sts	0x01FA, r23
    1af6:	80 93 fb 01 	sts	0x01FB, r24
    1afa:	90 93 fc 01 	sts	0x01FC, r25
	Dgain_ch3 = eeprom_read_float((float*)eepromAdr_DgainCh3);			
    1afe:	8c e3       	ldi	r24, 0x3C	; 60
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <eeprom_read_dword>
    1b06:	60 93 73 04 	sts	0x0473, r22
    1b0a:	70 93 74 04 	sts	0x0474, r23
    1b0e:	80 93 75 04 	sts	0x0475, r24
    1b12:	90 93 76 04 	sts	0x0476, r25
	printStatus(data);
}

static inline void MAX31865initAuto(uint8_t ch)
{
	MaxRTDinit(0xC3, ch);
    1b16:	61 e0       	ldi	r22, 0x01	; 1
    1b18:	83 ec       	ldi	r24, 0xC3	; 195
    1b1a:	0e 94 0c 02 	call	0x418	; 0x418 <MaxRTDinit>
    1b1e:	62 e0       	ldi	r22, 0x02	; 2
    1b20:	83 ec       	ldi	r24, 0xC3	; 195
    1b22:	0e 94 0c 02 	call	0x418	; 0x418 <MaxRTDinit>
    1b26:	63 e0       	ldi	r22, 0x03	; 3
    1b28:	83 ec       	ldi	r24, 0xC3	; 195
    1b2a:	0e 94 0c 02 	call	0x418	; 0x418 <MaxRTDinit>
    1b2e:	64 e0       	ldi	r22, 0x04	; 4
    1b30:	83 ec       	ldi	r24, 0xC3	; 195
    1b32:	0e 94 0c 02 	call	0x418	; 0x418 <MaxRTDinit>
}

static inline void TimerInit(void)
{
	// Timer0 PWM output
	TIMSK0 = _BV(OCIE0A);				// Enable Interrupt TimerCounter0 Compare Match A (TIMER0_COMPA_vect)
    1b36:	82 e0       	ldi	r24, 0x02	; 2
    1b38:	80 93 6e 00 	sts	0x006E, r24
	TCCR0A = _BV(WGM01);				// Mode = CTC (Clear Timer on Compare)
    1b3c:	84 bd       	out	0x24, r24	; 36
	TCCR0B = _BV(CS02) | _BV(CS00);		// 16MHz/1024, 0.000064 seconds per tick
    1b3e:	95 e0       	ldi	r25, 0x05	; 5
    1b40:	95 bd       	out	0x25, r25	; 37
	OCR0A = 16;							// TIMER0_COMPA_vect will be triggered each 0.000064 x 16 = 0.001024 s (976.5 Hz)
    1b42:	90 e1       	ldi	r25, 0x10	; 16
    1b44:	97 bd       	out	0x27, r25	; 39

	// Timer2 PID controller	
	TIMSK2 = _BV(OCIE2A);				// Enable Interrupt TimerCounter2 Compare Match A (TIMER2_COMPA_vect)
    1b46:	80 93 70 00 	sts	0x0070, r24
	TCCR2A = _BV(WGM21);				// Mode = CTC (Clear Timer on Compare)
    1b4a:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B = _BV(CS22) | _BV(CS21) | _BV(CS20);		// 16MHz/1024, 0.000064 seconds per tick
    1b4e:	87 e0       	ldi	r24, 0x07	; 7
    1b50:	80 93 b1 00 	sts	0x00B1, r24
	OCR2A = 255;						// TIMER2_COMPA_vect will be triggered each 0.000064 x 255 = 0.01632 s (61.3 Hz)
    1b54:	8f ef       	ldi	r24, 0xFF	; 255
    1b56:	80 93 b3 00 	sts	0x00B3, r24
	
	sei();
    1b5a:	78 94       	sei
	*	PC:		#12A?VR104
	*	ATMega:	!12A70.0006DCA
	***********************************************************/
	while(1)
	{
		memset(rx_string, 0x00, rx_size);			// Purge rx_string
    1b5c:	0f 2e       	mov	r0, r31
    1b5e:	f4 eb       	ldi	r31, 0xB4	; 180
    1b60:	af 2e       	mov	r10, r31
    1b62:	f4 e0       	ldi	r31, 0x04	; 4
    1b64:	bf 2e       	mov	r11, r31
    1b66:	f0 2d       	mov	r31, r0
 * \returns next data byte in buffer
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
    1b68:	0f 2e       	mov	r0, r31
    1b6a:	f3 ea       	ldi	r31, 0xA3	; 163
    1b6c:	4f 2e       	mov	r4, r31
    1b6e:	f4 e0       	ldi	r31, 0x04	; 4
    1b70:	5f 2e       	mov	r5, r31
    1b72:	f0 2d       	mov	r31, r0
    1b74:	0f 2e       	mov	r0, r31
    1b76:	f2 ed       	ldi	r31, 0xD2	; 210
    1b78:	2f 2e       	mov	r2, r31
    1b7a:	f4 e0       	ldi	r31, 0x04	; 4
    1b7c:	3f 2e       	mov	r3, r31
    1b7e:	f0 2d       	mov	r31, r0
		ftoa(Igain_ch3, tx_string);
		printStatus(tx_string);
		break;
		
		case 407:	// Send Dgain ch3
		ftoa(Dgain_ch3, tx_string);
    1b80:	9e 01       	movw	r18, r28
    1b82:	2a 5b       	subi	r18, 0xBA	; 186
    1b84:	3f 4f       	sbci	r19, 0xFF	; 255
    1b86:	6c 96       	adiw	r28, 0x1c	; 28
    1b88:	3f af       	std	Y+63, r19	; 0x3f
    1b8a:	2e af       	std	Y+62, r18	; 0x3e
    1b8c:	6c 97       	sbiw	r28, 0x1c	; 28
	*	PC:		#12A?VR104
	*	ATMega:	!12A70.0006DCA
	***********************************************************/
	while(1)
	{
		memset(rx_string, 0x00, rx_size);			// Purge rx_string
    1b8e:	6d 96       	adiw	r28, 0x1d	; 29
    1b90:	af ae       	std	Y+63, r10	; 0x3f
    1b92:	6d 97       	sbiw	r28, 0x1d	; 29
    1b94:	6e 96       	adiw	r28, 0x1e	; 30
    1b96:	bf ae       	std	Y+63, r11	; 0x3f
    1b98:	6e 97       	sbiw	r28, 0x1e	; 30
    1b9a:	6f 96       	adiw	r28, 0x1f	; 31
    1b9c:	af ae       	std	Y+63, r10	; 0x3f
    1b9e:	6f 97       	sbiw	r28, 0x1f	; 31
    1ba0:	a0 96       	adiw	r28, 0x20	; 32
    1ba2:	bf ae       	std	Y+63, r11	; 0x3f
    1ba4:	a0 97       	sbiw	r28, 0x20	; 32
		ftoa(Igain_ch3, tx_string);
		printStatus(tx_string);
		break;
		
		case 407:	// Send Dgain ch3
		ftoa(Dgain_ch3, tx_string);
    1ba6:	6b 96       	adiw	r28, 0x1b	; 27
    1ba8:	8f ac       	ldd	r8, Y+63	; 0x3f
    1baa:	6b 97       	sbiw	r28, 0x1b	; 27
    1bac:	6c 96       	adiw	r28, 0x1c	; 28
    1bae:	9f ac       	ldd	r9, Y+63	; 0x3f
    1bb0:	6c 97       	sbiw	r28, 0x1c	; 28
    1bb2:	68 2c       	mov	r6, r8
    1bb4:	79 2c       	mov	r7, r9
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    1bb6:	0f 2e       	mov	r0, r31
    1bb8:	f2 ed       	ldi	r31, 0xD2	; 210
    1bba:	8f 2e       	mov	r8, r31
    1bbc:	f4 e0       	ldi	r31, 0x04	; 4
    1bbe:	9f 2e       	mov	r9, r31
    1bc0:	f0 2d       	mov	r31, r0
	*	PC:		#12A?VR104
	*	ATMega:	!12A70.0006DCA
	***********************************************************/
	while(1)
	{
		memset(rx_string, 0x00, rx_size);			// Purge rx_string
    1bc2:	0e e1       	ldi	r16, 0x1E	; 30
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    1bc4:	10 e0       	ldi	r17, 0x00	; 0
    1bc6:	d5 01       	movw	r26, r10
    1bc8:	e0 2f       	mov	r30, r16
    1bca:	1d 92       	st	X+, r1
    1bcc:	ea 95       	dec	r30
    1bce:	e9 f7       	brne	.-6      	; 0x1bca <main+0x2aa>
 * \returns next data byte in buffer
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
    1bd0:	d2 01       	movw	r26, r4
    1bd2:	13 96       	adiw	r26, 0x03	; 3
    1bd4:	4d 91       	ld	r20, X+
    1bd6:	5c 91       	ld	r21, X
    1bd8:	14 97       	sbiw	r26, 0x04	; 4
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    1bda:	12 96       	adiw	r26, 0x02	; 2
    1bdc:	2c 91       	ld	r18, X
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	21 50       	subi	r18, 0x01	; 1
    1be2:	31 09       	sbc	r19, r1
    1be4:	6f 96       	adiw	r28, 0x1f	; 31
    1be6:	ef ad       	ldd	r30, Y+63	; 0x3f
    1be8:	6f 97       	sbiw	r28, 0x1f	; 31
    1bea:	a0 96       	adiw	r28, 0x20	; 32
    1bec:	ff ad       	ldd	r31, Y+63	; 0x3f
    1bee:	a0 97       	sbiw	r28, 0x20	; 32
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    1bf0:	d2 01       	movw	r26, r4
    1bf2:	11 96       	adiw	r26, 0x01	; 1
    1bf4:	8c 91       	ld	r24, X
    1bf6:	11 97       	sbiw	r26, 0x01	; 1
    1bf8:	9c 91       	ld	r25, X

		for(i = 0; i < rx_size; i++)
		{
			while(!uart_char_waiting());
    1bfa:	98 17       	cp	r25, r24
    1bfc:	c9 f3       	breq	.-14     	; 0x1bf0 <main+0x2d0>
 * \returns next data byte in buffer
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
    1bfe:	11 96       	adiw	r26, 0x01	; 1
    1c00:	8c 91       	ld	r24, X
    1c02:	da 01       	movw	r26, r20
    1c04:	a8 0f       	add	r26, r24
    1c06:	b1 1d       	adc	r27, r1
    1c08:	9c 91       	ld	r25, X
 *
 * \returns the next read offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_read(const struct ring_buffer *ring)
{
	return get_next(ring->read_offset, ring->size);
    1c0a:	d2 01       	movw	r26, r4
    1c0c:	11 96       	adiw	r26, 0x01	; 1
    1c0e:	8c 91       	ld	r24, X
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    1c10:	68 2f       	mov	r22, r24
    1c12:	70 e0       	ldi	r23, 0x00	; 0
    1c14:	62 17       	cp	r22, r18
    1c16:	73 07       	cpc	r23, r19
    1c18:	11 f0       	breq	.+4      	; 0x1c1e <main+0x2fe>
    1c1a:	8f 5f       	subi	r24, 0xFF	; 255
    1c1c:	01 c0       	rjmp	.+2      	; 0x1c20 <main+0x300>
    1c1e:	81 2f       	mov	r24, r17
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
	ring->read_offset = ring_buffer_get_next_read(ring);
    1c20:	d2 01       	movw	r26, r4
    1c22:	11 96       	adiw	r26, 0x01	; 1
    1c24:	8c 93       	st	X, r24
			rx_string[i] = uart_getchar();			// Collect the message
    1c26:	91 93       	st	Z+, r25
			if(rx_string[i] == 0x0D)				// Terminate acquisition if <CR> received
    1c28:	9d 30       	cpi	r25, 0x0D	; 13
    1c2a:	19 f0       	breq	.+6      	; 0x1c32 <main+0x312>
	***********************************************************/
	while(1)
	{
		memset(rx_string, 0x00, rx_size);			// Purge rx_string

		for(i = 0; i < rx_size; i++)
    1c2c:	e2 15       	cp	r30, r2
    1c2e:	f3 05       	cpc	r31, r3
    1c30:	f9 f6       	brne	.-66     	; 0x1bf0 <main+0x2d0>
			{
				break;
			}	
		}

		if(rx_string[0] == '#')
    1c32:	f5 01       	movw	r30, r10
    1c34:	80 81       	ld	r24, Z
    1c36:	83 32       	cpi	r24, 0x23	; 35
    1c38:	31 f6       	brne	.-116    	; 0x1bc6 <main+0x2a6>
		{
			pos = NULL;
			pos = strchr(rx_string, '?');
    1c3a:	6f e3       	ldi	r22, 0x3F	; 63
    1c3c:	70 e0       	ldi	r23, 0x00	; 0
    1c3e:	6d 96       	adiw	r28, 0x1d	; 29
    1c40:	8f ad       	ldd	r24, Y+63	; 0x3f
    1c42:	6d 97       	sbiw	r28, 0x1d	; 29
    1c44:	6e 96       	adiw	r28, 0x1e	; 30
    1c46:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c48:	6e 97       	sbiw	r28, 0x1e	; 30
    1c4a:	0e 94 39 23 	call	0x4672	; 0x4672 <strchr>
    1c4e:	8c 01       	movw	r16, r24
			if(pos != NULL)							
    1c50:	00 97       	sbiw	r24, 0x00	; 0
    1c52:	09 f4       	brne	.+2      	; 0x1c56 <main+0x336>
    1c54:	fc c7       	rjmp	.+4088   	; 0x2c4e <main+0x132e>
			{
				requestCmd[0] = *(pos + 1);			// Parse request command	
    1c56:	ea ec       	ldi	r30, 0xCA	; 202
    1c58:	f1 e0       	ldi	r31, 0x01	; 1
    1c5a:	dc 01       	movw	r26, r24
    1c5c:	11 96       	adiw	r26, 0x01	; 1
    1c5e:	8c 91       	ld	r24, X
    1c60:	11 97       	sbiw	r26, 0x01	; 1
    1c62:	80 83       	st	Z, r24
				requestCmd[1] = *(pos + 2);
    1c64:	12 96       	adiw	r26, 0x02	; 2
    1c66:	8c 91       	ld	r24, X
    1c68:	81 83       	std	Z+1, r24	; 0x01

				if(strcmp(requestCmd, "IF") == 0)
    1c6a:	6c e1       	ldi	r22, 0x1C	; 28
    1c6c:	71 e0       	ldi	r23, 0x01	; 1
    1c6e:	cf 01       	movw	r24, r30
    1c70:	0e 94 44 23 	call	0x4688	; 0x4688 <strcmp>
    1c74:	89 2b       	or	r24, r25
    1c76:	09 f0       	breq	.+2      	; 0x1c7a <main+0x35a>
    1c78:	3f c0       	rjmp	.+126    	; 0x1cf8 <main+0x3d8>
				{
					crc[0] = *(pos + 3);			// Parse incoming crc
    1c7a:	e2 e6       	ldi	r30, 0x62	; 98
    1c7c:	f4 e0       	ldi	r31, 0x04	; 4
    1c7e:	d8 01       	movw	r26, r16
    1c80:	13 96       	adiw	r26, 0x03	; 3
    1c82:	8c 91       	ld	r24, X
    1c84:	13 97       	sbiw	r26, 0x03	; 3
    1c86:	80 83       	st	Z, r24
					crc[1] = *(pos + 4);
    1c88:	14 96       	adiw	r26, 0x04	; 4
    1c8a:	8c 91       	ld	r24, X
    1c8c:	14 97       	sbiw	r26, 0x04	; 4
    1c8e:	81 83       	std	Z+1, r24	; 0x01
					crc[2] = *(pos + 5);
    1c90:	15 96       	adiw	r26, 0x05	; 5
    1c92:	8c 91       	ld	r24, X
    1c94:	15 97       	sbiw	r26, 0x05	; 5
    1c96:	82 83       	std	Z+2, r24	; 0x02
					crc[3] = *(pos + 6);
    1c98:	16 96       	adiw	r26, 0x06	; 6
    1c9a:	8c 91       	ld	r24, X
    1c9c:	83 83       	std	Z+3, r24	; 0x03

					itoa(GenCrc16(rx_string, (int)strnlen(rx_string, rx_size)-5), inCrC_string, 16);
    1c9e:	6e e1       	ldi	r22, 0x1E	; 30
    1ca0:	70 e0       	ldi	r23, 0x00	; 0
    1ca2:	6d 96       	adiw	r28, 0x1d	; 29
    1ca4:	8f ad       	ldd	r24, Y+63	; 0x3f
    1ca6:	6d 97       	sbiw	r28, 0x1d	; 29
    1ca8:	6e 96       	adiw	r28, 0x1e	; 30
    1caa:	9f ad       	ldd	r25, Y+63	; 0x3f
    1cac:	6e 97       	sbiw	r28, 0x1e	; 30
    1cae:	0e 94 4d 23 	call	0x469a	; 0x469a <strnlen>
    1cb2:	bc 01       	movw	r22, r24
    1cb4:	65 50       	subi	r22, 0x05	; 5
    1cb6:	71 09       	sbc	r23, r1
    1cb8:	6d 96       	adiw	r28, 0x1d	; 29
    1cba:	8f ad       	ldd	r24, Y+63	; 0x3f
    1cbc:	6d 97       	sbiw	r28, 0x1d	; 29
    1cbe:	6e 96       	adiw	r28, 0x1e	; 30
    1cc0:	9f ad       	ldd	r25, Y+63	; 0x3f
    1cc2:	6e 97       	sbiw	r28, 0x1e	; 30
    1cc4:	0e 94 2d 02 	call	0x45a	; 0x45a <GenCrc16>
    1cc8:	40 e1       	ldi	r20, 0x10	; 16
    1cca:	be 01       	movw	r22, r28
    1ccc:	67 5e       	subi	r22, 0xE7	; 231
    1cce:	7f 4f       	sbci	r23, 0xFF	; 255
    1cd0:	0e 94 62 23 	call	0x46c4	; 0x46c4 <__itoa_ncheck>
					if(CrcCompare(crc, inCrC_string) == true)
    1cd4:	be 01       	movw	r22, r28
    1cd6:	67 5e       	subi	r22, 0xE7	; 231
    1cd8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cda:	82 e6       	ldi	r24, 0x62	; 98
    1cdc:	94 e0       	ldi	r25, 0x04	; 4
    1cde:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <CrcCompare>
    1ce2:	88 23       	and	r24, r24
    1ce4:	29 f0       	breq	.+10     	; 0x1cf0 <main+0x3d0>
					{
						printStatus(s_string);	
    1ce6:	ce 01       	movw	r24, r28
    1ce8:	05 96       	adiw	r24, 0x05	; 5
    1cea:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    1cee:	04 c0       	rjmp	.+8      	; 0x1cf8 <main+0x3d8>
					}
					else
					{
						printStatus("CRC error");
    1cf0:	8f e1       	ldi	r24, 0x1F	; 31
    1cf2:	91 e0       	ldi	r25, 0x01	; 1
    1cf4:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
						//printStatus(rx_string);
					}
				}
					
				if(strcmp(requestCmd, "VR") == 0)
    1cf8:	69 e2       	ldi	r22, 0x29	; 41
    1cfa:	71 e0       	ldi	r23, 0x01	; 1
    1cfc:	8a ec       	ldi	r24, 0xCA	; 202
    1cfe:	91 e0       	ldi	r25, 0x01	; 1
    1d00:	0e 94 44 23 	call	0x4688	; 0x4688 <strcmp>
    1d04:	89 2b       	or	r24, r25
    1d06:	09 f0       	breq	.+2      	; 0x1d0a <main+0x3ea>
    1d08:	a2 c7       	rjmp	.+3908   	; 0x2c4e <main+0x132e>
				{
					requestID[0] = *(pos + 3);		// Parse request ID
    1d0a:	f8 01       	movw	r30, r16
    1d0c:	83 81       	ldd	r24, Z+3	; 0x03
    1d0e:	89 83       	std	Y+1, r24	; 0x01
					requestID[1] = *(pos + 4);
    1d10:	84 81       	ldd	r24, Z+4	; 0x04
    1d12:	8a 83       	std	Y+2, r24	; 0x02
					requestID[2] = *(pos + 5);
    1d14:	85 81       	ldd	r24, Z+5	; 0x05
    1d16:	8b 83       	std	Y+3, r24	; 0x03
					crc[0] = *(pos + 6);			// Parse incoming crc
    1d18:	e2 e6       	ldi	r30, 0x62	; 98
    1d1a:	f4 e0       	ldi	r31, 0x04	; 4
    1d1c:	d8 01       	movw	r26, r16
    1d1e:	16 96       	adiw	r26, 0x06	; 6
    1d20:	8c 91       	ld	r24, X
    1d22:	16 97       	sbiw	r26, 0x06	; 6
    1d24:	80 83       	st	Z, r24
					crc[1] = *(pos + 7);
    1d26:	17 96       	adiw	r26, 0x07	; 7
    1d28:	8c 91       	ld	r24, X
    1d2a:	17 97       	sbiw	r26, 0x07	; 7
    1d2c:	81 83       	std	Z+1, r24	; 0x01
					crc[2] = *(pos + 8);
    1d2e:	18 96       	adiw	r26, 0x08	; 8
    1d30:	8c 91       	ld	r24, X
    1d32:	18 97       	sbiw	r26, 0x08	; 8
    1d34:	82 83       	std	Z+2, r24	; 0x02
					crc[3] = *(pos + 9);
    1d36:	19 96       	adiw	r26, 0x09	; 9
    1d38:	8c 91       	ld	r24, X
    1d3a:	83 83       	std	Z+3, r24	; 0x03
					
					itoa(GenCrc16(rx_string, (int)strnlen(rx_string, rx_size)-5), inCrC_string, 16);
    1d3c:	6e e1       	ldi	r22, 0x1E	; 30
    1d3e:	70 e0       	ldi	r23, 0x00	; 0
    1d40:	6d 96       	adiw	r28, 0x1d	; 29
    1d42:	8f ad       	ldd	r24, Y+63	; 0x3f
    1d44:	6d 97       	sbiw	r28, 0x1d	; 29
    1d46:	6e 96       	adiw	r28, 0x1e	; 30
    1d48:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d4a:	6e 97       	sbiw	r28, 0x1e	; 30
    1d4c:	0e 94 4d 23 	call	0x469a	; 0x469a <strnlen>
    1d50:	bc 01       	movw	r22, r24
    1d52:	65 50       	subi	r22, 0x05	; 5
    1d54:	71 09       	sbc	r23, r1
    1d56:	6d 96       	adiw	r28, 0x1d	; 29
    1d58:	8f ad       	ldd	r24, Y+63	; 0x3f
    1d5a:	6d 97       	sbiw	r28, 0x1d	; 29
    1d5c:	6e 96       	adiw	r28, 0x1e	; 30
    1d5e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d60:	6e 97       	sbiw	r28, 0x1e	; 30
    1d62:	0e 94 2d 02 	call	0x45a	; 0x45a <GenCrc16>
    1d66:	40 e1       	ldi	r20, 0x10	; 16
    1d68:	be 01       	movw	r22, r28
    1d6a:	67 5e       	subi	r22, 0xE7	; 231
    1d6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d6e:	0e 94 62 23 	call	0x46c4	; 0x46c4 <__itoa_ncheck>
					if(CrcCompare(crc, inCrC_string) == true)
    1d72:	be 01       	movw	r22, r28
    1d74:	67 5e       	subi	r22, 0xE7	; 231
    1d76:	7f 4f       	sbci	r23, 0xFF	; 255
    1d78:	82 e6       	ldi	r24, 0x62	; 98
    1d7a:	94 e0       	ldi	r25, 0x04	; 4
    1d7c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <CrcCompare>
    1d80:	88 23       	and	r24, r24
    1d82:	09 f4       	brne	.+2      	; 0x1d86 <main+0x466>
    1d84:	60 c7       	rjmp	.+3776   	; 0x2c46 <main+0x1326>
					{					
						var = atol(requestID);
    1d86:	ce 01       	movw	r24, r28
    1d88:	01 96       	adiw	r24, 0x01	; 1
    1d8a:	0e 94 08 23 	call	0x4610	; 0x4610 <atol>

static inline void ReadParameter(int id)
{
	char tx_string[20];

	switch(id)
    1d8e:	cb 01       	movw	r24, r22
    1d90:	77 0f       	add	r23, r23
    1d92:	aa 0b       	sbc	r26, r26
    1d94:	bb 0b       	sbc	r27, r27
    1d96:	fc 01       	movw	r30, r24
    1d98:	e4 56       	subi	r30, 0x64	; 100
    1d9a:	f1 09       	sbc	r31, r1
    1d9c:	e4 33       	cpi	r30, 0x34	; 52
    1d9e:	b1 e0       	ldi	r27, 0x01	; 1
    1da0:	fb 07       	cpc	r31, r27
    1da2:	08 f0       	brcs	.+2      	; 0x1da6 <main+0x486>
    1da4:	4b c7       	rjmp	.+3734   	; 0x2c3c <main+0x131c>
    1da6:	ec 5c       	subi	r30, 0xCC	; 204
    1da8:	ff 4f       	sbci	r31, 0xFF	; 255
    1daa:	0c 94 ff 22 	jmp	0x45fe	; 0x45fe <__tablejump2__>
	{
		// *** Channel 0 ***
		case 100:	// Send sensor 1 temperature		
		ftoa(TempSensor0, tx_string);
    1dae:	60 91 b4 01 	lds	r22, 0x01B4
    1db2:	70 91 b5 01 	lds	r23, 0x01B5
    1db6:	80 91 b6 01 	lds	r24, 0x01B6
    1dba:	90 91 b7 01 	lds	r25, 0x01B7
    1dbe:	46 2d       	mov	r20, r6
    1dc0:	57 2d       	mov	r21, r7
    1dc2:	27 dd       	rcall	.-1458   	; 0x1812 <ftoa>
		printStatus(tx_string);
    1dc4:	86 2d       	mov	r24, r6
    1dc6:	97 2d       	mov	r25, r7
    1dc8:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    1dcc:	40 c7       	rjmp	.+3712   	; 0x2c4e <main+0x132e>
		break;
		
		case 101:	// Send P part of PID-controller 1
		ftoa(P_ch0, tx_string);
    1dce:	60 91 9e 01 	lds	r22, 0x019E
    1dd2:	70 91 9f 01 	lds	r23, 0x019F
    1dd6:	80 91 a0 01 	lds	r24, 0x01A0
    1dda:	90 91 a1 01 	lds	r25, 0x01A1
    1dde:	46 2d       	mov	r20, r6
    1de0:	57 2d       	mov	r21, r7
    1de2:	17 dd       	rcall	.-1490   	; 0x1812 <ftoa>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    1de4:	81 e2       	ldi	r24, 0x21	; 33
    1de6:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    1de8:	f5 01       	movw	r30, r10
    1dea:	81 81       	ldd	r24, Z+1	; 0x01
    1dec:	8f 8f       	std	Y+31, r24	; 0x1f
    1dee:	82 81       	ldd	r24, Z+2	; 0x02
    1df0:	88 a3       	std	Y+32, r24	; 0x20
    1df2:	83 81       	ldd	r24, Z+3	; 0x03
    1df4:	89 a3       	std	Y+33, r24	; 0x21
    1df6:	e6 2d       	mov	r30, r6
    1df8:	f7 2d       	mov	r31, r7
    1dfa:	de 01       	movw	r26, r28
    1dfc:	92 96       	adiw	r26, 0x22	; 34
    1dfe:	00 e0       	ldi	r16, 0x00	; 0
    1e00:	10 e0       	ldi	r17, 0x00	; 0
    1e02:	af 01       	movw	r20, r30
    1e04:	06 c0       	rjmp	.+12     	; 0x1e12 <main+0x4f2>
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    1e06:	fa 01       	movw	r30, r20
    1e08:	81 91       	ld	r24, Z+
    1e0a:	af 01       	movw	r20, r30
    1e0c:	8d 93       	st	X+, r24
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    1e0e:	0f 5f       	subi	r16, 0xFF	; 255
    1e10:	1f 4f       	sbci	r17, 0xFF	; 255
    1e12:	6c 96       	adiw	r28, 0x1c	; 28
    1e14:	ee ad       	ldd	r30, Y+62	; 0x3e
    1e16:	ff ad       	ldd	r31, Y+63	; 0x3f
    1e18:	6c 97       	sbiw	r28, 0x1c	; 28
    1e1a:	01 90       	ld	r0, Z+
    1e1c:	00 20       	and	r0, r0
    1e1e:	e9 f7       	brne	.-6      	; 0x1e1a <main+0x4fa>
    1e20:	cf 01       	movw	r24, r30
    1e22:	6c 96       	adiw	r28, 0x1c	; 28
    1e24:	2e ad       	ldd	r18, Y+62	; 0x3e
    1e26:	3f ad       	ldd	r19, Y+63	; 0x3f
    1e28:	6c 97       	sbiw	r28, 0x1c	; 28
    1e2a:	82 1b       	sub	r24, r18
    1e2c:	93 0b       	sbc	r25, r19
    1e2e:	02 96       	adiw	r24, 0x02	; 2
    1e30:	08 17       	cp	r16, r24
    1e32:	19 07       	cpc	r17, r25
    1e34:	40 f3       	brcs	.-48     	; 0x1e06 <main+0x4e6>
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    1e36:	78 01       	movw	r14, r16
    1e38:	3f ef       	ldi	r19, 0xFF	; 255
    1e3a:	e3 1a       	sub	r14, r19
    1e3c:	f3 0a       	sbc	r15, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    1e3e:	1e 14       	cp	r1, r14
    1e40:	1f 04       	cpc	r1, r15
    1e42:	14 f0       	brlt	.+4      	; 0x1e48 <main+0x528>
    1e44:	0c 94 c2 20 	jmp	0x4184	; 0x4184 <main+0x2864>
    1e48:	de 01       	movw	r26, r28
    1e4a:	5e 96       	adiw	r26, 0x1e	; 30
    1e4c:	67 01       	movw	r12, r14
    1e4e:	ca 0e       	add	r12, r26
    1e50:	db 1e       	adc	r13, r27
    1e52:	e0 e0       	ldi	r30, 0x00	; 0
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    1e56:	98 e0       	ldi	r25, 0x08	; 8
    1e58:	80 e0       	ldi	r24, 0x00	; 0
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    1e5a:	4d 91       	ld	r20, X+
		tmp = (int)((CRC >> 8) ^ int_c);
    1e5c:	2f 2f       	mov	r18, r31
    1e5e:	33 27       	eor	r19, r19
    1e60:	27 fd       	sbrc	r18, 7
    1e62:	3a 95       	dec	r19
    1e64:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    1e66:	32 2f       	mov	r19, r18
    1e68:	22 27       	eor	r18, r18
    1e6a:	49 2f       	mov	r20, r25
    1e6c:	58 2f       	mov	r21, r24
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    1e6e:	33 23       	and	r19, r19
    1e70:	3c f4       	brge	.+14     	; 0x1e80 <main+0x560>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    1e72:	22 0f       	add	r18, r18
    1e74:	33 1f       	adc	r19, r19
    1e76:	61 e2       	ldi	r22, 0x21	; 33
    1e78:	26 27       	eor	r18, r22
    1e7a:	60 e1       	ldi	r22, 0x10	; 16
    1e7c:	36 27       	eor	r19, r22
    1e7e:	02 c0       	rjmp	.+4      	; 0x1e84 <main+0x564>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    1e80:	22 0f       	add	r18, r18
    1e82:	33 1f       	adc	r19, r19
    1e84:	41 50       	subi	r20, 0x01	; 1
    1e86:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    1e88:	91 f7       	brne	.-28     	; 0x1e6e <main+0x54e>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    1e8a:	fe 2f       	mov	r31, r30
    1e8c:	ee 27       	eor	r30, r30
    1e8e:	e2 27       	eor	r30, r18
    1e90:	f3 27       	eor	r31, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    1e92:	ac 15       	cp	r26, r12
    1e94:	bd 05       	cpc	r27, r13
    1e96:	09 f7       	brne	.-62     	; 0x1e5a <main+0x53a>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    1e98:	6f 01       	movw	r12, r30
    1e9a:	40 e1       	ldi	r20, 0x10	; 16
    1e9c:	62 e6       	ldi	r22, 0x62	; 98
    1e9e:	74 e0       	ldi	r23, 0x04	; 4
    1ea0:	cf 01       	movw	r24, r30
    1ea2:	0e 94 62 23 	call	0x46c4	; 0x46c4 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    1ea6:	82 e6       	ldi	r24, 0x62	; 98
    1ea8:	94 e0       	ldi	r25, 0x04	; 4
    1eaa:	0e 94 58 23 	call	0x46b0	; 0x46b0 <strupr>
	if(crcXmodem < 0x10)
    1eae:	80 e1       	ldi	r24, 0x10	; 16
    1eb0:	c8 16       	cp	r12, r24
    1eb2:	d1 04       	cpc	r13, r1
    1eb4:	98 f4       	brcc	.+38     	; 0x1edc <main+0x5bc>
	{
		tx_string[cnt+4] = crc[0];
    1eb6:	80 91 62 04 	lds	r24, 0x0462
    1eba:	fe 01       	movw	r30, r28
    1ebc:	e0 0f       	add	r30, r16
    1ebe:	f1 1f       	adc	r31, r17
    1ec0:	82 a3       	std	Z+34, r24	; 0x22
		tx_string[cnt+3] = '0';
    1ec2:	80 e3       	ldi	r24, 0x30	; 48
    1ec4:	fe 01       	movw	r30, r28
    1ec6:	e0 0f       	add	r30, r16
    1ec8:	f1 1f       	adc	r31, r17
    1eca:	81 a3       	std	Z+33, r24	; 0x21
		tx_string[cnt+2] = '0';
    1ecc:	fe 01       	movw	r30, r28
    1ece:	e0 0f       	add	r30, r16
    1ed0:	f1 1f       	adc	r31, r17
    1ed2:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';
    1ed4:	fe 01       	movw	r30, r28
    1ed6:	ee 0d       	add	r30, r14
    1ed8:	ff 1d       	adc	r31, r15
    1eda:	86 8f       	std	Z+30, r24	; 0x1e
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    1edc:	c6 01       	movw	r24, r12
    1ede:	40 97       	sbiw	r24, 0x10	; 16
    1ee0:	80 3f       	cpi	r24, 0xF0	; 240
    1ee2:	91 05       	cpc	r25, r1
    1ee4:	b8 f4       	brcc	.+46     	; 0x1f14 <main+0x5f4>
	{
		tx_string[cnt+4] = crc[1];
    1ee6:	a2 e6       	ldi	r26, 0x62	; 98
    1ee8:	b4 e0       	ldi	r27, 0x04	; 4
    1eea:	11 96       	adiw	r26, 0x01	; 1
    1eec:	8c 91       	ld	r24, X
    1eee:	11 97       	sbiw	r26, 0x01	; 1
    1ef0:	fe 01       	movw	r30, r28
    1ef2:	e0 0f       	add	r30, r16
    1ef4:	f1 1f       	adc	r31, r17
    1ef6:	82 a3       	std	Z+34, r24	; 0x22
		tx_string[cnt+3] = crc[0];
    1ef8:	8c 91       	ld	r24, X
    1efa:	fe 01       	movw	r30, r28
    1efc:	e0 0f       	add	r30, r16
    1efe:	f1 1f       	adc	r31, r17
    1f00:	81 a3       	std	Z+33, r24	; 0x21
		tx_string[cnt+2] = '0';
    1f02:	80 e3       	ldi	r24, 0x30	; 48
    1f04:	fe 01       	movw	r30, r28
    1f06:	e0 0f       	add	r30, r16
    1f08:	f1 1f       	adc	r31, r17
    1f0a:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';		
    1f0c:	fe 01       	movw	r30, r28
    1f0e:	ee 0d       	add	r30, r14
    1f10:	ff 1d       	adc	r31, r15
    1f12:	86 8f       	std	Z+30, r24	; 0x1e
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    1f14:	c6 01       	movw	r24, r12
    1f16:	9a 95       	dec	r25
    1f18:	81 15       	cp	r24, r1
    1f1a:	9f 40       	sbci	r25, 0x0F	; 15
    1f1c:	b8 f4       	brcc	.+46     	; 0x1f4c <main+0x62c>
	{
		tx_string[cnt+4] = crc[2];
    1f1e:	e2 e6       	ldi	r30, 0x62	; 98
    1f20:	f4 e0       	ldi	r31, 0x04	; 4
    1f22:	82 81       	ldd	r24, Z+2	; 0x02
    1f24:	de 01       	movw	r26, r28
    1f26:	a0 0f       	add	r26, r16
    1f28:	b1 1f       	adc	r27, r17
    1f2a:	92 96       	adiw	r26, 0x22	; 34
    1f2c:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[1];
    1f2e:	81 81       	ldd	r24, Z+1	; 0x01
    1f30:	de 01       	movw	r26, r28
    1f32:	a0 0f       	add	r26, r16
    1f34:	b1 1f       	adc	r27, r17
    1f36:	91 96       	adiw	r26, 0x21	; 33
    1f38:	8c 93       	st	X, r24
    1f3a:	91 97       	sbiw	r26, 0x21	; 33
		tx_string[cnt+2] = crc[0];
    1f3c:	80 81       	ld	r24, Z
    1f3e:	fd 01       	movw	r30, r26
    1f40:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';		
    1f42:	80 e3       	ldi	r24, 0x30	; 48
    1f44:	fe 01       	movw	r30, r28
    1f46:	ee 0d       	add	r30, r14
    1f48:	ff 1d       	adc	r31, r15
    1f4a:	86 8f       	std	Z+30, r24	; 0x1e
	}
	if(crcXmodem >= 0x1000)
    1f4c:	c1 14       	cp	r12, r1
    1f4e:	b0 e1       	ldi	r27, 0x10	; 16
    1f50:	db 06       	cpc	r13, r27
    1f52:	c0 f0       	brcs	.+48     	; 0x1f84 <main+0x664>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    1f54:	de 01       	movw	r26, r28
    1f56:	ae 0d       	add	r26, r14
    1f58:	bf 1d       	adc	r27, r15
    1f5a:	e2 e6       	ldi	r30, 0x62	; 98
    1f5c:	f4 e0       	ldi	r31, 0x04	; 4
    1f5e:	80 81       	ld	r24, Z
    1f60:	5e 96       	adiw	r26, 0x1e	; 30
    1f62:	8c 93       	st	X, r24
		tx_string[cnt+2] = crc[1];
    1f64:	81 81       	ldd	r24, Z+1	; 0x01
    1f66:	de 01       	movw	r26, r28
    1f68:	a0 0f       	add	r26, r16
    1f6a:	b1 1f       	adc	r27, r17
    1f6c:	90 96       	adiw	r26, 0x20	; 32
    1f6e:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[2];
    1f70:	82 81       	ldd	r24, Z+2	; 0x02
    1f72:	de 01       	movw	r26, r28
    1f74:	a0 0f       	add	r26, r16
    1f76:	b1 1f       	adc	r27, r17
    1f78:	91 96       	adiw	r26, 0x21	; 33
    1f7a:	8c 93       	st	X, r24
    1f7c:	91 97       	sbiw	r26, 0x21	; 33
		tx_string[cnt+4] = crc[3];
    1f7e:	83 81       	ldd	r24, Z+3	; 0x03
    1f80:	fd 01       	movw	r30, r26
    1f82:	82 a3       	std	Z+34, r24	; 0x22
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    1f84:	c8 01       	movw	r24, r16
    1f86:	05 96       	adiw	r24, 0x05	; 5
    1f88:	fe 01       	movw	r30, r28
    1f8a:	e8 0f       	add	r30, r24
    1f8c:	f9 1f       	adc	r31, r25
    1f8e:	2d e0       	ldi	r18, 0x0D	; 13
    1f90:	26 8f       	std	Z+30, r18	; 0x1e
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    1f92:	99 23       	and	r25, r25
    1f94:	0c f4       	brge	.+2      	; 0x1f98 <main+0x678>
    1f96:	5b c6       	rjmp	.+3254   	; 0x2c4e <main+0x132e>
    1f98:	fe 01       	movw	r30, r28
    1f9a:	7e 96       	adiw	r30, 0x1e	; 30
    1f9c:	a8 01       	movw	r20, r16
    1f9e:	4a 5f       	subi	r20, 0xFA	; 250
    1fa0:	5f 4f       	sbci	r21, 0xFF	; 255
    1fa2:	4e 0f       	add	r20, r30
    1fa4:	5f 1f       	adc	r21, r31
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
	{
		uart_putchar(tx_string[i]);
    1fa8:	21 91       	ld	r18, Z+
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    1faa:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    1fac:	d4 01       	movw	r26, r8
    1fae:	11 96       	adiw	r26, 0x01	; 1
    1fb0:	3c 91       	ld	r19, X
    1fb2:	11 97       	sbiw	r26, 0x01	; 1
    1fb4:	8c 91       	ld	r24, X
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    1fb6:	38 13       	cpse	r19, r24
    1fb8:	05 c0       	rjmp	.+10     	; 0x1fc4 <main+0x6a4>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    1fba:	a1 ec       	ldi	r26, 0xC1	; 193
    1fbc:	b0 e0       	ldi	r27, 0x00	; 0
    1fbe:	8c 91       	ld	r24, X
    1fc0:	80 62       	ori	r24, 0x20	; 32
    1fc2:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    1fc4:	d4 01       	movw	r26, r8
    1fc6:	8c 91       	ld	r24, X
    1fc8:	13 96       	adiw	r26, 0x03	; 3
    1fca:	6d 91       	ld	r22, X+
    1fcc:	7c 91       	ld	r23, X
    1fce:	14 97       	sbiw	r26, 0x04	; 4
    1fd0:	db 01       	movw	r26, r22
    1fd2:	a8 0f       	add	r26, r24
    1fd4:	b1 1d       	adc	r27, r1
    1fd6:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    1fd8:	d4 01       	movw	r26, r8
    1fda:	8c 91       	ld	r24, X
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    1fdc:	68 2f       	mov	r22, r24
    1fde:	70 e0       	ldi	r23, 0x00	; 0
    1fe0:	12 96       	adiw	r26, 0x02	; 2
    1fe2:	2c 91       	ld	r18, X
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	21 50       	subi	r18, 0x01	; 1
    1fe8:	31 09       	sbc	r19, r1
    1fea:	62 17       	cp	r22, r18
    1fec:	73 07       	cpc	r23, r19
    1fee:	11 f0       	breq	.+4      	; 0x1ff4 <main+0x6d4>
    1ff0:	8f 5f       	subi	r24, 0xFF	; 255
    1ff2:	01 c0       	rjmp	.+2      	; 0x1ff6 <main+0x6d6>
    1ff4:	89 2f       	mov	r24, r25
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    1ff6:	d4 01       	movw	r26, r8
    1ff8:	8c 93       	st	X, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    1ffa:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    1ffc:	e4 17       	cp	r30, r20
    1ffe:	f5 07       	cpc	r31, r21
    2000:	99 f6       	brne	.-90     	; 0x1fa8 <main+0x688>
    2002:	25 c6       	rjmp	.+3146   	; 0x2c4e <main+0x132e>
		ftoa(P_ch0, tx_string);
		printStatus(tx_string);
		break;
		
		case 102:	// Send I part of PID-controller 1
		ftoa(I_ch0, tx_string);
    2004:	60 91 9a 01 	lds	r22, 0x019A
    2008:	70 91 9b 01 	lds	r23, 0x019B
    200c:	80 91 9c 01 	lds	r24, 0x019C
    2010:	90 91 9d 01 	lds	r25, 0x019D
    2014:	46 2d       	mov	r20, r6
    2016:	57 2d       	mov	r21, r7
    2018:	fc db       	rcall	.-2056   	; 0x1812 <ftoa>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    201a:	81 e2       	ldi	r24, 0x21	; 33
    201c:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    201e:	f5 01       	movw	r30, r10
    2020:	81 81       	ldd	r24, Z+1	; 0x01
    2022:	8f 8f       	std	Y+31, r24	; 0x1f
    2024:	82 81       	ldd	r24, Z+2	; 0x02
    2026:	88 a3       	std	Y+32, r24	; 0x20
    2028:	83 81       	ldd	r24, Z+3	; 0x03
    202a:	89 a3       	std	Y+33, r24	; 0x21
    202c:	e6 2d       	mov	r30, r6
    202e:	f7 2d       	mov	r31, r7
    2030:	de 01       	movw	r26, r28
    2032:	92 96       	adiw	r26, 0x22	; 34
    2034:	00 e0       	ldi	r16, 0x00	; 0
    2036:	10 e0       	ldi	r17, 0x00	; 0
    2038:	af 01       	movw	r20, r30
    203a:	06 c0       	rjmp	.+12     	; 0x2048 <main+0x728>
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    203c:	fa 01       	movw	r30, r20
    203e:	81 91       	ld	r24, Z+
    2040:	af 01       	movw	r20, r30
    2042:	8d 93       	st	X+, r24
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    2044:	0f 5f       	subi	r16, 0xFF	; 255
    2046:	1f 4f       	sbci	r17, 0xFF	; 255
    2048:	6c 96       	adiw	r28, 0x1c	; 28
    204a:	ee ad       	ldd	r30, Y+62	; 0x3e
    204c:	ff ad       	ldd	r31, Y+63	; 0x3f
    204e:	6c 97       	sbiw	r28, 0x1c	; 28
    2050:	01 90       	ld	r0, Z+
    2052:	00 20       	and	r0, r0
    2054:	e9 f7       	brne	.-6      	; 0x2050 <main+0x730>
    2056:	cf 01       	movw	r24, r30
    2058:	6c 96       	adiw	r28, 0x1c	; 28
    205a:	2e ad       	ldd	r18, Y+62	; 0x3e
    205c:	3f ad       	ldd	r19, Y+63	; 0x3f
    205e:	6c 97       	sbiw	r28, 0x1c	; 28
    2060:	82 1b       	sub	r24, r18
    2062:	93 0b       	sbc	r25, r19
    2064:	02 96       	adiw	r24, 0x02	; 2
    2066:	08 17       	cp	r16, r24
    2068:	19 07       	cpc	r17, r25
    206a:	40 f3       	brcs	.-48     	; 0x203c <main+0x71c>
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    206c:	78 01       	movw	r14, r16
    206e:	3f ef       	ldi	r19, 0xFF	; 255
    2070:	e3 1a       	sub	r14, r19
    2072:	f3 0a       	sbc	r15, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    2074:	1e 14       	cp	r1, r14
    2076:	1f 04       	cpc	r1, r15
    2078:	14 f0       	brlt	.+4      	; 0x207e <main+0x75e>
    207a:	0c 94 cf 20 	jmp	0x419e	; 0x419e <main+0x287e>
    207e:	de 01       	movw	r26, r28
    2080:	5e 96       	adiw	r26, 0x1e	; 30
    2082:	67 01       	movw	r12, r14
    2084:	ca 0e       	add	r12, r26
    2086:	db 1e       	adc	r13, r27
    2088:	e0 e0       	ldi	r30, 0x00	; 0
    208a:	f0 e0       	ldi	r31, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    208c:	98 e0       	ldi	r25, 0x08	; 8
    208e:	80 e0       	ldi	r24, 0x00	; 0
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    2090:	4d 91       	ld	r20, X+
		tmp = (int)((CRC >> 8) ^ int_c);
    2092:	2f 2f       	mov	r18, r31
    2094:	33 27       	eor	r19, r19
    2096:	27 fd       	sbrc	r18, 7
    2098:	3a 95       	dec	r19
    209a:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    209c:	32 2f       	mov	r19, r18
    209e:	22 27       	eor	r18, r18
    20a0:	49 2f       	mov	r20, r25
    20a2:	58 2f       	mov	r21, r24
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    20a4:	33 23       	and	r19, r19
    20a6:	3c f4       	brge	.+14     	; 0x20b6 <main+0x796>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    20a8:	22 0f       	add	r18, r18
    20aa:	33 1f       	adc	r19, r19
    20ac:	61 e2       	ldi	r22, 0x21	; 33
    20ae:	26 27       	eor	r18, r22
    20b0:	60 e1       	ldi	r22, 0x10	; 16
    20b2:	36 27       	eor	r19, r22
    20b4:	02 c0       	rjmp	.+4      	; 0x20ba <main+0x79a>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    20b6:	22 0f       	add	r18, r18
    20b8:	33 1f       	adc	r19, r19
    20ba:	41 50       	subi	r20, 0x01	; 1
    20bc:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    20be:	91 f7       	brne	.-28     	; 0x20a4 <main+0x784>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    20c0:	fe 2f       	mov	r31, r30
    20c2:	ee 27       	eor	r30, r30
    20c4:	e2 27       	eor	r30, r18
    20c6:	f3 27       	eor	r31, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    20c8:	ac 15       	cp	r26, r12
    20ca:	bd 05       	cpc	r27, r13
    20cc:	09 f7       	brne	.-62     	; 0x2090 <main+0x770>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    20ce:	6f 01       	movw	r12, r30
    20d0:	40 e1       	ldi	r20, 0x10	; 16
    20d2:	62 e6       	ldi	r22, 0x62	; 98
    20d4:	74 e0       	ldi	r23, 0x04	; 4
    20d6:	cf 01       	movw	r24, r30
    20d8:	0e 94 62 23 	call	0x46c4	; 0x46c4 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    20dc:	82 e6       	ldi	r24, 0x62	; 98
    20de:	94 e0       	ldi	r25, 0x04	; 4
    20e0:	0e 94 58 23 	call	0x46b0	; 0x46b0 <strupr>
	if(crcXmodem < 0x10)
    20e4:	80 e1       	ldi	r24, 0x10	; 16
    20e6:	c8 16       	cp	r12, r24
    20e8:	d1 04       	cpc	r13, r1
    20ea:	98 f4       	brcc	.+38     	; 0x2112 <main+0x7f2>
	{
		tx_string[cnt+4] = crc[0];
    20ec:	80 91 62 04 	lds	r24, 0x0462
    20f0:	fe 01       	movw	r30, r28
    20f2:	e0 0f       	add	r30, r16
    20f4:	f1 1f       	adc	r31, r17
    20f6:	82 a3       	std	Z+34, r24	; 0x22
		tx_string[cnt+3] = '0';
    20f8:	80 e3       	ldi	r24, 0x30	; 48
    20fa:	fe 01       	movw	r30, r28
    20fc:	e0 0f       	add	r30, r16
    20fe:	f1 1f       	adc	r31, r17
    2100:	81 a3       	std	Z+33, r24	; 0x21
		tx_string[cnt+2] = '0';
    2102:	fe 01       	movw	r30, r28
    2104:	e0 0f       	add	r30, r16
    2106:	f1 1f       	adc	r31, r17
    2108:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';
    210a:	fe 01       	movw	r30, r28
    210c:	ee 0d       	add	r30, r14
    210e:	ff 1d       	adc	r31, r15
    2110:	86 8f       	std	Z+30, r24	; 0x1e
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    2112:	c6 01       	movw	r24, r12
    2114:	40 97       	sbiw	r24, 0x10	; 16
    2116:	80 3f       	cpi	r24, 0xF0	; 240
    2118:	91 05       	cpc	r25, r1
    211a:	b8 f4       	brcc	.+46     	; 0x214a <main+0x82a>
	{
		tx_string[cnt+4] = crc[1];
    211c:	a2 e6       	ldi	r26, 0x62	; 98
    211e:	b4 e0       	ldi	r27, 0x04	; 4
    2120:	11 96       	adiw	r26, 0x01	; 1
    2122:	8c 91       	ld	r24, X
    2124:	11 97       	sbiw	r26, 0x01	; 1
    2126:	fe 01       	movw	r30, r28
    2128:	e0 0f       	add	r30, r16
    212a:	f1 1f       	adc	r31, r17
    212c:	82 a3       	std	Z+34, r24	; 0x22
		tx_string[cnt+3] = crc[0];
    212e:	8c 91       	ld	r24, X
    2130:	fe 01       	movw	r30, r28
    2132:	e0 0f       	add	r30, r16
    2134:	f1 1f       	adc	r31, r17
    2136:	81 a3       	std	Z+33, r24	; 0x21
		tx_string[cnt+2] = '0';
    2138:	80 e3       	ldi	r24, 0x30	; 48
    213a:	fe 01       	movw	r30, r28
    213c:	e0 0f       	add	r30, r16
    213e:	f1 1f       	adc	r31, r17
    2140:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';		
    2142:	fe 01       	movw	r30, r28
    2144:	ee 0d       	add	r30, r14
    2146:	ff 1d       	adc	r31, r15
    2148:	86 8f       	std	Z+30, r24	; 0x1e
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    214a:	c6 01       	movw	r24, r12
    214c:	9a 95       	dec	r25
    214e:	81 15       	cp	r24, r1
    2150:	9f 40       	sbci	r25, 0x0F	; 15
    2152:	b8 f4       	brcc	.+46     	; 0x2182 <main+0x862>
	{
		tx_string[cnt+4] = crc[2];
    2154:	e2 e6       	ldi	r30, 0x62	; 98
    2156:	f4 e0       	ldi	r31, 0x04	; 4
    2158:	82 81       	ldd	r24, Z+2	; 0x02
    215a:	de 01       	movw	r26, r28
    215c:	a0 0f       	add	r26, r16
    215e:	b1 1f       	adc	r27, r17
    2160:	92 96       	adiw	r26, 0x22	; 34
    2162:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[1];
    2164:	81 81       	ldd	r24, Z+1	; 0x01
    2166:	de 01       	movw	r26, r28
    2168:	a0 0f       	add	r26, r16
    216a:	b1 1f       	adc	r27, r17
    216c:	91 96       	adiw	r26, 0x21	; 33
    216e:	8c 93       	st	X, r24
    2170:	91 97       	sbiw	r26, 0x21	; 33
		tx_string[cnt+2] = crc[0];
    2172:	80 81       	ld	r24, Z
    2174:	fd 01       	movw	r30, r26
    2176:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';		
    2178:	80 e3       	ldi	r24, 0x30	; 48
    217a:	fe 01       	movw	r30, r28
    217c:	ee 0d       	add	r30, r14
    217e:	ff 1d       	adc	r31, r15
    2180:	86 8f       	std	Z+30, r24	; 0x1e
	}
	if(crcXmodem >= 0x1000)
    2182:	c1 14       	cp	r12, r1
    2184:	b0 e1       	ldi	r27, 0x10	; 16
    2186:	db 06       	cpc	r13, r27
    2188:	c0 f0       	brcs	.+48     	; 0x21ba <main+0x89a>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    218a:	de 01       	movw	r26, r28
    218c:	ae 0d       	add	r26, r14
    218e:	bf 1d       	adc	r27, r15
    2190:	e2 e6       	ldi	r30, 0x62	; 98
    2192:	f4 e0       	ldi	r31, 0x04	; 4
    2194:	80 81       	ld	r24, Z
    2196:	5e 96       	adiw	r26, 0x1e	; 30
    2198:	8c 93       	st	X, r24
		tx_string[cnt+2] = crc[1];
    219a:	81 81       	ldd	r24, Z+1	; 0x01
    219c:	de 01       	movw	r26, r28
    219e:	a0 0f       	add	r26, r16
    21a0:	b1 1f       	adc	r27, r17
    21a2:	90 96       	adiw	r26, 0x20	; 32
    21a4:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[2];
    21a6:	82 81       	ldd	r24, Z+2	; 0x02
    21a8:	de 01       	movw	r26, r28
    21aa:	a0 0f       	add	r26, r16
    21ac:	b1 1f       	adc	r27, r17
    21ae:	91 96       	adiw	r26, 0x21	; 33
    21b0:	8c 93       	st	X, r24
    21b2:	91 97       	sbiw	r26, 0x21	; 33
		tx_string[cnt+4] = crc[3];
    21b4:	83 81       	ldd	r24, Z+3	; 0x03
    21b6:	fd 01       	movw	r30, r26
    21b8:	82 a3       	std	Z+34, r24	; 0x22
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    21ba:	c8 01       	movw	r24, r16
    21bc:	05 96       	adiw	r24, 0x05	; 5
    21be:	fe 01       	movw	r30, r28
    21c0:	e8 0f       	add	r30, r24
    21c2:	f9 1f       	adc	r31, r25
    21c4:	2d e0       	ldi	r18, 0x0D	; 13
    21c6:	26 8f       	std	Z+30, r18	; 0x1e
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    21c8:	99 23       	and	r25, r25
    21ca:	0c f4       	brge	.+2      	; 0x21ce <main+0x8ae>
    21cc:	40 c5       	rjmp	.+2688   	; 0x2c4e <main+0x132e>
    21ce:	fe 01       	movw	r30, r28
    21d0:	7e 96       	adiw	r30, 0x1e	; 30
    21d2:	a8 01       	movw	r20, r16
    21d4:	4a 5f       	subi	r20, 0xFA	; 250
    21d6:	5f 4f       	sbci	r21, 0xFF	; 255
    21d8:	4e 0f       	add	r20, r30
    21da:	5f 1f       	adc	r21, r31
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    21dc:	90 e0       	ldi	r25, 0x00	; 0
	{
		uart_putchar(tx_string[i]);
    21de:	21 91       	ld	r18, Z+
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    21e0:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    21e2:	d4 01       	movw	r26, r8
    21e4:	11 96       	adiw	r26, 0x01	; 1
    21e6:	3c 91       	ld	r19, X
    21e8:	11 97       	sbiw	r26, 0x01	; 1
    21ea:	8c 91       	ld	r24, X
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    21ec:	38 13       	cpse	r19, r24
    21ee:	05 c0       	rjmp	.+10     	; 0x21fa <main+0x8da>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    21f0:	a1 ec       	ldi	r26, 0xC1	; 193
    21f2:	b0 e0       	ldi	r27, 0x00	; 0
    21f4:	8c 91       	ld	r24, X
    21f6:	80 62       	ori	r24, 0x20	; 32
    21f8:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    21fa:	d4 01       	movw	r26, r8
    21fc:	8c 91       	ld	r24, X
    21fe:	13 96       	adiw	r26, 0x03	; 3
    2200:	6d 91       	ld	r22, X+
    2202:	7c 91       	ld	r23, X
    2204:	14 97       	sbiw	r26, 0x04	; 4
    2206:	db 01       	movw	r26, r22
    2208:	a8 0f       	add	r26, r24
    220a:	b1 1d       	adc	r27, r1
    220c:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    220e:	d4 01       	movw	r26, r8
    2210:	8c 91       	ld	r24, X
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    2212:	68 2f       	mov	r22, r24
    2214:	70 e0       	ldi	r23, 0x00	; 0
    2216:	12 96       	adiw	r26, 0x02	; 2
    2218:	2c 91       	ld	r18, X
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	21 50       	subi	r18, 0x01	; 1
    221e:	31 09       	sbc	r19, r1
    2220:	62 17       	cp	r22, r18
    2222:	73 07       	cpc	r23, r19
    2224:	11 f0       	breq	.+4      	; 0x222a <main+0x90a>
    2226:	8f 5f       	subi	r24, 0xFF	; 255
    2228:	01 c0       	rjmp	.+2      	; 0x222c <main+0x90c>
    222a:	89 2f       	mov	r24, r25
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    222c:	d4 01       	movw	r26, r8
    222e:	8c 93       	st	X, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    2230:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    2232:	e4 17       	cp	r30, r20
    2234:	f5 07       	cpc	r31, r21
    2236:	99 f6       	brne	.-90     	; 0x21de <main+0x8be>
    2238:	0a c5       	rjmp	.+2580   	; 0x2c4e <main+0x132e>
		ftoa(I_ch0, tx_string);
		printStatus(tx_string);
		break;
				
		case 103:	// Send D part of PID-controller 1
		ftoa(D_ch0, tx_string);
    223a:	60 91 96 01 	lds	r22, 0x0196
    223e:	70 91 97 01 	lds	r23, 0x0197
    2242:	80 91 98 01 	lds	r24, 0x0198
    2246:	90 91 99 01 	lds	r25, 0x0199
    224a:	46 2d       	mov	r20, r6
    224c:	57 2d       	mov	r21, r7
    224e:	e1 da       	rcall	.-2622   	; 0x1812 <ftoa>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    2250:	81 e2       	ldi	r24, 0x21	; 33
    2252:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    2254:	f5 01       	movw	r30, r10
    2256:	81 81       	ldd	r24, Z+1	; 0x01
    2258:	8f 8f       	std	Y+31, r24	; 0x1f
    225a:	82 81       	ldd	r24, Z+2	; 0x02
    225c:	88 a3       	std	Y+32, r24	; 0x20
    225e:	83 81       	ldd	r24, Z+3	; 0x03
    2260:	89 a3       	std	Y+33, r24	; 0x21
    2262:	e6 2d       	mov	r30, r6
    2264:	f7 2d       	mov	r31, r7
    2266:	de 01       	movw	r26, r28
    2268:	92 96       	adiw	r26, 0x22	; 34
    226a:	00 e0       	ldi	r16, 0x00	; 0
    226c:	10 e0       	ldi	r17, 0x00	; 0
    226e:	af 01       	movw	r20, r30
    2270:	06 c0       	rjmp	.+12     	; 0x227e <main+0x95e>
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    2272:	fa 01       	movw	r30, r20
    2274:	81 91       	ld	r24, Z+
    2276:	af 01       	movw	r20, r30
    2278:	8d 93       	st	X+, r24
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    227a:	0f 5f       	subi	r16, 0xFF	; 255
    227c:	1f 4f       	sbci	r17, 0xFF	; 255
    227e:	6c 96       	adiw	r28, 0x1c	; 28
    2280:	ee ad       	ldd	r30, Y+62	; 0x3e
    2282:	ff ad       	ldd	r31, Y+63	; 0x3f
    2284:	6c 97       	sbiw	r28, 0x1c	; 28
    2286:	01 90       	ld	r0, Z+
    2288:	00 20       	and	r0, r0
    228a:	e9 f7       	brne	.-6      	; 0x2286 <main+0x966>
    228c:	cf 01       	movw	r24, r30
    228e:	6c 96       	adiw	r28, 0x1c	; 28
    2290:	2e ad       	ldd	r18, Y+62	; 0x3e
    2292:	3f ad       	ldd	r19, Y+63	; 0x3f
    2294:	6c 97       	sbiw	r28, 0x1c	; 28
    2296:	82 1b       	sub	r24, r18
    2298:	93 0b       	sbc	r25, r19
    229a:	02 96       	adiw	r24, 0x02	; 2
    229c:	08 17       	cp	r16, r24
    229e:	19 07       	cpc	r17, r25
    22a0:	40 f3       	brcs	.-48     	; 0x2272 <main+0x952>
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    22a2:	78 01       	movw	r14, r16
    22a4:	3f ef       	ldi	r19, 0xFF	; 255
    22a6:	e3 1a       	sub	r14, r19
    22a8:	f3 0a       	sbc	r15, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    22aa:	1e 14       	cp	r1, r14
    22ac:	1f 04       	cpc	r1, r15
    22ae:	14 f0       	brlt	.+4      	; 0x22b4 <main+0x994>
    22b0:	0c 94 dc 20 	jmp	0x41b8	; 0x41b8 <main+0x2898>
    22b4:	de 01       	movw	r26, r28
    22b6:	5e 96       	adiw	r26, 0x1e	; 30
    22b8:	67 01       	movw	r12, r14
    22ba:	ca 0e       	add	r12, r26
    22bc:	db 1e       	adc	r13, r27
    22be:	e0 e0       	ldi	r30, 0x00	; 0
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    22c2:	98 e0       	ldi	r25, 0x08	; 8
    22c4:	80 e0       	ldi	r24, 0x00	; 0
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    22c6:	4d 91       	ld	r20, X+
		tmp = (int)((CRC >> 8) ^ int_c);
    22c8:	2f 2f       	mov	r18, r31
    22ca:	33 27       	eor	r19, r19
    22cc:	27 fd       	sbrc	r18, 7
    22ce:	3a 95       	dec	r19
    22d0:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    22d2:	32 2f       	mov	r19, r18
    22d4:	22 27       	eor	r18, r18
    22d6:	49 2f       	mov	r20, r25
    22d8:	58 2f       	mov	r21, r24
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    22da:	33 23       	and	r19, r19
    22dc:	3c f4       	brge	.+14     	; 0x22ec <main+0x9cc>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    22de:	22 0f       	add	r18, r18
    22e0:	33 1f       	adc	r19, r19
    22e2:	61 e2       	ldi	r22, 0x21	; 33
    22e4:	26 27       	eor	r18, r22
    22e6:	60 e1       	ldi	r22, 0x10	; 16
    22e8:	36 27       	eor	r19, r22
    22ea:	02 c0       	rjmp	.+4      	; 0x22f0 <main+0x9d0>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    22ec:	22 0f       	add	r18, r18
    22ee:	33 1f       	adc	r19, r19
    22f0:	41 50       	subi	r20, 0x01	; 1
    22f2:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    22f4:	91 f7       	brne	.-28     	; 0x22da <main+0x9ba>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    22f6:	fe 2f       	mov	r31, r30
    22f8:	ee 27       	eor	r30, r30
    22fa:	e2 27       	eor	r30, r18
    22fc:	f3 27       	eor	r31, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    22fe:	ac 15       	cp	r26, r12
    2300:	bd 05       	cpc	r27, r13
    2302:	09 f7       	brne	.-62     	; 0x22c6 <main+0x9a6>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    2304:	6f 01       	movw	r12, r30
    2306:	40 e1       	ldi	r20, 0x10	; 16
    2308:	62 e6       	ldi	r22, 0x62	; 98
    230a:	74 e0       	ldi	r23, 0x04	; 4
    230c:	cf 01       	movw	r24, r30
    230e:	0e 94 62 23 	call	0x46c4	; 0x46c4 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    2312:	82 e6       	ldi	r24, 0x62	; 98
    2314:	94 e0       	ldi	r25, 0x04	; 4
    2316:	0e 94 58 23 	call	0x46b0	; 0x46b0 <strupr>
	if(crcXmodem < 0x10)
    231a:	80 e1       	ldi	r24, 0x10	; 16
    231c:	c8 16       	cp	r12, r24
    231e:	d1 04       	cpc	r13, r1
    2320:	98 f4       	brcc	.+38     	; 0x2348 <main+0xa28>
	{
		tx_string[cnt+4] = crc[0];
    2322:	80 91 62 04 	lds	r24, 0x0462
    2326:	fe 01       	movw	r30, r28
    2328:	e0 0f       	add	r30, r16
    232a:	f1 1f       	adc	r31, r17
    232c:	82 a3       	std	Z+34, r24	; 0x22
		tx_string[cnt+3] = '0';
    232e:	80 e3       	ldi	r24, 0x30	; 48
    2330:	fe 01       	movw	r30, r28
    2332:	e0 0f       	add	r30, r16
    2334:	f1 1f       	adc	r31, r17
    2336:	81 a3       	std	Z+33, r24	; 0x21
		tx_string[cnt+2] = '0';
    2338:	fe 01       	movw	r30, r28
    233a:	e0 0f       	add	r30, r16
    233c:	f1 1f       	adc	r31, r17
    233e:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';
    2340:	fe 01       	movw	r30, r28
    2342:	ee 0d       	add	r30, r14
    2344:	ff 1d       	adc	r31, r15
    2346:	86 8f       	std	Z+30, r24	; 0x1e
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    2348:	c6 01       	movw	r24, r12
    234a:	40 97       	sbiw	r24, 0x10	; 16
    234c:	80 3f       	cpi	r24, 0xF0	; 240
    234e:	91 05       	cpc	r25, r1
    2350:	b8 f4       	brcc	.+46     	; 0x2380 <main+0xa60>
	{
		tx_string[cnt+4] = crc[1];
    2352:	a2 e6       	ldi	r26, 0x62	; 98
    2354:	b4 e0       	ldi	r27, 0x04	; 4
    2356:	11 96       	adiw	r26, 0x01	; 1
    2358:	8c 91       	ld	r24, X
    235a:	11 97       	sbiw	r26, 0x01	; 1
    235c:	fe 01       	movw	r30, r28
    235e:	e0 0f       	add	r30, r16
    2360:	f1 1f       	adc	r31, r17
    2362:	82 a3       	std	Z+34, r24	; 0x22
		tx_string[cnt+3] = crc[0];
    2364:	8c 91       	ld	r24, X
    2366:	fe 01       	movw	r30, r28
    2368:	e0 0f       	add	r30, r16
    236a:	f1 1f       	adc	r31, r17
    236c:	81 a3       	std	Z+33, r24	; 0x21
		tx_string[cnt+2] = '0';
    236e:	80 e3       	ldi	r24, 0x30	; 48
    2370:	fe 01       	movw	r30, r28
    2372:	e0 0f       	add	r30, r16
    2374:	f1 1f       	adc	r31, r17
    2376:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';		
    2378:	fe 01       	movw	r30, r28
    237a:	ee 0d       	add	r30, r14
    237c:	ff 1d       	adc	r31, r15
    237e:	86 8f       	std	Z+30, r24	; 0x1e
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    2380:	c6 01       	movw	r24, r12
    2382:	9a 95       	dec	r25
    2384:	81 15       	cp	r24, r1
    2386:	9f 40       	sbci	r25, 0x0F	; 15
    2388:	b8 f4       	brcc	.+46     	; 0x23b8 <main+0xa98>
	{
		tx_string[cnt+4] = crc[2];
    238a:	e2 e6       	ldi	r30, 0x62	; 98
    238c:	f4 e0       	ldi	r31, 0x04	; 4
    238e:	82 81       	ldd	r24, Z+2	; 0x02
    2390:	de 01       	movw	r26, r28
    2392:	a0 0f       	add	r26, r16
    2394:	b1 1f       	adc	r27, r17
    2396:	92 96       	adiw	r26, 0x22	; 34
    2398:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[1];
    239a:	81 81       	ldd	r24, Z+1	; 0x01
    239c:	de 01       	movw	r26, r28
    239e:	a0 0f       	add	r26, r16
    23a0:	b1 1f       	adc	r27, r17
    23a2:	91 96       	adiw	r26, 0x21	; 33
    23a4:	8c 93       	st	X, r24
    23a6:	91 97       	sbiw	r26, 0x21	; 33
		tx_string[cnt+2] = crc[0];
    23a8:	80 81       	ld	r24, Z
    23aa:	fd 01       	movw	r30, r26
    23ac:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';		
    23ae:	80 e3       	ldi	r24, 0x30	; 48
    23b0:	fe 01       	movw	r30, r28
    23b2:	ee 0d       	add	r30, r14
    23b4:	ff 1d       	adc	r31, r15
    23b6:	86 8f       	std	Z+30, r24	; 0x1e
	}
	if(crcXmodem >= 0x1000)
    23b8:	c1 14       	cp	r12, r1
    23ba:	b0 e1       	ldi	r27, 0x10	; 16
    23bc:	db 06       	cpc	r13, r27
    23be:	c0 f0       	brcs	.+48     	; 0x23f0 <main+0xad0>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    23c0:	de 01       	movw	r26, r28
    23c2:	ae 0d       	add	r26, r14
    23c4:	bf 1d       	adc	r27, r15
    23c6:	e2 e6       	ldi	r30, 0x62	; 98
    23c8:	f4 e0       	ldi	r31, 0x04	; 4
    23ca:	80 81       	ld	r24, Z
    23cc:	5e 96       	adiw	r26, 0x1e	; 30
    23ce:	8c 93       	st	X, r24
		tx_string[cnt+2] = crc[1];
    23d0:	81 81       	ldd	r24, Z+1	; 0x01
    23d2:	de 01       	movw	r26, r28
    23d4:	a0 0f       	add	r26, r16
    23d6:	b1 1f       	adc	r27, r17
    23d8:	90 96       	adiw	r26, 0x20	; 32
    23da:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[2];
    23dc:	82 81       	ldd	r24, Z+2	; 0x02
    23de:	de 01       	movw	r26, r28
    23e0:	a0 0f       	add	r26, r16
    23e2:	b1 1f       	adc	r27, r17
    23e4:	91 96       	adiw	r26, 0x21	; 33
    23e6:	8c 93       	st	X, r24
    23e8:	91 97       	sbiw	r26, 0x21	; 33
		tx_string[cnt+4] = crc[3];
    23ea:	83 81       	ldd	r24, Z+3	; 0x03
    23ec:	fd 01       	movw	r30, r26
    23ee:	82 a3       	std	Z+34, r24	; 0x22
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    23f0:	c8 01       	movw	r24, r16
    23f2:	05 96       	adiw	r24, 0x05	; 5
    23f4:	fe 01       	movw	r30, r28
    23f6:	e8 0f       	add	r30, r24
    23f8:	f9 1f       	adc	r31, r25
    23fa:	2d e0       	ldi	r18, 0x0D	; 13
    23fc:	26 8f       	std	Z+30, r18	; 0x1e
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    23fe:	99 23       	and	r25, r25
    2400:	0c f4       	brge	.+2      	; 0x2404 <main+0xae4>
    2402:	25 c4       	rjmp	.+2122   	; 0x2c4e <main+0x132e>
    2404:	fe 01       	movw	r30, r28
    2406:	7e 96       	adiw	r30, 0x1e	; 30
    2408:	a8 01       	movw	r20, r16
    240a:	4a 5f       	subi	r20, 0xFA	; 250
    240c:	5f 4f       	sbci	r21, 0xFF	; 255
    240e:	4e 0f       	add	r20, r30
    2410:	5f 1f       	adc	r21, r31
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    2412:	90 e0       	ldi	r25, 0x00	; 0
	{
		uart_putchar(tx_string[i]);
    2414:	21 91       	ld	r18, Z+
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    2416:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    2418:	d4 01       	movw	r26, r8
    241a:	11 96       	adiw	r26, 0x01	; 1
    241c:	3c 91       	ld	r19, X
    241e:	11 97       	sbiw	r26, 0x01	; 1
    2420:	8c 91       	ld	r24, X
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    2422:	38 13       	cpse	r19, r24
    2424:	05 c0       	rjmp	.+10     	; 0x2430 <main+0xb10>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    2426:	a1 ec       	ldi	r26, 0xC1	; 193
    2428:	b0 e0       	ldi	r27, 0x00	; 0
    242a:	8c 91       	ld	r24, X
    242c:	80 62       	ori	r24, 0x20	; 32
    242e:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    2430:	d4 01       	movw	r26, r8
    2432:	8c 91       	ld	r24, X
    2434:	13 96       	adiw	r26, 0x03	; 3
    2436:	6d 91       	ld	r22, X+
    2438:	7c 91       	ld	r23, X
    243a:	14 97       	sbiw	r26, 0x04	; 4
    243c:	db 01       	movw	r26, r22
    243e:	a8 0f       	add	r26, r24
    2440:	b1 1d       	adc	r27, r1
    2442:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    2444:	d4 01       	movw	r26, r8
    2446:	8c 91       	ld	r24, X
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    2448:	68 2f       	mov	r22, r24
    244a:	70 e0       	ldi	r23, 0x00	; 0
    244c:	12 96       	adiw	r26, 0x02	; 2
    244e:	2c 91       	ld	r18, X
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	21 50       	subi	r18, 0x01	; 1
    2454:	31 09       	sbc	r19, r1
    2456:	62 17       	cp	r22, r18
    2458:	73 07       	cpc	r23, r19
    245a:	11 f0       	breq	.+4      	; 0x2460 <main+0xb40>
    245c:	8f 5f       	subi	r24, 0xFF	; 255
    245e:	01 c0       	rjmp	.+2      	; 0x2462 <main+0xb42>
    2460:	89 2f       	mov	r24, r25
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    2462:	d4 01       	movw	r26, r8
    2464:	8c 93       	st	X, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    2466:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    2468:	e4 17       	cp	r30, r20
    246a:	f5 07       	cpc	r31, r21
    246c:	99 f6       	brne	.-90     	; 0x2414 <main+0xaf4>
    246e:	ef c3       	rjmp	.+2014   	; 0x2c4e <main+0x132e>
		ftoa(D_ch0, tx_string);
		printStatus(tx_string);
		break;
		
		case 104:	// Send TempSetPoint0
		ftoa(TempSetPoint0, tx_string);
    2470:	60 91 a2 01 	lds	r22, 0x01A2
    2474:	70 91 a3 01 	lds	r23, 0x01A3
    2478:	80 91 a4 01 	lds	r24, 0x01A4
    247c:	90 91 a5 01 	lds	r25, 0x01A5
    2480:	46 2d       	mov	r20, r6
    2482:	57 2d       	mov	r21, r7
    2484:	c6 d9       	rcall	.-3188   	; 0x1812 <ftoa>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    2486:	81 e2       	ldi	r24, 0x21	; 33
    2488:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    248a:	f5 01       	movw	r30, r10
    248c:	81 81       	ldd	r24, Z+1	; 0x01
    248e:	8f 8f       	std	Y+31, r24	; 0x1f
    2490:	82 81       	ldd	r24, Z+2	; 0x02
    2492:	88 a3       	std	Y+32, r24	; 0x20
    2494:	83 81       	ldd	r24, Z+3	; 0x03
    2496:	89 a3       	std	Y+33, r24	; 0x21
    2498:	e6 2d       	mov	r30, r6
    249a:	f7 2d       	mov	r31, r7
    249c:	de 01       	movw	r26, r28
    249e:	92 96       	adiw	r26, 0x22	; 34
    24a0:	00 e0       	ldi	r16, 0x00	; 0
    24a2:	10 e0       	ldi	r17, 0x00	; 0
    24a4:	af 01       	movw	r20, r30
    24a6:	06 c0       	rjmp	.+12     	; 0x24b4 <main+0xb94>
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    24a8:	fa 01       	movw	r30, r20
    24aa:	81 91       	ld	r24, Z+
    24ac:	af 01       	movw	r20, r30
    24ae:	8d 93       	st	X+, r24
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    24b0:	0f 5f       	subi	r16, 0xFF	; 255
    24b2:	1f 4f       	sbci	r17, 0xFF	; 255
    24b4:	6c 96       	adiw	r28, 0x1c	; 28
    24b6:	ee ad       	ldd	r30, Y+62	; 0x3e
    24b8:	ff ad       	ldd	r31, Y+63	; 0x3f
    24ba:	6c 97       	sbiw	r28, 0x1c	; 28
    24bc:	01 90       	ld	r0, Z+
    24be:	00 20       	and	r0, r0
    24c0:	e9 f7       	brne	.-6      	; 0x24bc <main+0xb9c>
    24c2:	cf 01       	movw	r24, r30
    24c4:	6c 96       	adiw	r28, 0x1c	; 28
    24c6:	2e ad       	ldd	r18, Y+62	; 0x3e
    24c8:	3f ad       	ldd	r19, Y+63	; 0x3f
    24ca:	6c 97       	sbiw	r28, 0x1c	; 28
    24cc:	82 1b       	sub	r24, r18
    24ce:	93 0b       	sbc	r25, r19
    24d0:	02 96       	adiw	r24, 0x02	; 2
    24d2:	08 17       	cp	r16, r24
    24d4:	19 07       	cpc	r17, r25
    24d6:	40 f3       	brcs	.-48     	; 0x24a8 <main+0xb88>
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    24d8:	78 01       	movw	r14, r16
    24da:	3f ef       	ldi	r19, 0xFF	; 255
    24dc:	e3 1a       	sub	r14, r19
    24de:	f3 0a       	sbc	r15, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    24e0:	1e 14       	cp	r1, r14
    24e2:	1f 04       	cpc	r1, r15
    24e4:	14 f0       	brlt	.+4      	; 0x24ea <main+0xbca>
    24e6:	0c 94 e9 20 	jmp	0x41d2	; 0x41d2 <main+0x28b2>
    24ea:	de 01       	movw	r26, r28
    24ec:	5e 96       	adiw	r26, 0x1e	; 30
    24ee:	67 01       	movw	r12, r14
    24f0:	ca 0e       	add	r12, r26
    24f2:	db 1e       	adc	r13, r27
    24f4:	e0 e0       	ldi	r30, 0x00	; 0
    24f6:	f0 e0       	ldi	r31, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    24f8:	98 e0       	ldi	r25, 0x08	; 8
    24fa:	80 e0       	ldi	r24, 0x00	; 0
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    24fc:	4d 91       	ld	r20, X+
		tmp = (int)((CRC >> 8) ^ int_c);
    24fe:	2f 2f       	mov	r18, r31
    2500:	33 27       	eor	r19, r19
    2502:	27 fd       	sbrc	r18, 7
    2504:	3a 95       	dec	r19
    2506:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    2508:	32 2f       	mov	r19, r18
    250a:	22 27       	eor	r18, r18
    250c:	49 2f       	mov	r20, r25
    250e:	58 2f       	mov	r21, r24
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    2510:	33 23       	and	r19, r19
    2512:	3c f4       	brge	.+14     	; 0x2522 <main+0xc02>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    2514:	22 0f       	add	r18, r18
    2516:	33 1f       	adc	r19, r19
    2518:	61 e2       	ldi	r22, 0x21	; 33
    251a:	26 27       	eor	r18, r22
    251c:	60 e1       	ldi	r22, 0x10	; 16
    251e:	36 27       	eor	r19, r22
    2520:	02 c0       	rjmp	.+4      	; 0x2526 <main+0xc06>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    2522:	22 0f       	add	r18, r18
    2524:	33 1f       	adc	r19, r19
    2526:	41 50       	subi	r20, 0x01	; 1
    2528:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    252a:	91 f7       	brne	.-28     	; 0x2510 <main+0xbf0>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    252c:	fe 2f       	mov	r31, r30
    252e:	ee 27       	eor	r30, r30
    2530:	e2 27       	eor	r30, r18
    2532:	f3 27       	eor	r31, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    2534:	ac 15       	cp	r26, r12
    2536:	bd 05       	cpc	r27, r13
    2538:	09 f7       	brne	.-62     	; 0x24fc <main+0xbdc>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    253a:	6f 01       	movw	r12, r30
    253c:	40 e1       	ldi	r20, 0x10	; 16
    253e:	62 e6       	ldi	r22, 0x62	; 98
    2540:	74 e0       	ldi	r23, 0x04	; 4
    2542:	cf 01       	movw	r24, r30
    2544:	0e 94 62 23 	call	0x46c4	; 0x46c4 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    2548:	82 e6       	ldi	r24, 0x62	; 98
    254a:	94 e0       	ldi	r25, 0x04	; 4
    254c:	0e 94 58 23 	call	0x46b0	; 0x46b0 <strupr>
	if(crcXmodem < 0x10)
    2550:	80 e1       	ldi	r24, 0x10	; 16
    2552:	c8 16       	cp	r12, r24
    2554:	d1 04       	cpc	r13, r1
    2556:	98 f4       	brcc	.+38     	; 0x257e <main+0xc5e>
	{
		tx_string[cnt+4] = crc[0];
    2558:	80 91 62 04 	lds	r24, 0x0462
    255c:	fe 01       	movw	r30, r28
    255e:	e0 0f       	add	r30, r16
    2560:	f1 1f       	adc	r31, r17
    2562:	82 a3       	std	Z+34, r24	; 0x22
		tx_string[cnt+3] = '0';
    2564:	80 e3       	ldi	r24, 0x30	; 48
    2566:	fe 01       	movw	r30, r28
    2568:	e0 0f       	add	r30, r16
    256a:	f1 1f       	adc	r31, r17
    256c:	81 a3       	std	Z+33, r24	; 0x21
		tx_string[cnt+2] = '0';
    256e:	fe 01       	movw	r30, r28
    2570:	e0 0f       	add	r30, r16
    2572:	f1 1f       	adc	r31, r17
    2574:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';
    2576:	fe 01       	movw	r30, r28
    2578:	ee 0d       	add	r30, r14
    257a:	ff 1d       	adc	r31, r15
    257c:	86 8f       	std	Z+30, r24	; 0x1e
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    257e:	c6 01       	movw	r24, r12
    2580:	40 97       	sbiw	r24, 0x10	; 16
    2582:	80 3f       	cpi	r24, 0xF0	; 240
    2584:	91 05       	cpc	r25, r1
    2586:	b8 f4       	brcc	.+46     	; 0x25b6 <main+0xc96>
	{
		tx_string[cnt+4] = crc[1];
    2588:	a2 e6       	ldi	r26, 0x62	; 98
    258a:	b4 e0       	ldi	r27, 0x04	; 4
    258c:	11 96       	adiw	r26, 0x01	; 1
    258e:	8c 91       	ld	r24, X
    2590:	11 97       	sbiw	r26, 0x01	; 1
    2592:	fe 01       	movw	r30, r28
    2594:	e0 0f       	add	r30, r16
    2596:	f1 1f       	adc	r31, r17
    2598:	82 a3       	std	Z+34, r24	; 0x22
		tx_string[cnt+3] = crc[0];
    259a:	8c 91       	ld	r24, X
    259c:	fe 01       	movw	r30, r28
    259e:	e0 0f       	add	r30, r16
    25a0:	f1 1f       	adc	r31, r17
    25a2:	81 a3       	std	Z+33, r24	; 0x21
		tx_string[cnt+2] = '0';
    25a4:	80 e3       	ldi	r24, 0x30	; 48
    25a6:	fe 01       	movw	r30, r28
    25a8:	e0 0f       	add	r30, r16
    25aa:	f1 1f       	adc	r31, r17
    25ac:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';		
    25ae:	fe 01       	movw	r30, r28
    25b0:	ee 0d       	add	r30, r14
    25b2:	ff 1d       	adc	r31, r15
    25b4:	86 8f       	std	Z+30, r24	; 0x1e
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    25b6:	c6 01       	movw	r24, r12
    25b8:	9a 95       	dec	r25
    25ba:	81 15       	cp	r24, r1
    25bc:	9f 40       	sbci	r25, 0x0F	; 15
    25be:	b8 f4       	brcc	.+46     	; 0x25ee <main+0xcce>
	{
		tx_string[cnt+4] = crc[2];
    25c0:	e2 e6       	ldi	r30, 0x62	; 98
    25c2:	f4 e0       	ldi	r31, 0x04	; 4
    25c4:	82 81       	ldd	r24, Z+2	; 0x02
    25c6:	de 01       	movw	r26, r28
    25c8:	a0 0f       	add	r26, r16
    25ca:	b1 1f       	adc	r27, r17
    25cc:	92 96       	adiw	r26, 0x22	; 34
    25ce:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[1];
    25d0:	81 81       	ldd	r24, Z+1	; 0x01
    25d2:	de 01       	movw	r26, r28
    25d4:	a0 0f       	add	r26, r16
    25d6:	b1 1f       	adc	r27, r17
    25d8:	91 96       	adiw	r26, 0x21	; 33
    25da:	8c 93       	st	X, r24
    25dc:	91 97       	sbiw	r26, 0x21	; 33
		tx_string[cnt+2] = crc[0];
    25de:	80 81       	ld	r24, Z
    25e0:	fd 01       	movw	r30, r26
    25e2:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';		
    25e4:	80 e3       	ldi	r24, 0x30	; 48
    25e6:	fe 01       	movw	r30, r28
    25e8:	ee 0d       	add	r30, r14
    25ea:	ff 1d       	adc	r31, r15
    25ec:	86 8f       	std	Z+30, r24	; 0x1e
	}
	if(crcXmodem >= 0x1000)
    25ee:	c1 14       	cp	r12, r1
    25f0:	b0 e1       	ldi	r27, 0x10	; 16
    25f2:	db 06       	cpc	r13, r27
    25f4:	c0 f0       	brcs	.+48     	; 0x2626 <main+0xd06>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    25f6:	de 01       	movw	r26, r28
    25f8:	ae 0d       	add	r26, r14
    25fa:	bf 1d       	adc	r27, r15
    25fc:	e2 e6       	ldi	r30, 0x62	; 98
    25fe:	f4 e0       	ldi	r31, 0x04	; 4
    2600:	80 81       	ld	r24, Z
    2602:	5e 96       	adiw	r26, 0x1e	; 30
    2604:	8c 93       	st	X, r24
		tx_string[cnt+2] = crc[1];
    2606:	81 81       	ldd	r24, Z+1	; 0x01
    2608:	de 01       	movw	r26, r28
    260a:	a0 0f       	add	r26, r16
    260c:	b1 1f       	adc	r27, r17
    260e:	90 96       	adiw	r26, 0x20	; 32
    2610:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[2];
    2612:	82 81       	ldd	r24, Z+2	; 0x02
    2614:	de 01       	movw	r26, r28
    2616:	a0 0f       	add	r26, r16
    2618:	b1 1f       	adc	r27, r17
    261a:	91 96       	adiw	r26, 0x21	; 33
    261c:	8c 93       	st	X, r24
    261e:	91 97       	sbiw	r26, 0x21	; 33
		tx_string[cnt+4] = crc[3];
    2620:	83 81       	ldd	r24, Z+3	; 0x03
    2622:	fd 01       	movw	r30, r26
    2624:	82 a3       	std	Z+34, r24	; 0x22
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    2626:	c8 01       	movw	r24, r16
    2628:	05 96       	adiw	r24, 0x05	; 5
    262a:	fe 01       	movw	r30, r28
    262c:	e8 0f       	add	r30, r24
    262e:	f9 1f       	adc	r31, r25
    2630:	2d e0       	ldi	r18, 0x0D	; 13
    2632:	26 8f       	std	Z+30, r18	; 0x1e
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    2634:	99 23       	and	r25, r25
    2636:	0c f4       	brge	.+2      	; 0x263a <main+0xd1a>
    2638:	0a c3       	rjmp	.+1556   	; 0x2c4e <main+0x132e>
    263a:	fe 01       	movw	r30, r28
    263c:	7e 96       	adiw	r30, 0x1e	; 30
    263e:	a8 01       	movw	r20, r16
    2640:	4a 5f       	subi	r20, 0xFA	; 250
    2642:	5f 4f       	sbci	r21, 0xFF	; 255
    2644:	4e 0f       	add	r20, r30
    2646:	5f 1f       	adc	r21, r31
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    2648:	90 e0       	ldi	r25, 0x00	; 0
	{
		uart_putchar(tx_string[i]);
    264a:	21 91       	ld	r18, Z+
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    264c:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    264e:	d4 01       	movw	r26, r8
    2650:	11 96       	adiw	r26, 0x01	; 1
    2652:	3c 91       	ld	r19, X
    2654:	11 97       	sbiw	r26, 0x01	; 1
    2656:	8c 91       	ld	r24, X
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    2658:	38 13       	cpse	r19, r24
    265a:	05 c0       	rjmp	.+10     	; 0x2666 <main+0xd46>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    265c:	a1 ec       	ldi	r26, 0xC1	; 193
    265e:	b0 e0       	ldi	r27, 0x00	; 0
    2660:	8c 91       	ld	r24, X
    2662:	80 62       	ori	r24, 0x20	; 32
    2664:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    2666:	d4 01       	movw	r26, r8
    2668:	8c 91       	ld	r24, X
    266a:	13 96       	adiw	r26, 0x03	; 3
    266c:	6d 91       	ld	r22, X+
    266e:	7c 91       	ld	r23, X
    2670:	14 97       	sbiw	r26, 0x04	; 4
    2672:	db 01       	movw	r26, r22
    2674:	a8 0f       	add	r26, r24
    2676:	b1 1d       	adc	r27, r1
    2678:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    267a:	d4 01       	movw	r26, r8
    267c:	8c 91       	ld	r24, X
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    267e:	68 2f       	mov	r22, r24
    2680:	70 e0       	ldi	r23, 0x00	; 0
    2682:	12 96       	adiw	r26, 0x02	; 2
    2684:	2c 91       	ld	r18, X
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	21 50       	subi	r18, 0x01	; 1
    268a:	31 09       	sbc	r19, r1
    268c:	62 17       	cp	r22, r18
    268e:	73 07       	cpc	r23, r19
    2690:	11 f0       	breq	.+4      	; 0x2696 <main+0xd76>
    2692:	8f 5f       	subi	r24, 0xFF	; 255
    2694:	01 c0       	rjmp	.+2      	; 0x2698 <main+0xd78>
    2696:	89 2f       	mov	r24, r25
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    2698:	d4 01       	movw	r26, r8
    269a:	8c 93       	st	X, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    269c:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    269e:	e4 17       	cp	r30, r20
    26a0:	f5 07       	cpc	r31, r21
    26a2:	99 f6       	brne	.-90     	; 0x264a <main+0xd2a>
    26a4:	d4 c2       	rjmp	.+1448   	; 0x2c4e <main+0x132e>
		ftoa(TempSetPoint0, tx_string);
		printStatus(tx_string);
		break;
		
		case 105:	// Send Pgain ch0
		ftoa(Pgain_ch0, tx_string);
    26a6:	60 91 00 03 	lds	r22, 0x0300
    26aa:	70 91 01 03 	lds	r23, 0x0301
    26ae:	80 91 02 03 	lds	r24, 0x0302
    26b2:	90 91 03 03 	lds	r25, 0x0303
    26b6:	46 2d       	mov	r20, r6
    26b8:	57 2d       	mov	r21, r7
    26ba:	ab d8       	rcall	.-3754   	; 0x1812 <ftoa>
		printStatus(tx_string);
    26bc:	86 2d       	mov	r24, r6
    26be:	97 2d       	mov	r25, r7
    26c0:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    26c4:	c4 c2       	rjmp	.+1416   	; 0x2c4e <main+0x132e>
		break;								
		
		case 106:	// Send Igain ch0
		ftoa(Igain_ch0, tx_string);
    26c6:	60 91 b0 04 	lds	r22, 0x04B0
    26ca:	70 91 b1 04 	lds	r23, 0x04B1
    26ce:	80 91 b2 04 	lds	r24, 0x04B2
    26d2:	90 91 b3 04 	lds	r25, 0x04B3
    26d6:	46 2d       	mov	r20, r6
    26d8:	57 2d       	mov	r21, r7
    26da:	9b d8       	rcall	.-3786   	; 0x1812 <ftoa>
		printStatus(tx_string);
    26dc:	86 2d       	mov	r24, r6
    26de:	97 2d       	mov	r25, r7
    26e0:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    26e4:	b4 c2       	rjmp	.+1384   	; 0x2c4e <main+0x132e>
		break;
		
		case 107:	// Send Dgain ch0
		ftoa(Dgain_ch0, tx_string);
    26e6:	60 91 fd 01 	lds	r22, 0x01FD
    26ea:	70 91 fe 01 	lds	r23, 0x01FE
    26ee:	80 91 ff 01 	lds	r24, 0x01FF
    26f2:	90 91 00 02 	lds	r25, 0x0200
    26f6:	46 2d       	mov	r20, r6
    26f8:	57 2d       	mov	r21, r7
    26fa:	8b d8       	rcall	.-3818   	; 0x1812 <ftoa>
		printStatus(tx_string);
    26fc:	86 2d       	mov	r24, r6
    26fe:	97 2d       	mov	r25, r7
    2700:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2704:	a4 c2       	rjmp	.+1352   	; 0x2c4e <main+0x132e>
		break;
		
		// *** Channel 1 ***
		case 200:	// Send sensor 1 temperature
		ftoa(TempSensor1, tx_string);
    2706:	60 91 b0 01 	lds	r22, 0x01B0
    270a:	70 91 b1 01 	lds	r23, 0x01B1
    270e:	80 91 b2 01 	lds	r24, 0x01B2
    2712:	90 91 b3 01 	lds	r25, 0x01B3
    2716:	46 2d       	mov	r20, r6
    2718:	57 2d       	mov	r21, r7
    271a:	7b d8       	rcall	.-3850   	; 0x1812 <ftoa>
		printStatus(tx_string);
    271c:	86 2d       	mov	r24, r6
    271e:	97 2d       	mov	r25, r7
    2720:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2724:	94 c2       	rjmp	.+1320   	; 0x2c4e <main+0x132e>
		break;
		
		case 201:	// Send P part of PID-controller 1
		ftoa(P_ch1, tx_string);
    2726:	60 91 86 01 	lds	r22, 0x0186
    272a:	70 91 87 01 	lds	r23, 0x0187
    272e:	80 91 88 01 	lds	r24, 0x0188
    2732:	90 91 89 01 	lds	r25, 0x0189
    2736:	46 2d       	mov	r20, r6
    2738:	57 2d       	mov	r21, r7
    273a:	6b d8       	rcall	.-3882   	; 0x1812 <ftoa>
		printStatus(tx_string);
    273c:	86 2d       	mov	r24, r6
    273e:	97 2d       	mov	r25, r7
    2740:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2744:	84 c2       	rjmp	.+1288   	; 0x2c4e <main+0x132e>
		break;
		
		case 202:	// Send I part of PID-controller 1
		ftoa(I_ch1, tx_string);
    2746:	60 91 82 01 	lds	r22, 0x0182
    274a:	70 91 83 01 	lds	r23, 0x0183
    274e:	80 91 84 01 	lds	r24, 0x0184
    2752:	90 91 85 01 	lds	r25, 0x0185
    2756:	46 2d       	mov	r20, r6
    2758:	57 2d       	mov	r21, r7
    275a:	5b d8       	rcall	.-3914   	; 0x1812 <ftoa>
		printStatus(tx_string);
    275c:	86 2d       	mov	r24, r6
    275e:	97 2d       	mov	r25, r7
    2760:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2764:	74 c2       	rjmp	.+1256   	; 0x2c4e <main+0x132e>
		break;
				
		case 203:	// Send D part of PID-controller 1
		ftoa(D_ch1, tx_string);
    2766:	60 91 7e 01 	lds	r22, 0x017E
    276a:	70 91 7f 01 	lds	r23, 0x017F
    276e:	80 91 80 01 	lds	r24, 0x0180
    2772:	90 91 81 01 	lds	r25, 0x0181
    2776:	46 2d       	mov	r20, r6
    2778:	57 2d       	mov	r21, r7
    277a:	4b d8       	rcall	.-3946   	; 0x1812 <ftoa>
		printStatus(tx_string);
    277c:	86 2d       	mov	r24, r6
    277e:	97 2d       	mov	r25, r7
    2780:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2784:	64 c2       	rjmp	.+1224   	; 0x2c4e <main+0x132e>
		break;
		
		case 204:	// Send TempSetPoint1
		ftoa(TempSetPoint1, tx_string);
    2786:	60 91 8a 01 	lds	r22, 0x018A
    278a:	70 91 8b 01 	lds	r23, 0x018B
    278e:	80 91 8c 01 	lds	r24, 0x018C
    2792:	90 91 8d 01 	lds	r25, 0x018D
    2796:	46 2d       	mov	r20, r6
    2798:	57 2d       	mov	r21, r7
    279a:	3b d8       	rcall	.-3978   	; 0x1812 <ftoa>
		printStatus(tx_string);
    279c:	86 2d       	mov	r24, r6
    279e:	97 2d       	mov	r25, r7
    27a0:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    27a4:	54 c2       	rjmp	.+1192   	; 0x2c4e <main+0x132e>
		break;
		
		case 205:	// Send Pgain ch1
		ftoa(Pgain_ch1, tx_string);
    27a6:	60 91 6b 04 	lds	r22, 0x046B
    27aa:	70 91 6c 04 	lds	r23, 0x046C
    27ae:	80 91 6d 04 	lds	r24, 0x046D
    27b2:	90 91 6e 04 	lds	r25, 0x046E
    27b6:	46 2d       	mov	r20, r6
    27b8:	57 2d       	mov	r21, r7
    27ba:	2b d8       	rcall	.-4010   	; 0x1812 <ftoa>
		printStatus(tx_string);
    27bc:	86 2d       	mov	r24, r6
    27be:	97 2d       	mov	r25, r7
    27c0:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    27c4:	44 c2       	rjmp	.+1160   	; 0x2c4e <main+0x132e>
		break;
		
		case 206:	// Send Igain ch1
		ftoa(Igain_ch1, tx_string);
    27c6:	60 91 c6 01 	lds	r22, 0x01C6
    27ca:	70 91 c7 01 	lds	r23, 0x01C7
    27ce:	80 91 c8 01 	lds	r24, 0x01C8
    27d2:	90 91 c9 01 	lds	r25, 0x01C9
    27d6:	46 2d       	mov	r20, r6
    27d8:	57 2d       	mov	r21, r7
    27da:	1b d8       	rcall	.-4042   	; 0x1812 <ftoa>
		printStatus(tx_string);
    27dc:	86 2d       	mov	r24, r6
    27de:	97 2d       	mov	r25, r7
    27e0:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    27e4:	34 c2       	rjmp	.+1128   	; 0x2c4e <main+0x132e>
		break;
		
		case 207:	// Send Dgain ch1
		ftoa(Dgain_ch1, tx_string);
    27e6:	60 91 ac 04 	lds	r22, 0x04AC
    27ea:	70 91 ad 04 	lds	r23, 0x04AD
    27ee:	80 91 ae 04 	lds	r24, 0x04AE
    27f2:	90 91 af 04 	lds	r25, 0x04AF
    27f6:	46 2d       	mov	r20, r6
    27f8:	57 2d       	mov	r21, r7
    27fa:	0b d8       	rcall	.-4074   	; 0x1812 <ftoa>
		printStatus(tx_string);
    27fc:	86 2d       	mov	r24, r6
    27fe:	97 2d       	mov	r25, r7
    2800:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2804:	24 c2       	rjmp	.+1096   	; 0x2c4e <main+0x132e>
		break;

		// *** Channel 2 ***		
		case 300:	// Send sensor 2 temperature
		ftoa(TempSensor2, tx_string);
    2806:	60 91 ac 01 	lds	r22, 0x01AC
    280a:	70 91 ad 01 	lds	r23, 0x01AD
    280e:	80 91 ae 01 	lds	r24, 0x01AE
    2812:	90 91 af 01 	lds	r25, 0x01AF
    2816:	46 2d       	mov	r20, r6
    2818:	57 2d       	mov	r21, r7
    281a:	0e 94 09 0c 	call	0x1812	; 0x1812 <ftoa>
		printStatus(tx_string);
    281e:	86 2d       	mov	r24, r6
    2820:	97 2d       	mov	r25, r7
    2822:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2826:	13 c2       	rjmp	.+1062   	; 0x2c4e <main+0x132e>
		break;
		
		case 301:	// Send P part of PID-controller 2
		ftoa(P_ch2, tx_string);
    2828:	60 91 6e 01 	lds	r22, 0x016E
    282c:	70 91 6f 01 	lds	r23, 0x016F
    2830:	80 91 70 01 	lds	r24, 0x0170
    2834:	90 91 71 01 	lds	r25, 0x0171
    2838:	46 2d       	mov	r20, r6
    283a:	57 2d       	mov	r21, r7
    283c:	0e 94 09 0c 	call	0x1812	; 0x1812 <ftoa>
		printStatus(tx_string);
    2840:	86 2d       	mov	r24, r6
    2842:	97 2d       	mov	r25, r7
    2844:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2848:	02 c2       	rjmp	.+1028   	; 0x2c4e <main+0x132e>
		break;
		
		case 302:	// Send I part of PID-controller 2
		ftoa(I_ch2, tx_string);
    284a:	60 91 6a 01 	lds	r22, 0x016A
    284e:	70 91 6b 01 	lds	r23, 0x016B
    2852:	80 91 6c 01 	lds	r24, 0x016C
    2856:	90 91 6d 01 	lds	r25, 0x016D
    285a:	46 2d       	mov	r20, r6
    285c:	57 2d       	mov	r21, r7
    285e:	0e 94 09 0c 	call	0x1812	; 0x1812 <ftoa>
		printStatus(tx_string);
    2862:	86 2d       	mov	r24, r6
    2864:	97 2d       	mov	r25, r7
    2866:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    286a:	f1 c1       	rjmp	.+994    	; 0x2c4e <main+0x132e>
		break;
		
		case 303:	// Send D part of PID-controller 2
		ftoa(D_ch2, tx_string);
    286c:	60 91 66 01 	lds	r22, 0x0166
    2870:	70 91 67 01 	lds	r23, 0x0167
    2874:	80 91 68 01 	lds	r24, 0x0168
    2878:	90 91 69 01 	lds	r25, 0x0169
    287c:	46 2d       	mov	r20, r6
    287e:	57 2d       	mov	r21, r7
    2880:	0e 94 09 0c 	call	0x1812	; 0x1812 <ftoa>
		printStatus(tx_string);
    2884:	86 2d       	mov	r24, r6
    2886:	97 2d       	mov	r25, r7
    2888:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    288c:	e0 c1       	rjmp	.+960    	; 0x2c4e <main+0x132e>
		break;
		
		case 304:	// Send TempSetPoint2
		ftoa(TempSetPoint2, tx_string);
    288e:	60 91 72 01 	lds	r22, 0x0172
    2892:	70 91 73 01 	lds	r23, 0x0173
    2896:	80 91 74 01 	lds	r24, 0x0174
    289a:	90 91 75 01 	lds	r25, 0x0175
    289e:	46 2d       	mov	r20, r6
    28a0:	57 2d       	mov	r21, r7
    28a2:	0e 94 09 0c 	call	0x1812	; 0x1812 <ftoa>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    28a6:	81 e2       	ldi	r24, 0x21	; 33
    28a8:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    28aa:	f5 01       	movw	r30, r10
    28ac:	81 81       	ldd	r24, Z+1	; 0x01
    28ae:	8f 8f       	std	Y+31, r24	; 0x1f
    28b0:	82 81       	ldd	r24, Z+2	; 0x02
    28b2:	88 a3       	std	Y+32, r24	; 0x20
    28b4:	83 81       	ldd	r24, Z+3	; 0x03
    28b6:	89 a3       	std	Y+33, r24	; 0x21
    28b8:	e6 2d       	mov	r30, r6
    28ba:	f7 2d       	mov	r31, r7
    28bc:	de 01       	movw	r26, r28
    28be:	92 96       	adiw	r26, 0x22	; 34
    28c0:	00 e0       	ldi	r16, 0x00	; 0
    28c2:	10 e0       	ldi	r17, 0x00	; 0
    28c4:	af 01       	movw	r20, r30
    28c6:	06 c0       	rjmp	.+12     	; 0x28d4 <main+0xfb4>
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    28c8:	fa 01       	movw	r30, r20
    28ca:	81 91       	ld	r24, Z+
    28cc:	af 01       	movw	r20, r30
    28ce:	8d 93       	st	X+, r24
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    28d0:	0f 5f       	subi	r16, 0xFF	; 255
    28d2:	1f 4f       	sbci	r17, 0xFF	; 255
    28d4:	6c 96       	adiw	r28, 0x1c	; 28
    28d6:	ee ad       	ldd	r30, Y+62	; 0x3e
    28d8:	ff ad       	ldd	r31, Y+63	; 0x3f
    28da:	6c 97       	sbiw	r28, 0x1c	; 28
    28dc:	01 90       	ld	r0, Z+
    28de:	00 20       	and	r0, r0
    28e0:	e9 f7       	brne	.-6      	; 0x28dc <main+0xfbc>
    28e2:	cf 01       	movw	r24, r30
    28e4:	6c 96       	adiw	r28, 0x1c	; 28
    28e6:	2e ad       	ldd	r18, Y+62	; 0x3e
    28e8:	3f ad       	ldd	r19, Y+63	; 0x3f
    28ea:	6c 97       	sbiw	r28, 0x1c	; 28
    28ec:	82 1b       	sub	r24, r18
    28ee:	93 0b       	sbc	r25, r19
    28f0:	02 96       	adiw	r24, 0x02	; 2
    28f2:	08 17       	cp	r16, r24
    28f4:	19 07       	cpc	r17, r25
    28f6:	40 f3       	brcs	.-48     	; 0x28c8 <main+0xfa8>
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    28f8:	78 01       	movw	r14, r16
    28fa:	3f ef       	ldi	r19, 0xFF	; 255
    28fc:	e3 1a       	sub	r14, r19
    28fe:	f3 0a       	sbc	r15, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    2900:	1e 14       	cp	r1, r14
    2902:	1f 04       	cpc	r1, r15
    2904:	14 f0       	brlt	.+4      	; 0x290a <main+0xfea>
    2906:	0c 94 f6 20 	jmp	0x41ec	; 0x41ec <main+0x28cc>
    290a:	de 01       	movw	r26, r28
    290c:	5e 96       	adiw	r26, 0x1e	; 30
    290e:	67 01       	movw	r12, r14
    2910:	ca 0e       	add	r12, r26
    2912:	db 1e       	adc	r13, r27
    2914:	e0 e0       	ldi	r30, 0x00	; 0
    2916:	f0 e0       	ldi	r31, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    2918:	98 e0       	ldi	r25, 0x08	; 8
    291a:	80 e0       	ldi	r24, 0x00	; 0
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    291c:	4d 91       	ld	r20, X+
		tmp = (int)((CRC >> 8) ^ int_c);
    291e:	2f 2f       	mov	r18, r31
    2920:	33 27       	eor	r19, r19
    2922:	27 fd       	sbrc	r18, 7
    2924:	3a 95       	dec	r19
    2926:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    2928:	32 2f       	mov	r19, r18
    292a:	22 27       	eor	r18, r18
    292c:	49 2f       	mov	r20, r25
    292e:	58 2f       	mov	r21, r24
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    2930:	33 23       	and	r19, r19
    2932:	3c f4       	brge	.+14     	; 0x2942 <main+0x1022>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    2934:	22 0f       	add	r18, r18
    2936:	33 1f       	adc	r19, r19
    2938:	61 e2       	ldi	r22, 0x21	; 33
    293a:	26 27       	eor	r18, r22
    293c:	60 e1       	ldi	r22, 0x10	; 16
    293e:	36 27       	eor	r19, r22
    2940:	02 c0       	rjmp	.+4      	; 0x2946 <main+0x1026>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    2942:	22 0f       	add	r18, r18
    2944:	33 1f       	adc	r19, r19
    2946:	41 50       	subi	r20, 0x01	; 1
    2948:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    294a:	91 f7       	brne	.-28     	; 0x2930 <main+0x1010>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    294c:	fe 2f       	mov	r31, r30
    294e:	ee 27       	eor	r30, r30
    2950:	e2 27       	eor	r30, r18
    2952:	f3 27       	eor	r31, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    2954:	ac 15       	cp	r26, r12
    2956:	bd 05       	cpc	r27, r13
    2958:	09 f7       	brne	.-62     	; 0x291c <main+0xffc>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    295a:	6f 01       	movw	r12, r30
    295c:	40 e1       	ldi	r20, 0x10	; 16
    295e:	62 e6       	ldi	r22, 0x62	; 98
    2960:	74 e0       	ldi	r23, 0x04	; 4
    2962:	cf 01       	movw	r24, r30
    2964:	0e 94 62 23 	call	0x46c4	; 0x46c4 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    2968:	82 e6       	ldi	r24, 0x62	; 98
    296a:	94 e0       	ldi	r25, 0x04	; 4
    296c:	0e 94 58 23 	call	0x46b0	; 0x46b0 <strupr>
	if(crcXmodem < 0x10)
    2970:	80 e1       	ldi	r24, 0x10	; 16
    2972:	c8 16       	cp	r12, r24
    2974:	d1 04       	cpc	r13, r1
    2976:	98 f4       	brcc	.+38     	; 0x299e <main+0x107e>
	{
		tx_string[cnt+4] = crc[0];
    2978:	80 91 62 04 	lds	r24, 0x0462
    297c:	fe 01       	movw	r30, r28
    297e:	e0 0f       	add	r30, r16
    2980:	f1 1f       	adc	r31, r17
    2982:	82 a3       	std	Z+34, r24	; 0x22
		tx_string[cnt+3] = '0';
    2984:	80 e3       	ldi	r24, 0x30	; 48
    2986:	fe 01       	movw	r30, r28
    2988:	e0 0f       	add	r30, r16
    298a:	f1 1f       	adc	r31, r17
    298c:	81 a3       	std	Z+33, r24	; 0x21
		tx_string[cnt+2] = '0';
    298e:	fe 01       	movw	r30, r28
    2990:	e0 0f       	add	r30, r16
    2992:	f1 1f       	adc	r31, r17
    2994:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';
    2996:	fe 01       	movw	r30, r28
    2998:	ee 0d       	add	r30, r14
    299a:	ff 1d       	adc	r31, r15
    299c:	86 8f       	std	Z+30, r24	; 0x1e
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    299e:	c6 01       	movw	r24, r12
    29a0:	40 97       	sbiw	r24, 0x10	; 16
    29a2:	80 3f       	cpi	r24, 0xF0	; 240
    29a4:	91 05       	cpc	r25, r1
    29a6:	b8 f4       	brcc	.+46     	; 0x29d6 <main+0x10b6>
	{
		tx_string[cnt+4] = crc[1];
    29a8:	a2 e6       	ldi	r26, 0x62	; 98
    29aa:	b4 e0       	ldi	r27, 0x04	; 4
    29ac:	11 96       	adiw	r26, 0x01	; 1
    29ae:	8c 91       	ld	r24, X
    29b0:	11 97       	sbiw	r26, 0x01	; 1
    29b2:	fe 01       	movw	r30, r28
    29b4:	e0 0f       	add	r30, r16
    29b6:	f1 1f       	adc	r31, r17
    29b8:	82 a3       	std	Z+34, r24	; 0x22
		tx_string[cnt+3] = crc[0];
    29ba:	8c 91       	ld	r24, X
    29bc:	fe 01       	movw	r30, r28
    29be:	e0 0f       	add	r30, r16
    29c0:	f1 1f       	adc	r31, r17
    29c2:	81 a3       	std	Z+33, r24	; 0x21
		tx_string[cnt+2] = '0';
    29c4:	80 e3       	ldi	r24, 0x30	; 48
    29c6:	fe 01       	movw	r30, r28
    29c8:	e0 0f       	add	r30, r16
    29ca:	f1 1f       	adc	r31, r17
    29cc:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';		
    29ce:	fe 01       	movw	r30, r28
    29d0:	ee 0d       	add	r30, r14
    29d2:	ff 1d       	adc	r31, r15
    29d4:	86 8f       	std	Z+30, r24	; 0x1e
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    29d6:	c6 01       	movw	r24, r12
    29d8:	9a 95       	dec	r25
    29da:	81 15       	cp	r24, r1
    29dc:	9f 40       	sbci	r25, 0x0F	; 15
    29de:	b8 f4       	brcc	.+46     	; 0x2a0e <main+0x10ee>
	{
		tx_string[cnt+4] = crc[2];
    29e0:	e2 e6       	ldi	r30, 0x62	; 98
    29e2:	f4 e0       	ldi	r31, 0x04	; 4
    29e4:	82 81       	ldd	r24, Z+2	; 0x02
    29e6:	de 01       	movw	r26, r28
    29e8:	a0 0f       	add	r26, r16
    29ea:	b1 1f       	adc	r27, r17
    29ec:	92 96       	adiw	r26, 0x22	; 34
    29ee:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[1];
    29f0:	81 81       	ldd	r24, Z+1	; 0x01
    29f2:	de 01       	movw	r26, r28
    29f4:	a0 0f       	add	r26, r16
    29f6:	b1 1f       	adc	r27, r17
    29f8:	91 96       	adiw	r26, 0x21	; 33
    29fa:	8c 93       	st	X, r24
    29fc:	91 97       	sbiw	r26, 0x21	; 33
		tx_string[cnt+2] = crc[0];
    29fe:	80 81       	ld	r24, Z
    2a00:	fd 01       	movw	r30, r26
    2a02:	80 a3       	std	Z+32, r24	; 0x20
		tx_string[cnt+1] = '0';		
    2a04:	80 e3       	ldi	r24, 0x30	; 48
    2a06:	fe 01       	movw	r30, r28
    2a08:	ee 0d       	add	r30, r14
    2a0a:	ff 1d       	adc	r31, r15
    2a0c:	86 8f       	std	Z+30, r24	; 0x1e
	}
	if(crcXmodem >= 0x1000)
    2a0e:	c1 14       	cp	r12, r1
    2a10:	b0 e1       	ldi	r27, 0x10	; 16
    2a12:	db 06       	cpc	r13, r27
    2a14:	c0 f0       	brcs	.+48     	; 0x2a46 <main+0x1126>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    2a16:	de 01       	movw	r26, r28
    2a18:	ae 0d       	add	r26, r14
    2a1a:	bf 1d       	adc	r27, r15
    2a1c:	e2 e6       	ldi	r30, 0x62	; 98
    2a1e:	f4 e0       	ldi	r31, 0x04	; 4
    2a20:	80 81       	ld	r24, Z
    2a22:	5e 96       	adiw	r26, 0x1e	; 30
    2a24:	8c 93       	st	X, r24
		tx_string[cnt+2] = crc[1];
    2a26:	81 81       	ldd	r24, Z+1	; 0x01
    2a28:	de 01       	movw	r26, r28
    2a2a:	a0 0f       	add	r26, r16
    2a2c:	b1 1f       	adc	r27, r17
    2a2e:	90 96       	adiw	r26, 0x20	; 32
    2a30:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[2];
    2a32:	82 81       	ldd	r24, Z+2	; 0x02
    2a34:	de 01       	movw	r26, r28
    2a36:	a0 0f       	add	r26, r16
    2a38:	b1 1f       	adc	r27, r17
    2a3a:	91 96       	adiw	r26, 0x21	; 33
    2a3c:	8c 93       	st	X, r24
    2a3e:	91 97       	sbiw	r26, 0x21	; 33
		tx_string[cnt+4] = crc[3];
    2a40:	83 81       	ldd	r24, Z+3	; 0x03
    2a42:	fd 01       	movw	r30, r26
    2a44:	82 a3       	std	Z+34, r24	; 0x22
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    2a46:	c8 01       	movw	r24, r16
    2a48:	05 96       	adiw	r24, 0x05	; 5
    2a4a:	fe 01       	movw	r30, r28
    2a4c:	e8 0f       	add	r30, r24
    2a4e:	f9 1f       	adc	r31, r25
    2a50:	2d e0       	ldi	r18, 0x0D	; 13
    2a52:	26 8f       	std	Z+30, r18	; 0x1e
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    2a54:	99 23       	and	r25, r25
    2a56:	0c f4       	brge	.+2      	; 0x2a5a <main+0x113a>
    2a58:	fa c0       	rjmp	.+500    	; 0x2c4e <main+0x132e>
    2a5a:	fe 01       	movw	r30, r28
    2a5c:	7e 96       	adiw	r30, 0x1e	; 30
    2a5e:	a8 01       	movw	r20, r16
    2a60:	4a 5f       	subi	r20, 0xFA	; 250
    2a62:	5f 4f       	sbci	r21, 0xFF	; 255
    2a64:	4e 0f       	add	r20, r30
    2a66:	5f 1f       	adc	r21, r31
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    2a68:	90 e0       	ldi	r25, 0x00	; 0
	{
		uart_putchar(tx_string[i]);
    2a6a:	21 91       	ld	r18, Z+
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    2a6c:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    2a6e:	d4 01       	movw	r26, r8
    2a70:	11 96       	adiw	r26, 0x01	; 1
    2a72:	3c 91       	ld	r19, X
    2a74:	11 97       	sbiw	r26, 0x01	; 1
    2a76:	8c 91       	ld	r24, X
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    2a78:	38 13       	cpse	r19, r24
    2a7a:	05 c0       	rjmp	.+10     	; 0x2a86 <main+0x1166>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    2a7c:	a1 ec       	ldi	r26, 0xC1	; 193
    2a7e:	b0 e0       	ldi	r27, 0x00	; 0
    2a80:	8c 91       	ld	r24, X
    2a82:	80 62       	ori	r24, 0x20	; 32
    2a84:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    2a86:	d4 01       	movw	r26, r8
    2a88:	8c 91       	ld	r24, X
    2a8a:	13 96       	adiw	r26, 0x03	; 3
    2a8c:	6d 91       	ld	r22, X+
    2a8e:	7c 91       	ld	r23, X
    2a90:	14 97       	sbiw	r26, 0x04	; 4
    2a92:	db 01       	movw	r26, r22
    2a94:	a8 0f       	add	r26, r24
    2a96:	b1 1d       	adc	r27, r1
    2a98:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    2a9a:	d4 01       	movw	r26, r8
    2a9c:	8c 91       	ld	r24, X
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    2a9e:	68 2f       	mov	r22, r24
    2aa0:	70 e0       	ldi	r23, 0x00	; 0
    2aa2:	12 96       	adiw	r26, 0x02	; 2
    2aa4:	2c 91       	ld	r18, X
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	21 50       	subi	r18, 0x01	; 1
    2aaa:	31 09       	sbc	r19, r1
    2aac:	62 17       	cp	r22, r18
    2aae:	73 07       	cpc	r23, r19
    2ab0:	11 f0       	breq	.+4      	; 0x2ab6 <main+0x1196>
    2ab2:	8f 5f       	subi	r24, 0xFF	; 255
    2ab4:	01 c0       	rjmp	.+2      	; 0x2ab8 <main+0x1198>
    2ab6:	89 2f       	mov	r24, r25
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    2ab8:	d4 01       	movw	r26, r8
    2aba:	8c 93       	st	X, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    2abc:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    2abe:	e4 17       	cp	r30, r20
    2ac0:	f5 07       	cpc	r31, r21
    2ac2:	99 f6       	brne	.-90     	; 0x2a6a <main+0x114a>
    2ac4:	c4 c0       	rjmp	.+392    	; 0x2c4e <main+0x132e>
		ftoa(TempSetPoint2, tx_string);
		printStatus(tx_string);
		break;
		
		case 305:	// Send Pgain ch2
		ftoa(Pgain_ch2, tx_string);
    2ac6:	60 91 67 04 	lds	r22, 0x0467
    2aca:	70 91 68 04 	lds	r23, 0x0468
    2ace:	80 91 69 04 	lds	r24, 0x0469
    2ad2:	90 91 6a 04 	lds	r25, 0x046A
    2ad6:	46 2d       	mov	r20, r6
    2ad8:	57 2d       	mov	r21, r7
    2ada:	0e 94 09 0c 	call	0x1812	; 0x1812 <ftoa>
		printStatus(tx_string);
    2ade:	86 2d       	mov	r24, r6
    2ae0:	97 2d       	mov	r25, r7
    2ae2:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2ae6:	b3 c0       	rjmp	.+358    	; 0x2c4e <main+0x132e>
		break;
		
		case 306:	// Send Igain ch2
		ftoa(Igain_ch2, tx_string);
    2ae8:	60 91 6f 04 	lds	r22, 0x046F
    2aec:	70 91 70 04 	lds	r23, 0x0470
    2af0:	80 91 71 04 	lds	r24, 0x0471
    2af4:	90 91 72 04 	lds	r25, 0x0472
    2af8:	46 2d       	mov	r20, r6
    2afa:	57 2d       	mov	r21, r7
    2afc:	0e 94 09 0c 	call	0x1812	; 0x1812 <ftoa>
		printStatus(tx_string);
    2b00:	86 2d       	mov	r24, r6
    2b02:	97 2d       	mov	r25, r7
    2b04:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2b08:	a2 c0       	rjmp	.+324    	; 0x2c4e <main+0x132e>
		break;
		
		case 307:	// Send Dgain ch2
		ftoa(Dgain_ch2, tx_string);
    2b0a:	60 91 a8 04 	lds	r22, 0x04A8
    2b0e:	70 91 a9 04 	lds	r23, 0x04A9
    2b12:	80 91 aa 04 	lds	r24, 0x04AA
    2b16:	90 91 ab 04 	lds	r25, 0x04AB
    2b1a:	46 2d       	mov	r20, r6
    2b1c:	57 2d       	mov	r21, r7
    2b1e:	0e 94 09 0c 	call	0x1812	; 0x1812 <ftoa>
		printStatus(tx_string);
    2b22:	86 2d       	mov	r24, r6
    2b24:	97 2d       	mov	r25, r7
    2b26:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2b2a:	91 c0       	rjmp	.+290    	; 0x2c4e <main+0x132e>
		break;
		
		// *** Channel 3 ***
		case 400:	// Send sensor 3 temperature
		ftoa(TempSensor3, tx_string);
    2b2c:	60 91 a8 01 	lds	r22, 0x01A8
    2b30:	70 91 a9 01 	lds	r23, 0x01A9
    2b34:	80 91 aa 01 	lds	r24, 0x01AA
    2b38:	90 91 ab 01 	lds	r25, 0x01AB
    2b3c:	46 2d       	mov	r20, r6
    2b3e:	57 2d       	mov	r21, r7
    2b40:	0e 94 09 0c 	call	0x1812	; 0x1812 <ftoa>
		printStatus(tx_string);
    2b44:	86 2d       	mov	r24, r6
    2b46:	97 2d       	mov	r25, r7
    2b48:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2b4c:	80 c0       	rjmp	.+256    	; 0x2c4e <main+0x132e>
		break;
		
		case 401:	// Send P part of PID-controller 3
		ftoa(P_ch3, tx_string);
    2b4e:	60 91 56 01 	lds	r22, 0x0156
    2b52:	70 91 57 01 	lds	r23, 0x0157
    2b56:	80 91 58 01 	lds	r24, 0x0158
    2b5a:	90 91 59 01 	lds	r25, 0x0159
    2b5e:	46 2d       	mov	r20, r6
    2b60:	57 2d       	mov	r21, r7
    2b62:	0e 94 09 0c 	call	0x1812	; 0x1812 <ftoa>
		printStatus(tx_string);
    2b66:	86 2d       	mov	r24, r6
    2b68:	97 2d       	mov	r25, r7
    2b6a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2b6e:	6f c0       	rjmp	.+222    	; 0x2c4e <main+0x132e>
		break;
		
		case 402:	// Send I part of PID-controller 3
		ftoa(I_ch3, tx_string);
    2b70:	60 91 52 01 	lds	r22, 0x0152
    2b74:	70 91 53 01 	lds	r23, 0x0153
    2b78:	80 91 54 01 	lds	r24, 0x0154
    2b7c:	90 91 55 01 	lds	r25, 0x0155
    2b80:	46 2d       	mov	r20, r6
    2b82:	57 2d       	mov	r21, r7
    2b84:	0e 94 09 0c 	call	0x1812	; 0x1812 <ftoa>
		printStatus(tx_string);
    2b88:	86 2d       	mov	r24, r6
    2b8a:	97 2d       	mov	r25, r7
    2b8c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2b90:	5e c0       	rjmp	.+188    	; 0x2c4e <main+0x132e>
		break;
		
		case 403:	// Send D part of PID-controller 3
		ftoa(D_ch3, tx_string);
    2b92:	60 91 4e 01 	lds	r22, 0x014E
    2b96:	70 91 4f 01 	lds	r23, 0x014F
    2b9a:	80 91 50 01 	lds	r24, 0x0150
    2b9e:	90 91 51 01 	lds	r25, 0x0151
    2ba2:	46 2d       	mov	r20, r6
    2ba4:	57 2d       	mov	r21, r7
    2ba6:	0e 94 09 0c 	call	0x1812	; 0x1812 <ftoa>
		printStatus(tx_string);
    2baa:	86 2d       	mov	r24, r6
    2bac:	97 2d       	mov	r25, r7
    2bae:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2bb2:	4d c0       	rjmp	.+154    	; 0x2c4e <main+0x132e>
		break;
		
		case 404:	// Send TempSetPoint3
		ftoa(TempSetPoint3, tx_string);
    2bb4:	60 91 5a 01 	lds	r22, 0x015A
    2bb8:	70 91 5b 01 	lds	r23, 0x015B
    2bbc:	80 91 5c 01 	lds	r24, 0x015C
    2bc0:	90 91 5d 01 	lds	r25, 0x015D
    2bc4:	46 2d       	mov	r20, r6
    2bc6:	57 2d       	mov	r21, r7
    2bc8:	0e 94 09 0c 	call	0x1812	; 0x1812 <ftoa>
		printStatus(tx_string);
    2bcc:	86 2d       	mov	r24, r6
    2bce:	97 2d       	mov	r25, r7
    2bd0:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2bd4:	3c c0       	rjmp	.+120    	; 0x2c4e <main+0x132e>
		break;
		
		case 405:	// Send Pgain ch3
		ftoa(Pgain_ch3, tx_string);
    2bd6:	60 91 04 03 	lds	r22, 0x0304
    2bda:	70 91 05 03 	lds	r23, 0x0305
    2bde:	80 91 06 03 	lds	r24, 0x0306
    2be2:	90 91 07 03 	lds	r25, 0x0307
    2be6:	46 2d       	mov	r20, r6
    2be8:	57 2d       	mov	r21, r7
    2bea:	0e 94 09 0c 	call	0x1812	; 0x1812 <ftoa>
		printStatus(tx_string);
    2bee:	86 2d       	mov	r24, r6
    2bf0:	97 2d       	mov	r25, r7
    2bf2:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2bf6:	2b c0       	rjmp	.+86     	; 0x2c4e <main+0x132e>
		break;
		
		case 406:	// Send Igain ch3
		ftoa(Igain_ch3, tx_string);
    2bf8:	60 91 f9 01 	lds	r22, 0x01F9
    2bfc:	70 91 fa 01 	lds	r23, 0x01FA
    2c00:	80 91 fb 01 	lds	r24, 0x01FB
    2c04:	90 91 fc 01 	lds	r25, 0x01FC
    2c08:	46 2d       	mov	r20, r6
    2c0a:	57 2d       	mov	r21, r7
    2c0c:	0e 94 09 0c 	call	0x1812	; 0x1812 <ftoa>
		printStatus(tx_string);
    2c10:	86 2d       	mov	r24, r6
    2c12:	97 2d       	mov	r25, r7
    2c14:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2c18:	1a c0       	rjmp	.+52     	; 0x2c4e <main+0x132e>
		break;
		
		case 407:	// Send Dgain ch3
		ftoa(Dgain_ch3, tx_string);
    2c1a:	60 91 73 04 	lds	r22, 0x0473
    2c1e:	70 91 74 04 	lds	r23, 0x0474
    2c22:	80 91 75 04 	lds	r24, 0x0475
    2c26:	90 91 76 04 	lds	r25, 0x0476
    2c2a:	46 2d       	mov	r20, r6
    2c2c:	57 2d       	mov	r21, r7
    2c2e:	0e 94 09 0c 	call	0x1812	; 0x1812 <ftoa>
		printStatus(tx_string);
    2c32:	86 2d       	mov	r24, r6
    2c34:	97 2d       	mov	r25, r7
    2c36:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2c3a:	09 c0       	rjmp	.+18     	; 0x2c4e <main+0x132e>
		break;						
		
		default:
		printStatus("VRerror");
    2c3c:	8c e2       	ldi	r24, 0x2C	; 44
    2c3e:	91 e0       	ldi	r25, 0x01	; 1
    2c40:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2c44:	04 c0       	rjmp	.+8      	; 0x2c4e <main+0x132e>
						var = atol(requestID);
						ReadParameter(var);
					}
					else
					{
						printStatus("CRC error");
    2c46:	8f e1       	ldi	r24, 0x1F	; 31
    2c48:	91 e0       	ldi	r25, 0x01	; 1
    2c4a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
					}
				}
			}	
			
			pos = NULL;
			pos = strchr(rx_string, '&');
    2c4e:	66 e2       	ldi	r22, 0x26	; 38
    2c50:	70 e0       	ldi	r23, 0x00	; 0
    2c52:	6d 96       	adiw	r28, 0x1d	; 29
    2c54:	8f ad       	ldd	r24, Y+63	; 0x3f
    2c56:	6d 97       	sbiw	r28, 0x1d	; 29
    2c58:	6e 96       	adiw	r28, 0x1e	; 30
    2c5a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2c5c:	6e 97       	sbiw	r28, 0x1e	; 30
    2c5e:	0e 94 39 23 	call	0x4672	; 0x4672 <strchr>
			if(pos != NULL)
    2c62:	00 97       	sbiw	r24, 0x00	; 0
    2c64:	11 f4       	brne	.+4      	; 0x2c6a <main+0x134a>
    2c66:	0c 94 e1 0d 	jmp	0x1bc2	; 0x1bc2 <main+0x2a2>
    2c6a:	fc 01       	movw	r30, r24
			{
				setCmd[0] = *(pos + 1);					// Parse set command
    2c6c:	af e5       	ldi	r26, 0x5F	; 95
    2c6e:	b4 e0       	ldi	r27, 0x04	; 4
    2c70:	81 81       	ldd	r24, Z+1	; 0x01
    2c72:	8c 93       	st	X, r24
				setCmd[1] = *(pos + 2);
    2c74:	82 81       	ldd	r24, Z+2	; 0x02
    2c76:	11 96       	adiw	r26, 0x01	; 1
    2c78:	8c 93       	st	X, r24
    2c7a:	11 97       	sbiw	r26, 0x01	; 1
				requestID[0] = *(pos + 3);				// Parse request ID
    2c7c:	83 81       	ldd	r24, Z+3	; 0x03
    2c7e:	89 83       	std	Y+1, r24	; 0x01
				requestID[1] = *(pos + 4);
    2c80:	84 81       	ldd	r24, Z+4	; 0x04
    2c82:	8a 83       	std	Y+2, r24	; 0x02
				requestID[2] = *(pos + 5);				
    2c84:	85 81       	ldd	r24, Z+5	; 0x05
    2c86:	8b 83       	std	Y+3, r24	; 0x03
				
				if(strcmp(setCmd, "VS") == 0)
    2c88:	64 e3       	ldi	r22, 0x34	; 52
    2c8a:	71 e0       	ldi	r23, 0x01	; 1
    2c8c:	cd 01       	movw	r24, r26
    2c8e:	0e 94 44 23 	call	0x4688	; 0x4688 <strcmp>
    2c92:	89 2b       	or	r24, r25
    2c94:	11 f0       	breq	.+4      	; 0x2c9a <main+0x137a>
    2c96:	0c 94 db 0d 	jmp	0x1bb6	; 0x1bb6 <main+0x296>
				{
					pos = strchr(rx_string, 0x0D);		// Find end of message
    2c9a:	6d e0       	ldi	r22, 0x0D	; 13
    2c9c:	70 e0       	ldi	r23, 0x00	; 0
    2c9e:	c5 01       	movw	r24, r10
    2ca0:	0e 94 39 23 	call	0x4672	; 0x4672 <strchr>
					crc[0] = *(pos - 4);				// Parse incoming crc
    2ca4:	e2 e6       	ldi	r30, 0x62	; 98
    2ca6:	f4 e0       	ldi	r31, 0x04	; 4
    2ca8:	dc 01       	movw	r26, r24
    2caa:	14 97       	sbiw	r26, 0x04	; 4
    2cac:	2c 91       	ld	r18, X
    2cae:	20 83       	st	Z, r18
					crc[1] = *(pos - 3);
    2cb0:	11 96       	adiw	r26, 0x01	; 1
    2cb2:	2c 91       	ld	r18, X
    2cb4:	21 83       	std	Z+1, r18	; 0x01
					crc[2] = *(pos - 2);
    2cb6:	11 96       	adiw	r26, 0x01	; 1
    2cb8:	2c 91       	ld	r18, X
    2cba:	22 83       	std	Z+2, r18	; 0x02
					crc[3] = *(pos - 1);
    2cbc:	11 96       	adiw	r26, 0x01	; 1
    2cbe:	8c 91       	ld	r24, X
    2cc0:	83 83       	std	Z+3, r24	; 0x03
					
					itoa(GenCrc16(rx_string, (int)strnlen(rx_string, rx_size)-5), inCrC_string, 16);
    2cc2:	6e e1       	ldi	r22, 0x1E	; 30
    2cc4:	70 e0       	ldi	r23, 0x00	; 0
    2cc6:	c5 01       	movw	r24, r10
    2cc8:	0e 94 4d 23 	call	0x469a	; 0x469a <strnlen>
    2ccc:	bc 01       	movw	r22, r24
    2cce:	65 50       	subi	r22, 0x05	; 5
    2cd0:	71 09       	sbc	r23, r1
    2cd2:	c5 01       	movw	r24, r10
    2cd4:	0e 94 2d 02 	call	0x45a	; 0x45a <GenCrc16>
    2cd8:	40 e1       	ldi	r20, 0x10	; 16
    2cda:	be 01       	movw	r22, r28
    2cdc:	67 5e       	subi	r22, 0xE7	; 231
    2cde:	7f 4f       	sbci	r23, 0xFF	; 255
    2ce0:	0e 94 62 23 	call	0x46c4	; 0x46c4 <__itoa_ncheck>
					if(CrcCompare(crc, inCrC_string) == true)
    2ce4:	be 01       	movw	r22, r28
    2ce6:	67 5e       	subi	r22, 0xE7	; 231
    2ce8:	7f 4f       	sbci	r23, 0xFF	; 255
    2cea:	82 e6       	ldi	r24, 0x62	; 98
    2cec:	94 e0       	ldi	r25, 0x04	; 4
    2cee:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <CrcCompare>
    2cf2:	88 23       	and	r24, r24
    2cf4:	11 f4       	brne	.+4      	; 0x2cfa <main+0x13da>
    2cf6:	0c 94 bc 20 	jmp	0x4178	; 0x4178 <main+0x2858>
					{
						var = atol(requestID);
						SetParameter(atol(requestID));
    2cfa:	ce 01       	movw	r24, r28
    2cfc:	01 96       	adiw	r24, 0x01	; 1
    2cfe:	0e 94 08 23 	call	0x4610	; 0x4610 <atol>

static inline void SetParameter(int id)
{
	char param[20];
	
	switch(id)
    2d02:	6e 35       	cpi	r22, 0x5E	; 94
    2d04:	b1 e0       	ldi	r27, 0x01	; 1
    2d06:	7b 07       	cpc	r23, r27
    2d08:	09 f4       	brne	.+2      	; 0x2d0c <main+0x13ec>
    2d0a:	01 c5       	rjmp	.+2562   	; 0x370e <main+0x1dee>
    2d0c:	9c f5       	brge	.+102    	; 0x2d74 <main+0x1454>
    2d0e:	6a 39       	cpi	r22, 0x9A	; 154
    2d10:	71 05       	cpc	r23, r1
    2d12:	09 f4       	brne	.+2      	; 0x2d16 <main+0x13f6>
    2d14:	54 c2       	rjmp	.+1192   	; 0x31be <main+0x189e>
    2d16:	ac f4       	brge	.+42     	; 0x2d42 <main+0x1422>
    2d18:	67 39       	cpi	r22, 0x97	; 151
    2d1a:	71 05       	cpc	r23, r1
    2d1c:	09 f4       	brne	.+2      	; 0x2d20 <main+0x1400>
    2d1e:	87 c0       	rjmp	.+270    	; 0x2e2e <main+0x150e>
    2d20:	34 f4       	brge	.+12     	; 0x2d2e <main+0x140e>
    2d22:	66 39       	cpi	r22, 0x96	; 150
    2d24:	71 05       	cpc	r23, r1
    2d26:	09 f4       	brne	.+2      	; 0x2d2a <main+0x140a>
    2d28:	59 c0       	rjmp	.+178    	; 0x2ddc <main+0x14bc>
    2d2a:	0c 94 0c 20 	jmp	0x4018	; 0x4018 <main+0x26f8>
    2d2e:	68 39       	cpi	r22, 0x98	; 152
    2d30:	71 05       	cpc	r23, r1
    2d32:	09 f4       	brne	.+2      	; 0x2d36 <main+0x1416>
    2d34:	a5 c0       	rjmp	.+330    	; 0x2e80 <main+0x1560>
    2d36:	69 39       	cpi	r22, 0x99	; 153
    2d38:	71 05       	cpc	r23, r1
    2d3a:	09 f4       	brne	.+2      	; 0x2d3e <main+0x141e>
    2d3c:	73 c1       	rjmp	.+742    	; 0x3024 <main+0x1704>
    2d3e:	0c 94 0c 20 	jmp	0x4018	; 0x4018 <main+0x26f8>
    2d42:	6c 3f       	cpi	r22, 0xFC	; 252
    2d44:	71 05       	cpc	r23, r1
    2d46:	09 f4       	brne	.+2      	; 0x2d4a <main+0x142a>
    2d48:	99 c4       	rjmp	.+2354   	; 0x367c <main+0x1d5c>
    2d4a:	54 f4       	brge	.+20     	; 0x2d60 <main+0x1440>
    2d4c:	6a 3f       	cpi	r22, 0xFA	; 250
    2d4e:	71 05       	cpc	r23, r1
    2d50:	09 f4       	brne	.+2      	; 0x2d54 <main+0x1434>
    2d52:	9f c3       	rjmp	.+1854   	; 0x3492 <main+0x1b72>
    2d54:	6b 3f       	cpi	r22, 0xFB	; 251
    2d56:	71 05       	cpc	r23, r1
    2d58:	09 f4       	brne	.+2      	; 0x2d5c <main+0x143c>
    2d5a:	68 c4       	rjmp	.+2256   	; 0x362c <main+0x1d0c>
    2d5c:	0c 94 0c 20 	jmp	0x4018	; 0x4018 <main+0x26f8>
    2d60:	6d 3f       	cpi	r22, 0xFD	; 253
    2d62:	71 05       	cpc	r23, r1
    2d64:	09 f4       	brne	.+2      	; 0x2d68 <main+0x1448>
    2d66:	a2 c4       	rjmp	.+2372   	; 0x36ac <main+0x1d8c>
    2d68:	6e 3f       	cpi	r22, 0xFE	; 254
    2d6a:	71 05       	cpc	r23, r1
    2d6c:	09 f4       	brne	.+2      	; 0x2d70 <main+0x1450>
    2d6e:	b6 c4       	rjmp	.+2412   	; 0x36dc <main+0x1dbc>
    2d70:	0c 94 0c 20 	jmp	0x4018	; 0x4018 <main+0x26f8>
    2d74:	62 3c       	cpi	r22, 0xC2	; 194
    2d76:	f1 e0       	ldi	r31, 0x01	; 1
    2d78:	7f 07       	cpc	r23, r31
    2d7a:	09 f4       	brne	.+2      	; 0x2d7e <main+0x145e>
    2d7c:	7e c5       	rjmp	.+2812   	; 0x387a <main+0x1f5a>
    2d7e:	94 f4       	brge	.+36     	; 0x2da4 <main+0x1484>
    2d80:	60 36       	cpi	r22, 0x60	; 96
    2d82:	31 e0       	ldi	r19, 0x01	; 1
    2d84:	73 07       	cpc	r23, r19
    2d86:	09 f4       	brne	.+2      	; 0x2d8a <main+0x146a>
    2d88:	10 c5       	rjmp	.+2592   	; 0x37aa <main+0x1e8a>
    2d8a:	0c f4       	brge	.+2      	; 0x2d8e <main+0x146e>
    2d8c:	e7 c4       	rjmp	.+2510   	; 0x375c <main+0x1e3c>
    2d8e:	61 36       	cpi	r22, 0x61	; 97
    2d90:	b1 e0       	ldi	r27, 0x01	; 1
    2d92:	7b 07       	cpc	r23, r27
    2d94:	09 f4       	brne	.+2      	; 0x2d98 <main+0x1478>
    2d96:	30 c5       	rjmp	.+2656   	; 0x37f8 <main+0x1ed8>
    2d98:	62 36       	cpi	r22, 0x62	; 98
    2d9a:	71 40       	sbci	r23, 0x01	; 1
    2d9c:	09 f4       	brne	.+2      	; 0x2da0 <main+0x1480>
    2d9e:	53 c5       	rjmp	.+2726   	; 0x3846 <main+0x1f26>
    2da0:	0c 94 0c 20 	jmp	0x4018	; 0x4018 <main+0x26f8>
    2da4:	65 3c       	cpi	r22, 0xC5	; 197
    2da6:	f1 e0       	ldi	r31, 0x01	; 1
    2da8:	7f 07       	cpc	r23, r31
    2daa:	09 f4       	brne	.+2      	; 0x2dae <main+0x148e>
    2dac:	ae c5       	rjmp	.+2908   	; 0x390a <main+0x1fea>
    2dae:	5c f4       	brge	.+22     	; 0x2dc6 <main+0x14a6>
    2db0:	63 3c       	cpi	r22, 0xC3	; 195
    2db2:	31 e0       	ldi	r19, 0x01	; 1
    2db4:	73 07       	cpc	r23, r19
    2db6:	09 f4       	brne	.+2      	; 0x2dba <main+0x149a>
    2db8:	78 c5       	rjmp	.+2800   	; 0x38aa <main+0x1f8a>
    2dba:	64 3c       	cpi	r22, 0xC4	; 196
    2dbc:	71 40       	sbci	r23, 0x01	; 1
    2dbe:	09 f4       	brne	.+2      	; 0x2dc2 <main+0x14a2>
    2dc0:	8c c5       	rjmp	.+2840   	; 0x38da <main+0x1fba>
    2dc2:	0c 94 0c 20 	jmp	0x4018	; 0x4018 <main+0x26f8>
    2dc6:	66 3c       	cpi	r22, 0xC6	; 198
    2dc8:	b1 e0       	ldi	r27, 0x01	; 1
    2dca:	7b 07       	cpc	r23, r27
    2dcc:	09 f4       	brne	.+2      	; 0x2dd0 <main+0x14b0>
    2dce:	66 c6       	rjmp	.+3276   	; 0x3a9c <main+0x217c>
    2dd0:	64 3f       	cpi	r22, 0xF4	; 244
    2dd2:	71 40       	sbci	r23, 0x01	; 1
    2dd4:	09 f4       	brne	.+2      	; 0x2dd8 <main+0x14b8>
    2dd6:	c8 c7       	rjmp	.+3984   	; 0x3d68 <main+0x2448>
    2dd8:	0c 94 0c 20 	jmp	0x4018	; 0x4018 <main+0x26f8>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    2ddc:	6e e1       	ldi	r22, 0x1E	; 30
    2dde:	70 e0       	ldi	r23, 0x00	; 0
    2de0:	c5 01       	movw	r24, r10
    2de2:	0e 94 4d 23 	call	0x469a	; 0x469a <strnlen>
    2de6:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    2de8:	8b 30       	cpi	r24, 0x0B	; 11
    2dea:	91 05       	cpc	r25, r1
    2dec:	6c f0       	brlt	.+26     	; 0x2e08 <main+0x14e8>
    2dee:	ee eb       	ldi	r30, 0xBE	; 190
    2df0:	f4 e0       	ldi	r31, 0x04	; 4
    2df2:	de 01       	movw	r26, r28
    2df4:	aa 5b       	subi	r26, 0xBA	; 186
    2df6:	bf 4f       	sbci	r27, 0xFF	; 255
    2df8:	8c 54       	subi	r24, 0x4C	; 76
    2dfa:	9b 4f       	sbci	r25, 0xFB	; 251
    2dfc:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    2dfe:	91 91       	ld	r25, Z+
    2e00:	9d 93       	st	X+, r25
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    2e02:	e2 17       	cp	r30, r18
    2e04:	f3 07       	cpc	r31, r19
    2e06:	d9 f7       	brne	.-10     	; 0x2dfe <main+0x14de>
	switch(id)
	{
		// *** Channel 0 ***
		case 150:	// TempSetPoint0
		ParamParse(rx_string, param);
		TempSetPoint0 = atof(param);
    2e08:	ce 01       	movw	r24, r28
    2e0a:	8a 5b       	subi	r24, 0xBA	; 186
    2e0c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e0e:	0e 94 05 23 	call	0x460a	; 0x460a <atof>
    2e12:	60 93 a2 01 	sts	0x01A2, r22
    2e16:	70 93 a3 01 	sts	0x01A3, r23
    2e1a:	80 93 a4 01 	sts	0x01A4, r24
    2e1e:	90 93 a5 01 	sts	0x01A5, r25
		printStatus("");
    2e22:	8d e3       	ldi	r24, 0x3D	; 61
    2e24:	91 e0       	ldi	r25, 0x01	; 1
    2e26:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2e2a:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <main+0x286>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    2e2e:	6e e1       	ldi	r22, 0x1E	; 30
    2e30:	70 e0       	ldi	r23, 0x00	; 0
    2e32:	c5 01       	movw	r24, r10
    2e34:	0e 94 4d 23 	call	0x469a	; 0x469a <strnlen>
    2e38:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    2e3a:	8b 30       	cpi	r24, 0x0B	; 11
    2e3c:	91 05       	cpc	r25, r1
    2e3e:	6c f0       	brlt	.+26     	; 0x2e5a <main+0x153a>
    2e40:	ee eb       	ldi	r30, 0xBE	; 190
    2e42:	f4 e0       	ldi	r31, 0x04	; 4
    2e44:	de 01       	movw	r26, r28
    2e46:	aa 5b       	subi	r26, 0xBA	; 186
    2e48:	bf 4f       	sbci	r27, 0xFF	; 255
    2e4a:	8c 54       	subi	r24, 0x4C	; 76
    2e4c:	9b 4f       	sbci	r25, 0xFB	; 251
    2e4e:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    2e50:	91 91       	ld	r25, Z+
    2e52:	9d 93       	st	X+, r25
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    2e54:	e2 17       	cp	r30, r18
    2e56:	f3 07       	cpc	r31, r19
    2e58:	d9 f7       	brne	.-10     	; 0x2e50 <main+0x1530>
		printStatus("");
		break;
		
		case 151:	// SetPgainCh0
		ParamParse(rx_string, param);
		Pgain_ch0 = atof(param);
    2e5a:	ce 01       	movw	r24, r28
    2e5c:	8a 5b       	subi	r24, 0xBA	; 186
    2e5e:	9f 4f       	sbci	r25, 0xFF	; 255
    2e60:	0e 94 05 23 	call	0x460a	; 0x460a <atof>
    2e64:	60 93 00 03 	sts	0x0300, r22
    2e68:	70 93 01 03 	sts	0x0301, r23
    2e6c:	80 93 02 03 	sts	0x0302, r24
    2e70:	90 93 03 03 	sts	0x0303, r25
		printStatus("");
    2e74:	8d e3       	ldi	r24, 0x3D	; 61
    2e76:	91 e0       	ldi	r25, 0x01	; 1
    2e78:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    2e7c:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <main+0x286>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    2e80:	6e e1       	ldi	r22, 0x1E	; 30
    2e82:	70 e0       	ldi	r23, 0x00	; 0
    2e84:	c5 01       	movw	r24, r10
    2e86:	0e 94 4d 23 	call	0x469a	; 0x469a <strnlen>
    2e8a:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    2e8c:	8b 30       	cpi	r24, 0x0B	; 11
    2e8e:	91 05       	cpc	r25, r1
    2e90:	6c f0       	brlt	.+26     	; 0x2eac <main+0x158c>
    2e92:	ee eb       	ldi	r30, 0xBE	; 190
    2e94:	f4 e0       	ldi	r31, 0x04	; 4
    2e96:	de 01       	movw	r26, r28
    2e98:	aa 5b       	subi	r26, 0xBA	; 186
    2e9a:	bf 4f       	sbci	r27, 0xFF	; 255
    2e9c:	8c 54       	subi	r24, 0x4C	; 76
    2e9e:	9b 4f       	sbci	r25, 0xFB	; 251
    2ea0:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    2ea2:	91 91       	ld	r25, Z+
    2ea4:	9d 93       	st	X+, r25
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    2ea6:	e2 17       	cp	r30, r18
    2ea8:	f3 07       	cpc	r31, r19
    2eaa:	d9 f7       	brne	.-10     	; 0x2ea2 <main+0x1582>
		printStatus("");
		break;
		
		case 152:	// SetIgainCh0
		ParamParse(rx_string, param);
		Igain_ch0 = atof(param);
    2eac:	ce 01       	movw	r24, r28
    2eae:	8a 5b       	subi	r24, 0xBA	; 186
    2eb0:	9f 4f       	sbci	r25, 0xFF	; 255
    2eb2:	0e 94 05 23 	call	0x460a	; 0x460a <atof>
    2eb6:	60 93 b0 04 	sts	0x04B0, r22
    2eba:	70 93 b1 04 	sts	0x04B1, r23
    2ebe:	80 93 b2 04 	sts	0x04B2, r24
    2ec2:	90 93 b3 04 	sts	0x04B3, r25
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    2ec6:	81 e2       	ldi	r24, 0x21	; 33
    2ec8:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    2eca:	d5 01       	movw	r26, r10
    2ecc:	11 96       	adiw	r26, 0x01	; 1
    2ece:	8c 91       	ld	r24, X
    2ed0:	11 97       	sbiw	r26, 0x01	; 1
    2ed2:	8f 8f       	std	Y+31, r24	; 0x1f
    2ed4:	12 96       	adiw	r26, 0x02	; 2
    2ed6:	8c 91       	ld	r24, X
    2ed8:	12 97       	sbiw	r26, 0x02	; 2
    2eda:	88 a3       	std	Y+32, r24	; 0x20
    2edc:	13 96       	adiw	r26, 0x03	; 3
    2ede:	8c 91       	ld	r24, X
    2ee0:	89 a3       	std	Y+33, r24	; 0x21
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    2ee2:	1a a2       	std	Y+34, r1	; 0x22
    2ee4:	1b a2       	std	Y+35, r1	; 0x23
    2ee6:	1c a2       	std	Y+36, r1	; 0x24
    2ee8:	8e 01       	movw	r16, r28
    2eea:	02 5e       	subi	r16, 0xE2	; 226
    2eec:	1f 4f       	sbci	r17, 0xFF	; 255
    2eee:	ae 01       	movw	r20, r28
    2ef0:	4e 5d       	subi	r20, 0xDE	; 222
    2ef2:	5f 4f       	sbci	r21, 0xFF	; 255
    2ef4:	f8 01       	movw	r30, r16
    2ef6:	80 e0       	ldi	r24, 0x00	; 0
    2ef8:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    2efa:	b8 e0       	ldi	r27, 0x08	; 8
    2efc:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    2efe:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    2f00:	29 2f       	mov	r18, r25
    2f02:	33 27       	eor	r19, r19
    2f04:	27 fd       	sbrc	r18, 7
    2f06:	3a 95       	dec	r19
    2f08:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
    2f0a:	32 2f       	mov	r19, r18
    2f0c:	22 27       	eor	r18, r18
    2f0e:	6b 2f       	mov	r22, r27
    2f10:	7f 2d       	mov	r23, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    2f12:	33 23       	and	r19, r19
    2f14:	3c f4       	brge	.+14     	; 0x2f24 <main+0x1604>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    2f16:	22 0f       	add	r18, r18
    2f18:	33 1f       	adc	r19, r19
    2f1a:	a1 e2       	ldi	r26, 0x21	; 33
    2f1c:	2a 27       	eor	r18, r26
    2f1e:	a0 e1       	ldi	r26, 0x10	; 16
    2f20:	3a 27       	eor	r19, r26
    2f22:	02 c0       	rjmp	.+4      	; 0x2f28 <main+0x1608>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    2f24:	22 0f       	add	r18, r18
    2f26:	33 1f       	adc	r19, r19
    2f28:	61 50       	subi	r22, 0x01	; 1
    2f2a:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    2f2c:	91 f7       	brne	.-28     	; 0x2f12 <main+0x15f2>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    2f2e:	98 2f       	mov	r25, r24
    2f30:	88 27       	eor	r24, r24
    2f32:	82 27       	eor	r24, r18
    2f34:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    2f36:	e4 17       	cp	r30, r20
    2f38:	f5 07       	cpc	r31, r21
    2f3a:	09 f7       	brne	.-62     	; 0x2efe <main+0x15de>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    2f3c:	7c 01       	movw	r14, r24
    2f3e:	40 e1       	ldi	r20, 0x10	; 16
    2f40:	62 e6       	ldi	r22, 0x62	; 98
    2f42:	74 e0       	ldi	r23, 0x04	; 4
    2f44:	0e 94 62 23 	call	0x46c4	; 0x46c4 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    2f48:	82 e6       	ldi	r24, 0x62	; 98
    2f4a:	94 e0       	ldi	r25, 0x04	; 4
    2f4c:	0e 94 58 23 	call	0x46b0	; 0x46b0 <strupr>
	if(crcXmodem < 0x10)
    2f50:	b0 e1       	ldi	r27, 0x10	; 16
    2f52:	eb 16       	cp	r14, r27
    2f54:	f1 04       	cpc	r15, r1
    2f56:	38 f4       	brcc	.+14     	; 0x2f66 <main+0x1646>
	{
		tx_string[cnt+4] = crc[0];
    2f58:	80 91 62 04 	lds	r24, 0x0462
    2f5c:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = '0';
    2f5e:	80 e3       	ldi	r24, 0x30	; 48
    2f60:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = '0';
    2f62:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';
    2f64:	8a a3       	std	Y+34, r24	; 0x22
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    2f66:	c7 01       	movw	r24, r14
    2f68:	40 97       	sbiw	r24, 0x10	; 16
    2f6a:	80 3f       	cpi	r24, 0xF0	; 240
    2f6c:	91 05       	cpc	r25, r1
    2f6e:	48 f4       	brcc	.+18     	; 0x2f82 <main+0x1662>
	{
		tx_string[cnt+4] = crc[1];
    2f70:	e2 e6       	ldi	r30, 0x62	; 98
    2f72:	f4 e0       	ldi	r31, 0x04	; 4
    2f74:	81 81       	ldd	r24, Z+1	; 0x01
    2f76:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[0];
    2f78:	80 81       	ld	r24, Z
    2f7a:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = '0';
    2f7c:	80 e3       	ldi	r24, 0x30	; 48
    2f7e:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';		
    2f80:	8a a3       	std	Y+34, r24	; 0x22
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    2f82:	c7 01       	movw	r24, r14
    2f84:	9a 95       	dec	r25
    2f86:	81 15       	cp	r24, r1
    2f88:	9f 40       	sbci	r25, 0x0F	; 15
    2f8a:	50 f4       	brcc	.+20     	; 0x2fa0 <main+0x1680>
	{
		tx_string[cnt+4] = crc[2];
    2f8c:	e2 e6       	ldi	r30, 0x62	; 98
    2f8e:	f4 e0       	ldi	r31, 0x04	; 4
    2f90:	82 81       	ldd	r24, Z+2	; 0x02
    2f92:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[1];
    2f94:	81 81       	ldd	r24, Z+1	; 0x01
    2f96:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = crc[0];
    2f98:	80 81       	ld	r24, Z
    2f9a:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';		
    2f9c:	80 e3       	ldi	r24, 0x30	; 48
    2f9e:	8a a3       	std	Y+34, r24	; 0x22
	}
	if(crcXmodem >= 0x1000)
    2fa0:	e1 14       	cp	r14, r1
    2fa2:	f0 e1       	ldi	r31, 0x10	; 16
    2fa4:	ff 06       	cpc	r15, r31
    2fa6:	50 f0       	brcs	.+20     	; 0x2fbc <main+0x169c>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    2fa8:	e2 e6       	ldi	r30, 0x62	; 98
    2faa:	f4 e0       	ldi	r31, 0x04	; 4
    2fac:	80 81       	ld	r24, Z
    2fae:	8a a3       	std	Y+34, r24	; 0x22
		tx_string[cnt+2] = crc[1];
    2fb0:	81 81       	ldd	r24, Z+1	; 0x01
    2fb2:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+3] = crc[2];
    2fb4:	82 81       	ldd	r24, Z+2	; 0x02
    2fb6:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+4] = crc[3];
    2fb8:	83 81       	ldd	r24, Z+3	; 0x03
    2fba:	8d a3       	std	Y+37, r24	; 0x25
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    2fbc:	8d e0       	ldi	r24, 0x0D	; 13
    2fbe:	8e a3       	std	Y+38, r24	; 0x26
    2fc0:	ae 01       	movw	r20, r28
    2fc2:	49 5d       	subi	r20, 0xD9	; 217
    2fc4:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    2fc6:	e2 ed       	ldi	r30, 0xD2	; 210
    2fc8:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    2fca:	0f 2e       	mov	r0, r31
    2fcc:	f1 ec       	ldi	r31, 0xC1	; 193
    2fce:	cf 2e       	mov	r12, r31
    2fd0:	d1 2c       	mov	r13, r1
    2fd2:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    2fd4:	f1 2c       	mov	r15, r1
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    2fd6:	d8 01       	movw	r26, r16
    2fd8:	2d 91       	ld	r18, X+
    2fda:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    2fdc:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    2fde:	91 81       	ldd	r25, Z+1	; 0x01
    2fe0:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    2fe2:	98 13       	cpse	r25, r24
    2fe4:	04 c0       	rjmp	.+8      	; 0x2fee <main+0x16ce>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    2fe6:	d6 01       	movw	r26, r12
    2fe8:	8c 91       	ld	r24, X
    2fea:	80 62       	ori	r24, 0x20	; 32
    2fec:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    2fee:	30 81       	ld	r19, Z
    2ff0:	83 81       	ldd	r24, Z+3	; 0x03
    2ff2:	94 81       	ldd	r25, Z+4	; 0x04
    2ff4:	83 0f       	add	r24, r19
    2ff6:	91 1d       	adc	r25, r1
    2ff8:	dc 01       	movw	r26, r24
    2ffa:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    2ffc:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    2ffe:	68 2f       	mov	r22, r24
    3000:	70 e0       	ldi	r23, 0x00	; 0
    3002:	22 81       	ldd	r18, Z+2	; 0x02
    3004:	30 e0       	ldi	r19, 0x00	; 0
    3006:	21 50       	subi	r18, 0x01	; 1
    3008:	31 09       	sbc	r19, r1
    300a:	62 17       	cp	r22, r18
    300c:	73 07       	cpc	r23, r19
    300e:	11 f0       	breq	.+4      	; 0x3014 <main+0x16f4>
    3010:	8f 5f       	subi	r24, 0xFF	; 255
    3012:	01 c0       	rjmp	.+2      	; 0x3016 <main+0x16f6>
    3014:	8f 2d       	mov	r24, r15
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    3016:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    3018:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    301a:	04 17       	cp	r16, r20
    301c:	15 07       	cpc	r17, r21
    301e:	d9 f6       	brne	.-74     	; 0x2fd6 <main+0x16b6>
    3020:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <main+0x286>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    3024:	6e e1       	ldi	r22, 0x1E	; 30
    3026:	70 e0       	ldi	r23, 0x00	; 0
    3028:	c5 01       	movw	r24, r10
    302a:	0e 94 4d 23 	call	0x469a	; 0x469a <strnlen>
    302e:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    3030:	8b 30       	cpi	r24, 0x0B	; 11
    3032:	91 05       	cpc	r25, r1
    3034:	6c f0       	brlt	.+26     	; 0x3050 <main+0x1730>
    3036:	ee eb       	ldi	r30, 0xBE	; 190
    3038:	f4 e0       	ldi	r31, 0x04	; 4
    303a:	de 01       	movw	r26, r28
    303c:	aa 5b       	subi	r26, 0xBA	; 186
    303e:	bf 4f       	sbci	r27, 0xFF	; 255
    3040:	8c 54       	subi	r24, 0x4C	; 76
    3042:	9b 4f       	sbci	r25, 0xFB	; 251
    3044:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    3046:	91 91       	ld	r25, Z+
    3048:	9d 93       	st	X+, r25
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    304a:	e2 17       	cp	r30, r18
    304c:	f3 07       	cpc	r31, r19
    304e:	d9 f7       	brne	.-10     	; 0x3046 <main+0x1726>
		printStatus("");
		break;
		
		case 153:	// SetDgain_ch0
		ParamParse(rx_string, param);
		Dgain_ch0 = atof(param);
    3050:	ce 01       	movw	r24, r28
    3052:	8a 5b       	subi	r24, 0xBA	; 186
    3054:	9f 4f       	sbci	r25, 0xFF	; 255
    3056:	0e 94 05 23 	call	0x460a	; 0x460a <atof>
    305a:	60 93 fd 01 	sts	0x01FD, r22
    305e:	70 93 fe 01 	sts	0x01FE, r23
    3062:	80 93 ff 01 	sts	0x01FF, r24
    3066:	90 93 00 02 	sts	0x0200, r25
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    306a:	81 e2       	ldi	r24, 0x21	; 33
    306c:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    306e:	f5 01       	movw	r30, r10
    3070:	81 81       	ldd	r24, Z+1	; 0x01
    3072:	8f 8f       	std	Y+31, r24	; 0x1f
    3074:	82 81       	ldd	r24, Z+2	; 0x02
    3076:	88 a3       	std	Y+32, r24	; 0x20
    3078:	83 81       	ldd	r24, Z+3	; 0x03
    307a:	89 a3       	std	Y+33, r24	; 0x21
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    307c:	1a a2       	std	Y+34, r1	; 0x22
    307e:	1b a2       	std	Y+35, r1	; 0x23
    3080:	1c a2       	std	Y+36, r1	; 0x24
    3082:	8e 01       	movw	r16, r28
    3084:	02 5e       	subi	r16, 0xE2	; 226
    3086:	1f 4f       	sbci	r17, 0xFF	; 255
    3088:	ae 01       	movw	r20, r28
    308a:	4e 5d       	subi	r20, 0xDE	; 222
    308c:	5f 4f       	sbci	r21, 0xFF	; 255
    308e:	f8 01       	movw	r30, r16
    3090:	80 e0       	ldi	r24, 0x00	; 0
    3092:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    3094:	b8 e0       	ldi	r27, 0x08	; 8
    3096:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    3098:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    309a:	29 2f       	mov	r18, r25
    309c:	33 27       	eor	r19, r19
    309e:	27 fd       	sbrc	r18, 7
    30a0:	3a 95       	dec	r19
    30a2:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
    30a4:	32 2f       	mov	r19, r18
    30a6:	22 27       	eor	r18, r18
    30a8:	6b 2f       	mov	r22, r27
    30aa:	7f 2d       	mov	r23, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    30ac:	33 23       	and	r19, r19
    30ae:	3c f4       	brge	.+14     	; 0x30be <main+0x179e>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    30b0:	22 0f       	add	r18, r18
    30b2:	33 1f       	adc	r19, r19
    30b4:	a1 e2       	ldi	r26, 0x21	; 33
    30b6:	2a 27       	eor	r18, r26
    30b8:	a0 e1       	ldi	r26, 0x10	; 16
    30ba:	3a 27       	eor	r19, r26
    30bc:	02 c0       	rjmp	.+4      	; 0x30c2 <main+0x17a2>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    30be:	22 0f       	add	r18, r18
    30c0:	33 1f       	adc	r19, r19
    30c2:	61 50       	subi	r22, 0x01	; 1
    30c4:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    30c6:	91 f7       	brne	.-28     	; 0x30ac <main+0x178c>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    30c8:	98 2f       	mov	r25, r24
    30ca:	88 27       	eor	r24, r24
    30cc:	82 27       	eor	r24, r18
    30ce:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    30d0:	e4 17       	cp	r30, r20
    30d2:	f5 07       	cpc	r31, r21
    30d4:	09 f7       	brne	.-62     	; 0x3098 <main+0x1778>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    30d6:	7c 01       	movw	r14, r24
    30d8:	40 e1       	ldi	r20, 0x10	; 16
    30da:	62 e6       	ldi	r22, 0x62	; 98
    30dc:	74 e0       	ldi	r23, 0x04	; 4
    30de:	0e 94 62 23 	call	0x46c4	; 0x46c4 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    30e2:	82 e6       	ldi	r24, 0x62	; 98
    30e4:	94 e0       	ldi	r25, 0x04	; 4
    30e6:	0e 94 58 23 	call	0x46b0	; 0x46b0 <strupr>
	if(crcXmodem < 0x10)
    30ea:	b0 e1       	ldi	r27, 0x10	; 16
    30ec:	eb 16       	cp	r14, r27
    30ee:	f1 04       	cpc	r15, r1
    30f0:	38 f4       	brcc	.+14     	; 0x3100 <main+0x17e0>
	{
		tx_string[cnt+4] = crc[0];
    30f2:	80 91 62 04 	lds	r24, 0x0462
    30f6:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = '0';
    30f8:	80 e3       	ldi	r24, 0x30	; 48
    30fa:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = '0';
    30fc:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';
    30fe:	8a a3       	std	Y+34, r24	; 0x22
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    3100:	c7 01       	movw	r24, r14
    3102:	40 97       	sbiw	r24, 0x10	; 16
    3104:	80 3f       	cpi	r24, 0xF0	; 240
    3106:	91 05       	cpc	r25, r1
    3108:	48 f4       	brcc	.+18     	; 0x311c <main+0x17fc>
	{
		tx_string[cnt+4] = crc[1];
    310a:	e2 e6       	ldi	r30, 0x62	; 98
    310c:	f4 e0       	ldi	r31, 0x04	; 4
    310e:	81 81       	ldd	r24, Z+1	; 0x01
    3110:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[0];
    3112:	80 81       	ld	r24, Z
    3114:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = '0';
    3116:	80 e3       	ldi	r24, 0x30	; 48
    3118:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';		
    311a:	8a a3       	std	Y+34, r24	; 0x22
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    311c:	c7 01       	movw	r24, r14
    311e:	9a 95       	dec	r25
    3120:	81 15       	cp	r24, r1
    3122:	9f 40       	sbci	r25, 0x0F	; 15
    3124:	50 f4       	brcc	.+20     	; 0x313a <main+0x181a>
	{
		tx_string[cnt+4] = crc[2];
    3126:	e2 e6       	ldi	r30, 0x62	; 98
    3128:	f4 e0       	ldi	r31, 0x04	; 4
    312a:	82 81       	ldd	r24, Z+2	; 0x02
    312c:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[1];
    312e:	81 81       	ldd	r24, Z+1	; 0x01
    3130:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = crc[0];
    3132:	80 81       	ld	r24, Z
    3134:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';		
    3136:	80 e3       	ldi	r24, 0x30	; 48
    3138:	8a a3       	std	Y+34, r24	; 0x22
	}
	if(crcXmodem >= 0x1000)
    313a:	e1 14       	cp	r14, r1
    313c:	f0 e1       	ldi	r31, 0x10	; 16
    313e:	ff 06       	cpc	r15, r31
    3140:	50 f0       	brcs	.+20     	; 0x3156 <main+0x1836>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    3142:	e2 e6       	ldi	r30, 0x62	; 98
    3144:	f4 e0       	ldi	r31, 0x04	; 4
    3146:	80 81       	ld	r24, Z
    3148:	8a a3       	std	Y+34, r24	; 0x22
		tx_string[cnt+2] = crc[1];
    314a:	81 81       	ldd	r24, Z+1	; 0x01
    314c:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+3] = crc[2];
    314e:	82 81       	ldd	r24, Z+2	; 0x02
    3150:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+4] = crc[3];
    3152:	83 81       	ldd	r24, Z+3	; 0x03
    3154:	8d a3       	std	Y+37, r24	; 0x25
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    3156:	8d e0       	ldi	r24, 0x0D	; 13
    3158:	8e a3       	std	Y+38, r24	; 0x26
    315a:	ae 01       	movw	r20, r28
    315c:	49 5d       	subi	r20, 0xD9	; 217
    315e:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3160:	e2 ed       	ldi	r30, 0xD2	; 210
    3162:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3164:	0f 2e       	mov	r0, r31
    3166:	f1 ec       	ldi	r31, 0xC1	; 193
    3168:	cf 2e       	mov	r12, r31
    316a:	d1 2c       	mov	r13, r1
    316c:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    316e:	f1 2c       	mov	r15, r1
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    3170:	d8 01       	movw	r26, r16
    3172:	2d 91       	ld	r18, X+
    3174:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    3176:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3178:	91 81       	ldd	r25, Z+1	; 0x01
    317a:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    317c:	98 13       	cpse	r25, r24
    317e:	04 c0       	rjmp	.+8      	; 0x3188 <main+0x1868>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3180:	d6 01       	movw	r26, r12
    3182:	8c 91       	ld	r24, X
    3184:	80 62       	ori	r24, 0x20	; 32
    3186:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    3188:	30 81       	ld	r19, Z
    318a:	83 81       	ldd	r24, Z+3	; 0x03
    318c:	94 81       	ldd	r25, Z+4	; 0x04
    318e:	83 0f       	add	r24, r19
    3190:	91 1d       	adc	r25, r1
    3192:	dc 01       	movw	r26, r24
    3194:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    3196:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3198:	68 2f       	mov	r22, r24
    319a:	70 e0       	ldi	r23, 0x00	; 0
    319c:	22 81       	ldd	r18, Z+2	; 0x02
    319e:	30 e0       	ldi	r19, 0x00	; 0
    31a0:	21 50       	subi	r18, 0x01	; 1
    31a2:	31 09       	sbc	r19, r1
    31a4:	62 17       	cp	r22, r18
    31a6:	73 07       	cpc	r23, r19
    31a8:	11 f0       	breq	.+4      	; 0x31ae <main+0x188e>
    31aa:	8f 5f       	subi	r24, 0xFF	; 255
    31ac:	01 c0       	rjmp	.+2      	; 0x31b0 <main+0x1890>
    31ae:	8f 2d       	mov	r24, r15
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    31b0:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    31b2:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    31b4:	04 17       	cp	r16, r20
    31b6:	15 07       	cpc	r17, r21
    31b8:	d9 f6       	brne	.-74     	; 0x3170 <main+0x1850>
    31ba:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <main+0x286>
		Dgain_ch0 = atof(param);
		printStatus("");
		break;	
		
		case 154:	// Set heater on/off ch0
		if(rx_string[10] == '1')
    31be:	f5 01       	movw	r30, r10
    31c0:	82 85       	ldd	r24, Z+10	; 0x0a
    31c2:	81 33       	cpi	r24, 0x31	; 49
    31c4:	09 f0       	breq	.+2      	; 0x31c8 <main+0x18a8>
    31c6:	b0 c0       	rjmp	.+352    	; 0x3328 <main+0x1a08>
		{
			heaterEnableCh0 = true;
    31c8:	81 e0       	ldi	r24, 0x01	; 1
    31ca:	80 93 bb 01 	sts	0x01BB, r24
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    31ce:	81 e2       	ldi	r24, 0x21	; 33
    31d0:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    31d2:	81 81       	ldd	r24, Z+1	; 0x01
    31d4:	8f 8f       	std	Y+31, r24	; 0x1f
    31d6:	82 81       	ldd	r24, Z+2	; 0x02
    31d8:	88 a3       	std	Y+32, r24	; 0x20
    31da:	83 81       	ldd	r24, Z+3	; 0x03
    31dc:	89 a3       	std	Y+33, r24	; 0x21
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    31de:	8f e4       	ldi	r24, 0x4F	; 79
    31e0:	8a a3       	std	Y+34, r24	; 0x22
    31e2:	8e e4       	ldi	r24, 0x4E	; 78
    31e4:	8b a3       	std	Y+35, r24	; 0x23
    31e6:	1c a2       	std	Y+36, r1	; 0x24
    31e8:	1d a2       	std	Y+37, r1	; 0x25
    31ea:	1e a2       	std	Y+38, r1	; 0x26
    31ec:	8e 01       	movw	r16, r28
    31ee:	02 5e       	subi	r16, 0xE2	; 226
    31f0:	1f 4f       	sbci	r17, 0xFF	; 255
    31f2:	ae 01       	movw	r20, r28
    31f4:	4c 5d       	subi	r20, 0xDC	; 220
    31f6:	5f 4f       	sbci	r21, 0xFF	; 255
    31f8:	f8 01       	movw	r30, r16
    31fa:	80 e0       	ldi	r24, 0x00	; 0
    31fc:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    31fe:	b8 e0       	ldi	r27, 0x08	; 8
    3200:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    3202:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    3204:	29 2f       	mov	r18, r25
    3206:	33 27       	eor	r19, r19
    3208:	27 fd       	sbrc	r18, 7
    320a:	3a 95       	dec	r19
    320c:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
    320e:	32 2f       	mov	r19, r18
    3210:	22 27       	eor	r18, r18
    3212:	6b 2f       	mov	r22, r27
    3214:	7f 2d       	mov	r23, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    3216:	33 23       	and	r19, r19
    3218:	3c f4       	brge	.+14     	; 0x3228 <main+0x1908>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    321a:	22 0f       	add	r18, r18
    321c:	33 1f       	adc	r19, r19
    321e:	a1 e2       	ldi	r26, 0x21	; 33
    3220:	2a 27       	eor	r18, r26
    3222:	a0 e1       	ldi	r26, 0x10	; 16
    3224:	3a 27       	eor	r19, r26
    3226:	02 c0       	rjmp	.+4      	; 0x322c <main+0x190c>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    3228:	22 0f       	add	r18, r18
    322a:	33 1f       	adc	r19, r19
    322c:	61 50       	subi	r22, 0x01	; 1
    322e:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    3230:	91 f7       	brne	.-28     	; 0x3216 <main+0x18f6>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    3232:	98 2f       	mov	r25, r24
    3234:	88 27       	eor	r24, r24
    3236:	82 27       	eor	r24, r18
    3238:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    323a:	e4 17       	cp	r30, r20
    323c:	f5 07       	cpc	r31, r21
    323e:	09 f7       	brne	.-62     	; 0x3202 <main+0x18e2>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    3240:	7c 01       	movw	r14, r24
    3242:	40 e1       	ldi	r20, 0x10	; 16
    3244:	62 e6       	ldi	r22, 0x62	; 98
    3246:	74 e0       	ldi	r23, 0x04	; 4
    3248:	0e 94 62 23 	call	0x46c4	; 0x46c4 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    324c:	82 e6       	ldi	r24, 0x62	; 98
    324e:	94 e0       	ldi	r25, 0x04	; 4
    3250:	0e 94 58 23 	call	0x46b0	; 0x46b0 <strupr>
	if(crcXmodem < 0x10)
    3254:	b0 e1       	ldi	r27, 0x10	; 16
    3256:	eb 16       	cp	r14, r27
    3258:	f1 04       	cpc	r15, r1
    325a:	38 f4       	brcc	.+14     	; 0x326a <main+0x194a>
	{
		tx_string[cnt+4] = crc[0];
    325c:	80 91 62 04 	lds	r24, 0x0462
    3260:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+3] = '0';
    3262:	80 e3       	ldi	r24, 0x30	; 48
    3264:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+2] = '0';
    3266:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+1] = '0';
    3268:	8c a3       	std	Y+36, r24	; 0x24
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    326a:	c7 01       	movw	r24, r14
    326c:	40 97       	sbiw	r24, 0x10	; 16
    326e:	80 3f       	cpi	r24, 0xF0	; 240
    3270:	91 05       	cpc	r25, r1
    3272:	48 f4       	brcc	.+18     	; 0x3286 <main+0x1966>
	{
		tx_string[cnt+4] = crc[1];
    3274:	e2 e6       	ldi	r30, 0x62	; 98
    3276:	f4 e0       	ldi	r31, 0x04	; 4
    3278:	81 81       	ldd	r24, Z+1	; 0x01
    327a:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+3] = crc[0];
    327c:	80 81       	ld	r24, Z
    327e:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+2] = '0';
    3280:	80 e3       	ldi	r24, 0x30	; 48
    3282:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+1] = '0';		
    3284:	8c a3       	std	Y+36, r24	; 0x24
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    3286:	c7 01       	movw	r24, r14
    3288:	9a 95       	dec	r25
    328a:	81 15       	cp	r24, r1
    328c:	9f 40       	sbci	r25, 0x0F	; 15
    328e:	50 f4       	brcc	.+20     	; 0x32a4 <main+0x1984>
	{
		tx_string[cnt+4] = crc[2];
    3290:	e2 e6       	ldi	r30, 0x62	; 98
    3292:	f4 e0       	ldi	r31, 0x04	; 4
    3294:	82 81       	ldd	r24, Z+2	; 0x02
    3296:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+3] = crc[1];
    3298:	81 81       	ldd	r24, Z+1	; 0x01
    329a:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+2] = crc[0];
    329c:	80 81       	ld	r24, Z
    329e:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+1] = '0';		
    32a0:	80 e3       	ldi	r24, 0x30	; 48
    32a2:	8c a3       	std	Y+36, r24	; 0x24
	}
	if(crcXmodem >= 0x1000)
    32a4:	e1 14       	cp	r14, r1
    32a6:	f0 e1       	ldi	r31, 0x10	; 16
    32a8:	ff 06       	cpc	r15, r31
    32aa:	50 f0       	brcs	.+20     	; 0x32c0 <main+0x19a0>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    32ac:	e2 e6       	ldi	r30, 0x62	; 98
    32ae:	f4 e0       	ldi	r31, 0x04	; 4
    32b0:	80 81       	ld	r24, Z
    32b2:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = crc[1];
    32b4:	81 81       	ldd	r24, Z+1	; 0x01
    32b6:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[2];
    32b8:	82 81       	ldd	r24, Z+2	; 0x02
    32ba:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+4] = crc[3];
    32bc:	83 81       	ldd	r24, Z+3	; 0x03
    32be:	8f a3       	std	Y+39, r24	; 0x27
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    32c0:	8d e0       	ldi	r24, 0x0D	; 13
    32c2:	88 a7       	std	Y+40, r24	; 0x28
    32c4:	ae 01       	movw	r20, r28
    32c6:	47 5d       	subi	r20, 0xD7	; 215
    32c8:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    32ca:	e2 ed       	ldi	r30, 0xD2	; 210
    32cc:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    32ce:	0f 2e       	mov	r0, r31
    32d0:	f1 ec       	ldi	r31, 0xC1	; 193
    32d2:	cf 2e       	mov	r12, r31
    32d4:	d1 2c       	mov	r13, r1
    32d6:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    32d8:	f1 2c       	mov	r15, r1
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    32da:	d8 01       	movw	r26, r16
    32dc:	2d 91       	ld	r18, X+
    32de:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    32e0:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    32e2:	91 81       	ldd	r25, Z+1	; 0x01
    32e4:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    32e6:	98 13       	cpse	r25, r24
    32e8:	04 c0       	rjmp	.+8      	; 0x32f2 <main+0x19d2>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    32ea:	d6 01       	movw	r26, r12
    32ec:	8c 91       	ld	r24, X
    32ee:	80 62       	ori	r24, 0x20	; 32
    32f0:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    32f2:	30 81       	ld	r19, Z
    32f4:	83 81       	ldd	r24, Z+3	; 0x03
    32f6:	94 81       	ldd	r25, Z+4	; 0x04
    32f8:	83 0f       	add	r24, r19
    32fa:	91 1d       	adc	r25, r1
    32fc:	dc 01       	movw	r26, r24
    32fe:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    3300:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3302:	68 2f       	mov	r22, r24
    3304:	70 e0       	ldi	r23, 0x00	; 0
    3306:	22 81       	ldd	r18, Z+2	; 0x02
    3308:	30 e0       	ldi	r19, 0x00	; 0
    330a:	21 50       	subi	r18, 0x01	; 1
    330c:	31 09       	sbc	r19, r1
    330e:	62 17       	cp	r22, r18
    3310:	73 07       	cpc	r23, r19
    3312:	11 f0       	breq	.+4      	; 0x3318 <main+0x19f8>
    3314:	8f 5f       	subi	r24, 0xFF	; 255
    3316:	01 c0       	rjmp	.+2      	; 0x331a <main+0x19fa>
    3318:	8f 2d       	mov	r24, r15
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    331a:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    331c:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    331e:	04 17       	cp	r16, r20
    3320:	15 07       	cpc	r17, r21
    3322:	d9 f6       	brne	.-74     	; 0x32da <main+0x19ba>
    3324:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <main+0x286>
		if(rx_string[10] == '1')
		{
			heaterEnableCh0 = true;
			printStatus("ON");
		}
		else if(rx_string[10] == '0')
    3328:	80 33       	cpi	r24, 0x30	; 48
    332a:	11 f0       	breq	.+4      	; 0x3330 <main+0x1a10>
    332c:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <main+0x286>
		{
			heaterEnableCh0 = false;
    3330:	10 92 bb 01 	sts	0x01BB, r1
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    3334:	81 e2       	ldi	r24, 0x21	; 33
    3336:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    3338:	f5 01       	movw	r30, r10
    333a:	81 81       	ldd	r24, Z+1	; 0x01
    333c:	8f 8f       	std	Y+31, r24	; 0x1f
    333e:	82 81       	ldd	r24, Z+2	; 0x02
    3340:	88 a3       	std	Y+32, r24	; 0x20
    3342:	83 81       	ldd	r24, Z+3	; 0x03
    3344:	89 a3       	std	Y+33, r24	; 0x21
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    3346:	8f e4       	ldi	r24, 0x4F	; 79
    3348:	8a a3       	std	Y+34, r24	; 0x22
    334a:	86 e4       	ldi	r24, 0x46	; 70
    334c:	8b a3       	std	Y+35, r24	; 0x23
    334e:	8c a3       	std	Y+36, r24	; 0x24
    3350:	1d a2       	std	Y+37, r1	; 0x25
    3352:	1e a2       	std	Y+38, r1	; 0x26
    3354:	1f a2       	std	Y+39, r1	; 0x27
    3356:	8e 01       	movw	r16, r28
    3358:	02 5e       	subi	r16, 0xE2	; 226
    335a:	1f 4f       	sbci	r17, 0xFF	; 255
    335c:	ae 01       	movw	r20, r28
    335e:	4b 5d       	subi	r20, 0xDB	; 219
    3360:	5f 4f       	sbci	r21, 0xFF	; 255
    3362:	f8 01       	movw	r30, r16
    3364:	80 e0       	ldi	r24, 0x00	; 0
    3366:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    3368:	b8 e0       	ldi	r27, 0x08	; 8
    336a:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    336c:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    336e:	29 2f       	mov	r18, r25
    3370:	33 27       	eor	r19, r19
    3372:	27 fd       	sbrc	r18, 7
    3374:	3a 95       	dec	r19
    3376:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
    3378:	32 2f       	mov	r19, r18
    337a:	22 27       	eor	r18, r18
    337c:	6b 2f       	mov	r22, r27
    337e:	7f 2d       	mov	r23, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    3380:	33 23       	and	r19, r19
    3382:	3c f4       	brge	.+14     	; 0x3392 <main+0x1a72>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    3384:	22 0f       	add	r18, r18
    3386:	33 1f       	adc	r19, r19
    3388:	a1 e2       	ldi	r26, 0x21	; 33
    338a:	2a 27       	eor	r18, r26
    338c:	a0 e1       	ldi	r26, 0x10	; 16
    338e:	3a 27       	eor	r19, r26
    3390:	02 c0       	rjmp	.+4      	; 0x3396 <main+0x1a76>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    3392:	22 0f       	add	r18, r18
    3394:	33 1f       	adc	r19, r19
    3396:	61 50       	subi	r22, 0x01	; 1
    3398:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    339a:	91 f7       	brne	.-28     	; 0x3380 <main+0x1a60>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    339c:	98 2f       	mov	r25, r24
    339e:	88 27       	eor	r24, r24
    33a0:	82 27       	eor	r24, r18
    33a2:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    33a4:	e4 17       	cp	r30, r20
    33a6:	f5 07       	cpc	r31, r21
    33a8:	09 f7       	brne	.-62     	; 0x336c <main+0x1a4c>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    33aa:	7c 01       	movw	r14, r24
    33ac:	40 e1       	ldi	r20, 0x10	; 16
    33ae:	62 e6       	ldi	r22, 0x62	; 98
    33b0:	74 e0       	ldi	r23, 0x04	; 4
    33b2:	0e 94 62 23 	call	0x46c4	; 0x46c4 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    33b6:	82 e6       	ldi	r24, 0x62	; 98
    33b8:	94 e0       	ldi	r25, 0x04	; 4
    33ba:	0e 94 58 23 	call	0x46b0	; 0x46b0 <strupr>
	if(crcXmodem < 0x10)
    33be:	b0 e1       	ldi	r27, 0x10	; 16
    33c0:	eb 16       	cp	r14, r27
    33c2:	f1 04       	cpc	r15, r1
    33c4:	38 f4       	brcc	.+14     	; 0x33d4 <main+0x1ab4>
	{
		tx_string[cnt+4] = crc[0];
    33c6:	80 91 62 04 	lds	r24, 0x0462
    33ca:	88 a7       	std	Y+40, r24	; 0x28
		tx_string[cnt+3] = '0';
    33cc:	80 e3       	ldi	r24, 0x30	; 48
    33ce:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+2] = '0';
    33d0:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+1] = '0';
    33d2:	8d a3       	std	Y+37, r24	; 0x25
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    33d4:	c7 01       	movw	r24, r14
    33d6:	40 97       	sbiw	r24, 0x10	; 16
    33d8:	80 3f       	cpi	r24, 0xF0	; 240
    33da:	91 05       	cpc	r25, r1
    33dc:	48 f4       	brcc	.+18     	; 0x33f0 <main+0x1ad0>
	{
		tx_string[cnt+4] = crc[1];
    33de:	e2 e6       	ldi	r30, 0x62	; 98
    33e0:	f4 e0       	ldi	r31, 0x04	; 4
    33e2:	81 81       	ldd	r24, Z+1	; 0x01
    33e4:	88 a7       	std	Y+40, r24	; 0x28
		tx_string[cnt+3] = crc[0];
    33e6:	80 81       	ld	r24, Z
    33e8:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+2] = '0';
    33ea:	80 e3       	ldi	r24, 0x30	; 48
    33ec:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+1] = '0';		
    33ee:	8d a3       	std	Y+37, r24	; 0x25
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    33f0:	c7 01       	movw	r24, r14
    33f2:	9a 95       	dec	r25
    33f4:	81 15       	cp	r24, r1
    33f6:	9f 40       	sbci	r25, 0x0F	; 15
    33f8:	50 f4       	brcc	.+20     	; 0x340e <main+0x1aee>
	{
		tx_string[cnt+4] = crc[2];
    33fa:	e2 e6       	ldi	r30, 0x62	; 98
    33fc:	f4 e0       	ldi	r31, 0x04	; 4
    33fe:	82 81       	ldd	r24, Z+2	; 0x02
    3400:	88 a7       	std	Y+40, r24	; 0x28
		tx_string[cnt+3] = crc[1];
    3402:	81 81       	ldd	r24, Z+1	; 0x01
    3404:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+2] = crc[0];
    3406:	80 81       	ld	r24, Z
    3408:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+1] = '0';		
    340a:	80 e3       	ldi	r24, 0x30	; 48
    340c:	8d a3       	std	Y+37, r24	; 0x25
	}
	if(crcXmodem >= 0x1000)
    340e:	e1 14       	cp	r14, r1
    3410:	f0 e1       	ldi	r31, 0x10	; 16
    3412:	ff 06       	cpc	r15, r31
    3414:	50 f0       	brcs	.+20     	; 0x342a <main+0x1b0a>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    3416:	e2 e6       	ldi	r30, 0x62	; 98
    3418:	f4 e0       	ldi	r31, 0x04	; 4
    341a:	80 81       	ld	r24, Z
    341c:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+2] = crc[1];
    341e:	81 81       	ldd	r24, Z+1	; 0x01
    3420:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+3] = crc[2];
    3422:	82 81       	ldd	r24, Z+2	; 0x02
    3424:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+4] = crc[3];
    3426:	83 81       	ldd	r24, Z+3	; 0x03
    3428:	88 a7       	std	Y+40, r24	; 0x28
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    342a:	8d e0       	ldi	r24, 0x0D	; 13
    342c:	89 a7       	std	Y+41, r24	; 0x29
    342e:	ae 01       	movw	r20, r28
    3430:	46 5d       	subi	r20, 0xD6	; 214
    3432:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3434:	e2 ed       	ldi	r30, 0xD2	; 210
    3436:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3438:	0f 2e       	mov	r0, r31
    343a:	f1 ec       	ldi	r31, 0xC1	; 193
    343c:	cf 2e       	mov	r12, r31
    343e:	d1 2c       	mov	r13, r1
    3440:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3442:	f1 2c       	mov	r15, r1
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    3444:	d8 01       	movw	r26, r16
    3446:	2d 91       	ld	r18, X+
    3448:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    344a:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    344c:	91 81       	ldd	r25, Z+1	; 0x01
    344e:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    3450:	98 13       	cpse	r25, r24
    3452:	04 c0       	rjmp	.+8      	; 0x345c <main+0x1b3c>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3454:	d6 01       	movw	r26, r12
    3456:	8c 91       	ld	r24, X
    3458:	80 62       	ori	r24, 0x20	; 32
    345a:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    345c:	30 81       	ld	r19, Z
    345e:	83 81       	ldd	r24, Z+3	; 0x03
    3460:	94 81       	ldd	r25, Z+4	; 0x04
    3462:	83 0f       	add	r24, r19
    3464:	91 1d       	adc	r25, r1
    3466:	dc 01       	movw	r26, r24
    3468:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    346a:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    346c:	68 2f       	mov	r22, r24
    346e:	70 e0       	ldi	r23, 0x00	; 0
    3470:	22 81       	ldd	r18, Z+2	; 0x02
    3472:	30 e0       	ldi	r19, 0x00	; 0
    3474:	21 50       	subi	r18, 0x01	; 1
    3476:	31 09       	sbc	r19, r1
    3478:	62 17       	cp	r22, r18
    347a:	73 07       	cpc	r23, r19
    347c:	11 f0       	breq	.+4      	; 0x3482 <main+0x1b62>
    347e:	8f 5f       	subi	r24, 0xFF	; 255
    3480:	01 c0       	rjmp	.+2      	; 0x3484 <main+0x1b64>
    3482:	8f 2d       	mov	r24, r15
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    3484:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    3486:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    3488:	04 17       	cp	r16, r20
    348a:	15 07       	cpc	r17, r21
    348c:	d9 f6       	brne	.-74     	; 0x3444 <main+0x1b24>
    348e:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <main+0x286>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    3492:	6e e1       	ldi	r22, 0x1E	; 30
    3494:	70 e0       	ldi	r23, 0x00	; 0
    3496:	c5 01       	movw	r24, r10
    3498:	0e 94 4d 23 	call	0x469a	; 0x469a <strnlen>
    349c:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    349e:	8b 30       	cpi	r24, 0x0B	; 11
    34a0:	91 05       	cpc	r25, r1
    34a2:	6c f0       	brlt	.+26     	; 0x34be <main+0x1b9e>
    34a4:	ee eb       	ldi	r30, 0xBE	; 190
    34a6:	f4 e0       	ldi	r31, 0x04	; 4
    34a8:	de 01       	movw	r26, r28
    34aa:	aa 5b       	subi	r26, 0xBA	; 186
    34ac:	bf 4f       	sbci	r27, 0xFF	; 255
    34ae:	8c 54       	subi	r24, 0x4C	; 76
    34b0:	9b 4f       	sbci	r25, 0xFB	; 251
    34b2:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    34b4:	91 91       	ld	r25, Z+
    34b6:	9d 93       	st	X+, r25
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    34b8:	e2 17       	cp	r30, r18
    34ba:	f3 07       	cpc	r31, r19
    34bc:	d9 f7       	brne	.-10     	; 0x34b4 <main+0x1b94>
		break;	
		
		// *** Channel 1 ***
		case 250:	// TempSetPoint1
		ParamParse(rx_string, param);
		TempSetPoint1 = atof(param);
    34be:	ce 01       	movw	r24, r28
    34c0:	8a 5b       	subi	r24, 0xBA	; 186
    34c2:	9f 4f       	sbci	r25, 0xFF	; 255
    34c4:	0e 94 05 23 	call	0x460a	; 0x460a <atof>
    34c8:	60 93 8a 01 	sts	0x018A, r22
    34cc:	70 93 8b 01 	sts	0x018B, r23
    34d0:	80 93 8c 01 	sts	0x018C, r24
    34d4:	90 93 8d 01 	sts	0x018D, r25
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    34d8:	81 e2       	ldi	r24, 0x21	; 33
    34da:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    34dc:	f5 01       	movw	r30, r10
    34de:	81 81       	ldd	r24, Z+1	; 0x01
    34e0:	8f 8f       	std	Y+31, r24	; 0x1f
    34e2:	82 81       	ldd	r24, Z+2	; 0x02
    34e4:	88 a3       	std	Y+32, r24	; 0x20
    34e6:	83 81       	ldd	r24, Z+3	; 0x03
    34e8:	89 a3       	std	Y+33, r24	; 0x21
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    34ea:	1a a2       	std	Y+34, r1	; 0x22
    34ec:	1b a2       	std	Y+35, r1	; 0x23
    34ee:	1c a2       	std	Y+36, r1	; 0x24
    34f0:	8e 01       	movw	r16, r28
    34f2:	02 5e       	subi	r16, 0xE2	; 226
    34f4:	1f 4f       	sbci	r17, 0xFF	; 255
    34f6:	ae 01       	movw	r20, r28
    34f8:	4e 5d       	subi	r20, 0xDE	; 222
    34fa:	5f 4f       	sbci	r21, 0xFF	; 255
    34fc:	f8 01       	movw	r30, r16
    34fe:	80 e0       	ldi	r24, 0x00	; 0
    3500:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    3502:	b8 e0       	ldi	r27, 0x08	; 8
    3504:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    3506:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    3508:	29 2f       	mov	r18, r25
    350a:	33 27       	eor	r19, r19
    350c:	27 fd       	sbrc	r18, 7
    350e:	3a 95       	dec	r19
    3510:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
    3512:	32 2f       	mov	r19, r18
    3514:	22 27       	eor	r18, r18
    3516:	6b 2f       	mov	r22, r27
    3518:	7f 2d       	mov	r23, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    351a:	33 23       	and	r19, r19
    351c:	3c f4       	brge	.+14     	; 0x352c <main+0x1c0c>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    351e:	22 0f       	add	r18, r18
    3520:	33 1f       	adc	r19, r19
    3522:	a1 e2       	ldi	r26, 0x21	; 33
    3524:	2a 27       	eor	r18, r26
    3526:	a0 e1       	ldi	r26, 0x10	; 16
    3528:	3a 27       	eor	r19, r26
    352a:	02 c0       	rjmp	.+4      	; 0x3530 <main+0x1c10>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    352c:	22 0f       	add	r18, r18
    352e:	33 1f       	adc	r19, r19
    3530:	61 50       	subi	r22, 0x01	; 1
    3532:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    3534:	91 f7       	brne	.-28     	; 0x351a <main+0x1bfa>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    3536:	98 2f       	mov	r25, r24
    3538:	88 27       	eor	r24, r24
    353a:	82 27       	eor	r24, r18
    353c:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    353e:	e4 17       	cp	r30, r20
    3540:	f5 07       	cpc	r31, r21
    3542:	09 f7       	brne	.-62     	; 0x3506 <main+0x1be6>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    3544:	7c 01       	movw	r14, r24
    3546:	40 e1       	ldi	r20, 0x10	; 16
    3548:	62 e6       	ldi	r22, 0x62	; 98
    354a:	74 e0       	ldi	r23, 0x04	; 4
    354c:	0e 94 62 23 	call	0x46c4	; 0x46c4 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    3550:	82 e6       	ldi	r24, 0x62	; 98
    3552:	94 e0       	ldi	r25, 0x04	; 4
    3554:	0e 94 58 23 	call	0x46b0	; 0x46b0 <strupr>
	if(crcXmodem < 0x10)
    3558:	b0 e1       	ldi	r27, 0x10	; 16
    355a:	eb 16       	cp	r14, r27
    355c:	f1 04       	cpc	r15, r1
    355e:	38 f4       	brcc	.+14     	; 0x356e <main+0x1c4e>
	{
		tx_string[cnt+4] = crc[0];
    3560:	80 91 62 04 	lds	r24, 0x0462
    3564:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = '0';
    3566:	80 e3       	ldi	r24, 0x30	; 48
    3568:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = '0';
    356a:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';
    356c:	8a a3       	std	Y+34, r24	; 0x22
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    356e:	c7 01       	movw	r24, r14
    3570:	40 97       	sbiw	r24, 0x10	; 16
    3572:	80 3f       	cpi	r24, 0xF0	; 240
    3574:	91 05       	cpc	r25, r1
    3576:	48 f4       	brcc	.+18     	; 0x358a <main+0x1c6a>
	{
		tx_string[cnt+4] = crc[1];
    3578:	e2 e6       	ldi	r30, 0x62	; 98
    357a:	f4 e0       	ldi	r31, 0x04	; 4
    357c:	81 81       	ldd	r24, Z+1	; 0x01
    357e:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[0];
    3580:	80 81       	ld	r24, Z
    3582:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = '0';
    3584:	80 e3       	ldi	r24, 0x30	; 48
    3586:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';		
    3588:	8a a3       	std	Y+34, r24	; 0x22
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    358a:	c7 01       	movw	r24, r14
    358c:	9a 95       	dec	r25
    358e:	81 15       	cp	r24, r1
    3590:	9f 40       	sbci	r25, 0x0F	; 15
    3592:	50 f4       	brcc	.+20     	; 0x35a8 <main+0x1c88>
	{
		tx_string[cnt+4] = crc[2];
    3594:	e2 e6       	ldi	r30, 0x62	; 98
    3596:	f4 e0       	ldi	r31, 0x04	; 4
    3598:	82 81       	ldd	r24, Z+2	; 0x02
    359a:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[1];
    359c:	81 81       	ldd	r24, Z+1	; 0x01
    359e:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = crc[0];
    35a0:	80 81       	ld	r24, Z
    35a2:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';		
    35a4:	80 e3       	ldi	r24, 0x30	; 48
    35a6:	8a a3       	std	Y+34, r24	; 0x22
	}
	if(crcXmodem >= 0x1000)
    35a8:	e1 14       	cp	r14, r1
    35aa:	f0 e1       	ldi	r31, 0x10	; 16
    35ac:	ff 06       	cpc	r15, r31
    35ae:	50 f0       	brcs	.+20     	; 0x35c4 <main+0x1ca4>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    35b0:	e2 e6       	ldi	r30, 0x62	; 98
    35b2:	f4 e0       	ldi	r31, 0x04	; 4
    35b4:	80 81       	ld	r24, Z
    35b6:	8a a3       	std	Y+34, r24	; 0x22
		tx_string[cnt+2] = crc[1];
    35b8:	81 81       	ldd	r24, Z+1	; 0x01
    35ba:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+3] = crc[2];
    35bc:	82 81       	ldd	r24, Z+2	; 0x02
    35be:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+4] = crc[3];
    35c0:	83 81       	ldd	r24, Z+3	; 0x03
    35c2:	8d a3       	std	Y+37, r24	; 0x25
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    35c4:	8d e0       	ldi	r24, 0x0D	; 13
    35c6:	8e a3       	std	Y+38, r24	; 0x26
    35c8:	ae 01       	movw	r20, r28
    35ca:	49 5d       	subi	r20, 0xD9	; 217
    35cc:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    35ce:	e2 ed       	ldi	r30, 0xD2	; 210
    35d0:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    35d2:	0f 2e       	mov	r0, r31
    35d4:	f1 ec       	ldi	r31, 0xC1	; 193
    35d6:	cf 2e       	mov	r12, r31
    35d8:	d1 2c       	mov	r13, r1
    35da:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    35dc:	f1 2c       	mov	r15, r1
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    35de:	d8 01       	movw	r26, r16
    35e0:	2d 91       	ld	r18, X+
    35e2:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    35e4:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    35e6:	91 81       	ldd	r25, Z+1	; 0x01
    35e8:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    35ea:	98 13       	cpse	r25, r24
    35ec:	04 c0       	rjmp	.+8      	; 0x35f6 <main+0x1cd6>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    35ee:	d6 01       	movw	r26, r12
    35f0:	8c 91       	ld	r24, X
    35f2:	80 62       	ori	r24, 0x20	; 32
    35f4:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    35f6:	30 81       	ld	r19, Z
    35f8:	83 81       	ldd	r24, Z+3	; 0x03
    35fa:	94 81       	ldd	r25, Z+4	; 0x04
    35fc:	83 0f       	add	r24, r19
    35fe:	91 1d       	adc	r25, r1
    3600:	dc 01       	movw	r26, r24
    3602:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    3604:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3606:	68 2f       	mov	r22, r24
    3608:	70 e0       	ldi	r23, 0x00	; 0
    360a:	22 81       	ldd	r18, Z+2	; 0x02
    360c:	30 e0       	ldi	r19, 0x00	; 0
    360e:	21 50       	subi	r18, 0x01	; 1
    3610:	31 09       	sbc	r19, r1
    3612:	62 17       	cp	r22, r18
    3614:	73 07       	cpc	r23, r19
    3616:	11 f0       	breq	.+4      	; 0x361c <main+0x1cfc>
    3618:	8f 5f       	subi	r24, 0xFF	; 255
    361a:	01 c0       	rjmp	.+2      	; 0x361e <main+0x1cfe>
    361c:	8f 2d       	mov	r24, r15
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    361e:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    3620:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    3622:	04 17       	cp	r16, r20
    3624:	15 07       	cpc	r17, r21
    3626:	d9 f6       	brne	.-74     	; 0x35de <main+0x1cbe>
    3628:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <main+0x286>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    362c:	6e e1       	ldi	r22, 0x1E	; 30
    362e:	70 e0       	ldi	r23, 0x00	; 0
    3630:	c5 01       	movw	r24, r10
    3632:	0e 94 4d 23 	call	0x469a	; 0x469a <strnlen>
    3636:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    3638:	8b 30       	cpi	r24, 0x0B	; 11
    363a:	91 05       	cpc	r25, r1
    363c:	6c f0       	brlt	.+26     	; 0x3658 <main+0x1d38>
    363e:	ee eb       	ldi	r30, 0xBE	; 190
    3640:	f4 e0       	ldi	r31, 0x04	; 4
    3642:	de 01       	movw	r26, r28
    3644:	aa 5b       	subi	r26, 0xBA	; 186
    3646:	bf 4f       	sbci	r27, 0xFF	; 255
    3648:	8c 54       	subi	r24, 0x4C	; 76
    364a:	9b 4f       	sbci	r25, 0xFB	; 251
    364c:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    364e:	91 91       	ld	r25, Z+
    3650:	9d 93       	st	X+, r25
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    3652:	e2 17       	cp	r30, r18
    3654:	f3 07       	cpc	r31, r19
    3656:	d9 f7       	brne	.-10     	; 0x364e <main+0x1d2e>
		printStatus("");
		break;
		
		case 251:	// SetPgainCh1
		ParamParse(rx_string, param);
		Pgain_ch1 = atof(param);
    3658:	ce 01       	movw	r24, r28
    365a:	8a 5b       	subi	r24, 0xBA	; 186
    365c:	9f 4f       	sbci	r25, 0xFF	; 255
    365e:	d5 d7       	rcall	.+4010   	; 0x460a <atof>
    3660:	60 93 6b 04 	sts	0x046B, r22
    3664:	70 93 6c 04 	sts	0x046C, r23
    3668:	80 93 6d 04 	sts	0x046D, r24
    366c:	90 93 6e 04 	sts	0x046E, r25
		printStatus("");
    3670:	8d e3       	ldi	r24, 0x3D	; 61
    3672:	91 e0       	ldi	r25, 0x01	; 1
    3674:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    3678:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <main+0x286>
		break;
		
		case 252:	// SetIgainCh1
		ParamParse(rx_string, param);
    367c:	be 01       	movw	r22, r28
    367e:	6a 5b       	subi	r22, 0xBA	; 186
    3680:	7f 4f       	sbci	r23, 0xFF	; 255
    3682:	c5 01       	movw	r24, r10
    3684:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <ParamParse>
		Igain_ch1 = atof(param);
    3688:	ce 01       	movw	r24, r28
    368a:	8a 5b       	subi	r24, 0xBA	; 186
    368c:	9f 4f       	sbci	r25, 0xFF	; 255
    368e:	bd d7       	rcall	.+3962   	; 0x460a <atof>
    3690:	60 93 c6 01 	sts	0x01C6, r22
    3694:	70 93 c7 01 	sts	0x01C7, r23
    3698:	80 93 c8 01 	sts	0x01C8, r24
    369c:	90 93 c9 01 	sts	0x01C9, r25
		printStatus("");
    36a0:	8d e3       	ldi	r24, 0x3D	; 61
    36a2:	91 e0       	ldi	r25, 0x01	; 1
    36a4:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    36a8:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <main+0x286>
		break;
		
		case 253:	// SetDgain_ch1
		ParamParse(rx_string, param);
    36ac:	be 01       	movw	r22, r28
    36ae:	6a 5b       	subi	r22, 0xBA	; 186
    36b0:	7f 4f       	sbci	r23, 0xFF	; 255
    36b2:	c5 01       	movw	r24, r10
    36b4:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <ParamParse>
		Dgain_ch1 = atof(param);
    36b8:	ce 01       	movw	r24, r28
    36ba:	8a 5b       	subi	r24, 0xBA	; 186
    36bc:	9f 4f       	sbci	r25, 0xFF	; 255
    36be:	a5 d7       	rcall	.+3914   	; 0x460a <atof>
    36c0:	60 93 ac 04 	sts	0x04AC, r22
    36c4:	70 93 ad 04 	sts	0x04AD, r23
    36c8:	80 93 ae 04 	sts	0x04AE, r24
    36cc:	90 93 af 04 	sts	0x04AF, r25
		printStatus("");
    36d0:	8d e3       	ldi	r24, 0x3D	; 61
    36d2:	91 e0       	ldi	r25, 0x01	; 1
    36d4:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    36d8:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <main+0x286>
		break;
		
		case 254:	// Set heater on/off ch1
		if(rx_string[10] == '1')
    36dc:	f5 01       	movw	r30, r10
    36de:	82 85       	ldd	r24, Z+10	; 0x0a
    36e0:	81 33       	cpi	r24, 0x31	; 49
    36e2:	49 f4       	brne	.+18     	; 0x36f6 <main+0x1dd6>
		{
			heaterEnableCh1 = true;
    36e4:	81 e0       	ldi	r24, 0x01	; 1
    36e6:	80 93 ba 01 	sts	0x01BA, r24
			printStatus("ON");
    36ea:	87 e3       	ldi	r24, 0x37	; 55
    36ec:	91 e0       	ldi	r25, 0x01	; 1
    36ee:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    36f2:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <main+0x286>
		}
		else if(rx_string[10] == '0')
    36f6:	80 33       	cpi	r24, 0x30	; 48
    36f8:	11 f0       	breq	.+4      	; 0x36fe <main+0x1dde>
    36fa:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <main+0x286>
		{
			heaterEnableCh1 = false;
    36fe:	10 92 ba 01 	sts	0x01BA, r1
			printStatus("OFF");
    3702:	8a e3       	ldi	r24, 0x3A	; 58
    3704:	91 e0       	ldi	r25, 0x01	; 1
    3706:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    370a:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <main+0x286>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    370e:	6e e1       	ldi	r22, 0x1E	; 30
    3710:	70 e0       	ldi	r23, 0x00	; 0
    3712:	c5 01       	movw	r24, r10
    3714:	c2 d7       	rcall	.+3972   	; 0x469a <strnlen>
    3716:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    3718:	8b 30       	cpi	r24, 0x0B	; 11
    371a:	91 05       	cpc	r25, r1
    371c:	6c f0       	brlt	.+26     	; 0x3738 <main+0x1e18>
    371e:	ee eb       	ldi	r30, 0xBE	; 190
    3720:	f4 e0       	ldi	r31, 0x04	; 4
    3722:	de 01       	movw	r26, r28
    3724:	aa 5b       	subi	r26, 0xBA	; 186
    3726:	bf 4f       	sbci	r27, 0xFF	; 255
    3728:	8c 54       	subi	r24, 0x4C	; 76
    372a:	9b 4f       	sbci	r25, 0xFB	; 251
    372c:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    372e:	91 91       	ld	r25, Z+
    3730:	9d 93       	st	X+, r25
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    3732:	e2 17       	cp	r30, r18
    3734:	f3 07       	cpc	r31, r19
    3736:	d9 f7       	brne	.-10     	; 0x372e <main+0x1e0e>
		break;
		
		// *** Channel 2 ***
		case 350:	// TempSetPoint2
		ParamParse(rx_string, param);
		TempSetPoint2 = atof(param);
    3738:	ce 01       	movw	r24, r28
    373a:	8a 5b       	subi	r24, 0xBA	; 186
    373c:	9f 4f       	sbci	r25, 0xFF	; 255
    373e:	65 d7       	rcall	.+3786   	; 0x460a <atof>
    3740:	60 93 72 01 	sts	0x0172, r22
    3744:	70 93 73 01 	sts	0x0173, r23
    3748:	80 93 74 01 	sts	0x0174, r24
    374c:	90 93 75 01 	sts	0x0175, r25
		printStatus("");
    3750:	8d e3       	ldi	r24, 0x3D	; 61
    3752:	91 e0       	ldi	r25, 0x01	; 1
    3754:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    3758:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <main+0x286>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    375c:	6e e1       	ldi	r22, 0x1E	; 30
    375e:	70 e0       	ldi	r23, 0x00	; 0
    3760:	c5 01       	movw	r24, r10
    3762:	9b d7       	rcall	.+3894   	; 0x469a <strnlen>
    3764:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    3766:	8b 30       	cpi	r24, 0x0B	; 11
    3768:	91 05       	cpc	r25, r1
    376a:	6c f0       	brlt	.+26     	; 0x3786 <main+0x1e66>
    376c:	ee eb       	ldi	r30, 0xBE	; 190
    376e:	f4 e0       	ldi	r31, 0x04	; 4
    3770:	de 01       	movw	r26, r28
    3772:	aa 5b       	subi	r26, 0xBA	; 186
    3774:	bf 4f       	sbci	r27, 0xFF	; 255
    3776:	8c 54       	subi	r24, 0x4C	; 76
    3778:	9b 4f       	sbci	r25, 0xFB	; 251
    377a:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    377c:	91 91       	ld	r25, Z+
    377e:	9d 93       	st	X+, r25
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    3780:	e2 17       	cp	r30, r18
    3782:	f3 07       	cpc	r31, r19
    3784:	d9 f7       	brne	.-10     	; 0x377c <main+0x1e5c>
		printStatus("");
		break;
		
		case 351:	// SetPgainCh2
		ParamParse(rx_string, param);
		Pgain_ch2 = atof(param);
    3786:	ce 01       	movw	r24, r28
    3788:	8a 5b       	subi	r24, 0xBA	; 186
    378a:	9f 4f       	sbci	r25, 0xFF	; 255
    378c:	3e d7       	rcall	.+3708   	; 0x460a <atof>
    378e:	60 93 67 04 	sts	0x0467, r22
    3792:	70 93 68 04 	sts	0x0468, r23
    3796:	80 93 69 04 	sts	0x0469, r24
    379a:	90 93 6a 04 	sts	0x046A, r25
		printStatus("");
    379e:	8d e3       	ldi	r24, 0x3D	; 61
    37a0:	91 e0       	ldi	r25, 0x01	; 1
    37a2:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    37a6:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <main+0x286>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    37aa:	6e e1       	ldi	r22, 0x1E	; 30
    37ac:	70 e0       	ldi	r23, 0x00	; 0
    37ae:	c5 01       	movw	r24, r10
    37b0:	74 d7       	rcall	.+3816   	; 0x469a <strnlen>
    37b2:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    37b4:	8b 30       	cpi	r24, 0x0B	; 11
    37b6:	91 05       	cpc	r25, r1
    37b8:	6c f0       	brlt	.+26     	; 0x37d4 <main+0x1eb4>
    37ba:	ee eb       	ldi	r30, 0xBE	; 190
    37bc:	f4 e0       	ldi	r31, 0x04	; 4
    37be:	de 01       	movw	r26, r28
    37c0:	aa 5b       	subi	r26, 0xBA	; 186
    37c2:	bf 4f       	sbci	r27, 0xFF	; 255
    37c4:	8c 54       	subi	r24, 0x4C	; 76
    37c6:	9b 4f       	sbci	r25, 0xFB	; 251
    37c8:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    37ca:	91 91       	ld	r25, Z+
    37cc:	9d 93       	st	X+, r25
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    37ce:	e2 17       	cp	r30, r18
    37d0:	f3 07       	cpc	r31, r19
    37d2:	d9 f7       	brne	.-10     	; 0x37ca <main+0x1eaa>
		printStatus("");
		break;
		
		case 352:	// SetIgainCh2
		ParamParse(rx_string, param);
		Igain_ch2 = atof(param);
    37d4:	ce 01       	movw	r24, r28
    37d6:	8a 5b       	subi	r24, 0xBA	; 186
    37d8:	9f 4f       	sbci	r25, 0xFF	; 255
    37da:	17 d7       	rcall	.+3630   	; 0x460a <atof>
    37dc:	60 93 6f 04 	sts	0x046F, r22
    37e0:	70 93 70 04 	sts	0x0470, r23
    37e4:	80 93 71 04 	sts	0x0471, r24
    37e8:	90 93 72 04 	sts	0x0472, r25
		printStatus("");
    37ec:	8d e3       	ldi	r24, 0x3D	; 61
    37ee:	91 e0       	ldi	r25, 0x01	; 1
    37f0:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    37f4:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <main+0x286>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    37f8:	6e e1       	ldi	r22, 0x1E	; 30
    37fa:	70 e0       	ldi	r23, 0x00	; 0
    37fc:	c5 01       	movw	r24, r10
    37fe:	4d d7       	rcall	.+3738   	; 0x469a <strnlen>
    3800:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    3802:	8b 30       	cpi	r24, 0x0B	; 11
    3804:	91 05       	cpc	r25, r1
    3806:	6c f0       	brlt	.+26     	; 0x3822 <main+0x1f02>
    3808:	ee eb       	ldi	r30, 0xBE	; 190
    380a:	f4 e0       	ldi	r31, 0x04	; 4
    380c:	de 01       	movw	r26, r28
    380e:	aa 5b       	subi	r26, 0xBA	; 186
    3810:	bf 4f       	sbci	r27, 0xFF	; 255
    3812:	8c 54       	subi	r24, 0x4C	; 76
    3814:	9b 4f       	sbci	r25, 0xFB	; 251
    3816:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    3818:	91 91       	ld	r25, Z+
    381a:	9d 93       	st	X+, r25
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    381c:	e2 17       	cp	r30, r18
    381e:	f3 07       	cpc	r31, r19
    3820:	d9 f7       	brne	.-10     	; 0x3818 <main+0x1ef8>
		printStatus("");
		break;
		
		case 353:	// SetDgain_ch2
		ParamParse(rx_string, param);
		Dgain_ch2 = atof(param);
    3822:	ce 01       	movw	r24, r28
    3824:	8a 5b       	subi	r24, 0xBA	; 186
    3826:	9f 4f       	sbci	r25, 0xFF	; 255
    3828:	f0 d6       	rcall	.+3552   	; 0x460a <atof>
    382a:	60 93 a8 04 	sts	0x04A8, r22
    382e:	70 93 a9 04 	sts	0x04A9, r23
    3832:	80 93 aa 04 	sts	0x04AA, r24
    3836:	90 93 ab 04 	sts	0x04AB, r25
		printStatus("");
    383a:	8d e3       	ldi	r24, 0x3D	; 61
    383c:	91 e0       	ldi	r25, 0x01	; 1
    383e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    3842:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <main+0x286>
		break;
		
		case 354:	// Set heater on/off ch2
		if(rx_string[10] == '1')
    3846:	d5 01       	movw	r26, r10
    3848:	1a 96       	adiw	r26, 0x0a	; 10
    384a:	8c 91       	ld	r24, X
    384c:	81 33       	cpi	r24, 0x31	; 49
    384e:	49 f4       	brne	.+18     	; 0x3862 <main+0x1f42>
		{
			heaterEnableCh2 = true;
    3850:	81 e0       	ldi	r24, 0x01	; 1
    3852:	80 93 b9 01 	sts	0x01B9, r24
			printStatus("ON");
    3856:	87 e3       	ldi	r24, 0x37	; 55
    3858:	91 e0       	ldi	r25, 0x01	; 1
    385a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    385e:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <main+0x286>
		}
		else if(rx_string[10] == '0')
    3862:	80 33       	cpi	r24, 0x30	; 48
    3864:	11 f0       	breq	.+4      	; 0x386a <main+0x1f4a>
    3866:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <main+0x286>
		{
			heaterEnableCh2 = false;
    386a:	10 92 b9 01 	sts	0x01B9, r1
			printStatus("OFF");
    386e:	8a e3       	ldi	r24, 0x3A	; 58
    3870:	91 e0       	ldi	r25, 0x01	; 1
    3872:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    3876:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <main+0x286>
		}
		break;
		
		// *** Channel 4 ***
		case 450:	// TempSetPoint3
		ParamParse(rx_string, param);
    387a:	be 01       	movw	r22, r28
    387c:	6a 5b       	subi	r22, 0xBA	; 186
    387e:	7f 4f       	sbci	r23, 0xFF	; 255
    3880:	c5 01       	movw	r24, r10
    3882:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <ParamParse>
		TempSetPoint3 = atof(param);
    3886:	ce 01       	movw	r24, r28
    3888:	8a 5b       	subi	r24, 0xBA	; 186
    388a:	9f 4f       	sbci	r25, 0xFF	; 255
    388c:	be d6       	rcall	.+3452   	; 0x460a <atof>
    388e:	60 93 5a 01 	sts	0x015A, r22
    3892:	70 93 5b 01 	sts	0x015B, r23
    3896:	80 93 5c 01 	sts	0x015C, r24
    389a:	90 93 5d 01 	sts	0x015D, r25
		printStatus("");
    389e:	8d e3       	ldi	r24, 0x3D	; 61
    38a0:	91 e0       	ldi	r25, 0x01	; 1
    38a2:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    38a6:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <main+0x286>
		break;
		
		case 451:	// SetPgainCh3
		ParamParse(rx_string, param);
    38aa:	be 01       	movw	r22, r28
    38ac:	6a 5b       	subi	r22, 0xBA	; 186
    38ae:	7f 4f       	sbci	r23, 0xFF	; 255
    38b0:	c5 01       	movw	r24, r10
    38b2:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <ParamParse>
		Pgain_ch3 = atof(param);
    38b6:	ce 01       	movw	r24, r28
    38b8:	8a 5b       	subi	r24, 0xBA	; 186
    38ba:	9f 4f       	sbci	r25, 0xFF	; 255
    38bc:	a6 d6       	rcall	.+3404   	; 0x460a <atof>
    38be:	60 93 04 03 	sts	0x0304, r22
    38c2:	70 93 05 03 	sts	0x0305, r23
    38c6:	80 93 06 03 	sts	0x0306, r24
    38ca:	90 93 07 03 	sts	0x0307, r25
		printStatus("");
    38ce:	8d e3       	ldi	r24, 0x3D	; 61
    38d0:	91 e0       	ldi	r25, 0x01	; 1
    38d2:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    38d6:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <main+0x286>
		break;
		
		case 452:	// SetIgainCh3
		ParamParse(rx_string, param);
    38da:	be 01       	movw	r22, r28
    38dc:	6a 5b       	subi	r22, 0xBA	; 186
    38de:	7f 4f       	sbci	r23, 0xFF	; 255
    38e0:	c5 01       	movw	r24, r10
    38e2:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <ParamParse>
		Igain_ch3 = atof(param);
    38e6:	ce 01       	movw	r24, r28
    38e8:	8a 5b       	subi	r24, 0xBA	; 186
    38ea:	9f 4f       	sbci	r25, 0xFF	; 255
    38ec:	8e d6       	rcall	.+3356   	; 0x460a <atof>
    38ee:	60 93 f9 01 	sts	0x01F9, r22
    38f2:	70 93 fa 01 	sts	0x01FA, r23
    38f6:	80 93 fb 01 	sts	0x01FB, r24
    38fa:	90 93 fc 01 	sts	0x01FC, r25
		printStatus("");
    38fe:	8d e3       	ldi	r24, 0x3D	; 61
    3900:	91 e0       	ldi	r25, 0x01	; 1
    3902:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    3906:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <main+0x286>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    390a:	6e e1       	ldi	r22, 0x1E	; 30
    390c:	70 e0       	ldi	r23, 0x00	; 0
    390e:	c5 01       	movw	r24, r10
    3910:	c4 d6       	rcall	.+3464   	; 0x469a <strnlen>
    3912:	05 97       	sbiw	r24, 0x05	; 5
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    3914:	8b 30       	cpi	r24, 0x0B	; 11
    3916:	91 05       	cpc	r25, r1
    3918:	6c f0       	brlt	.+26     	; 0x3934 <main+0x2014>
    391a:	ee eb       	ldi	r30, 0xBE	; 190
    391c:	f4 e0       	ldi	r31, 0x04	; 4
    391e:	de 01       	movw	r26, r28
    3920:	aa 5b       	subi	r26, 0xBA	; 186
    3922:	bf 4f       	sbci	r27, 0xFF	; 255
    3924:	8c 54       	subi	r24, 0x4C	; 76
    3926:	9b 4f       	sbci	r25, 0xFB	; 251
    3928:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    392a:	91 91       	ld	r25, Z+
    392c:	9d 93       	st	X+, r25
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;
		
	for(int i = 10; i < s_len; i++)
    392e:	e2 17       	cp	r30, r18
    3930:	f3 07       	cpc	r31, r19
    3932:	d9 f7       	brne	.-10     	; 0x392a <main+0x200a>
		printStatus("");
		break;
		
		case 453:	// SetDgain_ch3
		ParamParse(rx_string, param);
		Dgain_ch3 = atof(param);
    3934:	ce 01       	movw	r24, r28
    3936:	8a 5b       	subi	r24, 0xBA	; 186
    3938:	9f 4f       	sbci	r25, 0xFF	; 255
    393a:	67 d6       	rcall	.+3278   	; 0x460a <atof>
    393c:	60 93 73 04 	sts	0x0473, r22
    3940:	70 93 74 04 	sts	0x0474, r23
    3944:	80 93 75 04 	sts	0x0475, r24
    3948:	90 93 76 04 	sts	0x0476, r25
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    394c:	81 e2       	ldi	r24, 0x21	; 33
    394e:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    3950:	f5 01       	movw	r30, r10
    3952:	81 81       	ldd	r24, Z+1	; 0x01
    3954:	8f 8f       	std	Y+31, r24	; 0x1f
    3956:	82 81       	ldd	r24, Z+2	; 0x02
    3958:	88 a3       	std	Y+32, r24	; 0x20
    395a:	83 81       	ldd	r24, Z+3	; 0x03
    395c:	89 a3       	std	Y+33, r24	; 0x21
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    395e:	1a a2       	std	Y+34, r1	; 0x22
    3960:	1b a2       	std	Y+35, r1	; 0x23
    3962:	1c a2       	std	Y+36, r1	; 0x24
    3964:	8e 01       	movw	r16, r28
    3966:	02 5e       	subi	r16, 0xE2	; 226
    3968:	1f 4f       	sbci	r17, 0xFF	; 255
    396a:	ae 01       	movw	r20, r28
    396c:	4e 5d       	subi	r20, 0xDE	; 222
    396e:	5f 4f       	sbci	r21, 0xFF	; 255
    3970:	f8 01       	movw	r30, r16
    3972:	80 e0       	ldi	r24, 0x00	; 0
    3974:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    3976:	b8 e0       	ldi	r27, 0x08	; 8
    3978:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    397a:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    397c:	29 2f       	mov	r18, r25
    397e:	33 27       	eor	r19, r19
    3980:	27 fd       	sbrc	r18, 7
    3982:	3a 95       	dec	r19
    3984:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
    3986:	32 2f       	mov	r19, r18
    3988:	22 27       	eor	r18, r18
    398a:	6b 2f       	mov	r22, r27
    398c:	7f 2d       	mov	r23, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    398e:	33 23       	and	r19, r19
    3990:	3c f4       	brge	.+14     	; 0x39a0 <main+0x2080>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    3992:	22 0f       	add	r18, r18
    3994:	33 1f       	adc	r19, r19
    3996:	a1 e2       	ldi	r26, 0x21	; 33
    3998:	2a 27       	eor	r18, r26
    399a:	a0 e1       	ldi	r26, 0x10	; 16
    399c:	3a 27       	eor	r19, r26
    399e:	02 c0       	rjmp	.+4      	; 0x39a4 <main+0x2084>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    39a0:	22 0f       	add	r18, r18
    39a2:	33 1f       	adc	r19, r19
    39a4:	61 50       	subi	r22, 0x01	; 1
    39a6:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    39a8:	91 f7       	brne	.-28     	; 0x398e <main+0x206e>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    39aa:	98 2f       	mov	r25, r24
    39ac:	88 27       	eor	r24, r24
    39ae:	82 27       	eor	r24, r18
    39b0:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    39b2:	e4 17       	cp	r30, r20
    39b4:	f5 07       	cpc	r31, r21
    39b6:	09 f7       	brne	.-62     	; 0x397a <main+0x205a>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    39b8:	7c 01       	movw	r14, r24
    39ba:	40 e1       	ldi	r20, 0x10	; 16
    39bc:	62 e6       	ldi	r22, 0x62	; 98
    39be:	74 e0       	ldi	r23, 0x04	; 4
    39c0:	81 d6       	rcall	.+3330   	; 0x46c4 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    39c2:	82 e6       	ldi	r24, 0x62	; 98
    39c4:	94 e0       	ldi	r25, 0x04	; 4
    39c6:	74 d6       	rcall	.+3304   	; 0x46b0 <strupr>
	if(crcXmodem < 0x10)
    39c8:	b0 e1       	ldi	r27, 0x10	; 16
    39ca:	eb 16       	cp	r14, r27
    39cc:	f1 04       	cpc	r15, r1
    39ce:	38 f4       	brcc	.+14     	; 0x39de <main+0x20be>
	{
		tx_string[cnt+4] = crc[0];
    39d0:	80 91 62 04 	lds	r24, 0x0462
    39d4:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = '0';
    39d6:	80 e3       	ldi	r24, 0x30	; 48
    39d8:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = '0';
    39da:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';
    39dc:	8a a3       	std	Y+34, r24	; 0x22
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    39de:	c7 01       	movw	r24, r14
    39e0:	40 97       	sbiw	r24, 0x10	; 16
    39e2:	80 3f       	cpi	r24, 0xF0	; 240
    39e4:	91 05       	cpc	r25, r1
    39e6:	48 f4       	brcc	.+18     	; 0x39fa <main+0x20da>
	{
		tx_string[cnt+4] = crc[1];
    39e8:	e2 e6       	ldi	r30, 0x62	; 98
    39ea:	f4 e0       	ldi	r31, 0x04	; 4
    39ec:	81 81       	ldd	r24, Z+1	; 0x01
    39ee:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[0];
    39f0:	80 81       	ld	r24, Z
    39f2:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = '0';
    39f4:	80 e3       	ldi	r24, 0x30	; 48
    39f6:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';		
    39f8:	8a a3       	std	Y+34, r24	; 0x22
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    39fa:	c7 01       	movw	r24, r14
    39fc:	9a 95       	dec	r25
    39fe:	81 15       	cp	r24, r1
    3a00:	9f 40       	sbci	r25, 0x0F	; 15
    3a02:	50 f4       	brcc	.+20     	; 0x3a18 <main+0x20f8>
	{
		tx_string[cnt+4] = crc[2];
    3a04:	e2 e6       	ldi	r30, 0x62	; 98
    3a06:	f4 e0       	ldi	r31, 0x04	; 4
    3a08:	82 81       	ldd	r24, Z+2	; 0x02
    3a0a:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[1];
    3a0c:	81 81       	ldd	r24, Z+1	; 0x01
    3a0e:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = crc[0];
    3a10:	80 81       	ld	r24, Z
    3a12:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';		
    3a14:	80 e3       	ldi	r24, 0x30	; 48
    3a16:	8a a3       	std	Y+34, r24	; 0x22
	}
	if(crcXmodem >= 0x1000)
    3a18:	e1 14       	cp	r14, r1
    3a1a:	f0 e1       	ldi	r31, 0x10	; 16
    3a1c:	ff 06       	cpc	r15, r31
    3a1e:	50 f0       	brcs	.+20     	; 0x3a34 <main+0x2114>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    3a20:	e2 e6       	ldi	r30, 0x62	; 98
    3a22:	f4 e0       	ldi	r31, 0x04	; 4
    3a24:	80 81       	ld	r24, Z
    3a26:	8a a3       	std	Y+34, r24	; 0x22
		tx_string[cnt+2] = crc[1];
    3a28:	81 81       	ldd	r24, Z+1	; 0x01
    3a2a:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+3] = crc[2];
    3a2c:	82 81       	ldd	r24, Z+2	; 0x02
    3a2e:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+4] = crc[3];
    3a30:	83 81       	ldd	r24, Z+3	; 0x03
    3a32:	8d a3       	std	Y+37, r24	; 0x25
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    3a34:	8d e0       	ldi	r24, 0x0D	; 13
    3a36:	8e a3       	std	Y+38, r24	; 0x26
    3a38:	ae 01       	movw	r20, r28
    3a3a:	49 5d       	subi	r20, 0xD9	; 217
    3a3c:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3a3e:	e2 ed       	ldi	r30, 0xD2	; 210
    3a40:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3a42:	0f 2e       	mov	r0, r31
    3a44:	f1 ec       	ldi	r31, 0xC1	; 193
    3a46:	cf 2e       	mov	r12, r31
    3a48:	d1 2c       	mov	r13, r1
    3a4a:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3a4c:	f1 2c       	mov	r15, r1
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    3a4e:	d8 01       	movw	r26, r16
    3a50:	2d 91       	ld	r18, X+
    3a52:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    3a54:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3a56:	91 81       	ldd	r25, Z+1	; 0x01
    3a58:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    3a5a:	98 13       	cpse	r25, r24
    3a5c:	04 c0       	rjmp	.+8      	; 0x3a66 <main+0x2146>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3a5e:	d6 01       	movw	r26, r12
    3a60:	8c 91       	ld	r24, X
    3a62:	80 62       	ori	r24, 0x20	; 32
    3a64:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    3a66:	30 81       	ld	r19, Z
    3a68:	83 81       	ldd	r24, Z+3	; 0x03
    3a6a:	94 81       	ldd	r25, Z+4	; 0x04
    3a6c:	83 0f       	add	r24, r19
    3a6e:	91 1d       	adc	r25, r1
    3a70:	dc 01       	movw	r26, r24
    3a72:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    3a74:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3a76:	68 2f       	mov	r22, r24
    3a78:	70 e0       	ldi	r23, 0x00	; 0
    3a7a:	22 81       	ldd	r18, Z+2	; 0x02
    3a7c:	30 e0       	ldi	r19, 0x00	; 0
    3a7e:	21 50       	subi	r18, 0x01	; 1
    3a80:	31 09       	sbc	r19, r1
    3a82:	62 17       	cp	r22, r18
    3a84:	73 07       	cpc	r23, r19
    3a86:	11 f0       	breq	.+4      	; 0x3a8c <main+0x216c>
    3a88:	8f 5f       	subi	r24, 0xFF	; 255
    3a8a:	01 c0       	rjmp	.+2      	; 0x3a8e <main+0x216e>
    3a8c:	8f 2d       	mov	r24, r15
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    3a8e:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    3a90:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    3a92:	04 17       	cp	r16, r20
    3a94:	15 07       	cpc	r17, r21
    3a96:	d9 f6       	brne	.-74     	; 0x3a4e <main+0x212e>
    3a98:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <main+0x286>
		Dgain_ch3 = atof(param);
		printStatus("");
		break;
		
		case 454:	// Set heater on/off ch3
		if(rx_string[10] == '1')
    3a9c:	f5 01       	movw	r30, r10
    3a9e:	82 85       	ldd	r24, Z+10	; 0x0a
    3aa0:	81 33       	cpi	r24, 0x31	; 49
    3aa2:	09 f0       	breq	.+2      	; 0x3aa6 <main+0x2186>
    3aa4:	ae c0       	rjmp	.+348    	; 0x3c02 <main+0x22e2>
		{
			heaterEnableCh3 = true;
    3aa6:	81 e0       	ldi	r24, 0x01	; 1
    3aa8:	80 93 b8 01 	sts	0x01B8, r24
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    3aac:	81 e2       	ldi	r24, 0x21	; 33
    3aae:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    3ab0:	81 81       	ldd	r24, Z+1	; 0x01
    3ab2:	8f 8f       	std	Y+31, r24	; 0x1f
    3ab4:	82 81       	ldd	r24, Z+2	; 0x02
    3ab6:	88 a3       	std	Y+32, r24	; 0x20
    3ab8:	83 81       	ldd	r24, Z+3	; 0x03
    3aba:	89 a3       	std	Y+33, r24	; 0x21
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    3abc:	8f e4       	ldi	r24, 0x4F	; 79
    3abe:	8a a3       	std	Y+34, r24	; 0x22
    3ac0:	8e e4       	ldi	r24, 0x4E	; 78
    3ac2:	8b a3       	std	Y+35, r24	; 0x23
    3ac4:	1c a2       	std	Y+36, r1	; 0x24
    3ac6:	1d a2       	std	Y+37, r1	; 0x25
    3ac8:	1e a2       	std	Y+38, r1	; 0x26
    3aca:	8e 01       	movw	r16, r28
    3acc:	02 5e       	subi	r16, 0xE2	; 226
    3ace:	1f 4f       	sbci	r17, 0xFF	; 255
    3ad0:	ae 01       	movw	r20, r28
    3ad2:	4c 5d       	subi	r20, 0xDC	; 220
    3ad4:	5f 4f       	sbci	r21, 0xFF	; 255
    3ad6:	f8 01       	movw	r30, r16
    3ad8:	80 e0       	ldi	r24, 0x00	; 0
    3ada:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    3adc:	b8 e0       	ldi	r27, 0x08	; 8
    3ade:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    3ae0:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    3ae2:	29 2f       	mov	r18, r25
    3ae4:	33 27       	eor	r19, r19
    3ae6:	27 fd       	sbrc	r18, 7
    3ae8:	3a 95       	dec	r19
    3aea:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
    3aec:	32 2f       	mov	r19, r18
    3aee:	22 27       	eor	r18, r18
    3af0:	6b 2f       	mov	r22, r27
    3af2:	7f 2d       	mov	r23, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    3af4:	33 23       	and	r19, r19
    3af6:	3c f4       	brge	.+14     	; 0x3b06 <main+0x21e6>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    3af8:	22 0f       	add	r18, r18
    3afa:	33 1f       	adc	r19, r19
    3afc:	a1 e2       	ldi	r26, 0x21	; 33
    3afe:	2a 27       	eor	r18, r26
    3b00:	a0 e1       	ldi	r26, 0x10	; 16
    3b02:	3a 27       	eor	r19, r26
    3b04:	02 c0       	rjmp	.+4      	; 0x3b0a <main+0x21ea>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    3b06:	22 0f       	add	r18, r18
    3b08:	33 1f       	adc	r19, r19
    3b0a:	61 50       	subi	r22, 0x01	; 1
    3b0c:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    3b0e:	91 f7       	brne	.-28     	; 0x3af4 <main+0x21d4>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    3b10:	98 2f       	mov	r25, r24
    3b12:	88 27       	eor	r24, r24
    3b14:	82 27       	eor	r24, r18
    3b16:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    3b18:	e4 17       	cp	r30, r20
    3b1a:	f5 07       	cpc	r31, r21
    3b1c:	09 f7       	brne	.-62     	; 0x3ae0 <main+0x21c0>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    3b1e:	7c 01       	movw	r14, r24
    3b20:	40 e1       	ldi	r20, 0x10	; 16
    3b22:	62 e6       	ldi	r22, 0x62	; 98
    3b24:	74 e0       	ldi	r23, 0x04	; 4
    3b26:	ce d5       	rcall	.+2972   	; 0x46c4 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    3b28:	82 e6       	ldi	r24, 0x62	; 98
    3b2a:	94 e0       	ldi	r25, 0x04	; 4
    3b2c:	c1 d5       	rcall	.+2946   	; 0x46b0 <strupr>
	if(crcXmodem < 0x10)
    3b2e:	b0 e1       	ldi	r27, 0x10	; 16
    3b30:	eb 16       	cp	r14, r27
    3b32:	f1 04       	cpc	r15, r1
    3b34:	38 f4       	brcc	.+14     	; 0x3b44 <main+0x2224>
	{
		tx_string[cnt+4] = crc[0];
    3b36:	80 91 62 04 	lds	r24, 0x0462
    3b3a:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+3] = '0';
    3b3c:	80 e3       	ldi	r24, 0x30	; 48
    3b3e:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+2] = '0';
    3b40:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+1] = '0';
    3b42:	8c a3       	std	Y+36, r24	; 0x24
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    3b44:	c7 01       	movw	r24, r14
    3b46:	40 97       	sbiw	r24, 0x10	; 16
    3b48:	80 3f       	cpi	r24, 0xF0	; 240
    3b4a:	91 05       	cpc	r25, r1
    3b4c:	48 f4       	brcc	.+18     	; 0x3b60 <main+0x2240>
	{
		tx_string[cnt+4] = crc[1];
    3b4e:	e2 e6       	ldi	r30, 0x62	; 98
    3b50:	f4 e0       	ldi	r31, 0x04	; 4
    3b52:	81 81       	ldd	r24, Z+1	; 0x01
    3b54:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+3] = crc[0];
    3b56:	80 81       	ld	r24, Z
    3b58:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+2] = '0';
    3b5a:	80 e3       	ldi	r24, 0x30	; 48
    3b5c:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+1] = '0';		
    3b5e:	8c a3       	std	Y+36, r24	; 0x24
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    3b60:	c7 01       	movw	r24, r14
    3b62:	9a 95       	dec	r25
    3b64:	81 15       	cp	r24, r1
    3b66:	9f 40       	sbci	r25, 0x0F	; 15
    3b68:	50 f4       	brcc	.+20     	; 0x3b7e <main+0x225e>
	{
		tx_string[cnt+4] = crc[2];
    3b6a:	e2 e6       	ldi	r30, 0x62	; 98
    3b6c:	f4 e0       	ldi	r31, 0x04	; 4
    3b6e:	82 81       	ldd	r24, Z+2	; 0x02
    3b70:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+3] = crc[1];
    3b72:	81 81       	ldd	r24, Z+1	; 0x01
    3b74:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+2] = crc[0];
    3b76:	80 81       	ld	r24, Z
    3b78:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+1] = '0';		
    3b7a:	80 e3       	ldi	r24, 0x30	; 48
    3b7c:	8c a3       	std	Y+36, r24	; 0x24
	}
	if(crcXmodem >= 0x1000)
    3b7e:	e1 14       	cp	r14, r1
    3b80:	f0 e1       	ldi	r31, 0x10	; 16
    3b82:	ff 06       	cpc	r15, r31
    3b84:	50 f0       	brcs	.+20     	; 0x3b9a <main+0x227a>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    3b86:	e2 e6       	ldi	r30, 0x62	; 98
    3b88:	f4 e0       	ldi	r31, 0x04	; 4
    3b8a:	80 81       	ld	r24, Z
    3b8c:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = crc[1];
    3b8e:	81 81       	ldd	r24, Z+1	; 0x01
    3b90:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[2];
    3b92:	82 81       	ldd	r24, Z+2	; 0x02
    3b94:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+4] = crc[3];
    3b96:	83 81       	ldd	r24, Z+3	; 0x03
    3b98:	8f a3       	std	Y+39, r24	; 0x27
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    3b9a:	8d e0       	ldi	r24, 0x0D	; 13
    3b9c:	88 a7       	std	Y+40, r24	; 0x28
    3b9e:	ae 01       	movw	r20, r28
    3ba0:	47 5d       	subi	r20, 0xD7	; 215
    3ba2:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3ba4:	e2 ed       	ldi	r30, 0xD2	; 210
    3ba6:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3ba8:	0f 2e       	mov	r0, r31
    3baa:	f1 ec       	ldi	r31, 0xC1	; 193
    3bac:	cf 2e       	mov	r12, r31
    3bae:	d1 2c       	mov	r13, r1
    3bb0:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3bb2:	f1 2c       	mov	r15, r1
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    3bb4:	d8 01       	movw	r26, r16
    3bb6:	2d 91       	ld	r18, X+
    3bb8:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    3bba:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3bbc:	91 81       	ldd	r25, Z+1	; 0x01
    3bbe:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    3bc0:	98 13       	cpse	r25, r24
    3bc2:	04 c0       	rjmp	.+8      	; 0x3bcc <main+0x22ac>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3bc4:	d6 01       	movw	r26, r12
    3bc6:	8c 91       	ld	r24, X
    3bc8:	80 62       	ori	r24, 0x20	; 32
    3bca:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    3bcc:	30 81       	ld	r19, Z
    3bce:	83 81       	ldd	r24, Z+3	; 0x03
    3bd0:	94 81       	ldd	r25, Z+4	; 0x04
    3bd2:	83 0f       	add	r24, r19
    3bd4:	91 1d       	adc	r25, r1
    3bd6:	dc 01       	movw	r26, r24
    3bd8:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    3bda:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3bdc:	68 2f       	mov	r22, r24
    3bde:	70 e0       	ldi	r23, 0x00	; 0
    3be0:	22 81       	ldd	r18, Z+2	; 0x02
    3be2:	30 e0       	ldi	r19, 0x00	; 0
    3be4:	21 50       	subi	r18, 0x01	; 1
    3be6:	31 09       	sbc	r19, r1
    3be8:	62 17       	cp	r22, r18
    3bea:	73 07       	cpc	r23, r19
    3bec:	11 f0       	breq	.+4      	; 0x3bf2 <main+0x22d2>
    3bee:	8f 5f       	subi	r24, 0xFF	; 255
    3bf0:	01 c0       	rjmp	.+2      	; 0x3bf4 <main+0x22d4>
    3bf2:	8f 2d       	mov	r24, r15
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    3bf4:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    3bf6:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    3bf8:	04 17       	cp	r16, r20
    3bfa:	15 07       	cpc	r17, r21
    3bfc:	d9 f6       	brne	.-74     	; 0x3bb4 <main+0x2294>
    3bfe:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <main+0x286>
		if(rx_string[10] == '1')
		{
			heaterEnableCh3 = true;
			printStatus("ON");
		}
		else if(rx_string[10] == '0')
    3c02:	80 33       	cpi	r24, 0x30	; 48
    3c04:	11 f0       	breq	.+4      	; 0x3c0a <main+0x22ea>
    3c06:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <main+0x286>
		{
			heaterEnableCh3 = false;
    3c0a:	10 92 b8 01 	sts	0x01B8, r1
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    3c0e:	81 e2       	ldi	r24, 0x21	; 33
    3c10:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    3c12:	f5 01       	movw	r30, r10
    3c14:	81 81       	ldd	r24, Z+1	; 0x01
    3c16:	8f 8f       	std	Y+31, r24	; 0x1f
    3c18:	82 81       	ldd	r24, Z+2	; 0x02
    3c1a:	88 a3       	std	Y+32, r24	; 0x20
    3c1c:	83 81       	ldd	r24, Z+3	; 0x03
    3c1e:	89 a3       	std	Y+33, r24	; 0x21
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    3c20:	8f e4       	ldi	r24, 0x4F	; 79
    3c22:	8a a3       	std	Y+34, r24	; 0x22
    3c24:	86 e4       	ldi	r24, 0x46	; 70
    3c26:	8b a3       	std	Y+35, r24	; 0x23
    3c28:	8c a3       	std	Y+36, r24	; 0x24
    3c2a:	1d a2       	std	Y+37, r1	; 0x25
    3c2c:	1e a2       	std	Y+38, r1	; 0x26
    3c2e:	1f a2       	std	Y+39, r1	; 0x27
    3c30:	8e 01       	movw	r16, r28
    3c32:	02 5e       	subi	r16, 0xE2	; 226
    3c34:	1f 4f       	sbci	r17, 0xFF	; 255
    3c36:	ae 01       	movw	r20, r28
    3c38:	4b 5d       	subi	r20, 0xDB	; 219
    3c3a:	5f 4f       	sbci	r21, 0xFF	; 255
    3c3c:	f8 01       	movw	r30, r16
    3c3e:	80 e0       	ldi	r24, 0x00	; 0
    3c40:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    3c42:	b8 e0       	ldi	r27, 0x08	; 8
    3c44:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    3c46:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    3c48:	29 2f       	mov	r18, r25
    3c4a:	33 27       	eor	r19, r19
    3c4c:	27 fd       	sbrc	r18, 7
    3c4e:	3a 95       	dec	r19
    3c50:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
    3c52:	32 2f       	mov	r19, r18
    3c54:	22 27       	eor	r18, r18
    3c56:	6b 2f       	mov	r22, r27
    3c58:	7f 2d       	mov	r23, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    3c5a:	33 23       	and	r19, r19
    3c5c:	3c f4       	brge	.+14     	; 0x3c6c <main+0x234c>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    3c5e:	22 0f       	add	r18, r18
    3c60:	33 1f       	adc	r19, r19
    3c62:	a1 e2       	ldi	r26, 0x21	; 33
    3c64:	2a 27       	eor	r18, r26
    3c66:	a0 e1       	ldi	r26, 0x10	; 16
    3c68:	3a 27       	eor	r19, r26
    3c6a:	02 c0       	rjmp	.+4      	; 0x3c70 <main+0x2350>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    3c6c:	22 0f       	add	r18, r18
    3c6e:	33 1f       	adc	r19, r19
    3c70:	61 50       	subi	r22, 0x01	; 1
    3c72:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    3c74:	91 f7       	brne	.-28     	; 0x3c5a <main+0x233a>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    3c76:	98 2f       	mov	r25, r24
    3c78:	88 27       	eor	r24, r24
    3c7a:	82 27       	eor	r24, r18
    3c7c:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    3c7e:	e4 17       	cp	r30, r20
    3c80:	f5 07       	cpc	r31, r21
    3c82:	09 f7       	brne	.-62     	; 0x3c46 <main+0x2326>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    3c84:	7c 01       	movw	r14, r24
    3c86:	40 e1       	ldi	r20, 0x10	; 16
    3c88:	62 e6       	ldi	r22, 0x62	; 98
    3c8a:	74 e0       	ldi	r23, 0x04	; 4
    3c8c:	1b d5       	rcall	.+2614   	; 0x46c4 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    3c8e:	82 e6       	ldi	r24, 0x62	; 98
    3c90:	94 e0       	ldi	r25, 0x04	; 4
    3c92:	0e d5       	rcall	.+2588   	; 0x46b0 <strupr>
	if(crcXmodem < 0x10)
    3c94:	b0 e1       	ldi	r27, 0x10	; 16
    3c96:	eb 16       	cp	r14, r27
    3c98:	f1 04       	cpc	r15, r1
    3c9a:	38 f4       	brcc	.+14     	; 0x3caa <main+0x238a>
	{
		tx_string[cnt+4] = crc[0];
    3c9c:	80 91 62 04 	lds	r24, 0x0462
    3ca0:	88 a7       	std	Y+40, r24	; 0x28
		tx_string[cnt+3] = '0';
    3ca2:	80 e3       	ldi	r24, 0x30	; 48
    3ca4:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+2] = '0';
    3ca6:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+1] = '0';
    3ca8:	8d a3       	std	Y+37, r24	; 0x25
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    3caa:	c7 01       	movw	r24, r14
    3cac:	40 97       	sbiw	r24, 0x10	; 16
    3cae:	80 3f       	cpi	r24, 0xF0	; 240
    3cb0:	91 05       	cpc	r25, r1
    3cb2:	48 f4       	brcc	.+18     	; 0x3cc6 <main+0x23a6>
	{
		tx_string[cnt+4] = crc[1];
    3cb4:	e2 e6       	ldi	r30, 0x62	; 98
    3cb6:	f4 e0       	ldi	r31, 0x04	; 4
    3cb8:	81 81       	ldd	r24, Z+1	; 0x01
    3cba:	88 a7       	std	Y+40, r24	; 0x28
		tx_string[cnt+3] = crc[0];
    3cbc:	80 81       	ld	r24, Z
    3cbe:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+2] = '0';
    3cc0:	80 e3       	ldi	r24, 0x30	; 48
    3cc2:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+1] = '0';		
    3cc4:	8d a3       	std	Y+37, r24	; 0x25
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    3cc6:	c7 01       	movw	r24, r14
    3cc8:	9a 95       	dec	r25
    3cca:	81 15       	cp	r24, r1
    3ccc:	9f 40       	sbci	r25, 0x0F	; 15
    3cce:	50 f4       	brcc	.+20     	; 0x3ce4 <main+0x23c4>
	{
		tx_string[cnt+4] = crc[2];
    3cd0:	e2 e6       	ldi	r30, 0x62	; 98
    3cd2:	f4 e0       	ldi	r31, 0x04	; 4
    3cd4:	82 81       	ldd	r24, Z+2	; 0x02
    3cd6:	88 a7       	std	Y+40, r24	; 0x28
		tx_string[cnt+3] = crc[1];
    3cd8:	81 81       	ldd	r24, Z+1	; 0x01
    3cda:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+2] = crc[0];
    3cdc:	80 81       	ld	r24, Z
    3cde:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+1] = '0';		
    3ce0:	80 e3       	ldi	r24, 0x30	; 48
    3ce2:	8d a3       	std	Y+37, r24	; 0x25
	}
	if(crcXmodem >= 0x1000)
    3ce4:	e1 14       	cp	r14, r1
    3ce6:	f0 e1       	ldi	r31, 0x10	; 16
    3ce8:	ff 06       	cpc	r15, r31
    3cea:	50 f0       	brcs	.+20     	; 0x3d00 <main+0x23e0>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    3cec:	e2 e6       	ldi	r30, 0x62	; 98
    3cee:	f4 e0       	ldi	r31, 0x04	; 4
    3cf0:	80 81       	ld	r24, Z
    3cf2:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+2] = crc[1];
    3cf4:	81 81       	ldd	r24, Z+1	; 0x01
    3cf6:	8e a3       	std	Y+38, r24	; 0x26
		tx_string[cnt+3] = crc[2];
    3cf8:	82 81       	ldd	r24, Z+2	; 0x02
    3cfa:	8f a3       	std	Y+39, r24	; 0x27
		tx_string[cnt+4] = crc[3];
    3cfc:	83 81       	ldd	r24, Z+3	; 0x03
    3cfe:	88 a7       	std	Y+40, r24	; 0x28
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    3d00:	8d e0       	ldi	r24, 0x0D	; 13
    3d02:	89 a7       	std	Y+41, r24	; 0x29
    3d04:	ae 01       	movw	r20, r28
    3d06:	46 5d       	subi	r20, 0xD6	; 214
    3d08:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3d0a:	e2 ed       	ldi	r30, 0xD2	; 210
    3d0c:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3d0e:	0f 2e       	mov	r0, r31
    3d10:	f1 ec       	ldi	r31, 0xC1	; 193
    3d12:	cf 2e       	mov	r12, r31
    3d14:	d1 2c       	mov	r13, r1
    3d16:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3d18:	f1 2c       	mov	r15, r1
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    3d1a:	d8 01       	movw	r26, r16
    3d1c:	2d 91       	ld	r18, X+
    3d1e:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    3d20:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3d22:	91 81       	ldd	r25, Z+1	; 0x01
    3d24:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    3d26:	98 13       	cpse	r25, r24
    3d28:	04 c0       	rjmp	.+8      	; 0x3d32 <main+0x2412>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3d2a:	d6 01       	movw	r26, r12
    3d2c:	8c 91       	ld	r24, X
    3d2e:	80 62       	ori	r24, 0x20	; 32
    3d30:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    3d32:	30 81       	ld	r19, Z
    3d34:	83 81       	ldd	r24, Z+3	; 0x03
    3d36:	94 81       	ldd	r25, Z+4	; 0x04
    3d38:	83 0f       	add	r24, r19
    3d3a:	91 1d       	adc	r25, r1
    3d3c:	dc 01       	movw	r26, r24
    3d3e:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    3d40:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3d42:	68 2f       	mov	r22, r24
    3d44:	70 e0       	ldi	r23, 0x00	; 0
    3d46:	22 81       	ldd	r18, Z+2	; 0x02
    3d48:	30 e0       	ldi	r19, 0x00	; 0
    3d4a:	21 50       	subi	r18, 0x01	; 1
    3d4c:	31 09       	sbc	r19, r1
    3d4e:	62 17       	cp	r22, r18
    3d50:	73 07       	cpc	r23, r19
    3d52:	11 f0       	breq	.+4      	; 0x3d58 <main+0x2438>
    3d54:	8f 5f       	subi	r24, 0xFF	; 255
    3d56:	01 c0       	rjmp	.+2      	; 0x3d5a <main+0x243a>
    3d58:	8f 2d       	mov	r24, r15
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    3d5a:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    3d5c:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    3d5e:	04 17       	cp	r16, r20
    3d60:	15 07       	cpc	r17, r21
    3d62:	d9 f6       	brne	.-74     	; 0x3d1a <main+0x23fa>
    3d64:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <main+0x286>
	Dgain_ch3 = eeprom_read_float((float*)eepromAdr_DgainCh3);			
}

static inline void WriteParamToEEPROM()
{
	eeprom_write_float( (float*)eepromAdr_TempSetPoint0, TempSetPoint0 );
    3d68:	40 91 a2 01 	lds	r20, 0x01A2
    3d6c:	50 91 a3 01 	lds	r21, 0x01A3
    3d70:	60 91 a4 01 	lds	r22, 0x01A4
    3d74:	70 91 a5 01 	lds	r23, 0x01A5
    3d78:	80 e0       	ldi	r24, 0x00	; 0
    3d7a:	90 e0       	ldi	r25, 0x00	; 0
    3d7c:	65 d6       	rcall	.+3274   	; 0x4a48 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_PgainCh0, Pgain_ch0 );
    3d7e:	40 91 00 03 	lds	r20, 0x0300
    3d82:	50 91 01 03 	lds	r21, 0x0301
    3d86:	60 91 02 03 	lds	r22, 0x0302
    3d8a:	70 91 03 03 	lds	r23, 0x0303
    3d8e:	84 e0       	ldi	r24, 0x04	; 4
    3d90:	90 e0       	ldi	r25, 0x00	; 0
    3d92:	5a d6       	rcall	.+3252   	; 0x4a48 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_IgainCh0, Igain_ch0 );
    3d94:	40 91 b0 04 	lds	r20, 0x04B0
    3d98:	50 91 b1 04 	lds	r21, 0x04B1
    3d9c:	60 91 b2 04 	lds	r22, 0x04B2
    3da0:	70 91 b3 04 	lds	r23, 0x04B3
    3da4:	88 e0       	ldi	r24, 0x08	; 8
    3da6:	90 e0       	ldi	r25, 0x00	; 0
    3da8:	4f d6       	rcall	.+3230   	; 0x4a48 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_DgainCh0, Dgain_ch0 );
    3daa:	40 91 fd 01 	lds	r20, 0x01FD
    3dae:	50 91 fe 01 	lds	r21, 0x01FE
    3db2:	60 91 ff 01 	lds	r22, 0x01FF
    3db6:	70 91 00 02 	lds	r23, 0x0200
    3dba:	8c e0       	ldi	r24, 0x0C	; 12
    3dbc:	90 e0       	ldi	r25, 0x00	; 0
    3dbe:	44 d6       	rcall	.+3208   	; 0x4a48 <eeprom_write_dword>
	
	eeprom_write_float( (float*)eepromAdr_TempSetPoint1, TempSetPoint1 );
    3dc0:	40 91 8a 01 	lds	r20, 0x018A
    3dc4:	50 91 8b 01 	lds	r21, 0x018B
    3dc8:	60 91 8c 01 	lds	r22, 0x018C
    3dcc:	70 91 8d 01 	lds	r23, 0x018D
    3dd0:	80 e1       	ldi	r24, 0x10	; 16
    3dd2:	90 e0       	ldi	r25, 0x00	; 0
    3dd4:	39 d6       	rcall	.+3186   	; 0x4a48 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_PgainCh1, Pgain_ch1 );
    3dd6:	40 91 6b 04 	lds	r20, 0x046B
    3dda:	50 91 6c 04 	lds	r21, 0x046C
    3dde:	60 91 6d 04 	lds	r22, 0x046D
    3de2:	70 91 6e 04 	lds	r23, 0x046E
    3de6:	84 e1       	ldi	r24, 0x14	; 20
    3de8:	90 e0       	ldi	r25, 0x00	; 0
    3dea:	2e d6       	rcall	.+3164   	; 0x4a48 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_IgainCh1, Igain_ch1 );
    3dec:	40 91 c6 01 	lds	r20, 0x01C6
    3df0:	50 91 c7 01 	lds	r21, 0x01C7
    3df4:	60 91 c8 01 	lds	r22, 0x01C8
    3df8:	70 91 c9 01 	lds	r23, 0x01C9
    3dfc:	88 e1       	ldi	r24, 0x18	; 24
    3dfe:	90 e0       	ldi	r25, 0x00	; 0
    3e00:	23 d6       	rcall	.+3142   	; 0x4a48 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_DgainCh1, Dgain_ch1 );
    3e02:	40 91 ac 04 	lds	r20, 0x04AC
    3e06:	50 91 ad 04 	lds	r21, 0x04AD
    3e0a:	60 91 ae 04 	lds	r22, 0x04AE
    3e0e:	70 91 af 04 	lds	r23, 0x04AF
    3e12:	8c e1       	ldi	r24, 0x1C	; 28
    3e14:	90 e0       	ldi	r25, 0x00	; 0
    3e16:	18 d6       	rcall	.+3120   	; 0x4a48 <eeprom_write_dword>
	
	eeprom_write_float( (float*)eepromAdr_TempSetPoint2, TempSetPoint2 );
    3e18:	40 91 72 01 	lds	r20, 0x0172
    3e1c:	50 91 73 01 	lds	r21, 0x0173
    3e20:	60 91 74 01 	lds	r22, 0x0174
    3e24:	70 91 75 01 	lds	r23, 0x0175
    3e28:	80 e2       	ldi	r24, 0x20	; 32
    3e2a:	90 e0       	ldi	r25, 0x00	; 0
    3e2c:	0d d6       	rcall	.+3098   	; 0x4a48 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_PgainCh2, Pgain_ch2 );
    3e2e:	40 91 67 04 	lds	r20, 0x0467
    3e32:	50 91 68 04 	lds	r21, 0x0468
    3e36:	60 91 69 04 	lds	r22, 0x0469
    3e3a:	70 91 6a 04 	lds	r23, 0x046A
    3e3e:	84 e2       	ldi	r24, 0x24	; 36
    3e40:	90 e0       	ldi	r25, 0x00	; 0
    3e42:	02 d6       	rcall	.+3076   	; 0x4a48 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_IgainCh2, Igain_ch2 );
    3e44:	40 91 6f 04 	lds	r20, 0x046F
    3e48:	50 91 70 04 	lds	r21, 0x0470
    3e4c:	60 91 71 04 	lds	r22, 0x0471
    3e50:	70 91 72 04 	lds	r23, 0x0472
    3e54:	88 e2       	ldi	r24, 0x28	; 40
    3e56:	90 e0       	ldi	r25, 0x00	; 0
    3e58:	f7 d5       	rcall	.+3054   	; 0x4a48 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_DgainCh2, Dgain_ch2 );
    3e5a:	40 91 a8 04 	lds	r20, 0x04A8
    3e5e:	50 91 a9 04 	lds	r21, 0x04A9
    3e62:	60 91 aa 04 	lds	r22, 0x04AA
    3e66:	70 91 ab 04 	lds	r23, 0x04AB
    3e6a:	8c e2       	ldi	r24, 0x2C	; 44
    3e6c:	90 e0       	ldi	r25, 0x00	; 0
    3e6e:	ec d5       	rcall	.+3032   	; 0x4a48 <eeprom_write_dword>
	
	eeprom_write_float( (float*)eepromAdr_TempSetPoint3, TempSetPoint3 );
    3e70:	40 91 5a 01 	lds	r20, 0x015A
    3e74:	50 91 5b 01 	lds	r21, 0x015B
    3e78:	60 91 5c 01 	lds	r22, 0x015C
    3e7c:	70 91 5d 01 	lds	r23, 0x015D
    3e80:	80 e3       	ldi	r24, 0x30	; 48
    3e82:	90 e0       	ldi	r25, 0x00	; 0
    3e84:	e1 d5       	rcall	.+3010   	; 0x4a48 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_PgainCh3, Pgain_ch3 );
    3e86:	40 91 04 03 	lds	r20, 0x0304
    3e8a:	50 91 05 03 	lds	r21, 0x0305
    3e8e:	60 91 06 03 	lds	r22, 0x0306
    3e92:	70 91 07 03 	lds	r23, 0x0307
    3e96:	84 e3       	ldi	r24, 0x34	; 52
    3e98:	90 e0       	ldi	r25, 0x00	; 0
    3e9a:	d6 d5       	rcall	.+2988   	; 0x4a48 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_IgainCh3, Igain_ch3 );
    3e9c:	40 91 f9 01 	lds	r20, 0x01F9
    3ea0:	50 91 fa 01 	lds	r21, 0x01FA
    3ea4:	60 91 fb 01 	lds	r22, 0x01FB
    3ea8:	70 91 fc 01 	lds	r23, 0x01FC
    3eac:	88 e3       	ldi	r24, 0x38	; 56
    3eae:	90 e0       	ldi	r25, 0x00	; 0
    3eb0:	cb d5       	rcall	.+2966   	; 0x4a48 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_DgainCh3, Dgain_ch3 );			
    3eb2:	40 91 73 04 	lds	r20, 0x0473
    3eb6:	50 91 74 04 	lds	r21, 0x0474
    3eba:	60 91 75 04 	lds	r22, 0x0475
    3ebe:	70 91 76 04 	lds	r23, 0x0476
    3ec2:	8c e3       	ldi	r24, 0x3C	; 60
    3ec4:	90 e0       	ldi	r25, 0x00	; 0
    3ec6:	c0 d5       	rcall	.+2944   	; 0x4a48 <eeprom_write_dword>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    3ec8:	81 e2       	ldi	r24, 0x21	; 33
    3eca:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    3ecc:	f5 01       	movw	r30, r10
    3ece:	81 81       	ldd	r24, Z+1	; 0x01
    3ed0:	8f 8f       	std	Y+31, r24	; 0x1f
    3ed2:	82 81       	ldd	r24, Z+2	; 0x02
    3ed4:	88 a3       	std	Y+32, r24	; 0x20
    3ed6:	83 81       	ldd	r24, Z+3	; 0x03
    3ed8:	89 a3       	std	Y+33, r24	; 0x21
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    3eda:	1a a2       	std	Y+34, r1	; 0x22
    3edc:	1b a2       	std	Y+35, r1	; 0x23
    3ede:	1c a2       	std	Y+36, r1	; 0x24
    3ee0:	8e 01       	movw	r16, r28
    3ee2:	02 5e       	subi	r16, 0xE2	; 226
    3ee4:	1f 4f       	sbci	r17, 0xFF	; 255
    3ee6:	ae 01       	movw	r20, r28
    3ee8:	4e 5d       	subi	r20, 0xDE	; 222
    3eea:	5f 4f       	sbci	r21, 0xFF	; 255
    3eec:	f8 01       	movw	r30, r16
    3eee:	80 e0       	ldi	r24, 0x00	; 0
    3ef0:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    3ef2:	b8 e0       	ldi	r27, 0x08	; 8
    3ef4:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    3ef6:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    3ef8:	29 2f       	mov	r18, r25
    3efa:	33 27       	eor	r19, r19
    3efc:	27 fd       	sbrc	r18, 7
    3efe:	3a 95       	dec	r19
    3f00:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
    3f02:	32 2f       	mov	r19, r18
    3f04:	22 27       	eor	r18, r18
    3f06:	6b 2f       	mov	r22, r27
    3f08:	7f 2d       	mov	r23, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    3f0a:	33 23       	and	r19, r19
    3f0c:	3c f4       	brge	.+14     	; 0x3f1c <main+0x25fc>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    3f0e:	22 0f       	add	r18, r18
    3f10:	33 1f       	adc	r19, r19
    3f12:	a1 e2       	ldi	r26, 0x21	; 33
    3f14:	2a 27       	eor	r18, r26
    3f16:	a0 e1       	ldi	r26, 0x10	; 16
    3f18:	3a 27       	eor	r19, r26
    3f1a:	02 c0       	rjmp	.+4      	; 0x3f20 <main+0x2600>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    3f1c:	22 0f       	add	r18, r18
    3f1e:	33 1f       	adc	r19, r19
    3f20:	61 50       	subi	r22, 0x01	; 1
    3f22:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    3f24:	91 f7       	brne	.-28     	; 0x3f0a <main+0x25ea>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    3f26:	98 2f       	mov	r25, r24
    3f28:	88 27       	eor	r24, r24
    3f2a:	82 27       	eor	r24, r18
    3f2c:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    3f2e:	e4 17       	cp	r30, r20
    3f30:	f5 07       	cpc	r31, r21
    3f32:	09 f7       	brne	.-62     	; 0x3ef6 <main+0x25d6>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    3f34:	7c 01       	movw	r14, r24
    3f36:	40 e1       	ldi	r20, 0x10	; 16
    3f38:	62 e6       	ldi	r22, 0x62	; 98
    3f3a:	74 e0       	ldi	r23, 0x04	; 4
    3f3c:	c3 d3       	rcall	.+1926   	; 0x46c4 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    3f3e:	82 e6       	ldi	r24, 0x62	; 98
    3f40:	94 e0       	ldi	r25, 0x04	; 4
    3f42:	b6 d3       	rcall	.+1900   	; 0x46b0 <strupr>
	if(crcXmodem < 0x10)
    3f44:	b0 e1       	ldi	r27, 0x10	; 16
    3f46:	eb 16       	cp	r14, r27
    3f48:	f1 04       	cpc	r15, r1
    3f4a:	38 f4       	brcc	.+14     	; 0x3f5a <main+0x263a>
	{
		tx_string[cnt+4] = crc[0];
    3f4c:	80 91 62 04 	lds	r24, 0x0462
    3f50:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = '0';
    3f52:	80 e3       	ldi	r24, 0x30	; 48
    3f54:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = '0';
    3f56:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';
    3f58:	8a a3       	std	Y+34, r24	; 0x22
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    3f5a:	c7 01       	movw	r24, r14
    3f5c:	40 97       	sbiw	r24, 0x10	; 16
    3f5e:	80 3f       	cpi	r24, 0xF0	; 240
    3f60:	91 05       	cpc	r25, r1
    3f62:	48 f4       	brcc	.+18     	; 0x3f76 <main+0x2656>
	{
		tx_string[cnt+4] = crc[1];
    3f64:	e2 e6       	ldi	r30, 0x62	; 98
    3f66:	f4 e0       	ldi	r31, 0x04	; 4
    3f68:	81 81       	ldd	r24, Z+1	; 0x01
    3f6a:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[0];
    3f6c:	80 81       	ld	r24, Z
    3f6e:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = '0';
    3f70:	80 e3       	ldi	r24, 0x30	; 48
    3f72:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';		
    3f74:	8a a3       	std	Y+34, r24	; 0x22
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    3f76:	c7 01       	movw	r24, r14
    3f78:	9a 95       	dec	r25
    3f7a:	81 15       	cp	r24, r1
    3f7c:	9f 40       	sbci	r25, 0x0F	; 15
    3f7e:	50 f4       	brcc	.+20     	; 0x3f94 <main+0x2674>
	{
		tx_string[cnt+4] = crc[2];
    3f80:	e2 e6       	ldi	r30, 0x62	; 98
    3f82:	f4 e0       	ldi	r31, 0x04	; 4
    3f84:	82 81       	ldd	r24, Z+2	; 0x02
    3f86:	8d a3       	std	Y+37, r24	; 0x25
		tx_string[cnt+3] = crc[1];
    3f88:	81 81       	ldd	r24, Z+1	; 0x01
    3f8a:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+2] = crc[0];
    3f8c:	80 81       	ld	r24, Z
    3f8e:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+1] = '0';		
    3f90:	80 e3       	ldi	r24, 0x30	; 48
    3f92:	8a a3       	std	Y+34, r24	; 0x22
	}
	if(crcXmodem >= 0x1000)
    3f94:	e1 14       	cp	r14, r1
    3f96:	f0 e1       	ldi	r31, 0x10	; 16
    3f98:	ff 06       	cpc	r15, r31
    3f9a:	50 f0       	brcs	.+20     	; 0x3fb0 <main+0x2690>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    3f9c:	e2 e6       	ldi	r30, 0x62	; 98
    3f9e:	f4 e0       	ldi	r31, 0x04	; 4
    3fa0:	80 81       	ld	r24, Z
    3fa2:	8a a3       	std	Y+34, r24	; 0x22
		tx_string[cnt+2] = crc[1];
    3fa4:	81 81       	ldd	r24, Z+1	; 0x01
    3fa6:	8b a3       	std	Y+35, r24	; 0x23
		tx_string[cnt+3] = crc[2];
    3fa8:	82 81       	ldd	r24, Z+2	; 0x02
    3faa:	8c a3       	std	Y+36, r24	; 0x24
		tx_string[cnt+4] = crc[3];
    3fac:	83 81       	ldd	r24, Z+3	; 0x03
    3fae:	8d a3       	std	Y+37, r24	; 0x25
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    3fb0:	8d e0       	ldi	r24, 0x0D	; 13
    3fb2:	8e a3       	std	Y+38, r24	; 0x26
    3fb4:	ae 01       	movw	r20, r28
    3fb6:	49 5d       	subi	r20, 0xD9	; 217
    3fb8:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3fba:	e2 ed       	ldi	r30, 0xD2	; 210
    3fbc:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3fbe:	0f 2e       	mov	r0, r31
    3fc0:	f1 ec       	ldi	r31, 0xC1	; 193
    3fc2:	cf 2e       	mov	r12, r31
    3fc4:	d1 2c       	mov	r13, r1
    3fc6:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3fc8:	f1 2c       	mov	r15, r1
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    3fca:	d8 01       	movw	r26, r16
    3fcc:	2d 91       	ld	r18, X+
    3fce:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    3fd0:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3fd2:	91 81       	ldd	r25, Z+1	; 0x01
    3fd4:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    3fd6:	98 13       	cpse	r25, r24
    3fd8:	04 c0       	rjmp	.+8      	; 0x3fe2 <main+0x26c2>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3fda:	d6 01       	movw	r26, r12
    3fdc:	8c 91       	ld	r24, X
    3fde:	80 62       	ori	r24, 0x20	; 32
    3fe0:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    3fe2:	30 81       	ld	r19, Z
    3fe4:	83 81       	ldd	r24, Z+3	; 0x03
    3fe6:	94 81       	ldd	r25, Z+4	; 0x04
    3fe8:	83 0f       	add	r24, r19
    3fea:	91 1d       	adc	r25, r1
    3fec:	dc 01       	movw	r26, r24
    3fee:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    3ff0:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3ff2:	68 2f       	mov	r22, r24
    3ff4:	70 e0       	ldi	r23, 0x00	; 0
    3ff6:	22 81       	ldd	r18, Z+2	; 0x02
    3ff8:	30 e0       	ldi	r19, 0x00	; 0
    3ffa:	21 50       	subi	r18, 0x01	; 1
    3ffc:	31 09       	sbc	r19, r1
    3ffe:	62 17       	cp	r22, r18
    4000:	73 07       	cpc	r23, r19
    4002:	11 f0       	breq	.+4      	; 0x4008 <main+0x26e8>
    4004:	8f 5f       	subi	r24, 0xFF	; 255
    4006:	01 c0       	rjmp	.+2      	; 0x400a <main+0x26ea>
    4008:	8f 2d       	mov	r24, r15
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    400a:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    400c:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    400e:	04 17       	cp	r16, r20
    4010:	15 07       	cpc	r17, r21
    4012:	d9 f6       	brne	.-74     	; 0x3fca <main+0x26aa>
    4014:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <main+0x286>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    4018:	81 e2       	ldi	r24, 0x21	; 33
    401a:	8e 8f       	std	Y+30, r24	; 0x1e
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    401c:	f5 01       	movw	r30, r10
    401e:	81 81       	ldd	r24, Z+1	; 0x01
    4020:	8f 8f       	std	Y+31, r24	; 0x1f
    4022:	82 81       	ldd	r24, Z+2	; 0x02
    4024:	88 a3       	std	Y+32, r24	; 0x20
    4026:	83 81       	ldd	r24, Z+3	; 0x03
    4028:	89 a3       	std	Y+33, r24	; 0x21
    402a:	ee e3       	ldi	r30, 0x3E	; 62
    402c:	f1 e0       	ldi	r31, 0x01	; 1
    402e:	de 01       	movw	r26, r28
    4030:	92 96       	adiw	r26, 0x22	; 34
    4032:	88 e4       	ldi	r24, 0x48	; 72
    4034:	91 e0       	ldi	r25, 0x01	; 1
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    4036:	21 91       	ld	r18, Z+
    4038:	2d 93       	st	X+, r18
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    403a:	e8 17       	cp	r30, r24
    403c:	f9 07       	cpc	r31, r25
    403e:	d9 f7       	brne	.-10     	; 0x4036 <main+0x2716>
    4040:	8e 01       	movw	r16, r28
    4042:	02 5e       	subi	r16, 0xE2	; 226
    4044:	1f 4f       	sbci	r17, 0xFF	; 255
    4046:	ae 01       	movw	r20, r28
    4048:	47 5d       	subi	r20, 0xD7	; 215
    404a:	5f 4f       	sbci	r21, 0xFF	; 255
    404c:	f8 01       	movw	r30, r16
    404e:	80 e0       	ldi	r24, 0x00	; 0
    4050:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    4052:	b8 e0       	ldi	r27, 0x08	; 8
    4054:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    4056:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    4058:	29 2f       	mov	r18, r25
    405a:	33 27       	eor	r19, r19
    405c:	27 fd       	sbrc	r18, 7
    405e:	3a 95       	dec	r19
    4060:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
    4062:	32 2f       	mov	r19, r18
    4064:	22 27       	eor	r18, r18
    4066:	6b 2f       	mov	r22, r27
    4068:	7f 2d       	mov	r23, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    406a:	33 23       	and	r19, r19
    406c:	3c f4       	brge	.+14     	; 0x407c <main+0x275c>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    406e:	22 0f       	add	r18, r18
    4070:	33 1f       	adc	r19, r19
    4072:	a1 e2       	ldi	r26, 0x21	; 33
    4074:	2a 27       	eor	r18, r26
    4076:	a0 e1       	ldi	r26, 0x10	; 16
    4078:	3a 27       	eor	r19, r26
    407a:	02 c0       	rjmp	.+4      	; 0x4080 <main+0x2760>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    407c:	22 0f       	add	r18, r18
    407e:	33 1f       	adc	r19, r19
    4080:	61 50       	subi	r22, 0x01	; 1
    4082:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    4084:	91 f7       	brne	.-28     	; 0x406a <main+0x274a>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    4086:	98 2f       	mov	r25, r24
    4088:	88 27       	eor	r24, r24
    408a:	82 27       	eor	r24, r18
    408c:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    408e:	e4 17       	cp	r30, r20
    4090:	f5 07       	cpc	r31, r21
    4092:	09 f7       	brne	.-62     	; 0x4056 <main+0x2736>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    4094:	7c 01       	movw	r14, r24
    4096:	40 e1       	ldi	r20, 0x10	; 16
    4098:	62 e6       	ldi	r22, 0x62	; 98
    409a:	74 e0       	ldi	r23, 0x04	; 4
    409c:	13 d3       	rcall	.+1574   	; 0x46c4 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    409e:	82 e6       	ldi	r24, 0x62	; 98
    40a0:	94 e0       	ldi	r25, 0x04	; 4
    40a2:	06 d3       	rcall	.+1548   	; 0x46b0 <strupr>
	if(crcXmodem < 0x10)
    40a4:	b0 e1       	ldi	r27, 0x10	; 16
    40a6:	eb 16       	cp	r14, r27
    40a8:	f1 04       	cpc	r15, r1
    40aa:	38 f4       	brcc	.+14     	; 0x40ba <main+0x279a>
	{
		tx_string[cnt+4] = crc[0];
    40ac:	80 91 62 04 	lds	r24, 0x0462
    40b0:	8c a7       	std	Y+44, r24	; 0x2c
		tx_string[cnt+3] = '0';
    40b2:	80 e3       	ldi	r24, 0x30	; 48
    40b4:	8b a7       	std	Y+43, r24	; 0x2b
		tx_string[cnt+2] = '0';
    40b6:	8a a7       	std	Y+42, r24	; 0x2a
		tx_string[cnt+1] = '0';
    40b8:	89 a7       	std	Y+41, r24	; 0x29
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    40ba:	c7 01       	movw	r24, r14
    40bc:	40 97       	sbiw	r24, 0x10	; 16
    40be:	80 3f       	cpi	r24, 0xF0	; 240
    40c0:	91 05       	cpc	r25, r1
    40c2:	48 f4       	brcc	.+18     	; 0x40d6 <main+0x27b6>
	{
		tx_string[cnt+4] = crc[1];
    40c4:	e2 e6       	ldi	r30, 0x62	; 98
    40c6:	f4 e0       	ldi	r31, 0x04	; 4
    40c8:	81 81       	ldd	r24, Z+1	; 0x01
    40ca:	8c a7       	std	Y+44, r24	; 0x2c
		tx_string[cnt+3] = crc[0];
    40cc:	80 81       	ld	r24, Z
    40ce:	8b a7       	std	Y+43, r24	; 0x2b
		tx_string[cnt+2] = '0';
    40d0:	80 e3       	ldi	r24, 0x30	; 48
    40d2:	8a a7       	std	Y+42, r24	; 0x2a
		tx_string[cnt+1] = '0';		
    40d4:	89 a7       	std	Y+41, r24	; 0x29
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    40d6:	c7 01       	movw	r24, r14
    40d8:	9a 95       	dec	r25
    40da:	81 15       	cp	r24, r1
    40dc:	9f 40       	sbci	r25, 0x0F	; 15
    40de:	50 f4       	brcc	.+20     	; 0x40f4 <main+0x27d4>
	{
		tx_string[cnt+4] = crc[2];
    40e0:	e2 e6       	ldi	r30, 0x62	; 98
    40e2:	f4 e0       	ldi	r31, 0x04	; 4
    40e4:	82 81       	ldd	r24, Z+2	; 0x02
    40e6:	8c a7       	std	Y+44, r24	; 0x2c
		tx_string[cnt+3] = crc[1];
    40e8:	81 81       	ldd	r24, Z+1	; 0x01
    40ea:	8b a7       	std	Y+43, r24	; 0x2b
		tx_string[cnt+2] = crc[0];
    40ec:	80 81       	ld	r24, Z
    40ee:	8a a7       	std	Y+42, r24	; 0x2a
		tx_string[cnt+1] = '0';		
    40f0:	80 e3       	ldi	r24, 0x30	; 48
    40f2:	89 a7       	std	Y+41, r24	; 0x29
	}
	if(crcXmodem >= 0x1000)
    40f4:	e1 14       	cp	r14, r1
    40f6:	f0 e1       	ldi	r31, 0x10	; 16
    40f8:	ff 06       	cpc	r15, r31
    40fa:	50 f0       	brcs	.+20     	; 0x4110 <main+0x27f0>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    40fc:	e2 e6       	ldi	r30, 0x62	; 98
    40fe:	f4 e0       	ldi	r31, 0x04	; 4
    4100:	80 81       	ld	r24, Z
    4102:	89 a7       	std	Y+41, r24	; 0x29
		tx_string[cnt+2] = crc[1];
    4104:	81 81       	ldd	r24, Z+1	; 0x01
    4106:	8a a7       	std	Y+42, r24	; 0x2a
		tx_string[cnt+3] = crc[2];
    4108:	82 81       	ldd	r24, Z+2	; 0x02
    410a:	8b a7       	std	Y+43, r24	; 0x2b
		tx_string[cnt+4] = crc[3];
    410c:	83 81       	ldd	r24, Z+3	; 0x03
    410e:	8c a7       	std	Y+44, r24	; 0x2c
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    4110:	8d e0       	ldi	r24, 0x0D	; 13
    4112:	8d a7       	std	Y+45, r24	; 0x2d
    4114:	ae 01       	movw	r20, r28
    4116:	42 5d       	subi	r20, 0xD2	; 210
    4118:	5f 4f       	sbci	r21, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    411a:	e2 ed       	ldi	r30, 0xD2	; 210
    411c:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    411e:	0f 2e       	mov	r0, r31
    4120:	f1 ec       	ldi	r31, 0xC1	; 193
    4122:	cf 2e       	mov	r12, r31
    4124:	d1 2c       	mov	r13, r1
    4126:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    4128:	f1 2c       	mov	r15, r1
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    412a:	d8 01       	movw	r26, r16
    412c:	2d 91       	ld	r18, X+
    412e:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    4130:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    4132:	91 81       	ldd	r25, Z+1	; 0x01
    4134:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    4136:	98 13       	cpse	r25, r24
    4138:	04 c0       	rjmp	.+8      	; 0x4142 <main+0x2822>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    413a:	d6 01       	movw	r26, r12
    413c:	8c 91       	ld	r24, X
    413e:	80 62       	ori	r24, 0x20	; 32
    4140:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    4142:	30 81       	ld	r19, Z
    4144:	83 81       	ldd	r24, Z+3	; 0x03
    4146:	94 81       	ldd	r25, Z+4	; 0x04
    4148:	83 0f       	add	r24, r19
    414a:	91 1d       	adc	r25, r1
    414c:	dc 01       	movw	r26, r24
    414e:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    4150:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    4152:	68 2f       	mov	r22, r24
    4154:	70 e0       	ldi	r23, 0x00	; 0
    4156:	22 81       	ldd	r18, Z+2	; 0x02
    4158:	30 e0       	ldi	r19, 0x00	; 0
    415a:	21 50       	subi	r18, 0x01	; 1
    415c:	31 09       	sbc	r19, r1
    415e:	62 17       	cp	r22, r18
    4160:	73 07       	cpc	r23, r19
    4162:	11 f0       	breq	.+4      	; 0x4168 <main+0x2848>
    4164:	8f 5f       	subi	r24, 0xFF	; 255
    4166:	01 c0       	rjmp	.+2      	; 0x416a <main+0x284a>
    4168:	8f 2d       	mov	r24, r15
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    416a:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    416c:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    416e:	04 17       	cp	r16, r20
    4170:	15 07       	cpc	r17, r21
    4172:	d9 f6       	brne	.-74     	; 0x412a <main+0x280a>
    4174:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <main+0x286>
						var = atol(requestID);
						SetParameter(atol(requestID));
					}
					else
					{
						printStatus("CRC error");
    4178:	8f e1       	ldi	r24, 0x1F	; 31
    417a:	91 e0       	ldi	r25, 0x01	; 1
    417c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printStatus>
    4180:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <main+0x286>
    4184:	40 e1       	ldi	r20, 0x10	; 16
    4186:	62 e6       	ldi	r22, 0x62	; 98
    4188:	74 e0       	ldi	r23, 0x04	; 4
    418a:	80 e0       	ldi	r24, 0x00	; 0
    418c:	90 e0       	ldi	r25, 0x00	; 0
    418e:	9a d2       	rcall	.+1332   	; 0x46c4 <__itoa_ncheck>
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    4190:	82 e6       	ldi	r24, 0x62	; 98
    4192:	94 e0       	ldi	r25, 0x04	; 4
    4194:	8d d2       	rcall	.+1306   	; 0x46b0 <strupr>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    4196:	c1 2c       	mov	r12, r1
    4198:	d1 2c       	mov	r13, r1
    419a:	0c 94 5b 0f 	jmp	0x1eb6	; 0x1eb6 <main+0x596>
    419e:	40 e1       	ldi	r20, 0x10	; 16
    41a0:	62 e6       	ldi	r22, 0x62	; 98
    41a2:	74 e0       	ldi	r23, 0x04	; 4
    41a4:	80 e0       	ldi	r24, 0x00	; 0
    41a6:	90 e0       	ldi	r25, 0x00	; 0
    41a8:	8d d2       	rcall	.+1306   	; 0x46c4 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    41aa:	82 e6       	ldi	r24, 0x62	; 98
    41ac:	94 e0       	ldi	r25, 0x04	; 4
    41ae:	80 d2       	rcall	.+1280   	; 0x46b0 <strupr>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    41b0:	c1 2c       	mov	r12, r1
    41b2:	d1 2c       	mov	r13, r1
    41b4:	0c 94 76 10 	jmp	0x20ec	; 0x20ec <main+0x7cc>
    41b8:	40 e1       	ldi	r20, 0x10	; 16
    41ba:	62 e6       	ldi	r22, 0x62	; 98
    41bc:	74 e0       	ldi	r23, 0x04	; 4
    41be:	80 e0       	ldi	r24, 0x00	; 0
    41c0:	90 e0       	ldi	r25, 0x00	; 0
    41c2:	80 d2       	rcall	.+1280   	; 0x46c4 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    41c4:	82 e6       	ldi	r24, 0x62	; 98
    41c6:	94 e0       	ldi	r25, 0x04	; 4
    41c8:	73 d2       	rcall	.+1254   	; 0x46b0 <strupr>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    41ca:	c1 2c       	mov	r12, r1
    41cc:	d1 2c       	mov	r13, r1
    41ce:	0c 94 91 11 	jmp	0x2322	; 0x2322 <main+0xa02>
    41d2:	40 e1       	ldi	r20, 0x10	; 16
    41d4:	62 e6       	ldi	r22, 0x62	; 98
    41d6:	74 e0       	ldi	r23, 0x04	; 4
    41d8:	80 e0       	ldi	r24, 0x00	; 0
    41da:	90 e0       	ldi	r25, 0x00	; 0
    41dc:	73 d2       	rcall	.+1254   	; 0x46c4 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    41de:	82 e6       	ldi	r24, 0x62	; 98
    41e0:	94 e0       	ldi	r25, 0x04	; 4
    41e2:	66 d2       	rcall	.+1228   	; 0x46b0 <strupr>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    41e4:	c1 2c       	mov	r12, r1
    41e6:	d1 2c       	mov	r13, r1
    41e8:	0c 94 ac 12 	jmp	0x2558	; 0x2558 <main+0xc38>
    41ec:	40 e1       	ldi	r20, 0x10	; 16
    41ee:	62 e6       	ldi	r22, 0x62	; 98
    41f0:	74 e0       	ldi	r23, 0x04	; 4
    41f2:	80 e0       	ldi	r24, 0x00	; 0
    41f4:	90 e0       	ldi	r25, 0x00	; 0
    41f6:	66 d2       	rcall	.+1228   	; 0x46c4 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    41f8:	82 e6       	ldi	r24, 0x62	; 98
    41fa:	94 e0       	ldi	r25, 0x04	; 4
    41fc:	59 d2       	rcall	.+1202   	; 0x46b0 <strupr>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    41fe:	c1 2c       	mov	r12, r1
    4200:	d1 2c       	mov	r13, r1
    4202:	0c 94 bc 14 	jmp	0x2978	; 0x2978 <main+0x1058>

00004206 <__subsf3>:
    4206:	50 58       	subi	r21, 0x80	; 128

00004208 <__addsf3>:
    4208:	bb 27       	eor	r27, r27
    420a:	aa 27       	eor	r26, r26
    420c:	0e d0       	rcall	.+28     	; 0x422a <__addsf3x>
    420e:	0d c1       	rjmp	.+538    	; 0x442a <__fp_round>
    4210:	fe d0       	rcall	.+508    	; 0x440e <__fp_pscA>
    4212:	30 f0       	brcs	.+12     	; 0x4220 <__addsf3+0x18>
    4214:	03 d1       	rcall	.+518    	; 0x441c <__fp_pscB>
    4216:	20 f0       	brcs	.+8      	; 0x4220 <__addsf3+0x18>
    4218:	31 f4       	brne	.+12     	; 0x4226 <__addsf3+0x1e>
    421a:	9f 3f       	cpi	r25, 0xFF	; 255
    421c:	11 f4       	brne	.+4      	; 0x4222 <__addsf3+0x1a>
    421e:	1e f4       	brtc	.+6      	; 0x4226 <__addsf3+0x1e>
    4220:	f3 c0       	rjmp	.+486    	; 0x4408 <__fp_nan>
    4222:	0e f4       	brtc	.+2      	; 0x4226 <__addsf3+0x1e>
    4224:	e0 95       	com	r30
    4226:	e7 fb       	bst	r30, 7
    4228:	e9 c0       	rjmp	.+466    	; 0x43fc <__fp_inf>

0000422a <__addsf3x>:
    422a:	e9 2f       	mov	r30, r25
    422c:	0f d1       	rcall	.+542    	; 0x444c <__fp_split3>
    422e:	80 f3       	brcs	.-32     	; 0x4210 <__addsf3+0x8>
    4230:	ba 17       	cp	r27, r26
    4232:	62 07       	cpc	r22, r18
    4234:	73 07       	cpc	r23, r19
    4236:	84 07       	cpc	r24, r20
    4238:	95 07       	cpc	r25, r21
    423a:	18 f0       	brcs	.+6      	; 0x4242 <__addsf3x+0x18>
    423c:	71 f4       	brne	.+28     	; 0x425a <__addsf3x+0x30>
    423e:	9e f5       	brtc	.+102    	; 0x42a6 <__addsf3x+0x7c>
    4240:	27 c1       	rjmp	.+590    	; 0x4490 <__fp_zero>
    4242:	0e f4       	brtc	.+2      	; 0x4246 <__addsf3x+0x1c>
    4244:	e0 95       	com	r30
    4246:	0b 2e       	mov	r0, r27
    4248:	ba 2f       	mov	r27, r26
    424a:	a0 2d       	mov	r26, r0
    424c:	0b 01       	movw	r0, r22
    424e:	b9 01       	movw	r22, r18
    4250:	90 01       	movw	r18, r0
    4252:	0c 01       	movw	r0, r24
    4254:	ca 01       	movw	r24, r20
    4256:	a0 01       	movw	r20, r0
    4258:	11 24       	eor	r1, r1
    425a:	ff 27       	eor	r31, r31
    425c:	59 1b       	sub	r21, r25
    425e:	99 f0       	breq	.+38     	; 0x4286 <__addsf3x+0x5c>
    4260:	59 3f       	cpi	r21, 0xF9	; 249
    4262:	50 f4       	brcc	.+20     	; 0x4278 <__addsf3x+0x4e>
    4264:	50 3e       	cpi	r21, 0xE0	; 224
    4266:	68 f1       	brcs	.+90     	; 0x42c2 <__addsf3x+0x98>
    4268:	1a 16       	cp	r1, r26
    426a:	f0 40       	sbci	r31, 0x00	; 0
    426c:	a2 2f       	mov	r26, r18
    426e:	23 2f       	mov	r18, r19
    4270:	34 2f       	mov	r19, r20
    4272:	44 27       	eor	r20, r20
    4274:	58 5f       	subi	r21, 0xF8	; 248
    4276:	f3 cf       	rjmp	.-26     	; 0x425e <__addsf3x+0x34>
    4278:	46 95       	lsr	r20
    427a:	37 95       	ror	r19
    427c:	27 95       	ror	r18
    427e:	a7 95       	ror	r26
    4280:	f0 40       	sbci	r31, 0x00	; 0
    4282:	53 95       	inc	r21
    4284:	c9 f7       	brne	.-14     	; 0x4278 <__addsf3x+0x4e>
    4286:	7e f4       	brtc	.+30     	; 0x42a6 <__addsf3x+0x7c>
    4288:	1f 16       	cp	r1, r31
    428a:	ba 0b       	sbc	r27, r26
    428c:	62 0b       	sbc	r22, r18
    428e:	73 0b       	sbc	r23, r19
    4290:	84 0b       	sbc	r24, r20
    4292:	ba f0       	brmi	.+46     	; 0x42c2 <__addsf3x+0x98>
    4294:	91 50       	subi	r25, 0x01	; 1
    4296:	a1 f0       	breq	.+40     	; 0x42c0 <__addsf3x+0x96>
    4298:	ff 0f       	add	r31, r31
    429a:	bb 1f       	adc	r27, r27
    429c:	66 1f       	adc	r22, r22
    429e:	77 1f       	adc	r23, r23
    42a0:	88 1f       	adc	r24, r24
    42a2:	c2 f7       	brpl	.-16     	; 0x4294 <__addsf3x+0x6a>
    42a4:	0e c0       	rjmp	.+28     	; 0x42c2 <__addsf3x+0x98>
    42a6:	ba 0f       	add	r27, r26
    42a8:	62 1f       	adc	r22, r18
    42aa:	73 1f       	adc	r23, r19
    42ac:	84 1f       	adc	r24, r20
    42ae:	48 f4       	brcc	.+18     	; 0x42c2 <__addsf3x+0x98>
    42b0:	87 95       	ror	r24
    42b2:	77 95       	ror	r23
    42b4:	67 95       	ror	r22
    42b6:	b7 95       	ror	r27
    42b8:	f7 95       	ror	r31
    42ba:	9e 3f       	cpi	r25, 0xFE	; 254
    42bc:	08 f0       	brcs	.+2      	; 0x42c0 <__addsf3x+0x96>
    42be:	b3 cf       	rjmp	.-154    	; 0x4226 <__addsf3+0x1e>
    42c0:	93 95       	inc	r25
    42c2:	88 0f       	add	r24, r24
    42c4:	08 f0       	brcs	.+2      	; 0x42c8 <__addsf3x+0x9e>
    42c6:	99 27       	eor	r25, r25
    42c8:	ee 0f       	add	r30, r30
    42ca:	97 95       	ror	r25
    42cc:	87 95       	ror	r24
    42ce:	08 95       	ret

000042d0 <__cmpsf2>:
    42d0:	71 d0       	rcall	.+226    	; 0x43b4 <__fp_cmp>
    42d2:	08 f4       	brcc	.+2      	; 0x42d6 <__cmpsf2+0x6>
    42d4:	81 e0       	ldi	r24, 0x01	; 1
    42d6:	08 95       	ret

000042d8 <__fixsfsi>:
    42d8:	04 d0       	rcall	.+8      	; 0x42e2 <__fixunssfsi>
    42da:	68 94       	set
    42dc:	b1 11       	cpse	r27, r1
    42de:	d9 c0       	rjmp	.+434    	; 0x4492 <__fp_szero>
    42e0:	08 95       	ret

000042e2 <__fixunssfsi>:
    42e2:	bc d0       	rcall	.+376    	; 0x445c <__fp_splitA>
    42e4:	88 f0       	brcs	.+34     	; 0x4308 <__fixunssfsi+0x26>
    42e6:	9f 57       	subi	r25, 0x7F	; 127
    42e8:	90 f0       	brcs	.+36     	; 0x430e <__fixunssfsi+0x2c>
    42ea:	b9 2f       	mov	r27, r25
    42ec:	99 27       	eor	r25, r25
    42ee:	b7 51       	subi	r27, 0x17	; 23
    42f0:	a0 f0       	brcs	.+40     	; 0x431a <__fixunssfsi+0x38>
    42f2:	d1 f0       	breq	.+52     	; 0x4328 <__fixunssfsi+0x46>
    42f4:	66 0f       	add	r22, r22
    42f6:	77 1f       	adc	r23, r23
    42f8:	88 1f       	adc	r24, r24
    42fa:	99 1f       	adc	r25, r25
    42fc:	1a f0       	brmi	.+6      	; 0x4304 <__fixunssfsi+0x22>
    42fe:	ba 95       	dec	r27
    4300:	c9 f7       	brne	.-14     	; 0x42f4 <__fixunssfsi+0x12>
    4302:	12 c0       	rjmp	.+36     	; 0x4328 <__fixunssfsi+0x46>
    4304:	b1 30       	cpi	r27, 0x01	; 1
    4306:	81 f0       	breq	.+32     	; 0x4328 <__fixunssfsi+0x46>
    4308:	c3 d0       	rcall	.+390    	; 0x4490 <__fp_zero>
    430a:	b1 e0       	ldi	r27, 0x01	; 1
    430c:	08 95       	ret
    430e:	c0 c0       	rjmp	.+384    	; 0x4490 <__fp_zero>
    4310:	67 2f       	mov	r22, r23
    4312:	78 2f       	mov	r23, r24
    4314:	88 27       	eor	r24, r24
    4316:	b8 5f       	subi	r27, 0xF8	; 248
    4318:	39 f0       	breq	.+14     	; 0x4328 <__fixunssfsi+0x46>
    431a:	b9 3f       	cpi	r27, 0xF9	; 249
    431c:	cc f3       	brlt	.-14     	; 0x4310 <__fixunssfsi+0x2e>
    431e:	86 95       	lsr	r24
    4320:	77 95       	ror	r23
    4322:	67 95       	ror	r22
    4324:	b3 95       	inc	r27
    4326:	d9 f7       	brne	.-10     	; 0x431e <__fixunssfsi+0x3c>
    4328:	3e f4       	brtc	.+14     	; 0x4338 <__fixunssfsi+0x56>
    432a:	90 95       	com	r25
    432c:	80 95       	com	r24
    432e:	70 95       	com	r23
    4330:	61 95       	neg	r22
    4332:	7f 4f       	sbci	r23, 0xFF	; 255
    4334:	8f 4f       	sbci	r24, 0xFF	; 255
    4336:	9f 4f       	sbci	r25, 0xFF	; 255
    4338:	08 95       	ret

0000433a <__floatunsisf>:
    433a:	e8 94       	clt
    433c:	09 c0       	rjmp	.+18     	; 0x4350 <__floatsisf+0x12>

0000433e <__floatsisf>:
    433e:	97 fb       	bst	r25, 7
    4340:	3e f4       	brtc	.+14     	; 0x4350 <__floatsisf+0x12>
    4342:	90 95       	com	r25
    4344:	80 95       	com	r24
    4346:	70 95       	com	r23
    4348:	61 95       	neg	r22
    434a:	7f 4f       	sbci	r23, 0xFF	; 255
    434c:	8f 4f       	sbci	r24, 0xFF	; 255
    434e:	9f 4f       	sbci	r25, 0xFF	; 255
    4350:	99 23       	and	r25, r25
    4352:	a9 f0       	breq	.+42     	; 0x437e <__floatsisf+0x40>
    4354:	f9 2f       	mov	r31, r25
    4356:	96 e9       	ldi	r25, 0x96	; 150
    4358:	bb 27       	eor	r27, r27
    435a:	93 95       	inc	r25
    435c:	f6 95       	lsr	r31
    435e:	87 95       	ror	r24
    4360:	77 95       	ror	r23
    4362:	67 95       	ror	r22
    4364:	b7 95       	ror	r27
    4366:	f1 11       	cpse	r31, r1
    4368:	f8 cf       	rjmp	.-16     	; 0x435a <__floatsisf+0x1c>
    436a:	fa f4       	brpl	.+62     	; 0x43aa <__floatsisf+0x6c>
    436c:	bb 0f       	add	r27, r27
    436e:	11 f4       	brne	.+4      	; 0x4374 <__floatsisf+0x36>
    4370:	60 ff       	sbrs	r22, 0
    4372:	1b c0       	rjmp	.+54     	; 0x43aa <__floatsisf+0x6c>
    4374:	6f 5f       	subi	r22, 0xFF	; 255
    4376:	7f 4f       	sbci	r23, 0xFF	; 255
    4378:	8f 4f       	sbci	r24, 0xFF	; 255
    437a:	9f 4f       	sbci	r25, 0xFF	; 255
    437c:	16 c0       	rjmp	.+44     	; 0x43aa <__floatsisf+0x6c>
    437e:	88 23       	and	r24, r24
    4380:	11 f0       	breq	.+4      	; 0x4386 <__floatsisf+0x48>
    4382:	96 e9       	ldi	r25, 0x96	; 150
    4384:	11 c0       	rjmp	.+34     	; 0x43a8 <__floatsisf+0x6a>
    4386:	77 23       	and	r23, r23
    4388:	21 f0       	breq	.+8      	; 0x4392 <__floatsisf+0x54>
    438a:	9e e8       	ldi	r25, 0x8E	; 142
    438c:	87 2f       	mov	r24, r23
    438e:	76 2f       	mov	r23, r22
    4390:	05 c0       	rjmp	.+10     	; 0x439c <__floatsisf+0x5e>
    4392:	66 23       	and	r22, r22
    4394:	71 f0       	breq	.+28     	; 0x43b2 <__floatsisf+0x74>
    4396:	96 e8       	ldi	r25, 0x86	; 134
    4398:	86 2f       	mov	r24, r22
    439a:	70 e0       	ldi	r23, 0x00	; 0
    439c:	60 e0       	ldi	r22, 0x00	; 0
    439e:	2a f0       	brmi	.+10     	; 0x43aa <__floatsisf+0x6c>
    43a0:	9a 95       	dec	r25
    43a2:	66 0f       	add	r22, r22
    43a4:	77 1f       	adc	r23, r23
    43a6:	88 1f       	adc	r24, r24
    43a8:	da f7       	brpl	.-10     	; 0x43a0 <__floatsisf+0x62>
    43aa:	88 0f       	add	r24, r24
    43ac:	96 95       	lsr	r25
    43ae:	87 95       	ror	r24
    43b0:	97 f9       	bld	r25, 7
    43b2:	08 95       	ret

000043b4 <__fp_cmp>:
    43b4:	99 0f       	add	r25, r25
    43b6:	00 08       	sbc	r0, r0
    43b8:	55 0f       	add	r21, r21
    43ba:	aa 0b       	sbc	r26, r26
    43bc:	e0 e8       	ldi	r30, 0x80	; 128
    43be:	fe ef       	ldi	r31, 0xFE	; 254
    43c0:	16 16       	cp	r1, r22
    43c2:	17 06       	cpc	r1, r23
    43c4:	e8 07       	cpc	r30, r24
    43c6:	f9 07       	cpc	r31, r25
    43c8:	c0 f0       	brcs	.+48     	; 0x43fa <__fp_cmp+0x46>
    43ca:	12 16       	cp	r1, r18
    43cc:	13 06       	cpc	r1, r19
    43ce:	e4 07       	cpc	r30, r20
    43d0:	f5 07       	cpc	r31, r21
    43d2:	98 f0       	brcs	.+38     	; 0x43fa <__fp_cmp+0x46>
    43d4:	62 1b       	sub	r22, r18
    43d6:	73 0b       	sbc	r23, r19
    43d8:	84 0b       	sbc	r24, r20
    43da:	95 0b       	sbc	r25, r21
    43dc:	39 f4       	brne	.+14     	; 0x43ec <__fp_cmp+0x38>
    43de:	0a 26       	eor	r0, r26
    43e0:	61 f0       	breq	.+24     	; 0x43fa <__fp_cmp+0x46>
    43e2:	23 2b       	or	r18, r19
    43e4:	24 2b       	or	r18, r20
    43e6:	25 2b       	or	r18, r21
    43e8:	21 f4       	brne	.+8      	; 0x43f2 <__fp_cmp+0x3e>
    43ea:	08 95       	ret
    43ec:	0a 26       	eor	r0, r26
    43ee:	09 f4       	brne	.+2      	; 0x43f2 <__fp_cmp+0x3e>
    43f0:	a1 40       	sbci	r26, 0x01	; 1
    43f2:	a6 95       	lsr	r26
    43f4:	8f ef       	ldi	r24, 0xFF	; 255
    43f6:	81 1d       	adc	r24, r1
    43f8:	81 1d       	adc	r24, r1
    43fa:	08 95       	ret

000043fc <__fp_inf>:
    43fc:	97 f9       	bld	r25, 7
    43fe:	9f 67       	ori	r25, 0x7F	; 127
    4400:	80 e8       	ldi	r24, 0x80	; 128
    4402:	70 e0       	ldi	r23, 0x00	; 0
    4404:	60 e0       	ldi	r22, 0x00	; 0
    4406:	08 95       	ret

00004408 <__fp_nan>:
    4408:	9f ef       	ldi	r25, 0xFF	; 255
    440a:	80 ec       	ldi	r24, 0xC0	; 192
    440c:	08 95       	ret

0000440e <__fp_pscA>:
    440e:	00 24       	eor	r0, r0
    4410:	0a 94       	dec	r0
    4412:	16 16       	cp	r1, r22
    4414:	17 06       	cpc	r1, r23
    4416:	18 06       	cpc	r1, r24
    4418:	09 06       	cpc	r0, r25
    441a:	08 95       	ret

0000441c <__fp_pscB>:
    441c:	00 24       	eor	r0, r0
    441e:	0a 94       	dec	r0
    4420:	12 16       	cp	r1, r18
    4422:	13 06       	cpc	r1, r19
    4424:	14 06       	cpc	r1, r20
    4426:	05 06       	cpc	r0, r21
    4428:	08 95       	ret

0000442a <__fp_round>:
    442a:	09 2e       	mov	r0, r25
    442c:	03 94       	inc	r0
    442e:	00 0c       	add	r0, r0
    4430:	11 f4       	brne	.+4      	; 0x4436 <__fp_round+0xc>
    4432:	88 23       	and	r24, r24
    4434:	52 f0       	brmi	.+20     	; 0x444a <__fp_round+0x20>
    4436:	bb 0f       	add	r27, r27
    4438:	40 f4       	brcc	.+16     	; 0x444a <__fp_round+0x20>
    443a:	bf 2b       	or	r27, r31
    443c:	11 f4       	brne	.+4      	; 0x4442 <__fp_round+0x18>
    443e:	60 ff       	sbrs	r22, 0
    4440:	04 c0       	rjmp	.+8      	; 0x444a <__fp_round+0x20>
    4442:	6f 5f       	subi	r22, 0xFF	; 255
    4444:	7f 4f       	sbci	r23, 0xFF	; 255
    4446:	8f 4f       	sbci	r24, 0xFF	; 255
    4448:	9f 4f       	sbci	r25, 0xFF	; 255
    444a:	08 95       	ret

0000444c <__fp_split3>:
    444c:	57 fd       	sbrc	r21, 7
    444e:	90 58       	subi	r25, 0x80	; 128
    4450:	44 0f       	add	r20, r20
    4452:	55 1f       	adc	r21, r21
    4454:	59 f0       	breq	.+22     	; 0x446c <__fp_splitA+0x10>
    4456:	5f 3f       	cpi	r21, 0xFF	; 255
    4458:	71 f0       	breq	.+28     	; 0x4476 <__fp_splitA+0x1a>
    445a:	47 95       	ror	r20

0000445c <__fp_splitA>:
    445c:	88 0f       	add	r24, r24
    445e:	97 fb       	bst	r25, 7
    4460:	99 1f       	adc	r25, r25
    4462:	61 f0       	breq	.+24     	; 0x447c <__fp_splitA+0x20>
    4464:	9f 3f       	cpi	r25, 0xFF	; 255
    4466:	79 f0       	breq	.+30     	; 0x4486 <__fp_splitA+0x2a>
    4468:	87 95       	ror	r24
    446a:	08 95       	ret
    446c:	12 16       	cp	r1, r18
    446e:	13 06       	cpc	r1, r19
    4470:	14 06       	cpc	r1, r20
    4472:	55 1f       	adc	r21, r21
    4474:	f2 cf       	rjmp	.-28     	; 0x445a <__fp_split3+0xe>
    4476:	46 95       	lsr	r20
    4478:	f1 df       	rcall	.-30     	; 0x445c <__fp_splitA>
    447a:	08 c0       	rjmp	.+16     	; 0x448c <__fp_splitA+0x30>
    447c:	16 16       	cp	r1, r22
    447e:	17 06       	cpc	r1, r23
    4480:	18 06       	cpc	r1, r24
    4482:	99 1f       	adc	r25, r25
    4484:	f1 cf       	rjmp	.-30     	; 0x4468 <__fp_splitA+0xc>
    4486:	86 95       	lsr	r24
    4488:	71 05       	cpc	r23, r1
    448a:	61 05       	cpc	r22, r1
    448c:	08 94       	sec
    448e:	08 95       	ret

00004490 <__fp_zero>:
    4490:	e8 94       	clt

00004492 <__fp_szero>:
    4492:	bb 27       	eor	r27, r27
    4494:	66 27       	eor	r22, r22
    4496:	77 27       	eor	r23, r23
    4498:	cb 01       	movw	r24, r22
    449a:	97 f9       	bld	r25, 7
    449c:	08 95       	ret

0000449e <__gesf2>:
    449e:	8a df       	rcall	.-236    	; 0x43b4 <__fp_cmp>
    44a0:	08 f4       	brcc	.+2      	; 0x44a4 <__gesf2+0x6>
    44a2:	8f ef       	ldi	r24, 0xFF	; 255
    44a4:	08 95       	ret

000044a6 <__mulsf3>:
    44a6:	0b d0       	rcall	.+22     	; 0x44be <__mulsf3x>
    44a8:	c0 cf       	rjmp	.-128    	; 0x442a <__fp_round>
    44aa:	b1 df       	rcall	.-158    	; 0x440e <__fp_pscA>
    44ac:	28 f0       	brcs	.+10     	; 0x44b8 <__mulsf3+0x12>
    44ae:	b6 df       	rcall	.-148    	; 0x441c <__fp_pscB>
    44b0:	18 f0       	brcs	.+6      	; 0x44b8 <__mulsf3+0x12>
    44b2:	95 23       	and	r25, r21
    44b4:	09 f0       	breq	.+2      	; 0x44b8 <__mulsf3+0x12>
    44b6:	a2 cf       	rjmp	.-188    	; 0x43fc <__fp_inf>
    44b8:	a7 cf       	rjmp	.-178    	; 0x4408 <__fp_nan>
    44ba:	11 24       	eor	r1, r1
    44bc:	ea cf       	rjmp	.-44     	; 0x4492 <__fp_szero>

000044be <__mulsf3x>:
    44be:	c6 df       	rcall	.-116    	; 0x444c <__fp_split3>
    44c0:	a0 f3       	brcs	.-24     	; 0x44aa <__mulsf3+0x4>

000044c2 <__mulsf3_pse>:
    44c2:	95 9f       	mul	r25, r21
    44c4:	d1 f3       	breq	.-12     	; 0x44ba <__mulsf3+0x14>
    44c6:	95 0f       	add	r25, r21
    44c8:	50 e0       	ldi	r21, 0x00	; 0
    44ca:	55 1f       	adc	r21, r21
    44cc:	62 9f       	mul	r22, r18
    44ce:	f0 01       	movw	r30, r0
    44d0:	72 9f       	mul	r23, r18
    44d2:	bb 27       	eor	r27, r27
    44d4:	f0 0d       	add	r31, r0
    44d6:	b1 1d       	adc	r27, r1
    44d8:	63 9f       	mul	r22, r19
    44da:	aa 27       	eor	r26, r26
    44dc:	f0 0d       	add	r31, r0
    44de:	b1 1d       	adc	r27, r1
    44e0:	aa 1f       	adc	r26, r26
    44e2:	64 9f       	mul	r22, r20
    44e4:	66 27       	eor	r22, r22
    44e6:	b0 0d       	add	r27, r0
    44e8:	a1 1d       	adc	r26, r1
    44ea:	66 1f       	adc	r22, r22
    44ec:	82 9f       	mul	r24, r18
    44ee:	22 27       	eor	r18, r18
    44f0:	b0 0d       	add	r27, r0
    44f2:	a1 1d       	adc	r26, r1
    44f4:	62 1f       	adc	r22, r18
    44f6:	73 9f       	mul	r23, r19
    44f8:	b0 0d       	add	r27, r0
    44fa:	a1 1d       	adc	r26, r1
    44fc:	62 1f       	adc	r22, r18
    44fe:	83 9f       	mul	r24, r19
    4500:	a0 0d       	add	r26, r0
    4502:	61 1d       	adc	r22, r1
    4504:	22 1f       	adc	r18, r18
    4506:	74 9f       	mul	r23, r20
    4508:	33 27       	eor	r19, r19
    450a:	a0 0d       	add	r26, r0
    450c:	61 1d       	adc	r22, r1
    450e:	23 1f       	adc	r18, r19
    4510:	84 9f       	mul	r24, r20
    4512:	60 0d       	add	r22, r0
    4514:	21 1d       	adc	r18, r1
    4516:	82 2f       	mov	r24, r18
    4518:	76 2f       	mov	r23, r22
    451a:	6a 2f       	mov	r22, r26
    451c:	11 24       	eor	r1, r1
    451e:	9f 57       	subi	r25, 0x7F	; 127
    4520:	50 40       	sbci	r21, 0x00	; 0
    4522:	8a f0       	brmi	.+34     	; 0x4546 <__mulsf3_pse+0x84>
    4524:	e1 f0       	breq	.+56     	; 0x455e <__mulsf3_pse+0x9c>
    4526:	88 23       	and	r24, r24
    4528:	4a f0       	brmi	.+18     	; 0x453c <__mulsf3_pse+0x7a>
    452a:	ee 0f       	add	r30, r30
    452c:	ff 1f       	adc	r31, r31
    452e:	bb 1f       	adc	r27, r27
    4530:	66 1f       	adc	r22, r22
    4532:	77 1f       	adc	r23, r23
    4534:	88 1f       	adc	r24, r24
    4536:	91 50       	subi	r25, 0x01	; 1
    4538:	50 40       	sbci	r21, 0x00	; 0
    453a:	a9 f7       	brne	.-22     	; 0x4526 <__mulsf3_pse+0x64>
    453c:	9e 3f       	cpi	r25, 0xFE	; 254
    453e:	51 05       	cpc	r21, r1
    4540:	70 f0       	brcs	.+28     	; 0x455e <__mulsf3_pse+0x9c>
    4542:	5c cf       	rjmp	.-328    	; 0x43fc <__fp_inf>
    4544:	a6 cf       	rjmp	.-180    	; 0x4492 <__fp_szero>
    4546:	5f 3f       	cpi	r21, 0xFF	; 255
    4548:	ec f3       	brlt	.-6      	; 0x4544 <__mulsf3_pse+0x82>
    454a:	98 3e       	cpi	r25, 0xE8	; 232
    454c:	dc f3       	brlt	.-10     	; 0x4544 <__mulsf3_pse+0x82>
    454e:	86 95       	lsr	r24
    4550:	77 95       	ror	r23
    4552:	67 95       	ror	r22
    4554:	b7 95       	ror	r27
    4556:	f7 95       	ror	r31
    4558:	e7 95       	ror	r30
    455a:	9f 5f       	subi	r25, 0xFF	; 255
    455c:	c1 f7       	brne	.-16     	; 0x454e <__mulsf3_pse+0x8c>
    455e:	fe 2b       	or	r31, r30
    4560:	88 0f       	add	r24, r24
    4562:	91 1d       	adc	r25, r1
    4564:	96 95       	lsr	r25
    4566:	87 95       	ror	r24
    4568:	97 f9       	bld	r25, 7
    456a:	08 95       	ret

0000456c <round>:
    456c:	77 df       	rcall	.-274    	; 0x445c <__fp_splitA>
    456e:	e0 f0       	brcs	.+56     	; 0x45a8 <round+0x3c>
    4570:	9e 37       	cpi	r25, 0x7E	; 126
    4572:	d8 f0       	brcs	.+54     	; 0x45aa <round+0x3e>
    4574:	96 39       	cpi	r25, 0x96	; 150
    4576:	b8 f4       	brcc	.+46     	; 0x45a6 <round+0x3a>
    4578:	9e 38       	cpi	r25, 0x8E	; 142
    457a:	48 f4       	brcc	.+18     	; 0x458e <round+0x22>
    457c:	67 2f       	mov	r22, r23
    457e:	78 2f       	mov	r23, r24
    4580:	88 27       	eor	r24, r24
    4582:	98 5f       	subi	r25, 0xF8	; 248
    4584:	f9 cf       	rjmp	.-14     	; 0x4578 <round+0xc>
    4586:	86 95       	lsr	r24
    4588:	77 95       	ror	r23
    458a:	67 95       	ror	r22
    458c:	93 95       	inc	r25
    458e:	95 39       	cpi	r25, 0x95	; 149
    4590:	d0 f3       	brcs	.-12     	; 0x4586 <round+0x1a>
    4592:	b6 2f       	mov	r27, r22
    4594:	b1 70       	andi	r27, 0x01	; 1
    4596:	6b 0f       	add	r22, r27
    4598:	71 1d       	adc	r23, r1
    459a:	81 1d       	adc	r24, r1
    459c:	20 f4       	brcc	.+8      	; 0x45a6 <round+0x3a>
    459e:	87 95       	ror	r24
    45a0:	77 95       	ror	r23
    45a2:	67 95       	ror	r22
    45a4:	93 95       	inc	r25
    45a6:	02 c0       	rjmp	.+4      	; 0x45ac <__fp_mintl>
    45a8:	1c c0       	rjmp	.+56     	; 0x45e2 <__fp_mpack>
    45aa:	73 cf       	rjmp	.-282    	; 0x4492 <__fp_szero>

000045ac <__fp_mintl>:
    45ac:	88 23       	and	r24, r24
    45ae:	71 f4       	brne	.+28     	; 0x45cc <__fp_mintl+0x20>
    45b0:	77 23       	and	r23, r23
    45b2:	21 f0       	breq	.+8      	; 0x45bc <__fp_mintl+0x10>
    45b4:	98 50       	subi	r25, 0x08	; 8
    45b6:	87 2b       	or	r24, r23
    45b8:	76 2f       	mov	r23, r22
    45ba:	07 c0       	rjmp	.+14     	; 0x45ca <__fp_mintl+0x1e>
    45bc:	66 23       	and	r22, r22
    45be:	11 f4       	brne	.+4      	; 0x45c4 <__fp_mintl+0x18>
    45c0:	99 27       	eor	r25, r25
    45c2:	0d c0       	rjmp	.+26     	; 0x45de <__fp_mintl+0x32>
    45c4:	90 51       	subi	r25, 0x10	; 16
    45c6:	86 2b       	or	r24, r22
    45c8:	70 e0       	ldi	r23, 0x00	; 0
    45ca:	60 e0       	ldi	r22, 0x00	; 0
    45cc:	2a f0       	brmi	.+10     	; 0x45d8 <__fp_mintl+0x2c>
    45ce:	9a 95       	dec	r25
    45d0:	66 0f       	add	r22, r22
    45d2:	77 1f       	adc	r23, r23
    45d4:	88 1f       	adc	r24, r24
    45d6:	da f7       	brpl	.-10     	; 0x45ce <__fp_mintl+0x22>
    45d8:	88 0f       	add	r24, r24
    45da:	96 95       	lsr	r25
    45dc:	87 95       	ror	r24
    45de:	97 f9       	bld	r25, 7
    45e0:	08 95       	ret

000045e2 <__fp_mpack>:
    45e2:	9f 3f       	cpi	r25, 0xFF	; 255
    45e4:	31 f0       	breq	.+12     	; 0x45f2 <__fp_mpack_finite+0xc>

000045e6 <__fp_mpack_finite>:
    45e6:	91 50       	subi	r25, 0x01	; 1
    45e8:	20 f4       	brcc	.+8      	; 0x45f2 <__fp_mpack_finite+0xc>
    45ea:	87 95       	ror	r24
    45ec:	77 95       	ror	r23
    45ee:	67 95       	ror	r22
    45f0:	b7 95       	ror	r27
    45f2:	88 0f       	add	r24, r24
    45f4:	91 1d       	adc	r25, r1
    45f6:	96 95       	lsr	r25
    45f8:	87 95       	ror	r24
    45fa:	97 f9       	bld	r25, 7
    45fc:	08 95       	ret

000045fe <__tablejump2__>:
    45fe:	ee 0f       	add	r30, r30
    4600:	ff 1f       	adc	r31, r31
    4602:	05 90       	lpm	r0, Z+
    4604:	f4 91       	lpm	r31, Z
    4606:	e0 2d       	mov	r30, r0
    4608:	09 94       	ijmp

0000460a <atof>:
    460a:	66 27       	eor	r22, r22
    460c:	77 27       	eor	r23, r23
    460e:	92 c0       	rjmp	.+292    	; 0x4734 <strtod>

00004610 <atol>:
    4610:	1f 93       	push	r17
    4612:	fc 01       	movw	r30, r24
    4614:	99 27       	eor	r25, r25
    4616:	88 27       	eor	r24, r24
    4618:	bc 01       	movw	r22, r24
    461a:	e8 94       	clt
    461c:	11 91       	ld	r17, Z+
    461e:	10 32       	cpi	r17, 0x20	; 32
    4620:	e9 f3       	breq	.-6      	; 0x461c <atol+0xc>
    4622:	19 30       	cpi	r17, 0x09	; 9
    4624:	10 f0       	brcs	.+4      	; 0x462a <atol+0x1a>
    4626:	1e 30       	cpi	r17, 0x0E	; 14
    4628:	c8 f3       	brcs	.-14     	; 0x461c <atol+0xc>
    462a:	1b 32       	cpi	r17, 0x2B	; 43
    462c:	49 f0       	breq	.+18     	; 0x4640 <atol+0x30>
    462e:	1d 32       	cpi	r17, 0x2D	; 45
    4630:	41 f4       	brne	.+16     	; 0x4642 <atol+0x32>
    4632:	68 94       	set
    4634:	05 c0       	rjmp	.+10     	; 0x4640 <atol+0x30>
    4636:	50 d0       	rcall	.+160    	; 0x46d8 <__mulsi_const_10>
    4638:	61 0f       	add	r22, r17
    463a:	71 1d       	adc	r23, r1
    463c:	81 1d       	adc	r24, r1
    463e:	91 1d       	adc	r25, r1
    4640:	11 91       	ld	r17, Z+
    4642:	10 53       	subi	r17, 0x30	; 48
    4644:	1a 30       	cpi	r17, 0x0A	; 10
    4646:	b8 f3       	brcs	.-18     	; 0x4636 <atol+0x26>
    4648:	3e f4       	brtc	.+14     	; 0x4658 <atol+0x48>
    464a:	90 95       	com	r25
    464c:	80 95       	com	r24
    464e:	70 95       	com	r23
    4650:	61 95       	neg	r22
    4652:	7f 4f       	sbci	r23, 0xFF	; 255
    4654:	8f 4f       	sbci	r24, 0xFF	; 255
    4656:	9f 4f       	sbci	r25, 0xFF	; 255
    4658:	1f 91       	pop	r17
    465a:	08 95       	ret

0000465c <strcat>:
    465c:	fb 01       	movw	r30, r22
    465e:	dc 01       	movw	r26, r24
    4660:	0d 90       	ld	r0, X+
    4662:	00 20       	and	r0, r0
    4664:	e9 f7       	brne	.-6      	; 0x4660 <strcat+0x4>
    4666:	11 97       	sbiw	r26, 0x01	; 1
    4668:	01 90       	ld	r0, Z+
    466a:	0d 92       	st	X+, r0
    466c:	00 20       	and	r0, r0
    466e:	e1 f7       	brne	.-8      	; 0x4668 <strcat+0xc>
    4670:	08 95       	ret

00004672 <strchr>:
    4672:	fc 01       	movw	r30, r24
    4674:	81 91       	ld	r24, Z+
    4676:	86 17       	cp	r24, r22
    4678:	21 f0       	breq	.+8      	; 0x4682 <strchr+0x10>
    467a:	88 23       	and	r24, r24
    467c:	d9 f7       	brne	.-10     	; 0x4674 <strchr+0x2>
    467e:	99 27       	eor	r25, r25
    4680:	08 95       	ret
    4682:	31 97       	sbiw	r30, 0x01	; 1
    4684:	cf 01       	movw	r24, r30
    4686:	08 95       	ret

00004688 <strcmp>:
    4688:	fb 01       	movw	r30, r22
    468a:	dc 01       	movw	r26, r24
    468c:	8d 91       	ld	r24, X+
    468e:	01 90       	ld	r0, Z+
    4690:	80 19       	sub	r24, r0
    4692:	01 10       	cpse	r0, r1
    4694:	d9 f3       	breq	.-10     	; 0x468c <strcmp+0x4>
    4696:	99 0b       	sbc	r25, r25
    4698:	08 95       	ret

0000469a <strnlen>:
    469a:	fc 01       	movw	r30, r24
    469c:	61 50       	subi	r22, 0x01	; 1
    469e:	70 40       	sbci	r23, 0x00	; 0
    46a0:	01 90       	ld	r0, Z+
    46a2:	01 10       	cpse	r0, r1
    46a4:	d8 f7       	brcc	.-10     	; 0x469c <strnlen+0x2>
    46a6:	80 95       	com	r24
    46a8:	90 95       	com	r25
    46aa:	8e 0f       	add	r24, r30
    46ac:	9f 1f       	adc	r25, r31
    46ae:	08 95       	ret

000046b0 <strupr>:
    46b0:	dc 01       	movw	r26, r24
    46b2:	6c 91       	ld	r22, X
    46b4:	61 56       	subi	r22, 0x61	; 97
    46b6:	6a 31       	cpi	r22, 0x1A	; 26
    46b8:	08 f0       	brcs	.+2      	; 0x46bc <strupr+0xc>
    46ba:	60 5e       	subi	r22, 0xE0	; 224
    46bc:	6f 5b       	subi	r22, 0xBF	; 191
    46be:	6d 93       	st	X+, r22
    46c0:	c1 f7       	brne	.-16     	; 0x46b2 <strupr+0x2>
    46c2:	08 95       	ret

000046c4 <__itoa_ncheck>:
    46c4:	bb 27       	eor	r27, r27
    46c6:	4a 30       	cpi	r20, 0x0A	; 10
    46c8:	31 f4       	brne	.+12     	; 0x46d6 <__itoa_ncheck+0x12>
    46ca:	99 23       	and	r25, r25
    46cc:	22 f4       	brpl	.+8      	; 0x46d6 <__itoa_ncheck+0x12>
    46ce:	bd e2       	ldi	r27, 0x2D	; 45
    46d0:	90 95       	com	r25
    46d2:	81 95       	neg	r24
    46d4:	9f 4f       	sbci	r25, 0xFF	; 255
    46d6:	16 c0       	rjmp	.+44     	; 0x4704 <__utoa_common>

000046d8 <__mulsi_const_10>:
    46d8:	59 2f       	mov	r21, r25
    46da:	48 2f       	mov	r20, r24
    46dc:	37 2f       	mov	r19, r23
    46de:	26 2f       	mov	r18, r22
    46e0:	66 0f       	add	r22, r22
    46e2:	77 1f       	adc	r23, r23
    46e4:	88 1f       	adc	r24, r24
    46e6:	99 1f       	adc	r25, r25
    46e8:	66 0f       	add	r22, r22
    46ea:	77 1f       	adc	r23, r23
    46ec:	88 1f       	adc	r24, r24
    46ee:	99 1f       	adc	r25, r25
    46f0:	62 0f       	add	r22, r18
    46f2:	73 1f       	adc	r23, r19
    46f4:	84 1f       	adc	r24, r20
    46f6:	95 1f       	adc	r25, r21
    46f8:	66 0f       	add	r22, r22
    46fa:	77 1f       	adc	r23, r23
    46fc:	88 1f       	adc	r24, r24
    46fe:	99 1f       	adc	r25, r25
    4700:	08 95       	ret

00004702 <__utoa_ncheck>:
    4702:	bb 27       	eor	r27, r27

00004704 <__utoa_common>:
    4704:	fb 01       	movw	r30, r22
    4706:	55 27       	eor	r21, r21
    4708:	aa 27       	eor	r26, r26
    470a:	88 0f       	add	r24, r24
    470c:	99 1f       	adc	r25, r25
    470e:	aa 1f       	adc	r26, r26
    4710:	a4 17       	cp	r26, r20
    4712:	10 f0       	brcs	.+4      	; 0x4718 <__utoa_common+0x14>
    4714:	a4 1b       	sub	r26, r20
    4716:	83 95       	inc	r24
    4718:	50 51       	subi	r21, 0x10	; 16
    471a:	b9 f7       	brne	.-18     	; 0x470a <__utoa_common+0x6>
    471c:	a0 5d       	subi	r26, 0xD0	; 208
    471e:	aa 33       	cpi	r26, 0x3A	; 58
    4720:	08 f0       	brcs	.+2      	; 0x4724 <__utoa_common+0x20>
    4722:	a9 5d       	subi	r26, 0xD9	; 217
    4724:	a1 93       	st	Z+, r26
    4726:	00 97       	sbiw	r24, 0x00	; 0
    4728:	79 f7       	brne	.-34     	; 0x4708 <__utoa_common+0x4>
    472a:	b1 11       	cpse	r27, r1
    472c:	b1 93       	st	Z+, r27
    472e:	11 92       	st	Z+, r1
    4730:	cb 01       	movw	r24, r22
    4732:	72 c1       	rjmp	.+740    	; 0x4a18 <strrev>

00004734 <strtod>:
    4734:	a0 e0       	ldi	r26, 0x00	; 0
    4736:	b0 e0       	ldi	r27, 0x00	; 0
    4738:	ef e9       	ldi	r30, 0x9F	; 159
    473a:	f3 e2       	ldi	r31, 0x23	; 35
    473c:	b9 c1       	rjmp	.+882    	; 0x4ab0 <__prologue_saves__+0x8>
    473e:	ec 01       	movw	r28, r24
    4740:	7b 01       	movw	r14, r22
    4742:	61 15       	cp	r22, r1
    4744:	71 05       	cpc	r23, r1
    4746:	19 f0       	breq	.+6      	; 0x474e <strtod+0x1a>
    4748:	db 01       	movw	r26, r22
    474a:	8d 93       	st	X+, r24
    474c:	9c 93       	st	X, r25
    474e:	8e 01       	movw	r16, r28
    4750:	0f 5f       	subi	r16, 0xFF	; 255
    4752:	1f 4f       	sbci	r17, 0xFF	; 255
    4754:	78 80       	ld	r7, Y
    4756:	87 2d       	mov	r24, r7
    4758:	90 e0       	ldi	r25, 0x00	; 0
    475a:	3e d1       	rcall	.+636    	; 0x49d8 <isspace>
    475c:	89 2b       	or	r24, r25
    475e:	11 f0       	breq	.+4      	; 0x4764 <strtod+0x30>
    4760:	e8 01       	movw	r28, r16
    4762:	f5 cf       	rjmp	.-22     	; 0x474e <strtod+0x1a>
    4764:	bd e2       	ldi	r27, 0x2D	; 45
    4766:	7b 12       	cpse	r7, r27
    4768:	05 c0       	rjmp	.+10     	; 0x4774 <strtod+0x40>
    476a:	0f 5f       	subi	r16, 0xFF	; 255
    476c:	1f 4f       	sbci	r17, 0xFF	; 255
    476e:	79 80       	ldd	r7, Y+1	; 0x01
    4770:	c1 e0       	ldi	r28, 0x01	; 1
    4772:	08 c0       	rjmp	.+16     	; 0x4784 <strtod+0x50>
    4774:	eb e2       	ldi	r30, 0x2B	; 43
    4776:	7e 12       	cpse	r7, r30
    4778:	04 c0       	rjmp	.+8      	; 0x4782 <strtod+0x4e>
    477a:	8e 01       	movw	r16, r28
    477c:	0e 5f       	subi	r16, 0xFE	; 254
    477e:	1f 4f       	sbci	r17, 0xFF	; 255
    4780:	79 80       	ldd	r7, Y+1	; 0x01
    4782:	c0 e0       	ldi	r28, 0x00	; 0
    4784:	68 01       	movw	r12, r16
    4786:	f1 e0       	ldi	r31, 0x01	; 1
    4788:	cf 1a       	sub	r12, r31
    478a:	d1 08       	sbc	r13, r1
    478c:	43 e0       	ldi	r20, 0x03	; 3
    478e:	50 e0       	ldi	r21, 0x00	; 0
    4790:	68 ed       	ldi	r22, 0xD8	; 216
    4792:	72 e0       	ldi	r23, 0x02	; 2
    4794:	c6 01       	movw	r24, r12
    4796:	28 d1       	rcall	.+592    	; 0x49e8 <strncasecmp_P>
    4798:	89 2b       	or	r24, r25
    479a:	e9 f4       	brne	.+58     	; 0x47d6 <strtod+0xa2>
    479c:	68 01       	movw	r12, r16
    479e:	22 e0       	ldi	r18, 0x02	; 2
    47a0:	c2 0e       	add	r12, r18
    47a2:	d1 1c       	adc	r13, r1
    47a4:	45 e0       	ldi	r20, 0x05	; 5
    47a6:	50 e0       	ldi	r21, 0x00	; 0
    47a8:	63 ed       	ldi	r22, 0xD3	; 211
    47aa:	72 e0       	ldi	r23, 0x02	; 2
    47ac:	c6 01       	movw	r24, r12
    47ae:	1c d1       	rcall	.+568    	; 0x49e8 <strncasecmp_P>
    47b0:	89 2b       	or	r24, r25
    47b2:	21 f4       	brne	.+8      	; 0x47bc <strtod+0x88>
    47b4:	68 01       	movw	r12, r16
    47b6:	87 e0       	ldi	r24, 0x07	; 7
    47b8:	c8 0e       	add	r12, r24
    47ba:	d1 1c       	adc	r13, r1
    47bc:	e1 14       	cp	r14, r1
    47be:	f1 04       	cpc	r15, r1
    47c0:	19 f0       	breq	.+6      	; 0x47c8 <strtod+0x94>
    47c2:	d7 01       	movw	r26, r14
    47c4:	cd 92       	st	X+, r12
    47c6:	dc 92       	st	X, r13
    47c8:	c1 11       	cpse	r28, r1
    47ca:	f9 c0       	rjmp	.+498    	; 0x49be <strtod+0x28a>
    47cc:	60 e0       	ldi	r22, 0x00	; 0
    47ce:	70 e0       	ldi	r23, 0x00	; 0
    47d0:	80 e8       	ldi	r24, 0x80	; 128
    47d2:	9f e7       	ldi	r25, 0x7F	; 127
    47d4:	fd c0       	rjmp	.+506    	; 0x49d0 <strtod+0x29c>
    47d6:	43 e0       	ldi	r20, 0x03	; 3
    47d8:	50 e0       	ldi	r21, 0x00	; 0
    47da:	60 ed       	ldi	r22, 0xD0	; 208
    47dc:	72 e0       	ldi	r23, 0x02	; 2
    47de:	c6 01       	movw	r24, r12
    47e0:	03 d1       	rcall	.+518    	; 0x49e8 <strncasecmp_P>
    47e2:	89 2b       	or	r24, r25
    47e4:	51 f4       	brne	.+20     	; 0x47fa <strtod+0xc6>
    47e6:	e1 14       	cp	r14, r1
    47e8:	f1 04       	cpc	r15, r1
    47ea:	09 f4       	brne	.+2      	; 0x47ee <strtod+0xba>
    47ec:	ed c0       	rjmp	.+474    	; 0x49c8 <strtod+0x294>
    47ee:	0e 5f       	subi	r16, 0xFE	; 254
    47f0:	1f 4f       	sbci	r17, 0xFF	; 255
    47f2:	f7 01       	movw	r30, r14
    47f4:	11 83       	std	Z+1, r17	; 0x01
    47f6:	00 83       	st	Z, r16
    47f8:	e7 c0       	rjmp	.+462    	; 0x49c8 <strtod+0x294>
    47fa:	68 01       	movw	r12, r16
    47fc:	60 e0       	ldi	r22, 0x00	; 0
    47fe:	70 e0       	ldi	r23, 0x00	; 0
    4800:	cb 01       	movw	r24, r22
    4802:	00 e0       	ldi	r16, 0x00	; 0
    4804:	10 e0       	ldi	r17, 0x00	; 0
    4806:	f6 01       	movw	r30, r12
    4808:	d0 ed       	ldi	r29, 0xD0	; 208
    480a:	d7 0d       	add	r29, r7
    480c:	da 30       	cpi	r29, 0x0A	; 10
    480e:	50 f5       	brcc	.+84     	; 0x4864 <strtod+0x130>
    4810:	2c 2f       	mov	r18, r28
    4812:	22 60       	ori	r18, 0x02	; 2
    4814:	62 2e       	mov	r6, r18
    4816:	2c 2f       	mov	r18, r28
    4818:	28 70       	andi	r18, 0x08	; 8
    481a:	c2 ff       	sbrs	r28, 2
    481c:	05 c0       	rjmp	.+10     	; 0x4828 <strtod+0xf4>
    481e:	21 11       	cpse	r18, r1
    4820:	27 c0       	rjmp	.+78     	; 0x4870 <strtod+0x13c>
    4822:	0f 5f       	subi	r16, 0xFF	; 255
    4824:	1f 4f       	sbci	r17, 0xFF	; 255
    4826:	24 c0       	rjmp	.+72     	; 0x4870 <strtod+0x13c>
    4828:	22 23       	and	r18, r18
    482a:	11 f0       	breq	.+4      	; 0x4830 <strtod+0xfc>
    482c:	01 50       	subi	r16, 0x01	; 1
    482e:	11 09       	sbc	r17, r1
    4830:	a5 e0       	ldi	r26, 0x05	; 5
    4832:	b0 e0       	ldi	r27, 0x00	; 0
    4834:	9b 01       	movw	r18, r22
    4836:	ac 01       	movw	r20, r24
    4838:	2d d1       	rcall	.+602    	; 0x4a94 <__muluhisi3>
    483a:	4b 01       	movw	r8, r22
    483c:	5c 01       	movw	r10, r24
    483e:	88 0c       	add	r8, r8
    4840:	99 1c       	adc	r9, r9
    4842:	aa 1c       	adc	r10, r10
    4844:	bb 1c       	adc	r11, r11
    4846:	c5 01       	movw	r24, r10
    4848:	b4 01       	movw	r22, r8
    484a:	6d 0f       	add	r22, r29
    484c:	71 1d       	adc	r23, r1
    484e:	81 1d       	adc	r24, r1
    4850:	91 1d       	adc	r25, r1
    4852:	68 39       	cpi	r22, 0x98	; 152
    4854:	a9 e9       	ldi	r26, 0x99	; 153
    4856:	7a 07       	cpc	r23, r26
    4858:	8a 07       	cpc	r24, r26
    485a:	a9 e1       	ldi	r26, 0x19	; 25
    485c:	9a 07       	cpc	r25, r26
    485e:	40 f0       	brcs	.+16     	; 0x4870 <strtod+0x13c>
    4860:	c6 60       	ori	r28, 0x06	; 6
    4862:	05 c0       	rjmp	.+10     	; 0x486e <strtod+0x13a>
    4864:	de 3f       	cpi	r29, 0xFE	; 254
    4866:	51 f4       	brne	.+20     	; 0x487c <strtod+0x148>
    4868:	c3 fd       	sbrc	r28, 3
    486a:	44 c0       	rjmp	.+136    	; 0x48f4 <strtod+0x1c0>
    486c:	c8 60       	ori	r28, 0x08	; 8
    486e:	6c 2e       	mov	r6, r28
    4870:	bf ef       	ldi	r27, 0xFF	; 255
    4872:	cb 1a       	sub	r12, r27
    4874:	db 0a       	sbc	r13, r27
    4876:	70 80       	ld	r7, Z
    4878:	c6 2d       	mov	r28, r6
    487a:	c5 cf       	rjmp	.-118    	; 0x4806 <strtod+0xd2>
    487c:	2d 2f       	mov	r18, r29
    487e:	2f 7d       	andi	r18, 0xDF	; 223
    4880:	25 31       	cpi	r18, 0x15	; 21
    4882:	c1 f5       	brne	.+112    	; 0x48f4 <strtod+0x1c0>
    4884:	40 81       	ld	r20, Z
    4886:	4d 32       	cpi	r20, 0x2D	; 45
    4888:	11 f4       	brne	.+4      	; 0x488e <strtod+0x15a>
    488a:	c0 61       	ori	r28, 0x10	; 16
    488c:	06 c0       	rjmp	.+12     	; 0x489a <strtod+0x166>
    488e:	4b 32       	cpi	r20, 0x2B	; 43
    4890:	21 f0       	breq	.+8      	; 0x489a <strtod+0x166>
    4892:	31 96       	adiw	r30, 0x01	; 1
    4894:	21 e0       	ldi	r18, 0x01	; 1
    4896:	30 e0       	ldi	r19, 0x00	; 0
    4898:	06 c0       	rjmp	.+12     	; 0x48a6 <strtod+0x172>
    489a:	32 96       	adiw	r30, 0x02	; 2
    489c:	d6 01       	movw	r26, r12
    489e:	11 96       	adiw	r26, 0x01	; 1
    48a0:	4c 91       	ld	r20, X
    48a2:	22 e0       	ldi	r18, 0x02	; 2
    48a4:	30 e0       	ldi	r19, 0x00	; 0
    48a6:	a0 ed       	ldi	r26, 0xD0	; 208
    48a8:	a4 0f       	add	r26, r20
    48aa:	aa 30       	cpi	r26, 0x0A	; 10
    48ac:	18 f0       	brcs	.+6      	; 0x48b4 <strtod+0x180>
    48ae:	e2 1b       	sub	r30, r18
    48b0:	f3 0b       	sbc	r31, r19
    48b2:	20 c0       	rjmp	.+64     	; 0x48f4 <strtod+0x1c0>
    48b4:	40 e0       	ldi	r20, 0x00	; 0
    48b6:	50 e0       	ldi	r21, 0x00	; 0
    48b8:	40 38       	cpi	r20, 0x80	; 128
    48ba:	bc e0       	ldi	r27, 0x0C	; 12
    48bc:	5b 07       	cpc	r21, r27
    48be:	5c f4       	brge	.+22     	; 0x48d6 <strtod+0x1a2>
    48c0:	9a 01       	movw	r18, r20
    48c2:	22 0f       	add	r18, r18
    48c4:	33 1f       	adc	r19, r19
    48c6:	22 0f       	add	r18, r18
    48c8:	33 1f       	adc	r19, r19
    48ca:	42 0f       	add	r20, r18
    48cc:	53 1f       	adc	r21, r19
    48ce:	44 0f       	add	r20, r20
    48d0:	55 1f       	adc	r21, r21
    48d2:	4a 0f       	add	r20, r26
    48d4:	51 1d       	adc	r21, r1
    48d6:	31 96       	adiw	r30, 0x01	; 1
    48d8:	df 01       	movw	r26, r30
    48da:	11 97       	sbiw	r26, 0x01	; 1
    48dc:	2c 91       	ld	r18, X
    48de:	a0 ed       	ldi	r26, 0xD0	; 208
    48e0:	a2 0f       	add	r26, r18
    48e2:	aa 30       	cpi	r26, 0x0A	; 10
    48e4:	48 f3       	brcs	.-46     	; 0x48b8 <strtod+0x184>
    48e6:	c4 ff       	sbrs	r28, 4
    48e8:	03 c0       	rjmp	.+6      	; 0x48f0 <strtod+0x1bc>
    48ea:	51 95       	neg	r21
    48ec:	41 95       	neg	r20
    48ee:	51 09       	sbc	r21, r1
    48f0:	04 0f       	add	r16, r20
    48f2:	15 1f       	adc	r17, r21
    48f4:	c1 ff       	sbrs	r28, 1
    48f6:	07 c0       	rjmp	.+14     	; 0x4906 <strtod+0x1d2>
    48f8:	e1 14       	cp	r14, r1
    48fa:	f1 04       	cpc	r15, r1
    48fc:	21 f0       	breq	.+8      	; 0x4906 <strtod+0x1d2>
    48fe:	31 97       	sbiw	r30, 0x01	; 1
    4900:	d7 01       	movw	r26, r14
    4902:	ed 93       	st	X+, r30
    4904:	fc 93       	st	X, r31
    4906:	19 dd       	rcall	.-1486   	; 0x433a <__floatunsisf>
    4908:	c3 70       	andi	r28, 0x03	; 3
    490a:	c3 30       	cpi	r28, 0x03	; 3
    490c:	19 f0       	breq	.+6      	; 0x4914 <strtod+0x1e0>
    490e:	6b 01       	movw	r12, r22
    4910:	7c 01       	movw	r14, r24
    4912:	06 c0       	rjmp	.+12     	; 0x4920 <strtod+0x1ec>
    4914:	6b 01       	movw	r12, r22
    4916:	7c 01       	movw	r14, r24
    4918:	f7 fa       	bst	r15, 7
    491a:	f0 94       	com	r15
    491c:	f7 f8       	bld	r15, 7
    491e:	f0 94       	com	r15
    4920:	20 e0       	ldi	r18, 0x00	; 0
    4922:	30 e0       	ldi	r19, 0x00	; 0
    4924:	a9 01       	movw	r20, r18
    4926:	c7 01       	movw	r24, r14
    4928:	b6 01       	movw	r22, r12
    492a:	d2 dc       	rcall	.-1628   	; 0x42d0 <__cmpsf2>
    492c:	88 23       	and	r24, r24
    492e:	09 f4       	brne	.+2      	; 0x4932 <strtod+0x1fe>
    4930:	43 c0       	rjmp	.+134    	; 0x49b8 <strtod+0x284>
    4932:	17 ff       	sbrs	r17, 7
    4934:	06 c0       	rjmp	.+12     	; 0x4942 <strtod+0x20e>
    4936:	11 95       	neg	r17
    4938:	01 95       	neg	r16
    493a:	11 09       	sbc	r17, r1
    493c:	cf ee       	ldi	r28, 0xEF	; 239
    493e:	d2 e0       	ldi	r29, 0x02	; 2
    4940:	02 c0       	rjmp	.+4      	; 0x4946 <strtod+0x212>
    4942:	c7 e0       	ldi	r28, 0x07	; 7
    4944:	d3 e0       	ldi	r29, 0x03	; 3
    4946:	5e 01       	movw	r10, r28
    4948:	b8 e1       	ldi	r27, 0x18	; 24
    494a:	ab 1a       	sub	r10, r27
    494c:	b1 08       	sbc	r11, r1
    494e:	46 01       	movw	r8, r12
    4950:	be 2d       	mov	r27, r14
    4952:	af 2d       	mov	r26, r15
    4954:	90 e2       	ldi	r25, 0x20	; 32
    4956:	e9 2e       	mov	r14, r25
    4958:	f1 2c       	mov	r15, r1
    495a:	0e 15       	cp	r16, r14
    495c:	1f 05       	cpc	r17, r15
    495e:	7c f0       	brlt	.+30     	; 0x497e <strtod+0x24a>
    4960:	fe 01       	movw	r30, r28
    4962:	25 91       	lpm	r18, Z+
    4964:	35 91       	lpm	r19, Z+
    4966:	45 91       	lpm	r20, Z+
    4968:	54 91       	lpm	r21, Z
    496a:	b4 01       	movw	r22, r8
    496c:	8b 2f       	mov	r24, r27
    496e:	9a 2f       	mov	r25, r26
    4970:	9a dd       	rcall	.-1228   	; 0x44a6 <__mulsf3>
    4972:	4b 01       	movw	r8, r22
    4974:	b8 2f       	mov	r27, r24
    4976:	a9 2f       	mov	r26, r25
    4978:	0e 19       	sub	r16, r14
    497a:	1f 09       	sbc	r17, r15
    497c:	ee cf       	rjmp	.-36     	; 0x495a <strtod+0x226>
    497e:	24 97       	sbiw	r28, 0x04	; 4
    4980:	f5 94       	asr	r15
    4982:	e7 94       	ror	r14
    4984:	ca 15       	cp	r28, r10
    4986:	db 05       	cpc	r29, r11
    4988:	41 f7       	brne	.-48     	; 0x495a <strtod+0x226>
    498a:	64 01       	movw	r12, r8
    498c:	eb 2e       	mov	r14, r27
    498e:	fa 2e       	mov	r15, r26
    4990:	8e 2d       	mov	r24, r14
    4992:	88 0f       	add	r24, r24
    4994:	8f 2d       	mov	r24, r15
    4996:	88 1f       	adc	r24, r24
    4998:	8f 3f       	cpi	r24, 0xFF	; 255
    499a:	41 f0       	breq	.+16     	; 0x49ac <strtod+0x278>
    499c:	20 e0       	ldi	r18, 0x00	; 0
    499e:	30 e0       	ldi	r19, 0x00	; 0
    49a0:	a9 01       	movw	r20, r18
    49a2:	c7 01       	movw	r24, r14
    49a4:	b6 01       	movw	r22, r12
    49a6:	94 dc       	rcall	.-1752   	; 0x42d0 <__cmpsf2>
    49a8:	81 11       	cpse	r24, r1
    49aa:	06 c0       	rjmp	.+12     	; 0x49b8 <strtod+0x284>
    49ac:	82 e2       	ldi	r24, 0x22	; 34
    49ae:	90 e0       	ldi	r25, 0x00	; 0
    49b0:	90 93 d8 04 	sts	0x04D8, r25
    49b4:	80 93 d7 04 	sts	0x04D7, r24
    49b8:	c7 01       	movw	r24, r14
    49ba:	b6 01       	movw	r22, r12
    49bc:	09 c0       	rjmp	.+18     	; 0x49d0 <strtod+0x29c>
    49be:	60 e0       	ldi	r22, 0x00	; 0
    49c0:	70 e0       	ldi	r23, 0x00	; 0
    49c2:	80 e8       	ldi	r24, 0x80	; 128
    49c4:	9f ef       	ldi	r25, 0xFF	; 255
    49c6:	04 c0       	rjmp	.+8      	; 0x49d0 <strtod+0x29c>
    49c8:	60 e0       	ldi	r22, 0x00	; 0
    49ca:	70 e0       	ldi	r23, 0x00	; 0
    49cc:	80 ec       	ldi	r24, 0xC0	; 192
    49ce:	9f e7       	ldi	r25, 0x7F	; 127
    49d0:	cd b7       	in	r28, 0x3d	; 61
    49d2:	de b7       	in	r29, 0x3e	; 62
    49d4:	ee e0       	ldi	r30, 0x0E	; 14
    49d6:	88 c0       	rjmp	.+272    	; 0x4ae8 <__epilogue_restores__+0x8>

000049d8 <isspace>:
    49d8:	91 11       	cpse	r25, r1
    49da:	2e c0       	rjmp	.+92     	; 0x4a38 <__ctype_isfalse>
    49dc:	80 32       	cpi	r24, 0x20	; 32
    49de:	19 f0       	breq	.+6      	; 0x49e6 <isspace+0xe>
    49e0:	89 50       	subi	r24, 0x09	; 9
    49e2:	85 50       	subi	r24, 0x05	; 5
    49e4:	d0 f7       	brcc	.-12     	; 0x49da <isspace+0x2>
    49e6:	08 95       	ret

000049e8 <strncasecmp_P>:
    49e8:	fb 01       	movw	r30, r22
    49ea:	dc 01       	movw	r26, r24
    49ec:	41 50       	subi	r20, 0x01	; 1
    49ee:	50 40       	sbci	r21, 0x00	; 0
    49f0:	88 f0       	brcs	.+34     	; 0x4a14 <strncasecmp_P+0x2c>
    49f2:	8d 91       	ld	r24, X+
    49f4:	81 34       	cpi	r24, 0x41	; 65
    49f6:	1c f0       	brlt	.+6      	; 0x49fe <strncasecmp_P+0x16>
    49f8:	8b 35       	cpi	r24, 0x5B	; 91
    49fa:	0c f4       	brge	.+2      	; 0x49fe <strncasecmp_P+0x16>
    49fc:	80 5e       	subi	r24, 0xE0	; 224
    49fe:	65 91       	lpm	r22, Z+
    4a00:	61 34       	cpi	r22, 0x41	; 65
    4a02:	1c f0       	brlt	.+6      	; 0x4a0a <strncasecmp_P+0x22>
    4a04:	6b 35       	cpi	r22, 0x5B	; 91
    4a06:	0c f4       	brge	.+2      	; 0x4a0a <strncasecmp_P+0x22>
    4a08:	60 5e       	subi	r22, 0xE0	; 224
    4a0a:	86 1b       	sub	r24, r22
    4a0c:	61 11       	cpse	r22, r1
    4a0e:	71 f3       	breq	.-36     	; 0x49ec <strncasecmp_P+0x4>
    4a10:	99 0b       	sbc	r25, r25
    4a12:	08 95       	ret
    4a14:	88 1b       	sub	r24, r24
    4a16:	fc cf       	rjmp	.-8      	; 0x4a10 <strncasecmp_P+0x28>

00004a18 <strrev>:
    4a18:	dc 01       	movw	r26, r24
    4a1a:	fc 01       	movw	r30, r24
    4a1c:	67 2f       	mov	r22, r23
    4a1e:	71 91       	ld	r23, Z+
    4a20:	77 23       	and	r23, r23
    4a22:	e1 f7       	brne	.-8      	; 0x4a1c <strrev+0x4>
    4a24:	32 97       	sbiw	r30, 0x02	; 2
    4a26:	04 c0       	rjmp	.+8      	; 0x4a30 <strrev+0x18>
    4a28:	7c 91       	ld	r23, X
    4a2a:	6d 93       	st	X+, r22
    4a2c:	70 83       	st	Z, r23
    4a2e:	62 91       	ld	r22, -Z
    4a30:	ae 17       	cp	r26, r30
    4a32:	bf 07       	cpc	r27, r31
    4a34:	c8 f3       	brcs	.-14     	; 0x4a28 <strrev+0x10>
    4a36:	08 95       	ret

00004a38 <__ctype_isfalse>:
    4a38:	99 27       	eor	r25, r25
    4a3a:	88 27       	eor	r24, r24

00004a3c <__ctype_istrue>:
    4a3c:	08 95       	ret

00004a3e <eeprom_read_dword>:
    4a3e:	a6 e1       	ldi	r26, 0x16	; 22
    4a40:	b0 e0       	ldi	r27, 0x00	; 0
    4a42:	44 e0       	ldi	r20, 0x04	; 4
    4a44:	50 e0       	ldi	r21, 0x00	; 0
    4a46:	0a c0       	rjmp	.+20     	; 0x4a5c <eeprom_read_blraw>

00004a48 <eeprom_write_dword>:
    4a48:	24 2f       	mov	r18, r20
    4a4a:	17 d0       	rcall	.+46     	; 0x4a7a <eeprom_write_r18>
    4a4c:	25 2f       	mov	r18, r21
    4a4e:	15 d0       	rcall	.+42     	; 0x4a7a <eeprom_write_r18>
    4a50:	00 c0       	rjmp	.+0      	; 0x4a52 <eeprom_write_word>

00004a52 <eeprom_write_word>:
    4a52:	12 d0       	rcall	.+36     	; 0x4a78 <eeprom_write_byte>
    4a54:	27 2f       	mov	r18, r23
    4a56:	11 c0       	rjmp	.+34     	; 0x4a7a <eeprom_write_r18>

00004a58 <eeprom_read_block>:
    4a58:	dc 01       	movw	r26, r24
    4a5a:	cb 01       	movw	r24, r22

00004a5c <eeprom_read_blraw>:
    4a5c:	fc 01       	movw	r30, r24
    4a5e:	f9 99       	sbic	0x1f, 1	; 31
    4a60:	fe cf       	rjmp	.-4      	; 0x4a5e <eeprom_read_blraw+0x2>
    4a62:	06 c0       	rjmp	.+12     	; 0x4a70 <eeprom_read_blraw+0x14>
    4a64:	f2 bd       	out	0x22, r31	; 34
    4a66:	e1 bd       	out	0x21, r30	; 33
    4a68:	f8 9a       	sbi	0x1f, 0	; 31
    4a6a:	31 96       	adiw	r30, 0x01	; 1
    4a6c:	00 b4       	in	r0, 0x20	; 32
    4a6e:	0d 92       	st	X+, r0
    4a70:	41 50       	subi	r20, 0x01	; 1
    4a72:	50 40       	sbci	r21, 0x00	; 0
    4a74:	b8 f7       	brcc	.-18     	; 0x4a64 <eeprom_read_blraw+0x8>
    4a76:	08 95       	ret

00004a78 <eeprom_write_byte>:
    4a78:	26 2f       	mov	r18, r22

00004a7a <eeprom_write_r18>:
    4a7a:	f9 99       	sbic	0x1f, 1	; 31
    4a7c:	fe cf       	rjmp	.-4      	; 0x4a7a <eeprom_write_r18>
    4a7e:	1f ba       	out	0x1f, r1	; 31
    4a80:	92 bd       	out	0x22, r25	; 34
    4a82:	81 bd       	out	0x21, r24	; 33
    4a84:	20 bd       	out	0x20, r18	; 32
    4a86:	0f b6       	in	r0, 0x3f	; 63
    4a88:	f8 94       	cli
    4a8a:	fa 9a       	sbi	0x1f, 2	; 31
    4a8c:	f9 9a       	sbi	0x1f, 1	; 31
    4a8e:	0f be       	out	0x3f, r0	; 63
    4a90:	01 96       	adiw	r24, 0x01	; 1
    4a92:	08 95       	ret

00004a94 <__muluhisi3>:
    4a94:	40 d0       	rcall	.+128    	; 0x4b16 <__umulhisi3>
    4a96:	a5 9f       	mul	r26, r21
    4a98:	90 0d       	add	r25, r0
    4a9a:	b4 9f       	mul	r27, r20
    4a9c:	90 0d       	add	r25, r0
    4a9e:	a4 9f       	mul	r26, r20
    4aa0:	80 0d       	add	r24, r0
    4aa2:	91 1d       	adc	r25, r1
    4aa4:	11 24       	eor	r1, r1
    4aa6:	08 95       	ret

00004aa8 <__prologue_saves__>:
    4aa8:	2f 92       	push	r2
    4aaa:	3f 92       	push	r3
    4aac:	4f 92       	push	r4
    4aae:	5f 92       	push	r5
    4ab0:	6f 92       	push	r6
    4ab2:	7f 92       	push	r7
    4ab4:	8f 92       	push	r8
    4ab6:	9f 92       	push	r9
    4ab8:	af 92       	push	r10
    4aba:	bf 92       	push	r11
    4abc:	cf 92       	push	r12
    4abe:	df 92       	push	r13
    4ac0:	ef 92       	push	r14
    4ac2:	ff 92       	push	r15
    4ac4:	0f 93       	push	r16
    4ac6:	1f 93       	push	r17
    4ac8:	cf 93       	push	r28
    4aca:	df 93       	push	r29
    4acc:	cd b7       	in	r28, 0x3d	; 61
    4ace:	de b7       	in	r29, 0x3e	; 62
    4ad0:	ca 1b       	sub	r28, r26
    4ad2:	db 0b       	sbc	r29, r27
    4ad4:	0f b6       	in	r0, 0x3f	; 63
    4ad6:	f8 94       	cli
    4ad8:	de bf       	out	0x3e, r29	; 62
    4ada:	0f be       	out	0x3f, r0	; 63
    4adc:	cd bf       	out	0x3d, r28	; 61
    4ade:	09 94       	ijmp

00004ae0 <__epilogue_restores__>:
    4ae0:	2a 88       	ldd	r2, Y+18	; 0x12
    4ae2:	39 88       	ldd	r3, Y+17	; 0x11
    4ae4:	48 88       	ldd	r4, Y+16	; 0x10
    4ae6:	5f 84       	ldd	r5, Y+15	; 0x0f
    4ae8:	6e 84       	ldd	r6, Y+14	; 0x0e
    4aea:	7d 84       	ldd	r7, Y+13	; 0x0d
    4aec:	8c 84       	ldd	r8, Y+12	; 0x0c
    4aee:	9b 84       	ldd	r9, Y+11	; 0x0b
    4af0:	aa 84       	ldd	r10, Y+10	; 0x0a
    4af2:	b9 84       	ldd	r11, Y+9	; 0x09
    4af4:	c8 84       	ldd	r12, Y+8	; 0x08
    4af6:	df 80       	ldd	r13, Y+7	; 0x07
    4af8:	ee 80       	ldd	r14, Y+6	; 0x06
    4afa:	fd 80       	ldd	r15, Y+5	; 0x05
    4afc:	0c 81       	ldd	r16, Y+4	; 0x04
    4afe:	1b 81       	ldd	r17, Y+3	; 0x03
    4b00:	aa 81       	ldd	r26, Y+2	; 0x02
    4b02:	b9 81       	ldd	r27, Y+1	; 0x01
    4b04:	ce 0f       	add	r28, r30
    4b06:	d1 1d       	adc	r29, r1
    4b08:	0f b6       	in	r0, 0x3f	; 63
    4b0a:	f8 94       	cli
    4b0c:	de bf       	out	0x3e, r29	; 62
    4b0e:	0f be       	out	0x3f, r0	; 63
    4b10:	cd bf       	out	0x3d, r28	; 61
    4b12:	ed 01       	movw	r28, r26
    4b14:	08 95       	ret

00004b16 <__umulhisi3>:
    4b16:	a2 9f       	mul	r26, r18
    4b18:	b0 01       	movw	r22, r0
    4b1a:	b3 9f       	mul	r27, r19
    4b1c:	c0 01       	movw	r24, r0
    4b1e:	a3 9f       	mul	r26, r19
    4b20:	70 0d       	add	r23, r0
    4b22:	81 1d       	adc	r24, r1
    4b24:	11 24       	eor	r1, r1
    4b26:	91 1d       	adc	r25, r1
    4b28:	b2 9f       	mul	r27, r18
    4b2a:	70 0d       	add	r23, r0
    4b2c:	81 1d       	adc	r24, r1
    4b2e:	11 24       	eor	r1, r1
    4b30:	91 1d       	adc	r25, r1
    4b32:	08 95       	ret

00004b34 <_exit>:
    4b34:	f8 94       	cli

00004b36 <__stop_program>:
    4b36:	ff cf       	rjmp	.-2      	; 0x4b36 <__stop_program>

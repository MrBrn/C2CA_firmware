
C2CA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  00004cf0  00004d84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004cf0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003c1  00800144  00800144  00004dc8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004dc8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004e24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00004e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004c27  00000000  00000000  00004ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000428  00000000  00000000  00009afb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000028d4  00000000  00000000  00009f23  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000027c  00000000  00000000  0000c7f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001061c  00000000  00000000  0000ca74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000051ea  00000000  00000000  0001d090  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000780  00000000  00000000  0002227a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000062a  00000000  00000000  000229fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	88 c1       	rjmp	.+784    	; 0x312 <__ctors_end>
       2:	00 00       	nop
       4:	a3 c1       	rjmp	.+838    	; 0x34c <__bad_interrupt>
       6:	00 00       	nop
       8:	a1 c1       	rjmp	.+834    	; 0x34c <__bad_interrupt>
       a:	00 00       	nop
       c:	9f c1       	rjmp	.+830    	; 0x34c <__bad_interrupt>
       e:	00 00       	nop
      10:	9d c1       	rjmp	.+826    	; 0x34c <__bad_interrupt>
      12:	00 00       	nop
      14:	9b c1       	rjmp	.+822    	; 0x34c <__bad_interrupt>
      16:	00 00       	nop
      18:	99 c1       	rjmp	.+818    	; 0x34c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6b c5       	rjmp	.+2774   	; 0xaf4 <__vector_7>
      1e:	00 00       	nop
      20:	95 c1       	rjmp	.+810    	; 0x34c <__bad_interrupt>
      22:	00 00       	nop
      24:	93 c1       	rjmp	.+806    	; 0x34c <__bad_interrupt>
      26:	00 00       	nop
      28:	91 c1       	rjmp	.+802    	; 0x34c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8f c1       	rjmp	.+798    	; 0x34c <__bad_interrupt>
      2e:	00 00       	nop
      30:	8d c1       	rjmp	.+794    	; 0x34c <__bad_interrupt>
      32:	00 00       	nop
      34:	8b c1       	rjmp	.+790    	; 0x34c <__bad_interrupt>
      36:	00 00       	nop
      38:	bf c4       	rjmp	.+2430   	; 0x9b8 <__vector_14>
      3a:	00 00       	nop
      3c:	87 c1       	rjmp	.+782    	; 0x34c <__bad_interrupt>
      3e:	00 00       	nop
      40:	85 c1       	rjmp	.+778    	; 0x34c <__bad_interrupt>
      42:	00 00       	nop
      44:	83 c1       	rjmp	.+774    	; 0x34c <__bad_interrupt>
      46:	00 00       	nop
      48:	83 c4       	rjmp	.+2310   	; 0x950 <__vector_18>
      4a:	00 00       	nop
      4c:	41 c4       	rjmp	.+2178   	; 0x8d0 <__vector_19>
      4e:	00 00       	nop
      50:	7d c1       	rjmp	.+762    	; 0x34c <__bad_interrupt>
      52:	00 00       	nop
      54:	7b c1       	rjmp	.+758    	; 0x34c <__bad_interrupt>
      56:	00 00       	nop
      58:	79 c1       	rjmp	.+754    	; 0x34c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	77 c1       	rjmp	.+750    	; 0x34c <__bad_interrupt>
      5e:	00 00       	nop
      60:	75 c1       	rjmp	.+746    	; 0x34c <__bad_interrupt>
      62:	00 00       	nop
      64:	73 c1       	rjmp	.+742    	; 0x34c <__bad_interrupt>
      66:	00 00       	nop
      68:	7c 0f       	add	r23, r28
      6a:	8d 0f       	add	r24, r29
      6c:	ae 10       	cpse	r10, r14
      6e:	cd 11       	cpse	r28, r13
      70:	ec 12       	cpse	r14, r28
      72:	0b 14       	cp	r0, r11
      74:	2a 15       	cp	r18, r10
      76:	4a 16       	cp	r4, r26
      78:	5b 16       	cp	r5, r27
      7a:	6c 16       	cp	r6, r28
      7c:	7a 16       	cp	r7, r26
      7e:	bb 18       	sub	r11, r11
      80:	bb 18       	sub	r11, r11
      82:	bb 18       	sub	r11, r11
      84:	bb 18       	sub	r11, r11
      86:	bb 18       	sub	r11, r11
      88:	bb 18       	sub	r11, r11
      8a:	bb 18       	sub	r11, r11
      8c:	bb 18       	sub	r11, r11
      8e:	bb 18       	sub	r11, r11
      90:	bb 18       	sub	r11, r11
      92:	bb 18       	sub	r11, r11
      94:	bb 18       	sub	r11, r11
      96:	bb 18       	sub	r11, r11
      98:	bb 18       	sub	r11, r11
      9a:	bb 18       	sub	r11, r11
      9c:	bb 18       	sub	r11, r11
      9e:	bb 18       	sub	r11, r11
      a0:	bb 18       	sub	r11, r11
      a2:	bb 18       	sub	r11, r11
      a4:	bb 18       	sub	r11, r11
      a6:	bb 18       	sub	r11, r11
      a8:	bb 18       	sub	r11, r11
      aa:	bb 18       	sub	r11, r11
      ac:	bb 18       	sub	r11, r11
      ae:	bb 18       	sub	r11, r11
      b0:	bb 18       	sub	r11, r11
      b2:	bb 18       	sub	r11, r11
      b4:	bb 18       	sub	r11, r11
      b6:	bb 18       	sub	r11, r11
      b8:	bb 18       	sub	r11, r11
      ba:	bb 18       	sub	r11, r11
      bc:	bb 18       	sub	r11, r11
      be:	bb 18       	sub	r11, r11
      c0:	bb 18       	sub	r11, r11
      c2:	bb 18       	sub	r11, r11
      c4:	bb 18       	sub	r11, r11
      c6:	bb 18       	sub	r11, r11
      c8:	bb 18       	sub	r11, r11
      ca:	bb 18       	sub	r11, r11
      cc:	bb 18       	sub	r11, r11
      ce:	bb 18       	sub	r11, r11
      d0:	bb 18       	sub	r11, r11
      d2:	bb 18       	sub	r11, r11
      d4:	bb 18       	sub	r11, r11
      d6:	bb 18       	sub	r11, r11
      d8:	bb 18       	sub	r11, r11
      da:	bb 18       	sub	r11, r11
      dc:	bb 18       	sub	r11, r11
      de:	bb 18       	sub	r11, r11
      e0:	bb 18       	sub	r11, r11
      e2:	bb 18       	sub	r11, r11
      e4:	bb 18       	sub	r11, r11
      e6:	bb 18       	sub	r11, r11
      e8:	bb 18       	sub	r11, r11
      ea:	bb 18       	sub	r11, r11
      ec:	bb 18       	sub	r11, r11
      ee:	bb 18       	sub	r11, r11
      f0:	bb 18       	sub	r11, r11
      f2:	bb 18       	sub	r11, r11
      f4:	bb 18       	sub	r11, r11
      f6:	bb 18       	sub	r11, r11
      f8:	bb 18       	sub	r11, r11
      fa:	bb 18       	sub	r11, r11
      fc:	bb 18       	sub	r11, r11
      fe:	bb 18       	sub	r11, r11
     100:	bb 18       	sub	r11, r11
     102:	bb 18       	sub	r11, r11
     104:	bb 18       	sub	r11, r11
     106:	bb 18       	sub	r11, r11
     108:	bb 18       	sub	r11, r11
     10a:	bb 18       	sub	r11, r11
     10c:	bb 18       	sub	r11, r11
     10e:	bb 18       	sub	r11, r11
     110:	bb 18       	sub	r11, r11
     112:	bb 18       	sub	r11, r11
     114:	bb 18       	sub	r11, r11
     116:	bb 18       	sub	r11, r11
     118:	bb 18       	sub	r11, r11
     11a:	bb 18       	sub	r11, r11
     11c:	bb 18       	sub	r11, r11
     11e:	bb 18       	sub	r11, r11
     120:	bb 18       	sub	r11, r11
     122:	bb 18       	sub	r11, r11
     124:	bb 18       	sub	r11, r11
     126:	bb 18       	sub	r11, r11
     128:	bb 18       	sub	r11, r11
     12a:	bb 18       	sub	r11, r11
     12c:	bb 18       	sub	r11, r11
     12e:	bb 18       	sub	r11, r11
     130:	8d 16       	cp	r8, r29
     132:	9e 16       	cp	r9, r30
     134:	af 16       	cp	r10, r31
     136:	c0 16       	cp	r12, r16
     138:	d1 16       	cp	r13, r17
     13a:	e2 16       	cp	r14, r18
     13c:	f3 16       	cp	r15, r19
     13e:	04 17       	cp	r16, r20
     140:	15 17       	cp	r17, r21
     142:	26 17       	cp	r18, r22
     144:	34 17       	cp	r19, r20
     146:	bb 18       	sub	r11, r11
     148:	bb 18       	sub	r11, r11
     14a:	bb 18       	sub	r11, r11
     14c:	bb 18       	sub	r11, r11
     14e:	bb 18       	sub	r11, r11
     150:	bb 18       	sub	r11, r11
     152:	bb 18       	sub	r11, r11
     154:	bb 18       	sub	r11, r11
     156:	bb 18       	sub	r11, r11
     158:	bb 18       	sub	r11, r11
     15a:	bb 18       	sub	r11, r11
     15c:	bb 18       	sub	r11, r11
     15e:	bb 18       	sub	r11, r11
     160:	bb 18       	sub	r11, r11
     162:	bb 18       	sub	r11, r11
     164:	bb 18       	sub	r11, r11
     166:	bb 18       	sub	r11, r11
     168:	bb 18       	sub	r11, r11
     16a:	bb 18       	sub	r11, r11
     16c:	bb 18       	sub	r11, r11
     16e:	bb 18       	sub	r11, r11
     170:	bb 18       	sub	r11, r11
     172:	bb 18       	sub	r11, r11
     174:	bb 18       	sub	r11, r11
     176:	bb 18       	sub	r11, r11
     178:	bb 18       	sub	r11, r11
     17a:	bb 18       	sub	r11, r11
     17c:	bb 18       	sub	r11, r11
     17e:	bb 18       	sub	r11, r11
     180:	bb 18       	sub	r11, r11
     182:	bb 18       	sub	r11, r11
     184:	bb 18       	sub	r11, r11
     186:	bb 18       	sub	r11, r11
     188:	bb 18       	sub	r11, r11
     18a:	bb 18       	sub	r11, r11
     18c:	bb 18       	sub	r11, r11
     18e:	bb 18       	sub	r11, r11
     190:	bb 18       	sub	r11, r11
     192:	bb 18       	sub	r11, r11
     194:	bb 18       	sub	r11, r11
     196:	bb 18       	sub	r11, r11
     198:	bb 18       	sub	r11, r11
     19a:	bb 18       	sub	r11, r11
     19c:	bb 18       	sub	r11, r11
     19e:	bb 18       	sub	r11, r11
     1a0:	bb 18       	sub	r11, r11
     1a2:	bb 18       	sub	r11, r11
     1a4:	bb 18       	sub	r11, r11
     1a6:	bb 18       	sub	r11, r11
     1a8:	bb 18       	sub	r11, r11
     1aa:	bb 18       	sub	r11, r11
     1ac:	bb 18       	sub	r11, r11
     1ae:	bb 18       	sub	r11, r11
     1b0:	bb 18       	sub	r11, r11
     1b2:	bb 18       	sub	r11, r11
     1b4:	bb 18       	sub	r11, r11
     1b6:	bb 18       	sub	r11, r11
     1b8:	bb 18       	sub	r11, r11
     1ba:	bb 18       	sub	r11, r11
     1bc:	bb 18       	sub	r11, r11
     1be:	bb 18       	sub	r11, r11
     1c0:	bb 18       	sub	r11, r11
     1c2:	bb 18       	sub	r11, r11
     1c4:	bb 18       	sub	r11, r11
     1c6:	bb 18       	sub	r11, r11
     1c8:	bb 18       	sub	r11, r11
     1ca:	bb 18       	sub	r11, r11
     1cc:	bb 18       	sub	r11, r11
     1ce:	bb 18       	sub	r11, r11
     1d0:	bb 18       	sub	r11, r11
     1d2:	bb 18       	sub	r11, r11
     1d4:	bb 18       	sub	r11, r11
     1d6:	bb 18       	sub	r11, r11
     1d8:	bb 18       	sub	r11, r11
     1da:	bb 18       	sub	r11, r11
     1dc:	bb 18       	sub	r11, r11
     1de:	bb 18       	sub	r11, r11
     1e0:	bb 18       	sub	r11, r11
     1e2:	bb 18       	sub	r11, r11
     1e4:	bb 18       	sub	r11, r11
     1e6:	bb 18       	sub	r11, r11
     1e8:	bb 18       	sub	r11, r11
     1ea:	bb 18       	sub	r11, r11
     1ec:	bb 18       	sub	r11, r11
     1ee:	bb 18       	sub	r11, r11
     1f0:	bb 18       	sub	r11, r11
     1f2:	bb 18       	sub	r11, r11
     1f4:	bb 18       	sub	r11, r11
     1f6:	bb 18       	sub	r11, r11
     1f8:	47 17       	cp	r20, r23
     1fa:	58 17       	cp	r21, r24
     1fc:	69 17       	cp	r22, r25
     1fe:	7a 17       	cp	r23, r26
     200:	8b 17       	cp	r24, r27
     202:	9c 17       	cp	r25, r28
     204:	ad 17       	cp	r26, r29
     206:	be 17       	cp	r27, r30
     208:	cf 17       	cp	r28, r31
     20a:	e0 17       	cp	r30, r16
     20c:	ee 17       	cp	r30, r30
     20e:	bb 18       	sub	r11, r11
     210:	bb 18       	sub	r11, r11
     212:	bb 18       	sub	r11, r11
     214:	bb 18       	sub	r11, r11
     216:	bb 18       	sub	r11, r11
     218:	bb 18       	sub	r11, r11
     21a:	bb 18       	sub	r11, r11
     21c:	bb 18       	sub	r11, r11
     21e:	bb 18       	sub	r11, r11
     220:	bb 18       	sub	r11, r11
     222:	bb 18       	sub	r11, r11
     224:	bb 18       	sub	r11, r11
     226:	bb 18       	sub	r11, r11
     228:	bb 18       	sub	r11, r11
     22a:	bb 18       	sub	r11, r11
     22c:	bb 18       	sub	r11, r11
     22e:	bb 18       	sub	r11, r11
     230:	bb 18       	sub	r11, r11
     232:	bb 18       	sub	r11, r11
     234:	bb 18       	sub	r11, r11
     236:	bb 18       	sub	r11, r11
     238:	bb 18       	sub	r11, r11
     23a:	bb 18       	sub	r11, r11
     23c:	bb 18       	sub	r11, r11
     23e:	bb 18       	sub	r11, r11
     240:	bb 18       	sub	r11, r11
     242:	bb 18       	sub	r11, r11
     244:	bb 18       	sub	r11, r11
     246:	bb 18       	sub	r11, r11
     248:	bb 18       	sub	r11, r11
     24a:	bb 18       	sub	r11, r11
     24c:	bb 18       	sub	r11, r11
     24e:	bb 18       	sub	r11, r11
     250:	bb 18       	sub	r11, r11
     252:	bb 18       	sub	r11, r11
     254:	bb 18       	sub	r11, r11
     256:	bb 18       	sub	r11, r11
     258:	bb 18       	sub	r11, r11
     25a:	bb 18       	sub	r11, r11
     25c:	bb 18       	sub	r11, r11
     25e:	bb 18       	sub	r11, r11
     260:	bb 18       	sub	r11, r11
     262:	bb 18       	sub	r11, r11
     264:	bb 18       	sub	r11, r11
     266:	bb 18       	sub	r11, r11
     268:	bb 18       	sub	r11, r11
     26a:	bb 18       	sub	r11, r11
     26c:	bb 18       	sub	r11, r11
     26e:	bb 18       	sub	r11, r11
     270:	bb 18       	sub	r11, r11
     272:	bb 18       	sub	r11, r11
     274:	bb 18       	sub	r11, r11
     276:	bb 18       	sub	r11, r11
     278:	bb 18       	sub	r11, r11
     27a:	bb 18       	sub	r11, r11
     27c:	bb 18       	sub	r11, r11
     27e:	bb 18       	sub	r11, r11
     280:	bb 18       	sub	r11, r11
     282:	bb 18       	sub	r11, r11
     284:	bb 18       	sub	r11, r11
     286:	bb 18       	sub	r11, r11
     288:	bb 18       	sub	r11, r11
     28a:	bb 18       	sub	r11, r11
     28c:	bb 18       	sub	r11, r11
     28e:	bb 18       	sub	r11, r11
     290:	bb 18       	sub	r11, r11
     292:	bb 18       	sub	r11, r11
     294:	bb 18       	sub	r11, r11
     296:	bb 18       	sub	r11, r11
     298:	bb 18       	sub	r11, r11
     29a:	bb 18       	sub	r11, r11
     29c:	bb 18       	sub	r11, r11
     29e:	bb 18       	sub	r11, r11
     2a0:	bb 18       	sub	r11, r11
     2a2:	bb 18       	sub	r11, r11
     2a4:	bb 18       	sub	r11, r11
     2a6:	bb 18       	sub	r11, r11
     2a8:	bb 18       	sub	r11, r11
     2aa:	bb 18       	sub	r11, r11
     2ac:	bb 18       	sub	r11, r11
     2ae:	bb 18       	sub	r11, r11
     2b0:	bb 18       	sub	r11, r11
     2b2:	bb 18       	sub	r11, r11
     2b4:	bb 18       	sub	r11, r11
     2b6:	bb 18       	sub	r11, r11
     2b8:	bb 18       	sub	r11, r11
     2ba:	bb 18       	sub	r11, r11
     2bc:	bb 18       	sub	r11, r11
     2be:	bb 18       	sub	r11, r11
     2c0:	01 18       	sub	r0, r1
     2c2:	12 18       	sub	r1, r2
     2c4:	23 18       	sub	r2, r3
     2c6:	34 18       	sub	r3, r4
     2c8:	45 18       	sub	r4, r5
     2ca:	56 18       	sub	r5, r6
     2cc:	67 18       	sub	r6, r7
     2ce:	78 18       	sub	r7, r8
     2d0:	89 18       	sub	r8, r9
     2d2:	9a 18       	sub	r9, r10
     2d4:	a8 18       	sub	r10, r8

000002d6 <__trampolines_end>:
     2d6:	4e 41       	sbci	r20, 0x1E	; 30
     2d8:	4e 49       	sbci	r20, 0x9E	; 158

000002d9 <pstr_inity>:
     2d9:	49 4e 49 54 59                                      INITY

000002de <pstr_inf>:
     2de:	49 4e 46                                            INF

000002e1 <pwr_m10>:
     2e1:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     2f1:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000002f9 <pwr_p10>:
     2f9:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     309:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000312 <__ctors_end>:
     312:	11 24       	eor	r1, r1
     314:	1f be       	out	0x3f, r1	; 63
     316:	cf ef       	ldi	r28, 0xFF	; 255
     318:	d8 e0       	ldi	r29, 0x08	; 8
     31a:	de bf       	out	0x3e, r29	; 62
     31c:	cd bf       	out	0x3d, r28	; 61

0000031e <__do_copy_data>:
     31e:	11 e0       	ldi	r17, 0x01	; 1
     320:	a0 e0       	ldi	r26, 0x00	; 0
     322:	b1 e0       	ldi	r27, 0x01	; 1
     324:	e0 ef       	ldi	r30, 0xF0	; 240
     326:	fc e4       	ldi	r31, 0x4C	; 76
     328:	02 c0       	rjmp	.+4      	; 0x32e <__do_copy_data+0x10>
     32a:	05 90       	lpm	r0, Z+
     32c:	0d 92       	st	X+, r0
     32e:	a4 34       	cpi	r26, 0x44	; 68
     330:	b1 07       	cpc	r27, r17
     332:	d9 f7       	brne	.-10     	; 0x32a <__do_copy_data+0xc>

00000334 <__do_clear_bss>:
     334:	25 e0       	ldi	r18, 0x05	; 5
     336:	a4 e4       	ldi	r26, 0x44	; 68
     338:	b1 e0       	ldi	r27, 0x01	; 1
     33a:	01 c0       	rjmp	.+2      	; 0x33e <.do_clear_bss_start>

0000033c <.do_clear_bss_loop>:
     33c:	1d 92       	st	X+, r1

0000033e <.do_clear_bss_start>:
     33e:	a5 30       	cpi	r26, 0x05	; 5
     340:	b2 07       	cpc	r27, r18
     342:	e1 f7       	brne	.-8      	; 0x33c <.do_clear_bss_loop>
     344:	0e 94 a4 0c 	call	0x1948	; 0x1948 <main>
     348:	0c 94 76 26 	jmp	0x4cec	; 0x4cec <_exit>

0000034c <__bad_interrupt>:
     34c:	59 ce       	rjmp	.-846    	; 0x0 <__vectors>

0000034e <MaxRTDinit>:
*************************************************/
static inline void MaxRTDinit( unsigned char dataWrite, unsigned char ch)
{
	unsigned char dummy;

	switch (ch)
     34e:	62 30       	cpi	r22, 0x02	; 2
     350:	59 f0       	breq	.+22     	; 0x368 <MaxRTDinit+0x1a>
     352:	18 f4       	brcc	.+6      	; 0x35a <MaxRTDinit+0xc>
     354:	61 30       	cpi	r22, 0x01	; 1
     356:	31 f0       	breq	.+12     	; 0x364 <MaxRTDinit+0x16>
     358:	0c c0       	rjmp	.+24     	; 0x372 <MaxRTDinit+0x24>
     35a:	63 30       	cpi	r22, 0x03	; 3
     35c:	39 f0       	breq	.+14     	; 0x36c <MaxRTDinit+0x1e>
     35e:	64 30       	cpi	r22, 0x04	; 4
     360:	39 f0       	breq	.+14     	; 0x370 <MaxRTDinit+0x22>
     362:	07 c0       	rjmp	.+14     	; 0x372 <MaxRTDinit+0x24>
	{
		case 1:
		PORTD &= 0b11101111;	// Set CS1 low
     364:	5c 98       	cbi	0x0b, 4	; 11
		break;
     366:	05 c0       	rjmp	.+10     	; 0x372 <MaxRTDinit+0x24>
		
		case 2:
		PORTD &= 0b11011111;	// Set CS2 low
     368:	5d 98       	cbi	0x0b, 5	; 11
		break;
     36a:	03 c0       	rjmp	.+6      	; 0x372 <MaxRTDinit+0x24>
		
		case 3:
		PORTD &= 0b10111111;	// Set CS3 low
     36c:	5e 98       	cbi	0x0b, 6	; 11
		break;
     36e:	01 c0       	rjmp	.+2      	; 0x372 <MaxRTDinit+0x24>
		
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
     370:	5f 98       	cbi	0x0b, 7	; 11
		break;
	}
	SPDR = 0x80;				// Configuration
     372:	90 e8       	ldi	r25, 0x80	; 128
     374:	9e bd       	out	0x2e, r25	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     376:	0d b4       	in	r0, 0x2d	; 45
     378:	07 fe       	sbrs	r0, 7
     37a:	fd cf       	rjmp	.-6      	; 0x376 <MaxRTDinit+0x28>
	dummy = SPDR;				//just for clearing SPIF
     37c:	9e b5       	in	r25, 0x2e	; 46
	SPDR = dataWrite;
     37e:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     380:	0d b4       	in	r0, 0x2d	; 45
     382:	07 fe       	sbrs	r0, 7
     384:	fd cf       	rjmp	.-6      	; 0x380 <MaxRTDinit+0x32>
	dummy = SPDR;
     386:	8e b5       	in	r24, 0x2e	; 46
	
	PORTD |= 0b11110000;		// Set all CS High
     388:	8b b1       	in	r24, 0x0b	; 11
     38a:	80 6f       	ori	r24, 0xF0	; 240
     38c:	8b b9       	out	0x0b, r24	; 11
     38e:	08 95       	ret

00000390 <GenCrc16>:
		idx ++;
	}
}

static inline int GenCrc16(char c[], int nByte)	// CRC-CCITT (XModem)
{
     390:	cf 93       	push	r28
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
     392:	16 16       	cp	r1, r22
     394:	17 06       	cpc	r1, r23
     396:	3c f5       	brge	.+78     	; 0x3e6 <GenCrc16+0x56>
     398:	fc 01       	movw	r30, r24
     39a:	68 0f       	add	r22, r24
     39c:	79 1f       	adc	r23, r25
     39e:	80 e0       	ldi	r24, 0x00	; 0
     3a0:	90 e0       	ldi	r25, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
     3a2:	b8 e0       	ldi	r27, 0x08	; 8
     3a4:	a0 e0       	ldi	r26, 0x00	; 0
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
     3a6:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
     3a8:	29 2f       	mov	r18, r25
     3aa:	33 27       	eor	r19, r19
     3ac:	27 fd       	sbrc	r18, 7
     3ae:	3a 95       	dec	r19
     3b0:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
     3b2:	32 2f       	mov	r19, r18
     3b4:	22 27       	eor	r18, r18
     3b6:	4b 2f       	mov	r20, r27
     3b8:	5a 2f       	mov	r21, r26
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
     3ba:	33 23       	and	r19, r19
     3bc:	3c f4       	brge	.+14     	; 0x3cc <GenCrc16+0x3c>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
     3be:	22 0f       	add	r18, r18
     3c0:	33 1f       	adc	r19, r19
     3c2:	c1 e2       	ldi	r28, 0x21	; 33
     3c4:	2c 27       	eor	r18, r28
     3c6:	c0 e1       	ldi	r28, 0x10	; 16
     3c8:	3c 27       	eor	r19, r28
     3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <GenCrc16+0x40>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
     3cc:	22 0f       	add	r18, r18
     3ce:	33 1f       	adc	r19, r19
     3d0:	41 50       	subi	r20, 0x01	; 1
     3d2:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
     3d4:	91 f7       	brne	.-28     	; 0x3ba <GenCrc16+0x2a>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
     3d6:	98 2f       	mov	r25, r24
     3d8:	88 27       	eor	r24, r24
     3da:	82 27       	eor	r24, r18
     3dc:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
     3de:	e6 17       	cp	r30, r22
     3e0:	f7 07       	cpc	r31, r23
     3e2:	09 f7       	brne	.-62     	; 0x3a6 <GenCrc16+0x16>
     3e4:	02 c0       	rjmp	.+4      	; 0x3ea <GenCrc16+0x5a>
{
	int Polynominal = 0x1021;
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	90 e0       	ldi	r25, 0x00	; 0
		}
		CRC = (int)((CRC << 8) ^ Remainder);
		index++;
	}
	return CRC;
}
     3ea:	cf 91       	pop	r28
     3ec:	08 95       	ret

000003ee <WriteParamToEEPROM>:
	ch3.tempErrorWin = eeprom_read_float((float*)eepromAdr_TempErrWin3);
	ch3.tempSettleTime = eeprom_read_word((uint16_t*)eepromAdr_TSettleTime3);	
}

static inline void WriteParamToEEPROM()
{
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
	eeprom_write_float( (float*)eepromAdr_TempSetPoint0, ch0.TempSetPoint );
     3f2:	cd e6       	ldi	r28, 0x6D	; 109
     3f4:	d2 e0       	ldi	r29, 0x02	; 2
     3f6:	48 81       	ld	r20, Y
     3f8:	59 81       	ldd	r21, Y+1	; 0x01
     3fa:	6a 81       	ldd	r22, Y+2	; 0x02
     3fc:	7b 81       	ldd	r23, Y+3	; 0x03
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	0e 94 00 26 	call	0x4c00	; 0x4c00 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_PgainCh0, ch0.Pgain );
     406:	4c 8d       	ldd	r20, Y+28	; 0x1c
     408:	5d 8d       	ldd	r21, Y+29	; 0x1d
     40a:	6e 8d       	ldd	r22, Y+30	; 0x1e
     40c:	7f 8d       	ldd	r23, Y+31	; 0x1f
     40e:	84 e0       	ldi	r24, 0x04	; 4
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	0e 94 00 26 	call	0x4c00	; 0x4c00 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_IgainCh0, ch0.Igain );
     416:	48 a1       	ldd	r20, Y+32	; 0x20
     418:	59 a1       	ldd	r21, Y+33	; 0x21
     41a:	6a a1       	ldd	r22, Y+34	; 0x22
     41c:	7b a1       	ldd	r23, Y+35	; 0x23
     41e:	88 e0       	ldi	r24, 0x08	; 8
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	0e 94 00 26 	call	0x4c00	; 0x4c00 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_DgainCh0, ch0.Dgain );
     426:	4c a1       	ldd	r20, Y+36	; 0x24
     428:	5d a1       	ldd	r21, Y+37	; 0x25
     42a:	6e a1       	ldd	r22, Y+38	; 0x26
     42c:	7f a1       	ldd	r23, Y+39	; 0x27
     42e:	8c e0       	ldi	r24, 0x0C	; 12
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	0e 94 00 26 	call	0x4c00	; 0x4c00 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_TempErrWin0, ch0.tempErrorWin );
     436:	40 91 c1 02 	lds	r20, 0x02C1
     43a:	50 91 c2 02 	lds	r21, 0x02C2
     43e:	60 91 c3 02 	lds	r22, 0x02C3
     442:	70 91 c4 02 	lds	r23, 0x02C4
     446:	80 e1       	ldi	r24, 0x10	; 16
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	0e 94 00 26 	call	0x4c00	; 0x4c00 <eeprom_write_dword>
	eeprom_write_word(	(uint16_t*)eepromAdr_TSettleTime0, ch0.tempSettleTime );
     44e:	60 91 c7 02 	lds	r22, 0x02C7
     452:	70 91 c8 02 	lds	r23, 0x02C8
     456:	84 e1       	ldi	r24, 0x14	; 20
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <eeprom_write_word>
	
	eeprom_write_float( (float*)eepromAdr_TempSetPoint1, ch1.TempSetPoint );
     45e:	ca e0       	ldi	r28, 0x0A	; 10
     460:	d2 e0       	ldi	r29, 0x02	; 2
     462:	48 81       	ld	r20, Y
     464:	59 81       	ldd	r21, Y+1	; 0x01
     466:	6a 81       	ldd	r22, Y+2	; 0x02
     468:	7b 81       	ldd	r23, Y+3	; 0x03
     46a:	88 e1       	ldi	r24, 0x18	; 24
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	0e 94 00 26 	call	0x4c00	; 0x4c00 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_PgainCh1, ch1.Pgain );
     472:	4c 8d       	ldd	r20, Y+28	; 0x1c
     474:	5d 8d       	ldd	r21, Y+29	; 0x1d
     476:	6e 8d       	ldd	r22, Y+30	; 0x1e
     478:	7f 8d       	ldd	r23, Y+31	; 0x1f
     47a:	8c e1       	ldi	r24, 0x1C	; 28
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	0e 94 00 26 	call	0x4c00	; 0x4c00 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_IgainCh1, ch1.Igain );
     482:	48 a1       	ldd	r20, Y+32	; 0x20
     484:	59 a1       	ldd	r21, Y+33	; 0x21
     486:	6a a1       	ldd	r22, Y+34	; 0x22
     488:	7b a1       	ldd	r23, Y+35	; 0x23
     48a:	80 e2       	ldi	r24, 0x20	; 32
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	0e 94 00 26 	call	0x4c00	; 0x4c00 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_DgainCh1, ch1.Dgain );
     492:	4c a1       	ldd	r20, Y+36	; 0x24
     494:	5d a1       	ldd	r21, Y+37	; 0x25
     496:	6e a1       	ldd	r22, Y+38	; 0x26
     498:	7f a1       	ldd	r23, Y+39	; 0x27
     49a:	84 e2       	ldi	r24, 0x24	; 36
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	0e 94 00 26 	call	0x4c00	; 0x4c00 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_TempErrWin1, ch1.tempErrorWin );
     4a2:	40 91 5e 02 	lds	r20, 0x025E
     4a6:	50 91 5f 02 	lds	r21, 0x025F
     4aa:	60 91 60 02 	lds	r22, 0x0260
     4ae:	70 91 61 02 	lds	r23, 0x0261
     4b2:	88 e2       	ldi	r24, 0x28	; 40
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	0e 94 00 26 	call	0x4c00	; 0x4c00 <eeprom_write_dword>
	eeprom_write_word(	(uint16_t*)eepromAdr_TSettleTime1, ch1.tempSettleTime );	
     4ba:	60 91 64 02 	lds	r22, 0x0264
     4be:	70 91 65 02 	lds	r23, 0x0265
     4c2:	8c e2       	ldi	r24, 0x2C	; 44
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <eeprom_write_word>
	
	eeprom_write_float( (float*)eepromAdr_TempSetPoint2, ch2.TempSetPoint );
     4ca:	c7 ea       	ldi	r28, 0xA7	; 167
     4cc:	d1 e0       	ldi	r29, 0x01	; 1
     4ce:	48 81       	ld	r20, Y
     4d0:	59 81       	ldd	r21, Y+1	; 0x01
     4d2:	6a 81       	ldd	r22, Y+2	; 0x02
     4d4:	7b 81       	ldd	r23, Y+3	; 0x03
     4d6:	80 e3       	ldi	r24, 0x30	; 48
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	0e 94 00 26 	call	0x4c00	; 0x4c00 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_PgainCh2, ch2.Pgain );
     4de:	4c 8d       	ldd	r20, Y+28	; 0x1c
     4e0:	5d 8d       	ldd	r21, Y+29	; 0x1d
     4e2:	6e 8d       	ldd	r22, Y+30	; 0x1e
     4e4:	7f 8d       	ldd	r23, Y+31	; 0x1f
     4e6:	84 e3       	ldi	r24, 0x34	; 52
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	0e 94 00 26 	call	0x4c00	; 0x4c00 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_IgainCh2, ch2.Igain );
     4ee:	48 a1       	ldd	r20, Y+32	; 0x20
     4f0:	59 a1       	ldd	r21, Y+33	; 0x21
     4f2:	6a a1       	ldd	r22, Y+34	; 0x22
     4f4:	7b a1       	ldd	r23, Y+35	; 0x23
     4f6:	88 e3       	ldi	r24, 0x38	; 56
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	0e 94 00 26 	call	0x4c00	; 0x4c00 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_DgainCh2, ch2.Dgain );
     4fe:	4c a1       	ldd	r20, Y+36	; 0x24
     500:	5d a1       	ldd	r21, Y+37	; 0x25
     502:	6e a1       	ldd	r22, Y+38	; 0x26
     504:	7f a1       	ldd	r23, Y+39	; 0x27
     506:	8c e3       	ldi	r24, 0x3C	; 60
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	0e 94 00 26 	call	0x4c00	; 0x4c00 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_TempErrWin2, ch2.tempErrorWin );
     50e:	40 91 fb 01 	lds	r20, 0x01FB
     512:	50 91 fc 01 	lds	r21, 0x01FC
     516:	60 91 fd 01 	lds	r22, 0x01FD
     51a:	70 91 fe 01 	lds	r23, 0x01FE
     51e:	80 e4       	ldi	r24, 0x40	; 64
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	0e 94 00 26 	call	0x4c00	; 0x4c00 <eeprom_write_dword>
	eeprom_write_word(	(uint16_t*)eepromAdr_TSettleTime2, ch2.tempSettleTime );	
     526:	60 91 01 02 	lds	r22, 0x0201
     52a:	70 91 02 02 	lds	r23, 0x0202
     52e:	84 e4       	ldi	r24, 0x44	; 68
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <eeprom_write_word>
	
	eeprom_write_float( (float*)eepromAdr_TempSetPoint3, ch3.TempSetPoint );
     536:	c4 e4       	ldi	r28, 0x44	; 68
     538:	d1 e0       	ldi	r29, 0x01	; 1
     53a:	48 81       	ld	r20, Y
     53c:	59 81       	ldd	r21, Y+1	; 0x01
     53e:	6a 81       	ldd	r22, Y+2	; 0x02
     540:	7b 81       	ldd	r23, Y+3	; 0x03
     542:	88 e4       	ldi	r24, 0x48	; 72
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	0e 94 00 26 	call	0x4c00	; 0x4c00 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_PgainCh3, ch3.Pgain );
     54a:	4c 8d       	ldd	r20, Y+28	; 0x1c
     54c:	5d 8d       	ldd	r21, Y+29	; 0x1d
     54e:	6e 8d       	ldd	r22, Y+30	; 0x1e
     550:	7f 8d       	ldd	r23, Y+31	; 0x1f
     552:	8c e4       	ldi	r24, 0x4C	; 76
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	0e 94 00 26 	call	0x4c00	; 0x4c00 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_IgainCh3, ch3.Igain );
     55a:	48 a1       	ldd	r20, Y+32	; 0x20
     55c:	59 a1       	ldd	r21, Y+33	; 0x21
     55e:	6a a1       	ldd	r22, Y+34	; 0x22
     560:	7b a1       	ldd	r23, Y+35	; 0x23
     562:	80 e5       	ldi	r24, 0x50	; 80
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	0e 94 00 26 	call	0x4c00	; 0x4c00 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_DgainCh3, ch3.Dgain );
     56a:	4c a1       	ldd	r20, Y+36	; 0x24
     56c:	5d a1       	ldd	r21, Y+37	; 0x25
     56e:	6e a1       	ldd	r22, Y+38	; 0x26
     570:	7f a1       	ldd	r23, Y+39	; 0x27
     572:	84 e5       	ldi	r24, 0x54	; 84
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	0e 94 00 26 	call	0x4c00	; 0x4c00 <eeprom_write_dword>
	eeprom_write_float( (float*)eepromAdr_TempErrWin3, ch3.tempErrorWin );
     57a:	40 91 98 01 	lds	r20, 0x0198
     57e:	50 91 99 01 	lds	r21, 0x0199
     582:	60 91 9a 01 	lds	r22, 0x019A
     586:	70 91 9b 01 	lds	r23, 0x019B
     58a:	88 e5       	ldi	r24, 0x58	; 88
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	0e 94 00 26 	call	0x4c00	; 0x4c00 <eeprom_write_dword>
	eeprom_write_word(	(uint16_t*)eepromAdr_TSettleTime3, ch3.tempSettleTime );	
     592:	60 91 9e 01 	lds	r22, 0x019E
     596:	70 91 9f 01 	lds	r23, 0x019F
     59a:	8c e5       	ldi	r24, 0x5C	; 92
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <eeprom_write_word>
}
     5a2:	df 91       	pop	r29
     5a4:	cf 91       	pop	r28
     5a6:	08 95       	ret

000005a8 <CrcCompare>:
	}
	return CRC;
}

static inline bool CrcCompare(char *crc_in, char *crc_calc)
{
     5a8:	0f 93       	push	r16
     5aa:	1f 93       	push	r17
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
     5b0:	ec 01       	movw	r28, r24
     5b2:	8b 01       	movw	r16, r22
	strupr(crc_in);
     5b4:	0e 94 27 24 	call	0x484e	; 0x484e <strupr>
	strupr(crc_calc);
     5b8:	c8 01       	movw	r24, r16
     5ba:	0e 94 27 24 	call	0x484e	; 0x484e <strupr>
	
	if(crc_in[0] == '0' && crc_in[1] == '0' && crc_in[2] == '0')
     5be:	88 81       	ld	r24, Y
     5c0:	80 33       	cpi	r24, 0x30	; 48
     5c2:	19 f5       	brne	.+70     	; 0x60a <CrcCompare+0x62>
     5c4:	89 81       	ldd	r24, Y+1	; 0x01
     5c6:	80 33       	cpi	r24, 0x30	; 48
     5c8:	09 f0       	breq	.+2      	; 0x5cc <CrcCompare+0x24>
     5ca:	41 c0       	rjmp	.+130    	; 0x64e <CrcCompare+0xa6>
     5cc:	8a 81       	ldd	r24, Y+2	; 0x02
     5ce:	80 33       	cpi	r24, 0x30	; 48
     5d0:	b9 f5       	brne	.+110    	; 0x640 <CrcCompare+0x98>
	{
			if(crc_in[3] == crc_calc[0])
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	2b 81       	ldd	r18, Y+3	; 0x03
     5d6:	f8 01       	movw	r30, r16
     5d8:	90 81       	ld	r25, Z
     5da:	29 17       	cp	r18, r25
     5dc:	e9 f1       	breq	.+122    	; 0x658 <CrcCompare+0xb0>
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	3b c0       	rjmp	.+118    	; 0x658 <CrcCompare+0xb0>
			}
	}

	if(crc_in[0] == '0' && crc_in[1] == '0')
	{
		if((crc_in[2] == crc_calc[0]) && (crc_in[3] == crc_calc[1]))
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	2b 81       	ldd	r18, Y+3	; 0x03
     5e6:	f8 01       	movw	r30, r16
     5e8:	91 81       	ldd	r25, Z+1	; 0x01
     5ea:	29 17       	cp	r18, r25
     5ec:	a9 f1       	breq	.+106    	; 0x658 <CrcCompare+0xb0>
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	33 c0       	rjmp	.+102    	; 0x658 <CrcCompare+0xb0>
		}
	}
	
	if(crc_in[0] == '0')
	{
		if((crc_in[1] == crc_calc[0]) && (crc_in[2] == crc_calc[1]) &&
     5f2:	9a 81       	ldd	r25, Y+2	; 0x02
     5f4:	f8 01       	movw	r30, r16
     5f6:	81 81       	ldd	r24, Z+1	; 0x01
     5f8:	98 13       	cpse	r25, r24
     5fa:	1a c0       	rjmp	.+52     	; 0x630 <CrcCompare+0x88>
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	2b 81       	ldd	r18, Y+3	; 0x03
     600:	92 81       	ldd	r25, Z+2	; 0x02
     602:	29 17       	cp	r18, r25
     604:	49 f1       	breq	.+82     	; 0x658 <CrcCompare+0xb0>
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	27 c0       	rjmp	.+78     	; 0x658 <CrcCompare+0xb0>
			return false;
		}
	}	
	else
	{
		if((crc_in[0] == crc_calc[0]) && (crc_in[1] == crc_calc[1]) &&
     60a:	f8 01       	movw	r30, r16
     60c:	90 81       	ld	r25, Z
     60e:	89 13       	cpse	r24, r25
     610:	11 c0       	rjmp	.+34     	; 0x634 <CrcCompare+0x8c>
     612:	99 81       	ldd	r25, Y+1	; 0x01
     614:	81 81       	ldd	r24, Z+1	; 0x01
     616:	98 13       	cpse	r25, r24
     618:	0f c0       	rjmp	.+30     	; 0x638 <CrcCompare+0x90>
     61a:	9a 81       	ldd	r25, Y+2	; 0x02
     61c:	82 81       	ldd	r24, Z+2	; 0x02
     61e:	98 13       	cpse	r25, r24
     620:	0d c0       	rjmp	.+26     	; 0x63c <CrcCompare+0x94>
			(crc_in[2] == crc_calc[2]) && (crc_in[3] == crc_calc[3]))
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	2b 81       	ldd	r18, Y+3	; 0x03
     626:	93 81       	ldd	r25, Z+3	; 0x03
     628:	29 17       	cp	r18, r25
     62a:	b1 f0       	breq	.+44     	; 0x658 <CrcCompare+0xb0>
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	14 c0       	rjmp	.+40     	; 0x658 <CrcCompare+0xb0>
		{
			return true;
		}
		else
		{
			return false;
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	12 c0       	rjmp	.+36     	; 0x658 <CrcCompare+0xb0>
			{
				return true;
			}
			else
			{
				return false;
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	10 c0       	rjmp	.+32     	; 0x658 <CrcCompare+0xb0>
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	0e c0       	rjmp	.+28     	; 0x658 <CrcCompare+0xb0>
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	0c c0       	rjmp	.+24     	; 0x658 <CrcCompare+0xb0>
			}
	}

	if(crc_in[0] == '0' && crc_in[1] == '0')
	{
		if((crc_in[2] == crc_calc[0]) && (crc_in[3] == crc_calc[1]))
     640:	9a 81       	ldd	r25, Y+2	; 0x02
     642:	f8 01       	movw	r30, r16
     644:	80 81       	ld	r24, Z
     646:	98 17       	cp	r25, r24
     648:	61 f2       	breq	.-104    	; 0x5e2 <CrcCompare+0x3a>
		{
			return true;
		}
		else
		{
			return false;
     64a:	80 e0       	ldi	r24, 0x00	; 0
     64c:	05 c0       	rjmp	.+10     	; 0x658 <CrcCompare+0xb0>
		}
	}
	
	if(crc_in[0] == '0')
	{
		if((crc_in[1] == crc_calc[0]) && (crc_in[2] == crc_calc[1]) &&
     64e:	f8 01       	movw	r30, r16
     650:	90 81       	ld	r25, Z
     652:	89 17       	cp	r24, r25
     654:	71 f2       	breq	.-100    	; 0x5f2 <CrcCompare+0x4a>
		{
			return true;
		}
		else
		{
			return false;
     656:	80 e0       	ldi	r24, 0x00	; 0
			else
			{
				return false;
			}
	}
}
     658:	df 91       	pop	r29
     65a:	cf 91       	pop	r28
     65c:	1f 91       	pop	r17
     65e:	0f 91       	pop	r16
     660:	08 95       	ret

00000662 <printStatus>:
	
	PORTD |= 0b11110000;		// Set all CS High
}

static inline void printStatus (char msg_string[])	// Send string on UART
{
     662:	cf 92       	push	r12
     664:	df 92       	push	r13
     666:	ef 92       	push	r14
     668:	ff 92       	push	r15
     66a:	0f 93       	push	r16
     66c:	1f 93       	push	r17
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
     672:	cd b7       	in	r28, 0x3d	; 61
     674:	de b7       	in	r29, 0x3e	; 62
     676:	a8 97       	sbiw	r28, 0x28	; 40
     678:	0f b6       	in	r0, 0x3f	; 63
     67a:	f8 94       	cli
     67c:	de bf       	out	0x3e, r29	; 62
     67e:	0f be       	out	0x3f, r0	; 63
     680:	cd bf       	out	0x3d, r28	; 61
     682:	fc 01       	movw	r30, r24
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
     684:	81 e2       	ldi	r24, 0x21	; 33
     686:	89 83       	std	Y+1, r24	; 0x01
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
     688:	a0 ee       	ldi	r26, 0xE0	; 224
     68a:	b4 e0       	ldi	r27, 0x04	; 4
     68c:	11 96       	adiw	r26, 0x01	; 1
     68e:	8c 91       	ld	r24, X
     690:	11 97       	sbiw	r26, 0x01	; 1
     692:	8a 83       	std	Y+2, r24	; 0x02
     694:	12 96       	adiw	r26, 0x02	; 2
     696:	8c 91       	ld	r24, X
     698:	12 97       	sbiw	r26, 0x02	; 2
     69a:	8b 83       	std	Y+3, r24	; 0x03
     69c:	13 96       	adiw	r26, 0x03	; 3
     69e:	8c 91       	ld	r24, X
     6a0:	8c 83       	std	Y+4, r24	; 0x04
     6a2:	cf 01       	movw	r24, r30
     6a4:	ae 01       	movw	r20, r28
     6a6:	4b 5f       	subi	r20, 0xFB	; 251
     6a8:	5f 4f       	sbci	r21, 0xFF	; 255
     6aa:	00 e0       	ldi	r16, 0x00	; 0
     6ac:	10 e0       	ldi	r17, 0x00	; 0
     6ae:	08 c0       	rjmp	.+16     	; 0x6c0 <printStatus+0x5e>
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
     6b0:	dc 01       	movw	r26, r24
     6b2:	2d 91       	ld	r18, X+
     6b4:	cd 01       	movw	r24, r26
     6b6:	da 01       	movw	r26, r20
     6b8:	2d 93       	st	X+, r18
     6ba:	ad 01       	movw	r20, r26
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
     6bc:	0f 5f       	subi	r16, 0xFF	; 255
     6be:	1f 4f       	sbci	r17, 0xFF	; 255
     6c0:	df 01       	movw	r26, r30
     6c2:	0d 90       	ld	r0, X+
     6c4:	00 20       	and	r0, r0
     6c6:	e9 f7       	brne	.-6      	; 0x6c2 <printStatus+0x60>
     6c8:	9d 01       	movw	r18, r26
     6ca:	2e 1b       	sub	r18, r30
     6cc:	3f 0b       	sbc	r19, r31
     6ce:	2e 5f       	subi	r18, 0xFE	; 254
     6d0:	3f 4f       	sbci	r19, 0xFF	; 255
     6d2:	02 17       	cp	r16, r18
     6d4:	13 07       	cpc	r17, r19
     6d6:	60 f3       	brcs	.-40     	; 0x6b0 <printStatus+0x4e>
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
     6d8:	78 01       	movw	r14, r16
     6da:	bf ef       	ldi	r27, 0xFF	; 255
     6dc:	eb 1a       	sub	r14, r27
     6de:	fb 0a       	sbc	r15, r27
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
     6e0:	1e 14       	cp	r1, r14
     6e2:	1f 04       	cpc	r1, r15
     6e4:	0c f0       	brlt	.+2      	; 0x6e8 <printStatus+0x86>
     6e6:	d7 c0       	rjmp	.+430    	; 0x896 <printStatus+0x234>
     6e8:	fe 01       	movw	r30, r28
     6ea:	31 96       	adiw	r30, 0x01	; 1
     6ec:	a7 01       	movw	r20, r14
     6ee:	4e 0f       	add	r20, r30
     6f0:	5f 1f       	adc	r21, r31
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	90 e0       	ldi	r25, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
     6f6:	b8 e0       	ldi	r27, 0x08	; 8
     6f8:	d1 2c       	mov	r13, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
     6fa:	61 91       	ld	r22, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
     6fc:	29 2f       	mov	r18, r25
     6fe:	33 27       	eor	r19, r19
     700:	27 fd       	sbrc	r18, 7
     702:	3a 95       	dec	r19
     704:	26 27       	eor	r18, r22
		Remainder = (int)(tmp << 8);
     706:	32 2f       	mov	r19, r18
     708:	22 27       	eor	r18, r18
     70a:	6b 2f       	mov	r22, r27
     70c:	7d 2d       	mov	r23, r13
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
     70e:	33 23       	and	r19, r19
     710:	3c f4       	brge	.+14     	; 0x720 <printStatus+0xbe>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
     712:	22 0f       	add	r18, r18
     714:	33 1f       	adc	r19, r19
     716:	a1 e2       	ldi	r26, 0x21	; 33
     718:	2a 27       	eor	r18, r26
     71a:	a0 e1       	ldi	r26, 0x10	; 16
     71c:	3a 27       	eor	r19, r26
     71e:	02 c0       	rjmp	.+4      	; 0x724 <printStatus+0xc2>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
     720:	22 0f       	add	r18, r18
     722:	33 1f       	adc	r19, r19
     724:	61 50       	subi	r22, 0x01	; 1
     726:	71 09       	sbc	r23, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
     728:	91 f7       	brne	.-28     	; 0x70e <printStatus+0xac>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
     72a:	98 2f       	mov	r25, r24
     72c:	88 27       	eor	r24, r24
     72e:	82 27       	eor	r24, r18
     730:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
     732:	e4 17       	cp	r30, r20
     734:	f5 07       	cpc	r31, r21
     736:	09 f7       	brne	.-62     	; 0x6fa <printStatus+0x98>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
     738:	6c 01       	movw	r12, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     73a:	40 e1       	ldi	r20, 0x10	; 16
     73c:	66 ed       	ldi	r22, 0xD6	; 214
     73e:	74 e0       	ldi	r23, 0x04	; 4
     740:	0e 94 31 24 	call	0x4862	; 0x4862 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
     744:	86 ed       	ldi	r24, 0xD6	; 214
     746:	94 e0       	ldi	r25, 0x04	; 4
     748:	0e 94 27 24 	call	0x484e	; 0x484e <strupr>
	if(crcXmodem < 0x10)
     74c:	b0 e1       	ldi	r27, 0x10	; 16
     74e:	cb 16       	cp	r12, r27
     750:	d1 04       	cpc	r13, r1
     752:	98 f4       	brcc	.+38     	; 0x77a <printStatus+0x118>
	{
		tx_string[cnt+4] = crc[0];
     754:	80 91 d6 04 	lds	r24, 0x04D6
     758:	fe 01       	movw	r30, r28
     75a:	e0 0f       	add	r30, r16
     75c:	f1 1f       	adc	r31, r17
     75e:	85 83       	std	Z+5, r24	; 0x05
		tx_string[cnt+3] = '0';
     760:	80 e3       	ldi	r24, 0x30	; 48
     762:	fe 01       	movw	r30, r28
     764:	e0 0f       	add	r30, r16
     766:	f1 1f       	adc	r31, r17
     768:	84 83       	std	Z+4, r24	; 0x04
		tx_string[cnt+2] = '0';
     76a:	fe 01       	movw	r30, r28
     76c:	e0 0f       	add	r30, r16
     76e:	f1 1f       	adc	r31, r17
     770:	83 83       	std	Z+3, r24	; 0x03
		tx_string[cnt+1] = '0';
     772:	fe 01       	movw	r30, r28
     774:	ee 0d       	add	r30, r14
     776:	ff 1d       	adc	r31, r15
     778:	81 83       	std	Z+1, r24	; 0x01
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
     77a:	c6 01       	movw	r24, r12
     77c:	40 97       	sbiw	r24, 0x10	; 16
     77e:	80 3f       	cpi	r24, 0xF0	; 240
     780:	91 05       	cpc	r25, r1
     782:	b8 f4       	brcc	.+46     	; 0x7b2 <printStatus+0x150>
	{
		tx_string[cnt+4] = crc[1];
     784:	a6 ed       	ldi	r26, 0xD6	; 214
     786:	b4 e0       	ldi	r27, 0x04	; 4
     788:	11 96       	adiw	r26, 0x01	; 1
     78a:	8c 91       	ld	r24, X
     78c:	11 97       	sbiw	r26, 0x01	; 1
     78e:	fe 01       	movw	r30, r28
     790:	e0 0f       	add	r30, r16
     792:	f1 1f       	adc	r31, r17
     794:	85 83       	std	Z+5, r24	; 0x05
		tx_string[cnt+3] = crc[0];
     796:	8c 91       	ld	r24, X
     798:	fe 01       	movw	r30, r28
     79a:	e0 0f       	add	r30, r16
     79c:	f1 1f       	adc	r31, r17
     79e:	84 83       	std	Z+4, r24	; 0x04
		tx_string[cnt+2] = '0';
     7a0:	80 e3       	ldi	r24, 0x30	; 48
     7a2:	fe 01       	movw	r30, r28
     7a4:	e0 0f       	add	r30, r16
     7a6:	f1 1f       	adc	r31, r17
     7a8:	83 83       	std	Z+3, r24	; 0x03
		tx_string[cnt+1] = '0';		
     7aa:	fe 01       	movw	r30, r28
     7ac:	ee 0d       	add	r30, r14
     7ae:	ff 1d       	adc	r31, r15
     7b0:	81 83       	std	Z+1, r24	; 0x01
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
     7b2:	c6 01       	movw	r24, r12
     7b4:	9a 95       	dec	r25
     7b6:	81 15       	cp	r24, r1
     7b8:	9f 40       	sbci	r25, 0x0F	; 15
     7ba:	b8 f4       	brcc	.+46     	; 0x7ea <printStatus+0x188>
	{
		tx_string[cnt+4] = crc[2];
     7bc:	e6 ed       	ldi	r30, 0xD6	; 214
     7be:	f4 e0       	ldi	r31, 0x04	; 4
     7c0:	82 81       	ldd	r24, Z+2	; 0x02
     7c2:	de 01       	movw	r26, r28
     7c4:	a0 0f       	add	r26, r16
     7c6:	b1 1f       	adc	r27, r17
     7c8:	15 96       	adiw	r26, 0x05	; 5
     7ca:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[1];
     7cc:	81 81       	ldd	r24, Z+1	; 0x01
     7ce:	de 01       	movw	r26, r28
     7d0:	a0 0f       	add	r26, r16
     7d2:	b1 1f       	adc	r27, r17
     7d4:	14 96       	adiw	r26, 0x04	; 4
     7d6:	8c 93       	st	X, r24
     7d8:	14 97       	sbiw	r26, 0x04	; 4
		tx_string[cnt+2] = crc[0];
     7da:	80 81       	ld	r24, Z
     7dc:	fd 01       	movw	r30, r26
     7de:	83 83       	std	Z+3, r24	; 0x03
		tx_string[cnt+1] = '0';		
     7e0:	80 e3       	ldi	r24, 0x30	; 48
     7e2:	fe 01       	movw	r30, r28
     7e4:	ee 0d       	add	r30, r14
     7e6:	ff 1d       	adc	r31, r15
     7e8:	81 83       	std	Z+1, r24	; 0x01
	}
	if(crcXmodem >= 0x1000)
     7ea:	c1 14       	cp	r12, r1
     7ec:	80 e1       	ldi	r24, 0x10	; 16
     7ee:	d8 06       	cpc	r13, r24
     7f0:	c0 f0       	brcs	.+48     	; 0x822 <printStatus+0x1c0>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
     7f2:	de 01       	movw	r26, r28
     7f4:	ae 0d       	add	r26, r14
     7f6:	bf 1d       	adc	r27, r15
     7f8:	e6 ed       	ldi	r30, 0xD6	; 214
     7fa:	f4 e0       	ldi	r31, 0x04	; 4
     7fc:	80 81       	ld	r24, Z
     7fe:	11 96       	adiw	r26, 0x01	; 1
     800:	8c 93       	st	X, r24
		tx_string[cnt+2] = crc[1];
     802:	81 81       	ldd	r24, Z+1	; 0x01
     804:	de 01       	movw	r26, r28
     806:	a0 0f       	add	r26, r16
     808:	b1 1f       	adc	r27, r17
     80a:	13 96       	adiw	r26, 0x03	; 3
     80c:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[2];
     80e:	82 81       	ldd	r24, Z+2	; 0x02
     810:	de 01       	movw	r26, r28
     812:	a0 0f       	add	r26, r16
     814:	b1 1f       	adc	r27, r17
     816:	14 96       	adiw	r26, 0x04	; 4
     818:	8c 93       	st	X, r24
     81a:	14 97       	sbiw	r26, 0x04	; 4
		tx_string[cnt+4] = crc[3];
     81c:	83 81       	ldd	r24, Z+3	; 0x03
     81e:	fd 01       	movw	r30, r26
     820:	85 83       	std	Z+5, r24	; 0x05
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
     822:	c8 01       	movw	r24, r16
     824:	05 96       	adiw	r24, 0x05	; 5
     826:	fe 01       	movw	r30, r28
     828:	e8 0f       	add	r30, r24
     82a:	f9 1f       	adc	r31, r25
     82c:	2d e0       	ldi	r18, 0x0D	; 13
     82e:	21 83       	std	Z+1, r18	; 0x01
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
     830:	99 23       	and	r25, r25
     832:	0c f4       	brge	.+2      	; 0x836 <printStatus+0x1d4>
     834:	3e c0       	rjmp	.+124    	; 0x8b2 <printStatus+0x250>
     836:	ae 01       	movw	r20, r28
     838:	4f 5f       	subi	r20, 0xFF	; 255
     83a:	5f 4f       	sbci	r21, 0xFF	; 255
     83c:	0a 5f       	subi	r16, 0xFA	; 250
     83e:	1f 4f       	sbci	r17, 0xFF	; 255
     840:	04 0f       	add	r16, r20
     842:	15 1f       	adc	r17, r21
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
     844:	ee ef       	ldi	r30, 0xFE	; 254
     846:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
     848:	61 ec       	ldi	r22, 0xC1	; 193
     84a:	70 e0       	ldi	r23, 0x00	; 0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     84c:	30 e0       	ldi	r19, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
     84e:	da 01       	movw	r26, r20
     850:	8d 91       	ld	r24, X+
     852:	ad 01       	movw	r20, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
     854:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
     856:	21 81       	ldd	r18, Z+1	; 0x01
     858:	90 81       	ld	r25, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
     85a:	29 13       	cpse	r18, r25
     85c:	04 c0       	rjmp	.+8      	; 0x866 <printStatus+0x204>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
     85e:	db 01       	movw	r26, r22
     860:	9c 91       	ld	r25, X
     862:	90 62       	ori	r25, 0x20	; 32
     864:	9c 93       	st	X, r25
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
     866:	90 81       	ld	r25, Z
     868:	a3 81       	ldd	r26, Z+3	; 0x03
     86a:	b4 81       	ldd	r27, Z+4	; 0x04
     86c:	a9 0f       	add	r26, r25
     86e:	b1 1d       	adc	r27, r1
     870:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
     872:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     874:	a2 2f       	mov	r26, r18
     876:	b0 e0       	ldi	r27, 0x00	; 0
     878:	82 81       	ldd	r24, Z+2	; 0x02
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	01 97       	sbiw	r24, 0x01	; 1
     87e:	a8 17       	cp	r26, r24
     880:	b9 07       	cpc	r27, r25
     882:	11 f0       	breq	.+4      	; 0x888 <printStatus+0x226>
     884:	2f 5f       	subi	r18, 0xFF	; 255
     886:	01 c0       	rjmp	.+2      	; 0x88a <printStatus+0x228>
     888:	23 2f       	mov	r18, r19
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
     88a:	20 83       	st	Z, r18
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
     88c:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
     88e:	40 17       	cp	r20, r16
     890:	51 07       	cpc	r21, r17
     892:	e9 f6       	brne	.-70     	; 0x84e <printStatus+0x1ec>
     894:	0e c0       	rjmp	.+28     	; 0x8b2 <printStatus+0x250>
     896:	40 e1       	ldi	r20, 0x10	; 16
     898:	66 ed       	ldi	r22, 0xD6	; 214
     89a:	74 e0       	ldi	r23, 0x04	; 4
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	0e 94 31 24 	call	0x4862	; 0x4862 <__itoa_ncheck>
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
     8a4:	86 ed       	ldi	r24, 0xD6	; 214
     8a6:	94 e0       	ldi	r25, 0x04	; 4
     8a8:	0e 94 27 24 	call	0x484e	; 0x484e <strupr>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
     8ac:	c1 2c       	mov	r12, r1
     8ae:	d1 2c       	mov	r13, r1
     8b0:	51 cf       	rjmp	.-350    	; 0x754 <printStatus+0xf2>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
	}	
}
     8b2:	a8 96       	adiw	r28, 0x28	; 40
     8b4:	0f b6       	in	r0, 0x3f	; 63
     8b6:	f8 94       	cli
     8b8:	de bf       	out	0x3e, r29	; 62
     8ba:	0f be       	out	0x3f, r0	; 63
     8bc:	cd bf       	out	0x3d, r28	; 61
     8be:	df 91       	pop	r29
     8c0:	cf 91       	pop	r28
     8c2:	1f 91       	pop	r17
     8c4:	0f 91       	pop	r16
     8c6:	ff 90       	pop	r15
     8c8:	ef 90       	pop	r14
     8ca:	df 90       	pop	r13
     8cc:	cf 90       	pop	r12
     8ce:	08 95       	ret

000008d0 <__vector_19>:
 *
 * This handler is called each time the UART data register is available for
 * sending data.
 */
ISR(UART0_DATA_EMPTY_IRQ)
{
     8d0:	1f 92       	push	r1
     8d2:	0f 92       	push	r0
     8d4:	0f b6       	in	r0, 0x3f	; 63
     8d6:	0f 92       	push	r0
     8d8:	11 24       	eor	r1, r1
     8da:	2f 93       	push	r18
     8dc:	3f 93       	push	r19
     8de:	4f 93       	push	r20
     8e0:	5f 93       	push	r21
     8e2:	8f 93       	push	r24
     8e4:	9f 93       	push	r25
     8e6:	af 93       	push	r26
     8e8:	bf 93       	push	r27
     8ea:	ef 93       	push	r30
     8ec:	ff 93       	push	r31
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
     8ee:	ee ef       	ldi	r30, 0xFE	; 254
     8f0:	f4 e0       	ldi	r31, 0x04	; 4
     8f2:	91 81       	ldd	r25, Z+1	; 0x01
     8f4:	80 81       	ld	r24, Z
	// if there is data in the ring buffer, fetch it and send it
	if (!ring_buffer_is_empty(&ring_buffer_out))
     8f6:	98 17       	cp	r25, r24
     8f8:	b9 f0       	breq	.+46     	; 0x928 <__stack+0x29>
 * \returns next data byte in buffer
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
     8fa:	81 81       	ldd	r24, Z+1	; 0x01
     8fc:	a3 81       	ldd	r26, Z+3	; 0x03
     8fe:	b4 81       	ldd	r27, Z+4	; 0x04
     900:	a8 0f       	add	r26, r24
     902:	b1 1d       	adc	r27, r1
     904:	3c 91       	ld	r19, X
 *
 * \returns the next read offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_read(const struct ring_buffer *ring)
{
	return get_next(ring->read_offset, ring->size);
     906:	21 81       	ldd	r18, Z+1	; 0x01
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     908:	42 2f       	mov	r20, r18
     90a:	50 e0       	ldi	r21, 0x00	; 0
     90c:	82 81       	ldd	r24, Z+2	; 0x02
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	01 97       	sbiw	r24, 0x01	; 1
     912:	48 17       	cp	r20, r24
     914:	59 07       	cpc	r21, r25
     916:	11 f0       	breq	.+4      	; 0x91c <__stack+0x1d>
     918:	2f 5f       	subi	r18, 0xFF	; 255
     91a:	01 c0       	rjmp	.+2      	; 0x91e <__stack+0x1f>
     91c:	20 e0       	ldi	r18, 0x00	; 0
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
	ring->read_offset = ring_buffer_get_next_read(ring);
     91e:	20 93 ff 04 	sts	0x04FF, r18
	{
		UDR0 = ring_buffer_get(&ring_buffer_out);
     922:	30 93 c6 00 	sts	0x00C6, r19
     926:	05 c0       	rjmp	.+10     	; 0x932 <__stack+0x33>
	}
	else 
	{
		// no more data to send, turn off data ready interrupt
		UCSR0B &= ~(1 << UDRIE0);
     928:	e1 ec       	ldi	r30, 0xC1	; 193
     92a:	f0 e0       	ldi	r31, 0x00	; 0
     92c:	80 81       	ld	r24, Z
     92e:	8f 7d       	andi	r24, 0xDF	; 223
     930:	80 83       	st	Z, r24
	}
}
     932:	ff 91       	pop	r31
     934:	ef 91       	pop	r30
     936:	bf 91       	pop	r27
     938:	af 91       	pop	r26
     93a:	9f 91       	pop	r25
     93c:	8f 91       	pop	r24
     93e:	5f 91       	pop	r21
     940:	4f 91       	pop	r20
     942:	3f 91       	pop	r19
     944:	2f 91       	pop	r18
     946:	0f 90       	pop	r0
     948:	0f be       	out	0x3f, r0	; 63
     94a:	0f 90       	pop	r0
     94c:	1f 90       	pop	r1
     94e:	18 95       	reti

00000950 <__vector_18>:
 * \brief Data RX interrupt handler
 *
 * This is the handler for UART receive data
 */
ISR(UART0_RX_IRQ)
{
     950:	1f 92       	push	r1
     952:	0f 92       	push	r0
     954:	0f b6       	in	r0, 0x3f	; 63
     956:	0f 92       	push	r0
     958:	11 24       	eor	r1, r1
     95a:	2f 93       	push	r18
     95c:	4f 93       	push	r20
     95e:	5f 93       	push	r21
     960:	8f 93       	push	r24
     962:	9f 93       	push	r25
     964:	af 93       	push	r26
     966:	bf 93       	push	r27
     968:	ef 93       	push	r30
     96a:	ff 93       	push	r31
	ring_buffer_put(&ring_buffer_in, UDR0);
     96c:	80 91 c6 00 	lds	r24, 0x00C6
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
     970:	eb ed       	ldi	r30, 0xDB	; 219
     972:	f4 e0       	ldi	r31, 0x04	; 4
     974:	90 81       	ld	r25, Z
     976:	a3 81       	ldd	r26, Z+3	; 0x03
     978:	b4 81       	ldd	r27, Z+4	; 0x04
     97a:	a9 0f       	add	r26, r25
     97c:	b1 1d       	adc	r27, r1
     97e:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
     980:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     982:	42 2f       	mov	r20, r18
     984:	50 e0       	ldi	r21, 0x00	; 0
     986:	82 81       	ldd	r24, Z+2	; 0x02
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	01 97       	sbiw	r24, 0x01	; 1
     98c:	48 17       	cp	r20, r24
     98e:	59 07       	cpc	r21, r25
     990:	11 f0       	breq	.+4      	; 0x996 <__vector_18+0x46>
     992:	2f 5f       	subi	r18, 0xFF	; 255
     994:	01 c0       	rjmp	.+2      	; 0x998 <__vector_18+0x48>
     996:	20 e0       	ldi	r18, 0x00	; 0
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
     998:	20 93 db 04 	sts	0x04DB, r18
}
     99c:	ff 91       	pop	r31
     99e:	ef 91       	pop	r30
     9a0:	bf 91       	pop	r27
     9a2:	af 91       	pop	r26
     9a4:	9f 91       	pop	r25
     9a6:	8f 91       	pop	r24
     9a8:	5f 91       	pop	r21
     9aa:	4f 91       	pop	r20
     9ac:	2f 91       	pop	r18
     9ae:	0f 90       	pop	r0
     9b0:	0f be       	out	0x3f, r0	; 63
     9b2:	0f 90       	pop	r0
     9b4:	1f 90       	pop	r1
     9b6:	18 95       	reti

000009b8 <__vector_14>:
	
	sei();
}

ISR(TIMER0_COMPA_vect)	// PWM output Irq
{
     9b8:	1f 92       	push	r1
     9ba:	0f 92       	push	r0
     9bc:	0f b6       	in	r0, 0x3f	; 63
     9be:	0f 92       	push	r0
     9c0:	11 24       	eor	r1, r1
     9c2:	2f 93       	push	r18
     9c4:	3f 93       	push	r19
     9c6:	8f 93       	push	r24
     9c8:	9f 93       	push	r25
     9ca:	ef 93       	push	r30
     9cc:	ff 93       	push	r31
	ch0.pwmCnt++;
     9ce:	eb ec       	ldi	r30, 0xCB	; 203
     9d0:	f2 e0       	ldi	r31, 0x02	; 2
     9d2:	80 81       	ld	r24, Z
     9d4:	91 81       	ldd	r25, Z+1	; 0x01
     9d6:	01 96       	adiw	r24, 0x01	; 1
     9d8:	91 83       	std	Z+1, r25	; 0x01
     9da:	80 83       	st	Z, r24
	if(ch0.pwmCnt < ch0.pwm )
     9dc:	20 81       	ld	r18, Z
     9de:	31 81       	ldd	r19, Z+1	; 0x01
     9e0:	80 91 cd 02 	lds	r24, 0x02CD
     9e4:	90 91 ce 02 	lds	r25, 0x02CE
     9e8:	28 17       	cp	r18, r24
     9ea:	39 07       	cpc	r19, r25
     9ec:	34 f4       	brge	.+12     	; 0x9fa <__vector_14+0x42>
static inline void SetHeaterOutputON(uint8_t ch)
{
	switch (ch)
	{
		case 0:
			if(ch0.heaterEnable)
     9ee:	80 91 cf 02 	lds	r24, 0x02CF
     9f2:	88 23       	and	r24, r24
     9f4:	19 f0       	breq	.+6      	; 0x9fc <__vector_14+0x44>
			{
				PORTC |= 0b00000001;
     9f6:	40 9a       	sbi	0x08, 0	; 8
     9f8:	01 c0       	rjmp	.+2      	; 0x9fc <__vector_14+0x44>
	{
		SetHeaterOutputON(0);
	}
	else
	{
		PORTC &= 0b11111110;
     9fa:	40 98       	cbi	0x08, 0	; 8
	}
	if(ch0.pwmCnt >= 100)
     9fc:	80 91 cb 02 	lds	r24, 0x02CB
     a00:	90 91 cc 02 	lds	r25, 0x02CC
     a04:	84 36       	cpi	r24, 0x64	; 100
     a06:	91 05       	cpc	r25, r1
     a08:	24 f0       	brlt	.+8      	; 0xa12 <__vector_14+0x5a>
	{
		ch0.pwmCnt = 0;
     a0a:	10 92 cc 02 	sts	0x02CC, r1
     a0e:	10 92 cb 02 	sts	0x02CB, r1
	}
	
	ch1.pwmCnt++;
     a12:	e8 e6       	ldi	r30, 0x68	; 104
     a14:	f2 e0       	ldi	r31, 0x02	; 2
     a16:	80 81       	ld	r24, Z
     a18:	91 81       	ldd	r25, Z+1	; 0x01
     a1a:	01 96       	adiw	r24, 0x01	; 1
     a1c:	91 83       	std	Z+1, r25	; 0x01
     a1e:	80 83       	st	Z, r24
	if(ch1.pwmCnt < ch1.pwm )
     a20:	20 81       	ld	r18, Z
     a22:	31 81       	ldd	r19, Z+1	; 0x01
     a24:	80 91 6a 02 	lds	r24, 0x026A
     a28:	90 91 6b 02 	lds	r25, 0x026B
     a2c:	28 17       	cp	r18, r24
     a2e:	39 07       	cpc	r19, r25
     a30:	34 f4       	brge	.+12     	; 0xa3e <__vector_14+0x86>
				PORTC |= 0b00000001;
			}
			break;
	
		case 1:
			if(ch1.heaterEnable)
     a32:	80 91 6c 02 	lds	r24, 0x026C
     a36:	88 23       	and	r24, r24
     a38:	19 f0       	breq	.+6      	; 0xa40 <__vector_14+0x88>
			{
				PORTC |= 0b00000010;	
     a3a:	41 9a       	sbi	0x08, 1	; 8
     a3c:	01 c0       	rjmp	.+2      	; 0xa40 <__vector_14+0x88>
	{
		SetHeaterOutputON(1);
	}
	else
	{
		PORTC &= 0b11111101;
     a3e:	41 98       	cbi	0x08, 1	; 8
	}
	if(ch1.pwmCnt >= 100)
     a40:	80 91 68 02 	lds	r24, 0x0268
     a44:	90 91 69 02 	lds	r25, 0x0269
     a48:	84 36       	cpi	r24, 0x64	; 100
     a4a:	91 05       	cpc	r25, r1
     a4c:	24 f0       	brlt	.+8      	; 0xa56 <__vector_14+0x9e>
	{
		ch1.pwmCnt = 0;
     a4e:	10 92 69 02 	sts	0x0269, r1
     a52:	10 92 68 02 	sts	0x0268, r1
	}
	
	ch2.pwmCnt++;
     a56:	e5 e0       	ldi	r30, 0x05	; 5
     a58:	f2 e0       	ldi	r31, 0x02	; 2
     a5a:	80 81       	ld	r24, Z
     a5c:	91 81       	ldd	r25, Z+1	; 0x01
     a5e:	01 96       	adiw	r24, 0x01	; 1
     a60:	91 83       	std	Z+1, r25	; 0x01
     a62:	80 83       	st	Z, r24
	if(ch2.pwmCnt < ch2.pwm )
     a64:	20 81       	ld	r18, Z
     a66:	31 81       	ldd	r19, Z+1	; 0x01
     a68:	80 91 07 02 	lds	r24, 0x0207
     a6c:	90 91 08 02 	lds	r25, 0x0208
     a70:	28 17       	cp	r18, r24
     a72:	39 07       	cpc	r19, r25
     a74:	34 f4       	brge	.+12     	; 0xa82 <__vector_14+0xca>
				PORTC |= 0b00000010;	
			}
			break;

		case 2:
			if(ch2.heaterEnable)
     a76:	80 91 09 02 	lds	r24, 0x0209
     a7a:	88 23       	and	r24, r24
     a7c:	19 f0       	breq	.+6      	; 0xa84 <__vector_14+0xcc>
			{
				PORTC |= 0b00000100;
     a7e:	42 9a       	sbi	0x08, 2	; 8
     a80:	01 c0       	rjmp	.+2      	; 0xa84 <__vector_14+0xcc>
	{
		SetHeaterOutputON(2);
	}
	else
	{
		PORTC &= 0b11111011;
     a82:	42 98       	cbi	0x08, 2	; 8
	}
	if(ch2.pwmCnt >= 100)
     a84:	80 91 05 02 	lds	r24, 0x0205
     a88:	90 91 06 02 	lds	r25, 0x0206
     a8c:	84 36       	cpi	r24, 0x64	; 100
     a8e:	91 05       	cpc	r25, r1
     a90:	24 f0       	brlt	.+8      	; 0xa9a <__vector_14+0xe2>
	{
		ch2.pwmCnt = 0;
     a92:	10 92 06 02 	sts	0x0206, r1
     a96:	10 92 05 02 	sts	0x0205, r1
	}
	
	ch3.pwmCnt++;
     a9a:	e2 ea       	ldi	r30, 0xA2	; 162
     a9c:	f1 e0       	ldi	r31, 0x01	; 1
     a9e:	80 81       	ld	r24, Z
     aa0:	91 81       	ldd	r25, Z+1	; 0x01
     aa2:	01 96       	adiw	r24, 0x01	; 1
     aa4:	91 83       	std	Z+1, r25	; 0x01
     aa6:	80 83       	st	Z, r24
	if(ch3.pwmCnt < ch3.pwm )
     aa8:	20 81       	ld	r18, Z
     aaa:	31 81       	ldd	r19, Z+1	; 0x01
     aac:	80 91 a4 01 	lds	r24, 0x01A4
     ab0:	90 91 a5 01 	lds	r25, 0x01A5
     ab4:	28 17       	cp	r18, r24
     ab6:	39 07       	cpc	r19, r25
     ab8:	34 f4       	brge	.+12     	; 0xac6 <__vector_14+0x10e>
				PORTC |= 0b00000100;
			}
			break;

		case 3:
			if(ch3.heaterEnable)
     aba:	80 91 a6 01 	lds	r24, 0x01A6
     abe:	88 23       	and	r24, r24
     ac0:	19 f0       	breq	.+6      	; 0xac8 <__vector_14+0x110>
			{
				PORTC |= 0b00001000;	
     ac2:	43 9a       	sbi	0x08, 3	; 8
     ac4:	01 c0       	rjmp	.+2      	; 0xac8 <__vector_14+0x110>
	{
		SetHeaterOutputON(3);
	}
	else
	{
		PORTC &= 0b11110111;
     ac6:	43 98       	cbi	0x08, 3	; 8
	}
	if(ch3.pwmCnt >= 100)
     ac8:	80 91 a2 01 	lds	r24, 0x01A2
     acc:	90 91 a3 01 	lds	r25, 0x01A3
     ad0:	84 36       	cpi	r24, 0x64	; 100
     ad2:	91 05       	cpc	r25, r1
     ad4:	24 f0       	brlt	.+8      	; 0xade <__vector_14+0x126>
	{
		ch3.pwmCnt = 0;
     ad6:	10 92 a3 01 	sts	0x01A3, r1
     ada:	10 92 a2 01 	sts	0x01A2, r1
	}

}
     ade:	ff 91       	pop	r31
     ae0:	ef 91       	pop	r30
     ae2:	9f 91       	pop	r25
     ae4:	8f 91       	pop	r24
     ae6:	3f 91       	pop	r19
     ae8:	2f 91       	pop	r18
     aea:	0f 90       	pop	r0
     aec:	0f be       	out	0x3f, r0	; 63
     aee:	0f 90       	pop	r0
     af0:	1f 90       	pop	r1
     af2:	18 95       	reti

00000af4 <__vector_7>:

ISR(TIMER2_COMPA_vect)	// PID Controller Irq
{
     af4:	1f 92       	push	r1
     af6:	0f 92       	push	r0
     af8:	0f b6       	in	r0, 0x3f	; 63
     afa:	0f 92       	push	r0
     afc:	11 24       	eor	r1, r1
     afe:	cf 92       	push	r12
     b00:	df 92       	push	r13
     b02:	ef 92       	push	r14
     b04:	ff 92       	push	r15
     b06:	0f 93       	push	r16
     b08:	1f 93       	push	r17
     b0a:	2f 93       	push	r18
     b0c:	3f 93       	push	r19
     b0e:	4f 93       	push	r20
     b10:	5f 93       	push	r21
     b12:	6f 93       	push	r22
     b14:	7f 93       	push	r23
     b16:	8f 93       	push	r24
     b18:	9f 93       	push	r25
     b1a:	af 93       	push	r26
     b1c:	bf 93       	push	r27
     b1e:	cf 93       	push	r28
     b20:	df 93       	push	r29
     b22:	ef 93       	push	r30
     b24:	ff 93       	push	r31
	sei();	// Enable nested interrupt
     b26:	78 94       	sei
	PORTD |= statusLed;
     b28:	5b 9a       	sbi	0x0b, 3	; 11
static inline unsigned char SPIread( unsigned char byteword, unsigned char ch)
{
	switch (ch)
	{
		case 1:
		PORTD &= 0b11101111;	// Set CS1 low
     b2a:	5c 98       	cbi	0x0b, 4	; 11
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     b30:	0d b4       	in	r0, 0x2d	; 45
     b32:	07 fe       	sbrs	r0, 7
     b34:	fd cf       	rjmp	.-6      	; 0xb30 <__vector_7+0x3c>
	byteword=SPDR;				//just for clearing SPIF
     b36:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
     b38:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     b3a:	0d b4       	in	r0, 0x2d	; 45
     b3c:	07 fe       	sbrs	r0, 7
     b3e:	fd cf       	rjmp	.-6      	; 0xb3a <__vector_7+0x46>
	byteword=SPDR;
     b40:	9e b5       	in	r25, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
     b42:	8b b1       	in	r24, 0x0b	; 11
     b44:	80 6f       	ori	r24, 0xF0	; 240
     b46:	8b b9       	out	0x0b, r24	; 11
static inline unsigned char SPIread( unsigned char byteword, unsigned char ch)
{
	switch (ch)
	{
		case 1:
		PORTD &= 0b11101111;	// Set CS1 low
     b48:	5c 98       	cbi	0x0b, 4	; 11
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
     b4a:	82 e0       	ldi	r24, 0x02	; 2
     b4c:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     b4e:	0d b4       	in	r0, 0x2d	; 45
     b50:	07 fe       	sbrs	r0, 7
     b52:	fd cf       	rjmp	.-6      	; 0xb4e <__vector_7+0x5a>
	byteword=SPDR;				//just for clearing SPIF
     b54:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
     b56:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     b58:	0d b4       	in	r0, 0x2d	; 45
     b5a:	07 fe       	sbrs	r0, 7
     b5c:	fd cf       	rjmp	.-6      	; 0xb58 <__vector_7+0x64>
	byteword=SPDR;
     b5e:	6e b5       	in	r22, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
     b60:	8b b1       	in	r24, 0x0b	; 11
     b62:	80 6f       	ori	r24, 0xF0	; 240
     b64:	8b b9       	out	0x0b, r24	; 11
	uint8_t u8_msb = 0;
	uint8_t u8_lsb = 0;
	
	u8_msb = SPIread(0x01, ch);
	u8_lsb = SPIread(0x02, ch);
	adc_code = (((u8_msb << 8) | u8_lsb) >> 1);
     b66:	70 e0       	ldi	r23, 0x00	; 0
     b68:	79 2b       	or	r23, r25
     b6a:	75 95       	asr	r23
     b6c:	67 95       	ror	r22
	return ((float)adc_code / 32.0 - 256.0);
     b6e:	07 2e       	mov	r0, r23
     b70:	00 0c       	add	r0, r0
     b72:	88 0b       	sbc	r24, r24
     b74:	99 0b       	sbc	r25, r25
     b76:	0e 94 51 22 	call	0x44a2	; 0x44a2 <__floatsisf>
     b7a:	20 e0       	ldi	r18, 0x00	; 0
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	40 e0       	ldi	r20, 0x00	; 0
     b80:	5d e3       	ldi	r21, 0x3D	; 61
     b82:	0e 94 05 23 	call	0x460a	; 0x460a <__mulsf3>
     b86:	20 e0       	ldi	r18, 0x00	; 0
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	40 e8       	ldi	r20, 0x80	; 128
     b8c:	53 e4       	ldi	r21, 0x43	; 67
     b8e:	0e 94 b5 21 	call	0x436a	; 0x436a <__subsf3>
	PORTD &= 0b11110111;						// Turn off LED on PCB (Irq call freq: 16MHz / 1024 / 255 = 61.3 Hz )
}

static inline void PIDctrl(channel *ch, int tempSensor)
{
	ch->TempSensor = ReadTempSensor(tempSensor);
     b92:	ed e6       	ldi	r30, 0x6D	; 109
     b94:	f2 e0       	ldi	r31, 0x02	; 2
     b96:	64 83       	std	Z+4, r22	; 0x04
     b98:	75 83       	std	Z+5, r23	; 0x05
     b9a:	86 83       	std	Z+6, r24	; 0x06
     b9c:	97 83       	std	Z+7, r25	; 0x07
	if(ch->TempSensor > (float)maxAllowedTemp)								// Max temperature limit
     b9e:	64 81       	ldd	r22, Z+4	; 0x04
     ba0:	75 81       	ldd	r23, Z+5	; 0x05
     ba2:	86 81       	ldd	r24, Z+6	; 0x06
     ba4:	97 81       	ldd	r25, Z+7	; 0x07
     ba6:	20 e0       	ldi	r18, 0x00	; 0
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	40 ef       	ldi	r20, 0xF0	; 240
     bac:	52 e4       	ldi	r21, 0x42	; 66
     bae:	0e 94 01 23 	call	0x4602	; 0x4602 <__gesf2>
     bb2:	18 16       	cp	r1, r24
     bb4:	2c f4       	brge	.+10     	; 0xbc0 <__vector_7+0xcc>
	{
		ch->heaterEnable = false;
     bb6:	10 92 cf 02 	sts	0x02CF, r1
		PORTC &= allHeaterOff;
     bba:	88 b1       	in	r24, 0x08	; 8
     bbc:	80 7f       	andi	r24, 0xF0	; 240
     bbe:	88 b9       	out	0x08, r24	; 8
	}

	ch->TempError[CtrlErrorIdx] = ch->TempSetPoint - ch->TempSensor;		// Control error
     bc0:	00 91 d0 02 	lds	r16, 0x02D0
     bc4:	10 91 d1 02 	lds	r17, 0x02D1
     bc8:	cd e6       	ldi	r28, 0x6D	; 109
     bca:	d2 e0       	ldi	r29, 0x02	; 2
     bcc:	68 81       	ld	r22, Y
     bce:	79 81       	ldd	r23, Y+1	; 0x01
     bd0:	8a 81       	ldd	r24, Y+2	; 0x02
     bd2:	9b 81       	ldd	r25, Y+3	; 0x03
     bd4:	2c 81       	ldd	r18, Y+4	; 0x04
     bd6:	3d 81       	ldd	r19, Y+5	; 0x05
     bd8:	4e 81       	ldd	r20, Y+6	; 0x06
     bda:	5f 81       	ldd	r21, Y+7	; 0x07
     bdc:	0e 94 b5 21 	call	0x436a	; 0x436a <__subsf3>
     be0:	00 0f       	add	r16, r16
     be2:	11 1f       	adc	r17, r17
     be4:	00 0f       	add	r16, r16
     be6:	11 1f       	adc	r17, r17
     be8:	f8 01       	movw	r30, r16
     bea:	eb 56       	subi	r30, 0x6B	; 107
     bec:	fd 4f       	sbci	r31, 0xFD	; 253
     bee:	60 83       	st	Z, r22
     bf0:	71 83       	std	Z+1, r23	; 0x01
     bf2:	82 83       	std	Z+2, r24	; 0x02
     bf4:	93 83       	std	Z+3, r25	; 0x03
	
	ch->P_err = ch->TempError[CtrlErrorIdx] * ch->Pgain;					// P error
     bf6:	e0 91 d0 02 	lds	r30, 0x02D0
     bfa:	f0 91 d1 02 	lds	r31, 0x02D1
     bfe:	ee 0f       	add	r30, r30
     c00:	ff 1f       	adc	r31, r31
     c02:	ee 0f       	add	r30, r30
     c04:	ff 1f       	adc	r31, r31
     c06:	eb 56       	subi	r30, 0x6B	; 107
     c08:	fd 4f       	sbci	r31, 0xFD	; 253
     c0a:	60 81       	ld	r22, Z
     c0c:	71 81       	ldd	r23, Z+1	; 0x01
     c0e:	82 81       	ldd	r24, Z+2	; 0x02
     c10:	93 81       	ldd	r25, Z+3	; 0x03
     c12:	2c 8d       	ldd	r18, Y+28	; 0x1c
     c14:	3d 8d       	ldd	r19, Y+29	; 0x1d
     c16:	4e 8d       	ldd	r20, Y+30	; 0x1e
     c18:	5f 8d       	ldd	r21, Y+31	; 0x1f
     c1a:	0e 94 05 23 	call	0x460a	; 0x460a <__mulsf3>
     c1e:	68 87       	std	Y+8, r22	; 0x08
     c20:	79 87       	std	Y+9, r23	; 0x09
     c22:	8a 87       	std	Y+10, r24	; 0x0a
     c24:	9b 87       	std	Y+11, r25	; 0x0b
	ch->I_err = ch->I_err + (ch->TempError[CtrlErrorIdx] * ch->Igain);		// I error
     c26:	cc 84       	ldd	r12, Y+12	; 0x0c
     c28:	dd 84       	ldd	r13, Y+13	; 0x0d
     c2a:	ee 84       	ldd	r14, Y+14	; 0x0e
     c2c:	ff 84       	ldd	r15, Y+15	; 0x0f
     c2e:	e0 91 d0 02 	lds	r30, 0x02D0
     c32:	f0 91 d1 02 	lds	r31, 0x02D1
     c36:	ee 0f       	add	r30, r30
     c38:	ff 1f       	adc	r31, r31
     c3a:	ee 0f       	add	r30, r30
     c3c:	ff 1f       	adc	r31, r31
     c3e:	eb 56       	subi	r30, 0x6B	; 107
     c40:	fd 4f       	sbci	r31, 0xFD	; 253
     c42:	60 81       	ld	r22, Z
     c44:	71 81       	ldd	r23, Z+1	; 0x01
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	28 a1       	ldd	r18, Y+32	; 0x20
     c4c:	39 a1       	ldd	r19, Y+33	; 0x21
     c4e:	4a a1       	ldd	r20, Y+34	; 0x22
     c50:	5b a1       	ldd	r21, Y+35	; 0x23
     c52:	0e 94 05 23 	call	0x460a	; 0x460a <__mulsf3>
     c56:	9b 01       	movw	r18, r22
     c58:	ac 01       	movw	r20, r24
     c5a:	c7 01       	movw	r24, r14
     c5c:	b6 01       	movw	r22, r12
     c5e:	0e 94 b6 21 	call	0x436c	; 0x436c <__addsf3>
     c62:	6c 87       	std	Y+12, r22	; 0x0c
     c64:	7d 87       	std	Y+13, r23	; 0x0d
     c66:	8e 87       	std	Y+14, r24	; 0x0e
     c68:	9f 87       	std	Y+15, r25	; 0x0f
	if(ch->I_err > integralErrorLimit)
     c6a:	6c 85       	ldd	r22, Y+12	; 0x0c
     c6c:	7d 85       	ldd	r23, Y+13	; 0x0d
     c6e:	8e 85       	ldd	r24, Y+14	; 0x0e
     c70:	9f 85       	ldd	r25, Y+15	; 0x0f
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	40 e2       	ldi	r20, 0x20	; 32
     c78:	51 e4       	ldi	r21, 0x41	; 65
     c7a:	0e 94 01 23 	call	0x4602	; 0x4602 <__gesf2>
     c7e:	18 16       	cp	r1, r24
     c80:	64 f4       	brge	.+24     	; 0xc9a <__vector_7+0x1a6>
	{
		ch->I_err = integralErrorLimit;
     c82:	80 e0       	ldi	r24, 0x00	; 0
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	a0 e2       	ldi	r26, 0x20	; 32
     c88:	b1 e4       	ldi	r27, 0x41	; 65
     c8a:	80 93 79 02 	sts	0x0279, r24
     c8e:	90 93 7a 02 	sts	0x027A, r25
     c92:	a0 93 7b 02 	sts	0x027B, r26
     c96:	b0 93 7c 02 	sts	0x027C, r27
	}
	if(ch->I_err < -integralErrorLimit)
     c9a:	60 91 79 02 	lds	r22, 0x0279
     c9e:	70 91 7a 02 	lds	r23, 0x027A
     ca2:	80 91 7b 02 	lds	r24, 0x027B
     ca6:	90 91 7c 02 	lds	r25, 0x027C
     caa:	20 e0       	ldi	r18, 0x00	; 0
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	40 e2       	ldi	r20, 0x20	; 32
     cb0:	51 ec       	ldi	r21, 0xC1	; 193
     cb2:	0e 94 1a 22 	call	0x4434	; 0x4434 <__cmpsf2>
     cb6:	88 23       	and	r24, r24
     cb8:	64 f4       	brge	.+24     	; 0xcd2 <__vector_7+0x1de>
	{
		ch->I_err = -integralErrorLimit;
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	a0 e2       	ldi	r26, 0x20	; 32
     cc0:	b1 ec       	ldi	r27, 0xC1	; 193
     cc2:	80 93 79 02 	sts	0x0279, r24
     cc6:	90 93 7a 02 	sts	0x027A, r25
     cca:	a0 93 7b 02 	sts	0x027B, r26
     cce:	b0 93 7c 02 	sts	0x027C, r27
	}
	
	ch->D_err = (ch->TempError[CtrlErrorIdx] - ch->TempError[CtrlErrorHistIdx]) * ch->Dgain; // D error
     cd2:	e0 91 d0 02 	lds	r30, 0x02D0
     cd6:	f0 91 d1 02 	lds	r31, 0x02D1
     cda:	cd e6       	ldi	r28, 0x6D	; 109
     cdc:	d2 e0       	ldi	r29, 0x02	; 2
     cde:	ee 0f       	add	r30, r30
     ce0:	ff 1f       	adc	r31, r31
     ce2:	ee 0f       	add	r30, r30
     ce4:	ff 1f       	adc	r31, r31
     ce6:	eb 56       	subi	r30, 0x6B	; 107
     ce8:	fd 4f       	sbci	r31, 0xFD	; 253
     cea:	60 81       	ld	r22, Z
     cec:	71 81       	ldd	r23, Z+1	; 0x01
     cee:	82 81       	ldd	r24, Z+2	; 0x02
     cf0:	93 81       	ldd	r25, Z+3	; 0x03
     cf2:	e0 91 00 01 	lds	r30, 0x0100
     cf6:	f0 91 01 01 	lds	r31, 0x0101
     cfa:	ee 0f       	add	r30, r30
     cfc:	ff 1f       	adc	r31, r31
     cfe:	ee 0f       	add	r30, r30
     d00:	ff 1f       	adc	r31, r31
     d02:	eb 56       	subi	r30, 0x6B	; 107
     d04:	fd 4f       	sbci	r31, 0xFD	; 253
     d06:	20 81       	ld	r18, Z
     d08:	31 81       	ldd	r19, Z+1	; 0x01
     d0a:	42 81       	ldd	r20, Z+2	; 0x02
     d0c:	53 81       	ldd	r21, Z+3	; 0x03
     d0e:	cc a0       	ldd	r12, Y+36	; 0x24
     d10:	dd a0       	ldd	r13, Y+37	; 0x25
     d12:	ee a0       	ldd	r14, Y+38	; 0x26
     d14:	ff a0       	ldd	r15, Y+39	; 0x27
     d16:	0e 94 b5 21 	call	0x436a	; 0x436a <__subsf3>
     d1a:	a7 01       	movw	r20, r14
     d1c:	96 01       	movw	r18, r12
     d1e:	0e 94 05 23 	call	0x460a	; 0x460a <__mulsf3>
     d22:	68 8b       	std	Y+16, r22	; 0x10
     d24:	79 8b       	std	Y+17, r23	; 0x11
     d26:	8a 8b       	std	Y+18, r24	; 0x12
     d28:	9b 8b       	std	Y+19, r25	; 0x13
	
	ch->Control_PID = ch->P_err + ch->I_err + ch->D_err;
     d2a:	68 85       	ldd	r22, Y+8	; 0x08
     d2c:	79 85       	ldd	r23, Y+9	; 0x09
     d2e:	8a 85       	ldd	r24, Y+10	; 0x0a
     d30:	9b 85       	ldd	r25, Y+11	; 0x0b
     d32:	2c 85       	ldd	r18, Y+12	; 0x0c
     d34:	3d 85       	ldd	r19, Y+13	; 0x0d
     d36:	4e 85       	ldd	r20, Y+14	; 0x0e
     d38:	5f 85       	ldd	r21, Y+15	; 0x0f
     d3a:	c8 88       	ldd	r12, Y+16	; 0x10
     d3c:	d9 88       	ldd	r13, Y+17	; 0x11
     d3e:	ea 88       	ldd	r14, Y+18	; 0x12
     d40:	fb 88       	ldd	r15, Y+19	; 0x13
     d42:	0e 94 b6 21 	call	0x436c	; 0x436c <__addsf3>
     d46:	a7 01       	movw	r20, r14
     d48:	96 01       	movw	r18, r12
     d4a:	0e 94 b6 21 	call	0x436c	; 0x436c <__addsf3>
     d4e:	68 8f       	std	Y+24, r22	; 0x18
     d50:	79 8f       	std	Y+25, r23	; 0x19
     d52:	8a 8f       	std	Y+26, r24	; 0x1a
     d54:	9b 8f       	std	Y+27, r25	; 0x1b
	ch->Control = ch->Control_PID; // + ch->TempSetPoint * (float)0.21 - 5;
     d56:	88 8d       	ldd	r24, Y+24	; 0x18
     d58:	99 8d       	ldd	r25, Y+25	; 0x19
     d5a:	aa 8d       	ldd	r26, Y+26	; 0x1a
     d5c:	bb 8d       	ldd	r27, Y+27	; 0x1b
     d5e:	8c 8b       	std	Y+20, r24	; 0x14
     d60:	9d 8b       	std	Y+21, r25	; 0x15
     d62:	ae 8b       	std	Y+22, r26	; 0x16
     d64:	bf 8b       	std	Y+23, r27	; 0x17
	ch->pwm = (round(ch->Control));
     d66:	6c 89       	ldd	r22, Y+20	; 0x14
     d68:	7d 89       	ldd	r23, Y+21	; 0x15
     d6a:	8e 89       	ldd	r24, Y+22	; 0x16
     d6c:	9f 89       	ldd	r25, Y+23	; 0x17
     d6e:	0e 94 68 23 	call	0x46d0	; 0x46d0 <round>
     d72:	0e 94 1e 22 	call	0x443c	; 0x443c <__fixsfsi>
     d76:	70 93 ce 02 	sts	0x02CE, r23
     d7a:	60 93 cd 02 	sts	0x02CD, r22
	
	if(fabs(ch->TempError[CtrlErrorIdx]) > integralErrorActiveWindow)
     d7e:	e0 91 d0 02 	lds	r30, 0x02D0
     d82:	f0 91 d1 02 	lds	r31, 0x02D1
     d86:	ee 0f       	add	r30, r30
     d88:	ff 1f       	adc	r31, r31
     d8a:	ee 0f       	add	r30, r30
     d8c:	ff 1f       	adc	r31, r31
     d8e:	eb 56       	subi	r30, 0x6B	; 107
     d90:	fd 4f       	sbci	r31, 0xFD	; 253
     d92:	80 81       	ld	r24, Z
     d94:	91 81       	ldd	r25, Z+1	; 0x01
     d96:	a2 81       	ldd	r26, Z+2	; 0x02
     d98:	b3 81       	ldd	r27, Z+3	; 0x03
     d9a:	bc 01       	movw	r22, r24
     d9c:	cd 01       	movw	r24, r26
     d9e:	9f 77       	andi	r25, 0x7F	; 127
     da0:	20 e0       	ldi	r18, 0x00	; 0
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	40 ea       	ldi	r20, 0xA0	; 160
     da6:	50 e4       	ldi	r21, 0x40	; 64
     da8:	0e 94 01 23 	call	0x4602	; 0x4602 <__gesf2>
     dac:	18 16       	cp	r1, r24
     dae:	44 f4       	brge	.+16     	; 0xdc0 <__vector_7+0x2cc>
	{
		ch->I_err = 0;														// Avoid integral wind-up
     db0:	10 92 79 02 	sts	0x0279, r1
     db4:	10 92 7a 02 	sts	0x027A, r1
     db8:	10 92 7b 02 	sts	0x027B, r1
     dbc:	10 92 7c 02 	sts	0x027C, r1
	}
	
	if(fabs(ch->TempError[CtrlErrorIdx]) <= ch->tempErrorWin)				// Temperature settle window
     dc0:	e0 91 d0 02 	lds	r30, 0x02D0
     dc4:	f0 91 d1 02 	lds	r31, 0x02D1
     dc8:	ee 0f       	add	r30, r30
     dca:	ff 1f       	adc	r31, r31
     dcc:	ee 0f       	add	r30, r30
     dce:	ff 1f       	adc	r31, r31
     dd0:	eb 56       	subi	r30, 0x6B	; 107
     dd2:	fd 4f       	sbci	r31, 0xFD	; 253
     dd4:	80 81       	ld	r24, Z
     dd6:	91 81       	ldd	r25, Z+1	; 0x01
     dd8:	a2 81       	ldd	r26, Z+2	; 0x02
     dda:	b3 81       	ldd	r27, Z+3	; 0x03
     ddc:	20 91 c1 02 	lds	r18, 0x02C1
     de0:	30 91 c2 02 	lds	r19, 0x02C2
     de4:	40 91 c3 02 	lds	r20, 0x02C3
     de8:	50 91 c4 02 	lds	r21, 0x02C4
     dec:	bc 01       	movw	r22, r24
     dee:	cd 01       	movw	r24, r26
     df0:	9f 77       	andi	r25, 0x7F	; 127
     df2:	0e 94 1a 22 	call	0x4434	; 0x4434 <__cmpsf2>
     df6:	18 16       	cp	r1, r24
     df8:	14 f1       	brlt	.+68     	; 0xe3e <__vector_7+0x34a>
	{
		ch->tempSettleCnt ++;
     dfa:	e5 ec       	ldi	r30, 0xC5	; 197
     dfc:	f2 e0       	ldi	r31, 0x02	; 2
     dfe:	80 81       	ld	r24, Z
     e00:	91 81       	ldd	r25, Z+1	; 0x01
     e02:	01 96       	adiw	r24, 0x01	; 1
     e04:	91 83       	std	Z+1, r25	; 0x01
     e06:	80 83       	st	Z, r24
		if(ch->tempSettleCnt >= (int)(ch->tempSettleTime * 61))
     e08:	20 81       	ld	r18, Z
     e0a:	31 81       	ldd	r19, Z+1	; 0x01
     e0c:	40 91 c7 02 	lds	r20, 0x02C7
     e10:	50 91 c8 02 	lds	r21, 0x02C8
     e14:	6d e3       	ldi	r22, 0x3D	; 61
     e16:	64 9f       	mul	r22, r20
     e18:	c0 01       	movw	r24, r0
     e1a:	65 9f       	mul	r22, r21
     e1c:	90 0d       	add	r25, r0
     e1e:	11 24       	eor	r1, r1
     e20:	28 17       	cp	r18, r24
     e22:	39 07       	cpc	r19, r25
     e24:	a4 f0       	brlt	.+40     	; 0xe4e <__vector_7+0x35a>
		{
			ch->tempStable = 1;
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	90 93 ca 02 	sts	0x02CA, r25
     e2e:	80 93 c9 02 	sts	0x02C9, r24
			ch->tempSettleCnt --;
     e32:	80 81       	ld	r24, Z
     e34:	91 81       	ldd	r25, Z+1	; 0x01
     e36:	01 97       	sbiw	r24, 0x01	; 1
     e38:	91 83       	std	Z+1, r25	; 0x01
     e3a:	80 83       	st	Z, r24
     e3c:	08 c0       	rjmp	.+16     	; 0xe4e <__vector_7+0x35a>
		}			
	}
	else
	{
		ch->tempSettleCnt = 0;
     e3e:	10 92 c6 02 	sts	0x02C6, r1
     e42:	10 92 c5 02 	sts	0x02C5, r1
		ch->tempStable = 0;
     e46:	10 92 ca 02 	sts	0x02CA, r1
     e4a:	10 92 c9 02 	sts	0x02C9, r1
		case 1:
		PORTD &= 0b11101111;	// Set CS1 low
		break;
		
		case 2:
		PORTD &= 0b11011111;	// Set CS2 low
     e4e:	5d 98       	cbi	0x0b, 5	; 11
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     e54:	0d b4       	in	r0, 0x2d	; 45
     e56:	07 fe       	sbrs	r0, 7
     e58:	fd cf       	rjmp	.-6      	; 0xe54 <__vector_7+0x360>
	byteword=SPDR;				//just for clearing SPIF
     e5a:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
     e5c:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     e5e:	0d b4       	in	r0, 0x2d	; 45
     e60:	07 fe       	sbrs	r0, 7
     e62:	fd cf       	rjmp	.-6      	; 0xe5e <__vector_7+0x36a>
	byteword=SPDR;
     e64:	9e b5       	in	r25, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
     e66:	8b b1       	in	r24, 0x0b	; 11
     e68:	80 6f       	ori	r24, 0xF0	; 240
     e6a:	8b b9       	out	0x0b, r24	; 11
		case 1:
		PORTD &= 0b11101111;	// Set CS1 low
		break;
		
		case 2:
		PORTD &= 0b11011111;	// Set CS2 low
     e6c:	5d 98       	cbi	0x0b, 5	; 11
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
     e6e:	82 e0       	ldi	r24, 0x02	; 2
     e70:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     e72:	0d b4       	in	r0, 0x2d	; 45
     e74:	07 fe       	sbrs	r0, 7
     e76:	fd cf       	rjmp	.-6      	; 0xe72 <__vector_7+0x37e>
	byteword=SPDR;				//just for clearing SPIF
     e78:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
     e7a:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
     e7c:	0d b4       	in	r0, 0x2d	; 45
     e7e:	07 fe       	sbrs	r0, 7
     e80:	fd cf       	rjmp	.-6      	; 0xe7c <__vector_7+0x388>
	byteword=SPDR;
     e82:	6e b5       	in	r22, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
     e84:	8b b1       	in	r24, 0x0b	; 11
     e86:	80 6f       	ori	r24, 0xF0	; 240
     e88:	8b b9       	out	0x0b, r24	; 11
	uint8_t u8_msb = 0;
	uint8_t u8_lsb = 0;
	
	u8_msb = SPIread(0x01, ch);
	u8_lsb = SPIread(0x02, ch);
	adc_code = (((u8_msb << 8) | u8_lsb) >> 1);
     e8a:	70 e0       	ldi	r23, 0x00	; 0
     e8c:	79 2b       	or	r23, r25
     e8e:	75 95       	asr	r23
     e90:	67 95       	ror	r22
	return ((float)adc_code / 32.0 - 256.0);
     e92:	07 2e       	mov	r0, r23
     e94:	00 0c       	add	r0, r0
     e96:	88 0b       	sbc	r24, r24
     e98:	99 0b       	sbc	r25, r25
     e9a:	0e 94 51 22 	call	0x44a2	; 0x44a2 <__floatsisf>
     e9e:	20 e0       	ldi	r18, 0x00	; 0
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	40 e0       	ldi	r20, 0x00	; 0
     ea4:	5d e3       	ldi	r21, 0x3D	; 61
     ea6:	0e 94 05 23 	call	0x460a	; 0x460a <__mulsf3>
     eaa:	20 e0       	ldi	r18, 0x00	; 0
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	40 e8       	ldi	r20, 0x80	; 128
     eb0:	53 e4       	ldi	r21, 0x43	; 67
     eb2:	0e 94 b5 21 	call	0x436a	; 0x436a <__subsf3>
	PORTD &= 0b11110111;						// Turn off LED on PCB (Irq call freq: 16MHz / 1024 / 255 = 61.3 Hz )
}

static inline void PIDctrl(channel *ch, int tempSensor)
{
	ch->TempSensor = ReadTempSensor(tempSensor);
     eb6:	ea e0       	ldi	r30, 0x0A	; 10
     eb8:	f2 e0       	ldi	r31, 0x02	; 2
     eba:	64 83       	std	Z+4, r22	; 0x04
     ebc:	75 83       	std	Z+5, r23	; 0x05
     ebe:	86 83       	std	Z+6, r24	; 0x06
     ec0:	97 83       	std	Z+7, r25	; 0x07
	if(ch->TempSensor > (float)maxAllowedTemp)								// Max temperature limit
     ec2:	64 81       	ldd	r22, Z+4	; 0x04
     ec4:	75 81       	ldd	r23, Z+5	; 0x05
     ec6:	86 81       	ldd	r24, Z+6	; 0x06
     ec8:	97 81       	ldd	r25, Z+7	; 0x07
     eca:	20 e0       	ldi	r18, 0x00	; 0
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	40 ef       	ldi	r20, 0xF0	; 240
     ed0:	52 e4       	ldi	r21, 0x42	; 66
     ed2:	0e 94 01 23 	call	0x4602	; 0x4602 <__gesf2>
     ed6:	18 16       	cp	r1, r24
     ed8:	2c f4       	brge	.+10     	; 0xee4 <__vector_7+0x3f0>
	{
		ch->heaterEnable = false;
     eda:	10 92 6c 02 	sts	0x026C, r1
		PORTC &= allHeaterOff;
     ede:	88 b1       	in	r24, 0x08	; 8
     ee0:	80 7f       	andi	r24, 0xF0	; 240
     ee2:	88 b9       	out	0x08, r24	; 8
	}

	ch->TempError[CtrlErrorIdx] = ch->TempSetPoint - ch->TempSensor;		// Control error
     ee4:	00 91 d0 02 	lds	r16, 0x02D0
     ee8:	10 91 d1 02 	lds	r17, 0x02D1
     eec:	ca e0       	ldi	r28, 0x0A	; 10
     eee:	d2 e0       	ldi	r29, 0x02	; 2
     ef0:	68 81       	ld	r22, Y
     ef2:	79 81       	ldd	r23, Y+1	; 0x01
     ef4:	8a 81       	ldd	r24, Y+2	; 0x02
     ef6:	9b 81       	ldd	r25, Y+3	; 0x03
     ef8:	2c 81       	ldd	r18, Y+4	; 0x04
     efa:	3d 81       	ldd	r19, Y+5	; 0x05
     efc:	4e 81       	ldd	r20, Y+6	; 0x06
     efe:	5f 81       	ldd	r21, Y+7	; 0x07
     f00:	0e 94 b5 21 	call	0x436a	; 0x436a <__subsf3>
     f04:	00 0f       	add	r16, r16
     f06:	11 1f       	adc	r17, r17
     f08:	00 0f       	add	r16, r16
     f0a:	11 1f       	adc	r17, r17
     f0c:	f8 01       	movw	r30, r16
     f0e:	ee 5c       	subi	r30, 0xCE	; 206
     f10:	fd 4f       	sbci	r31, 0xFD	; 253
     f12:	60 83       	st	Z, r22
     f14:	71 83       	std	Z+1, r23	; 0x01
     f16:	82 83       	std	Z+2, r24	; 0x02
     f18:	93 83       	std	Z+3, r25	; 0x03
	
	ch->P_err = ch->TempError[CtrlErrorIdx] * ch->Pgain;					// P error
     f1a:	e0 91 d0 02 	lds	r30, 0x02D0
     f1e:	f0 91 d1 02 	lds	r31, 0x02D1
     f22:	ee 0f       	add	r30, r30
     f24:	ff 1f       	adc	r31, r31
     f26:	ee 0f       	add	r30, r30
     f28:	ff 1f       	adc	r31, r31
     f2a:	ee 5c       	subi	r30, 0xCE	; 206
     f2c:	fd 4f       	sbci	r31, 0xFD	; 253
     f2e:	60 81       	ld	r22, Z
     f30:	71 81       	ldd	r23, Z+1	; 0x01
     f32:	82 81       	ldd	r24, Z+2	; 0x02
     f34:	93 81       	ldd	r25, Z+3	; 0x03
     f36:	2c 8d       	ldd	r18, Y+28	; 0x1c
     f38:	3d 8d       	ldd	r19, Y+29	; 0x1d
     f3a:	4e 8d       	ldd	r20, Y+30	; 0x1e
     f3c:	5f 8d       	ldd	r21, Y+31	; 0x1f
     f3e:	0e 94 05 23 	call	0x460a	; 0x460a <__mulsf3>
     f42:	68 87       	std	Y+8, r22	; 0x08
     f44:	79 87       	std	Y+9, r23	; 0x09
     f46:	8a 87       	std	Y+10, r24	; 0x0a
     f48:	9b 87       	std	Y+11, r25	; 0x0b
	ch->I_err = ch->I_err + (ch->TempError[CtrlErrorIdx] * ch->Igain);		// I error
     f4a:	cc 84       	ldd	r12, Y+12	; 0x0c
     f4c:	dd 84       	ldd	r13, Y+13	; 0x0d
     f4e:	ee 84       	ldd	r14, Y+14	; 0x0e
     f50:	ff 84       	ldd	r15, Y+15	; 0x0f
     f52:	e0 91 d0 02 	lds	r30, 0x02D0
     f56:	f0 91 d1 02 	lds	r31, 0x02D1
     f5a:	ee 0f       	add	r30, r30
     f5c:	ff 1f       	adc	r31, r31
     f5e:	ee 0f       	add	r30, r30
     f60:	ff 1f       	adc	r31, r31
     f62:	ee 5c       	subi	r30, 0xCE	; 206
     f64:	fd 4f       	sbci	r31, 0xFD	; 253
     f66:	60 81       	ld	r22, Z
     f68:	71 81       	ldd	r23, Z+1	; 0x01
     f6a:	82 81       	ldd	r24, Z+2	; 0x02
     f6c:	93 81       	ldd	r25, Z+3	; 0x03
     f6e:	28 a1       	ldd	r18, Y+32	; 0x20
     f70:	39 a1       	ldd	r19, Y+33	; 0x21
     f72:	4a a1       	ldd	r20, Y+34	; 0x22
     f74:	5b a1       	ldd	r21, Y+35	; 0x23
     f76:	0e 94 05 23 	call	0x460a	; 0x460a <__mulsf3>
     f7a:	9b 01       	movw	r18, r22
     f7c:	ac 01       	movw	r20, r24
     f7e:	c7 01       	movw	r24, r14
     f80:	b6 01       	movw	r22, r12
     f82:	0e 94 b6 21 	call	0x436c	; 0x436c <__addsf3>
     f86:	6c 87       	std	Y+12, r22	; 0x0c
     f88:	7d 87       	std	Y+13, r23	; 0x0d
     f8a:	8e 87       	std	Y+14, r24	; 0x0e
     f8c:	9f 87       	std	Y+15, r25	; 0x0f
	if(ch->I_err > integralErrorLimit)
     f8e:	6c 85       	ldd	r22, Y+12	; 0x0c
     f90:	7d 85       	ldd	r23, Y+13	; 0x0d
     f92:	8e 85       	ldd	r24, Y+14	; 0x0e
     f94:	9f 85       	ldd	r25, Y+15	; 0x0f
     f96:	20 e0       	ldi	r18, 0x00	; 0
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	40 e2       	ldi	r20, 0x20	; 32
     f9c:	51 e4       	ldi	r21, 0x41	; 65
     f9e:	0e 94 01 23 	call	0x4602	; 0x4602 <__gesf2>
     fa2:	18 16       	cp	r1, r24
     fa4:	64 f4       	brge	.+24     	; 0xfbe <__vector_7+0x4ca>
	{
		ch->I_err = integralErrorLimit;
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	a0 e2       	ldi	r26, 0x20	; 32
     fac:	b1 e4       	ldi	r27, 0x41	; 65
     fae:	80 93 16 02 	sts	0x0216, r24
     fb2:	90 93 17 02 	sts	0x0217, r25
     fb6:	a0 93 18 02 	sts	0x0218, r26
     fba:	b0 93 19 02 	sts	0x0219, r27
	}
	if(ch->I_err < -integralErrorLimit)
     fbe:	60 91 16 02 	lds	r22, 0x0216
     fc2:	70 91 17 02 	lds	r23, 0x0217
     fc6:	80 91 18 02 	lds	r24, 0x0218
     fca:	90 91 19 02 	lds	r25, 0x0219
     fce:	20 e0       	ldi	r18, 0x00	; 0
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	40 e2       	ldi	r20, 0x20	; 32
     fd4:	51 ec       	ldi	r21, 0xC1	; 193
     fd6:	0e 94 1a 22 	call	0x4434	; 0x4434 <__cmpsf2>
     fda:	88 23       	and	r24, r24
     fdc:	64 f4       	brge	.+24     	; 0xff6 <__vector_7+0x502>
	{
		ch->I_err = -integralErrorLimit;
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	a0 e2       	ldi	r26, 0x20	; 32
     fe4:	b1 ec       	ldi	r27, 0xC1	; 193
     fe6:	80 93 16 02 	sts	0x0216, r24
     fea:	90 93 17 02 	sts	0x0217, r25
     fee:	a0 93 18 02 	sts	0x0218, r26
     ff2:	b0 93 19 02 	sts	0x0219, r27
	}
	
	ch->D_err = (ch->TempError[CtrlErrorIdx] - ch->TempError[CtrlErrorHistIdx]) * ch->Dgain; // D error
     ff6:	e0 91 d0 02 	lds	r30, 0x02D0
     ffa:	f0 91 d1 02 	lds	r31, 0x02D1
     ffe:	ca e0       	ldi	r28, 0x0A	; 10
    1000:	d2 e0       	ldi	r29, 0x02	; 2
    1002:	ee 0f       	add	r30, r30
    1004:	ff 1f       	adc	r31, r31
    1006:	ee 0f       	add	r30, r30
    1008:	ff 1f       	adc	r31, r31
    100a:	ee 5c       	subi	r30, 0xCE	; 206
    100c:	fd 4f       	sbci	r31, 0xFD	; 253
    100e:	60 81       	ld	r22, Z
    1010:	71 81       	ldd	r23, Z+1	; 0x01
    1012:	82 81       	ldd	r24, Z+2	; 0x02
    1014:	93 81       	ldd	r25, Z+3	; 0x03
    1016:	e0 91 00 01 	lds	r30, 0x0100
    101a:	f0 91 01 01 	lds	r31, 0x0101
    101e:	ee 0f       	add	r30, r30
    1020:	ff 1f       	adc	r31, r31
    1022:	ee 0f       	add	r30, r30
    1024:	ff 1f       	adc	r31, r31
    1026:	ee 5c       	subi	r30, 0xCE	; 206
    1028:	fd 4f       	sbci	r31, 0xFD	; 253
    102a:	20 81       	ld	r18, Z
    102c:	31 81       	ldd	r19, Z+1	; 0x01
    102e:	42 81       	ldd	r20, Z+2	; 0x02
    1030:	53 81       	ldd	r21, Z+3	; 0x03
    1032:	cc a0       	ldd	r12, Y+36	; 0x24
    1034:	dd a0       	ldd	r13, Y+37	; 0x25
    1036:	ee a0       	ldd	r14, Y+38	; 0x26
    1038:	ff a0       	ldd	r15, Y+39	; 0x27
    103a:	0e 94 b5 21 	call	0x436a	; 0x436a <__subsf3>
    103e:	a7 01       	movw	r20, r14
    1040:	96 01       	movw	r18, r12
    1042:	0e 94 05 23 	call	0x460a	; 0x460a <__mulsf3>
    1046:	68 8b       	std	Y+16, r22	; 0x10
    1048:	79 8b       	std	Y+17, r23	; 0x11
    104a:	8a 8b       	std	Y+18, r24	; 0x12
    104c:	9b 8b       	std	Y+19, r25	; 0x13
	
	ch->Control_PID = ch->P_err + ch->I_err + ch->D_err;
    104e:	68 85       	ldd	r22, Y+8	; 0x08
    1050:	79 85       	ldd	r23, Y+9	; 0x09
    1052:	8a 85       	ldd	r24, Y+10	; 0x0a
    1054:	9b 85       	ldd	r25, Y+11	; 0x0b
    1056:	2c 85       	ldd	r18, Y+12	; 0x0c
    1058:	3d 85       	ldd	r19, Y+13	; 0x0d
    105a:	4e 85       	ldd	r20, Y+14	; 0x0e
    105c:	5f 85       	ldd	r21, Y+15	; 0x0f
    105e:	c8 88       	ldd	r12, Y+16	; 0x10
    1060:	d9 88       	ldd	r13, Y+17	; 0x11
    1062:	ea 88       	ldd	r14, Y+18	; 0x12
    1064:	fb 88       	ldd	r15, Y+19	; 0x13
    1066:	0e 94 b6 21 	call	0x436c	; 0x436c <__addsf3>
    106a:	a7 01       	movw	r20, r14
    106c:	96 01       	movw	r18, r12
    106e:	0e 94 b6 21 	call	0x436c	; 0x436c <__addsf3>
    1072:	68 8f       	std	Y+24, r22	; 0x18
    1074:	79 8f       	std	Y+25, r23	; 0x19
    1076:	8a 8f       	std	Y+26, r24	; 0x1a
    1078:	9b 8f       	std	Y+27, r25	; 0x1b
	ch->Control = ch->Control_PID; // + ch->TempSetPoint * (float)0.21 - 5;
    107a:	88 8d       	ldd	r24, Y+24	; 0x18
    107c:	99 8d       	ldd	r25, Y+25	; 0x19
    107e:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1080:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1082:	8c 8b       	std	Y+20, r24	; 0x14
    1084:	9d 8b       	std	Y+21, r25	; 0x15
    1086:	ae 8b       	std	Y+22, r26	; 0x16
    1088:	bf 8b       	std	Y+23, r27	; 0x17
	ch->pwm = (round(ch->Control));
    108a:	6c 89       	ldd	r22, Y+20	; 0x14
    108c:	7d 89       	ldd	r23, Y+21	; 0x15
    108e:	8e 89       	ldd	r24, Y+22	; 0x16
    1090:	9f 89       	ldd	r25, Y+23	; 0x17
    1092:	0e 94 68 23 	call	0x46d0	; 0x46d0 <round>
    1096:	0e 94 1e 22 	call	0x443c	; 0x443c <__fixsfsi>
    109a:	70 93 6b 02 	sts	0x026B, r23
    109e:	60 93 6a 02 	sts	0x026A, r22
	
	if(fabs(ch->TempError[CtrlErrorIdx]) > integralErrorActiveWindow)
    10a2:	e0 91 d0 02 	lds	r30, 0x02D0
    10a6:	f0 91 d1 02 	lds	r31, 0x02D1
    10aa:	ee 0f       	add	r30, r30
    10ac:	ff 1f       	adc	r31, r31
    10ae:	ee 0f       	add	r30, r30
    10b0:	ff 1f       	adc	r31, r31
    10b2:	ee 5c       	subi	r30, 0xCE	; 206
    10b4:	fd 4f       	sbci	r31, 0xFD	; 253
    10b6:	80 81       	ld	r24, Z
    10b8:	91 81       	ldd	r25, Z+1	; 0x01
    10ba:	a2 81       	ldd	r26, Z+2	; 0x02
    10bc:	b3 81       	ldd	r27, Z+3	; 0x03
    10be:	bc 01       	movw	r22, r24
    10c0:	cd 01       	movw	r24, r26
    10c2:	9f 77       	andi	r25, 0x7F	; 127
    10c4:	20 e0       	ldi	r18, 0x00	; 0
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	40 ea       	ldi	r20, 0xA0	; 160
    10ca:	50 e4       	ldi	r21, 0x40	; 64
    10cc:	0e 94 01 23 	call	0x4602	; 0x4602 <__gesf2>
    10d0:	18 16       	cp	r1, r24
    10d2:	44 f4       	brge	.+16     	; 0x10e4 <__vector_7+0x5f0>
	{
		ch->I_err = 0;														// Avoid integral wind-up
    10d4:	10 92 16 02 	sts	0x0216, r1
    10d8:	10 92 17 02 	sts	0x0217, r1
    10dc:	10 92 18 02 	sts	0x0218, r1
    10e0:	10 92 19 02 	sts	0x0219, r1
	}
	
	if(fabs(ch->TempError[CtrlErrorIdx]) <= ch->tempErrorWin)				// Temperature settle window
    10e4:	e0 91 d0 02 	lds	r30, 0x02D0
    10e8:	f0 91 d1 02 	lds	r31, 0x02D1
    10ec:	ee 0f       	add	r30, r30
    10ee:	ff 1f       	adc	r31, r31
    10f0:	ee 0f       	add	r30, r30
    10f2:	ff 1f       	adc	r31, r31
    10f4:	ee 5c       	subi	r30, 0xCE	; 206
    10f6:	fd 4f       	sbci	r31, 0xFD	; 253
    10f8:	80 81       	ld	r24, Z
    10fa:	91 81       	ldd	r25, Z+1	; 0x01
    10fc:	a2 81       	ldd	r26, Z+2	; 0x02
    10fe:	b3 81       	ldd	r27, Z+3	; 0x03
    1100:	20 91 5e 02 	lds	r18, 0x025E
    1104:	30 91 5f 02 	lds	r19, 0x025F
    1108:	40 91 60 02 	lds	r20, 0x0260
    110c:	50 91 61 02 	lds	r21, 0x0261
    1110:	bc 01       	movw	r22, r24
    1112:	cd 01       	movw	r24, r26
    1114:	9f 77       	andi	r25, 0x7F	; 127
    1116:	0e 94 1a 22 	call	0x4434	; 0x4434 <__cmpsf2>
    111a:	18 16       	cp	r1, r24
    111c:	14 f1       	brlt	.+68     	; 0x1162 <__vector_7+0x66e>
	{
		ch->tempSettleCnt ++;
    111e:	e2 e6       	ldi	r30, 0x62	; 98
    1120:	f2 e0       	ldi	r31, 0x02	; 2
    1122:	80 81       	ld	r24, Z
    1124:	91 81       	ldd	r25, Z+1	; 0x01
    1126:	01 96       	adiw	r24, 0x01	; 1
    1128:	91 83       	std	Z+1, r25	; 0x01
    112a:	80 83       	st	Z, r24
		if(ch->tempSettleCnt >= (int)(ch->tempSettleTime * 61))
    112c:	20 81       	ld	r18, Z
    112e:	31 81       	ldd	r19, Z+1	; 0x01
    1130:	40 91 64 02 	lds	r20, 0x0264
    1134:	50 91 65 02 	lds	r21, 0x0265
    1138:	6d e3       	ldi	r22, 0x3D	; 61
    113a:	64 9f       	mul	r22, r20
    113c:	c0 01       	movw	r24, r0
    113e:	65 9f       	mul	r22, r21
    1140:	90 0d       	add	r25, r0
    1142:	11 24       	eor	r1, r1
    1144:	28 17       	cp	r18, r24
    1146:	39 07       	cpc	r19, r25
    1148:	a4 f0       	brlt	.+40     	; 0x1172 <__vector_7+0x67e>
		{
			ch->tempStable = 1;
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	90 93 67 02 	sts	0x0267, r25
    1152:	80 93 66 02 	sts	0x0266, r24
			ch->tempSettleCnt --;
    1156:	80 81       	ld	r24, Z
    1158:	91 81       	ldd	r25, Z+1	; 0x01
    115a:	01 97       	sbiw	r24, 0x01	; 1
    115c:	91 83       	std	Z+1, r25	; 0x01
    115e:	80 83       	st	Z, r24
    1160:	08 c0       	rjmp	.+16     	; 0x1172 <__vector_7+0x67e>
		}			
	}
	else
	{
		ch->tempSettleCnt = 0;
    1162:	10 92 63 02 	sts	0x0263, r1
    1166:	10 92 62 02 	sts	0x0262, r1
		ch->tempStable = 0;
    116a:	10 92 67 02 	sts	0x0267, r1
    116e:	10 92 66 02 	sts	0x0266, r1
		case 2:
		PORTD &= 0b11011111;	// Set CS2 low
		break;
				
		case 3:
		PORTD &= 0b10111111;	// Set CS3 low
    1172:	5e 98       	cbi	0x0b, 6	; 11
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    1178:	0d b4       	in	r0, 0x2d	; 45
    117a:	07 fe       	sbrs	r0, 7
    117c:	fd cf       	rjmp	.-6      	; 0x1178 <__vector_7+0x684>
	byteword=SPDR;				//just for clearing SPIF
    117e:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
    1180:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    1182:	0d b4       	in	r0, 0x2d	; 45
    1184:	07 fe       	sbrs	r0, 7
    1186:	fd cf       	rjmp	.-6      	; 0x1182 <__vector_7+0x68e>
	byteword=SPDR;
    1188:	9e b5       	in	r25, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
    118a:	8b b1       	in	r24, 0x0b	; 11
    118c:	80 6f       	ori	r24, 0xF0	; 240
    118e:	8b b9       	out	0x0b, r24	; 11
		case 2:
		PORTD &= 0b11011111;	// Set CS2 low
		break;
				
		case 3:
		PORTD &= 0b10111111;	// Set CS3 low
    1190:	5e 98       	cbi	0x0b, 6	; 11
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
    1192:	82 e0       	ldi	r24, 0x02	; 2
    1194:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    1196:	0d b4       	in	r0, 0x2d	; 45
    1198:	07 fe       	sbrs	r0, 7
    119a:	fd cf       	rjmp	.-6      	; 0x1196 <__vector_7+0x6a2>
	byteword=SPDR;				//just for clearing SPIF
    119c:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
    119e:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    11a0:	0d b4       	in	r0, 0x2d	; 45
    11a2:	07 fe       	sbrs	r0, 7
    11a4:	fd cf       	rjmp	.-6      	; 0x11a0 <__vector_7+0x6ac>
	byteword=SPDR;
    11a6:	6e b5       	in	r22, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
    11a8:	8b b1       	in	r24, 0x0b	; 11
    11aa:	80 6f       	ori	r24, 0xF0	; 240
    11ac:	8b b9       	out	0x0b, r24	; 11
	uint8_t u8_msb = 0;
	uint8_t u8_lsb = 0;
	
	u8_msb = SPIread(0x01, ch);
	u8_lsb = SPIread(0x02, ch);
	adc_code = (((u8_msb << 8) | u8_lsb) >> 1);
    11ae:	70 e0       	ldi	r23, 0x00	; 0
    11b0:	79 2b       	or	r23, r25
    11b2:	75 95       	asr	r23
    11b4:	67 95       	ror	r22
	return ((float)adc_code / 32.0 - 256.0);
    11b6:	07 2e       	mov	r0, r23
    11b8:	00 0c       	add	r0, r0
    11ba:	88 0b       	sbc	r24, r24
    11bc:	99 0b       	sbc	r25, r25
    11be:	0e 94 51 22 	call	0x44a2	; 0x44a2 <__floatsisf>
    11c2:	20 e0       	ldi	r18, 0x00	; 0
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	40 e0       	ldi	r20, 0x00	; 0
    11c8:	5d e3       	ldi	r21, 0x3D	; 61
    11ca:	0e 94 05 23 	call	0x460a	; 0x460a <__mulsf3>
    11ce:	20 e0       	ldi	r18, 0x00	; 0
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	40 e8       	ldi	r20, 0x80	; 128
    11d4:	53 e4       	ldi	r21, 0x43	; 67
    11d6:	0e 94 b5 21 	call	0x436a	; 0x436a <__subsf3>
	PORTD &= 0b11110111;						// Turn off LED on PCB (Irq call freq: 16MHz / 1024 / 255 = 61.3 Hz )
}

static inline void PIDctrl(channel *ch, int tempSensor)
{
	ch->TempSensor = ReadTempSensor(tempSensor);
    11da:	e7 ea       	ldi	r30, 0xA7	; 167
    11dc:	f1 e0       	ldi	r31, 0x01	; 1
    11de:	64 83       	std	Z+4, r22	; 0x04
    11e0:	75 83       	std	Z+5, r23	; 0x05
    11e2:	86 83       	std	Z+6, r24	; 0x06
    11e4:	97 83       	std	Z+7, r25	; 0x07
	if(ch->TempSensor > (float)maxAllowedTemp)								// Max temperature limit
    11e6:	64 81       	ldd	r22, Z+4	; 0x04
    11e8:	75 81       	ldd	r23, Z+5	; 0x05
    11ea:	86 81       	ldd	r24, Z+6	; 0x06
    11ec:	97 81       	ldd	r25, Z+7	; 0x07
    11ee:	20 e0       	ldi	r18, 0x00	; 0
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	40 ef       	ldi	r20, 0xF0	; 240
    11f4:	52 e4       	ldi	r21, 0x42	; 66
    11f6:	0e 94 01 23 	call	0x4602	; 0x4602 <__gesf2>
    11fa:	18 16       	cp	r1, r24
    11fc:	2c f4       	brge	.+10     	; 0x1208 <__vector_7+0x714>
	{
		ch->heaterEnable = false;
    11fe:	10 92 09 02 	sts	0x0209, r1
		PORTC &= allHeaterOff;
    1202:	88 b1       	in	r24, 0x08	; 8
    1204:	80 7f       	andi	r24, 0xF0	; 240
    1206:	88 b9       	out	0x08, r24	; 8
	}

	ch->TempError[CtrlErrorIdx] = ch->TempSetPoint - ch->TempSensor;		// Control error
    1208:	00 91 d0 02 	lds	r16, 0x02D0
    120c:	10 91 d1 02 	lds	r17, 0x02D1
    1210:	c7 ea       	ldi	r28, 0xA7	; 167
    1212:	d1 e0       	ldi	r29, 0x01	; 1
    1214:	68 81       	ld	r22, Y
    1216:	79 81       	ldd	r23, Y+1	; 0x01
    1218:	8a 81       	ldd	r24, Y+2	; 0x02
    121a:	9b 81       	ldd	r25, Y+3	; 0x03
    121c:	2c 81       	ldd	r18, Y+4	; 0x04
    121e:	3d 81       	ldd	r19, Y+5	; 0x05
    1220:	4e 81       	ldd	r20, Y+6	; 0x06
    1222:	5f 81       	ldd	r21, Y+7	; 0x07
    1224:	0e 94 b5 21 	call	0x436a	; 0x436a <__subsf3>
    1228:	00 0f       	add	r16, r16
    122a:	11 1f       	adc	r17, r17
    122c:	00 0f       	add	r16, r16
    122e:	11 1f       	adc	r17, r17
    1230:	f8 01       	movw	r30, r16
    1232:	e1 53       	subi	r30, 0x31	; 49
    1234:	fe 4f       	sbci	r31, 0xFE	; 254
    1236:	60 83       	st	Z, r22
    1238:	71 83       	std	Z+1, r23	; 0x01
    123a:	82 83       	std	Z+2, r24	; 0x02
    123c:	93 83       	std	Z+3, r25	; 0x03
	
	ch->P_err = ch->TempError[CtrlErrorIdx] * ch->Pgain;					// P error
    123e:	e0 91 d0 02 	lds	r30, 0x02D0
    1242:	f0 91 d1 02 	lds	r31, 0x02D1
    1246:	ee 0f       	add	r30, r30
    1248:	ff 1f       	adc	r31, r31
    124a:	ee 0f       	add	r30, r30
    124c:	ff 1f       	adc	r31, r31
    124e:	e1 53       	subi	r30, 0x31	; 49
    1250:	fe 4f       	sbci	r31, 0xFE	; 254
    1252:	60 81       	ld	r22, Z
    1254:	71 81       	ldd	r23, Z+1	; 0x01
    1256:	82 81       	ldd	r24, Z+2	; 0x02
    1258:	93 81       	ldd	r25, Z+3	; 0x03
    125a:	2c 8d       	ldd	r18, Y+28	; 0x1c
    125c:	3d 8d       	ldd	r19, Y+29	; 0x1d
    125e:	4e 8d       	ldd	r20, Y+30	; 0x1e
    1260:	5f 8d       	ldd	r21, Y+31	; 0x1f
    1262:	0e 94 05 23 	call	0x460a	; 0x460a <__mulsf3>
    1266:	68 87       	std	Y+8, r22	; 0x08
    1268:	79 87       	std	Y+9, r23	; 0x09
    126a:	8a 87       	std	Y+10, r24	; 0x0a
    126c:	9b 87       	std	Y+11, r25	; 0x0b
	ch->I_err = ch->I_err + (ch->TempError[CtrlErrorIdx] * ch->Igain);		// I error
    126e:	cc 84       	ldd	r12, Y+12	; 0x0c
    1270:	dd 84       	ldd	r13, Y+13	; 0x0d
    1272:	ee 84       	ldd	r14, Y+14	; 0x0e
    1274:	ff 84       	ldd	r15, Y+15	; 0x0f
    1276:	e0 91 d0 02 	lds	r30, 0x02D0
    127a:	f0 91 d1 02 	lds	r31, 0x02D1
    127e:	ee 0f       	add	r30, r30
    1280:	ff 1f       	adc	r31, r31
    1282:	ee 0f       	add	r30, r30
    1284:	ff 1f       	adc	r31, r31
    1286:	e1 53       	subi	r30, 0x31	; 49
    1288:	fe 4f       	sbci	r31, 0xFE	; 254
    128a:	60 81       	ld	r22, Z
    128c:	71 81       	ldd	r23, Z+1	; 0x01
    128e:	82 81       	ldd	r24, Z+2	; 0x02
    1290:	93 81       	ldd	r25, Z+3	; 0x03
    1292:	28 a1       	ldd	r18, Y+32	; 0x20
    1294:	39 a1       	ldd	r19, Y+33	; 0x21
    1296:	4a a1       	ldd	r20, Y+34	; 0x22
    1298:	5b a1       	ldd	r21, Y+35	; 0x23
    129a:	0e 94 05 23 	call	0x460a	; 0x460a <__mulsf3>
    129e:	9b 01       	movw	r18, r22
    12a0:	ac 01       	movw	r20, r24
    12a2:	c7 01       	movw	r24, r14
    12a4:	b6 01       	movw	r22, r12
    12a6:	0e 94 b6 21 	call	0x436c	; 0x436c <__addsf3>
    12aa:	6c 87       	std	Y+12, r22	; 0x0c
    12ac:	7d 87       	std	Y+13, r23	; 0x0d
    12ae:	8e 87       	std	Y+14, r24	; 0x0e
    12b0:	9f 87       	std	Y+15, r25	; 0x0f
	if(ch->I_err > integralErrorLimit)
    12b2:	6c 85       	ldd	r22, Y+12	; 0x0c
    12b4:	7d 85       	ldd	r23, Y+13	; 0x0d
    12b6:	8e 85       	ldd	r24, Y+14	; 0x0e
    12b8:	9f 85       	ldd	r25, Y+15	; 0x0f
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	40 e2       	ldi	r20, 0x20	; 32
    12c0:	51 e4       	ldi	r21, 0x41	; 65
    12c2:	0e 94 01 23 	call	0x4602	; 0x4602 <__gesf2>
    12c6:	18 16       	cp	r1, r24
    12c8:	64 f4       	brge	.+24     	; 0x12e2 <__vector_7+0x7ee>
	{
		ch->I_err = integralErrorLimit;
    12ca:	80 e0       	ldi	r24, 0x00	; 0
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	a0 e2       	ldi	r26, 0x20	; 32
    12d0:	b1 e4       	ldi	r27, 0x41	; 65
    12d2:	80 93 b3 01 	sts	0x01B3, r24
    12d6:	90 93 b4 01 	sts	0x01B4, r25
    12da:	a0 93 b5 01 	sts	0x01B5, r26
    12de:	b0 93 b6 01 	sts	0x01B6, r27
	}
	if(ch->I_err < -integralErrorLimit)
    12e2:	60 91 b3 01 	lds	r22, 0x01B3
    12e6:	70 91 b4 01 	lds	r23, 0x01B4
    12ea:	80 91 b5 01 	lds	r24, 0x01B5
    12ee:	90 91 b6 01 	lds	r25, 0x01B6
    12f2:	20 e0       	ldi	r18, 0x00	; 0
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	40 e2       	ldi	r20, 0x20	; 32
    12f8:	51 ec       	ldi	r21, 0xC1	; 193
    12fa:	0e 94 1a 22 	call	0x4434	; 0x4434 <__cmpsf2>
    12fe:	88 23       	and	r24, r24
    1300:	64 f4       	brge	.+24     	; 0x131a <__vector_7+0x826>
	{
		ch->I_err = -integralErrorLimit;
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	a0 e2       	ldi	r26, 0x20	; 32
    1308:	b1 ec       	ldi	r27, 0xC1	; 193
    130a:	80 93 b3 01 	sts	0x01B3, r24
    130e:	90 93 b4 01 	sts	0x01B4, r25
    1312:	a0 93 b5 01 	sts	0x01B5, r26
    1316:	b0 93 b6 01 	sts	0x01B6, r27
	}
	
	ch->D_err = (ch->TempError[CtrlErrorIdx] - ch->TempError[CtrlErrorHistIdx]) * ch->Dgain; // D error
    131a:	e0 91 d0 02 	lds	r30, 0x02D0
    131e:	f0 91 d1 02 	lds	r31, 0x02D1
    1322:	c7 ea       	ldi	r28, 0xA7	; 167
    1324:	d1 e0       	ldi	r29, 0x01	; 1
    1326:	ee 0f       	add	r30, r30
    1328:	ff 1f       	adc	r31, r31
    132a:	ee 0f       	add	r30, r30
    132c:	ff 1f       	adc	r31, r31
    132e:	e1 53       	subi	r30, 0x31	; 49
    1330:	fe 4f       	sbci	r31, 0xFE	; 254
    1332:	60 81       	ld	r22, Z
    1334:	71 81       	ldd	r23, Z+1	; 0x01
    1336:	82 81       	ldd	r24, Z+2	; 0x02
    1338:	93 81       	ldd	r25, Z+3	; 0x03
    133a:	e0 91 00 01 	lds	r30, 0x0100
    133e:	f0 91 01 01 	lds	r31, 0x0101
    1342:	ee 0f       	add	r30, r30
    1344:	ff 1f       	adc	r31, r31
    1346:	ee 0f       	add	r30, r30
    1348:	ff 1f       	adc	r31, r31
    134a:	e1 53       	subi	r30, 0x31	; 49
    134c:	fe 4f       	sbci	r31, 0xFE	; 254
    134e:	20 81       	ld	r18, Z
    1350:	31 81       	ldd	r19, Z+1	; 0x01
    1352:	42 81       	ldd	r20, Z+2	; 0x02
    1354:	53 81       	ldd	r21, Z+3	; 0x03
    1356:	cc a0       	ldd	r12, Y+36	; 0x24
    1358:	dd a0       	ldd	r13, Y+37	; 0x25
    135a:	ee a0       	ldd	r14, Y+38	; 0x26
    135c:	ff a0       	ldd	r15, Y+39	; 0x27
    135e:	0e 94 b5 21 	call	0x436a	; 0x436a <__subsf3>
    1362:	a7 01       	movw	r20, r14
    1364:	96 01       	movw	r18, r12
    1366:	0e 94 05 23 	call	0x460a	; 0x460a <__mulsf3>
    136a:	68 8b       	std	Y+16, r22	; 0x10
    136c:	79 8b       	std	Y+17, r23	; 0x11
    136e:	8a 8b       	std	Y+18, r24	; 0x12
    1370:	9b 8b       	std	Y+19, r25	; 0x13
	
	ch->Control_PID = ch->P_err + ch->I_err + ch->D_err;
    1372:	68 85       	ldd	r22, Y+8	; 0x08
    1374:	79 85       	ldd	r23, Y+9	; 0x09
    1376:	8a 85       	ldd	r24, Y+10	; 0x0a
    1378:	9b 85       	ldd	r25, Y+11	; 0x0b
    137a:	2c 85       	ldd	r18, Y+12	; 0x0c
    137c:	3d 85       	ldd	r19, Y+13	; 0x0d
    137e:	4e 85       	ldd	r20, Y+14	; 0x0e
    1380:	5f 85       	ldd	r21, Y+15	; 0x0f
    1382:	c8 88       	ldd	r12, Y+16	; 0x10
    1384:	d9 88       	ldd	r13, Y+17	; 0x11
    1386:	ea 88       	ldd	r14, Y+18	; 0x12
    1388:	fb 88       	ldd	r15, Y+19	; 0x13
    138a:	0e 94 b6 21 	call	0x436c	; 0x436c <__addsf3>
    138e:	a7 01       	movw	r20, r14
    1390:	96 01       	movw	r18, r12
    1392:	0e 94 b6 21 	call	0x436c	; 0x436c <__addsf3>
    1396:	68 8f       	std	Y+24, r22	; 0x18
    1398:	79 8f       	std	Y+25, r23	; 0x19
    139a:	8a 8f       	std	Y+26, r24	; 0x1a
    139c:	9b 8f       	std	Y+27, r25	; 0x1b
	ch->Control = ch->Control_PID; // + ch->TempSetPoint * (float)0.21 - 5;
    139e:	88 8d       	ldd	r24, Y+24	; 0x18
    13a0:	99 8d       	ldd	r25, Y+25	; 0x19
    13a2:	aa 8d       	ldd	r26, Y+26	; 0x1a
    13a4:	bb 8d       	ldd	r27, Y+27	; 0x1b
    13a6:	8c 8b       	std	Y+20, r24	; 0x14
    13a8:	9d 8b       	std	Y+21, r25	; 0x15
    13aa:	ae 8b       	std	Y+22, r26	; 0x16
    13ac:	bf 8b       	std	Y+23, r27	; 0x17
	ch->pwm = (round(ch->Control));
    13ae:	6c 89       	ldd	r22, Y+20	; 0x14
    13b0:	7d 89       	ldd	r23, Y+21	; 0x15
    13b2:	8e 89       	ldd	r24, Y+22	; 0x16
    13b4:	9f 89       	ldd	r25, Y+23	; 0x17
    13b6:	0e 94 68 23 	call	0x46d0	; 0x46d0 <round>
    13ba:	0e 94 1e 22 	call	0x443c	; 0x443c <__fixsfsi>
    13be:	70 93 08 02 	sts	0x0208, r23
    13c2:	60 93 07 02 	sts	0x0207, r22
	
	if(fabs(ch->TempError[CtrlErrorIdx]) > integralErrorActiveWindow)
    13c6:	e0 91 d0 02 	lds	r30, 0x02D0
    13ca:	f0 91 d1 02 	lds	r31, 0x02D1
    13ce:	ee 0f       	add	r30, r30
    13d0:	ff 1f       	adc	r31, r31
    13d2:	ee 0f       	add	r30, r30
    13d4:	ff 1f       	adc	r31, r31
    13d6:	e1 53       	subi	r30, 0x31	; 49
    13d8:	fe 4f       	sbci	r31, 0xFE	; 254
    13da:	80 81       	ld	r24, Z
    13dc:	91 81       	ldd	r25, Z+1	; 0x01
    13de:	a2 81       	ldd	r26, Z+2	; 0x02
    13e0:	b3 81       	ldd	r27, Z+3	; 0x03
    13e2:	bc 01       	movw	r22, r24
    13e4:	cd 01       	movw	r24, r26
    13e6:	9f 77       	andi	r25, 0x7F	; 127
    13e8:	20 e0       	ldi	r18, 0x00	; 0
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	40 ea       	ldi	r20, 0xA0	; 160
    13ee:	50 e4       	ldi	r21, 0x40	; 64
    13f0:	0e 94 01 23 	call	0x4602	; 0x4602 <__gesf2>
    13f4:	18 16       	cp	r1, r24
    13f6:	44 f4       	brge	.+16     	; 0x1408 <__vector_7+0x914>
	{
		ch->I_err = 0;														// Avoid integral wind-up
    13f8:	10 92 b3 01 	sts	0x01B3, r1
    13fc:	10 92 b4 01 	sts	0x01B4, r1
    1400:	10 92 b5 01 	sts	0x01B5, r1
    1404:	10 92 b6 01 	sts	0x01B6, r1
	}
	
	if(fabs(ch->TempError[CtrlErrorIdx]) <= ch->tempErrorWin)				// Temperature settle window
    1408:	e0 91 d0 02 	lds	r30, 0x02D0
    140c:	f0 91 d1 02 	lds	r31, 0x02D1
    1410:	ee 0f       	add	r30, r30
    1412:	ff 1f       	adc	r31, r31
    1414:	ee 0f       	add	r30, r30
    1416:	ff 1f       	adc	r31, r31
    1418:	e1 53       	subi	r30, 0x31	; 49
    141a:	fe 4f       	sbci	r31, 0xFE	; 254
    141c:	80 81       	ld	r24, Z
    141e:	91 81       	ldd	r25, Z+1	; 0x01
    1420:	a2 81       	ldd	r26, Z+2	; 0x02
    1422:	b3 81       	ldd	r27, Z+3	; 0x03
    1424:	20 91 fb 01 	lds	r18, 0x01FB
    1428:	30 91 fc 01 	lds	r19, 0x01FC
    142c:	40 91 fd 01 	lds	r20, 0x01FD
    1430:	50 91 fe 01 	lds	r21, 0x01FE
    1434:	bc 01       	movw	r22, r24
    1436:	cd 01       	movw	r24, r26
    1438:	9f 77       	andi	r25, 0x7F	; 127
    143a:	0e 94 1a 22 	call	0x4434	; 0x4434 <__cmpsf2>
    143e:	18 16       	cp	r1, r24
    1440:	14 f1       	brlt	.+68     	; 0x1486 <__vector_7+0x992>
	{
		ch->tempSettleCnt ++;
    1442:	ef ef       	ldi	r30, 0xFF	; 255
    1444:	f1 e0       	ldi	r31, 0x01	; 1
    1446:	80 81       	ld	r24, Z
    1448:	91 81       	ldd	r25, Z+1	; 0x01
    144a:	01 96       	adiw	r24, 0x01	; 1
    144c:	91 83       	std	Z+1, r25	; 0x01
    144e:	80 83       	st	Z, r24
		if(ch->tempSettleCnt >= (int)(ch->tempSettleTime * 61))
    1450:	20 81       	ld	r18, Z
    1452:	31 81       	ldd	r19, Z+1	; 0x01
    1454:	40 91 01 02 	lds	r20, 0x0201
    1458:	50 91 02 02 	lds	r21, 0x0202
    145c:	6d e3       	ldi	r22, 0x3D	; 61
    145e:	64 9f       	mul	r22, r20
    1460:	c0 01       	movw	r24, r0
    1462:	65 9f       	mul	r22, r21
    1464:	90 0d       	add	r25, r0
    1466:	11 24       	eor	r1, r1
    1468:	28 17       	cp	r18, r24
    146a:	39 07       	cpc	r19, r25
    146c:	a4 f0       	brlt	.+40     	; 0x1496 <__vector_7+0x9a2>
		{
			ch->tempStable = 1;
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	90 93 04 02 	sts	0x0204, r25
    1476:	80 93 03 02 	sts	0x0203, r24
			ch->tempSettleCnt --;
    147a:	80 81       	ld	r24, Z
    147c:	91 81       	ldd	r25, Z+1	; 0x01
    147e:	01 97       	sbiw	r24, 0x01	; 1
    1480:	91 83       	std	Z+1, r25	; 0x01
    1482:	80 83       	st	Z, r24
    1484:	08 c0       	rjmp	.+16     	; 0x1496 <__vector_7+0x9a2>
		}			
	}
	else
	{
		ch->tempSettleCnt = 0;
    1486:	10 92 00 02 	sts	0x0200, r1
    148a:	10 92 ff 01 	sts	0x01FF, r1
		ch->tempStable = 0;
    148e:	10 92 04 02 	sts	0x0204, r1
    1492:	10 92 03 02 	sts	0x0203, r1
		case 3:
		PORTD &= 0b10111111;	// Set CS3 low
		break;
						
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
    1496:	5f 98       	cbi	0x0b, 7	; 11
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    149c:	0d b4       	in	r0, 0x2d	; 45
    149e:	07 fe       	sbrs	r0, 7
    14a0:	fd cf       	rjmp	.-6      	; 0x149c <__vector_7+0x9a8>
	byteword=SPDR;				//just for clearing SPIF
    14a2:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
    14a4:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    14a6:	0d b4       	in	r0, 0x2d	; 45
    14a8:	07 fe       	sbrs	r0, 7
    14aa:	fd cf       	rjmp	.-6      	; 0x14a6 <__vector_7+0x9b2>
	byteword=SPDR;
    14ac:	9e b5       	in	r25, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
    14ae:	8b b1       	in	r24, 0x0b	; 11
    14b0:	80 6f       	ori	r24, 0xF0	; 240
    14b2:	8b b9       	out	0x0b, r24	; 11
		case 3:
		PORTD &= 0b10111111;	// Set CS3 low
		break;
						
		case 4:
		PORTD &= 0b01111111;	// Set CS4 low
    14b4:	5f 98       	cbi	0x0b, 7	; 11
		break;
	}
	//delay_us(1);
	SPDR = byteword;			// put the byteword into data register
    14b6:	82 e0       	ldi	r24, 0x02	; 2
    14b8:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    14ba:	0d b4       	in	r0, 0x2d	; 45
    14bc:	07 fe       	sbrs	r0, 7
    14be:	fd cf       	rjmp	.-6      	; 0x14ba <__vector_7+0x9c6>
	byteword=SPDR;				//just for clearing SPIF
    14c0:	8e b5       	in	r24, 0x2e	; 46
	
	SPDR = 0x00;			// put the byteword into data register
    14c2:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    14c4:	0d b4       	in	r0, 0x2d	; 45
    14c6:	07 fe       	sbrs	r0, 7
    14c8:	fd cf       	rjmp	.-6      	; 0x14c4 <__vector_7+0x9d0>
	byteword=SPDR;
    14ca:	6e b5       	in	r22, 0x2e	; 46
	
	PORTD |= 0b11110000;	// Set all CS High
    14cc:	8b b1       	in	r24, 0x0b	; 11
    14ce:	80 6f       	ori	r24, 0xF0	; 240
    14d0:	8b b9       	out	0x0b, r24	; 11
	uint8_t u8_msb = 0;
	uint8_t u8_lsb = 0;
	
	u8_msb = SPIread(0x01, ch);
	u8_lsb = SPIread(0x02, ch);
	adc_code = (((u8_msb << 8) | u8_lsb) >> 1);
    14d2:	70 e0       	ldi	r23, 0x00	; 0
    14d4:	79 2b       	or	r23, r25
    14d6:	75 95       	asr	r23
    14d8:	67 95       	ror	r22
	return ((float)adc_code / 32.0 - 256.0);
    14da:	07 2e       	mov	r0, r23
    14dc:	00 0c       	add	r0, r0
    14de:	88 0b       	sbc	r24, r24
    14e0:	99 0b       	sbc	r25, r25
    14e2:	0e 94 51 22 	call	0x44a2	; 0x44a2 <__floatsisf>
    14e6:	20 e0       	ldi	r18, 0x00	; 0
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	40 e0       	ldi	r20, 0x00	; 0
    14ec:	5d e3       	ldi	r21, 0x3D	; 61
    14ee:	0e 94 05 23 	call	0x460a	; 0x460a <__mulsf3>
    14f2:	20 e0       	ldi	r18, 0x00	; 0
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	40 e8       	ldi	r20, 0x80	; 128
    14f8:	53 e4       	ldi	r21, 0x43	; 67
    14fa:	0e 94 b5 21 	call	0x436a	; 0x436a <__subsf3>
	PORTD &= 0b11110111;						// Turn off LED on PCB (Irq call freq: 16MHz / 1024 / 255 = 61.3 Hz )
}

static inline void PIDctrl(channel *ch, int tempSensor)
{
	ch->TempSensor = ReadTempSensor(tempSensor);
    14fe:	e4 e4       	ldi	r30, 0x44	; 68
    1500:	f1 e0       	ldi	r31, 0x01	; 1
    1502:	64 83       	std	Z+4, r22	; 0x04
    1504:	75 83       	std	Z+5, r23	; 0x05
    1506:	86 83       	std	Z+6, r24	; 0x06
    1508:	97 83       	std	Z+7, r25	; 0x07
	if(ch->TempSensor > (float)maxAllowedTemp)								// Max temperature limit
    150a:	64 81       	ldd	r22, Z+4	; 0x04
    150c:	75 81       	ldd	r23, Z+5	; 0x05
    150e:	86 81       	ldd	r24, Z+6	; 0x06
    1510:	97 81       	ldd	r25, Z+7	; 0x07
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	40 ef       	ldi	r20, 0xF0	; 240
    1518:	52 e4       	ldi	r21, 0x42	; 66
    151a:	0e 94 01 23 	call	0x4602	; 0x4602 <__gesf2>
    151e:	18 16       	cp	r1, r24
    1520:	2c f4       	brge	.+10     	; 0x152c <__vector_7+0xa38>
	{
		ch->heaterEnable = false;
    1522:	10 92 a6 01 	sts	0x01A6, r1
		PORTC &= allHeaterOff;
    1526:	88 b1       	in	r24, 0x08	; 8
    1528:	80 7f       	andi	r24, 0xF0	; 240
    152a:	88 b9       	out	0x08, r24	; 8
	}

	ch->TempError[CtrlErrorIdx] = ch->TempSetPoint - ch->TempSensor;		// Control error
    152c:	00 91 d0 02 	lds	r16, 0x02D0
    1530:	10 91 d1 02 	lds	r17, 0x02D1
    1534:	c4 e4       	ldi	r28, 0x44	; 68
    1536:	d1 e0       	ldi	r29, 0x01	; 1
    1538:	68 81       	ld	r22, Y
    153a:	79 81       	ldd	r23, Y+1	; 0x01
    153c:	8a 81       	ldd	r24, Y+2	; 0x02
    153e:	9b 81       	ldd	r25, Y+3	; 0x03
    1540:	2c 81       	ldd	r18, Y+4	; 0x04
    1542:	3d 81       	ldd	r19, Y+5	; 0x05
    1544:	4e 81       	ldd	r20, Y+6	; 0x06
    1546:	5f 81       	ldd	r21, Y+7	; 0x07
    1548:	0e 94 b5 21 	call	0x436a	; 0x436a <__subsf3>
    154c:	00 0f       	add	r16, r16
    154e:	11 1f       	adc	r17, r17
    1550:	00 0f       	add	r16, r16
    1552:	11 1f       	adc	r17, r17
    1554:	f8 01       	movw	r30, r16
    1556:	e4 59       	subi	r30, 0x94	; 148
    1558:	fe 4f       	sbci	r31, 0xFE	; 254
    155a:	60 83       	st	Z, r22
    155c:	71 83       	std	Z+1, r23	; 0x01
    155e:	82 83       	std	Z+2, r24	; 0x02
    1560:	93 83       	std	Z+3, r25	; 0x03
	
	ch->P_err = ch->TempError[CtrlErrorIdx] * ch->Pgain;					// P error
    1562:	e0 91 d0 02 	lds	r30, 0x02D0
    1566:	f0 91 d1 02 	lds	r31, 0x02D1
    156a:	ee 0f       	add	r30, r30
    156c:	ff 1f       	adc	r31, r31
    156e:	ee 0f       	add	r30, r30
    1570:	ff 1f       	adc	r31, r31
    1572:	e4 59       	subi	r30, 0x94	; 148
    1574:	fe 4f       	sbci	r31, 0xFE	; 254
    1576:	60 81       	ld	r22, Z
    1578:	71 81       	ldd	r23, Z+1	; 0x01
    157a:	82 81       	ldd	r24, Z+2	; 0x02
    157c:	93 81       	ldd	r25, Z+3	; 0x03
    157e:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1580:	3d 8d       	ldd	r19, Y+29	; 0x1d
    1582:	4e 8d       	ldd	r20, Y+30	; 0x1e
    1584:	5f 8d       	ldd	r21, Y+31	; 0x1f
    1586:	0e 94 05 23 	call	0x460a	; 0x460a <__mulsf3>
    158a:	68 87       	std	Y+8, r22	; 0x08
    158c:	79 87       	std	Y+9, r23	; 0x09
    158e:	8a 87       	std	Y+10, r24	; 0x0a
    1590:	9b 87       	std	Y+11, r25	; 0x0b
	ch->I_err = ch->I_err + (ch->TempError[CtrlErrorIdx] * ch->Igain);		// I error
    1592:	cc 84       	ldd	r12, Y+12	; 0x0c
    1594:	dd 84       	ldd	r13, Y+13	; 0x0d
    1596:	ee 84       	ldd	r14, Y+14	; 0x0e
    1598:	ff 84       	ldd	r15, Y+15	; 0x0f
    159a:	e0 91 d0 02 	lds	r30, 0x02D0
    159e:	f0 91 d1 02 	lds	r31, 0x02D1
    15a2:	ee 0f       	add	r30, r30
    15a4:	ff 1f       	adc	r31, r31
    15a6:	ee 0f       	add	r30, r30
    15a8:	ff 1f       	adc	r31, r31
    15aa:	e4 59       	subi	r30, 0x94	; 148
    15ac:	fe 4f       	sbci	r31, 0xFE	; 254
    15ae:	60 81       	ld	r22, Z
    15b0:	71 81       	ldd	r23, Z+1	; 0x01
    15b2:	82 81       	ldd	r24, Z+2	; 0x02
    15b4:	93 81       	ldd	r25, Z+3	; 0x03
    15b6:	28 a1       	ldd	r18, Y+32	; 0x20
    15b8:	39 a1       	ldd	r19, Y+33	; 0x21
    15ba:	4a a1       	ldd	r20, Y+34	; 0x22
    15bc:	5b a1       	ldd	r21, Y+35	; 0x23
    15be:	0e 94 05 23 	call	0x460a	; 0x460a <__mulsf3>
    15c2:	9b 01       	movw	r18, r22
    15c4:	ac 01       	movw	r20, r24
    15c6:	c7 01       	movw	r24, r14
    15c8:	b6 01       	movw	r22, r12
    15ca:	0e 94 b6 21 	call	0x436c	; 0x436c <__addsf3>
    15ce:	6c 87       	std	Y+12, r22	; 0x0c
    15d0:	7d 87       	std	Y+13, r23	; 0x0d
    15d2:	8e 87       	std	Y+14, r24	; 0x0e
    15d4:	9f 87       	std	Y+15, r25	; 0x0f
	if(ch->I_err > integralErrorLimit)
    15d6:	6c 85       	ldd	r22, Y+12	; 0x0c
    15d8:	7d 85       	ldd	r23, Y+13	; 0x0d
    15da:	8e 85       	ldd	r24, Y+14	; 0x0e
    15dc:	9f 85       	ldd	r25, Y+15	; 0x0f
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	40 e2       	ldi	r20, 0x20	; 32
    15e4:	51 e4       	ldi	r21, 0x41	; 65
    15e6:	0e 94 01 23 	call	0x4602	; 0x4602 <__gesf2>
    15ea:	18 16       	cp	r1, r24
    15ec:	64 f4       	brge	.+24     	; 0x1606 <__vector_7+0xb12>
	{
		ch->I_err = integralErrorLimit;
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	a0 e2       	ldi	r26, 0x20	; 32
    15f4:	b1 e4       	ldi	r27, 0x41	; 65
    15f6:	80 93 50 01 	sts	0x0150, r24
    15fa:	90 93 51 01 	sts	0x0151, r25
    15fe:	a0 93 52 01 	sts	0x0152, r26
    1602:	b0 93 53 01 	sts	0x0153, r27
	}
	if(ch->I_err < -integralErrorLimit)
    1606:	60 91 50 01 	lds	r22, 0x0150
    160a:	70 91 51 01 	lds	r23, 0x0151
    160e:	80 91 52 01 	lds	r24, 0x0152
    1612:	90 91 53 01 	lds	r25, 0x0153
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	40 e2       	ldi	r20, 0x20	; 32
    161c:	51 ec       	ldi	r21, 0xC1	; 193
    161e:	0e 94 1a 22 	call	0x4434	; 0x4434 <__cmpsf2>
    1622:	88 23       	and	r24, r24
    1624:	64 f4       	brge	.+24     	; 0x163e <__vector_7+0xb4a>
	{
		ch->I_err = -integralErrorLimit;
    1626:	80 e0       	ldi	r24, 0x00	; 0
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	a0 e2       	ldi	r26, 0x20	; 32
    162c:	b1 ec       	ldi	r27, 0xC1	; 193
    162e:	80 93 50 01 	sts	0x0150, r24
    1632:	90 93 51 01 	sts	0x0151, r25
    1636:	a0 93 52 01 	sts	0x0152, r26
    163a:	b0 93 53 01 	sts	0x0153, r27
	}
	
	ch->D_err = (ch->TempError[CtrlErrorIdx] - ch->TempError[CtrlErrorHistIdx]) * ch->Dgain; // D error
    163e:	e0 91 d0 02 	lds	r30, 0x02D0
    1642:	f0 91 d1 02 	lds	r31, 0x02D1
    1646:	c4 e4       	ldi	r28, 0x44	; 68
    1648:	d1 e0       	ldi	r29, 0x01	; 1
    164a:	ee 0f       	add	r30, r30
    164c:	ff 1f       	adc	r31, r31
    164e:	ee 0f       	add	r30, r30
    1650:	ff 1f       	adc	r31, r31
    1652:	e4 59       	subi	r30, 0x94	; 148
    1654:	fe 4f       	sbci	r31, 0xFE	; 254
    1656:	60 81       	ld	r22, Z
    1658:	71 81       	ldd	r23, Z+1	; 0x01
    165a:	82 81       	ldd	r24, Z+2	; 0x02
    165c:	93 81       	ldd	r25, Z+3	; 0x03
    165e:	e0 91 00 01 	lds	r30, 0x0100
    1662:	f0 91 01 01 	lds	r31, 0x0101
    1666:	ee 0f       	add	r30, r30
    1668:	ff 1f       	adc	r31, r31
    166a:	ee 0f       	add	r30, r30
    166c:	ff 1f       	adc	r31, r31
    166e:	e4 59       	subi	r30, 0x94	; 148
    1670:	fe 4f       	sbci	r31, 0xFE	; 254
    1672:	20 81       	ld	r18, Z
    1674:	31 81       	ldd	r19, Z+1	; 0x01
    1676:	42 81       	ldd	r20, Z+2	; 0x02
    1678:	53 81       	ldd	r21, Z+3	; 0x03
    167a:	cc a0       	ldd	r12, Y+36	; 0x24
    167c:	dd a0       	ldd	r13, Y+37	; 0x25
    167e:	ee a0       	ldd	r14, Y+38	; 0x26
    1680:	ff a0       	ldd	r15, Y+39	; 0x27
    1682:	0e 94 b5 21 	call	0x436a	; 0x436a <__subsf3>
    1686:	a7 01       	movw	r20, r14
    1688:	96 01       	movw	r18, r12
    168a:	0e 94 05 23 	call	0x460a	; 0x460a <__mulsf3>
    168e:	68 8b       	std	Y+16, r22	; 0x10
    1690:	79 8b       	std	Y+17, r23	; 0x11
    1692:	8a 8b       	std	Y+18, r24	; 0x12
    1694:	9b 8b       	std	Y+19, r25	; 0x13
	
	ch->Control_PID = ch->P_err + ch->I_err + ch->D_err;
    1696:	68 85       	ldd	r22, Y+8	; 0x08
    1698:	79 85       	ldd	r23, Y+9	; 0x09
    169a:	8a 85       	ldd	r24, Y+10	; 0x0a
    169c:	9b 85       	ldd	r25, Y+11	; 0x0b
    169e:	2c 85       	ldd	r18, Y+12	; 0x0c
    16a0:	3d 85       	ldd	r19, Y+13	; 0x0d
    16a2:	4e 85       	ldd	r20, Y+14	; 0x0e
    16a4:	5f 85       	ldd	r21, Y+15	; 0x0f
    16a6:	c8 88       	ldd	r12, Y+16	; 0x10
    16a8:	d9 88       	ldd	r13, Y+17	; 0x11
    16aa:	ea 88       	ldd	r14, Y+18	; 0x12
    16ac:	fb 88       	ldd	r15, Y+19	; 0x13
    16ae:	0e 94 b6 21 	call	0x436c	; 0x436c <__addsf3>
    16b2:	a7 01       	movw	r20, r14
    16b4:	96 01       	movw	r18, r12
    16b6:	0e 94 b6 21 	call	0x436c	; 0x436c <__addsf3>
    16ba:	68 8f       	std	Y+24, r22	; 0x18
    16bc:	79 8f       	std	Y+25, r23	; 0x19
    16be:	8a 8f       	std	Y+26, r24	; 0x1a
    16c0:	9b 8f       	std	Y+27, r25	; 0x1b
	ch->Control = ch->Control_PID; // + ch->TempSetPoint * (float)0.21 - 5;
    16c2:	88 8d       	ldd	r24, Y+24	; 0x18
    16c4:	99 8d       	ldd	r25, Y+25	; 0x19
    16c6:	aa 8d       	ldd	r26, Y+26	; 0x1a
    16c8:	bb 8d       	ldd	r27, Y+27	; 0x1b
    16ca:	8c 8b       	std	Y+20, r24	; 0x14
    16cc:	9d 8b       	std	Y+21, r25	; 0x15
    16ce:	ae 8b       	std	Y+22, r26	; 0x16
    16d0:	bf 8b       	std	Y+23, r27	; 0x17
	ch->pwm = (round(ch->Control));
    16d2:	6c 89       	ldd	r22, Y+20	; 0x14
    16d4:	7d 89       	ldd	r23, Y+21	; 0x15
    16d6:	8e 89       	ldd	r24, Y+22	; 0x16
    16d8:	9f 89       	ldd	r25, Y+23	; 0x17
    16da:	0e 94 68 23 	call	0x46d0	; 0x46d0 <round>
    16de:	0e 94 1e 22 	call	0x443c	; 0x443c <__fixsfsi>
    16e2:	70 93 a5 01 	sts	0x01A5, r23
    16e6:	60 93 a4 01 	sts	0x01A4, r22
	
	if(fabs(ch->TempError[CtrlErrorIdx]) > integralErrorActiveWindow)
    16ea:	e0 91 d0 02 	lds	r30, 0x02D0
    16ee:	f0 91 d1 02 	lds	r31, 0x02D1
    16f2:	ee 0f       	add	r30, r30
    16f4:	ff 1f       	adc	r31, r31
    16f6:	ee 0f       	add	r30, r30
    16f8:	ff 1f       	adc	r31, r31
    16fa:	e4 59       	subi	r30, 0x94	; 148
    16fc:	fe 4f       	sbci	r31, 0xFE	; 254
    16fe:	80 81       	ld	r24, Z
    1700:	91 81       	ldd	r25, Z+1	; 0x01
    1702:	a2 81       	ldd	r26, Z+2	; 0x02
    1704:	b3 81       	ldd	r27, Z+3	; 0x03
    1706:	bc 01       	movw	r22, r24
    1708:	cd 01       	movw	r24, r26
    170a:	9f 77       	andi	r25, 0x7F	; 127
    170c:	20 e0       	ldi	r18, 0x00	; 0
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	40 ea       	ldi	r20, 0xA0	; 160
    1712:	50 e4       	ldi	r21, 0x40	; 64
    1714:	0e 94 01 23 	call	0x4602	; 0x4602 <__gesf2>
    1718:	18 16       	cp	r1, r24
    171a:	44 f4       	brge	.+16     	; 0x172c <__vector_7+0xc38>
	{
		ch->I_err = 0;														// Avoid integral wind-up
    171c:	10 92 50 01 	sts	0x0150, r1
    1720:	10 92 51 01 	sts	0x0151, r1
    1724:	10 92 52 01 	sts	0x0152, r1
    1728:	10 92 53 01 	sts	0x0153, r1
	}
	
	if(fabs(ch->TempError[CtrlErrorIdx]) <= ch->tempErrorWin)				// Temperature settle window
    172c:	e0 91 d0 02 	lds	r30, 0x02D0
    1730:	f0 91 d1 02 	lds	r31, 0x02D1
    1734:	ee 0f       	add	r30, r30
    1736:	ff 1f       	adc	r31, r31
    1738:	ee 0f       	add	r30, r30
    173a:	ff 1f       	adc	r31, r31
    173c:	e4 59       	subi	r30, 0x94	; 148
    173e:	fe 4f       	sbci	r31, 0xFE	; 254
    1740:	80 81       	ld	r24, Z
    1742:	91 81       	ldd	r25, Z+1	; 0x01
    1744:	a2 81       	ldd	r26, Z+2	; 0x02
    1746:	b3 81       	ldd	r27, Z+3	; 0x03
    1748:	20 91 98 01 	lds	r18, 0x0198
    174c:	30 91 99 01 	lds	r19, 0x0199
    1750:	40 91 9a 01 	lds	r20, 0x019A
    1754:	50 91 9b 01 	lds	r21, 0x019B
    1758:	bc 01       	movw	r22, r24
    175a:	cd 01       	movw	r24, r26
    175c:	9f 77       	andi	r25, 0x7F	; 127
    175e:	0e 94 1a 22 	call	0x4434	; 0x4434 <__cmpsf2>
    1762:	18 16       	cp	r1, r24
    1764:	14 f1       	brlt	.+68     	; 0x17aa <__vector_7+0xcb6>
	{
		ch->tempSettleCnt ++;
    1766:	ec e9       	ldi	r30, 0x9C	; 156
    1768:	f1 e0       	ldi	r31, 0x01	; 1
    176a:	80 81       	ld	r24, Z
    176c:	91 81       	ldd	r25, Z+1	; 0x01
    176e:	01 96       	adiw	r24, 0x01	; 1
    1770:	91 83       	std	Z+1, r25	; 0x01
    1772:	80 83       	st	Z, r24
		if(ch->tempSettleCnt >= (int)(ch->tempSettleTime * 61))
    1774:	20 81       	ld	r18, Z
    1776:	31 81       	ldd	r19, Z+1	; 0x01
    1778:	40 91 9e 01 	lds	r20, 0x019E
    177c:	50 91 9f 01 	lds	r21, 0x019F
    1780:	6d e3       	ldi	r22, 0x3D	; 61
    1782:	64 9f       	mul	r22, r20
    1784:	c0 01       	movw	r24, r0
    1786:	65 9f       	mul	r22, r21
    1788:	90 0d       	add	r25, r0
    178a:	11 24       	eor	r1, r1
    178c:	28 17       	cp	r18, r24
    178e:	39 07       	cpc	r19, r25
    1790:	a4 f0       	brlt	.+40     	; 0x17ba <__vector_7+0xcc6>
		{
			ch->tempStable = 1;
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	90 93 a1 01 	sts	0x01A1, r25
    179a:	80 93 a0 01 	sts	0x01A0, r24
			ch->tempSettleCnt --;
    179e:	80 81       	ld	r24, Z
    17a0:	91 81       	ldd	r25, Z+1	; 0x01
    17a2:	01 97       	sbiw	r24, 0x01	; 1
    17a4:	91 83       	std	Z+1, r25	; 0x01
    17a6:	80 83       	st	Z, r24
    17a8:	08 c0       	rjmp	.+16     	; 0x17ba <__vector_7+0xcc6>
		}			
	}
	else
	{
		ch->tempSettleCnt = 0;
    17aa:	10 92 9d 01 	sts	0x019D, r1
    17ae:	10 92 9c 01 	sts	0x019C, r1
		ch->tempStable = 0;
    17b2:	10 92 a1 01 	sts	0x01A1, r1
    17b6:	10 92 a0 01 	sts	0x01A0, r1
	PIDctrl(&ch0, 1);
	PIDctrl(&ch1, 2);
	PIDctrl(&ch2, 3);
	PIDctrl(&ch3, 4);

	CtrlErrorIdx ++;							// Control error ring buffer index
    17ba:	80 91 d0 02 	lds	r24, 0x02D0
    17be:	90 91 d1 02 	lds	r25, 0x02D1
    17c2:	01 96       	adiw	r24, 0x01	; 1
    17c4:	90 93 d1 02 	sts	0x02D1, r25
    17c8:	80 93 d0 02 	sts	0x02D0, r24
	if(CtrlErrorIdx > errorHistory)
    17cc:	80 91 d0 02 	lds	r24, 0x02D0
    17d0:	90 91 d1 02 	lds	r25, 0x02D1
    17d4:	0b 97       	sbiw	r24, 0x0b	; 11
    17d6:	24 f0       	brlt	.+8      	; 0x17e0 <__vector_7+0xcec>
	{
		CtrlErrorIdx = 0;
    17d8:	10 92 d1 02 	sts	0x02D1, r1
    17dc:	10 92 d0 02 	sts	0x02D0, r1
	}
	CtrlErrorHistIdx = CtrlErrorIdx + 1;
    17e0:	80 91 d0 02 	lds	r24, 0x02D0
    17e4:	90 91 d1 02 	lds	r25, 0x02D1
    17e8:	01 96       	adiw	r24, 0x01	; 1
    17ea:	90 93 01 01 	sts	0x0101, r25
    17ee:	80 93 00 01 	sts	0x0100, r24
	if(CtrlErrorHistIdx > errorHistory)
    17f2:	80 91 00 01 	lds	r24, 0x0100
    17f6:	90 91 01 01 	lds	r25, 0x0101
    17fa:	0b 97       	sbiw	r24, 0x0b	; 11
    17fc:	24 f0       	brlt	.+8      	; 0x1806 <__vector_7+0xd12>
	{
		CtrlErrorHistIdx = 0;
    17fe:	10 92 01 01 	sts	0x0101, r1
    1802:	10 92 00 01 	sts	0x0100, r1
	}		

	PORTD &= 0b11110111;						// Turn off LED on PCB (Irq call freq: 16MHz / 1024 / 255 = 61.3 Hz )
    1806:	5b 98       	cbi	0x0b, 3	; 11
}
    1808:	ff 91       	pop	r31
    180a:	ef 91       	pop	r30
    180c:	df 91       	pop	r29
    180e:	cf 91       	pop	r28
    1810:	bf 91       	pop	r27
    1812:	af 91       	pop	r26
    1814:	9f 91       	pop	r25
    1816:	8f 91       	pop	r24
    1818:	7f 91       	pop	r23
    181a:	6f 91       	pop	r22
    181c:	5f 91       	pop	r21
    181e:	4f 91       	pop	r20
    1820:	3f 91       	pop	r19
    1822:	2f 91       	pop	r18
    1824:	1f 91       	pop	r17
    1826:	0f 91       	pop	r16
    1828:	ff 90       	pop	r15
    182a:	ef 90       	pop	r14
    182c:	df 90       	pop	r13
    182e:	cf 90       	pop	r12
    1830:	0f 90       	pop	r0
    1832:	0f be       	out	0x3f, r0	; 63
    1834:	0f 90       	pop	r0
    1836:	1f 90       	pop	r1
    1838:	18 95       	reti

0000183a <ftoa>:
	printStatus("IntiRead: ");
	printStatus(data);
}

void ftoa(float num, char *str)
{
    183a:	8f 92       	push	r8
    183c:	9f 92       	push	r9
    183e:	af 92       	push	r10
    1840:	bf 92       	push	r11
    1842:	cf 92       	push	r12
    1844:	df 92       	push	r13
    1846:	ef 92       	push	r14
    1848:	ff 92       	push	r15
    184a:	0f 93       	push	r16
    184c:	1f 93       	push	r17
    184e:	cf 93       	push	r28
    1850:	df 93       	push	r29
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
    1856:	64 97       	sbiw	r28, 0x14	; 20
    1858:	0f b6       	in	r0, 0x3f	; 63
    185a:	f8 94       	cli
    185c:	de bf       	out	0x3e, r29	; 62
    185e:	0f be       	out	0x3f, r0	; 63
    1860:	cd bf       	out	0x3d, r28	; 61
    1862:	4b 01       	movw	r8, r22
    1864:	5c 01       	movw	r10, r24
    1866:	8a 01       	movw	r16, r20
	int intpart = num;
    1868:	0e 94 1e 22 	call	0x443c	; 0x443c <__fixsfsi>
    186c:	6b 01       	movw	r12, r22
    186e:	7c 01       	movw	r14, r24
	int i;
	float decimal_part;
	char decimal[20];
	int PRECISION = 3;						// Decimal precision

	memset(str, 0x0, 20);
    1870:	84 e1       	ldi	r24, 0x14	; 20
    1872:	f8 01       	movw	r30, r16
    1874:	11 92       	st	Z+, r1
    1876:	8a 95       	dec	r24
    1878:	e9 f7       	brne	.-6      	; 0x1874 <ftoa+0x3a>
    187a:	4a e0       	ldi	r20, 0x0A	; 10
    187c:	b8 01       	movw	r22, r16
    187e:	c6 01       	movw	r24, r12
    1880:	0e 94 31 24 	call	0x4862	; 0x4862 <__itoa_ncheck>
	itoa(num, str, 10);

	strcat(str, ".");
    1884:	f8 01       	movw	r30, r16
    1886:	01 90       	ld	r0, Z+
    1888:	00 20       	and	r0, r0
    188a:	e9 f7       	brne	.-6      	; 0x1886 <ftoa+0x4c>
    188c:	31 97       	sbiw	r30, 0x01	; 1
    188e:	8e e2       	ldi	r24, 0x2E	; 46
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	91 83       	std	Z+1, r25	; 0x01
    1894:	80 83       	st	Z, r24

	decimal_part = num - intpart;
    1896:	b6 01       	movw	r22, r12
    1898:	dd 0c       	add	r13, r13
    189a:	88 0b       	sbc	r24, r24
    189c:	99 0b       	sbc	r25, r25
    189e:	0e 94 51 22 	call	0x44a2	; 0x44a2 <__floatsisf>
    18a2:	9b 01       	movw	r18, r22
    18a4:	ac 01       	movw	r20, r24
    18a6:	c5 01       	movw	r24, r10
    18a8:	b4 01       	movw	r22, r8
    18aa:	0e 94 b5 21 	call	0x436a	; 0x436a <__subsf3>
	intdecimal = decimal_part * 1000;		// If decimal precision is 3 then 1000, 2 -> 100, 1 -> 10 ...;
    18ae:	20 e0       	ldi	r18, 0x00	; 0
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	4a e7       	ldi	r20, 0x7A	; 122
    18b4:	54 e4       	ldi	r21, 0x44	; 68
    18b6:	0e 94 05 23 	call	0x460a	; 0x460a <__mulsf3>
    18ba:	0e 94 1e 22 	call	0x443c	; 0x443c <__fixsfsi>
    18be:	9b 01       	movw	r18, r22
    18c0:	77 23       	and	r23, r23
    18c2:	24 f4       	brge	.+8      	; 0x18cc <ftoa+0x92>
    18c4:	22 27       	eor	r18, r18
    18c6:	33 27       	eor	r19, r19
    18c8:	26 1b       	sub	r18, r22
    18ca:	37 0b       	sbc	r19, r23
    18cc:	4a e0       	ldi	r20, 0x0A	; 10
    18ce:	be 01       	movw	r22, r28
    18d0:	6f 5f       	subi	r22, 0xFF	; 255
    18d2:	7f 4f       	sbci	r23, 0xFF	; 255
    18d4:	c9 01       	movw	r24, r18
    18d6:	0e 94 31 24 	call	0x4862	; 0x4862 <__itoa_ncheck>
	if(intdecimal < 0)
	{
		intdecimal = -intdecimal;
	}
	itoa(intdecimal, decimal, 10);
	for(i =0;i < (PRECISION - strlen(decimal));i++)
    18da:	80 e0       	ldi	r24, 0x00	; 0
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	de 01       	movw	r26, r28
    18e0:	11 96       	adiw	r26, 0x01	; 1
    18e2:	23 e0       	ldi	r18, 0x03	; 3
    18e4:	30 e0       	ldi	r19, 0x00	; 0
	{
		strcat(str, "0");
    18e6:	40 e3       	ldi	r20, 0x30	; 48
    18e8:	50 e0       	ldi	r21, 0x00	; 0
	if(intdecimal < 0)
	{
		intdecimal = -intdecimal;
	}
	itoa(intdecimal, decimal, 10);
	for(i =0;i < (PRECISION - strlen(decimal));i++)
    18ea:	08 c0       	rjmp	.+16     	; 0x18fc <ftoa+0xc2>
	{
		strcat(str, "0");
    18ec:	f8 01       	movw	r30, r16
    18ee:	01 90       	ld	r0, Z+
    18f0:	00 20       	and	r0, r0
    18f2:	e9 f7       	brne	.-6      	; 0x18ee <ftoa+0xb4>
    18f4:	31 97       	sbiw	r30, 0x01	; 1
    18f6:	51 83       	std	Z+1, r21	; 0x01
    18f8:	40 83       	st	Z, r20
	if(intdecimal < 0)
	{
		intdecimal = -intdecimal;
	}
	itoa(intdecimal, decimal, 10);
	for(i =0;i < (PRECISION - strlen(decimal));i++)
    18fa:	01 96       	adiw	r24, 0x01	; 1
    18fc:	fd 01       	movw	r30, r26
    18fe:	01 90       	ld	r0, Z+
    1900:	00 20       	and	r0, r0
    1902:	e9 f7       	brne	.-6      	; 0x18fe <ftoa+0xc4>
    1904:	31 97       	sbiw	r30, 0x01	; 1
    1906:	ea 1b       	sub	r30, r26
    1908:	fb 0b       	sbc	r31, r27
    190a:	b9 01       	movw	r22, r18
    190c:	6e 1b       	sub	r22, r30
    190e:	7f 0b       	sbc	r23, r31
    1910:	86 17       	cp	r24, r22
    1912:	97 07       	cpc	r25, r23
    1914:	58 f3       	brcs	.-42     	; 0x18ec <ftoa+0xb2>
	{
		strcat(str, "0");
	}
	strcat(str, decimal);
    1916:	be 01       	movw	r22, r28
    1918:	6f 5f       	subi	r22, 0xFF	; 255
    191a:	7f 4f       	sbci	r23, 0xFF	; 255
    191c:	c8 01       	movw	r24, r16
    191e:	0e 94 fd 23 	call	0x47fa	; 0x47fa <strcat>
}
    1922:	64 96       	adiw	r28, 0x14	; 20
    1924:	0f b6       	in	r0, 0x3f	; 63
    1926:	f8 94       	cli
    1928:	de bf       	out	0x3e, r29	; 62
    192a:	0f be       	out	0x3f, r0	; 63
    192c:	cd bf       	out	0x3d, r28	; 61
    192e:	df 91       	pop	r29
    1930:	cf 91       	pop	r28
    1932:	1f 91       	pop	r17
    1934:	0f 91       	pop	r16
    1936:	ff 90       	pop	r15
    1938:	ef 90       	pop	r14
    193a:	df 90       	pop	r13
    193c:	cf 90       	pop	r12
    193e:	bf 90       	pop	r11
    1940:	af 90       	pop	r10
    1942:	9f 90       	pop	r9
    1944:	8f 90       	pop	r8
    1946:	08 95       	ret

00001948 <main>:
	eeprom_write_float( (float*)eepromAdr_TempErrWin3, ch3.tempErrorWin );
	eeprom_write_word(	(uint16_t*)eepromAdr_TSettleTime3, ch3.tempSettleTime );	
}

int main (void)
  {
    1948:	cf 93       	push	r28
    194a:	df 93       	push	r29
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
    1950:	c4 57       	subi	r28, 0x74	; 116
    1952:	d1 09       	sbc	r29, r1
    1954:	0f b6       	in	r0, 0x3f	; 63
    1956:	f8 94       	cli
    1958:	de bf       	out	0x3e, r29	; 62
    195a:	0f be       	out	0x3f, r0	; 63
    195c:	cd bf       	out	0x3d, r28	; 61
	char requestID[4];
	char s_string[20] = "C2CA SA ADP 1.0";
    195e:	80 e1       	ldi	r24, 0x10	; 16
    1960:	e2 e0       	ldi	r30, 0x02	; 2
    1962:	f1 e0       	ldi	r31, 0x01	; 1
    1964:	de 01       	movw	r26, r28
    1966:	59 96       	adiw	r26, 0x19	; 25
    1968:	01 90       	ld	r0, Z+
    196a:	0d 92       	st	X+, r0
    196c:	8a 95       	dec	r24
    196e:	e1 f7       	brne	.-8      	; 0x1968 <main+0x20>
    1970:	19 a6       	std	Y+41, r1	; 0x29
    1972:	1a a6       	std	Y+42, r1	; 0x2a
    1974:	1b a6       	std	Y+43, r1	; 0x2b
    1976:	1c a6       	std	Y+44, r1	; 0x2c
	char *pos;
	char inCrC_string[5];
	int i;
	int var;
	
	cli();
    1978:	f8 94       	cli
 */
static void uart_init(void)
{
#if defined UBRR0H
	// get the values from the setbaud tool
	UBRR0H = UBRRH_VALUE;
    197a:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBRRL_VALUE;
    197e:	82 e2       	ldi	r24, 0x22	; 34
    1980:	80 93 c4 00 	sts	0x00C4, r24
#else
#error "Device is not supported by the driver"
#endif

#if USE_2X
	UCSR0A |= (1 << U2X0);
    1984:	e0 ec       	ldi	r30, 0xC0	; 192
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	82 60       	ori	r24, 0x02	; 2
    198c:	80 83       	st	Z, r24
#endif

	// enable RX and TX and set interrupts on rx complete
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
    198e:	88 e9       	ldi	r24, 0x98	; 152
    1990:	80 93 c1 00 	sts	0x00C1, r24

	// 8-bit, 1 stop bit, no parity, asynchronous UART
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00) | (0 << USBS0) |
    1994:	86 e0       	ldi	r24, 0x06	; 6
    1996:	80 93 c2 00 	sts	0x00C2, r24
 * \retval struct ring_buffer a struct containing the ring buffer
 */
static inline struct ring_buffer ring_buffer_init(uint8_t *buffer, uint8_t size)
{
	struct ring_buffer ring;
	ring.write_offset = 0;
    199a:	1a aa       	std	Y+50, r1	; 0x32
	ring.read_offset = 0;
    199c:	1b aa       	std	Y+51, r1	; 0x33
	ring.size = size;
    199e:	77 24       	eor	r7, r7
    19a0:	7a 94       	dec	r7
    19a2:	7c aa       	std	Y+52, r7	; 0x34
	ring.buffer = buffer;
    19a4:	85 ed       	ldi	r24, 0xD5	; 213
    19a6:	92 e0       	ldi	r25, 0x02	; 2
    19a8:	9e ab       	std	Y+54, r25	; 0x36
    19aa:	8d ab       	std	Y+53, r24	; 0x35
	return ring;
    19ac:	85 e0       	ldi	r24, 0x05	; 5
    19ae:	fe 01       	movw	r30, r28
    19b0:	f2 96       	adiw	r30, 0x32	; 50
    19b2:	de 01       	movw	r26, r28
    19b4:	16 96       	adiw	r26, 0x06	; 6
    19b6:	01 90       	ld	r0, Z+
    19b8:	0d 92       	st	X+, r0
    19ba:	8a 95       	dec	r24
    19bc:	e1 f7       	brne	.-8      	; 0x19b6 <main+0x6e>
    19be:	85 e0       	ldi	r24, 0x05	; 5
    19c0:	fe 01       	movw	r30, r28
    19c2:	36 96       	adiw	r30, 0x06	; 6
    19c4:	de 01       	movw	r26, r28
    19c6:	11 96       	adiw	r26, 0x01	; 1
    19c8:	01 90       	ld	r0, Z+
    19ca:	0d 92       	st	X+, r0
    19cc:	8a 95       	dec	r24
    19ce:	e1 f7       	brne	.-8      	; 0x19c8 <main+0x80>
			(0 << UPM01) | (0 << UPM00) | (0 << UMSEL01) |
			(0 << UMSEL00);

	// initialize the in and out buffer for the UART
	ring_buffer_out = ring_buffer_init(out_buffer, BUFFER_SIZE);
    19d0:	85 e0       	ldi	r24, 0x05	; 5
    19d2:	fe 01       	movw	r30, r28
    19d4:	31 96       	adiw	r30, 0x01	; 1
    19d6:	ae ef       	ldi	r26, 0xFE	; 254
    19d8:	b4 e0       	ldi	r27, 0x04	; 4
    19da:	01 90       	ld	r0, Z+
    19dc:	0d 92       	st	X+, r0
    19de:	8a 95       	dec	r24
    19e0:	e1 f7       	brne	.-8      	; 0x19da <main+0x92>
 * \retval struct ring_buffer a struct containing the ring buffer
 */
static inline struct ring_buffer ring_buffer_init(uint8_t *buffer, uint8_t size)
{
	struct ring_buffer ring;
	ring.write_offset = 0;
    19e2:	1a aa       	std	Y+50, r1	; 0x32
	ring.read_offset = 0;
    19e4:	1b aa       	std	Y+51, r1	; 0x33
	ring.size = size;
    19e6:	7c aa       	std	Y+52, r7	; 0x34
	ring.buffer = buffer;
    19e8:	84 ed       	ldi	r24, 0xD4	; 212
    19ea:	93 e0       	ldi	r25, 0x03	; 3
    19ec:	9e ab       	std	Y+54, r25	; 0x36
    19ee:	8d ab       	std	Y+53, r24	; 0x35
	return ring;
    19f0:	85 e0       	ldi	r24, 0x05	; 5
    19f2:	fe 01       	movw	r30, r28
    19f4:	f2 96       	adiw	r30, 0x32	; 50
    19f6:	de 01       	movw	r26, r28
    19f8:	50 96       	adiw	r26, 0x10	; 16
    19fa:	01 90       	ld	r0, Z+
    19fc:	0d 92       	st	X+, r0
    19fe:	8a 95       	dec	r24
    1a00:	e1 f7       	brne	.-8      	; 0x19fa <main+0xb2>
    1a02:	85 e0       	ldi	r24, 0x05	; 5
    1a04:	fe 01       	movw	r30, r28
    1a06:	70 96       	adiw	r30, 0x10	; 16
    1a08:	de 01       	movw	r26, r28
    1a0a:	1b 96       	adiw	r26, 0x0b	; 11
    1a0c:	01 90       	ld	r0, Z+
    1a0e:	0d 92       	st	X+, r0
    1a10:	8a 95       	dec	r24
    1a12:	e1 f7       	brne	.-8      	; 0x1a0c <main+0xc4>
	ring_buffer_in = ring_buffer_init(in_buffer, BUFFER_SIZE);
    1a14:	85 e0       	ldi	r24, 0x05	; 5
    1a16:	fe 01       	movw	r30, r28
    1a18:	3b 96       	adiw	r30, 0x0b	; 11
    1a1a:	ab ed       	ldi	r26, 0xDB	; 219
    1a1c:	b4 e0       	ldi	r27, 0x04	; 4
    1a1e:	01 90       	ld	r0, Z+
    1a20:	0d 92       	st	X+, r0
    1a22:	8a 95       	dec	r24
    1a24:	e1 f7       	brne	.-8      	; 0x1a1e <main+0xd6>
	int i;
	int var;
	
	cli();
	uart_init();
	sei();
    1a26:	78 94       	sei
/************************************************
SPI INITIALISATION
*************************************************/
static inline void SPIinit(void)
{
	SPI_DDR &= 0b11101111;							// PB4 = Input = MISO
    1a28:	24 98       	cbi	0x04, 4	; 4
	SPI_DDR = (1<<PORTB3)|(1<<PORTB5|(1<<PORTB2));	// Set MOSI, SCK and SS as output
    1a2a:	8c e2       	ldi	r24, 0x2C	; 44
    1a2c:	84 b9       	out	0x04, r24	; 4
	
	
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0)|(1<<CPHA)|(1<<CPOL); // Enable SPI, Master, set clock rate fck/16
    1a2e:	8d e5       	ldi	r24, 0x5D	; 93
    1a30:	8c bd       	out	0x2c, r24	; 44
	cli();
	uart_init();
	sei();
	SPIinit();

	ch0.pwm = 1;
    1a32:	0f 2e       	mov	r0, r31
    1a34:	fd e6       	ldi	r31, 0x6D	; 109
    1a36:	af 2e       	mov	r10, r31
    1a38:	f2 e0       	ldi	r31, 0x02	; 2
    1a3a:	bf 2e       	mov	r11, r31
    1a3c:	f0 2d       	mov	r31, r0
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	90 93 ce 02 	sts	0x02CE, r25
    1a46:	80 93 cd 02 	sts	0x02CD, r24
	ch1.pwm = 1;
    1a4a:	0f 2e       	mov	r0, r31
    1a4c:	fa e0       	ldi	r31, 0x0A	; 10
    1a4e:	cf 2e       	mov	r12, r31
    1a50:	f2 e0       	ldi	r31, 0x02	; 2
    1a52:	df 2e       	mov	r13, r31
    1a54:	f0 2d       	mov	r31, r0
    1a56:	90 93 6b 02 	sts	0x026B, r25
    1a5a:	80 93 6a 02 	sts	0x026A, r24
	ch2.pwm = 1;
    1a5e:	0f 2e       	mov	r0, r31
    1a60:	f7 ea       	ldi	r31, 0xA7	; 167
    1a62:	ef 2e       	mov	r14, r31
    1a64:	f1 e0       	ldi	r31, 0x01	; 1
    1a66:	ff 2e       	mov	r15, r31
    1a68:	f0 2d       	mov	r31, r0
    1a6a:	90 93 08 02 	sts	0x0208, r25
    1a6e:	80 93 07 02 	sts	0x0207, r24
	ch3.pwm = 1;
    1a72:	04 e4       	ldi	r16, 0x44	; 68
    1a74:	11 e0       	ldi	r17, 0x01	; 1
    1a76:	90 93 a5 01 	sts	0x01A5, r25
    1a7a:	80 93 a4 01 	sts	0x01A4, r24
	
	ch1.tempSettleTime = 5;
    1a7e:	0f 2e       	mov	r0, r31
    1a80:	f4 e6       	ldi	r31, 0x64	; 100
    1a82:	8f 2e       	mov	r8, r31
    1a84:	f2 e0       	ldi	r31, 0x02	; 2
    1a86:	9f 2e       	mov	r9, r31
    1a88:	f0 2d       	mov	r31, r0
    1a8a:	85 e0       	ldi	r24, 0x05	; 5
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	d4 01       	movw	r26, r8
    1a90:	11 96       	adiw	r26, 0x01	; 1
    1a92:	9c 93       	st	X, r25
    1a94:	8e 93       	st	-X, r24

	DDRD = 0b11111000;			// 1 = output 0 = input
    1a96:	88 ef       	ldi	r24, 0xF8	; 248
    1a98:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0b00001111;
    1a9a:	8f e0       	ldi	r24, 0x0F	; 15
    1a9c:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1<<PORTB1);		// Set stepper Dir to output
    1a9e:	21 9a       	sbi	0x04, 1	; 4
	
	PORTD |=(1<<PORTD7)|(1<<PORTD6)|(1<<PORTD5)|(1<<PORTD4);	// Set initially all CS high
    1aa0:	8b b1       	in	r24, 0x0b	; 11
    1aa2:	80 6f       	ori	r24, 0xF0	; 240
    1aa4:	8b b9       	out	0x0b, r24	; 11
	}
}

static inline void ReadParmEEPROM()
{
	ch0.TempSetPoint = eeprom_read_float((float*)eepromAdr_TempSetPoint0);
    1aa6:	80 e0       	ldi	r24, 0x00	; 0
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	0e 94 f6 25 	call	0x4bec	; 0x4bec <eeprom_read_dword>
    1aae:	f5 01       	movw	r30, r10
    1ab0:	60 83       	st	Z, r22
    1ab2:	71 83       	std	Z+1, r23	; 0x01
    1ab4:	82 83       	std	Z+2, r24	; 0x02
    1ab6:	93 83       	std	Z+3, r25	; 0x03
	ch0.Pgain = eeprom_read_float((float*)eepromAdr_PgainCh0);
    1ab8:	84 e0       	ldi	r24, 0x04	; 4
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	0e 94 f6 25 	call	0x4bec	; 0x4bec <eeprom_read_dword>
    1ac0:	d5 01       	movw	r26, r10
    1ac2:	5c 96       	adiw	r26, 0x1c	; 28
    1ac4:	6d 93       	st	X+, r22
    1ac6:	7d 93       	st	X+, r23
    1ac8:	8d 93       	st	X+, r24
    1aca:	9c 93       	st	X, r25
    1acc:	5f 97       	sbiw	r26, 0x1f	; 31
	ch0.Igain = eeprom_read_float((float*)eepromAdr_IgainCh0);
    1ace:	88 e0       	ldi	r24, 0x08	; 8
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	0e 94 f6 25 	call	0x4bec	; 0x4bec <eeprom_read_dword>
    1ad6:	f5 01       	movw	r30, r10
    1ad8:	60 a3       	std	Z+32, r22	; 0x20
    1ada:	71 a3       	std	Z+33, r23	; 0x21
    1adc:	82 a3       	std	Z+34, r24	; 0x22
    1ade:	93 a3       	std	Z+35, r25	; 0x23
	ch0.Dgain = eeprom_read_float((float*)eepromAdr_DgainCh0);
    1ae0:	8c e0       	ldi	r24, 0x0C	; 12
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	0e 94 f6 25 	call	0x4bec	; 0x4bec <eeprom_read_dword>
    1ae8:	d5 01       	movw	r26, r10
    1aea:	94 96       	adiw	r26, 0x24	; 36
    1aec:	6d 93       	st	X+, r22
    1aee:	7d 93       	st	X+, r23
    1af0:	8d 93       	st	X+, r24
    1af2:	9c 93       	st	X, r25
    1af4:	97 97       	sbiw	r26, 0x27	; 39
	ch0.tempErrorWin = eeprom_read_float((float*)eepromAdr_TempErrWin0);
    1af6:	80 e1       	ldi	r24, 0x10	; 16
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	0e 94 f6 25 	call	0x4bec	; 0x4bec <eeprom_read_dword>
    1afe:	60 93 c1 02 	sts	0x02C1, r22
    1b02:	70 93 c2 02 	sts	0x02C2, r23
    1b06:	80 93 c3 02 	sts	0x02C3, r24
    1b0a:	90 93 c4 02 	sts	0x02C4, r25
	ch0.tempSettleTime = eeprom_read_word((uint16_t*)eepromAdr_TSettleTime0);
    1b0e:	84 e1       	ldi	r24, 0x14	; 20
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <eeprom_read_word>
    1b16:	90 93 c8 02 	sts	0x02C8, r25
    1b1a:	80 93 c7 02 	sts	0x02C7, r24
	
	ch1.TempSetPoint = eeprom_read_float((float*)eepromAdr_TempSetPoint1);
    1b1e:	88 e1       	ldi	r24, 0x18	; 24
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	0e 94 f6 25 	call	0x4bec	; 0x4bec <eeprom_read_dword>
    1b26:	f6 01       	movw	r30, r12
    1b28:	60 83       	st	Z, r22
    1b2a:	71 83       	std	Z+1, r23	; 0x01
    1b2c:	82 83       	std	Z+2, r24	; 0x02
    1b2e:	93 83       	std	Z+3, r25	; 0x03
	ch1.Pgain = eeprom_read_float((float*)eepromAdr_PgainCh1);
    1b30:	8c e1       	ldi	r24, 0x1C	; 28
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	0e 94 f6 25 	call	0x4bec	; 0x4bec <eeprom_read_dword>
    1b38:	d6 01       	movw	r26, r12
    1b3a:	5c 96       	adiw	r26, 0x1c	; 28
    1b3c:	6d 93       	st	X+, r22
    1b3e:	7d 93       	st	X+, r23
    1b40:	8d 93       	st	X+, r24
    1b42:	9c 93       	st	X, r25
    1b44:	5f 97       	sbiw	r26, 0x1f	; 31
	ch1.Igain = eeprom_read_float((float*)eepromAdr_IgainCh1);
    1b46:	80 e2       	ldi	r24, 0x20	; 32
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	0e 94 f6 25 	call	0x4bec	; 0x4bec <eeprom_read_dword>
    1b4e:	f6 01       	movw	r30, r12
    1b50:	60 a3       	std	Z+32, r22	; 0x20
    1b52:	71 a3       	std	Z+33, r23	; 0x21
    1b54:	82 a3       	std	Z+34, r24	; 0x22
    1b56:	93 a3       	std	Z+35, r25	; 0x23
	ch1.Dgain = eeprom_read_float((float*)eepromAdr_DgainCh1);
    1b58:	84 e2       	ldi	r24, 0x24	; 36
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	0e 94 f6 25 	call	0x4bec	; 0x4bec <eeprom_read_dword>
    1b60:	d6 01       	movw	r26, r12
    1b62:	94 96       	adiw	r26, 0x24	; 36
    1b64:	6d 93       	st	X+, r22
    1b66:	7d 93       	st	X+, r23
    1b68:	8d 93       	st	X+, r24
    1b6a:	9c 93       	st	X, r25
    1b6c:	97 97       	sbiw	r26, 0x27	; 39
	ch1.tempErrorWin = eeprom_read_float((float*)eepromAdr_TempErrWin1);
    1b6e:	88 e2       	ldi	r24, 0x28	; 40
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	0e 94 f6 25 	call	0x4bec	; 0x4bec <eeprom_read_dword>
    1b76:	60 93 5e 02 	sts	0x025E, r22
    1b7a:	70 93 5f 02 	sts	0x025F, r23
    1b7e:	80 93 60 02 	sts	0x0260, r24
    1b82:	90 93 61 02 	sts	0x0261, r25
	ch1.tempSettleTime = eeprom_read_word((uint16_t*)eepromAdr_TSettleTime1);	
    1b86:	8c e2       	ldi	r24, 0x2C	; 44
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <eeprom_read_word>
    1b8e:	f4 01       	movw	r30, r8
    1b90:	91 83       	std	Z+1, r25	; 0x01
    1b92:	80 83       	st	Z, r24
	
	ch2.TempSetPoint = eeprom_read_float((float*)eepromAdr_TempSetPoint2);
    1b94:	80 e3       	ldi	r24, 0x30	; 48
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	0e 94 f6 25 	call	0x4bec	; 0x4bec <eeprom_read_dword>
    1b9c:	d7 01       	movw	r26, r14
    1b9e:	6d 93       	st	X+, r22
    1ba0:	7d 93       	st	X+, r23
    1ba2:	8d 93       	st	X+, r24
    1ba4:	9c 93       	st	X, r25
    1ba6:	13 97       	sbiw	r26, 0x03	; 3
	ch2.Pgain = eeprom_read_float((float*)eepromAdr_PgainCh2);
    1ba8:	84 e3       	ldi	r24, 0x34	; 52
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	0e 94 f6 25 	call	0x4bec	; 0x4bec <eeprom_read_dword>
    1bb0:	f7 01       	movw	r30, r14
    1bb2:	64 8f       	std	Z+28, r22	; 0x1c
    1bb4:	75 8f       	std	Z+29, r23	; 0x1d
    1bb6:	86 8f       	std	Z+30, r24	; 0x1e
    1bb8:	97 8f       	std	Z+31, r25	; 0x1f
	ch2.Igain = eeprom_read_float((float*)eepromAdr_IgainCh2);
    1bba:	88 e3       	ldi	r24, 0x38	; 56
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	0e 94 f6 25 	call	0x4bec	; 0x4bec <eeprom_read_dword>
    1bc2:	d7 01       	movw	r26, r14
    1bc4:	90 96       	adiw	r26, 0x20	; 32
    1bc6:	6d 93       	st	X+, r22
    1bc8:	7d 93       	st	X+, r23
    1bca:	8d 93       	st	X+, r24
    1bcc:	9c 93       	st	X, r25
    1bce:	93 97       	sbiw	r26, 0x23	; 35
	ch2.Dgain = eeprom_read_float((float*)eepromAdr_DgainCh2);
    1bd0:	8c e3       	ldi	r24, 0x3C	; 60
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	0e 94 f6 25 	call	0x4bec	; 0x4bec <eeprom_read_dword>
    1bd8:	f7 01       	movw	r30, r14
    1bda:	64 a3       	std	Z+36, r22	; 0x24
    1bdc:	75 a3       	std	Z+37, r23	; 0x25
    1bde:	86 a3       	std	Z+38, r24	; 0x26
    1be0:	97 a3       	std	Z+39, r25	; 0x27
	ch2.tempErrorWin = eeprom_read_float((float*)eepromAdr_TempErrWin2);
    1be2:	80 e4       	ldi	r24, 0x40	; 64
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	0e 94 f6 25 	call	0x4bec	; 0x4bec <eeprom_read_dword>
    1bea:	60 93 fb 01 	sts	0x01FB, r22
    1bee:	70 93 fc 01 	sts	0x01FC, r23
    1bf2:	80 93 fd 01 	sts	0x01FD, r24
    1bf6:	90 93 fe 01 	sts	0x01FE, r25
	ch2.tempSettleTime = eeprom_read_word((uint16_t*)eepromAdr_TSettleTime2);	
    1bfa:	84 e4       	ldi	r24, 0x44	; 68
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <eeprom_read_word>
    1c02:	90 93 02 02 	sts	0x0202, r25
    1c06:	80 93 01 02 	sts	0x0201, r24
	
	ch3.TempSetPoint = eeprom_read_float((float*)eepromAdr_TempSetPoint3);
    1c0a:	88 e4       	ldi	r24, 0x48	; 72
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	0e 94 f6 25 	call	0x4bec	; 0x4bec <eeprom_read_dword>
    1c12:	d8 01       	movw	r26, r16
    1c14:	6d 93       	st	X+, r22
    1c16:	7d 93       	st	X+, r23
    1c18:	8d 93       	st	X+, r24
    1c1a:	9c 93       	st	X, r25
    1c1c:	13 97       	sbiw	r26, 0x03	; 3
	ch3.Pgain = eeprom_read_float((float*)eepromAdr_PgainCh3);
    1c1e:	8c e4       	ldi	r24, 0x4C	; 76
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	0e 94 f6 25 	call	0x4bec	; 0x4bec <eeprom_read_dword>
    1c26:	f8 01       	movw	r30, r16
    1c28:	64 8f       	std	Z+28, r22	; 0x1c
    1c2a:	75 8f       	std	Z+29, r23	; 0x1d
    1c2c:	86 8f       	std	Z+30, r24	; 0x1e
    1c2e:	97 8f       	std	Z+31, r25	; 0x1f
	ch3.Igain = eeprom_read_float((float*)eepromAdr_IgainCh3);
    1c30:	80 e5       	ldi	r24, 0x50	; 80
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	0e 94 f6 25 	call	0x4bec	; 0x4bec <eeprom_read_dword>
    1c38:	d8 01       	movw	r26, r16
    1c3a:	90 96       	adiw	r26, 0x20	; 32
    1c3c:	6d 93       	st	X+, r22
    1c3e:	7d 93       	st	X+, r23
    1c40:	8d 93       	st	X+, r24
    1c42:	9c 93       	st	X, r25
    1c44:	93 97       	sbiw	r26, 0x23	; 35
	ch3.Dgain = eeprom_read_float((float*)eepromAdr_DgainCh3);			
    1c46:	84 e5       	ldi	r24, 0x54	; 84
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	0e 94 f6 25 	call	0x4bec	; 0x4bec <eeprom_read_dword>
    1c4e:	f8 01       	movw	r30, r16
    1c50:	64 a3       	std	Z+36, r22	; 0x24
    1c52:	75 a3       	std	Z+37, r23	; 0x25
    1c54:	86 a3       	std	Z+38, r24	; 0x26
    1c56:	97 a3       	std	Z+39, r25	; 0x27
	ch3.tempErrorWin = eeprom_read_float((float*)eepromAdr_TempErrWin3);
    1c58:	88 e5       	ldi	r24, 0x58	; 88
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	0e 94 f6 25 	call	0x4bec	; 0x4bec <eeprom_read_dword>
    1c60:	60 93 98 01 	sts	0x0198, r22
    1c64:	70 93 99 01 	sts	0x0199, r23
    1c68:	80 93 9a 01 	sts	0x019A, r24
    1c6c:	90 93 9b 01 	sts	0x019B, r25
	ch3.tempSettleTime = eeprom_read_word((uint16_t*)eepromAdr_TSettleTime3);	
    1c70:	8c e5       	ldi	r24, 0x5C	; 92
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <eeprom_read_word>
    1c78:	90 93 9f 01 	sts	0x019F, r25
    1c7c:	80 93 9e 01 	sts	0x019E, r24
	printStatus(data);
}

static inline void MAX31865initAuto(uint8_t ch)
{
	MaxRTDinit(0xC3, ch);
    1c80:	61 e0       	ldi	r22, 0x01	; 1
    1c82:	83 ec       	ldi	r24, 0xC3	; 195
    1c84:	0e 94 a7 01 	call	0x34e	; 0x34e <MaxRTDinit>
    1c88:	62 e0       	ldi	r22, 0x02	; 2
    1c8a:	83 ec       	ldi	r24, 0xC3	; 195
    1c8c:	0e 94 a7 01 	call	0x34e	; 0x34e <MaxRTDinit>
    1c90:	63 e0       	ldi	r22, 0x03	; 3
    1c92:	83 ec       	ldi	r24, 0xC3	; 195
    1c94:	0e 94 a7 01 	call	0x34e	; 0x34e <MaxRTDinit>
    1c98:	64 e0       	ldi	r22, 0x04	; 4
    1c9a:	83 ec       	ldi	r24, 0xC3	; 195
    1c9c:	0e 94 a7 01 	call	0x34e	; 0x34e <MaxRTDinit>
}

static inline void TimerInit(void)
{
	// Timer0 PWM output
	TIMSK0 = _BV(OCIE0A);				// Enable Interrupt TimerCounter0 Compare Match A (TIMER0_COMPA_vect)
    1ca0:	82 e0       	ldi	r24, 0x02	; 2
    1ca2:	80 93 6e 00 	sts	0x006E, r24
	TCCR0A = _BV(WGM01);				// Mode = CTC (Clear Timer on Compare)
    1ca6:	84 bd       	out	0x24, r24	; 36
	TCCR0B = _BV(CS02) | _BV(CS00);		// 16MHz/1024, 0.000064 seconds per tick
    1ca8:	95 e0       	ldi	r25, 0x05	; 5
    1caa:	95 bd       	out	0x25, r25	; 37
	OCR0A = 16;							// TIMER0_COMPA_vect will be triggered each 0.000064 x 16 = 0.001024 s (976.5 Hz)
    1cac:	90 e1       	ldi	r25, 0x10	; 16
    1cae:	97 bd       	out	0x27, r25	; 39

	// Timer2 PID controller	
	TIMSK2 = _BV(OCIE2A);				// Enable Interrupt TimerCounter2 Compare Match A (TIMER2_COMPA_vect)
    1cb0:	80 93 70 00 	sts	0x0070, r24
	TCCR2A = _BV(WGM21);				// Mode = CTC (Clear Timer on Compare)
    1cb4:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B = _BV(CS22) | _BV(CS21) | _BV(CS20);		// 16MHz/1024, 0.000064 seconds per tick
    1cb8:	87 e0       	ldi	r24, 0x07	; 7
    1cba:	80 93 b1 00 	sts	0x00B1, r24
	OCR2A = 255;						// TIMER2_COMPA_vect will be triggered each 0.000064 x 255 = 0.01632 s (61.3 Hz)
    1cbe:	70 92 b3 00 	sts	0x00B3, r7
	
	sei();
    1cc2:	78 94       	sei
	*	PC:		#12A?VR104
	*	ATMega:	!12A70.0006DCA
	***********************************************************/
	while(1)
	{
		memset(rx_string, 0x00, rx_size);			// Purge rx_string
    1cc4:	0f 2e       	mov	r0, r31
    1cc6:	f0 ee       	ldi	r31, 0xE0	; 224
    1cc8:	af 2e       	mov	r10, r31
    1cca:	f4 e0       	ldi	r31, 0x04	; 4
    1ccc:	bf 2e       	mov	r11, r31
    1cce:	f0 2d       	mov	r31, r0
 * \returns next data byte in buffer
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
    1cd0:	0f 2e       	mov	r0, r31
    1cd2:	fb ed       	ldi	r31, 0xDB	; 219
    1cd4:	4f 2e       	mov	r4, r31
    1cd6:	f4 e0       	ldi	r31, 0x04	; 4
    1cd8:	5f 2e       	mov	r5, r31
    1cda:	f0 2d       	mov	r31, r0
    1cdc:	0f 2e       	mov	r0, r31
    1cde:	fe ef       	ldi	r31, 0xFE	; 254
    1ce0:	6f 2e       	mov	r6, r31
    1ce2:	f4 e0       	ldi	r31, 0x04	; 4
    1ce4:	7f 2e       	mov	r7, r31
    1ce6:	f0 2d       	mov	r31, r0
    1ce8:	1e 01       	movw	r2, r28
    1cea:	fa e5       	ldi	r31, 0x5A	; 90
    1cec:	2f 0e       	add	r2, r31
    1cee:	31 1c       	adc	r3, r1
    1cf0:	e3 96       	adiw	r28, 0x33	; 51
    1cf2:	af ae       	std	Y+63, r10	; 0x3f
    1cf4:	e3 97       	sbiw	r28, 0x33	; 51
    1cf6:	e4 96       	adiw	r28, 0x34	; 52
    1cf8:	bf ae       	std	Y+63, r11	; 0x3f
    1cfa:	e4 97       	sbiw	r28, 0x34	; 52
    1cfc:	e5 96       	adiw	r28, 0x35	; 53
    1cfe:	af ae       	std	Y+63, r10	; 0x3f
    1d00:	e5 97       	sbiw	r28, 0x35	; 53
    1d02:	8b 2c       	mov	r8, r11
    1d04:	d3 2c       	mov	r13, r3
    1d06:	e0 96       	adiw	r28, 0x30	; 48
    1d08:	bf ae       	std	Y+63, r11	; 0x3f
    1d0a:	ae ae       	std	Y+62, r10	; 0x3e
    1d0c:	e0 97       	sbiw	r28, 0x30	; 48
    1d0e:	e2 96       	adiw	r28, 0x32	; 50
    1d10:	3f ae       	std	Y+63, r3	; 0x3f
    1d12:	2e ae       	std	Y+62, r2	; 0x3e
    1d14:	e2 97       	sbiw	r28, 0x32	; 50
    1d16:	32 2c       	mov	r3, r2
    1d18:	bd 2c       	mov	r11, r13
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    1d1a:	e3 96       	adiw	r28, 0x33	; 51
    1d1c:	9f ac       	ldd	r9, Y+63	; 0x3f
    1d1e:	e3 97       	sbiw	r28, 0x33	; 51
    1d20:	e4 96       	adiw	r28, 0x34	; 52
    1d22:	af ac       	ldd	r10, Y+63	; 0x3f
    1d24:	e4 97       	sbiw	r28, 0x34	; 52
	*	PC:		#12A?VR104
	*	ATMega:	!12A70.0006DCA
	***********************************************************/
	while(1)
	{
		memset(rx_string, 0x00, rx_size);			// Purge rx_string
    1d26:	0e e1       	ldi	r16, 0x1E	; 30
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    1d28:	10 e0       	ldi	r17, 0x00	; 0
    1d2a:	e0 96       	adiw	r28, 0x30	; 48
    1d2c:	ae ad       	ldd	r26, Y+62	; 0x3e
    1d2e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1d30:	e0 97       	sbiw	r28, 0x30	; 48
    1d32:	e0 2f       	mov	r30, r16
    1d34:	1d 92       	st	X+, r1
    1d36:	ea 95       	dec	r30
    1d38:	e9 f7       	brne	.-6      	; 0x1d34 <main+0x3ec>
 * \returns next data byte in buffer
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
    1d3a:	d2 01       	movw	r26, r4
    1d3c:	13 96       	adiw	r26, 0x03	; 3
    1d3e:	6d 91       	ld	r22, X+
    1d40:	7c 91       	ld	r23, X
    1d42:	14 97       	sbiw	r26, 0x04	; 4
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    1d44:	12 96       	adiw	r26, 0x02	; 2
    1d46:	4c 91       	ld	r20, X
    1d48:	50 e0       	ldi	r21, 0x00	; 0
    1d4a:	41 50       	subi	r20, 0x01	; 1
    1d4c:	51 09       	sbc	r21, r1
    1d4e:	e5 96       	adiw	r28, 0x35	; 53
    1d50:	ef ad       	ldd	r30, Y+63	; 0x3f
    1d52:	e5 97       	sbiw	r28, 0x35	; 53
    1d54:	f8 2d       	mov	r31, r8
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    1d56:	d2 01       	movw	r26, r4
    1d58:	11 96       	adiw	r26, 0x01	; 1
    1d5a:	8c 91       	ld	r24, X
    1d5c:	11 97       	sbiw	r26, 0x01	; 1
    1d5e:	9c 91       	ld	r25, X

		for(i = 0; i < rx_size; i++)
		{
			while(!uart_char_waiting());
    1d60:	98 17       	cp	r25, r24
    1d62:	c9 f3       	breq	.-14     	; 0x1d56 <main+0x40e>
 * \returns next data byte in buffer
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
    1d64:	11 96       	adiw	r26, 0x01	; 1
    1d66:	8c 91       	ld	r24, X
    1d68:	db 01       	movw	r26, r22
    1d6a:	a8 0f       	add	r26, r24
    1d6c:	b1 1d       	adc	r27, r1
    1d6e:	9c 91       	ld	r25, X
 *
 * \returns the next read offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_read(const struct ring_buffer *ring)
{
	return get_next(ring->read_offset, ring->size);
    1d70:	d2 01       	movw	r26, r4
    1d72:	11 96       	adiw	r26, 0x01	; 1
    1d74:	8c 91       	ld	r24, X
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    1d76:	28 2f       	mov	r18, r24
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	24 17       	cp	r18, r20
    1d7c:	35 07       	cpc	r19, r21
    1d7e:	11 f0       	breq	.+4      	; 0x1d84 <main+0x43c>
    1d80:	8f 5f       	subi	r24, 0xFF	; 255
    1d82:	01 c0       	rjmp	.+2      	; 0x1d86 <main+0x43e>
    1d84:	81 2f       	mov	r24, r17
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
	ring->read_offset = ring_buffer_get_next_read(ring);
    1d86:	d2 01       	movw	r26, r4
    1d88:	11 96       	adiw	r26, 0x01	; 1
    1d8a:	8c 93       	st	X, r24
			rx_string[i] = uart_getchar();			// Collect the message
    1d8c:	91 93       	st	Z+, r25
			if(rx_string[i] == 0x0D)				// Terminate acquisition if <CR> received
    1d8e:	9d 30       	cpi	r25, 0x0D	; 13
    1d90:	19 f0       	breq	.+6      	; 0x1d98 <main+0x450>
	***********************************************************/
	while(1)
	{
		memset(rx_string, 0x00, rx_size);			// Purge rx_string

		for(i = 0; i < rx_size; i++)
    1d92:	e6 15       	cp	r30, r6
    1d94:	f7 05       	cpc	r31, r7
    1d96:	f9 f6       	brne	.-66     	; 0x1d56 <main+0x40e>
			{
				break;
			}	
		}

		if(rx_string[0] == '#')
    1d98:	e0 96       	adiw	r28, 0x30	; 48
    1d9a:	ee ad       	ldd	r30, Y+62	; 0x3e
    1d9c:	ff ad       	ldd	r31, Y+63	; 0x3f
    1d9e:	e0 97       	sbiw	r28, 0x30	; 48
    1da0:	80 81       	ld	r24, Z
    1da2:	83 32       	cpi	r24, 0x23	; 35
    1da4:	11 f6       	brne	.-124    	; 0x1d2a <main+0x3e2>
		{
			pos = NULL;
			pos = strchr(rx_string, '?');
    1da6:	6f e3       	ldi	r22, 0x3F	; 63
    1da8:	70 e0       	ldi	r23, 0x00	; 0
    1daa:	89 2d       	mov	r24, r9
    1dac:	9a 2d       	mov	r25, r10
    1dae:	0e 94 08 24 	call	0x4810	; 0x4810 <strchr>
    1db2:	8c 01       	movw	r16, r24
			if(pos != NULL)							
    1db4:	00 97       	sbiw	r24, 0x00	; 0
    1db6:	11 f4       	brne	.+4      	; 0x1dbc <main+0x474>
    1db8:	0c 94 c4 18 	jmp	0x3188	; 0x3188 <main+0x1840>
			{
				requestCmd[0] = *(pos + 1);			// Parse request command	
    1dbc:	e2 ed       	ldi	r30, 0xD2	; 210
    1dbe:	f2 e0       	ldi	r31, 0x02	; 2
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	11 96       	adiw	r26, 0x01	; 1
    1dc4:	8c 91       	ld	r24, X
    1dc6:	11 97       	sbiw	r26, 0x01	; 1
    1dc8:	80 83       	st	Z, r24
				requestCmd[1] = *(pos + 2);
    1dca:	12 96       	adiw	r26, 0x02	; 2
    1dcc:	8c 91       	ld	r24, X
    1dce:	81 83       	std	Z+1, r24	; 0x01

				if(strcmp(requestCmd, "IF") == 0)
    1dd0:	66 e1       	ldi	r22, 0x16	; 22
    1dd2:	71 e0       	ldi	r23, 0x01	; 1
    1dd4:	cf 01       	movw	r24, r30
    1dd6:	0e 94 13 24 	call	0x4826	; 0x4826 <strcmp>
    1dda:	89 2b       	or	r24, r25
    1ddc:	b9 f5       	brne	.+110    	; 0x1e4c <main+0x504>
				{
					crc[0] = *(pos + 3);			// Parse incoming crc
    1dde:	e6 ed       	ldi	r30, 0xD6	; 214
    1de0:	f4 e0       	ldi	r31, 0x04	; 4
    1de2:	d8 01       	movw	r26, r16
    1de4:	13 96       	adiw	r26, 0x03	; 3
    1de6:	8c 91       	ld	r24, X
    1de8:	13 97       	sbiw	r26, 0x03	; 3
    1dea:	80 83       	st	Z, r24
					crc[1] = *(pos + 4);
    1dec:	14 96       	adiw	r26, 0x04	; 4
    1dee:	8c 91       	ld	r24, X
    1df0:	14 97       	sbiw	r26, 0x04	; 4
    1df2:	81 83       	std	Z+1, r24	; 0x01
					crc[2] = *(pos + 5);
    1df4:	15 96       	adiw	r26, 0x05	; 5
    1df6:	8c 91       	ld	r24, X
    1df8:	15 97       	sbiw	r26, 0x05	; 5
    1dfa:	82 83       	std	Z+2, r24	; 0x02
					crc[3] = *(pos + 6);
    1dfc:	16 96       	adiw	r26, 0x06	; 6
    1dfe:	8c 91       	ld	r24, X
    1e00:	83 83       	std	Z+3, r24	; 0x03

					itoa(GenCrc16(rx_string, (int)strnlen(rx_string, rx_size)-5), inCrC_string, 16);
    1e02:	6e e1       	ldi	r22, 0x1E	; 30
    1e04:	70 e0       	ldi	r23, 0x00	; 0
    1e06:	89 2d       	mov	r24, r9
    1e08:	9a 2d       	mov	r25, r10
    1e0a:	0e 94 1c 24 	call	0x4838	; 0x4838 <strnlen>
    1e0e:	bc 01       	movw	r22, r24
    1e10:	65 50       	subi	r22, 0x05	; 5
    1e12:	71 09       	sbc	r23, r1
    1e14:	89 2d       	mov	r24, r9
    1e16:	9a 2d       	mov	r25, r10
    1e18:	0e 94 c8 01 	call	0x390	; 0x390 <GenCrc16>
    1e1c:	40 e1       	ldi	r20, 0x10	; 16
    1e1e:	be 01       	movw	r22, r28
    1e20:	63 5d       	subi	r22, 0xD3	; 211
    1e22:	7f 4f       	sbci	r23, 0xFF	; 255
    1e24:	0e 94 31 24 	call	0x4862	; 0x4862 <__itoa_ncheck>
					if(CrcCompare(crc, inCrC_string) == true)
    1e28:	be 01       	movw	r22, r28
    1e2a:	63 5d       	subi	r22, 0xD3	; 211
    1e2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e2e:	86 ed       	ldi	r24, 0xD6	; 214
    1e30:	94 e0       	ldi	r25, 0x04	; 4
    1e32:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <CrcCompare>
    1e36:	88 23       	and	r24, r24
    1e38:	29 f0       	breq	.+10     	; 0x1e44 <main+0x4fc>
					{
						printStatus(s_string);	
    1e3a:	ce 01       	movw	r24, r28
    1e3c:	49 96       	adiw	r24, 0x19	; 25
    1e3e:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    1e42:	04 c0       	rjmp	.+8      	; 0x1e4c <main+0x504>
					}
					else
					{
						printStatus("CRC error");
    1e44:	89 e1       	ldi	r24, 0x19	; 25
    1e46:	91 e0       	ldi	r25, 0x01	; 1
    1e48:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
						//printStatus(rx_string);
					}
				}
					
				if(strcmp(requestCmd, "VR") == 0)
    1e4c:	63 e2       	ldi	r22, 0x23	; 35
    1e4e:	71 e0       	ldi	r23, 0x01	; 1
    1e50:	82 ed       	ldi	r24, 0xD2	; 210
    1e52:	92 e0       	ldi	r25, 0x02	; 2
    1e54:	0e 94 13 24 	call	0x4826	; 0x4826 <strcmp>
    1e58:	89 2b       	or	r24, r25
    1e5a:	11 f0       	breq	.+4      	; 0x1e60 <main+0x518>
    1e5c:	0c 94 c4 18 	jmp	0x3188	; 0x3188 <main+0x1840>
				{
					requestID[0] = *(pos + 3);		// Parse request ID
    1e60:	f8 01       	movw	r30, r16
    1e62:	83 81       	ldd	r24, Z+3	; 0x03
    1e64:	8d 8b       	std	Y+21, r24	; 0x15
					requestID[1] = *(pos + 4);
    1e66:	84 81       	ldd	r24, Z+4	; 0x04
    1e68:	8e 8b       	std	Y+22, r24	; 0x16
					requestID[2] = *(pos + 5);
    1e6a:	85 81       	ldd	r24, Z+5	; 0x05
    1e6c:	8f 8b       	std	Y+23, r24	; 0x17
					crc[0] = *(pos + 6);			// Parse incoming crc
    1e6e:	e6 ed       	ldi	r30, 0xD6	; 214
    1e70:	f4 e0       	ldi	r31, 0x04	; 4
    1e72:	d8 01       	movw	r26, r16
    1e74:	16 96       	adiw	r26, 0x06	; 6
    1e76:	8c 91       	ld	r24, X
    1e78:	16 97       	sbiw	r26, 0x06	; 6
    1e7a:	80 83       	st	Z, r24
					crc[1] = *(pos + 7);
    1e7c:	17 96       	adiw	r26, 0x07	; 7
    1e7e:	8c 91       	ld	r24, X
    1e80:	17 97       	sbiw	r26, 0x07	; 7
    1e82:	81 83       	std	Z+1, r24	; 0x01
					crc[2] = *(pos + 8);
    1e84:	18 96       	adiw	r26, 0x08	; 8
    1e86:	8c 91       	ld	r24, X
    1e88:	18 97       	sbiw	r26, 0x08	; 8
    1e8a:	82 83       	std	Z+2, r24	; 0x02
					crc[3] = *(pos + 9);
    1e8c:	19 96       	adiw	r26, 0x09	; 9
    1e8e:	8c 91       	ld	r24, X
    1e90:	83 83       	std	Z+3, r24	; 0x03
					
					itoa(GenCrc16(rx_string, (int)strnlen(rx_string, rx_size)-5), inCrC_string, 16);
    1e92:	6e e1       	ldi	r22, 0x1E	; 30
    1e94:	70 e0       	ldi	r23, 0x00	; 0
    1e96:	89 2d       	mov	r24, r9
    1e98:	9a 2d       	mov	r25, r10
    1e9a:	0e 94 1c 24 	call	0x4838	; 0x4838 <strnlen>
    1e9e:	bc 01       	movw	r22, r24
    1ea0:	65 50       	subi	r22, 0x05	; 5
    1ea2:	71 09       	sbc	r23, r1
    1ea4:	89 2d       	mov	r24, r9
    1ea6:	9a 2d       	mov	r25, r10
    1ea8:	0e 94 c8 01 	call	0x390	; 0x390 <GenCrc16>
    1eac:	40 e1       	ldi	r20, 0x10	; 16
    1eae:	be 01       	movw	r22, r28
    1eb0:	63 5d       	subi	r22, 0xD3	; 211
    1eb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1eb4:	0e 94 31 24 	call	0x4862	; 0x4862 <__itoa_ncheck>
					if(CrcCompare(crc, inCrC_string) == true)
    1eb8:	be 01       	movw	r22, r28
    1eba:	63 5d       	subi	r22, 0xD3	; 211
    1ebc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ebe:	86 ed       	ldi	r24, 0xD6	; 214
    1ec0:	94 e0       	ldi	r25, 0x04	; 4
    1ec2:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <CrcCompare>
    1ec6:	88 23       	and	r24, r24
    1ec8:	11 f4       	brne	.+4      	; 0x1ece <main+0x586>
    1eca:	0c 94 c0 18 	jmp	0x3180	; 0x3180 <main+0x1838>
					{					
						var = atol(requestID);
    1ece:	ce 01       	movw	r24, r28
    1ed0:	45 96       	adiw	r24, 0x15	; 21
    1ed2:	0e 94 d7 23 	call	0x47ae	; 0x47ae <atol>

static inline void SendParameter(int id)
{
	char tx_string[20];

	switch(id)
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	77 0f       	add	r23, r23
    1eda:	aa 0b       	sbc	r26, r26
    1edc:	bb 0b       	sbc	r27, r27
    1ede:	fc 01       	movw	r30, r24
    1ee0:	e4 56       	subi	r30, 0x64	; 100
    1ee2:	f1 09       	sbc	r31, r1
    1ee4:	e7 33       	cpi	r30, 0x37	; 55
    1ee6:	b1 e0       	ldi	r27, 0x01	; 1
    1ee8:	fb 07       	cpc	r31, r27
    1eea:	10 f0       	brcs	.+4      	; 0x1ef0 <main+0x5a8>
    1eec:	0c 94 bb 18 	jmp	0x3176	; 0x3176 <main+0x182e>
    1ef0:	ec 5c       	subi	r30, 0xCC	; 204
    1ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef4:	0c 94 b1 23 	jmp	0x4762	; 0x4762 <__tablejump2__>
	{
		// *** Channel 0 ***
		case 100:	// Send sensor 1 temperature		
		ftoa(ch0.TempSensor, tx_string);
    1ef8:	60 91 71 02 	lds	r22, 0x0271
    1efc:	70 91 72 02 	lds	r23, 0x0272
    1f00:	80 91 73 02 	lds	r24, 0x0273
    1f04:	90 91 74 02 	lds	r25, 0x0274
    1f08:	43 2d       	mov	r20, r3
    1f0a:	5b 2d       	mov	r21, r11
    1f0c:	96 dc       	rcall	.-1748   	; 0x183a <ftoa>
		printStatus(tx_string);
    1f0e:	83 2d       	mov	r24, r3
    1f10:	9b 2d       	mov	r25, r11
    1f12:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    1f16:	0c 94 c4 18 	jmp	0x3188	; 0x3188 <main+0x1840>
		break;
		
		case 101:	// Send P part of PID-controller 1
		ftoa(ch0.P_err, tx_string);
    1f1a:	60 91 75 02 	lds	r22, 0x0275
    1f1e:	70 91 76 02 	lds	r23, 0x0276
    1f22:	80 91 77 02 	lds	r24, 0x0277
    1f26:	90 91 78 02 	lds	r25, 0x0278
    1f2a:	43 2d       	mov	r20, r3
    1f2c:	5b 2d       	mov	r21, r11
    1f2e:	85 dc       	rcall	.-1782   	; 0x183a <ftoa>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    1f30:	81 e2       	ldi	r24, 0x21	; 33
    1f32:	8a ab       	std	Y+50, r24	; 0x32
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    1f34:	e0 96       	adiw	r28, 0x30	; 48
    1f36:	ee ad       	ldd	r30, Y+62	; 0x3e
    1f38:	ff ad       	ldd	r31, Y+63	; 0x3f
    1f3a:	e0 97       	sbiw	r28, 0x30	; 48
    1f3c:	81 81       	ldd	r24, Z+1	; 0x01
    1f3e:	8b ab       	std	Y+51, r24	; 0x33
    1f40:	82 81       	ldd	r24, Z+2	; 0x02
    1f42:	8c ab       	std	Y+52, r24	; 0x34
    1f44:	83 81       	ldd	r24, Z+3	; 0x03
    1f46:	8d ab       	std	Y+53, r24	; 0x35
    1f48:	e3 2d       	mov	r30, r3
    1f4a:	fb 2d       	mov	r31, r11
    1f4c:	de 01       	movw	r26, r28
    1f4e:	d6 96       	adiw	r26, 0x36	; 54
    1f50:	00 e0       	ldi	r16, 0x00	; 0
    1f52:	10 e0       	ldi	r17, 0x00	; 0
    1f54:	af 01       	movw	r20, r30
    1f56:	06 c0       	rjmp	.+12     	; 0x1f64 <main+0x61c>
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    1f58:	fa 01       	movw	r30, r20
    1f5a:	81 91       	ld	r24, Z+
    1f5c:	af 01       	movw	r20, r30
    1f5e:	8d 93       	st	X+, r24
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    1f60:	0f 5f       	subi	r16, 0xFF	; 255
    1f62:	1f 4f       	sbci	r17, 0xFF	; 255
    1f64:	e2 96       	adiw	r28, 0x32	; 50
    1f66:	ee ad       	ldd	r30, Y+62	; 0x3e
    1f68:	ff ad       	ldd	r31, Y+63	; 0x3f
    1f6a:	e2 97       	sbiw	r28, 0x32	; 50
    1f6c:	01 90       	ld	r0, Z+
    1f6e:	00 20       	and	r0, r0
    1f70:	e9 f7       	brne	.-6      	; 0x1f6c <main+0x624>
    1f72:	cf 01       	movw	r24, r30
    1f74:	e2 96       	adiw	r28, 0x32	; 50
    1f76:	2e ad       	ldd	r18, Y+62	; 0x3e
    1f78:	3f ad       	ldd	r19, Y+63	; 0x3f
    1f7a:	e2 97       	sbiw	r28, 0x32	; 50
    1f7c:	82 1b       	sub	r24, r18
    1f7e:	93 0b       	sbc	r25, r19
    1f80:	02 96       	adiw	r24, 0x02	; 2
    1f82:	08 17       	cp	r16, r24
    1f84:	19 07       	cpc	r17, r25
    1f86:	40 f3       	brcs	.-48     	; 0x1f58 <main+0x610>
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    1f88:	78 01       	movw	r14, r16
    1f8a:	3f ef       	ldi	r19, 0xFF	; 255
    1f8c:	e3 1a       	sub	r14, r19
    1f8e:	f3 0a       	sbc	r15, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    1f90:	1e 14       	cp	r1, r14
    1f92:	1f 04       	cpc	r1, r15
    1f94:	14 f0       	brlt	.+4      	; 0x1f9a <main+0x652>
    1f96:	0c 94 67 21 	jmp	0x42ce	; 0x42ce <main+0x2986>
    1f9a:	fe 01       	movw	r30, r28
    1f9c:	f2 96       	adiw	r30, 0x32	; 50
    1f9e:	b7 01       	movw	r22, r14
    1fa0:	6e 0f       	add	r22, r30
    1fa2:	7f 1f       	adc	r23, r31
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    1fa8:	b8 e0       	ldi	r27, 0x08	; 8
    1faa:	d1 2c       	mov	r13, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    1fac:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    1fae:	29 2f       	mov	r18, r25
    1fb0:	33 27       	eor	r19, r19
    1fb2:	27 fd       	sbrc	r18, 7
    1fb4:	3a 95       	dec	r19
    1fb6:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    1fb8:	32 2f       	mov	r19, r18
    1fba:	22 27       	eor	r18, r18
    1fbc:	4b 2f       	mov	r20, r27
    1fbe:	5d 2d       	mov	r21, r13
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    1fc0:	33 23       	and	r19, r19
    1fc2:	3c f4       	brge	.+14     	; 0x1fd2 <main+0x68a>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    1fc4:	22 0f       	add	r18, r18
    1fc6:	33 1f       	adc	r19, r19
    1fc8:	a1 e2       	ldi	r26, 0x21	; 33
    1fca:	2a 27       	eor	r18, r26
    1fcc:	a0 e1       	ldi	r26, 0x10	; 16
    1fce:	3a 27       	eor	r19, r26
    1fd0:	02 c0       	rjmp	.+4      	; 0x1fd6 <main+0x68e>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    1fd2:	22 0f       	add	r18, r18
    1fd4:	33 1f       	adc	r19, r19
    1fd6:	41 50       	subi	r20, 0x01	; 1
    1fd8:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    1fda:	91 f7       	brne	.-28     	; 0x1fc0 <main+0x678>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    1fdc:	98 2f       	mov	r25, r24
    1fde:	88 27       	eor	r24, r24
    1fe0:	82 27       	eor	r24, r18
    1fe2:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    1fe4:	e6 17       	cp	r30, r22
    1fe6:	f7 07       	cpc	r31, r23
    1fe8:	09 f7       	brne	.-62     	; 0x1fac <main+0x664>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    1fea:	6c 01       	movw	r12, r24
    1fec:	40 e1       	ldi	r20, 0x10	; 16
    1fee:	66 ed       	ldi	r22, 0xD6	; 214
    1ff0:	74 e0       	ldi	r23, 0x04	; 4
    1ff2:	0e 94 31 24 	call	0x4862	; 0x4862 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    1ff6:	86 ed       	ldi	r24, 0xD6	; 214
    1ff8:	94 e0       	ldi	r25, 0x04	; 4
    1ffa:	0e 94 27 24 	call	0x484e	; 0x484e <strupr>
	if(crcXmodem < 0x10)
    1ffe:	b0 e1       	ldi	r27, 0x10	; 16
    2000:	cb 16       	cp	r12, r27
    2002:	d1 04       	cpc	r13, r1
    2004:	98 f4       	brcc	.+38     	; 0x202c <main+0x6e4>
	{
		tx_string[cnt+4] = crc[0];
    2006:	80 91 d6 04 	lds	r24, 0x04D6
    200a:	fe 01       	movw	r30, r28
    200c:	e0 0f       	add	r30, r16
    200e:	f1 1f       	adc	r31, r17
    2010:	86 ab       	std	Z+54, r24	; 0x36
		tx_string[cnt+3] = '0';
    2012:	80 e3       	ldi	r24, 0x30	; 48
    2014:	fe 01       	movw	r30, r28
    2016:	e0 0f       	add	r30, r16
    2018:	f1 1f       	adc	r31, r17
    201a:	85 ab       	std	Z+53, r24	; 0x35
		tx_string[cnt+2] = '0';
    201c:	fe 01       	movw	r30, r28
    201e:	e0 0f       	add	r30, r16
    2020:	f1 1f       	adc	r31, r17
    2022:	84 ab       	std	Z+52, r24	; 0x34
		tx_string[cnt+1] = '0';
    2024:	fe 01       	movw	r30, r28
    2026:	ee 0d       	add	r30, r14
    2028:	ff 1d       	adc	r31, r15
    202a:	82 ab       	std	Z+50, r24	; 0x32
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    202c:	c6 01       	movw	r24, r12
    202e:	40 97       	sbiw	r24, 0x10	; 16
    2030:	80 3f       	cpi	r24, 0xF0	; 240
    2032:	91 05       	cpc	r25, r1
    2034:	b8 f4       	brcc	.+46     	; 0x2064 <main+0x71c>
	{
		tx_string[cnt+4] = crc[1];
    2036:	a6 ed       	ldi	r26, 0xD6	; 214
    2038:	b4 e0       	ldi	r27, 0x04	; 4
    203a:	11 96       	adiw	r26, 0x01	; 1
    203c:	8c 91       	ld	r24, X
    203e:	11 97       	sbiw	r26, 0x01	; 1
    2040:	fe 01       	movw	r30, r28
    2042:	e0 0f       	add	r30, r16
    2044:	f1 1f       	adc	r31, r17
    2046:	86 ab       	std	Z+54, r24	; 0x36
		tx_string[cnt+3] = crc[0];
    2048:	8c 91       	ld	r24, X
    204a:	fe 01       	movw	r30, r28
    204c:	e0 0f       	add	r30, r16
    204e:	f1 1f       	adc	r31, r17
    2050:	85 ab       	std	Z+53, r24	; 0x35
		tx_string[cnt+2] = '0';
    2052:	80 e3       	ldi	r24, 0x30	; 48
    2054:	fe 01       	movw	r30, r28
    2056:	e0 0f       	add	r30, r16
    2058:	f1 1f       	adc	r31, r17
    205a:	84 ab       	std	Z+52, r24	; 0x34
		tx_string[cnt+1] = '0';		
    205c:	fe 01       	movw	r30, r28
    205e:	ee 0d       	add	r30, r14
    2060:	ff 1d       	adc	r31, r15
    2062:	82 ab       	std	Z+50, r24	; 0x32
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    2064:	c6 01       	movw	r24, r12
    2066:	9a 95       	dec	r25
    2068:	81 15       	cp	r24, r1
    206a:	9f 40       	sbci	r25, 0x0F	; 15
    206c:	b8 f4       	brcc	.+46     	; 0x209c <main+0x754>
	{
		tx_string[cnt+4] = crc[2];
    206e:	e6 ed       	ldi	r30, 0xD6	; 214
    2070:	f4 e0       	ldi	r31, 0x04	; 4
    2072:	82 81       	ldd	r24, Z+2	; 0x02
    2074:	de 01       	movw	r26, r28
    2076:	a0 0f       	add	r26, r16
    2078:	b1 1f       	adc	r27, r17
    207a:	d6 96       	adiw	r26, 0x36	; 54
    207c:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[1];
    207e:	81 81       	ldd	r24, Z+1	; 0x01
    2080:	de 01       	movw	r26, r28
    2082:	a0 0f       	add	r26, r16
    2084:	b1 1f       	adc	r27, r17
    2086:	d5 96       	adiw	r26, 0x35	; 53
    2088:	8c 93       	st	X, r24
    208a:	d5 97       	sbiw	r26, 0x35	; 53
		tx_string[cnt+2] = crc[0];
    208c:	80 81       	ld	r24, Z
    208e:	fd 01       	movw	r30, r26
    2090:	84 ab       	std	Z+52, r24	; 0x34
		tx_string[cnt+1] = '0';		
    2092:	80 e3       	ldi	r24, 0x30	; 48
    2094:	fe 01       	movw	r30, r28
    2096:	ee 0d       	add	r30, r14
    2098:	ff 1d       	adc	r31, r15
    209a:	82 ab       	std	Z+50, r24	; 0x32
	}
	if(crcXmodem >= 0x1000)
    209c:	c1 14       	cp	r12, r1
    209e:	f0 e1       	ldi	r31, 0x10	; 16
    20a0:	df 06       	cpc	r13, r31
    20a2:	c0 f0       	brcs	.+48     	; 0x20d4 <main+0x78c>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    20a4:	de 01       	movw	r26, r28
    20a6:	ae 0d       	add	r26, r14
    20a8:	bf 1d       	adc	r27, r15
    20aa:	e6 ed       	ldi	r30, 0xD6	; 214
    20ac:	f4 e0       	ldi	r31, 0x04	; 4
    20ae:	80 81       	ld	r24, Z
    20b0:	d2 96       	adiw	r26, 0x32	; 50
    20b2:	8c 93       	st	X, r24
		tx_string[cnt+2] = crc[1];
    20b4:	81 81       	ldd	r24, Z+1	; 0x01
    20b6:	de 01       	movw	r26, r28
    20b8:	a0 0f       	add	r26, r16
    20ba:	b1 1f       	adc	r27, r17
    20bc:	d4 96       	adiw	r26, 0x34	; 52
    20be:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[2];
    20c0:	82 81       	ldd	r24, Z+2	; 0x02
    20c2:	de 01       	movw	r26, r28
    20c4:	a0 0f       	add	r26, r16
    20c6:	b1 1f       	adc	r27, r17
    20c8:	d5 96       	adiw	r26, 0x35	; 53
    20ca:	8c 93       	st	X, r24
    20cc:	d5 97       	sbiw	r26, 0x35	; 53
		tx_string[cnt+4] = crc[3];
    20ce:	83 81       	ldd	r24, Z+3	; 0x03
    20d0:	fd 01       	movw	r30, r26
    20d2:	86 ab       	std	Z+54, r24	; 0x36
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    20d4:	c8 01       	movw	r24, r16
    20d6:	05 96       	adiw	r24, 0x05	; 5
    20d8:	fe 01       	movw	r30, r28
    20da:	e8 0f       	add	r30, r24
    20dc:	f9 1f       	adc	r31, r25
    20de:	2d e0       	ldi	r18, 0x0D	; 13
    20e0:	22 ab       	std	Z+50, r18	; 0x32
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    20e2:	99 23       	and	r25, r25
    20e4:	14 f4       	brge	.+4      	; 0x20ea <main+0x7a2>
    20e6:	0c 94 c4 18 	jmp	0x3188	; 0x3188 <main+0x1840>
    20ea:	fe 01       	movw	r30, r28
    20ec:	f2 96       	adiw	r30, 0x32	; 50
    20ee:	a8 01       	movw	r20, r16
    20f0:	4a 5f       	subi	r20, 0xFA	; 250
    20f2:	5f 4f       	sbci	r21, 0xFF	; 255
    20f4:	4e 0f       	add	r20, r30
    20f6:	5f 1f       	adc	r21, r31
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    20f8:	90 e0       	ldi	r25, 0x00	; 0
	{
		uart_putchar(tx_string[i]);
    20fa:	21 91       	ld	r18, Z+
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    20fc:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    20fe:	30 91 ff 04 	lds	r19, 0x04FF
    2102:	ae ef       	ldi	r26, 0xFE	; 254
    2104:	b4 e0       	ldi	r27, 0x04	; 4
    2106:	8c 91       	ld	r24, X
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    2108:	38 13       	cpse	r19, r24
    210a:	05 c0       	rjmp	.+10     	; 0x2116 <main+0x7ce>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    210c:	a1 ec       	ldi	r26, 0xC1	; 193
    210e:	b0 e0       	ldi	r27, 0x00	; 0
    2110:	8c 91       	ld	r24, X
    2112:	80 62       	ori	r24, 0x20	; 32
    2114:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    2116:	ae ef       	ldi	r26, 0xFE	; 254
    2118:	b4 e0       	ldi	r27, 0x04	; 4
    211a:	8c 91       	ld	r24, X
    211c:	a0 91 01 05 	lds	r26, 0x0501
    2120:	b0 91 02 05 	lds	r27, 0x0502
    2124:	a8 0f       	add	r26, r24
    2126:	b1 1d       	adc	r27, r1
    2128:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    212a:	ae ef       	ldi	r26, 0xFE	; 254
    212c:	b4 e0       	ldi	r27, 0x04	; 4
    212e:	8c 91       	ld	r24, X
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    2130:	68 2f       	mov	r22, r24
    2132:	70 e0       	ldi	r23, 0x00	; 0
    2134:	20 91 00 05 	lds	r18, 0x0500
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	21 50       	subi	r18, 0x01	; 1
    213c:	31 09       	sbc	r19, r1
    213e:	62 17       	cp	r22, r18
    2140:	73 07       	cpc	r23, r19
    2142:	11 f0       	breq	.+4      	; 0x2148 <main+0x800>
    2144:	8f 5f       	subi	r24, 0xFF	; 255
    2146:	01 c0       	rjmp	.+2      	; 0x214a <main+0x802>
    2148:	89 2f       	mov	r24, r25
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    214a:	ae ef       	ldi	r26, 0xFE	; 254
    214c:	b4 e0       	ldi	r27, 0x04	; 4
    214e:	8c 93       	st	X, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    2150:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    2152:	e4 17       	cp	r30, r20
    2154:	f5 07       	cpc	r31, r21
    2156:	89 f6       	brne	.-94     	; 0x20fa <main+0x7b2>
    2158:	0c 94 c4 18 	jmp	0x3188	; 0x3188 <main+0x1840>
		ftoa(ch0.P_err, tx_string);
		printStatus(tx_string);
		break;
		
		case 102:	// Send I part of PID-controller 1
		ftoa(ch0.I_err, tx_string);
    215c:	60 91 79 02 	lds	r22, 0x0279
    2160:	70 91 7a 02 	lds	r23, 0x027A
    2164:	80 91 7b 02 	lds	r24, 0x027B
    2168:	90 91 7c 02 	lds	r25, 0x027C
    216c:	43 2d       	mov	r20, r3
    216e:	5b 2d       	mov	r21, r11
    2170:	64 db       	rcall	.-2360   	; 0x183a <ftoa>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    2172:	81 e2       	ldi	r24, 0x21	; 33
    2174:	8a ab       	std	Y+50, r24	; 0x32
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    2176:	e0 96       	adiw	r28, 0x30	; 48
    2178:	ee ad       	ldd	r30, Y+62	; 0x3e
    217a:	ff ad       	ldd	r31, Y+63	; 0x3f
    217c:	e0 97       	sbiw	r28, 0x30	; 48
    217e:	81 81       	ldd	r24, Z+1	; 0x01
    2180:	8b ab       	std	Y+51, r24	; 0x33
    2182:	82 81       	ldd	r24, Z+2	; 0x02
    2184:	8c ab       	std	Y+52, r24	; 0x34
    2186:	83 81       	ldd	r24, Z+3	; 0x03
    2188:	8d ab       	std	Y+53, r24	; 0x35
    218a:	e3 2d       	mov	r30, r3
    218c:	fb 2d       	mov	r31, r11
    218e:	de 01       	movw	r26, r28
    2190:	d6 96       	adiw	r26, 0x36	; 54
    2192:	00 e0       	ldi	r16, 0x00	; 0
    2194:	10 e0       	ldi	r17, 0x00	; 0
    2196:	af 01       	movw	r20, r30
    2198:	06 c0       	rjmp	.+12     	; 0x21a6 <main+0x85e>
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    219a:	fa 01       	movw	r30, r20
    219c:	81 91       	ld	r24, Z+
    219e:	af 01       	movw	r20, r30
    21a0:	8d 93       	st	X+, r24
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    21a2:	0f 5f       	subi	r16, 0xFF	; 255
    21a4:	1f 4f       	sbci	r17, 0xFF	; 255
    21a6:	e2 96       	adiw	r28, 0x32	; 50
    21a8:	ee ad       	ldd	r30, Y+62	; 0x3e
    21aa:	ff ad       	ldd	r31, Y+63	; 0x3f
    21ac:	e2 97       	sbiw	r28, 0x32	; 50
    21ae:	01 90       	ld	r0, Z+
    21b0:	00 20       	and	r0, r0
    21b2:	e9 f7       	brne	.-6      	; 0x21ae <main+0x866>
    21b4:	cf 01       	movw	r24, r30
    21b6:	e2 96       	adiw	r28, 0x32	; 50
    21b8:	2e ad       	ldd	r18, Y+62	; 0x3e
    21ba:	3f ad       	ldd	r19, Y+63	; 0x3f
    21bc:	e2 97       	sbiw	r28, 0x32	; 50
    21be:	82 1b       	sub	r24, r18
    21c0:	93 0b       	sbc	r25, r19
    21c2:	02 96       	adiw	r24, 0x02	; 2
    21c4:	08 17       	cp	r16, r24
    21c6:	19 07       	cpc	r17, r25
    21c8:	40 f3       	brcs	.-48     	; 0x219a <main+0x852>
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    21ca:	78 01       	movw	r14, r16
    21cc:	3f ef       	ldi	r19, 0xFF	; 255
    21ce:	e3 1a       	sub	r14, r19
    21d0:	f3 0a       	sbc	r15, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    21d2:	1e 14       	cp	r1, r14
    21d4:	1f 04       	cpc	r1, r15
    21d6:	14 f0       	brlt	.+4      	; 0x21dc <main+0x894>
    21d8:	0c 94 74 21 	jmp	0x42e8	; 0x42e8 <main+0x29a0>
    21dc:	fe 01       	movw	r30, r28
    21de:	f2 96       	adiw	r30, 0x32	; 50
    21e0:	b7 01       	movw	r22, r14
    21e2:	6e 0f       	add	r22, r30
    21e4:	7f 1f       	adc	r23, r31
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	90 e0       	ldi	r25, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    21ea:	b8 e0       	ldi	r27, 0x08	; 8
    21ec:	d1 2c       	mov	r13, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    21ee:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    21f0:	29 2f       	mov	r18, r25
    21f2:	33 27       	eor	r19, r19
    21f4:	27 fd       	sbrc	r18, 7
    21f6:	3a 95       	dec	r19
    21f8:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    21fa:	32 2f       	mov	r19, r18
    21fc:	22 27       	eor	r18, r18
    21fe:	4b 2f       	mov	r20, r27
    2200:	5d 2d       	mov	r21, r13
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    2202:	33 23       	and	r19, r19
    2204:	3c f4       	brge	.+14     	; 0x2214 <main+0x8cc>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    2206:	22 0f       	add	r18, r18
    2208:	33 1f       	adc	r19, r19
    220a:	a1 e2       	ldi	r26, 0x21	; 33
    220c:	2a 27       	eor	r18, r26
    220e:	a0 e1       	ldi	r26, 0x10	; 16
    2210:	3a 27       	eor	r19, r26
    2212:	02 c0       	rjmp	.+4      	; 0x2218 <main+0x8d0>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    2214:	22 0f       	add	r18, r18
    2216:	33 1f       	adc	r19, r19
    2218:	41 50       	subi	r20, 0x01	; 1
    221a:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    221c:	91 f7       	brne	.-28     	; 0x2202 <main+0x8ba>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    221e:	98 2f       	mov	r25, r24
    2220:	88 27       	eor	r24, r24
    2222:	82 27       	eor	r24, r18
    2224:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    2226:	e6 17       	cp	r30, r22
    2228:	f7 07       	cpc	r31, r23
    222a:	09 f7       	brne	.-62     	; 0x21ee <main+0x8a6>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    222c:	6c 01       	movw	r12, r24
    222e:	40 e1       	ldi	r20, 0x10	; 16
    2230:	66 ed       	ldi	r22, 0xD6	; 214
    2232:	74 e0       	ldi	r23, 0x04	; 4
    2234:	0e 94 31 24 	call	0x4862	; 0x4862 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    2238:	86 ed       	ldi	r24, 0xD6	; 214
    223a:	94 e0       	ldi	r25, 0x04	; 4
    223c:	0e 94 27 24 	call	0x484e	; 0x484e <strupr>
	if(crcXmodem < 0x10)
    2240:	b0 e1       	ldi	r27, 0x10	; 16
    2242:	cb 16       	cp	r12, r27
    2244:	d1 04       	cpc	r13, r1
    2246:	98 f4       	brcc	.+38     	; 0x226e <main+0x926>
	{
		tx_string[cnt+4] = crc[0];
    2248:	80 91 d6 04 	lds	r24, 0x04D6
    224c:	fe 01       	movw	r30, r28
    224e:	e0 0f       	add	r30, r16
    2250:	f1 1f       	adc	r31, r17
    2252:	86 ab       	std	Z+54, r24	; 0x36
		tx_string[cnt+3] = '0';
    2254:	80 e3       	ldi	r24, 0x30	; 48
    2256:	fe 01       	movw	r30, r28
    2258:	e0 0f       	add	r30, r16
    225a:	f1 1f       	adc	r31, r17
    225c:	85 ab       	std	Z+53, r24	; 0x35
		tx_string[cnt+2] = '0';
    225e:	fe 01       	movw	r30, r28
    2260:	e0 0f       	add	r30, r16
    2262:	f1 1f       	adc	r31, r17
    2264:	84 ab       	std	Z+52, r24	; 0x34
		tx_string[cnt+1] = '0';
    2266:	fe 01       	movw	r30, r28
    2268:	ee 0d       	add	r30, r14
    226a:	ff 1d       	adc	r31, r15
    226c:	82 ab       	std	Z+50, r24	; 0x32
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    226e:	c6 01       	movw	r24, r12
    2270:	40 97       	sbiw	r24, 0x10	; 16
    2272:	80 3f       	cpi	r24, 0xF0	; 240
    2274:	91 05       	cpc	r25, r1
    2276:	b8 f4       	brcc	.+46     	; 0x22a6 <main+0x95e>
	{
		tx_string[cnt+4] = crc[1];
    2278:	a6 ed       	ldi	r26, 0xD6	; 214
    227a:	b4 e0       	ldi	r27, 0x04	; 4
    227c:	11 96       	adiw	r26, 0x01	; 1
    227e:	8c 91       	ld	r24, X
    2280:	11 97       	sbiw	r26, 0x01	; 1
    2282:	fe 01       	movw	r30, r28
    2284:	e0 0f       	add	r30, r16
    2286:	f1 1f       	adc	r31, r17
    2288:	86 ab       	std	Z+54, r24	; 0x36
		tx_string[cnt+3] = crc[0];
    228a:	8c 91       	ld	r24, X
    228c:	fe 01       	movw	r30, r28
    228e:	e0 0f       	add	r30, r16
    2290:	f1 1f       	adc	r31, r17
    2292:	85 ab       	std	Z+53, r24	; 0x35
		tx_string[cnt+2] = '0';
    2294:	80 e3       	ldi	r24, 0x30	; 48
    2296:	fe 01       	movw	r30, r28
    2298:	e0 0f       	add	r30, r16
    229a:	f1 1f       	adc	r31, r17
    229c:	84 ab       	std	Z+52, r24	; 0x34
		tx_string[cnt+1] = '0';		
    229e:	fe 01       	movw	r30, r28
    22a0:	ee 0d       	add	r30, r14
    22a2:	ff 1d       	adc	r31, r15
    22a4:	82 ab       	std	Z+50, r24	; 0x32
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    22a6:	c6 01       	movw	r24, r12
    22a8:	9a 95       	dec	r25
    22aa:	81 15       	cp	r24, r1
    22ac:	9f 40       	sbci	r25, 0x0F	; 15
    22ae:	b8 f4       	brcc	.+46     	; 0x22de <main+0x996>
	{
		tx_string[cnt+4] = crc[2];
    22b0:	e6 ed       	ldi	r30, 0xD6	; 214
    22b2:	f4 e0       	ldi	r31, 0x04	; 4
    22b4:	82 81       	ldd	r24, Z+2	; 0x02
    22b6:	de 01       	movw	r26, r28
    22b8:	a0 0f       	add	r26, r16
    22ba:	b1 1f       	adc	r27, r17
    22bc:	d6 96       	adiw	r26, 0x36	; 54
    22be:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[1];
    22c0:	81 81       	ldd	r24, Z+1	; 0x01
    22c2:	de 01       	movw	r26, r28
    22c4:	a0 0f       	add	r26, r16
    22c6:	b1 1f       	adc	r27, r17
    22c8:	d5 96       	adiw	r26, 0x35	; 53
    22ca:	8c 93       	st	X, r24
    22cc:	d5 97       	sbiw	r26, 0x35	; 53
		tx_string[cnt+2] = crc[0];
    22ce:	80 81       	ld	r24, Z
    22d0:	fd 01       	movw	r30, r26
    22d2:	84 ab       	std	Z+52, r24	; 0x34
		tx_string[cnt+1] = '0';		
    22d4:	80 e3       	ldi	r24, 0x30	; 48
    22d6:	fe 01       	movw	r30, r28
    22d8:	ee 0d       	add	r30, r14
    22da:	ff 1d       	adc	r31, r15
    22dc:	82 ab       	std	Z+50, r24	; 0x32
	}
	if(crcXmodem >= 0x1000)
    22de:	c1 14       	cp	r12, r1
    22e0:	f0 e1       	ldi	r31, 0x10	; 16
    22e2:	df 06       	cpc	r13, r31
    22e4:	c0 f0       	brcs	.+48     	; 0x2316 <main+0x9ce>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    22e6:	de 01       	movw	r26, r28
    22e8:	ae 0d       	add	r26, r14
    22ea:	bf 1d       	adc	r27, r15
    22ec:	e6 ed       	ldi	r30, 0xD6	; 214
    22ee:	f4 e0       	ldi	r31, 0x04	; 4
    22f0:	80 81       	ld	r24, Z
    22f2:	d2 96       	adiw	r26, 0x32	; 50
    22f4:	8c 93       	st	X, r24
		tx_string[cnt+2] = crc[1];
    22f6:	81 81       	ldd	r24, Z+1	; 0x01
    22f8:	de 01       	movw	r26, r28
    22fa:	a0 0f       	add	r26, r16
    22fc:	b1 1f       	adc	r27, r17
    22fe:	d4 96       	adiw	r26, 0x34	; 52
    2300:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[2];
    2302:	82 81       	ldd	r24, Z+2	; 0x02
    2304:	de 01       	movw	r26, r28
    2306:	a0 0f       	add	r26, r16
    2308:	b1 1f       	adc	r27, r17
    230a:	d5 96       	adiw	r26, 0x35	; 53
    230c:	8c 93       	st	X, r24
    230e:	d5 97       	sbiw	r26, 0x35	; 53
		tx_string[cnt+4] = crc[3];
    2310:	83 81       	ldd	r24, Z+3	; 0x03
    2312:	fd 01       	movw	r30, r26
    2314:	86 ab       	std	Z+54, r24	; 0x36
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    2316:	c8 01       	movw	r24, r16
    2318:	05 96       	adiw	r24, 0x05	; 5
    231a:	fe 01       	movw	r30, r28
    231c:	e8 0f       	add	r30, r24
    231e:	f9 1f       	adc	r31, r25
    2320:	2d e0       	ldi	r18, 0x0D	; 13
    2322:	22 ab       	std	Z+50, r18	; 0x32
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    2324:	99 23       	and	r25, r25
    2326:	0c f4       	brge	.+2      	; 0x232a <main+0x9e2>
    2328:	2f c7       	rjmp	.+3678   	; 0x3188 <main+0x1840>
    232a:	fe 01       	movw	r30, r28
    232c:	f2 96       	adiw	r30, 0x32	; 50
    232e:	a8 01       	movw	r20, r16
    2330:	4a 5f       	subi	r20, 0xFA	; 250
    2332:	5f 4f       	sbci	r21, 0xFF	; 255
    2334:	4e 0f       	add	r20, r30
    2336:	5f 1f       	adc	r21, r31
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    2338:	90 e0       	ldi	r25, 0x00	; 0
	{
		uart_putchar(tx_string[i]);
    233a:	21 91       	ld	r18, Z+
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    233c:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    233e:	30 91 ff 04 	lds	r19, 0x04FF
    2342:	ae ef       	ldi	r26, 0xFE	; 254
    2344:	b4 e0       	ldi	r27, 0x04	; 4
    2346:	8c 91       	ld	r24, X
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    2348:	38 13       	cpse	r19, r24
    234a:	05 c0       	rjmp	.+10     	; 0x2356 <main+0xa0e>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    234c:	a1 ec       	ldi	r26, 0xC1	; 193
    234e:	b0 e0       	ldi	r27, 0x00	; 0
    2350:	8c 91       	ld	r24, X
    2352:	80 62       	ori	r24, 0x20	; 32
    2354:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    2356:	ae ef       	ldi	r26, 0xFE	; 254
    2358:	b4 e0       	ldi	r27, 0x04	; 4
    235a:	8c 91       	ld	r24, X
    235c:	a0 91 01 05 	lds	r26, 0x0501
    2360:	b0 91 02 05 	lds	r27, 0x0502
    2364:	a8 0f       	add	r26, r24
    2366:	b1 1d       	adc	r27, r1
    2368:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    236a:	ae ef       	ldi	r26, 0xFE	; 254
    236c:	b4 e0       	ldi	r27, 0x04	; 4
    236e:	8c 91       	ld	r24, X
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    2370:	68 2f       	mov	r22, r24
    2372:	70 e0       	ldi	r23, 0x00	; 0
    2374:	20 91 00 05 	lds	r18, 0x0500
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	21 50       	subi	r18, 0x01	; 1
    237c:	31 09       	sbc	r19, r1
    237e:	62 17       	cp	r22, r18
    2380:	73 07       	cpc	r23, r19
    2382:	11 f0       	breq	.+4      	; 0x2388 <main+0xa40>
    2384:	8f 5f       	subi	r24, 0xFF	; 255
    2386:	01 c0       	rjmp	.+2      	; 0x238a <main+0xa42>
    2388:	89 2f       	mov	r24, r25
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    238a:	ae ef       	ldi	r26, 0xFE	; 254
    238c:	b4 e0       	ldi	r27, 0x04	; 4
    238e:	8c 93       	st	X, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    2390:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    2392:	e4 17       	cp	r30, r20
    2394:	f5 07       	cpc	r31, r21
    2396:	89 f6       	brne	.-94     	; 0x233a <main+0x9f2>
    2398:	f7 c6       	rjmp	.+3566   	; 0x3188 <main+0x1840>
		ftoa(ch0.I_err, tx_string);
		printStatus(tx_string);
		break;
				
		case 103:	// Send D part of PID-controller 1
		ftoa(ch0.D_err, tx_string);
    239a:	60 91 7d 02 	lds	r22, 0x027D
    239e:	70 91 7e 02 	lds	r23, 0x027E
    23a2:	80 91 7f 02 	lds	r24, 0x027F
    23a6:	90 91 80 02 	lds	r25, 0x0280
    23aa:	43 2d       	mov	r20, r3
    23ac:	5b 2d       	mov	r21, r11
    23ae:	45 da       	rcall	.-2934   	; 0x183a <ftoa>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    23b0:	81 e2       	ldi	r24, 0x21	; 33
    23b2:	8a ab       	std	Y+50, r24	; 0x32
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    23b4:	e0 96       	adiw	r28, 0x30	; 48
    23b6:	ee ad       	ldd	r30, Y+62	; 0x3e
    23b8:	ff ad       	ldd	r31, Y+63	; 0x3f
    23ba:	e0 97       	sbiw	r28, 0x30	; 48
    23bc:	81 81       	ldd	r24, Z+1	; 0x01
    23be:	8b ab       	std	Y+51, r24	; 0x33
    23c0:	82 81       	ldd	r24, Z+2	; 0x02
    23c2:	8c ab       	std	Y+52, r24	; 0x34
    23c4:	83 81       	ldd	r24, Z+3	; 0x03
    23c6:	8d ab       	std	Y+53, r24	; 0x35
    23c8:	e3 2d       	mov	r30, r3
    23ca:	fb 2d       	mov	r31, r11
    23cc:	de 01       	movw	r26, r28
    23ce:	d6 96       	adiw	r26, 0x36	; 54
    23d0:	00 e0       	ldi	r16, 0x00	; 0
    23d2:	10 e0       	ldi	r17, 0x00	; 0
    23d4:	af 01       	movw	r20, r30
    23d6:	06 c0       	rjmp	.+12     	; 0x23e4 <main+0xa9c>
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    23d8:	fa 01       	movw	r30, r20
    23da:	81 91       	ld	r24, Z+
    23dc:	af 01       	movw	r20, r30
    23de:	8d 93       	st	X+, r24
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    23e0:	0f 5f       	subi	r16, 0xFF	; 255
    23e2:	1f 4f       	sbci	r17, 0xFF	; 255
    23e4:	e2 96       	adiw	r28, 0x32	; 50
    23e6:	ee ad       	ldd	r30, Y+62	; 0x3e
    23e8:	ff ad       	ldd	r31, Y+63	; 0x3f
    23ea:	e2 97       	sbiw	r28, 0x32	; 50
    23ec:	01 90       	ld	r0, Z+
    23ee:	00 20       	and	r0, r0
    23f0:	e9 f7       	brne	.-6      	; 0x23ec <main+0xaa4>
    23f2:	cf 01       	movw	r24, r30
    23f4:	e2 96       	adiw	r28, 0x32	; 50
    23f6:	2e ad       	ldd	r18, Y+62	; 0x3e
    23f8:	3f ad       	ldd	r19, Y+63	; 0x3f
    23fa:	e2 97       	sbiw	r28, 0x32	; 50
    23fc:	82 1b       	sub	r24, r18
    23fe:	93 0b       	sbc	r25, r19
    2400:	02 96       	adiw	r24, 0x02	; 2
    2402:	08 17       	cp	r16, r24
    2404:	19 07       	cpc	r17, r25
    2406:	40 f3       	brcs	.-48     	; 0x23d8 <main+0xa90>
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    2408:	78 01       	movw	r14, r16
    240a:	3f ef       	ldi	r19, 0xFF	; 255
    240c:	e3 1a       	sub	r14, r19
    240e:	f3 0a       	sbc	r15, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    2410:	1e 14       	cp	r1, r14
    2412:	1f 04       	cpc	r1, r15
    2414:	14 f0       	brlt	.+4      	; 0x241a <main+0xad2>
    2416:	0c 94 81 21 	jmp	0x4302	; 0x4302 <main+0x29ba>
    241a:	fe 01       	movw	r30, r28
    241c:	f2 96       	adiw	r30, 0x32	; 50
    241e:	b7 01       	movw	r22, r14
    2420:	6e 0f       	add	r22, r30
    2422:	7f 1f       	adc	r23, r31
    2424:	80 e0       	ldi	r24, 0x00	; 0
    2426:	90 e0       	ldi	r25, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    2428:	b8 e0       	ldi	r27, 0x08	; 8
    242a:	d1 2c       	mov	r13, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    242c:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    242e:	29 2f       	mov	r18, r25
    2430:	33 27       	eor	r19, r19
    2432:	27 fd       	sbrc	r18, 7
    2434:	3a 95       	dec	r19
    2436:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    2438:	32 2f       	mov	r19, r18
    243a:	22 27       	eor	r18, r18
    243c:	4b 2f       	mov	r20, r27
    243e:	5d 2d       	mov	r21, r13
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    2440:	33 23       	and	r19, r19
    2442:	3c f4       	brge	.+14     	; 0x2452 <main+0xb0a>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    2444:	22 0f       	add	r18, r18
    2446:	33 1f       	adc	r19, r19
    2448:	a1 e2       	ldi	r26, 0x21	; 33
    244a:	2a 27       	eor	r18, r26
    244c:	a0 e1       	ldi	r26, 0x10	; 16
    244e:	3a 27       	eor	r19, r26
    2450:	02 c0       	rjmp	.+4      	; 0x2456 <main+0xb0e>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    2452:	22 0f       	add	r18, r18
    2454:	33 1f       	adc	r19, r19
    2456:	41 50       	subi	r20, 0x01	; 1
    2458:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    245a:	91 f7       	brne	.-28     	; 0x2440 <main+0xaf8>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    245c:	98 2f       	mov	r25, r24
    245e:	88 27       	eor	r24, r24
    2460:	82 27       	eor	r24, r18
    2462:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    2464:	e6 17       	cp	r30, r22
    2466:	f7 07       	cpc	r31, r23
    2468:	09 f7       	brne	.-62     	; 0x242c <main+0xae4>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    246a:	6c 01       	movw	r12, r24
    246c:	40 e1       	ldi	r20, 0x10	; 16
    246e:	66 ed       	ldi	r22, 0xD6	; 214
    2470:	74 e0       	ldi	r23, 0x04	; 4
    2472:	0e 94 31 24 	call	0x4862	; 0x4862 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    2476:	86 ed       	ldi	r24, 0xD6	; 214
    2478:	94 e0       	ldi	r25, 0x04	; 4
    247a:	0e 94 27 24 	call	0x484e	; 0x484e <strupr>
	if(crcXmodem < 0x10)
    247e:	b0 e1       	ldi	r27, 0x10	; 16
    2480:	cb 16       	cp	r12, r27
    2482:	d1 04       	cpc	r13, r1
    2484:	98 f4       	brcc	.+38     	; 0x24ac <main+0xb64>
	{
		tx_string[cnt+4] = crc[0];
    2486:	80 91 d6 04 	lds	r24, 0x04D6
    248a:	fe 01       	movw	r30, r28
    248c:	e0 0f       	add	r30, r16
    248e:	f1 1f       	adc	r31, r17
    2490:	86 ab       	std	Z+54, r24	; 0x36
		tx_string[cnt+3] = '0';
    2492:	80 e3       	ldi	r24, 0x30	; 48
    2494:	fe 01       	movw	r30, r28
    2496:	e0 0f       	add	r30, r16
    2498:	f1 1f       	adc	r31, r17
    249a:	85 ab       	std	Z+53, r24	; 0x35
		tx_string[cnt+2] = '0';
    249c:	fe 01       	movw	r30, r28
    249e:	e0 0f       	add	r30, r16
    24a0:	f1 1f       	adc	r31, r17
    24a2:	84 ab       	std	Z+52, r24	; 0x34
		tx_string[cnt+1] = '0';
    24a4:	fe 01       	movw	r30, r28
    24a6:	ee 0d       	add	r30, r14
    24a8:	ff 1d       	adc	r31, r15
    24aa:	82 ab       	std	Z+50, r24	; 0x32
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    24ac:	c6 01       	movw	r24, r12
    24ae:	40 97       	sbiw	r24, 0x10	; 16
    24b0:	80 3f       	cpi	r24, 0xF0	; 240
    24b2:	91 05       	cpc	r25, r1
    24b4:	b8 f4       	brcc	.+46     	; 0x24e4 <main+0xb9c>
	{
		tx_string[cnt+4] = crc[1];
    24b6:	a6 ed       	ldi	r26, 0xD6	; 214
    24b8:	b4 e0       	ldi	r27, 0x04	; 4
    24ba:	11 96       	adiw	r26, 0x01	; 1
    24bc:	8c 91       	ld	r24, X
    24be:	11 97       	sbiw	r26, 0x01	; 1
    24c0:	fe 01       	movw	r30, r28
    24c2:	e0 0f       	add	r30, r16
    24c4:	f1 1f       	adc	r31, r17
    24c6:	86 ab       	std	Z+54, r24	; 0x36
		tx_string[cnt+3] = crc[0];
    24c8:	8c 91       	ld	r24, X
    24ca:	fe 01       	movw	r30, r28
    24cc:	e0 0f       	add	r30, r16
    24ce:	f1 1f       	adc	r31, r17
    24d0:	85 ab       	std	Z+53, r24	; 0x35
		tx_string[cnt+2] = '0';
    24d2:	80 e3       	ldi	r24, 0x30	; 48
    24d4:	fe 01       	movw	r30, r28
    24d6:	e0 0f       	add	r30, r16
    24d8:	f1 1f       	adc	r31, r17
    24da:	84 ab       	std	Z+52, r24	; 0x34
		tx_string[cnt+1] = '0';		
    24dc:	fe 01       	movw	r30, r28
    24de:	ee 0d       	add	r30, r14
    24e0:	ff 1d       	adc	r31, r15
    24e2:	82 ab       	std	Z+50, r24	; 0x32
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    24e4:	c6 01       	movw	r24, r12
    24e6:	9a 95       	dec	r25
    24e8:	81 15       	cp	r24, r1
    24ea:	9f 40       	sbci	r25, 0x0F	; 15
    24ec:	b8 f4       	brcc	.+46     	; 0x251c <main+0xbd4>
	{
		tx_string[cnt+4] = crc[2];
    24ee:	e6 ed       	ldi	r30, 0xD6	; 214
    24f0:	f4 e0       	ldi	r31, 0x04	; 4
    24f2:	82 81       	ldd	r24, Z+2	; 0x02
    24f4:	de 01       	movw	r26, r28
    24f6:	a0 0f       	add	r26, r16
    24f8:	b1 1f       	adc	r27, r17
    24fa:	d6 96       	adiw	r26, 0x36	; 54
    24fc:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[1];
    24fe:	81 81       	ldd	r24, Z+1	; 0x01
    2500:	de 01       	movw	r26, r28
    2502:	a0 0f       	add	r26, r16
    2504:	b1 1f       	adc	r27, r17
    2506:	d5 96       	adiw	r26, 0x35	; 53
    2508:	8c 93       	st	X, r24
    250a:	d5 97       	sbiw	r26, 0x35	; 53
		tx_string[cnt+2] = crc[0];
    250c:	80 81       	ld	r24, Z
    250e:	fd 01       	movw	r30, r26
    2510:	84 ab       	std	Z+52, r24	; 0x34
		tx_string[cnt+1] = '0';		
    2512:	80 e3       	ldi	r24, 0x30	; 48
    2514:	fe 01       	movw	r30, r28
    2516:	ee 0d       	add	r30, r14
    2518:	ff 1d       	adc	r31, r15
    251a:	82 ab       	std	Z+50, r24	; 0x32
	}
	if(crcXmodem >= 0x1000)
    251c:	c1 14       	cp	r12, r1
    251e:	f0 e1       	ldi	r31, 0x10	; 16
    2520:	df 06       	cpc	r13, r31
    2522:	c0 f0       	brcs	.+48     	; 0x2554 <main+0xc0c>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    2524:	de 01       	movw	r26, r28
    2526:	ae 0d       	add	r26, r14
    2528:	bf 1d       	adc	r27, r15
    252a:	e6 ed       	ldi	r30, 0xD6	; 214
    252c:	f4 e0       	ldi	r31, 0x04	; 4
    252e:	80 81       	ld	r24, Z
    2530:	d2 96       	adiw	r26, 0x32	; 50
    2532:	8c 93       	st	X, r24
		tx_string[cnt+2] = crc[1];
    2534:	81 81       	ldd	r24, Z+1	; 0x01
    2536:	de 01       	movw	r26, r28
    2538:	a0 0f       	add	r26, r16
    253a:	b1 1f       	adc	r27, r17
    253c:	d4 96       	adiw	r26, 0x34	; 52
    253e:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[2];
    2540:	82 81       	ldd	r24, Z+2	; 0x02
    2542:	de 01       	movw	r26, r28
    2544:	a0 0f       	add	r26, r16
    2546:	b1 1f       	adc	r27, r17
    2548:	d5 96       	adiw	r26, 0x35	; 53
    254a:	8c 93       	st	X, r24
    254c:	d5 97       	sbiw	r26, 0x35	; 53
		tx_string[cnt+4] = crc[3];
    254e:	83 81       	ldd	r24, Z+3	; 0x03
    2550:	fd 01       	movw	r30, r26
    2552:	86 ab       	std	Z+54, r24	; 0x36
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    2554:	c8 01       	movw	r24, r16
    2556:	05 96       	adiw	r24, 0x05	; 5
    2558:	fe 01       	movw	r30, r28
    255a:	e8 0f       	add	r30, r24
    255c:	f9 1f       	adc	r31, r25
    255e:	2d e0       	ldi	r18, 0x0D	; 13
    2560:	22 ab       	std	Z+50, r18	; 0x32
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    2562:	99 23       	and	r25, r25
    2564:	0c f4       	brge	.+2      	; 0x2568 <main+0xc20>
    2566:	10 c6       	rjmp	.+3104   	; 0x3188 <main+0x1840>
    2568:	fe 01       	movw	r30, r28
    256a:	f2 96       	adiw	r30, 0x32	; 50
    256c:	a8 01       	movw	r20, r16
    256e:	4a 5f       	subi	r20, 0xFA	; 250
    2570:	5f 4f       	sbci	r21, 0xFF	; 255
    2572:	4e 0f       	add	r20, r30
    2574:	5f 1f       	adc	r21, r31
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    2576:	90 e0       	ldi	r25, 0x00	; 0
	{
		uart_putchar(tx_string[i]);
    2578:	21 91       	ld	r18, Z+
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    257a:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    257c:	30 91 ff 04 	lds	r19, 0x04FF
    2580:	ae ef       	ldi	r26, 0xFE	; 254
    2582:	b4 e0       	ldi	r27, 0x04	; 4
    2584:	8c 91       	ld	r24, X
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    2586:	38 13       	cpse	r19, r24
    2588:	05 c0       	rjmp	.+10     	; 0x2594 <main+0xc4c>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    258a:	a1 ec       	ldi	r26, 0xC1	; 193
    258c:	b0 e0       	ldi	r27, 0x00	; 0
    258e:	8c 91       	ld	r24, X
    2590:	80 62       	ori	r24, 0x20	; 32
    2592:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    2594:	ae ef       	ldi	r26, 0xFE	; 254
    2596:	b4 e0       	ldi	r27, 0x04	; 4
    2598:	8c 91       	ld	r24, X
    259a:	a0 91 01 05 	lds	r26, 0x0501
    259e:	b0 91 02 05 	lds	r27, 0x0502
    25a2:	a8 0f       	add	r26, r24
    25a4:	b1 1d       	adc	r27, r1
    25a6:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    25a8:	ae ef       	ldi	r26, 0xFE	; 254
    25aa:	b4 e0       	ldi	r27, 0x04	; 4
    25ac:	8c 91       	ld	r24, X
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    25ae:	68 2f       	mov	r22, r24
    25b0:	70 e0       	ldi	r23, 0x00	; 0
    25b2:	20 91 00 05 	lds	r18, 0x0500
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	21 50       	subi	r18, 0x01	; 1
    25ba:	31 09       	sbc	r19, r1
    25bc:	62 17       	cp	r22, r18
    25be:	73 07       	cpc	r23, r19
    25c0:	11 f0       	breq	.+4      	; 0x25c6 <main+0xc7e>
    25c2:	8f 5f       	subi	r24, 0xFF	; 255
    25c4:	01 c0       	rjmp	.+2      	; 0x25c8 <main+0xc80>
    25c6:	89 2f       	mov	r24, r25
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    25c8:	ae ef       	ldi	r26, 0xFE	; 254
    25ca:	b4 e0       	ldi	r27, 0x04	; 4
    25cc:	8c 93       	st	X, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    25ce:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    25d0:	e4 17       	cp	r30, r20
    25d2:	f5 07       	cpc	r31, r21
    25d4:	89 f6       	brne	.-94     	; 0x2578 <main+0xc30>
    25d6:	d8 c5       	rjmp	.+2992   	; 0x3188 <main+0x1840>
		ftoa(ch0.D_err, tx_string);
		printStatus(tx_string);
		break;
		
		case 104:	// Send ch0.TempSetPoint
		ftoa(ch0.TempSetPoint, tx_string);
    25d8:	60 91 6d 02 	lds	r22, 0x026D
    25dc:	70 91 6e 02 	lds	r23, 0x026E
    25e0:	80 91 6f 02 	lds	r24, 0x026F
    25e4:	90 91 70 02 	lds	r25, 0x0270
    25e8:	43 2d       	mov	r20, r3
    25ea:	5b 2d       	mov	r21, r11
    25ec:	26 d9       	rcall	.-3508   	; 0x183a <ftoa>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    25ee:	81 e2       	ldi	r24, 0x21	; 33
    25f0:	8a ab       	std	Y+50, r24	; 0x32
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    25f2:	e0 96       	adiw	r28, 0x30	; 48
    25f4:	ee ad       	ldd	r30, Y+62	; 0x3e
    25f6:	ff ad       	ldd	r31, Y+63	; 0x3f
    25f8:	e0 97       	sbiw	r28, 0x30	; 48
    25fa:	81 81       	ldd	r24, Z+1	; 0x01
    25fc:	8b ab       	std	Y+51, r24	; 0x33
    25fe:	82 81       	ldd	r24, Z+2	; 0x02
    2600:	8c ab       	std	Y+52, r24	; 0x34
    2602:	83 81       	ldd	r24, Z+3	; 0x03
    2604:	8d ab       	std	Y+53, r24	; 0x35
    2606:	e3 2d       	mov	r30, r3
    2608:	fb 2d       	mov	r31, r11
    260a:	de 01       	movw	r26, r28
    260c:	d6 96       	adiw	r26, 0x36	; 54
    260e:	00 e0       	ldi	r16, 0x00	; 0
    2610:	10 e0       	ldi	r17, 0x00	; 0
    2612:	af 01       	movw	r20, r30
    2614:	06 c0       	rjmp	.+12     	; 0x2622 <main+0xcda>
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    2616:	fa 01       	movw	r30, r20
    2618:	81 91       	ld	r24, Z+
    261a:	af 01       	movw	r20, r30
    261c:	8d 93       	st	X+, r24
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    261e:	0f 5f       	subi	r16, 0xFF	; 255
    2620:	1f 4f       	sbci	r17, 0xFF	; 255
    2622:	e2 96       	adiw	r28, 0x32	; 50
    2624:	ee ad       	ldd	r30, Y+62	; 0x3e
    2626:	ff ad       	ldd	r31, Y+63	; 0x3f
    2628:	e2 97       	sbiw	r28, 0x32	; 50
    262a:	01 90       	ld	r0, Z+
    262c:	00 20       	and	r0, r0
    262e:	e9 f7       	brne	.-6      	; 0x262a <main+0xce2>
    2630:	cf 01       	movw	r24, r30
    2632:	e2 96       	adiw	r28, 0x32	; 50
    2634:	2e ad       	ldd	r18, Y+62	; 0x3e
    2636:	3f ad       	ldd	r19, Y+63	; 0x3f
    2638:	e2 97       	sbiw	r28, 0x32	; 50
    263a:	82 1b       	sub	r24, r18
    263c:	93 0b       	sbc	r25, r19
    263e:	02 96       	adiw	r24, 0x02	; 2
    2640:	08 17       	cp	r16, r24
    2642:	19 07       	cpc	r17, r25
    2644:	40 f3       	brcs	.-48     	; 0x2616 <main+0xcce>
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    2646:	78 01       	movw	r14, r16
    2648:	3f ef       	ldi	r19, 0xFF	; 255
    264a:	e3 1a       	sub	r14, r19
    264c:	f3 0a       	sbc	r15, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    264e:	1e 14       	cp	r1, r14
    2650:	1f 04       	cpc	r1, r15
    2652:	14 f0       	brlt	.+4      	; 0x2658 <main+0xd10>
    2654:	0c 94 8e 21 	jmp	0x431c	; 0x431c <main+0x29d4>
    2658:	fe 01       	movw	r30, r28
    265a:	f2 96       	adiw	r30, 0x32	; 50
    265c:	b7 01       	movw	r22, r14
    265e:	6e 0f       	add	r22, r30
    2660:	7f 1f       	adc	r23, r31
    2662:	80 e0       	ldi	r24, 0x00	; 0
    2664:	90 e0       	ldi	r25, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    2666:	b8 e0       	ldi	r27, 0x08	; 8
    2668:	d1 2c       	mov	r13, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    266a:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    266c:	29 2f       	mov	r18, r25
    266e:	33 27       	eor	r19, r19
    2670:	27 fd       	sbrc	r18, 7
    2672:	3a 95       	dec	r19
    2674:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    2676:	32 2f       	mov	r19, r18
    2678:	22 27       	eor	r18, r18
    267a:	4b 2f       	mov	r20, r27
    267c:	5d 2d       	mov	r21, r13
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    267e:	33 23       	and	r19, r19
    2680:	3c f4       	brge	.+14     	; 0x2690 <main+0xd48>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    2682:	22 0f       	add	r18, r18
    2684:	33 1f       	adc	r19, r19
    2686:	a1 e2       	ldi	r26, 0x21	; 33
    2688:	2a 27       	eor	r18, r26
    268a:	a0 e1       	ldi	r26, 0x10	; 16
    268c:	3a 27       	eor	r19, r26
    268e:	02 c0       	rjmp	.+4      	; 0x2694 <main+0xd4c>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    2690:	22 0f       	add	r18, r18
    2692:	33 1f       	adc	r19, r19
    2694:	41 50       	subi	r20, 0x01	; 1
    2696:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    2698:	91 f7       	brne	.-28     	; 0x267e <main+0xd36>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    269a:	98 2f       	mov	r25, r24
    269c:	88 27       	eor	r24, r24
    269e:	82 27       	eor	r24, r18
    26a0:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    26a2:	e6 17       	cp	r30, r22
    26a4:	f7 07       	cpc	r31, r23
    26a6:	09 f7       	brne	.-62     	; 0x266a <main+0xd22>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    26a8:	6c 01       	movw	r12, r24
    26aa:	40 e1       	ldi	r20, 0x10	; 16
    26ac:	66 ed       	ldi	r22, 0xD6	; 214
    26ae:	74 e0       	ldi	r23, 0x04	; 4
    26b0:	0e 94 31 24 	call	0x4862	; 0x4862 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    26b4:	86 ed       	ldi	r24, 0xD6	; 214
    26b6:	94 e0       	ldi	r25, 0x04	; 4
    26b8:	0e 94 27 24 	call	0x484e	; 0x484e <strupr>
	if(crcXmodem < 0x10)
    26bc:	b0 e1       	ldi	r27, 0x10	; 16
    26be:	cb 16       	cp	r12, r27
    26c0:	d1 04       	cpc	r13, r1
    26c2:	98 f4       	brcc	.+38     	; 0x26ea <main+0xda2>
	{
		tx_string[cnt+4] = crc[0];
    26c4:	80 91 d6 04 	lds	r24, 0x04D6
    26c8:	fe 01       	movw	r30, r28
    26ca:	e0 0f       	add	r30, r16
    26cc:	f1 1f       	adc	r31, r17
    26ce:	86 ab       	std	Z+54, r24	; 0x36
		tx_string[cnt+3] = '0';
    26d0:	80 e3       	ldi	r24, 0x30	; 48
    26d2:	fe 01       	movw	r30, r28
    26d4:	e0 0f       	add	r30, r16
    26d6:	f1 1f       	adc	r31, r17
    26d8:	85 ab       	std	Z+53, r24	; 0x35
		tx_string[cnt+2] = '0';
    26da:	fe 01       	movw	r30, r28
    26dc:	e0 0f       	add	r30, r16
    26de:	f1 1f       	adc	r31, r17
    26e0:	84 ab       	std	Z+52, r24	; 0x34
		tx_string[cnt+1] = '0';
    26e2:	fe 01       	movw	r30, r28
    26e4:	ee 0d       	add	r30, r14
    26e6:	ff 1d       	adc	r31, r15
    26e8:	82 ab       	std	Z+50, r24	; 0x32
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    26ea:	c6 01       	movw	r24, r12
    26ec:	40 97       	sbiw	r24, 0x10	; 16
    26ee:	80 3f       	cpi	r24, 0xF0	; 240
    26f0:	91 05       	cpc	r25, r1
    26f2:	b8 f4       	brcc	.+46     	; 0x2722 <main+0xdda>
	{
		tx_string[cnt+4] = crc[1];
    26f4:	a6 ed       	ldi	r26, 0xD6	; 214
    26f6:	b4 e0       	ldi	r27, 0x04	; 4
    26f8:	11 96       	adiw	r26, 0x01	; 1
    26fa:	8c 91       	ld	r24, X
    26fc:	11 97       	sbiw	r26, 0x01	; 1
    26fe:	fe 01       	movw	r30, r28
    2700:	e0 0f       	add	r30, r16
    2702:	f1 1f       	adc	r31, r17
    2704:	86 ab       	std	Z+54, r24	; 0x36
		tx_string[cnt+3] = crc[0];
    2706:	8c 91       	ld	r24, X
    2708:	fe 01       	movw	r30, r28
    270a:	e0 0f       	add	r30, r16
    270c:	f1 1f       	adc	r31, r17
    270e:	85 ab       	std	Z+53, r24	; 0x35
		tx_string[cnt+2] = '0';
    2710:	80 e3       	ldi	r24, 0x30	; 48
    2712:	fe 01       	movw	r30, r28
    2714:	e0 0f       	add	r30, r16
    2716:	f1 1f       	adc	r31, r17
    2718:	84 ab       	std	Z+52, r24	; 0x34
		tx_string[cnt+1] = '0';		
    271a:	fe 01       	movw	r30, r28
    271c:	ee 0d       	add	r30, r14
    271e:	ff 1d       	adc	r31, r15
    2720:	82 ab       	std	Z+50, r24	; 0x32
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    2722:	c6 01       	movw	r24, r12
    2724:	9a 95       	dec	r25
    2726:	81 15       	cp	r24, r1
    2728:	9f 40       	sbci	r25, 0x0F	; 15
    272a:	b8 f4       	brcc	.+46     	; 0x275a <main+0xe12>
	{
		tx_string[cnt+4] = crc[2];
    272c:	e6 ed       	ldi	r30, 0xD6	; 214
    272e:	f4 e0       	ldi	r31, 0x04	; 4
    2730:	82 81       	ldd	r24, Z+2	; 0x02
    2732:	de 01       	movw	r26, r28
    2734:	a0 0f       	add	r26, r16
    2736:	b1 1f       	adc	r27, r17
    2738:	d6 96       	adiw	r26, 0x36	; 54
    273a:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[1];
    273c:	81 81       	ldd	r24, Z+1	; 0x01
    273e:	de 01       	movw	r26, r28
    2740:	a0 0f       	add	r26, r16
    2742:	b1 1f       	adc	r27, r17
    2744:	d5 96       	adiw	r26, 0x35	; 53
    2746:	8c 93       	st	X, r24
    2748:	d5 97       	sbiw	r26, 0x35	; 53
		tx_string[cnt+2] = crc[0];
    274a:	80 81       	ld	r24, Z
    274c:	fd 01       	movw	r30, r26
    274e:	84 ab       	std	Z+52, r24	; 0x34
		tx_string[cnt+1] = '0';		
    2750:	80 e3       	ldi	r24, 0x30	; 48
    2752:	fe 01       	movw	r30, r28
    2754:	ee 0d       	add	r30, r14
    2756:	ff 1d       	adc	r31, r15
    2758:	82 ab       	std	Z+50, r24	; 0x32
	}
	if(crcXmodem >= 0x1000)
    275a:	c1 14       	cp	r12, r1
    275c:	f0 e1       	ldi	r31, 0x10	; 16
    275e:	df 06       	cpc	r13, r31
    2760:	c0 f0       	brcs	.+48     	; 0x2792 <main+0xe4a>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    2762:	de 01       	movw	r26, r28
    2764:	ae 0d       	add	r26, r14
    2766:	bf 1d       	adc	r27, r15
    2768:	e6 ed       	ldi	r30, 0xD6	; 214
    276a:	f4 e0       	ldi	r31, 0x04	; 4
    276c:	80 81       	ld	r24, Z
    276e:	d2 96       	adiw	r26, 0x32	; 50
    2770:	8c 93       	st	X, r24
		tx_string[cnt+2] = crc[1];
    2772:	81 81       	ldd	r24, Z+1	; 0x01
    2774:	de 01       	movw	r26, r28
    2776:	a0 0f       	add	r26, r16
    2778:	b1 1f       	adc	r27, r17
    277a:	d4 96       	adiw	r26, 0x34	; 52
    277c:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[2];
    277e:	82 81       	ldd	r24, Z+2	; 0x02
    2780:	de 01       	movw	r26, r28
    2782:	a0 0f       	add	r26, r16
    2784:	b1 1f       	adc	r27, r17
    2786:	d5 96       	adiw	r26, 0x35	; 53
    2788:	8c 93       	st	X, r24
    278a:	d5 97       	sbiw	r26, 0x35	; 53
		tx_string[cnt+4] = crc[3];
    278c:	83 81       	ldd	r24, Z+3	; 0x03
    278e:	fd 01       	movw	r30, r26
    2790:	86 ab       	std	Z+54, r24	; 0x36
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    2792:	c8 01       	movw	r24, r16
    2794:	05 96       	adiw	r24, 0x05	; 5
    2796:	fe 01       	movw	r30, r28
    2798:	e8 0f       	add	r30, r24
    279a:	f9 1f       	adc	r31, r25
    279c:	2d e0       	ldi	r18, 0x0D	; 13
    279e:	22 ab       	std	Z+50, r18	; 0x32
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    27a0:	99 23       	and	r25, r25
    27a2:	0c f4       	brge	.+2      	; 0x27a6 <main+0xe5e>
    27a4:	f1 c4       	rjmp	.+2530   	; 0x3188 <main+0x1840>
    27a6:	fe 01       	movw	r30, r28
    27a8:	f2 96       	adiw	r30, 0x32	; 50
    27aa:	a8 01       	movw	r20, r16
    27ac:	4a 5f       	subi	r20, 0xFA	; 250
    27ae:	5f 4f       	sbci	r21, 0xFF	; 255
    27b0:	4e 0f       	add	r20, r30
    27b2:	5f 1f       	adc	r21, r31
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    27b4:	90 e0       	ldi	r25, 0x00	; 0
	{
		uart_putchar(tx_string[i]);
    27b6:	21 91       	ld	r18, Z+
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    27b8:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    27ba:	30 91 ff 04 	lds	r19, 0x04FF
    27be:	ae ef       	ldi	r26, 0xFE	; 254
    27c0:	b4 e0       	ldi	r27, 0x04	; 4
    27c2:	8c 91       	ld	r24, X
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    27c4:	38 13       	cpse	r19, r24
    27c6:	05 c0       	rjmp	.+10     	; 0x27d2 <main+0xe8a>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    27c8:	a1 ec       	ldi	r26, 0xC1	; 193
    27ca:	b0 e0       	ldi	r27, 0x00	; 0
    27cc:	8c 91       	ld	r24, X
    27ce:	80 62       	ori	r24, 0x20	; 32
    27d0:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    27d2:	ae ef       	ldi	r26, 0xFE	; 254
    27d4:	b4 e0       	ldi	r27, 0x04	; 4
    27d6:	8c 91       	ld	r24, X
    27d8:	a0 91 01 05 	lds	r26, 0x0501
    27dc:	b0 91 02 05 	lds	r27, 0x0502
    27e0:	a8 0f       	add	r26, r24
    27e2:	b1 1d       	adc	r27, r1
    27e4:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    27e6:	ae ef       	ldi	r26, 0xFE	; 254
    27e8:	b4 e0       	ldi	r27, 0x04	; 4
    27ea:	8c 91       	ld	r24, X
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    27ec:	68 2f       	mov	r22, r24
    27ee:	70 e0       	ldi	r23, 0x00	; 0
    27f0:	20 91 00 05 	lds	r18, 0x0500
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	21 50       	subi	r18, 0x01	; 1
    27f8:	31 09       	sbc	r19, r1
    27fa:	62 17       	cp	r22, r18
    27fc:	73 07       	cpc	r23, r19
    27fe:	11 f0       	breq	.+4      	; 0x2804 <main+0xebc>
    2800:	8f 5f       	subi	r24, 0xFF	; 255
    2802:	01 c0       	rjmp	.+2      	; 0x2806 <main+0xebe>
    2804:	89 2f       	mov	r24, r25
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    2806:	ae ef       	ldi	r26, 0xFE	; 254
    2808:	b4 e0       	ldi	r27, 0x04	; 4
    280a:	8c 93       	st	X, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    280c:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    280e:	e4 17       	cp	r30, r20
    2810:	f5 07       	cpc	r31, r21
    2812:	89 f6       	brne	.-94     	; 0x27b6 <main+0xe6e>
    2814:	b9 c4       	rjmp	.+2418   	; 0x3188 <main+0x1840>
		ftoa(ch0.TempSetPoint, tx_string);
		printStatus(tx_string);
		break;
		
		case 105:	// Send Pgain ch0
		ftoa(ch0.Pgain, tx_string);
    2816:	60 91 89 02 	lds	r22, 0x0289
    281a:	70 91 8a 02 	lds	r23, 0x028A
    281e:	80 91 8b 02 	lds	r24, 0x028B
    2822:	90 91 8c 02 	lds	r25, 0x028C
    2826:	43 2d       	mov	r20, r3
    2828:	5b 2d       	mov	r21, r11
    282a:	07 d8       	rcall	.-4082   	; 0x183a <ftoa>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    282c:	81 e2       	ldi	r24, 0x21	; 33
    282e:	8a ab       	std	Y+50, r24	; 0x32
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    2830:	e0 96       	adiw	r28, 0x30	; 48
    2832:	ee ad       	ldd	r30, Y+62	; 0x3e
    2834:	ff ad       	ldd	r31, Y+63	; 0x3f
    2836:	e0 97       	sbiw	r28, 0x30	; 48
    2838:	81 81       	ldd	r24, Z+1	; 0x01
    283a:	8b ab       	std	Y+51, r24	; 0x33
    283c:	82 81       	ldd	r24, Z+2	; 0x02
    283e:	8c ab       	std	Y+52, r24	; 0x34
    2840:	83 81       	ldd	r24, Z+3	; 0x03
    2842:	8d ab       	std	Y+53, r24	; 0x35
    2844:	e3 2d       	mov	r30, r3
    2846:	fb 2d       	mov	r31, r11
    2848:	de 01       	movw	r26, r28
    284a:	d6 96       	adiw	r26, 0x36	; 54
    284c:	00 e0       	ldi	r16, 0x00	; 0
    284e:	10 e0       	ldi	r17, 0x00	; 0
    2850:	af 01       	movw	r20, r30
    2852:	06 c0       	rjmp	.+12     	; 0x2860 <main+0xf18>
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    2854:	fa 01       	movw	r30, r20
    2856:	81 91       	ld	r24, Z+
    2858:	af 01       	movw	r20, r30
    285a:	8d 93       	st	X+, r24
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    285c:	0f 5f       	subi	r16, 0xFF	; 255
    285e:	1f 4f       	sbci	r17, 0xFF	; 255
    2860:	e2 96       	adiw	r28, 0x32	; 50
    2862:	ee ad       	ldd	r30, Y+62	; 0x3e
    2864:	ff ad       	ldd	r31, Y+63	; 0x3f
    2866:	e2 97       	sbiw	r28, 0x32	; 50
    2868:	01 90       	ld	r0, Z+
    286a:	00 20       	and	r0, r0
    286c:	e9 f7       	brne	.-6      	; 0x2868 <main+0xf20>
    286e:	cf 01       	movw	r24, r30
    2870:	e2 96       	adiw	r28, 0x32	; 50
    2872:	2e ad       	ldd	r18, Y+62	; 0x3e
    2874:	3f ad       	ldd	r19, Y+63	; 0x3f
    2876:	e2 97       	sbiw	r28, 0x32	; 50
    2878:	82 1b       	sub	r24, r18
    287a:	93 0b       	sbc	r25, r19
    287c:	02 96       	adiw	r24, 0x02	; 2
    287e:	08 17       	cp	r16, r24
    2880:	19 07       	cpc	r17, r25
    2882:	40 f3       	brcs	.-48     	; 0x2854 <main+0xf0c>
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    2884:	78 01       	movw	r14, r16
    2886:	3f ef       	ldi	r19, 0xFF	; 255
    2888:	e3 1a       	sub	r14, r19
    288a:	f3 0a       	sbc	r15, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    288c:	1e 14       	cp	r1, r14
    288e:	1f 04       	cpc	r1, r15
    2890:	14 f0       	brlt	.+4      	; 0x2896 <main+0xf4e>
    2892:	0c 94 9b 21 	jmp	0x4336	; 0x4336 <main+0x29ee>
    2896:	fe 01       	movw	r30, r28
    2898:	f2 96       	adiw	r30, 0x32	; 50
    289a:	b7 01       	movw	r22, r14
    289c:	6e 0f       	add	r22, r30
    289e:	7f 1f       	adc	r23, r31
    28a0:	80 e0       	ldi	r24, 0x00	; 0
    28a2:	90 e0       	ldi	r25, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    28a4:	b8 e0       	ldi	r27, 0x08	; 8
    28a6:	d1 2c       	mov	r13, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    28a8:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    28aa:	29 2f       	mov	r18, r25
    28ac:	33 27       	eor	r19, r19
    28ae:	27 fd       	sbrc	r18, 7
    28b0:	3a 95       	dec	r19
    28b2:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    28b4:	32 2f       	mov	r19, r18
    28b6:	22 27       	eor	r18, r18
    28b8:	4b 2f       	mov	r20, r27
    28ba:	5d 2d       	mov	r21, r13
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    28bc:	33 23       	and	r19, r19
    28be:	3c f4       	brge	.+14     	; 0x28ce <main+0xf86>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    28c0:	22 0f       	add	r18, r18
    28c2:	33 1f       	adc	r19, r19
    28c4:	a1 e2       	ldi	r26, 0x21	; 33
    28c6:	2a 27       	eor	r18, r26
    28c8:	a0 e1       	ldi	r26, 0x10	; 16
    28ca:	3a 27       	eor	r19, r26
    28cc:	02 c0       	rjmp	.+4      	; 0x28d2 <main+0xf8a>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    28ce:	22 0f       	add	r18, r18
    28d0:	33 1f       	adc	r19, r19
    28d2:	41 50       	subi	r20, 0x01	; 1
    28d4:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    28d6:	91 f7       	brne	.-28     	; 0x28bc <main+0xf74>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    28d8:	98 2f       	mov	r25, r24
    28da:	88 27       	eor	r24, r24
    28dc:	82 27       	eor	r24, r18
    28de:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    28e0:	e6 17       	cp	r30, r22
    28e2:	f7 07       	cpc	r31, r23
    28e4:	09 f7       	brne	.-62     	; 0x28a8 <main+0xf60>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    28e6:	6c 01       	movw	r12, r24
    28e8:	40 e1       	ldi	r20, 0x10	; 16
    28ea:	66 ed       	ldi	r22, 0xD6	; 214
    28ec:	74 e0       	ldi	r23, 0x04	; 4
    28ee:	0e 94 31 24 	call	0x4862	; 0x4862 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    28f2:	86 ed       	ldi	r24, 0xD6	; 214
    28f4:	94 e0       	ldi	r25, 0x04	; 4
    28f6:	0e 94 27 24 	call	0x484e	; 0x484e <strupr>
	if(crcXmodem < 0x10)
    28fa:	b0 e1       	ldi	r27, 0x10	; 16
    28fc:	cb 16       	cp	r12, r27
    28fe:	d1 04       	cpc	r13, r1
    2900:	98 f4       	brcc	.+38     	; 0x2928 <main+0xfe0>
	{
		tx_string[cnt+4] = crc[0];
    2902:	80 91 d6 04 	lds	r24, 0x04D6
    2906:	fe 01       	movw	r30, r28
    2908:	e0 0f       	add	r30, r16
    290a:	f1 1f       	adc	r31, r17
    290c:	86 ab       	std	Z+54, r24	; 0x36
		tx_string[cnt+3] = '0';
    290e:	80 e3       	ldi	r24, 0x30	; 48
    2910:	fe 01       	movw	r30, r28
    2912:	e0 0f       	add	r30, r16
    2914:	f1 1f       	adc	r31, r17
    2916:	85 ab       	std	Z+53, r24	; 0x35
		tx_string[cnt+2] = '0';
    2918:	fe 01       	movw	r30, r28
    291a:	e0 0f       	add	r30, r16
    291c:	f1 1f       	adc	r31, r17
    291e:	84 ab       	std	Z+52, r24	; 0x34
		tx_string[cnt+1] = '0';
    2920:	fe 01       	movw	r30, r28
    2922:	ee 0d       	add	r30, r14
    2924:	ff 1d       	adc	r31, r15
    2926:	82 ab       	std	Z+50, r24	; 0x32
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    2928:	c6 01       	movw	r24, r12
    292a:	40 97       	sbiw	r24, 0x10	; 16
    292c:	80 3f       	cpi	r24, 0xF0	; 240
    292e:	91 05       	cpc	r25, r1
    2930:	b8 f4       	brcc	.+46     	; 0x2960 <main+0x1018>
	{
		tx_string[cnt+4] = crc[1];
    2932:	a6 ed       	ldi	r26, 0xD6	; 214
    2934:	b4 e0       	ldi	r27, 0x04	; 4
    2936:	11 96       	adiw	r26, 0x01	; 1
    2938:	8c 91       	ld	r24, X
    293a:	11 97       	sbiw	r26, 0x01	; 1
    293c:	fe 01       	movw	r30, r28
    293e:	e0 0f       	add	r30, r16
    2940:	f1 1f       	adc	r31, r17
    2942:	86 ab       	std	Z+54, r24	; 0x36
		tx_string[cnt+3] = crc[0];
    2944:	8c 91       	ld	r24, X
    2946:	fe 01       	movw	r30, r28
    2948:	e0 0f       	add	r30, r16
    294a:	f1 1f       	adc	r31, r17
    294c:	85 ab       	std	Z+53, r24	; 0x35
		tx_string[cnt+2] = '0';
    294e:	80 e3       	ldi	r24, 0x30	; 48
    2950:	fe 01       	movw	r30, r28
    2952:	e0 0f       	add	r30, r16
    2954:	f1 1f       	adc	r31, r17
    2956:	84 ab       	std	Z+52, r24	; 0x34
		tx_string[cnt+1] = '0';		
    2958:	fe 01       	movw	r30, r28
    295a:	ee 0d       	add	r30, r14
    295c:	ff 1d       	adc	r31, r15
    295e:	82 ab       	std	Z+50, r24	; 0x32
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    2960:	c6 01       	movw	r24, r12
    2962:	9a 95       	dec	r25
    2964:	81 15       	cp	r24, r1
    2966:	9f 40       	sbci	r25, 0x0F	; 15
    2968:	b8 f4       	brcc	.+46     	; 0x2998 <main+0x1050>
	{
		tx_string[cnt+4] = crc[2];
    296a:	e6 ed       	ldi	r30, 0xD6	; 214
    296c:	f4 e0       	ldi	r31, 0x04	; 4
    296e:	82 81       	ldd	r24, Z+2	; 0x02
    2970:	de 01       	movw	r26, r28
    2972:	a0 0f       	add	r26, r16
    2974:	b1 1f       	adc	r27, r17
    2976:	d6 96       	adiw	r26, 0x36	; 54
    2978:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[1];
    297a:	81 81       	ldd	r24, Z+1	; 0x01
    297c:	de 01       	movw	r26, r28
    297e:	a0 0f       	add	r26, r16
    2980:	b1 1f       	adc	r27, r17
    2982:	d5 96       	adiw	r26, 0x35	; 53
    2984:	8c 93       	st	X, r24
    2986:	d5 97       	sbiw	r26, 0x35	; 53
		tx_string[cnt+2] = crc[0];
    2988:	80 81       	ld	r24, Z
    298a:	fd 01       	movw	r30, r26
    298c:	84 ab       	std	Z+52, r24	; 0x34
		tx_string[cnt+1] = '0';		
    298e:	80 e3       	ldi	r24, 0x30	; 48
    2990:	fe 01       	movw	r30, r28
    2992:	ee 0d       	add	r30, r14
    2994:	ff 1d       	adc	r31, r15
    2996:	82 ab       	std	Z+50, r24	; 0x32
	}
	if(crcXmodem >= 0x1000)
    2998:	c1 14       	cp	r12, r1
    299a:	f0 e1       	ldi	r31, 0x10	; 16
    299c:	df 06       	cpc	r13, r31
    299e:	c0 f0       	brcs	.+48     	; 0x29d0 <main+0x1088>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    29a0:	de 01       	movw	r26, r28
    29a2:	ae 0d       	add	r26, r14
    29a4:	bf 1d       	adc	r27, r15
    29a6:	e6 ed       	ldi	r30, 0xD6	; 214
    29a8:	f4 e0       	ldi	r31, 0x04	; 4
    29aa:	80 81       	ld	r24, Z
    29ac:	d2 96       	adiw	r26, 0x32	; 50
    29ae:	8c 93       	st	X, r24
		tx_string[cnt+2] = crc[1];
    29b0:	81 81       	ldd	r24, Z+1	; 0x01
    29b2:	de 01       	movw	r26, r28
    29b4:	a0 0f       	add	r26, r16
    29b6:	b1 1f       	adc	r27, r17
    29b8:	d4 96       	adiw	r26, 0x34	; 52
    29ba:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[2];
    29bc:	82 81       	ldd	r24, Z+2	; 0x02
    29be:	de 01       	movw	r26, r28
    29c0:	a0 0f       	add	r26, r16
    29c2:	b1 1f       	adc	r27, r17
    29c4:	d5 96       	adiw	r26, 0x35	; 53
    29c6:	8c 93       	st	X, r24
    29c8:	d5 97       	sbiw	r26, 0x35	; 53
		tx_string[cnt+4] = crc[3];
    29ca:	83 81       	ldd	r24, Z+3	; 0x03
    29cc:	fd 01       	movw	r30, r26
    29ce:	86 ab       	std	Z+54, r24	; 0x36
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    29d0:	c8 01       	movw	r24, r16
    29d2:	05 96       	adiw	r24, 0x05	; 5
    29d4:	fe 01       	movw	r30, r28
    29d6:	e8 0f       	add	r30, r24
    29d8:	f9 1f       	adc	r31, r25
    29da:	2d e0       	ldi	r18, 0x0D	; 13
    29dc:	22 ab       	std	Z+50, r18	; 0x32
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    29de:	99 23       	and	r25, r25
    29e0:	0c f4       	brge	.+2      	; 0x29e4 <main+0x109c>
    29e2:	d2 c3       	rjmp	.+1956   	; 0x3188 <main+0x1840>
    29e4:	fe 01       	movw	r30, r28
    29e6:	f2 96       	adiw	r30, 0x32	; 50
    29e8:	a8 01       	movw	r20, r16
    29ea:	4a 5f       	subi	r20, 0xFA	; 250
    29ec:	5f 4f       	sbci	r21, 0xFF	; 255
    29ee:	4e 0f       	add	r20, r30
    29f0:	5f 1f       	adc	r21, r31
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    29f2:	90 e0       	ldi	r25, 0x00	; 0
	{
		uart_putchar(tx_string[i]);
    29f4:	21 91       	ld	r18, Z+
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    29f6:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    29f8:	30 91 ff 04 	lds	r19, 0x04FF
    29fc:	ae ef       	ldi	r26, 0xFE	; 254
    29fe:	b4 e0       	ldi	r27, 0x04	; 4
    2a00:	8c 91       	ld	r24, X
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    2a02:	38 13       	cpse	r19, r24
    2a04:	05 c0       	rjmp	.+10     	; 0x2a10 <main+0x10c8>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    2a06:	a1 ec       	ldi	r26, 0xC1	; 193
    2a08:	b0 e0       	ldi	r27, 0x00	; 0
    2a0a:	8c 91       	ld	r24, X
    2a0c:	80 62       	ori	r24, 0x20	; 32
    2a0e:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    2a10:	ae ef       	ldi	r26, 0xFE	; 254
    2a12:	b4 e0       	ldi	r27, 0x04	; 4
    2a14:	8c 91       	ld	r24, X
    2a16:	a0 91 01 05 	lds	r26, 0x0501
    2a1a:	b0 91 02 05 	lds	r27, 0x0502
    2a1e:	a8 0f       	add	r26, r24
    2a20:	b1 1d       	adc	r27, r1
    2a22:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    2a24:	ae ef       	ldi	r26, 0xFE	; 254
    2a26:	b4 e0       	ldi	r27, 0x04	; 4
    2a28:	8c 91       	ld	r24, X
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    2a2a:	68 2f       	mov	r22, r24
    2a2c:	70 e0       	ldi	r23, 0x00	; 0
    2a2e:	20 91 00 05 	lds	r18, 0x0500
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	21 50       	subi	r18, 0x01	; 1
    2a36:	31 09       	sbc	r19, r1
    2a38:	62 17       	cp	r22, r18
    2a3a:	73 07       	cpc	r23, r19
    2a3c:	11 f0       	breq	.+4      	; 0x2a42 <main+0x10fa>
    2a3e:	8f 5f       	subi	r24, 0xFF	; 255
    2a40:	01 c0       	rjmp	.+2      	; 0x2a44 <main+0x10fc>
    2a42:	89 2f       	mov	r24, r25
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    2a44:	ae ef       	ldi	r26, 0xFE	; 254
    2a46:	b4 e0       	ldi	r27, 0x04	; 4
    2a48:	8c 93       	st	X, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    2a4a:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    2a4c:	e4 17       	cp	r30, r20
    2a4e:	f5 07       	cpc	r31, r21
    2a50:	89 f6       	brne	.-94     	; 0x29f4 <main+0x10ac>
    2a52:	9a c3       	rjmp	.+1844   	; 0x3188 <main+0x1840>
		ftoa(ch0.Pgain, tx_string);
		printStatus(tx_string);
		break;								
		
		case 106:	// Send Igain ch0
		ftoa(ch0.Igain, tx_string);
    2a54:	60 91 8d 02 	lds	r22, 0x028D
    2a58:	70 91 8e 02 	lds	r23, 0x028E
    2a5c:	80 91 8f 02 	lds	r24, 0x028F
    2a60:	90 91 90 02 	lds	r25, 0x0290
    2a64:	43 2d       	mov	r20, r3
    2a66:	5b 2d       	mov	r21, r11
    2a68:	0e 94 1d 0c 	call	0x183a	; 0x183a <ftoa>
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    2a6c:	81 e2       	ldi	r24, 0x21	; 33
    2a6e:	8a ab       	std	Y+50, r24	; 0x32
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    2a70:	e0 96       	adiw	r28, 0x30	; 48
    2a72:	ee ad       	ldd	r30, Y+62	; 0x3e
    2a74:	ff ad       	ldd	r31, Y+63	; 0x3f
    2a76:	e0 97       	sbiw	r28, 0x30	; 48
    2a78:	81 81       	ldd	r24, Z+1	; 0x01
    2a7a:	8b ab       	std	Y+51, r24	; 0x33
    2a7c:	82 81       	ldd	r24, Z+2	; 0x02
    2a7e:	8c ab       	std	Y+52, r24	; 0x34
    2a80:	83 81       	ldd	r24, Z+3	; 0x03
    2a82:	8d ab       	std	Y+53, r24	; 0x35
    2a84:	e3 2d       	mov	r30, r3
    2a86:	fb 2d       	mov	r31, r11
    2a88:	de 01       	movw	r26, r28
    2a8a:	d6 96       	adiw	r26, 0x36	; 54
    2a8c:	00 e0       	ldi	r16, 0x00	; 0
    2a8e:	10 e0       	ldi	r17, 0x00	; 0
    2a90:	af 01       	movw	r20, r30
    2a92:	06 c0       	rjmp	.+12     	; 0x2aa0 <main+0x1158>
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    2a94:	fa 01       	movw	r30, r20
    2a96:	81 91       	ld	r24, Z+
    2a98:	af 01       	movw	r20, r30
    2a9a:	8d 93       	st	X+, r24
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
    2a9c:	0f 5f       	subi	r16, 0xFF	; 255
    2a9e:	1f 4f       	sbci	r17, 0xFF	; 255
    2aa0:	e2 96       	adiw	r28, 0x32	; 50
    2aa2:	ee ad       	ldd	r30, Y+62	; 0x3e
    2aa4:	ff ad       	ldd	r31, Y+63	; 0x3f
    2aa6:	e2 97       	sbiw	r28, 0x32	; 50
    2aa8:	01 90       	ld	r0, Z+
    2aaa:	00 20       	and	r0, r0
    2aac:	e9 f7       	brne	.-6      	; 0x2aa8 <main+0x1160>
    2aae:	cf 01       	movw	r24, r30
    2ab0:	e2 96       	adiw	r28, 0x32	; 50
    2ab2:	2e ad       	ldd	r18, Y+62	; 0x3e
    2ab4:	3f ad       	ldd	r19, Y+63	; 0x3f
    2ab6:	e2 97       	sbiw	r28, 0x32	; 50
    2ab8:	82 1b       	sub	r24, r18
    2aba:	93 0b       	sbc	r25, r19
    2abc:	02 96       	adiw	r24, 0x02	; 2
    2abe:	08 17       	cp	r16, r24
    2ac0:	19 07       	cpc	r17, r25
    2ac2:	40 f3       	brcs	.-48     	; 0x2a94 <main+0x114c>
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    2ac4:	78 01       	movw	r14, r16
    2ac6:	3f ef       	ldi	r19, 0xFF	; 255
    2ac8:	e3 1a       	sub	r14, r19
    2aca:	f3 0a       	sbc	r15, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    2acc:	1e 14       	cp	r1, r14
    2ace:	1f 04       	cpc	r1, r15
    2ad0:	14 f0       	brlt	.+4      	; 0x2ad6 <main+0x118e>
    2ad2:	0c 94 a8 21 	jmp	0x4350	; 0x4350 <main+0x2a08>
    2ad6:	fe 01       	movw	r30, r28
    2ad8:	f2 96       	adiw	r30, 0x32	; 50
    2ada:	b7 01       	movw	r22, r14
    2adc:	6e 0f       	add	r22, r30
    2ade:	7f 1f       	adc	r23, r31
    2ae0:	80 e0       	ldi	r24, 0x00	; 0
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    2ae4:	b8 e0       	ldi	r27, 0x08	; 8
    2ae6:	d1 2c       	mov	r13, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    2ae8:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    2aea:	29 2f       	mov	r18, r25
    2aec:	33 27       	eor	r19, r19
    2aee:	27 fd       	sbrc	r18, 7
    2af0:	3a 95       	dec	r19
    2af2:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    2af4:	32 2f       	mov	r19, r18
    2af6:	22 27       	eor	r18, r18
    2af8:	4b 2f       	mov	r20, r27
    2afa:	5d 2d       	mov	r21, r13
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    2afc:	33 23       	and	r19, r19
    2afe:	3c f4       	brge	.+14     	; 0x2b0e <main+0x11c6>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    2b00:	22 0f       	add	r18, r18
    2b02:	33 1f       	adc	r19, r19
    2b04:	a1 e2       	ldi	r26, 0x21	; 33
    2b06:	2a 27       	eor	r18, r26
    2b08:	a0 e1       	ldi	r26, 0x10	; 16
    2b0a:	3a 27       	eor	r19, r26
    2b0c:	02 c0       	rjmp	.+4      	; 0x2b12 <main+0x11ca>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    2b0e:	22 0f       	add	r18, r18
    2b10:	33 1f       	adc	r19, r19
    2b12:	41 50       	subi	r20, 0x01	; 1
    2b14:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    2b16:	91 f7       	brne	.-28     	; 0x2afc <main+0x11b4>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    2b18:	98 2f       	mov	r25, r24
    2b1a:	88 27       	eor	r24, r24
    2b1c:	82 27       	eor	r24, r18
    2b1e:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    2b20:	e6 17       	cp	r30, r22
    2b22:	f7 07       	cpc	r31, r23
    2b24:	09 f7       	brne	.-62     	; 0x2ae8 <main+0x11a0>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    2b26:	6c 01       	movw	r12, r24
    2b28:	40 e1       	ldi	r20, 0x10	; 16
    2b2a:	66 ed       	ldi	r22, 0xD6	; 214
    2b2c:	74 e0       	ldi	r23, 0x04	; 4
    2b2e:	0e 94 31 24 	call	0x4862	; 0x4862 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    2b32:	86 ed       	ldi	r24, 0xD6	; 214
    2b34:	94 e0       	ldi	r25, 0x04	; 4
    2b36:	0e 94 27 24 	call	0x484e	; 0x484e <strupr>
	if(crcXmodem < 0x10)
    2b3a:	b0 e1       	ldi	r27, 0x10	; 16
    2b3c:	cb 16       	cp	r12, r27
    2b3e:	d1 04       	cpc	r13, r1
    2b40:	98 f4       	brcc	.+38     	; 0x2b68 <main+0x1220>
	{
		tx_string[cnt+4] = crc[0];
    2b42:	80 91 d6 04 	lds	r24, 0x04D6
    2b46:	fe 01       	movw	r30, r28
    2b48:	e0 0f       	add	r30, r16
    2b4a:	f1 1f       	adc	r31, r17
    2b4c:	86 ab       	std	Z+54, r24	; 0x36
		tx_string[cnt+3] = '0';
    2b4e:	80 e3       	ldi	r24, 0x30	; 48
    2b50:	fe 01       	movw	r30, r28
    2b52:	e0 0f       	add	r30, r16
    2b54:	f1 1f       	adc	r31, r17
    2b56:	85 ab       	std	Z+53, r24	; 0x35
		tx_string[cnt+2] = '0';
    2b58:	fe 01       	movw	r30, r28
    2b5a:	e0 0f       	add	r30, r16
    2b5c:	f1 1f       	adc	r31, r17
    2b5e:	84 ab       	std	Z+52, r24	; 0x34
		tx_string[cnt+1] = '0';
    2b60:	fe 01       	movw	r30, r28
    2b62:	ee 0d       	add	r30, r14
    2b64:	ff 1d       	adc	r31, r15
    2b66:	82 ab       	std	Z+50, r24	; 0x32
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    2b68:	c6 01       	movw	r24, r12
    2b6a:	40 97       	sbiw	r24, 0x10	; 16
    2b6c:	80 3f       	cpi	r24, 0xF0	; 240
    2b6e:	91 05       	cpc	r25, r1
    2b70:	b8 f4       	brcc	.+46     	; 0x2ba0 <main+0x1258>
	{
		tx_string[cnt+4] = crc[1];
    2b72:	a6 ed       	ldi	r26, 0xD6	; 214
    2b74:	b4 e0       	ldi	r27, 0x04	; 4
    2b76:	11 96       	adiw	r26, 0x01	; 1
    2b78:	8c 91       	ld	r24, X
    2b7a:	11 97       	sbiw	r26, 0x01	; 1
    2b7c:	fe 01       	movw	r30, r28
    2b7e:	e0 0f       	add	r30, r16
    2b80:	f1 1f       	adc	r31, r17
    2b82:	86 ab       	std	Z+54, r24	; 0x36
		tx_string[cnt+3] = crc[0];
    2b84:	8c 91       	ld	r24, X
    2b86:	fe 01       	movw	r30, r28
    2b88:	e0 0f       	add	r30, r16
    2b8a:	f1 1f       	adc	r31, r17
    2b8c:	85 ab       	std	Z+53, r24	; 0x35
		tx_string[cnt+2] = '0';
    2b8e:	80 e3       	ldi	r24, 0x30	; 48
    2b90:	fe 01       	movw	r30, r28
    2b92:	e0 0f       	add	r30, r16
    2b94:	f1 1f       	adc	r31, r17
    2b96:	84 ab       	std	Z+52, r24	; 0x34
		tx_string[cnt+1] = '0';		
    2b98:	fe 01       	movw	r30, r28
    2b9a:	ee 0d       	add	r30, r14
    2b9c:	ff 1d       	adc	r31, r15
    2b9e:	82 ab       	std	Z+50, r24	; 0x32
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    2ba0:	c6 01       	movw	r24, r12
    2ba2:	9a 95       	dec	r25
    2ba4:	81 15       	cp	r24, r1
    2ba6:	9f 40       	sbci	r25, 0x0F	; 15
    2ba8:	b8 f4       	brcc	.+46     	; 0x2bd8 <main+0x1290>
	{
		tx_string[cnt+4] = crc[2];
    2baa:	e6 ed       	ldi	r30, 0xD6	; 214
    2bac:	f4 e0       	ldi	r31, 0x04	; 4
    2bae:	82 81       	ldd	r24, Z+2	; 0x02
    2bb0:	de 01       	movw	r26, r28
    2bb2:	a0 0f       	add	r26, r16
    2bb4:	b1 1f       	adc	r27, r17
    2bb6:	d6 96       	adiw	r26, 0x36	; 54
    2bb8:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[1];
    2bba:	81 81       	ldd	r24, Z+1	; 0x01
    2bbc:	de 01       	movw	r26, r28
    2bbe:	a0 0f       	add	r26, r16
    2bc0:	b1 1f       	adc	r27, r17
    2bc2:	d5 96       	adiw	r26, 0x35	; 53
    2bc4:	8c 93       	st	X, r24
    2bc6:	d5 97       	sbiw	r26, 0x35	; 53
		tx_string[cnt+2] = crc[0];
    2bc8:	80 81       	ld	r24, Z
    2bca:	fd 01       	movw	r30, r26
    2bcc:	84 ab       	std	Z+52, r24	; 0x34
		tx_string[cnt+1] = '0';		
    2bce:	80 e3       	ldi	r24, 0x30	; 48
    2bd0:	fe 01       	movw	r30, r28
    2bd2:	ee 0d       	add	r30, r14
    2bd4:	ff 1d       	adc	r31, r15
    2bd6:	82 ab       	std	Z+50, r24	; 0x32
	}
	if(crcXmodem >= 0x1000)
    2bd8:	c1 14       	cp	r12, r1
    2bda:	f0 e1       	ldi	r31, 0x10	; 16
    2bdc:	df 06       	cpc	r13, r31
    2bde:	c0 f0       	brcs	.+48     	; 0x2c10 <main+0x12c8>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    2be0:	de 01       	movw	r26, r28
    2be2:	ae 0d       	add	r26, r14
    2be4:	bf 1d       	adc	r27, r15
    2be6:	e6 ed       	ldi	r30, 0xD6	; 214
    2be8:	f4 e0       	ldi	r31, 0x04	; 4
    2bea:	80 81       	ld	r24, Z
    2bec:	d2 96       	adiw	r26, 0x32	; 50
    2bee:	8c 93       	st	X, r24
		tx_string[cnt+2] = crc[1];
    2bf0:	81 81       	ldd	r24, Z+1	; 0x01
    2bf2:	de 01       	movw	r26, r28
    2bf4:	a0 0f       	add	r26, r16
    2bf6:	b1 1f       	adc	r27, r17
    2bf8:	d4 96       	adiw	r26, 0x34	; 52
    2bfa:	8c 93       	st	X, r24
		tx_string[cnt+3] = crc[2];
    2bfc:	82 81       	ldd	r24, Z+2	; 0x02
    2bfe:	de 01       	movw	r26, r28
    2c00:	a0 0f       	add	r26, r16
    2c02:	b1 1f       	adc	r27, r17
    2c04:	d5 96       	adiw	r26, 0x35	; 53
    2c06:	8c 93       	st	X, r24
    2c08:	d5 97       	sbiw	r26, 0x35	; 53
		tx_string[cnt+4] = crc[3];
    2c0a:	83 81       	ldd	r24, Z+3	; 0x03
    2c0c:	fd 01       	movw	r30, r26
    2c0e:	86 ab       	std	Z+54, r24	; 0x36
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    2c10:	c8 01       	movw	r24, r16
    2c12:	05 96       	adiw	r24, 0x05	; 5
    2c14:	fe 01       	movw	r30, r28
    2c16:	e8 0f       	add	r30, r24
    2c18:	f9 1f       	adc	r31, r25
    2c1a:	2d e0       	ldi	r18, 0x0D	; 13
    2c1c:	22 ab       	std	Z+50, r18	; 0x32
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    2c1e:	99 23       	and	r25, r25
    2c20:	0c f4       	brge	.+2      	; 0x2c24 <main+0x12dc>
    2c22:	b2 c2       	rjmp	.+1380   	; 0x3188 <main+0x1840>
    2c24:	fe 01       	movw	r30, r28
    2c26:	f2 96       	adiw	r30, 0x32	; 50
    2c28:	a8 01       	movw	r20, r16
    2c2a:	4a 5f       	subi	r20, 0xFA	; 250
    2c2c:	5f 4f       	sbci	r21, 0xFF	; 255
    2c2e:	4e 0f       	add	r20, r30
    2c30:	5f 1f       	adc	r21, r31
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    2c32:	90 e0       	ldi	r25, 0x00	; 0
	{
		uart_putchar(tx_string[i]);
    2c34:	21 91       	ld	r18, Z+
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    2c36:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    2c38:	30 91 ff 04 	lds	r19, 0x04FF
    2c3c:	ae ef       	ldi	r26, 0xFE	; 254
    2c3e:	b4 e0       	ldi	r27, 0x04	; 4
    2c40:	8c 91       	ld	r24, X
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    2c42:	38 13       	cpse	r19, r24
    2c44:	05 c0       	rjmp	.+10     	; 0x2c50 <main+0x1308>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    2c46:	a1 ec       	ldi	r26, 0xC1	; 193
    2c48:	b0 e0       	ldi	r27, 0x00	; 0
    2c4a:	8c 91       	ld	r24, X
    2c4c:	80 62       	ori	r24, 0x20	; 32
    2c4e:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    2c50:	ae ef       	ldi	r26, 0xFE	; 254
    2c52:	b4 e0       	ldi	r27, 0x04	; 4
    2c54:	8c 91       	ld	r24, X
    2c56:	a0 91 01 05 	lds	r26, 0x0501
    2c5a:	b0 91 02 05 	lds	r27, 0x0502
    2c5e:	a8 0f       	add	r26, r24
    2c60:	b1 1d       	adc	r27, r1
    2c62:	2c 93       	st	X, r18
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    2c64:	ae ef       	ldi	r26, 0xFE	; 254
    2c66:	b4 e0       	ldi	r27, 0x04	; 4
    2c68:	8c 91       	ld	r24, X
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    2c6a:	68 2f       	mov	r22, r24
    2c6c:	70 e0       	ldi	r23, 0x00	; 0
    2c6e:	20 91 00 05 	lds	r18, 0x0500
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	21 50       	subi	r18, 0x01	; 1
    2c76:	31 09       	sbc	r19, r1
    2c78:	62 17       	cp	r22, r18
    2c7a:	73 07       	cpc	r23, r19
    2c7c:	11 f0       	breq	.+4      	; 0x2c82 <main+0x133a>
    2c7e:	8f 5f       	subi	r24, 0xFF	; 255
    2c80:	01 c0       	rjmp	.+2      	; 0x2c84 <main+0x133c>
    2c82:	89 2f       	mov	r24, r25
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    2c84:	ae ef       	ldi	r26, 0xFE	; 254
    2c86:	b4 e0       	ldi	r27, 0x04	; 4
    2c88:	8c 93       	st	X, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    2c8a:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    2c8c:	e4 17       	cp	r30, r20
    2c8e:	f5 07       	cpc	r31, r21
    2c90:	89 f6       	brne	.-94     	; 0x2c34 <main+0x12ec>
    2c92:	7a c2       	rjmp	.+1268   	; 0x3188 <main+0x1840>
		ftoa(ch0.Igain, tx_string);
		printStatus(tx_string);
		break;
		
		case 107:	// Send Dgain ch0
		ftoa(ch0.Dgain, tx_string);
    2c94:	60 91 91 02 	lds	r22, 0x0291
    2c98:	70 91 92 02 	lds	r23, 0x0292
    2c9c:	80 91 93 02 	lds	r24, 0x0293
    2ca0:	90 91 94 02 	lds	r25, 0x0294
    2ca4:	43 2d       	mov	r20, r3
    2ca6:	5b 2d       	mov	r21, r11
    2ca8:	0e 94 1d 0c 	call	0x183a	; 0x183a <ftoa>
		printStatus(tx_string);
    2cac:	83 2d       	mov	r24, r3
    2cae:	9b 2d       	mov	r25, r11
    2cb0:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    2cb4:	69 c2       	rjmp	.+1234   	; 0x3188 <main+0x1840>
		break;
		
		case 108:	// Send TemperatureWindow
		ftoa(ch0.tempErrorWin, tx_string);
    2cb6:	60 91 c1 02 	lds	r22, 0x02C1
    2cba:	70 91 c2 02 	lds	r23, 0x02C2
    2cbe:	80 91 c3 02 	lds	r24, 0x02C3
    2cc2:	90 91 c4 02 	lds	r25, 0x02C4
    2cc6:	43 2d       	mov	r20, r3
    2cc8:	5b 2d       	mov	r21, r11
    2cca:	0e 94 1d 0c 	call	0x183a	; 0x183a <ftoa>
		printStatus(tx_string);
    2cce:	83 2d       	mov	r24, r3
    2cd0:	9b 2d       	mov	r25, r11
    2cd2:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    2cd6:	58 c2       	rjmp	.+1200   	; 0x3188 <main+0x1840>
		break;
		
		case 109:	// Send SettleTimeTemperature
		itoa(ch0.tempSettleTime, tx_string, 10);
    2cd8:	80 91 c7 02 	lds	r24, 0x02C7
    2cdc:	90 91 c8 02 	lds	r25, 0x02C8
    2ce0:	4a e0       	ldi	r20, 0x0A	; 10
    2ce2:	63 2d       	mov	r22, r3
    2ce4:	7b 2d       	mov	r23, r11
    2ce6:	0e 94 31 24 	call	0x4862	; 0x4862 <__itoa_ncheck>
		printStatus(tx_string);
    2cea:	83 2d       	mov	r24, r3
    2cec:	9b 2d       	mov	r25, r11
    2cee:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    2cf2:	4a c2       	rjmp	.+1172   	; 0x3188 <main+0x1840>
		break;
		
		case 110:	// Send Temperature stable status
		switch(ch0.tempStable)
    2cf4:	80 91 c9 02 	lds	r24, 0x02C9
    2cf8:	90 91 ca 02 	lds	r25, 0x02CA
    2cfc:	00 97       	sbiw	r24, 0x00	; 0
    2cfe:	19 f0       	breq	.+6      	; 0x2d06 <main+0x13be>
    2d00:	01 97       	sbiw	r24, 0x01	; 1
    2d02:	31 f0       	breq	.+12     	; 0x2d10 <main+0x13c8>
    2d04:	41 c2       	rjmp	.+1154   	; 0x3188 <main+0x1840>
		{
			case 0:
			printStatus("0");
    2d06:	86 e2       	ldi	r24, 0x26	; 38
    2d08:	91 e0       	ldi	r25, 0x01	; 1
    2d0a:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    2d0e:	3c c2       	rjmp	.+1144   	; 0x3188 <main+0x1840>
			break;
				
			case 1:
			printStatus("1");
    2d10:	88 e2       	ldi	r24, 0x28	; 40
    2d12:	91 e0       	ldi	r25, 0x01	; 1
    2d14:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    2d18:	37 c2       	rjmp	.+1134   	; 0x3188 <main+0x1840>
		}
		break;
		
		// *** Channel 1 ***
		case 200:	// Send sensor 1 temperature
		ftoa(ch1.TempSensor, tx_string);
    2d1a:	60 91 0e 02 	lds	r22, 0x020E
    2d1e:	70 91 0f 02 	lds	r23, 0x020F
    2d22:	80 91 10 02 	lds	r24, 0x0210
    2d26:	90 91 11 02 	lds	r25, 0x0211
    2d2a:	43 2d       	mov	r20, r3
    2d2c:	5b 2d       	mov	r21, r11
    2d2e:	0e 94 1d 0c 	call	0x183a	; 0x183a <ftoa>
		printStatus(tx_string);
    2d32:	83 2d       	mov	r24, r3
    2d34:	9b 2d       	mov	r25, r11
    2d36:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    2d3a:	26 c2       	rjmp	.+1100   	; 0x3188 <main+0x1840>
		break;
		
		case 201:	// Send P part of PID-controller 1
		ftoa(ch1.P_err, tx_string);
    2d3c:	60 91 12 02 	lds	r22, 0x0212
    2d40:	70 91 13 02 	lds	r23, 0x0213
    2d44:	80 91 14 02 	lds	r24, 0x0214
    2d48:	90 91 15 02 	lds	r25, 0x0215
    2d4c:	43 2d       	mov	r20, r3
    2d4e:	5b 2d       	mov	r21, r11
    2d50:	0e 94 1d 0c 	call	0x183a	; 0x183a <ftoa>
		printStatus(tx_string);
    2d54:	83 2d       	mov	r24, r3
    2d56:	9b 2d       	mov	r25, r11
    2d58:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    2d5c:	15 c2       	rjmp	.+1066   	; 0x3188 <main+0x1840>
		break;
		
		case 202:	// Send I part of PID-controller 1
		ftoa(ch1.I_err, tx_string);
    2d5e:	60 91 16 02 	lds	r22, 0x0216
    2d62:	70 91 17 02 	lds	r23, 0x0217
    2d66:	80 91 18 02 	lds	r24, 0x0218
    2d6a:	90 91 19 02 	lds	r25, 0x0219
    2d6e:	43 2d       	mov	r20, r3
    2d70:	5b 2d       	mov	r21, r11
    2d72:	0e 94 1d 0c 	call	0x183a	; 0x183a <ftoa>
		printStatus(tx_string);
    2d76:	83 2d       	mov	r24, r3
    2d78:	9b 2d       	mov	r25, r11
    2d7a:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    2d7e:	04 c2       	rjmp	.+1032   	; 0x3188 <main+0x1840>
		break;
				
		case 203:	// Send D part of PID-controller 1
		ftoa(ch1.D_err, tx_string);
    2d80:	60 91 1a 02 	lds	r22, 0x021A
    2d84:	70 91 1b 02 	lds	r23, 0x021B
    2d88:	80 91 1c 02 	lds	r24, 0x021C
    2d8c:	90 91 1d 02 	lds	r25, 0x021D
    2d90:	43 2d       	mov	r20, r3
    2d92:	5b 2d       	mov	r21, r11
    2d94:	0e 94 1d 0c 	call	0x183a	; 0x183a <ftoa>
		printStatus(tx_string);
    2d98:	83 2d       	mov	r24, r3
    2d9a:	9b 2d       	mov	r25, r11
    2d9c:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    2da0:	f3 c1       	rjmp	.+998    	; 0x3188 <main+0x1840>
		break;
		
		case 204:	// Send ch1.TempSetPoint
		ftoa(ch1.TempSetPoint, tx_string);
    2da2:	60 91 0a 02 	lds	r22, 0x020A
    2da6:	70 91 0b 02 	lds	r23, 0x020B
    2daa:	80 91 0c 02 	lds	r24, 0x020C
    2dae:	90 91 0d 02 	lds	r25, 0x020D
    2db2:	43 2d       	mov	r20, r3
    2db4:	5b 2d       	mov	r21, r11
    2db6:	0e 94 1d 0c 	call	0x183a	; 0x183a <ftoa>
		printStatus(tx_string);
    2dba:	83 2d       	mov	r24, r3
    2dbc:	9b 2d       	mov	r25, r11
    2dbe:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    2dc2:	e2 c1       	rjmp	.+964    	; 0x3188 <main+0x1840>
		break;
		
		case 205:	// Send Pgain ch1
		ftoa(ch1.Pgain, tx_string);
    2dc4:	60 91 26 02 	lds	r22, 0x0226
    2dc8:	70 91 27 02 	lds	r23, 0x0227
    2dcc:	80 91 28 02 	lds	r24, 0x0228
    2dd0:	90 91 29 02 	lds	r25, 0x0229
    2dd4:	43 2d       	mov	r20, r3
    2dd6:	5b 2d       	mov	r21, r11
    2dd8:	0e 94 1d 0c 	call	0x183a	; 0x183a <ftoa>
		printStatus(tx_string);
    2ddc:	83 2d       	mov	r24, r3
    2dde:	9b 2d       	mov	r25, r11
    2de0:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    2de4:	d1 c1       	rjmp	.+930    	; 0x3188 <main+0x1840>
		break;
		
		case 206:	// Send Igain ch1
		ftoa(ch1.Igain, tx_string);
    2de6:	60 91 2a 02 	lds	r22, 0x022A
    2dea:	70 91 2b 02 	lds	r23, 0x022B
    2dee:	80 91 2c 02 	lds	r24, 0x022C
    2df2:	90 91 2d 02 	lds	r25, 0x022D
    2df6:	43 2d       	mov	r20, r3
    2df8:	5b 2d       	mov	r21, r11
    2dfa:	0e 94 1d 0c 	call	0x183a	; 0x183a <ftoa>
		printStatus(tx_string);
    2dfe:	83 2d       	mov	r24, r3
    2e00:	9b 2d       	mov	r25, r11
    2e02:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    2e06:	c0 c1       	rjmp	.+896    	; 0x3188 <main+0x1840>
		break;
		
		case 207:	// Send Dgain ch1
		ftoa(ch1.Dgain, tx_string);
    2e08:	60 91 2e 02 	lds	r22, 0x022E
    2e0c:	70 91 2f 02 	lds	r23, 0x022F
    2e10:	80 91 30 02 	lds	r24, 0x0230
    2e14:	90 91 31 02 	lds	r25, 0x0231
    2e18:	43 2d       	mov	r20, r3
    2e1a:	5b 2d       	mov	r21, r11
    2e1c:	0e 94 1d 0c 	call	0x183a	; 0x183a <ftoa>
		printStatus(tx_string);
    2e20:	83 2d       	mov	r24, r3
    2e22:	9b 2d       	mov	r25, r11
    2e24:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    2e28:	af c1       	rjmp	.+862    	; 0x3188 <main+0x1840>
		break;
		
		case 208:	// Send TemperatureWindow
		ftoa(ch1.tempErrorWin, tx_string);
    2e2a:	60 91 5e 02 	lds	r22, 0x025E
    2e2e:	70 91 5f 02 	lds	r23, 0x025F
    2e32:	80 91 60 02 	lds	r24, 0x0260
    2e36:	90 91 61 02 	lds	r25, 0x0261
    2e3a:	43 2d       	mov	r20, r3
    2e3c:	5b 2d       	mov	r21, r11
    2e3e:	0e 94 1d 0c 	call	0x183a	; 0x183a <ftoa>
		printStatus(tx_string);
    2e42:	83 2d       	mov	r24, r3
    2e44:	9b 2d       	mov	r25, r11
    2e46:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    2e4a:	9e c1       	rjmp	.+828    	; 0x3188 <main+0x1840>
		break;
		
		case 209:	// Send SettleTimeTemperature
		itoa(ch1.tempSettleTime, tx_string, 10);
    2e4c:	80 91 64 02 	lds	r24, 0x0264
    2e50:	90 91 65 02 	lds	r25, 0x0265
    2e54:	4a e0       	ldi	r20, 0x0A	; 10
    2e56:	63 2d       	mov	r22, r3
    2e58:	7b 2d       	mov	r23, r11
    2e5a:	0e 94 31 24 	call	0x4862	; 0x4862 <__itoa_ncheck>
		printStatus(tx_string);
    2e5e:	83 2d       	mov	r24, r3
    2e60:	9b 2d       	mov	r25, r11
    2e62:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    2e66:	90 c1       	rjmp	.+800    	; 0x3188 <main+0x1840>
		break;
		
		case 210:	// Send Temperature stable status
		switch(ch1.tempStable)
    2e68:	80 91 66 02 	lds	r24, 0x0266
    2e6c:	90 91 67 02 	lds	r25, 0x0267
    2e70:	00 97       	sbiw	r24, 0x00	; 0
    2e72:	19 f0       	breq	.+6      	; 0x2e7a <main+0x1532>
    2e74:	01 97       	sbiw	r24, 0x01	; 1
    2e76:	31 f0       	breq	.+12     	; 0x2e84 <main+0x153c>
    2e78:	87 c1       	rjmp	.+782    	; 0x3188 <main+0x1840>
		{
			case 0:
			printStatus("0");
    2e7a:	86 e2       	ldi	r24, 0x26	; 38
    2e7c:	91 e0       	ldi	r25, 0x01	; 1
    2e7e:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    2e82:	82 c1       	rjmp	.+772    	; 0x3188 <main+0x1840>
			break;
			
			case 1:
			printStatus("1");
    2e84:	88 e2       	ldi	r24, 0x28	; 40
    2e86:	91 e0       	ldi	r25, 0x01	; 1
    2e88:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    2e8c:	7d c1       	rjmp	.+762    	; 0x3188 <main+0x1840>
		}
		break;		
		
		// *** Channel 2 ***		
		case 300:	// Send sensor 2 temperature
		ftoa(ch2.TempSensor, tx_string);
    2e8e:	60 91 ab 01 	lds	r22, 0x01AB
    2e92:	70 91 ac 01 	lds	r23, 0x01AC
    2e96:	80 91 ad 01 	lds	r24, 0x01AD
    2e9a:	90 91 ae 01 	lds	r25, 0x01AE
    2e9e:	43 2d       	mov	r20, r3
    2ea0:	5b 2d       	mov	r21, r11
    2ea2:	0e 94 1d 0c 	call	0x183a	; 0x183a <ftoa>
		printStatus(tx_string);
    2ea6:	83 2d       	mov	r24, r3
    2ea8:	9b 2d       	mov	r25, r11
    2eaa:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    2eae:	6c c1       	rjmp	.+728    	; 0x3188 <main+0x1840>
		break;
		
		case 301:	// Send P part of PID-controller 2
		ftoa(ch2.P_err, tx_string);
    2eb0:	60 91 af 01 	lds	r22, 0x01AF
    2eb4:	70 91 b0 01 	lds	r23, 0x01B0
    2eb8:	80 91 b1 01 	lds	r24, 0x01B1
    2ebc:	90 91 b2 01 	lds	r25, 0x01B2
    2ec0:	43 2d       	mov	r20, r3
    2ec2:	5b 2d       	mov	r21, r11
    2ec4:	0e 94 1d 0c 	call	0x183a	; 0x183a <ftoa>
		printStatus(tx_string);
    2ec8:	83 2d       	mov	r24, r3
    2eca:	9b 2d       	mov	r25, r11
    2ecc:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    2ed0:	5b c1       	rjmp	.+694    	; 0x3188 <main+0x1840>
		break;
		
		case 302:	// Send I part of PID-controller 2
		ftoa(ch2.I_err, tx_string);
    2ed2:	60 91 b3 01 	lds	r22, 0x01B3
    2ed6:	70 91 b4 01 	lds	r23, 0x01B4
    2eda:	80 91 b5 01 	lds	r24, 0x01B5
    2ede:	90 91 b6 01 	lds	r25, 0x01B6
    2ee2:	43 2d       	mov	r20, r3
    2ee4:	5b 2d       	mov	r21, r11
    2ee6:	0e 94 1d 0c 	call	0x183a	; 0x183a <ftoa>
		printStatus(tx_string);
    2eea:	83 2d       	mov	r24, r3
    2eec:	9b 2d       	mov	r25, r11
    2eee:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    2ef2:	4a c1       	rjmp	.+660    	; 0x3188 <main+0x1840>
		break;
		
		case 303:	// Send D part of PID-controller 2
		ftoa(ch2.D_err, tx_string);
    2ef4:	60 91 b7 01 	lds	r22, 0x01B7
    2ef8:	70 91 b8 01 	lds	r23, 0x01B8
    2efc:	80 91 b9 01 	lds	r24, 0x01B9
    2f00:	90 91 ba 01 	lds	r25, 0x01BA
    2f04:	43 2d       	mov	r20, r3
    2f06:	5b 2d       	mov	r21, r11
    2f08:	0e 94 1d 0c 	call	0x183a	; 0x183a <ftoa>
		printStatus(tx_string);
    2f0c:	83 2d       	mov	r24, r3
    2f0e:	9b 2d       	mov	r25, r11
    2f10:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    2f14:	39 c1       	rjmp	.+626    	; 0x3188 <main+0x1840>
		break;
		
		case 304:	// Send ch2.TempSetPoint
		ftoa(ch2.TempSetPoint, tx_string);
    2f16:	60 91 a7 01 	lds	r22, 0x01A7
    2f1a:	70 91 a8 01 	lds	r23, 0x01A8
    2f1e:	80 91 a9 01 	lds	r24, 0x01A9
    2f22:	90 91 aa 01 	lds	r25, 0x01AA
    2f26:	43 2d       	mov	r20, r3
    2f28:	5b 2d       	mov	r21, r11
    2f2a:	0e 94 1d 0c 	call	0x183a	; 0x183a <ftoa>
		printStatus(tx_string);
    2f2e:	83 2d       	mov	r24, r3
    2f30:	9b 2d       	mov	r25, r11
    2f32:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    2f36:	28 c1       	rjmp	.+592    	; 0x3188 <main+0x1840>
		break;
		
		case 305:	// Send Pgain ch2
		ftoa(ch2.Pgain, tx_string);
    2f38:	60 91 c3 01 	lds	r22, 0x01C3
    2f3c:	70 91 c4 01 	lds	r23, 0x01C4
    2f40:	80 91 c5 01 	lds	r24, 0x01C5
    2f44:	90 91 c6 01 	lds	r25, 0x01C6
    2f48:	43 2d       	mov	r20, r3
    2f4a:	5b 2d       	mov	r21, r11
    2f4c:	0e 94 1d 0c 	call	0x183a	; 0x183a <ftoa>
		printStatus(tx_string);
    2f50:	83 2d       	mov	r24, r3
    2f52:	9b 2d       	mov	r25, r11
    2f54:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    2f58:	17 c1       	rjmp	.+558    	; 0x3188 <main+0x1840>
		break;
		
		case 306:	// Send Igain ch2
		ftoa(ch2.Igain, tx_string);
    2f5a:	60 91 c7 01 	lds	r22, 0x01C7
    2f5e:	70 91 c8 01 	lds	r23, 0x01C8
    2f62:	80 91 c9 01 	lds	r24, 0x01C9
    2f66:	90 91 ca 01 	lds	r25, 0x01CA
    2f6a:	43 2d       	mov	r20, r3
    2f6c:	5b 2d       	mov	r21, r11
    2f6e:	0e 94 1d 0c 	call	0x183a	; 0x183a <ftoa>
		printStatus(tx_string);
    2f72:	83 2d       	mov	r24, r3
    2f74:	9b 2d       	mov	r25, r11
    2f76:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    2f7a:	06 c1       	rjmp	.+524    	; 0x3188 <main+0x1840>
		break;
		
		case 307:	// Send Dgain ch2
		ftoa(ch2.Dgain, tx_string);
    2f7c:	60 91 cb 01 	lds	r22, 0x01CB
    2f80:	70 91 cc 01 	lds	r23, 0x01CC
    2f84:	80 91 cd 01 	lds	r24, 0x01CD
    2f88:	90 91 ce 01 	lds	r25, 0x01CE
    2f8c:	43 2d       	mov	r20, r3
    2f8e:	5b 2d       	mov	r21, r11
    2f90:	0e 94 1d 0c 	call	0x183a	; 0x183a <ftoa>
		printStatus(tx_string);
    2f94:	83 2d       	mov	r24, r3
    2f96:	9b 2d       	mov	r25, r11
    2f98:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    2f9c:	f5 c0       	rjmp	.+490    	; 0x3188 <main+0x1840>
		break;
		
		case 308:	// Send TemperatureWindow
		ftoa(ch2.tempErrorWin, tx_string);
    2f9e:	60 91 fb 01 	lds	r22, 0x01FB
    2fa2:	70 91 fc 01 	lds	r23, 0x01FC
    2fa6:	80 91 fd 01 	lds	r24, 0x01FD
    2faa:	90 91 fe 01 	lds	r25, 0x01FE
    2fae:	43 2d       	mov	r20, r3
    2fb0:	5b 2d       	mov	r21, r11
    2fb2:	0e 94 1d 0c 	call	0x183a	; 0x183a <ftoa>
		printStatus(tx_string);
    2fb6:	83 2d       	mov	r24, r3
    2fb8:	9b 2d       	mov	r25, r11
    2fba:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    2fbe:	e4 c0       	rjmp	.+456    	; 0x3188 <main+0x1840>
		break;
		
		case 309:	// Send SettleTimeTemperature
		itoa(ch2.tempSettleTime, tx_string, 10);
    2fc0:	80 91 01 02 	lds	r24, 0x0201
    2fc4:	90 91 02 02 	lds	r25, 0x0202
    2fc8:	4a e0       	ldi	r20, 0x0A	; 10
    2fca:	63 2d       	mov	r22, r3
    2fcc:	7b 2d       	mov	r23, r11
    2fce:	0e 94 31 24 	call	0x4862	; 0x4862 <__itoa_ncheck>
		printStatus(tx_string);
    2fd2:	83 2d       	mov	r24, r3
    2fd4:	9b 2d       	mov	r25, r11
    2fd6:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    2fda:	d6 c0       	rjmp	.+428    	; 0x3188 <main+0x1840>
		break;
		
		case 310:	// Send Temperature stable status
		switch(ch2.tempStable)
    2fdc:	80 91 03 02 	lds	r24, 0x0203
    2fe0:	90 91 04 02 	lds	r25, 0x0204
    2fe4:	00 97       	sbiw	r24, 0x00	; 0
    2fe6:	19 f0       	breq	.+6      	; 0x2fee <main+0x16a6>
    2fe8:	01 97       	sbiw	r24, 0x01	; 1
    2fea:	31 f0       	breq	.+12     	; 0x2ff8 <main+0x16b0>
    2fec:	cd c0       	rjmp	.+410    	; 0x3188 <main+0x1840>
		{
			case 0:
			printStatus("0");
    2fee:	86 e2       	ldi	r24, 0x26	; 38
    2ff0:	91 e0       	ldi	r25, 0x01	; 1
    2ff2:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    2ff6:	c8 c0       	rjmp	.+400    	; 0x3188 <main+0x1840>
			break;
			
			case 1:
			printStatus("1");
    2ff8:	88 e2       	ldi	r24, 0x28	; 40
    2ffa:	91 e0       	ldi	r25, 0x01	; 1
    2ffc:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    3000:	c3 c0       	rjmp	.+390    	; 0x3188 <main+0x1840>
		}
		break;		
		
		// *** Channel 3 ***
		case 400:	// Send sensor 3 temperature
		ftoa(ch3.TempSensor, tx_string);
    3002:	60 91 48 01 	lds	r22, 0x0148
    3006:	70 91 49 01 	lds	r23, 0x0149
    300a:	80 91 4a 01 	lds	r24, 0x014A
    300e:	90 91 4b 01 	lds	r25, 0x014B
    3012:	43 2d       	mov	r20, r3
    3014:	5b 2d       	mov	r21, r11
    3016:	0e 94 1d 0c 	call	0x183a	; 0x183a <ftoa>
		printStatus(tx_string);
    301a:	83 2d       	mov	r24, r3
    301c:	9b 2d       	mov	r25, r11
    301e:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    3022:	b2 c0       	rjmp	.+356    	; 0x3188 <main+0x1840>
		break;
		
		case 401:	// Send P part of PID-controller 3
		ftoa(ch3.P_err, tx_string);
    3024:	60 91 4c 01 	lds	r22, 0x014C
    3028:	70 91 4d 01 	lds	r23, 0x014D
    302c:	80 91 4e 01 	lds	r24, 0x014E
    3030:	90 91 4f 01 	lds	r25, 0x014F
    3034:	43 2d       	mov	r20, r3
    3036:	5b 2d       	mov	r21, r11
    3038:	0e 94 1d 0c 	call	0x183a	; 0x183a <ftoa>
		printStatus(tx_string);
    303c:	83 2d       	mov	r24, r3
    303e:	9b 2d       	mov	r25, r11
    3040:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    3044:	a1 c0       	rjmp	.+322    	; 0x3188 <main+0x1840>
		break;
		
		case 402:	// Send I part of PID-controller 3
		ftoa(ch3.I_err, tx_string);
    3046:	60 91 50 01 	lds	r22, 0x0150
    304a:	70 91 51 01 	lds	r23, 0x0151
    304e:	80 91 52 01 	lds	r24, 0x0152
    3052:	90 91 53 01 	lds	r25, 0x0153
    3056:	43 2d       	mov	r20, r3
    3058:	5b 2d       	mov	r21, r11
    305a:	0e 94 1d 0c 	call	0x183a	; 0x183a <ftoa>
		printStatus(tx_string);
    305e:	83 2d       	mov	r24, r3
    3060:	9b 2d       	mov	r25, r11
    3062:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    3066:	90 c0       	rjmp	.+288    	; 0x3188 <main+0x1840>
		break;
		
		case 403:	// Send D part of PID-controller 3
		ftoa(ch3.D_err, tx_string);
    3068:	60 91 54 01 	lds	r22, 0x0154
    306c:	70 91 55 01 	lds	r23, 0x0155
    3070:	80 91 56 01 	lds	r24, 0x0156
    3074:	90 91 57 01 	lds	r25, 0x0157
    3078:	43 2d       	mov	r20, r3
    307a:	5b 2d       	mov	r21, r11
    307c:	0e 94 1d 0c 	call	0x183a	; 0x183a <ftoa>
		printStatus(tx_string);
    3080:	83 2d       	mov	r24, r3
    3082:	9b 2d       	mov	r25, r11
    3084:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    3088:	7f c0       	rjmp	.+254    	; 0x3188 <main+0x1840>
		break;
		
		case 404:	// Send ch3.TempSetPoint
		ftoa(ch3.TempSetPoint, tx_string);
    308a:	60 91 44 01 	lds	r22, 0x0144
    308e:	70 91 45 01 	lds	r23, 0x0145
    3092:	80 91 46 01 	lds	r24, 0x0146
    3096:	90 91 47 01 	lds	r25, 0x0147
    309a:	43 2d       	mov	r20, r3
    309c:	5b 2d       	mov	r21, r11
    309e:	0e 94 1d 0c 	call	0x183a	; 0x183a <ftoa>
		printStatus(tx_string);
    30a2:	83 2d       	mov	r24, r3
    30a4:	9b 2d       	mov	r25, r11
    30a6:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    30aa:	6e c0       	rjmp	.+220    	; 0x3188 <main+0x1840>
		break;
		
		case 405:	// Send Pgain ch3
		ftoa(ch3.Pgain, tx_string);
    30ac:	60 91 60 01 	lds	r22, 0x0160
    30b0:	70 91 61 01 	lds	r23, 0x0161
    30b4:	80 91 62 01 	lds	r24, 0x0162
    30b8:	90 91 63 01 	lds	r25, 0x0163
    30bc:	43 2d       	mov	r20, r3
    30be:	5b 2d       	mov	r21, r11
    30c0:	0e 94 1d 0c 	call	0x183a	; 0x183a <ftoa>
		printStatus(tx_string);
    30c4:	83 2d       	mov	r24, r3
    30c6:	9b 2d       	mov	r25, r11
    30c8:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    30cc:	5d c0       	rjmp	.+186    	; 0x3188 <main+0x1840>
		break;
		
		case 406:	// Send Igain ch3
		ftoa(ch3.Igain, tx_string);
    30ce:	60 91 64 01 	lds	r22, 0x0164
    30d2:	70 91 65 01 	lds	r23, 0x0165
    30d6:	80 91 66 01 	lds	r24, 0x0166
    30da:	90 91 67 01 	lds	r25, 0x0167
    30de:	43 2d       	mov	r20, r3
    30e0:	5b 2d       	mov	r21, r11
    30e2:	0e 94 1d 0c 	call	0x183a	; 0x183a <ftoa>
		printStatus(tx_string);
    30e6:	83 2d       	mov	r24, r3
    30e8:	9b 2d       	mov	r25, r11
    30ea:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    30ee:	4c c0       	rjmp	.+152    	; 0x3188 <main+0x1840>
		break;
		
		case 407:	// Send Dgain ch3
		ftoa(ch3.Dgain, tx_string);
    30f0:	60 91 68 01 	lds	r22, 0x0168
    30f4:	70 91 69 01 	lds	r23, 0x0169
    30f8:	80 91 6a 01 	lds	r24, 0x016A
    30fc:	90 91 6b 01 	lds	r25, 0x016B
    3100:	43 2d       	mov	r20, r3
    3102:	5b 2d       	mov	r21, r11
    3104:	0e 94 1d 0c 	call	0x183a	; 0x183a <ftoa>
		printStatus(tx_string);
    3108:	83 2d       	mov	r24, r3
    310a:	9b 2d       	mov	r25, r11
    310c:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    3110:	3b c0       	rjmp	.+118    	; 0x3188 <main+0x1840>
		break;	
		
		case 408:	// Send TemperatureWindow
		ftoa(ch3.tempErrorWin, tx_string);
    3112:	60 91 98 01 	lds	r22, 0x0198
    3116:	70 91 99 01 	lds	r23, 0x0199
    311a:	80 91 9a 01 	lds	r24, 0x019A
    311e:	90 91 9b 01 	lds	r25, 0x019B
    3122:	43 2d       	mov	r20, r3
    3124:	5b 2d       	mov	r21, r11
    3126:	0e 94 1d 0c 	call	0x183a	; 0x183a <ftoa>
		printStatus(tx_string);
    312a:	83 2d       	mov	r24, r3
    312c:	9b 2d       	mov	r25, r11
    312e:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    3132:	2a c0       	rjmp	.+84     	; 0x3188 <main+0x1840>
		break;
		
		case 409:	// Send SettleTimeTemperature
		itoa(ch3.tempSettleTime, tx_string, 10);
    3134:	80 91 9e 01 	lds	r24, 0x019E
    3138:	90 91 9f 01 	lds	r25, 0x019F
    313c:	4a e0       	ldi	r20, 0x0A	; 10
    313e:	63 2d       	mov	r22, r3
    3140:	7b 2d       	mov	r23, r11
    3142:	0e 94 31 24 	call	0x4862	; 0x4862 <__itoa_ncheck>
		printStatus(tx_string);
    3146:	83 2d       	mov	r24, r3
    3148:	9b 2d       	mov	r25, r11
    314a:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    314e:	1c c0       	rjmp	.+56     	; 0x3188 <main+0x1840>
		break;
		
		case 410:	// Send Temperature stable status
		switch(ch3.tempStable)
    3150:	80 91 a0 01 	lds	r24, 0x01A0
    3154:	90 91 a1 01 	lds	r25, 0x01A1
    3158:	00 97       	sbiw	r24, 0x00	; 0
    315a:	19 f0       	breq	.+6      	; 0x3162 <main+0x181a>
    315c:	01 97       	sbiw	r24, 0x01	; 1
    315e:	31 f0       	breq	.+12     	; 0x316c <main+0x1824>
    3160:	13 c0       	rjmp	.+38     	; 0x3188 <main+0x1840>
		{
			case 0:
			printStatus("0");
    3162:	86 e2       	ldi	r24, 0x26	; 38
    3164:	91 e0       	ldi	r25, 0x01	; 1
    3166:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    316a:	0e c0       	rjmp	.+28     	; 0x3188 <main+0x1840>
			break;
			
			case 1:
			printStatus("1");
    316c:	88 e2       	ldi	r24, 0x28	; 40
    316e:	91 e0       	ldi	r25, 0x01	; 1
    3170:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    3174:	09 c0       	rjmp	.+18     	; 0x3188 <main+0x1840>
			break;
		}
		break;		
		
		default:
		printStatus("VRerror");
    3176:	8a e2       	ldi	r24, 0x2A	; 42
    3178:	91 e0       	ldi	r25, 0x01	; 1
    317a:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    317e:	04 c0       	rjmp	.+8      	; 0x3188 <main+0x1840>
						var = atol(requestID);
						SendParameter(var);
					}
					else
					{
						printStatus("CRC error");
    3180:	89 e1       	ldi	r24, 0x19	; 25
    3182:	91 e0       	ldi	r25, 0x01	; 1
    3184:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
					}
				}
			}	
			
			pos = NULL;
			pos = strchr(rx_string, '&');
    3188:	66 e2       	ldi	r22, 0x26	; 38
    318a:	70 e0       	ldi	r23, 0x00	; 0
    318c:	89 2d       	mov	r24, r9
    318e:	9a 2d       	mov	r25, r10
    3190:	0e 94 08 24 	call	0x4810	; 0x4810 <strchr>
			if(pos != NULL)
    3194:	00 97       	sbiw	r24, 0x00	; 0
    3196:	11 f4       	brne	.+4      	; 0x319c <main+0x1854>
    3198:	0c 94 93 0e 	jmp	0x1d26	; 0x1d26 <main+0x3de>
    319c:	fc 01       	movw	r30, r24
			{
				setCmd[0] = *(pos + 1);					// Parse set command
    319e:	a3 ed       	ldi	r26, 0xD3	; 211
    31a0:	b4 e0       	ldi	r27, 0x04	; 4
    31a2:	81 81       	ldd	r24, Z+1	; 0x01
    31a4:	8c 93       	st	X, r24
				setCmd[1] = *(pos + 2);
    31a6:	82 81       	ldd	r24, Z+2	; 0x02
    31a8:	11 96       	adiw	r26, 0x01	; 1
    31aa:	8c 93       	st	X, r24
    31ac:	11 97       	sbiw	r26, 0x01	; 1
				requestID[0] = *(pos + 3);				// Parse request ID
    31ae:	83 81       	ldd	r24, Z+3	; 0x03
    31b0:	8d 8b       	std	Y+21, r24	; 0x15
				requestID[1] = *(pos + 4);
    31b2:	84 81       	ldd	r24, Z+4	; 0x04
    31b4:	8e 8b       	std	Y+22, r24	; 0x16
				requestID[2] = *(pos + 5);				
    31b6:	85 81       	ldd	r24, Z+5	; 0x05
    31b8:	8f 8b       	std	Y+23, r24	; 0x17
				
				if(strcmp(setCmd, "VS") == 0)
    31ba:	62 e3       	ldi	r22, 0x32	; 50
    31bc:	71 e0       	ldi	r23, 0x01	; 1
    31be:	cd 01       	movw	r24, r26
    31c0:	0e 94 13 24 	call	0x4826	; 0x4826 <strcmp>
    31c4:	89 2b       	or	r24, r25
    31c6:	11 f0       	breq	.+4      	; 0x31cc <main+0x1884>
    31c8:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <main+0x3d2>
    31cc:	e0 96       	adiw	r28, 0x30	; 48
    31ce:	ae ac       	ldd	r10, Y+62	; 0x3e
    31d0:	bf ac       	ldd	r11, Y+63	; 0x3f
    31d2:	e0 97       	sbiw	r28, 0x30	; 48
    31d4:	e2 96       	adiw	r28, 0x32	; 50
    31d6:	2e ac       	ldd	r2, Y+62	; 0x3e
    31d8:	3f ac       	ldd	r3, Y+63	; 0x3f
    31da:	e2 97       	sbiw	r28, 0x32	; 50
				{
					pos = strchr(rx_string, 0x0D);		// Find end of message
    31dc:	6d e0       	ldi	r22, 0x0D	; 13
    31de:	70 e0       	ldi	r23, 0x00	; 0
    31e0:	c5 01       	movw	r24, r10
    31e2:	0e 94 08 24 	call	0x4810	; 0x4810 <strchr>
					crc[0] = *(pos - 4);				// Parse incoming crc
    31e6:	e6 ed       	ldi	r30, 0xD6	; 214
    31e8:	f4 e0       	ldi	r31, 0x04	; 4
    31ea:	dc 01       	movw	r26, r24
    31ec:	14 97       	sbiw	r26, 0x04	; 4
    31ee:	2c 91       	ld	r18, X
    31f0:	20 83       	st	Z, r18
					crc[1] = *(pos - 3);
    31f2:	11 96       	adiw	r26, 0x01	; 1
    31f4:	2c 91       	ld	r18, X
    31f6:	21 83       	std	Z+1, r18	; 0x01
					crc[2] = *(pos - 2);
    31f8:	11 96       	adiw	r26, 0x01	; 1
    31fa:	2c 91       	ld	r18, X
    31fc:	22 83       	std	Z+2, r18	; 0x02
					crc[3] = *(pos - 1);
    31fe:	11 96       	adiw	r26, 0x01	; 1
    3200:	8c 91       	ld	r24, X
    3202:	83 83       	std	Z+3, r24	; 0x03
					
					itoa(GenCrc16(rx_string, (int)strnlen(rx_string, rx_size)-5), inCrC_string, 16);
    3204:	6e e1       	ldi	r22, 0x1E	; 30
    3206:	70 e0       	ldi	r23, 0x00	; 0
    3208:	c5 01       	movw	r24, r10
    320a:	0e 94 1c 24 	call	0x4838	; 0x4838 <strnlen>
    320e:	bc 01       	movw	r22, r24
    3210:	65 50       	subi	r22, 0x05	; 5
    3212:	71 09       	sbc	r23, r1
    3214:	c5 01       	movw	r24, r10
    3216:	0e 94 c8 01 	call	0x390	; 0x390 <GenCrc16>
    321a:	40 e1       	ldi	r20, 0x10	; 16
    321c:	be 01       	movw	r22, r28
    321e:	63 5d       	subi	r22, 0xD3	; 211
    3220:	7f 4f       	sbci	r23, 0xFF	; 255
    3222:	0e 94 31 24 	call	0x4862	; 0x4862 <__itoa_ncheck>
					if(CrcCompare(crc, inCrC_string) == true)
    3226:	be 01       	movw	r22, r28
    3228:	63 5d       	subi	r22, 0xD3	; 211
    322a:	7f 4f       	sbci	r23, 0xFF	; 255
    322c:	86 ed       	ldi	r24, 0xD6	; 214
    322e:	94 e0       	ldi	r25, 0x04	; 4
    3230:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <CrcCompare>
    3234:	88 23       	and	r24, r24
    3236:	11 f4       	brne	.+4      	; 0x323c <main+0x18f4>
    3238:	0c 94 61 21 	jmp	0x42c2	; 0x42c2 <main+0x297a>
					{
						var = atol(requestID);
						SetParameter(atol(requestID));
    323c:	ce 01       	movw	r24, r28
    323e:	45 96       	adiw	r24, 0x15	; 21
    3240:	0e 94 d7 23 	call	0x47ae	; 0x47ae <atol>

static inline void SetParameter(int id)
{
	char param[param_size];
	
	switch(id)
    3244:	6e 35       	cpi	r22, 0x5E	; 94
    3246:	b1 e0       	ldi	r27, 0x01	; 1
    3248:	7b 07       	cpc	r23, r27
    324a:	09 f4       	brne	.+2      	; 0x324e <main+0x1906>
    324c:	65 c3       	rjmp	.+1738   	; 0x3918 <main+0x1fd0>
    324e:	bc f5       	brge	.+110    	; 0x32be <main+0x1976>
    3250:	6c 39       	cpi	r22, 0x9C	; 156
    3252:	71 05       	cpc	r23, r1
    3254:	09 f4       	brne	.+2      	; 0x3258 <main+0x1910>
    3256:	12 c2       	rjmp	.+1060   	; 0x367c <main+0x1d34>
    3258:	b4 f4       	brge	.+44     	; 0x3286 <main+0x193e>
    325a:	68 39       	cpi	r22, 0x98	; 152
    325c:	71 05       	cpc	r23, r1
    325e:	09 f4       	brne	.+2      	; 0x3262 <main+0x191a>
    3260:	6a c1       	rjmp	.+724    	; 0x3536 <main+0x1bee>
    3262:	54 f4       	brge	.+20     	; 0x3278 <main+0x1930>
    3264:	66 39       	cpi	r22, 0x96	; 150
    3266:	71 05       	cpc	r23, r1
    3268:	09 f4       	brne	.+2      	; 0x326c <main+0x1924>
    326a:	65 c0       	rjmp	.+202    	; 0x3336 <main+0x19ee>
    326c:	67 39       	cpi	r22, 0x97	; 151
    326e:	71 05       	cpc	r23, r1
    3270:	09 f4       	brne	.+2      	; 0x3274 <main+0x192c>
    3272:	8f c0       	rjmp	.+286    	; 0x3392 <main+0x1a4a>
    3274:	0c 94 5b 21 	jmp	0x42b6	; 0x42b6 <main+0x296e>
    3278:	6a 39       	cpi	r22, 0x9A	; 154
    327a:	71 05       	cpc	r23, r1
    327c:	09 f4       	brne	.+2      	; 0x3280 <main+0x1938>
    327e:	b7 c1       	rjmp	.+878    	; 0x35ee <main+0x1ca6>
    3280:	0c f4       	brge	.+2      	; 0x3284 <main+0x193c>
    3282:	87 c1       	rjmp	.+782    	; 0x3592 <main+0x1c4a>
    3284:	cd c1       	rjmp	.+922    	; 0x3620 <main+0x1cd8>
    3286:	6d 3f       	cpi	r22, 0xFD	; 253
    3288:	71 05       	cpc	r23, r1
    328a:	09 f4       	brne	.+2      	; 0x328e <main+0x1946>
    328c:	aa c2       	rjmp	.+1364   	; 0x37e2 <main+0x1e9a>
    328e:	64 f4       	brge	.+24     	; 0x32a8 <main+0x1960>
    3290:	6b 3f       	cpi	r22, 0xFB	; 251
    3292:	71 05       	cpc	r23, r1
    3294:	09 f4       	brne	.+2      	; 0x3298 <main+0x1950>
    3296:	4a c2       	rjmp	.+1172   	; 0x372c <main+0x1de4>
    3298:	0c f0       	brlt	.+2      	; 0x329c <main+0x1954>
    329a:	76 c2       	rjmp	.+1260   	; 0x3788 <main+0x1e40>
    329c:	6a 3f       	cpi	r22, 0xFA	; 250
    329e:	71 05       	cpc	r23, r1
    32a0:	09 f4       	brne	.+2      	; 0x32a4 <main+0x195c>
    32a2:	16 c2       	rjmp	.+1068   	; 0x36d0 <main+0x1d88>
    32a4:	0c 94 5b 21 	jmp	0x42b6	; 0x42b6 <main+0x296e>
    32a8:	6f 3f       	cpi	r22, 0xFF	; 255
    32aa:	71 05       	cpc	r23, r1
    32ac:	09 f4       	brne	.+2      	; 0x32b0 <main+0x1968>
    32ae:	e0 c2       	rjmp	.+1472   	; 0x3870 <main+0x1f28>
    32b0:	0c f4       	brge	.+2      	; 0x32b4 <main+0x196c>
    32b2:	c4 c2       	rjmp	.+1416   	; 0x383c <main+0x1ef4>
    32b4:	61 15       	cp	r22, r1
    32b6:	71 40       	sbci	r23, 0x01	; 1
    32b8:	09 f4       	brne	.+2      	; 0x32bc <main+0x1974>
    32ba:	06 c3       	rjmp	.+1548   	; 0x38c8 <main+0x1f80>
    32bc:	fc c7       	rjmp	.+4088   	; 0x42b6 <main+0x296e>
    32be:	62 3c       	cpi	r22, 0xC2	; 194
    32c0:	21 e0       	ldi	r18, 0x01	; 1
    32c2:	72 07       	cpc	r23, r18
    32c4:	09 f4       	brne	.+2      	; 0x32c8 <main+0x1980>
    32c6:	8e c5       	rjmp	.+2844   	; 0x3de4 <main+0x249c>
    32c8:	e4 f4       	brge	.+56     	; 0x3302 <main+0x19ba>
    32ca:	61 36       	cpi	r22, 0x61	; 97
    32cc:	a1 e0       	ldi	r26, 0x01	; 1
    32ce:	7a 07       	cpc	r23, r26
    32d0:	09 f4       	brne	.+2      	; 0x32d4 <main+0x198c>
    32d2:	a6 c3       	rjmp	.+1868   	; 0x3a20 <main+0x20d8>
    32d4:	54 f4       	brge	.+20     	; 0x32ea <main+0x19a2>
    32d6:	6f 35       	cpi	r22, 0x5F	; 95
    32d8:	e1 e0       	ldi	r30, 0x01	; 1
    32da:	7e 07       	cpc	r23, r30
    32dc:	09 f4       	brne	.+2      	; 0x32e0 <main+0x1998>
    32de:	48 c3       	rjmp	.+1680   	; 0x3970 <main+0x2028>
    32e0:	60 36       	cpi	r22, 0x60	; 96
    32e2:	71 40       	sbci	r23, 0x01	; 1
    32e4:	09 f4       	brne	.+2      	; 0x32e8 <main+0x19a0>
    32e6:	70 c3       	rjmp	.+1760   	; 0x39c8 <main+0x2080>
    32e8:	e6 c7       	rjmp	.+4044   	; 0x42b6 <main+0x296e>
    32ea:	63 36       	cpi	r22, 0x63	; 99
    32ec:	21 e0       	ldi	r18, 0x01	; 1
    32ee:	72 07       	cpc	r23, r18
    32f0:	09 f4       	brne	.+2      	; 0x32f4 <main+0x19ac>
    32f2:	db c3       	rjmp	.+1974   	; 0x3aaa <main+0x2162>
    32f4:	0c f4       	brge	.+2      	; 0x32f8 <main+0x19b0>
    32f6:	c0 c3       	rjmp	.+1920   	; 0x3a78 <main+0x2130>
    32f8:	64 36       	cpi	r22, 0x64	; 100
    32fa:	71 40       	sbci	r23, 0x01	; 1
    32fc:	09 f4       	brne	.+2      	; 0x3300 <main+0x19b8>
    32fe:	a8 c4       	rjmp	.+2384   	; 0x3c50 <main+0x2308>
    3300:	da c7       	rjmp	.+4020   	; 0x42b6 <main+0x296e>
    3302:	66 3c       	cpi	r22, 0xC6	; 198
    3304:	b1 e0       	ldi	r27, 0x01	; 1
    3306:	7b 07       	cpc	r23, r27
    3308:	09 f4       	brne	.+2      	; 0x330c <main+0x19c4>
    330a:	60 c7       	rjmp	.+3776   	; 0x41cc <main+0x2884>
    330c:	44 f4       	brge	.+16     	; 0x331e <main+0x19d6>
    330e:	64 3c       	cpi	r22, 0xC4	; 196
    3310:	f1 e0       	ldi	r31, 0x01	; 1
    3312:	7f 07       	cpc	r23, r31
    3314:	09 f4       	brne	.+2      	; 0x3318 <main+0x19d0>
    3316:	02 c7       	rjmp	.+3588   	; 0x411c <main+0x27d4>
    3318:	0c f4       	brge	.+2      	; 0x331c <main+0x19d4>
    331a:	32 c6       	rjmp	.+3172   	; 0x3f80 <main+0x2638>
    331c:	2b c7       	rjmp	.+3670   	; 0x4174 <main+0x282c>
    331e:	68 3c       	cpi	r22, 0xC8	; 200
    3320:	31 e0       	ldi	r19, 0x01	; 1
    3322:	73 07       	cpc	r23, r19
    3324:	09 f4       	brne	.+2      	; 0x3328 <main+0x19e0>
    3326:	97 c7       	rjmp	.+3886   	; 0x4256 <main+0x290e>
    3328:	0c f4       	brge	.+2      	; 0x332c <main+0x19e4>
    332a:	69 c7       	rjmp	.+3794   	; 0x41fe <main+0x28b6>
    332c:	64 3f       	cpi	r22, 0xF4	; 244
    332e:	71 40       	sbci	r23, 0x01	; 1
    3330:	09 f4       	brne	.+2      	; 0x3334 <main+0x19ec>
    3332:	b9 c7       	rjmp	.+3954   	; 0x42a6 <main+0x295e>
    3334:	c0 c7       	rjmp	.+3968   	; 0x42b6 <main+0x296e>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    3336:	6e e1       	ldi	r22, 0x1E	; 30
    3338:	70 e0       	ldi	r23, 0x00	; 0
    333a:	c5 01       	movw	r24, r10
    333c:	0e 94 1c 24 	call	0x4838	; 0x4838 <strnlen>
    3340:	05 97       	sbiw	r24, 0x05	; 5
    3342:	9c 01       	movw	r18, r24
    3344:	d1 01       	movw	r26, r2
    3346:	a1 01       	movw	r20, r2
    3348:	4c 5e       	subi	r20, 0xEC	; 236
    334a:	5f 4f       	sbci	r21, 0xFF	; 255
    334c:	f1 01       	movw	r30, r2
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    334e:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    3350:	e4 17       	cp	r30, r20
    3352:	f5 07       	cpc	r31, r21
    3354:	e1 f7       	brne	.-8      	; 0x334e <main+0x1a06>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    3356:	2b 30       	cpi	r18, 0x0B	; 11
    3358:	31 05       	cpc	r19, r1
    335a:	54 f0       	brlt	.+20     	; 0x3370 <main+0x1a28>
    335c:	ea ee       	ldi	r30, 0xEA	; 234
    335e:	f4 e0       	ldi	r31, 0x04	; 4
    3360:	80 52       	subi	r24, 0x20	; 32
    3362:	9b 4f       	sbci	r25, 0xFB	; 251
    3364:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    3366:	91 91       	ld	r25, Z+
    3368:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    336a:	e2 17       	cp	r30, r18
    336c:	f3 07       	cpc	r31, r19
    336e:	d9 f7       	brne	.-10     	; 0x3366 <main+0x1a1e>
	switch(id)
	{
		// *** Channel 0 ***
		case 150:	// ch0.TempSetPoint
		ParamParse(rx_string, param);
		ch0.TempSetPoint = atof(param);
    3370:	c1 01       	movw	r24, r2
    3372:	0e 94 b7 23 	call	0x476e	; 0x476e <atof>
    3376:	60 93 6d 02 	sts	0x026D, r22
    337a:	70 93 6e 02 	sts	0x026E, r23
    337e:	80 93 6f 02 	sts	0x026F, r24
    3382:	90 93 70 02 	sts	0x0270, r25
		printStatus("");
    3386:	87 e2       	ldi	r24, 0x27	; 39
    3388:	91 e0       	ldi	r25, 0x01	; 1
    338a:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    338e:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <main+0x3bc>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    3392:	6e e1       	ldi	r22, 0x1E	; 30
    3394:	70 e0       	ldi	r23, 0x00	; 0
    3396:	c5 01       	movw	r24, r10
    3398:	0e 94 1c 24 	call	0x4838	; 0x4838 <strnlen>
    339c:	05 97       	sbiw	r24, 0x05	; 5
    339e:	9c 01       	movw	r18, r24
    33a0:	d1 01       	movw	r26, r2
    33a2:	a1 01       	movw	r20, r2
    33a4:	4c 5e       	subi	r20, 0xEC	; 236
    33a6:	5f 4f       	sbci	r21, 0xFF	; 255
    33a8:	f1 01       	movw	r30, r2
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    33aa:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    33ac:	e4 17       	cp	r30, r20
    33ae:	f5 07       	cpc	r31, r21
    33b0:	e1 f7       	brne	.-8      	; 0x33aa <main+0x1a62>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    33b2:	2b 30       	cpi	r18, 0x0B	; 11
    33b4:	31 05       	cpc	r19, r1
    33b6:	54 f0       	brlt	.+20     	; 0x33cc <main+0x1a84>
    33b8:	ea ee       	ldi	r30, 0xEA	; 234
    33ba:	f4 e0       	ldi	r31, 0x04	; 4
    33bc:	80 52       	subi	r24, 0x20	; 32
    33be:	9b 4f       	sbci	r25, 0xFB	; 251
    33c0:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    33c2:	91 91       	ld	r25, Z+
    33c4:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    33c6:	e2 17       	cp	r30, r18
    33c8:	f3 07       	cpc	r31, r19
    33ca:	d9 f7       	brne	.-10     	; 0x33c2 <main+0x1a7a>
		printStatus("");
		break;
		
		case 151:	// SetPgainCh0
		ParamParse(rx_string, param);
		ch0.Pgain = atof(param);
    33cc:	c1 01       	movw	r24, r2
    33ce:	0e 94 b7 23 	call	0x476e	; 0x476e <atof>
    33d2:	60 93 89 02 	sts	0x0289, r22
    33d6:	70 93 8a 02 	sts	0x028A, r23
    33da:	80 93 8b 02 	sts	0x028B, r24
    33de:	90 93 8c 02 	sts	0x028C, r25
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    33e2:	81 e2       	ldi	r24, 0x21	; 33
    33e4:	8a ab       	std	Y+50, r24	; 0x32
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    33e6:	f5 01       	movw	r30, r10
    33e8:	81 81       	ldd	r24, Z+1	; 0x01
    33ea:	8b ab       	std	Y+51, r24	; 0x33
    33ec:	82 81       	ldd	r24, Z+2	; 0x02
    33ee:	8c ab       	std	Y+52, r24	; 0x34
    33f0:	83 81       	ldd	r24, Z+3	; 0x03
    33f2:	8d ab       	std	Y+53, r24	; 0x35
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    33f4:	1e aa       	std	Y+54, r1	; 0x36
    33f6:	1f aa       	std	Y+55, r1	; 0x37
    33f8:	18 ae       	std	Y+56, r1	; 0x38
    33fa:	8e 01       	movw	r16, r28
    33fc:	0e 5c       	subi	r16, 0xCE	; 206
    33fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3400:	be 01       	movw	r22, r28
    3402:	6a 5c       	subi	r22, 0xCA	; 202
    3404:	7f 4f       	sbci	r23, 0xFF	; 255
    3406:	f8 01       	movw	r30, r16
    3408:	80 e0       	ldi	r24, 0x00	; 0
    340a:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    340c:	b8 e0       	ldi	r27, 0x08	; 8
    340e:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    3410:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    3412:	29 2f       	mov	r18, r25
    3414:	33 27       	eor	r19, r19
    3416:	27 fd       	sbrc	r18, 7
    3418:	3a 95       	dec	r19
    341a:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    341c:	32 2f       	mov	r19, r18
    341e:	22 27       	eor	r18, r18
    3420:	4b 2f       	mov	r20, r27
    3422:	5f 2d       	mov	r21, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    3424:	33 23       	and	r19, r19
    3426:	3c f4       	brge	.+14     	; 0x3436 <main+0x1aee>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    3428:	22 0f       	add	r18, r18
    342a:	33 1f       	adc	r19, r19
    342c:	a1 e2       	ldi	r26, 0x21	; 33
    342e:	2a 27       	eor	r18, r26
    3430:	a0 e1       	ldi	r26, 0x10	; 16
    3432:	3a 27       	eor	r19, r26
    3434:	02 c0       	rjmp	.+4      	; 0x343a <main+0x1af2>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    3436:	22 0f       	add	r18, r18
    3438:	33 1f       	adc	r19, r19
    343a:	41 50       	subi	r20, 0x01	; 1
    343c:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    343e:	91 f7       	brne	.-28     	; 0x3424 <main+0x1adc>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    3440:	98 2f       	mov	r25, r24
    3442:	88 27       	eor	r24, r24
    3444:	82 27       	eor	r24, r18
    3446:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    3448:	e6 17       	cp	r30, r22
    344a:	f7 07       	cpc	r31, r23
    344c:	09 f7       	brne	.-62     	; 0x3410 <main+0x1ac8>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    344e:	7c 01       	movw	r14, r24
    3450:	40 e1       	ldi	r20, 0x10	; 16
    3452:	66 ed       	ldi	r22, 0xD6	; 214
    3454:	74 e0       	ldi	r23, 0x04	; 4
    3456:	0e 94 31 24 	call	0x4862	; 0x4862 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    345a:	86 ed       	ldi	r24, 0xD6	; 214
    345c:	94 e0       	ldi	r25, 0x04	; 4
    345e:	0e 94 27 24 	call	0x484e	; 0x484e <strupr>
	if(crcXmodem < 0x10)
    3462:	b0 e1       	ldi	r27, 0x10	; 16
    3464:	eb 16       	cp	r14, r27
    3466:	f1 04       	cpc	r15, r1
    3468:	38 f4       	brcc	.+14     	; 0x3478 <main+0x1b30>
	{
		tx_string[cnt+4] = crc[0];
    346a:	80 91 d6 04 	lds	r24, 0x04D6
    346e:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = '0';
    3470:	80 e3       	ldi	r24, 0x30	; 48
    3472:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = '0';
    3474:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';
    3476:	8e ab       	std	Y+54, r24	; 0x36
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    3478:	c7 01       	movw	r24, r14
    347a:	40 97       	sbiw	r24, 0x10	; 16
    347c:	80 3f       	cpi	r24, 0xF0	; 240
    347e:	91 05       	cpc	r25, r1
    3480:	48 f4       	brcc	.+18     	; 0x3494 <main+0x1b4c>
	{
		tx_string[cnt+4] = crc[1];
    3482:	e6 ed       	ldi	r30, 0xD6	; 214
    3484:	f4 e0       	ldi	r31, 0x04	; 4
    3486:	81 81       	ldd	r24, Z+1	; 0x01
    3488:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = crc[0];
    348a:	80 81       	ld	r24, Z
    348c:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = '0';
    348e:	80 e3       	ldi	r24, 0x30	; 48
    3490:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';		
    3492:	8e ab       	std	Y+54, r24	; 0x36
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    3494:	c7 01       	movw	r24, r14
    3496:	9a 95       	dec	r25
    3498:	81 15       	cp	r24, r1
    349a:	9f 40       	sbci	r25, 0x0F	; 15
    349c:	50 f4       	brcc	.+20     	; 0x34b2 <main+0x1b6a>
	{
		tx_string[cnt+4] = crc[2];
    349e:	e6 ed       	ldi	r30, 0xD6	; 214
    34a0:	f4 e0       	ldi	r31, 0x04	; 4
    34a2:	82 81       	ldd	r24, Z+2	; 0x02
    34a4:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = crc[1];
    34a6:	81 81       	ldd	r24, Z+1	; 0x01
    34a8:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = crc[0];
    34aa:	80 81       	ld	r24, Z
    34ac:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';		
    34ae:	80 e3       	ldi	r24, 0x30	; 48
    34b0:	8e ab       	std	Y+54, r24	; 0x36
	}
	if(crcXmodem >= 0x1000)
    34b2:	e1 14       	cp	r14, r1
    34b4:	f0 e1       	ldi	r31, 0x10	; 16
    34b6:	ff 06       	cpc	r15, r31
    34b8:	50 f0       	brcs	.+20     	; 0x34ce <main+0x1b86>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    34ba:	e6 ed       	ldi	r30, 0xD6	; 214
    34bc:	f4 e0       	ldi	r31, 0x04	; 4
    34be:	80 81       	ld	r24, Z
    34c0:	8e ab       	std	Y+54, r24	; 0x36
		tx_string[cnt+2] = crc[1];
    34c2:	81 81       	ldd	r24, Z+1	; 0x01
    34c4:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+3] = crc[2];
    34c6:	82 81       	ldd	r24, Z+2	; 0x02
    34c8:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+4] = crc[3];
    34ca:	83 81       	ldd	r24, Z+3	; 0x03
    34cc:	89 af       	std	Y+57, r24	; 0x39
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    34ce:	8d e0       	ldi	r24, 0x0D	; 13
    34d0:	8a af       	std	Y+58, r24	; 0x3a
    34d2:	9e 01       	movw	r18, r28
    34d4:	25 5c       	subi	r18, 0xC5	; 197
    34d6:	3f 4f       	sbci	r19, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    34d8:	ee ef       	ldi	r30, 0xFE	; 254
    34da:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    34dc:	0f 2e       	mov	r0, r31
    34de:	f1 ec       	ldi	r31, 0xC1	; 193
    34e0:	cf 2e       	mov	r12, r31
    34e2:	d1 2c       	mov	r13, r1
    34e4:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    34e6:	70 e0       	ldi	r23, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    34e8:	d8 01       	movw	r26, r16
    34ea:	4d 91       	ld	r20, X+
    34ec:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    34ee:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    34f0:	91 81       	ldd	r25, Z+1	; 0x01
    34f2:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    34f4:	98 13       	cpse	r25, r24
    34f6:	04 c0       	rjmp	.+8      	; 0x3500 <main+0x1bb8>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    34f8:	d6 01       	movw	r26, r12
    34fa:	8c 91       	ld	r24, X
    34fc:	80 62       	ori	r24, 0x20	; 32
    34fe:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    3500:	50 81       	ld	r21, Z
    3502:	83 81       	ldd	r24, Z+3	; 0x03
    3504:	94 81       	ldd	r25, Z+4	; 0x04
    3506:	85 0f       	add	r24, r21
    3508:	91 1d       	adc	r25, r1
    350a:	dc 01       	movw	r26, r24
    350c:	4c 93       	st	X, r20
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    350e:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3510:	e8 2e       	mov	r14, r24
    3512:	f1 2c       	mov	r15, r1
    3514:	42 81       	ldd	r20, Z+2	; 0x02
    3516:	50 e0       	ldi	r21, 0x00	; 0
    3518:	41 50       	subi	r20, 0x01	; 1
    351a:	51 09       	sbc	r21, r1
    351c:	e4 16       	cp	r14, r20
    351e:	f5 06       	cpc	r15, r21
    3520:	11 f0       	breq	.+4      	; 0x3526 <main+0x1bde>
    3522:	8f 5f       	subi	r24, 0xFF	; 255
    3524:	01 c0       	rjmp	.+2      	; 0x3528 <main+0x1be0>
    3526:	87 2f       	mov	r24, r23
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    3528:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    352a:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    352c:	02 17       	cp	r16, r18
    352e:	13 07       	cpc	r17, r19
    3530:	d9 f6       	brne	.-74     	; 0x34e8 <main+0x1ba0>
    3532:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <main+0x3bc>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    3536:	6e e1       	ldi	r22, 0x1E	; 30
    3538:	70 e0       	ldi	r23, 0x00	; 0
    353a:	c5 01       	movw	r24, r10
    353c:	0e 94 1c 24 	call	0x4838	; 0x4838 <strnlen>
    3540:	05 97       	sbiw	r24, 0x05	; 5
    3542:	9c 01       	movw	r18, r24
    3544:	d1 01       	movw	r26, r2
    3546:	a1 01       	movw	r20, r2
    3548:	4c 5e       	subi	r20, 0xEC	; 236
    354a:	5f 4f       	sbci	r21, 0xFF	; 255
    354c:	f1 01       	movw	r30, r2
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    354e:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    3550:	e4 17       	cp	r30, r20
    3552:	f5 07       	cpc	r31, r21
    3554:	e1 f7       	brne	.-8      	; 0x354e <main+0x1c06>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    3556:	2b 30       	cpi	r18, 0x0B	; 11
    3558:	31 05       	cpc	r19, r1
    355a:	54 f0       	brlt	.+20     	; 0x3570 <main+0x1c28>
    355c:	ea ee       	ldi	r30, 0xEA	; 234
    355e:	f4 e0       	ldi	r31, 0x04	; 4
    3560:	80 52       	subi	r24, 0x20	; 32
    3562:	9b 4f       	sbci	r25, 0xFB	; 251
    3564:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    3566:	91 91       	ld	r25, Z+
    3568:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    356a:	e2 17       	cp	r30, r18
    356c:	f3 07       	cpc	r31, r19
    356e:	d9 f7       	brne	.-10     	; 0x3566 <main+0x1c1e>
		printStatus("");
		break;
		
		case 152:	// SetIgainCh0
		ParamParse(rx_string, param);
		ch0.Igain = atof(param);
    3570:	c1 01       	movw	r24, r2
    3572:	0e 94 b7 23 	call	0x476e	; 0x476e <atof>
    3576:	60 93 8d 02 	sts	0x028D, r22
    357a:	70 93 8e 02 	sts	0x028E, r23
    357e:	80 93 8f 02 	sts	0x028F, r24
    3582:	90 93 90 02 	sts	0x0290, r25
		printStatus("");
    3586:	87 e2       	ldi	r24, 0x27	; 39
    3588:	91 e0       	ldi	r25, 0x01	; 1
    358a:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    358e:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <main+0x3bc>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    3592:	6e e1       	ldi	r22, 0x1E	; 30
    3594:	70 e0       	ldi	r23, 0x00	; 0
    3596:	c5 01       	movw	r24, r10
    3598:	0e 94 1c 24 	call	0x4838	; 0x4838 <strnlen>
    359c:	05 97       	sbiw	r24, 0x05	; 5
    359e:	9c 01       	movw	r18, r24
    35a0:	d1 01       	movw	r26, r2
    35a2:	a1 01       	movw	r20, r2
    35a4:	4c 5e       	subi	r20, 0xEC	; 236
    35a6:	5f 4f       	sbci	r21, 0xFF	; 255
    35a8:	f1 01       	movw	r30, r2
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    35aa:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    35ac:	e4 17       	cp	r30, r20
    35ae:	f5 07       	cpc	r31, r21
    35b0:	e1 f7       	brne	.-8      	; 0x35aa <main+0x1c62>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    35b2:	2b 30       	cpi	r18, 0x0B	; 11
    35b4:	31 05       	cpc	r19, r1
    35b6:	54 f0       	brlt	.+20     	; 0x35cc <main+0x1c84>
    35b8:	ea ee       	ldi	r30, 0xEA	; 234
    35ba:	f4 e0       	ldi	r31, 0x04	; 4
    35bc:	80 52       	subi	r24, 0x20	; 32
    35be:	9b 4f       	sbci	r25, 0xFB	; 251
    35c0:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    35c2:	91 91       	ld	r25, Z+
    35c4:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    35c6:	e2 17       	cp	r30, r18
    35c8:	f3 07       	cpc	r31, r19
    35ca:	d9 f7       	brne	.-10     	; 0x35c2 <main+0x1c7a>
		printStatus("");
		break;
		
		case 153:	// Setch0.Dgain
		ParamParse(rx_string, param);
		ch0.Dgain = atof(param);
    35cc:	c1 01       	movw	r24, r2
    35ce:	0e 94 b7 23 	call	0x476e	; 0x476e <atof>
    35d2:	60 93 91 02 	sts	0x0291, r22
    35d6:	70 93 92 02 	sts	0x0292, r23
    35da:	80 93 93 02 	sts	0x0293, r24
    35de:	90 93 94 02 	sts	0x0294, r25
		printStatus("");
    35e2:	87 e2       	ldi	r24, 0x27	; 39
    35e4:	91 e0       	ldi	r25, 0x01	; 1
    35e6:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    35ea:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <main+0x3bc>
		break;	
		
		case 154:	// Set heater on/off ch0
		if(rx_string[10] == '1')
    35ee:	f5 01       	movw	r30, r10
    35f0:	82 85       	ldd	r24, Z+10	; 0x0a
    35f2:	81 33       	cpi	r24, 0x31	; 49
    35f4:	49 f4       	brne	.+18     	; 0x3608 <main+0x1cc0>
		{
			ch0.heaterEnable = true;
    35f6:	81 e0       	ldi	r24, 0x01	; 1
    35f8:	80 93 cf 02 	sts	0x02CF, r24
			printStatus("ON");
    35fc:	85 e3       	ldi	r24, 0x35	; 53
    35fe:	91 e0       	ldi	r25, 0x01	; 1
    3600:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    3604:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <main+0x3bc>
		}
		else if(rx_string[10] == '0')
    3608:	80 33       	cpi	r24, 0x30	; 48
    360a:	11 f0       	breq	.+4      	; 0x3610 <main+0x1cc8>
    360c:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <main+0x3bc>
		{
			ch0.heaterEnable = false;
    3610:	10 92 cf 02 	sts	0x02CF, r1
			printStatus("OFF");
    3614:	88 e3       	ldi	r24, 0x38	; 56
    3616:	91 e0       	ldi	r25, 0x01	; 1
    3618:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    361c:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <main+0x3bc>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    3620:	6e e1       	ldi	r22, 0x1E	; 30
    3622:	70 e0       	ldi	r23, 0x00	; 0
    3624:	c5 01       	movw	r24, r10
    3626:	0e 94 1c 24 	call	0x4838	; 0x4838 <strnlen>
    362a:	05 97       	sbiw	r24, 0x05	; 5
    362c:	9c 01       	movw	r18, r24
    362e:	d1 01       	movw	r26, r2
    3630:	a1 01       	movw	r20, r2
    3632:	4c 5e       	subi	r20, 0xEC	; 236
    3634:	5f 4f       	sbci	r21, 0xFF	; 255
    3636:	f1 01       	movw	r30, r2
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    3638:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    363a:	e4 17       	cp	r30, r20
    363c:	f5 07       	cpc	r31, r21
    363e:	e1 f7       	brne	.-8      	; 0x3638 <main+0x1cf0>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    3640:	2b 30       	cpi	r18, 0x0B	; 11
    3642:	31 05       	cpc	r19, r1
    3644:	54 f0       	brlt	.+20     	; 0x365a <main+0x1d12>
    3646:	ea ee       	ldi	r30, 0xEA	; 234
    3648:	f4 e0       	ldi	r31, 0x04	; 4
    364a:	80 52       	subi	r24, 0x20	; 32
    364c:	9b 4f       	sbci	r25, 0xFB	; 251
    364e:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    3650:	91 91       	ld	r25, Z+
    3652:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    3654:	e2 17       	cp	r30, r18
    3656:	f3 07       	cpc	r31, r19
    3658:	d9 f7       	brne	.-10     	; 0x3650 <main+0x1d08>
		}
		break;
		
		case 155:	// Set Temperature error window
		ParamParse(rx_string, param);
		ch0.tempErrorWin = atof(param);
    365a:	c1 01       	movw	r24, r2
    365c:	0e 94 b7 23 	call	0x476e	; 0x476e <atof>
    3660:	60 93 c1 02 	sts	0x02C1, r22
    3664:	70 93 c2 02 	sts	0x02C2, r23
    3668:	80 93 c3 02 	sts	0x02C3, r24
    366c:	90 93 c4 02 	sts	0x02C4, r25
		printStatus("");
    3670:	87 e2       	ldi	r24, 0x27	; 39
    3672:	91 e0       	ldi	r25, 0x01	; 1
    3674:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    3678:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <main+0x3bc>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    367c:	6e e1       	ldi	r22, 0x1E	; 30
    367e:	70 e0       	ldi	r23, 0x00	; 0
    3680:	c5 01       	movw	r24, r10
    3682:	0e 94 1c 24 	call	0x4838	; 0x4838 <strnlen>
    3686:	05 97       	sbiw	r24, 0x05	; 5
    3688:	9c 01       	movw	r18, r24
    368a:	d1 01       	movw	r26, r2
    368c:	a1 01       	movw	r20, r2
    368e:	4c 5e       	subi	r20, 0xEC	; 236
    3690:	5f 4f       	sbci	r21, 0xFF	; 255
    3692:	f1 01       	movw	r30, r2
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    3694:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    3696:	e4 17       	cp	r30, r20
    3698:	f5 07       	cpc	r31, r21
    369a:	e1 f7       	brne	.-8      	; 0x3694 <main+0x1d4c>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    369c:	2b 30       	cpi	r18, 0x0B	; 11
    369e:	31 05       	cpc	r19, r1
    36a0:	54 f0       	brlt	.+20     	; 0x36b6 <main+0x1d6e>
    36a2:	ea ee       	ldi	r30, 0xEA	; 234
    36a4:	f4 e0       	ldi	r31, 0x04	; 4
    36a6:	80 52       	subi	r24, 0x20	; 32
    36a8:	9b 4f       	sbci	r25, 0xFB	; 251
    36aa:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    36ac:	91 91       	ld	r25, Z+
    36ae:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    36b0:	e2 17       	cp	r30, r18
    36b2:	f3 07       	cpc	r31, r19
    36b4:	d9 f7       	brne	.-10     	; 0x36ac <main+0x1d64>
		printStatus("");
		break;

		case 156:	// Set Temperature Settle time
		ParamParse(rx_string, param);
		ch0.tempSettleTime = atoi(param);
    36b6:	c1 01       	movw	r24, r2
    36b8:	0e 94 ba 23 	call	0x4774	; 0x4774 <atoi>
    36bc:	90 93 c8 02 	sts	0x02C8, r25
    36c0:	80 93 c7 02 	sts	0x02C7, r24
		printStatus("");
    36c4:	87 e2       	ldi	r24, 0x27	; 39
    36c6:	91 e0       	ldi	r25, 0x01	; 1
    36c8:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    36cc:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <main+0x3bc>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    36d0:	6e e1       	ldi	r22, 0x1E	; 30
    36d2:	70 e0       	ldi	r23, 0x00	; 0
    36d4:	c5 01       	movw	r24, r10
    36d6:	0e 94 1c 24 	call	0x4838	; 0x4838 <strnlen>
    36da:	05 97       	sbiw	r24, 0x05	; 5
    36dc:	9c 01       	movw	r18, r24
    36de:	d1 01       	movw	r26, r2
    36e0:	a1 01       	movw	r20, r2
    36e2:	4c 5e       	subi	r20, 0xEC	; 236
    36e4:	5f 4f       	sbci	r21, 0xFF	; 255
    36e6:	f1 01       	movw	r30, r2
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    36e8:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    36ea:	e4 17       	cp	r30, r20
    36ec:	f5 07       	cpc	r31, r21
    36ee:	e1 f7       	brne	.-8      	; 0x36e8 <main+0x1da0>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    36f0:	2b 30       	cpi	r18, 0x0B	; 11
    36f2:	31 05       	cpc	r19, r1
    36f4:	54 f0       	brlt	.+20     	; 0x370a <main+0x1dc2>
    36f6:	ea ee       	ldi	r30, 0xEA	; 234
    36f8:	f4 e0       	ldi	r31, 0x04	; 4
    36fa:	80 52       	subi	r24, 0x20	; 32
    36fc:	9b 4f       	sbci	r25, 0xFB	; 251
    36fe:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    3700:	91 91       	ld	r25, Z+
    3702:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    3704:	e2 17       	cp	r30, r18
    3706:	f3 07       	cpc	r31, r19
    3708:	d9 f7       	brne	.-10     	; 0x3700 <main+0x1db8>
		break;
		
		// *** Channel 1 ***
		case 250:	// ch1.TempSetPoint
		ParamParse(rx_string, param);
		ch1.TempSetPoint = atof(param);
    370a:	c1 01       	movw	r24, r2
    370c:	0e 94 b7 23 	call	0x476e	; 0x476e <atof>
    3710:	60 93 0a 02 	sts	0x020A, r22
    3714:	70 93 0b 02 	sts	0x020B, r23
    3718:	80 93 0c 02 	sts	0x020C, r24
    371c:	90 93 0d 02 	sts	0x020D, r25
		printStatus("");
    3720:	87 e2       	ldi	r24, 0x27	; 39
    3722:	91 e0       	ldi	r25, 0x01	; 1
    3724:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    3728:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <main+0x3bc>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    372c:	6e e1       	ldi	r22, 0x1E	; 30
    372e:	70 e0       	ldi	r23, 0x00	; 0
    3730:	c5 01       	movw	r24, r10
    3732:	0e 94 1c 24 	call	0x4838	; 0x4838 <strnlen>
    3736:	05 97       	sbiw	r24, 0x05	; 5
    3738:	9c 01       	movw	r18, r24
    373a:	d1 01       	movw	r26, r2
    373c:	a1 01       	movw	r20, r2
    373e:	4c 5e       	subi	r20, 0xEC	; 236
    3740:	5f 4f       	sbci	r21, 0xFF	; 255
    3742:	f1 01       	movw	r30, r2
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    3744:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    3746:	e4 17       	cp	r30, r20
    3748:	f5 07       	cpc	r31, r21
    374a:	e1 f7       	brne	.-8      	; 0x3744 <main+0x1dfc>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    374c:	2b 30       	cpi	r18, 0x0B	; 11
    374e:	31 05       	cpc	r19, r1
    3750:	54 f0       	brlt	.+20     	; 0x3766 <main+0x1e1e>
    3752:	ea ee       	ldi	r30, 0xEA	; 234
    3754:	f4 e0       	ldi	r31, 0x04	; 4
    3756:	80 52       	subi	r24, 0x20	; 32
    3758:	9b 4f       	sbci	r25, 0xFB	; 251
    375a:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    375c:	91 91       	ld	r25, Z+
    375e:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    3760:	e2 17       	cp	r30, r18
    3762:	f3 07       	cpc	r31, r19
    3764:	d9 f7       	brne	.-10     	; 0x375c <main+0x1e14>
		printStatus("");
		break;
		
		case 251:	// SetPgainCh1
		ParamParse(rx_string, param);
		ch1.Pgain = atof(param);
    3766:	c1 01       	movw	r24, r2
    3768:	0e 94 b7 23 	call	0x476e	; 0x476e <atof>
    376c:	60 93 26 02 	sts	0x0226, r22
    3770:	70 93 27 02 	sts	0x0227, r23
    3774:	80 93 28 02 	sts	0x0228, r24
    3778:	90 93 29 02 	sts	0x0229, r25
		printStatus("");
    377c:	87 e2       	ldi	r24, 0x27	; 39
    377e:	91 e0       	ldi	r25, 0x01	; 1
    3780:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    3784:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <main+0x3bc>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    3788:	6e e1       	ldi	r22, 0x1E	; 30
    378a:	70 e0       	ldi	r23, 0x00	; 0
    378c:	c5 01       	movw	r24, r10
    378e:	0e 94 1c 24 	call	0x4838	; 0x4838 <strnlen>
    3792:	05 97       	sbiw	r24, 0x05	; 5
    3794:	9c 01       	movw	r18, r24
    3796:	d1 01       	movw	r26, r2
    3798:	a1 01       	movw	r20, r2
    379a:	4c 5e       	subi	r20, 0xEC	; 236
    379c:	5f 4f       	sbci	r21, 0xFF	; 255
    379e:	f1 01       	movw	r30, r2
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    37a0:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    37a2:	e4 17       	cp	r30, r20
    37a4:	f5 07       	cpc	r31, r21
    37a6:	e1 f7       	brne	.-8      	; 0x37a0 <main+0x1e58>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    37a8:	2b 30       	cpi	r18, 0x0B	; 11
    37aa:	31 05       	cpc	r19, r1
    37ac:	54 f0       	brlt	.+20     	; 0x37c2 <main+0x1e7a>
    37ae:	ea ee       	ldi	r30, 0xEA	; 234
    37b0:	f4 e0       	ldi	r31, 0x04	; 4
    37b2:	80 52       	subi	r24, 0x20	; 32
    37b4:	9b 4f       	sbci	r25, 0xFB	; 251
    37b6:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    37b8:	91 91       	ld	r25, Z+
    37ba:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    37bc:	e2 17       	cp	r30, r18
    37be:	f3 07       	cpc	r31, r19
    37c0:	d9 f7       	brne	.-10     	; 0x37b8 <main+0x1e70>
		printStatus("");
		break;
		
		case 252:	// SetIgainCh1
		ParamParse(rx_string, param);
		ch1.Igain = atof(param);
    37c2:	c1 01       	movw	r24, r2
    37c4:	d4 d7       	rcall	.+4008   	; 0x476e <atof>
    37c6:	60 93 2a 02 	sts	0x022A, r22
    37ca:	70 93 2b 02 	sts	0x022B, r23
    37ce:	80 93 2c 02 	sts	0x022C, r24
    37d2:	90 93 2d 02 	sts	0x022D, r25
		printStatus("");
    37d6:	87 e2       	ldi	r24, 0x27	; 39
    37d8:	91 e0       	ldi	r25, 0x01	; 1
    37da:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    37de:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <main+0x3bc>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    37e2:	6e e1       	ldi	r22, 0x1E	; 30
    37e4:	70 e0       	ldi	r23, 0x00	; 0
    37e6:	c5 01       	movw	r24, r10
    37e8:	0e 94 1c 24 	call	0x4838	; 0x4838 <strnlen>
    37ec:	05 97       	sbiw	r24, 0x05	; 5
    37ee:	9c 01       	movw	r18, r24
    37f0:	d1 01       	movw	r26, r2
    37f2:	a1 01       	movw	r20, r2
    37f4:	4c 5e       	subi	r20, 0xEC	; 236
    37f6:	5f 4f       	sbci	r21, 0xFF	; 255
    37f8:	f1 01       	movw	r30, r2
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    37fa:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    37fc:	e4 17       	cp	r30, r20
    37fe:	f5 07       	cpc	r31, r21
    3800:	e1 f7       	brne	.-8      	; 0x37fa <main+0x1eb2>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    3802:	2b 30       	cpi	r18, 0x0B	; 11
    3804:	31 05       	cpc	r19, r1
    3806:	54 f0       	brlt	.+20     	; 0x381c <main+0x1ed4>
    3808:	ea ee       	ldi	r30, 0xEA	; 234
    380a:	f4 e0       	ldi	r31, 0x04	; 4
    380c:	80 52       	subi	r24, 0x20	; 32
    380e:	9b 4f       	sbci	r25, 0xFB	; 251
    3810:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    3812:	91 91       	ld	r25, Z+
    3814:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    3816:	e2 17       	cp	r30, r18
    3818:	f3 07       	cpc	r31, r19
    381a:	d9 f7       	brne	.-10     	; 0x3812 <main+0x1eca>
		printStatus("");
		break;
		
		case 253:	// Setch1.Dgain
		ParamParse(rx_string, param);
		ch1.Dgain = atof(param);
    381c:	c1 01       	movw	r24, r2
    381e:	a7 d7       	rcall	.+3918   	; 0x476e <atof>
    3820:	60 93 2e 02 	sts	0x022E, r22
    3824:	70 93 2f 02 	sts	0x022F, r23
    3828:	80 93 30 02 	sts	0x0230, r24
    382c:	90 93 31 02 	sts	0x0231, r25
		printStatus("");
    3830:	87 e2       	ldi	r24, 0x27	; 39
    3832:	91 e0       	ldi	r25, 0x01	; 1
    3834:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    3838:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <main+0x3bc>
		break;
		
		case 254:	// Set heater on/off ch1
		if(rx_string[10] == '1')
    383c:	d5 01       	movw	r26, r10
    383e:	1a 96       	adiw	r26, 0x0a	; 10
    3840:	8c 91       	ld	r24, X
    3842:	81 33       	cpi	r24, 0x31	; 49
    3844:	49 f4       	brne	.+18     	; 0x3858 <main+0x1f10>
		{
			ch1.heaterEnable = true;
    3846:	81 e0       	ldi	r24, 0x01	; 1
    3848:	80 93 6c 02 	sts	0x026C, r24
			printStatus("ON");
    384c:	85 e3       	ldi	r24, 0x35	; 53
    384e:	91 e0       	ldi	r25, 0x01	; 1
    3850:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    3854:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <main+0x3bc>
		}
		else if(rx_string[10] == '0')
    3858:	80 33       	cpi	r24, 0x30	; 48
    385a:	11 f0       	breq	.+4      	; 0x3860 <main+0x1f18>
    385c:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <main+0x3bc>
		{
			ch1.heaterEnable = false;
    3860:	10 92 6c 02 	sts	0x026C, r1
			printStatus("OFF");
    3864:	88 e3       	ldi	r24, 0x38	; 56
    3866:	91 e0       	ldi	r25, 0x01	; 1
    3868:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    386c:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <main+0x3bc>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    3870:	6e e1       	ldi	r22, 0x1E	; 30
    3872:	70 e0       	ldi	r23, 0x00	; 0
    3874:	c5 01       	movw	r24, r10
    3876:	e0 d7       	rcall	.+4032   	; 0x4838 <strnlen>
    3878:	05 97       	sbiw	r24, 0x05	; 5
    387a:	9c 01       	movw	r18, r24
    387c:	d1 01       	movw	r26, r2
    387e:	a1 01       	movw	r20, r2
    3880:	4c 5e       	subi	r20, 0xEC	; 236
    3882:	5f 4f       	sbci	r21, 0xFF	; 255
    3884:	f1 01       	movw	r30, r2
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    3886:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    3888:	e4 17       	cp	r30, r20
    388a:	f5 07       	cpc	r31, r21
    388c:	e1 f7       	brne	.-8      	; 0x3886 <main+0x1f3e>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    388e:	2b 30       	cpi	r18, 0x0B	; 11
    3890:	31 05       	cpc	r19, r1
    3892:	54 f0       	brlt	.+20     	; 0x38a8 <main+0x1f60>
    3894:	ea ee       	ldi	r30, 0xEA	; 234
    3896:	f4 e0       	ldi	r31, 0x04	; 4
    3898:	80 52       	subi	r24, 0x20	; 32
    389a:	9b 4f       	sbci	r25, 0xFB	; 251
    389c:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    389e:	91 91       	ld	r25, Z+
    38a0:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    38a2:	e2 17       	cp	r30, r18
    38a4:	f3 07       	cpc	r31, r19
    38a6:	d9 f7       	brne	.-10     	; 0x389e <main+0x1f56>
		}
		break;
		
		case 255:	// Set Temperature error window
		ParamParse(rx_string, param);
		ch1.tempErrorWin = atof(param);
    38a8:	c1 01       	movw	r24, r2
    38aa:	61 d7       	rcall	.+3778   	; 0x476e <atof>
    38ac:	60 93 5e 02 	sts	0x025E, r22
    38b0:	70 93 5f 02 	sts	0x025F, r23
    38b4:	80 93 60 02 	sts	0x0260, r24
    38b8:	90 93 61 02 	sts	0x0261, r25
		printStatus("");
    38bc:	87 e2       	ldi	r24, 0x27	; 39
    38be:	91 e0       	ldi	r25, 0x01	; 1
    38c0:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    38c4:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <main+0x3bc>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    38c8:	6e e1       	ldi	r22, 0x1E	; 30
    38ca:	70 e0       	ldi	r23, 0x00	; 0
    38cc:	c5 01       	movw	r24, r10
    38ce:	b4 d7       	rcall	.+3944   	; 0x4838 <strnlen>
    38d0:	05 97       	sbiw	r24, 0x05	; 5
    38d2:	9c 01       	movw	r18, r24
    38d4:	d1 01       	movw	r26, r2
    38d6:	a1 01       	movw	r20, r2
    38d8:	4c 5e       	subi	r20, 0xEC	; 236
    38da:	5f 4f       	sbci	r21, 0xFF	; 255
    38dc:	f1 01       	movw	r30, r2
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    38de:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    38e0:	e4 17       	cp	r30, r20
    38e2:	f5 07       	cpc	r31, r21
    38e4:	e1 f7       	brne	.-8      	; 0x38de <main+0x1f96>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    38e6:	2b 30       	cpi	r18, 0x0B	; 11
    38e8:	31 05       	cpc	r19, r1
    38ea:	54 f0       	brlt	.+20     	; 0x3900 <main+0x1fb8>
    38ec:	ea ee       	ldi	r30, 0xEA	; 234
    38ee:	f4 e0       	ldi	r31, 0x04	; 4
    38f0:	80 52       	subi	r24, 0x20	; 32
    38f2:	9b 4f       	sbci	r25, 0xFB	; 251
    38f4:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    38f6:	91 91       	ld	r25, Z+
    38f8:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    38fa:	e2 17       	cp	r30, r18
    38fc:	f3 07       	cpc	r31, r19
    38fe:	d9 f7       	brne	.-10     	; 0x38f6 <main+0x1fae>
		printStatus("");
		break;

		case 256:	// Set Temperature Settle time
		ParamParse(rx_string, param);
		ch1.tempSettleTime = atoi(param);
    3900:	c1 01       	movw	r24, r2
    3902:	38 d7       	rcall	.+3696   	; 0x4774 <atoi>
    3904:	90 93 65 02 	sts	0x0265, r25
    3908:	80 93 64 02 	sts	0x0264, r24
		printStatus("");
    390c:	87 e2       	ldi	r24, 0x27	; 39
    390e:	91 e0       	ldi	r25, 0x01	; 1
    3910:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    3914:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <main+0x3bc>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    3918:	6e e1       	ldi	r22, 0x1E	; 30
    391a:	70 e0       	ldi	r23, 0x00	; 0
    391c:	c5 01       	movw	r24, r10
    391e:	8c d7       	rcall	.+3864   	; 0x4838 <strnlen>
    3920:	05 97       	sbiw	r24, 0x05	; 5
    3922:	9c 01       	movw	r18, r24
    3924:	d1 01       	movw	r26, r2
    3926:	a1 01       	movw	r20, r2
    3928:	4c 5e       	subi	r20, 0xEC	; 236
    392a:	5f 4f       	sbci	r21, 0xFF	; 255
    392c:	f1 01       	movw	r30, r2
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    392e:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    3930:	e4 17       	cp	r30, r20
    3932:	f5 07       	cpc	r31, r21
    3934:	e1 f7       	brne	.-8      	; 0x392e <main+0x1fe6>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    3936:	2b 30       	cpi	r18, 0x0B	; 11
    3938:	31 05       	cpc	r19, r1
    393a:	54 f0       	brlt	.+20     	; 0x3950 <main+0x2008>
    393c:	ea ee       	ldi	r30, 0xEA	; 234
    393e:	f4 e0       	ldi	r31, 0x04	; 4
    3940:	80 52       	subi	r24, 0x20	; 32
    3942:	9b 4f       	sbci	r25, 0xFB	; 251
    3944:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    3946:	91 91       	ld	r25, Z+
    3948:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    394a:	e2 17       	cp	r30, r18
    394c:	f3 07       	cpc	r31, r19
    394e:	d9 f7       	brne	.-10     	; 0x3946 <main+0x1ffe>
		break;		
		
		// *** Channel 2 ***
		case 350:	// ch2.TempSetPoint
		ParamParse(rx_string, param);
		ch2.TempSetPoint = atof(param);
    3950:	c1 01       	movw	r24, r2
    3952:	0d d7       	rcall	.+3610   	; 0x476e <atof>
    3954:	60 93 a7 01 	sts	0x01A7, r22
    3958:	70 93 a8 01 	sts	0x01A8, r23
    395c:	80 93 a9 01 	sts	0x01A9, r24
    3960:	90 93 aa 01 	sts	0x01AA, r25
		printStatus("");
    3964:	87 e2       	ldi	r24, 0x27	; 39
    3966:	91 e0       	ldi	r25, 0x01	; 1
    3968:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    396c:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <main+0x3bc>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    3970:	6e e1       	ldi	r22, 0x1E	; 30
    3972:	70 e0       	ldi	r23, 0x00	; 0
    3974:	c5 01       	movw	r24, r10
    3976:	60 d7       	rcall	.+3776   	; 0x4838 <strnlen>
    3978:	05 97       	sbiw	r24, 0x05	; 5
    397a:	9c 01       	movw	r18, r24
    397c:	d1 01       	movw	r26, r2
    397e:	a1 01       	movw	r20, r2
    3980:	4c 5e       	subi	r20, 0xEC	; 236
    3982:	5f 4f       	sbci	r21, 0xFF	; 255
    3984:	f1 01       	movw	r30, r2
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    3986:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    3988:	e4 17       	cp	r30, r20
    398a:	f5 07       	cpc	r31, r21
    398c:	e1 f7       	brne	.-8      	; 0x3986 <main+0x203e>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    398e:	2b 30       	cpi	r18, 0x0B	; 11
    3990:	31 05       	cpc	r19, r1
    3992:	54 f0       	brlt	.+20     	; 0x39a8 <main+0x2060>
    3994:	ea ee       	ldi	r30, 0xEA	; 234
    3996:	f4 e0       	ldi	r31, 0x04	; 4
    3998:	80 52       	subi	r24, 0x20	; 32
    399a:	9b 4f       	sbci	r25, 0xFB	; 251
    399c:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    399e:	91 91       	ld	r25, Z+
    39a0:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    39a2:	e2 17       	cp	r30, r18
    39a4:	f3 07       	cpc	r31, r19
    39a6:	d9 f7       	brne	.-10     	; 0x399e <main+0x2056>
		printStatus("");
		break;
		
		case 351:	// SetPgainCh2
		ParamParse(rx_string, param);
		ch2.Pgain = atof(param);
    39a8:	c1 01       	movw	r24, r2
    39aa:	e1 d6       	rcall	.+3522   	; 0x476e <atof>
    39ac:	60 93 c3 01 	sts	0x01C3, r22
    39b0:	70 93 c4 01 	sts	0x01C4, r23
    39b4:	80 93 c5 01 	sts	0x01C5, r24
    39b8:	90 93 c6 01 	sts	0x01C6, r25
		printStatus("");
    39bc:	87 e2       	ldi	r24, 0x27	; 39
    39be:	91 e0       	ldi	r25, 0x01	; 1
    39c0:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    39c4:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <main+0x3bc>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    39c8:	6e e1       	ldi	r22, 0x1E	; 30
    39ca:	70 e0       	ldi	r23, 0x00	; 0
    39cc:	c5 01       	movw	r24, r10
    39ce:	34 d7       	rcall	.+3688   	; 0x4838 <strnlen>
    39d0:	05 97       	sbiw	r24, 0x05	; 5
    39d2:	9c 01       	movw	r18, r24
    39d4:	d1 01       	movw	r26, r2
    39d6:	a1 01       	movw	r20, r2
    39d8:	4c 5e       	subi	r20, 0xEC	; 236
    39da:	5f 4f       	sbci	r21, 0xFF	; 255
    39dc:	f1 01       	movw	r30, r2
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    39de:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    39e0:	e4 17       	cp	r30, r20
    39e2:	f5 07       	cpc	r31, r21
    39e4:	e1 f7       	brne	.-8      	; 0x39de <main+0x2096>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    39e6:	2b 30       	cpi	r18, 0x0B	; 11
    39e8:	31 05       	cpc	r19, r1
    39ea:	54 f0       	brlt	.+20     	; 0x3a00 <main+0x20b8>
    39ec:	ea ee       	ldi	r30, 0xEA	; 234
    39ee:	f4 e0       	ldi	r31, 0x04	; 4
    39f0:	80 52       	subi	r24, 0x20	; 32
    39f2:	9b 4f       	sbci	r25, 0xFB	; 251
    39f4:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    39f6:	91 91       	ld	r25, Z+
    39f8:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    39fa:	e2 17       	cp	r30, r18
    39fc:	f3 07       	cpc	r31, r19
    39fe:	d9 f7       	brne	.-10     	; 0x39f6 <main+0x20ae>
		printStatus("");
		break;
		
		case 352:	// SetIgainCh2
		ParamParse(rx_string, param);
		ch2.Igain = atof(param);
    3a00:	c1 01       	movw	r24, r2
    3a02:	b5 d6       	rcall	.+3434   	; 0x476e <atof>
    3a04:	60 93 c7 01 	sts	0x01C7, r22
    3a08:	70 93 c8 01 	sts	0x01C8, r23
    3a0c:	80 93 c9 01 	sts	0x01C9, r24
    3a10:	90 93 ca 01 	sts	0x01CA, r25
		printStatus("");
    3a14:	87 e2       	ldi	r24, 0x27	; 39
    3a16:	91 e0       	ldi	r25, 0x01	; 1
    3a18:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    3a1c:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <main+0x3bc>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    3a20:	6e e1       	ldi	r22, 0x1E	; 30
    3a22:	70 e0       	ldi	r23, 0x00	; 0
    3a24:	c5 01       	movw	r24, r10
    3a26:	08 d7       	rcall	.+3600   	; 0x4838 <strnlen>
    3a28:	05 97       	sbiw	r24, 0x05	; 5
    3a2a:	9c 01       	movw	r18, r24
    3a2c:	d1 01       	movw	r26, r2
    3a2e:	a1 01       	movw	r20, r2
    3a30:	4c 5e       	subi	r20, 0xEC	; 236
    3a32:	5f 4f       	sbci	r21, 0xFF	; 255
    3a34:	f1 01       	movw	r30, r2
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    3a36:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    3a38:	e4 17       	cp	r30, r20
    3a3a:	f5 07       	cpc	r31, r21
    3a3c:	e1 f7       	brne	.-8      	; 0x3a36 <main+0x20ee>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    3a3e:	2b 30       	cpi	r18, 0x0B	; 11
    3a40:	31 05       	cpc	r19, r1
    3a42:	54 f0       	brlt	.+20     	; 0x3a58 <main+0x2110>
    3a44:	ea ee       	ldi	r30, 0xEA	; 234
    3a46:	f4 e0       	ldi	r31, 0x04	; 4
    3a48:	80 52       	subi	r24, 0x20	; 32
    3a4a:	9b 4f       	sbci	r25, 0xFB	; 251
    3a4c:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    3a4e:	91 91       	ld	r25, Z+
    3a50:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    3a52:	e2 17       	cp	r30, r18
    3a54:	f3 07       	cpc	r31, r19
    3a56:	d9 f7       	brne	.-10     	; 0x3a4e <main+0x2106>
		printStatus("");
		break;
		
		case 353:	// Setch2.Dgain
		ParamParse(rx_string, param);
		ch2.Dgain = atof(param);
    3a58:	c1 01       	movw	r24, r2
    3a5a:	89 d6       	rcall	.+3346   	; 0x476e <atof>
    3a5c:	60 93 cb 01 	sts	0x01CB, r22
    3a60:	70 93 cc 01 	sts	0x01CC, r23
    3a64:	80 93 cd 01 	sts	0x01CD, r24
    3a68:	90 93 ce 01 	sts	0x01CE, r25
		printStatus("");
    3a6c:	87 e2       	ldi	r24, 0x27	; 39
    3a6e:	91 e0       	ldi	r25, 0x01	; 1
    3a70:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    3a74:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <main+0x3bc>
		break;
		
		case 354:	// Set heater on/off ch2
		if(rx_string[10] == '1')
    3a78:	f5 01       	movw	r30, r10
    3a7a:	82 85       	ldd	r24, Z+10	; 0x0a
    3a7c:	81 33       	cpi	r24, 0x31	; 49
    3a7e:	49 f4       	brne	.+18     	; 0x3a92 <main+0x214a>
		{
			ch2.heaterEnable = true;
    3a80:	81 e0       	ldi	r24, 0x01	; 1
    3a82:	80 93 09 02 	sts	0x0209, r24
			printStatus("ON");
    3a86:	85 e3       	ldi	r24, 0x35	; 53
    3a88:	91 e0       	ldi	r25, 0x01	; 1
    3a8a:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    3a8e:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <main+0x3bc>
		}
		else if(rx_string[10] == '0')
    3a92:	80 33       	cpi	r24, 0x30	; 48
    3a94:	11 f0       	breq	.+4      	; 0x3a9a <main+0x2152>
    3a96:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <main+0x3bc>
		{
			ch2.heaterEnable = false;
    3a9a:	10 92 09 02 	sts	0x0209, r1
			printStatus("OFF");
    3a9e:	88 e3       	ldi	r24, 0x38	; 56
    3aa0:	91 e0       	ldi	r25, 0x01	; 1
    3aa2:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    3aa6:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <main+0x3bc>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    3aaa:	6e e1       	ldi	r22, 0x1E	; 30
    3aac:	70 e0       	ldi	r23, 0x00	; 0
    3aae:	c5 01       	movw	r24, r10
    3ab0:	c3 d6       	rcall	.+3462   	; 0x4838 <strnlen>
    3ab2:	05 97       	sbiw	r24, 0x05	; 5
    3ab4:	9c 01       	movw	r18, r24
    3ab6:	d1 01       	movw	r26, r2
    3ab8:	a1 01       	movw	r20, r2
    3aba:	4c 5e       	subi	r20, 0xEC	; 236
    3abc:	5f 4f       	sbci	r21, 0xFF	; 255
    3abe:	f1 01       	movw	r30, r2
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    3ac0:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    3ac2:	e4 17       	cp	r30, r20
    3ac4:	f5 07       	cpc	r31, r21
    3ac6:	e1 f7       	brne	.-8      	; 0x3ac0 <main+0x2178>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    3ac8:	2b 30       	cpi	r18, 0x0B	; 11
    3aca:	31 05       	cpc	r19, r1
    3acc:	54 f0       	brlt	.+20     	; 0x3ae2 <main+0x219a>
    3ace:	ea ee       	ldi	r30, 0xEA	; 234
    3ad0:	f4 e0       	ldi	r31, 0x04	; 4
    3ad2:	80 52       	subi	r24, 0x20	; 32
    3ad4:	9b 4f       	sbci	r25, 0xFB	; 251
    3ad6:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    3ad8:	91 91       	ld	r25, Z+
    3ada:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    3adc:	e2 17       	cp	r30, r18
    3ade:	f3 07       	cpc	r31, r19
    3ae0:	d9 f7       	brne	.-10     	; 0x3ad8 <main+0x2190>
		}
		break;
		
		case 355:	// Set Temperature error window
		ParamParse(rx_string, param);
		ch2.tempErrorWin = atof(param);
    3ae2:	c1 01       	movw	r24, r2
    3ae4:	44 d6       	rcall	.+3208   	; 0x476e <atof>
    3ae6:	60 93 fb 01 	sts	0x01FB, r22
    3aea:	70 93 fc 01 	sts	0x01FC, r23
    3aee:	80 93 fd 01 	sts	0x01FD, r24
    3af2:	90 93 fe 01 	sts	0x01FE, r25
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    3af6:	81 e2       	ldi	r24, 0x21	; 33
    3af8:	8a ab       	std	Y+50, r24	; 0x32
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    3afa:	d5 01       	movw	r26, r10
    3afc:	11 96       	adiw	r26, 0x01	; 1
    3afe:	8c 91       	ld	r24, X
    3b00:	11 97       	sbiw	r26, 0x01	; 1
    3b02:	8b ab       	std	Y+51, r24	; 0x33
    3b04:	12 96       	adiw	r26, 0x02	; 2
    3b06:	8c 91       	ld	r24, X
    3b08:	12 97       	sbiw	r26, 0x02	; 2
    3b0a:	8c ab       	std	Y+52, r24	; 0x34
    3b0c:	13 96       	adiw	r26, 0x03	; 3
    3b0e:	8c 91       	ld	r24, X
    3b10:	8d ab       	std	Y+53, r24	; 0x35
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    3b12:	1e aa       	std	Y+54, r1	; 0x36
    3b14:	1f aa       	std	Y+55, r1	; 0x37
    3b16:	18 ae       	std	Y+56, r1	; 0x38
    3b18:	8e 01       	movw	r16, r28
    3b1a:	0e 5c       	subi	r16, 0xCE	; 206
    3b1c:	1f 4f       	sbci	r17, 0xFF	; 255
    3b1e:	be 01       	movw	r22, r28
    3b20:	6a 5c       	subi	r22, 0xCA	; 202
    3b22:	7f 4f       	sbci	r23, 0xFF	; 255
    3b24:	f8 01       	movw	r30, r16
    3b26:	80 e0       	ldi	r24, 0x00	; 0
    3b28:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    3b2a:	b8 e0       	ldi	r27, 0x08	; 8
    3b2c:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    3b2e:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    3b30:	29 2f       	mov	r18, r25
    3b32:	33 27       	eor	r19, r19
    3b34:	27 fd       	sbrc	r18, 7
    3b36:	3a 95       	dec	r19
    3b38:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    3b3a:	32 2f       	mov	r19, r18
    3b3c:	22 27       	eor	r18, r18
    3b3e:	4b 2f       	mov	r20, r27
    3b40:	5f 2d       	mov	r21, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    3b42:	33 23       	and	r19, r19
    3b44:	3c f4       	brge	.+14     	; 0x3b54 <main+0x220c>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    3b46:	22 0f       	add	r18, r18
    3b48:	33 1f       	adc	r19, r19
    3b4a:	a1 e2       	ldi	r26, 0x21	; 33
    3b4c:	2a 27       	eor	r18, r26
    3b4e:	a0 e1       	ldi	r26, 0x10	; 16
    3b50:	3a 27       	eor	r19, r26
    3b52:	02 c0       	rjmp	.+4      	; 0x3b58 <main+0x2210>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    3b54:	22 0f       	add	r18, r18
    3b56:	33 1f       	adc	r19, r19
    3b58:	41 50       	subi	r20, 0x01	; 1
    3b5a:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    3b5c:	91 f7       	brne	.-28     	; 0x3b42 <main+0x21fa>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    3b5e:	98 2f       	mov	r25, r24
    3b60:	88 27       	eor	r24, r24
    3b62:	82 27       	eor	r24, r18
    3b64:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    3b66:	e6 17       	cp	r30, r22
    3b68:	f7 07       	cpc	r31, r23
    3b6a:	09 f7       	brne	.-62     	; 0x3b2e <main+0x21e6>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    3b6c:	7c 01       	movw	r14, r24
    3b6e:	40 e1       	ldi	r20, 0x10	; 16
    3b70:	66 ed       	ldi	r22, 0xD6	; 214
    3b72:	74 e0       	ldi	r23, 0x04	; 4
    3b74:	76 d6       	rcall	.+3308   	; 0x4862 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    3b76:	86 ed       	ldi	r24, 0xD6	; 214
    3b78:	94 e0       	ldi	r25, 0x04	; 4
    3b7a:	69 d6       	rcall	.+3282   	; 0x484e <strupr>
	if(crcXmodem < 0x10)
    3b7c:	b0 e1       	ldi	r27, 0x10	; 16
    3b7e:	eb 16       	cp	r14, r27
    3b80:	f1 04       	cpc	r15, r1
    3b82:	38 f4       	brcc	.+14     	; 0x3b92 <main+0x224a>
	{
		tx_string[cnt+4] = crc[0];
    3b84:	80 91 d6 04 	lds	r24, 0x04D6
    3b88:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = '0';
    3b8a:	80 e3       	ldi	r24, 0x30	; 48
    3b8c:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = '0';
    3b8e:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';
    3b90:	8e ab       	std	Y+54, r24	; 0x36
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    3b92:	c7 01       	movw	r24, r14
    3b94:	40 97       	sbiw	r24, 0x10	; 16
    3b96:	80 3f       	cpi	r24, 0xF0	; 240
    3b98:	91 05       	cpc	r25, r1
    3b9a:	48 f4       	brcc	.+18     	; 0x3bae <main+0x2266>
	{
		tx_string[cnt+4] = crc[1];
    3b9c:	e6 ed       	ldi	r30, 0xD6	; 214
    3b9e:	f4 e0       	ldi	r31, 0x04	; 4
    3ba0:	81 81       	ldd	r24, Z+1	; 0x01
    3ba2:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = crc[0];
    3ba4:	80 81       	ld	r24, Z
    3ba6:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = '0';
    3ba8:	80 e3       	ldi	r24, 0x30	; 48
    3baa:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';		
    3bac:	8e ab       	std	Y+54, r24	; 0x36
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    3bae:	c7 01       	movw	r24, r14
    3bb0:	9a 95       	dec	r25
    3bb2:	81 15       	cp	r24, r1
    3bb4:	9f 40       	sbci	r25, 0x0F	; 15
    3bb6:	50 f4       	brcc	.+20     	; 0x3bcc <main+0x2284>
	{
		tx_string[cnt+4] = crc[2];
    3bb8:	e6 ed       	ldi	r30, 0xD6	; 214
    3bba:	f4 e0       	ldi	r31, 0x04	; 4
    3bbc:	82 81       	ldd	r24, Z+2	; 0x02
    3bbe:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = crc[1];
    3bc0:	81 81       	ldd	r24, Z+1	; 0x01
    3bc2:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = crc[0];
    3bc4:	80 81       	ld	r24, Z
    3bc6:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';		
    3bc8:	80 e3       	ldi	r24, 0x30	; 48
    3bca:	8e ab       	std	Y+54, r24	; 0x36
	}
	if(crcXmodem >= 0x1000)
    3bcc:	e1 14       	cp	r14, r1
    3bce:	f0 e1       	ldi	r31, 0x10	; 16
    3bd0:	ff 06       	cpc	r15, r31
    3bd2:	50 f0       	brcs	.+20     	; 0x3be8 <main+0x22a0>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    3bd4:	e6 ed       	ldi	r30, 0xD6	; 214
    3bd6:	f4 e0       	ldi	r31, 0x04	; 4
    3bd8:	80 81       	ld	r24, Z
    3bda:	8e ab       	std	Y+54, r24	; 0x36
		tx_string[cnt+2] = crc[1];
    3bdc:	81 81       	ldd	r24, Z+1	; 0x01
    3bde:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+3] = crc[2];
    3be0:	82 81       	ldd	r24, Z+2	; 0x02
    3be2:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+4] = crc[3];
    3be4:	83 81       	ldd	r24, Z+3	; 0x03
    3be6:	89 af       	std	Y+57, r24	; 0x39
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    3be8:	8d e0       	ldi	r24, 0x0D	; 13
    3bea:	8a af       	std	Y+58, r24	; 0x3a
    3bec:	9e 01       	movw	r18, r28
    3bee:	25 5c       	subi	r18, 0xC5	; 197
    3bf0:	3f 4f       	sbci	r19, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3bf2:	ee ef       	ldi	r30, 0xFE	; 254
    3bf4:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3bf6:	0f 2e       	mov	r0, r31
    3bf8:	f1 ec       	ldi	r31, 0xC1	; 193
    3bfa:	cf 2e       	mov	r12, r31
    3bfc:	d1 2c       	mov	r13, r1
    3bfe:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3c00:	70 e0       	ldi	r23, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    3c02:	d8 01       	movw	r26, r16
    3c04:	4d 91       	ld	r20, X+
    3c06:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    3c08:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3c0a:	91 81       	ldd	r25, Z+1	; 0x01
    3c0c:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    3c0e:	98 13       	cpse	r25, r24
    3c10:	04 c0       	rjmp	.+8      	; 0x3c1a <main+0x22d2>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3c12:	d6 01       	movw	r26, r12
    3c14:	8c 91       	ld	r24, X
    3c16:	80 62       	ori	r24, 0x20	; 32
    3c18:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    3c1a:	50 81       	ld	r21, Z
    3c1c:	83 81       	ldd	r24, Z+3	; 0x03
    3c1e:	94 81       	ldd	r25, Z+4	; 0x04
    3c20:	85 0f       	add	r24, r21
    3c22:	91 1d       	adc	r25, r1
    3c24:	dc 01       	movw	r26, r24
    3c26:	4c 93       	st	X, r20
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    3c28:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3c2a:	e8 2e       	mov	r14, r24
    3c2c:	f1 2c       	mov	r15, r1
    3c2e:	42 81       	ldd	r20, Z+2	; 0x02
    3c30:	50 e0       	ldi	r21, 0x00	; 0
    3c32:	41 50       	subi	r20, 0x01	; 1
    3c34:	51 09       	sbc	r21, r1
    3c36:	e4 16       	cp	r14, r20
    3c38:	f5 06       	cpc	r15, r21
    3c3a:	11 f0       	breq	.+4      	; 0x3c40 <main+0x22f8>
    3c3c:	8f 5f       	subi	r24, 0xFF	; 255
    3c3e:	01 c0       	rjmp	.+2      	; 0x3c42 <main+0x22fa>
    3c40:	87 2f       	mov	r24, r23
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    3c42:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    3c44:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    3c46:	02 17       	cp	r16, r18
    3c48:	13 07       	cpc	r17, r19
    3c4a:	d9 f6       	brne	.-74     	; 0x3c02 <main+0x22ba>
    3c4c:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <main+0x3bc>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    3c50:	6e e1       	ldi	r22, 0x1E	; 30
    3c52:	70 e0       	ldi	r23, 0x00	; 0
    3c54:	c5 01       	movw	r24, r10
    3c56:	f0 d5       	rcall	.+3040   	; 0x4838 <strnlen>
    3c58:	05 97       	sbiw	r24, 0x05	; 5
    3c5a:	9c 01       	movw	r18, r24
    3c5c:	d1 01       	movw	r26, r2
    3c5e:	a1 01       	movw	r20, r2
    3c60:	4c 5e       	subi	r20, 0xEC	; 236
    3c62:	5f 4f       	sbci	r21, 0xFF	; 255
    3c64:	f1 01       	movw	r30, r2
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    3c66:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    3c68:	e4 17       	cp	r30, r20
    3c6a:	f5 07       	cpc	r31, r21
    3c6c:	e1 f7       	brne	.-8      	; 0x3c66 <main+0x231e>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    3c6e:	2b 30       	cpi	r18, 0x0B	; 11
    3c70:	31 05       	cpc	r19, r1
    3c72:	54 f0       	brlt	.+20     	; 0x3c88 <main+0x2340>
    3c74:	ea ee       	ldi	r30, 0xEA	; 234
    3c76:	f4 e0       	ldi	r31, 0x04	; 4
    3c78:	80 52       	subi	r24, 0x20	; 32
    3c7a:	9b 4f       	sbci	r25, 0xFB	; 251
    3c7c:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    3c7e:	91 91       	ld	r25, Z+
    3c80:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    3c82:	e2 17       	cp	r30, r18
    3c84:	f3 07       	cpc	r31, r19
    3c86:	d9 f7       	brne	.-10     	; 0x3c7e <main+0x2336>
		printStatus("");
		break;

		case 356:	// Set Temperature Settle time
		ParamParse(rx_string, param);
		ch2.tempSettleTime = atoi(param);
    3c88:	c1 01       	movw	r24, r2
    3c8a:	74 d5       	rcall	.+2792   	; 0x4774 <atoi>
    3c8c:	90 93 02 02 	sts	0x0202, r25
    3c90:	80 93 01 02 	sts	0x0201, r24
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    3c94:	81 e2       	ldi	r24, 0x21	; 33
    3c96:	8a ab       	std	Y+50, r24	; 0x32
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    3c98:	f5 01       	movw	r30, r10
    3c9a:	81 81       	ldd	r24, Z+1	; 0x01
    3c9c:	8b ab       	std	Y+51, r24	; 0x33
    3c9e:	82 81       	ldd	r24, Z+2	; 0x02
    3ca0:	8c ab       	std	Y+52, r24	; 0x34
    3ca2:	83 81       	ldd	r24, Z+3	; 0x03
    3ca4:	8d ab       	std	Y+53, r24	; 0x35
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    3ca6:	1e aa       	std	Y+54, r1	; 0x36
    3ca8:	1f aa       	std	Y+55, r1	; 0x37
    3caa:	18 ae       	std	Y+56, r1	; 0x38
    3cac:	8e 01       	movw	r16, r28
    3cae:	0e 5c       	subi	r16, 0xCE	; 206
    3cb0:	1f 4f       	sbci	r17, 0xFF	; 255
    3cb2:	be 01       	movw	r22, r28
    3cb4:	6a 5c       	subi	r22, 0xCA	; 202
    3cb6:	7f 4f       	sbci	r23, 0xFF	; 255
    3cb8:	f8 01       	movw	r30, r16
    3cba:	80 e0       	ldi	r24, 0x00	; 0
    3cbc:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    3cbe:	b8 e0       	ldi	r27, 0x08	; 8
    3cc0:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    3cc2:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    3cc4:	29 2f       	mov	r18, r25
    3cc6:	33 27       	eor	r19, r19
    3cc8:	27 fd       	sbrc	r18, 7
    3cca:	3a 95       	dec	r19
    3ccc:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    3cce:	32 2f       	mov	r19, r18
    3cd0:	22 27       	eor	r18, r18
    3cd2:	4b 2f       	mov	r20, r27
    3cd4:	5f 2d       	mov	r21, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    3cd6:	33 23       	and	r19, r19
    3cd8:	3c f4       	brge	.+14     	; 0x3ce8 <main+0x23a0>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    3cda:	22 0f       	add	r18, r18
    3cdc:	33 1f       	adc	r19, r19
    3cde:	a1 e2       	ldi	r26, 0x21	; 33
    3ce0:	2a 27       	eor	r18, r26
    3ce2:	a0 e1       	ldi	r26, 0x10	; 16
    3ce4:	3a 27       	eor	r19, r26
    3ce6:	02 c0       	rjmp	.+4      	; 0x3cec <main+0x23a4>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    3ce8:	22 0f       	add	r18, r18
    3cea:	33 1f       	adc	r19, r19
    3cec:	41 50       	subi	r20, 0x01	; 1
    3cee:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    3cf0:	91 f7       	brne	.-28     	; 0x3cd6 <main+0x238e>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    3cf2:	98 2f       	mov	r25, r24
    3cf4:	88 27       	eor	r24, r24
    3cf6:	82 27       	eor	r24, r18
    3cf8:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    3cfa:	e6 17       	cp	r30, r22
    3cfc:	f7 07       	cpc	r31, r23
    3cfe:	09 f7       	brne	.-62     	; 0x3cc2 <main+0x237a>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    3d00:	7c 01       	movw	r14, r24
    3d02:	40 e1       	ldi	r20, 0x10	; 16
    3d04:	66 ed       	ldi	r22, 0xD6	; 214
    3d06:	74 e0       	ldi	r23, 0x04	; 4
    3d08:	ac d5       	rcall	.+2904   	; 0x4862 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    3d0a:	86 ed       	ldi	r24, 0xD6	; 214
    3d0c:	94 e0       	ldi	r25, 0x04	; 4
    3d0e:	9f d5       	rcall	.+2878   	; 0x484e <strupr>
	if(crcXmodem < 0x10)
    3d10:	b0 e1       	ldi	r27, 0x10	; 16
    3d12:	eb 16       	cp	r14, r27
    3d14:	f1 04       	cpc	r15, r1
    3d16:	38 f4       	brcc	.+14     	; 0x3d26 <main+0x23de>
	{
		tx_string[cnt+4] = crc[0];
    3d18:	80 91 d6 04 	lds	r24, 0x04D6
    3d1c:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = '0';
    3d1e:	80 e3       	ldi	r24, 0x30	; 48
    3d20:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = '0';
    3d22:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';
    3d24:	8e ab       	std	Y+54, r24	; 0x36
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    3d26:	c7 01       	movw	r24, r14
    3d28:	40 97       	sbiw	r24, 0x10	; 16
    3d2a:	80 3f       	cpi	r24, 0xF0	; 240
    3d2c:	91 05       	cpc	r25, r1
    3d2e:	48 f4       	brcc	.+18     	; 0x3d42 <main+0x23fa>
	{
		tx_string[cnt+4] = crc[1];
    3d30:	e6 ed       	ldi	r30, 0xD6	; 214
    3d32:	f4 e0       	ldi	r31, 0x04	; 4
    3d34:	81 81       	ldd	r24, Z+1	; 0x01
    3d36:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = crc[0];
    3d38:	80 81       	ld	r24, Z
    3d3a:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = '0';
    3d3c:	80 e3       	ldi	r24, 0x30	; 48
    3d3e:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';		
    3d40:	8e ab       	std	Y+54, r24	; 0x36
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    3d42:	c7 01       	movw	r24, r14
    3d44:	9a 95       	dec	r25
    3d46:	81 15       	cp	r24, r1
    3d48:	9f 40       	sbci	r25, 0x0F	; 15
    3d4a:	50 f4       	brcc	.+20     	; 0x3d60 <main+0x2418>
	{
		tx_string[cnt+4] = crc[2];
    3d4c:	e6 ed       	ldi	r30, 0xD6	; 214
    3d4e:	f4 e0       	ldi	r31, 0x04	; 4
    3d50:	82 81       	ldd	r24, Z+2	; 0x02
    3d52:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = crc[1];
    3d54:	81 81       	ldd	r24, Z+1	; 0x01
    3d56:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = crc[0];
    3d58:	80 81       	ld	r24, Z
    3d5a:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';		
    3d5c:	80 e3       	ldi	r24, 0x30	; 48
    3d5e:	8e ab       	std	Y+54, r24	; 0x36
	}
	if(crcXmodem >= 0x1000)
    3d60:	e1 14       	cp	r14, r1
    3d62:	f0 e1       	ldi	r31, 0x10	; 16
    3d64:	ff 06       	cpc	r15, r31
    3d66:	50 f0       	brcs	.+20     	; 0x3d7c <main+0x2434>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    3d68:	e6 ed       	ldi	r30, 0xD6	; 214
    3d6a:	f4 e0       	ldi	r31, 0x04	; 4
    3d6c:	80 81       	ld	r24, Z
    3d6e:	8e ab       	std	Y+54, r24	; 0x36
		tx_string[cnt+2] = crc[1];
    3d70:	81 81       	ldd	r24, Z+1	; 0x01
    3d72:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+3] = crc[2];
    3d74:	82 81       	ldd	r24, Z+2	; 0x02
    3d76:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+4] = crc[3];
    3d78:	83 81       	ldd	r24, Z+3	; 0x03
    3d7a:	89 af       	std	Y+57, r24	; 0x39
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    3d7c:	8d e0       	ldi	r24, 0x0D	; 13
    3d7e:	8a af       	std	Y+58, r24	; 0x3a
    3d80:	9e 01       	movw	r18, r28
    3d82:	25 5c       	subi	r18, 0xC5	; 197
    3d84:	3f 4f       	sbci	r19, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3d86:	ee ef       	ldi	r30, 0xFE	; 254
    3d88:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3d8a:	0f 2e       	mov	r0, r31
    3d8c:	f1 ec       	ldi	r31, 0xC1	; 193
    3d8e:	cf 2e       	mov	r12, r31
    3d90:	d1 2c       	mov	r13, r1
    3d92:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3d94:	70 e0       	ldi	r23, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    3d96:	d8 01       	movw	r26, r16
    3d98:	4d 91       	ld	r20, X+
    3d9a:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    3d9c:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3d9e:	91 81       	ldd	r25, Z+1	; 0x01
    3da0:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    3da2:	98 13       	cpse	r25, r24
    3da4:	04 c0       	rjmp	.+8      	; 0x3dae <main+0x2466>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3da6:	d6 01       	movw	r26, r12
    3da8:	8c 91       	ld	r24, X
    3daa:	80 62       	ori	r24, 0x20	; 32
    3dac:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    3dae:	50 81       	ld	r21, Z
    3db0:	83 81       	ldd	r24, Z+3	; 0x03
    3db2:	94 81       	ldd	r25, Z+4	; 0x04
    3db4:	85 0f       	add	r24, r21
    3db6:	91 1d       	adc	r25, r1
    3db8:	dc 01       	movw	r26, r24
    3dba:	4c 93       	st	X, r20
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    3dbc:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3dbe:	e8 2e       	mov	r14, r24
    3dc0:	f1 2c       	mov	r15, r1
    3dc2:	42 81       	ldd	r20, Z+2	; 0x02
    3dc4:	50 e0       	ldi	r21, 0x00	; 0
    3dc6:	41 50       	subi	r20, 0x01	; 1
    3dc8:	51 09       	sbc	r21, r1
    3dca:	e4 16       	cp	r14, r20
    3dcc:	f5 06       	cpc	r15, r21
    3dce:	11 f0       	breq	.+4      	; 0x3dd4 <main+0x248c>
    3dd0:	8f 5f       	subi	r24, 0xFF	; 255
    3dd2:	01 c0       	rjmp	.+2      	; 0x3dd6 <main+0x248e>
    3dd4:	87 2f       	mov	r24, r23
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    3dd6:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    3dd8:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    3dda:	02 17       	cp	r16, r18
    3ddc:	13 07       	cpc	r17, r19
    3dde:	d9 f6       	brne	.-74     	; 0x3d96 <main+0x244e>
    3de0:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <main+0x3bc>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    3de4:	6e e1       	ldi	r22, 0x1E	; 30
    3de6:	70 e0       	ldi	r23, 0x00	; 0
    3de8:	c5 01       	movw	r24, r10
    3dea:	26 d5       	rcall	.+2636   	; 0x4838 <strnlen>
    3dec:	05 97       	sbiw	r24, 0x05	; 5
    3dee:	9c 01       	movw	r18, r24
    3df0:	d1 01       	movw	r26, r2
    3df2:	a1 01       	movw	r20, r2
    3df4:	4c 5e       	subi	r20, 0xEC	; 236
    3df6:	5f 4f       	sbci	r21, 0xFF	; 255
    3df8:	f1 01       	movw	r30, r2
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    3dfa:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    3dfc:	e4 17       	cp	r30, r20
    3dfe:	f5 07       	cpc	r31, r21
    3e00:	e1 f7       	brne	.-8      	; 0x3dfa <main+0x24b2>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    3e02:	2b 30       	cpi	r18, 0x0B	; 11
    3e04:	31 05       	cpc	r19, r1
    3e06:	54 f0       	brlt	.+20     	; 0x3e1c <main+0x24d4>
    3e08:	ea ee       	ldi	r30, 0xEA	; 234
    3e0a:	f4 e0       	ldi	r31, 0x04	; 4
    3e0c:	80 52       	subi	r24, 0x20	; 32
    3e0e:	9b 4f       	sbci	r25, 0xFB	; 251
    3e10:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    3e12:	91 91       	ld	r25, Z+
    3e14:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    3e16:	e2 17       	cp	r30, r18
    3e18:	f3 07       	cpc	r31, r19
    3e1a:	d9 f7       	brne	.-10     	; 0x3e12 <main+0x24ca>
		break;		
		
		// *** Channel 4 ***
		case 450:	// ch3.TempSetPoint
		ParamParse(rx_string, param);
		ch3.TempSetPoint = atof(param);
    3e1c:	c1 01       	movw	r24, r2
    3e1e:	a7 d4       	rcall	.+2382   	; 0x476e <atof>
    3e20:	60 93 44 01 	sts	0x0144, r22
    3e24:	70 93 45 01 	sts	0x0145, r23
    3e28:	80 93 46 01 	sts	0x0146, r24
    3e2c:	90 93 47 01 	sts	0x0147, r25
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    3e30:	81 e2       	ldi	r24, 0x21	; 33
    3e32:	8a ab       	std	Y+50, r24	; 0x32
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    3e34:	f5 01       	movw	r30, r10
    3e36:	81 81       	ldd	r24, Z+1	; 0x01
    3e38:	8b ab       	std	Y+51, r24	; 0x33
    3e3a:	82 81       	ldd	r24, Z+2	; 0x02
    3e3c:	8c ab       	std	Y+52, r24	; 0x34
    3e3e:	83 81       	ldd	r24, Z+3	; 0x03
    3e40:	8d ab       	std	Y+53, r24	; 0x35
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    3e42:	1e aa       	std	Y+54, r1	; 0x36
    3e44:	1f aa       	std	Y+55, r1	; 0x37
    3e46:	18 ae       	std	Y+56, r1	; 0x38
    3e48:	8e 01       	movw	r16, r28
    3e4a:	0e 5c       	subi	r16, 0xCE	; 206
    3e4c:	1f 4f       	sbci	r17, 0xFF	; 255
    3e4e:	be 01       	movw	r22, r28
    3e50:	6a 5c       	subi	r22, 0xCA	; 202
    3e52:	7f 4f       	sbci	r23, 0xFF	; 255
    3e54:	f8 01       	movw	r30, r16
    3e56:	80 e0       	ldi	r24, 0x00	; 0
    3e58:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    3e5a:	b8 e0       	ldi	r27, 0x08	; 8
    3e5c:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    3e5e:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    3e60:	29 2f       	mov	r18, r25
    3e62:	33 27       	eor	r19, r19
    3e64:	27 fd       	sbrc	r18, 7
    3e66:	3a 95       	dec	r19
    3e68:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    3e6a:	32 2f       	mov	r19, r18
    3e6c:	22 27       	eor	r18, r18
    3e6e:	4b 2f       	mov	r20, r27
    3e70:	5f 2d       	mov	r21, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    3e72:	33 23       	and	r19, r19
    3e74:	3c f4       	brge	.+14     	; 0x3e84 <main+0x253c>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    3e76:	22 0f       	add	r18, r18
    3e78:	33 1f       	adc	r19, r19
    3e7a:	a1 e2       	ldi	r26, 0x21	; 33
    3e7c:	2a 27       	eor	r18, r26
    3e7e:	a0 e1       	ldi	r26, 0x10	; 16
    3e80:	3a 27       	eor	r19, r26
    3e82:	02 c0       	rjmp	.+4      	; 0x3e88 <main+0x2540>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    3e84:	22 0f       	add	r18, r18
    3e86:	33 1f       	adc	r19, r19
    3e88:	41 50       	subi	r20, 0x01	; 1
    3e8a:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    3e8c:	91 f7       	brne	.-28     	; 0x3e72 <main+0x252a>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    3e8e:	98 2f       	mov	r25, r24
    3e90:	88 27       	eor	r24, r24
    3e92:	82 27       	eor	r24, r18
    3e94:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    3e96:	e6 17       	cp	r30, r22
    3e98:	f7 07       	cpc	r31, r23
    3e9a:	09 f7       	brne	.-62     	; 0x3e5e <main+0x2516>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    3e9c:	7c 01       	movw	r14, r24
    3e9e:	40 e1       	ldi	r20, 0x10	; 16
    3ea0:	66 ed       	ldi	r22, 0xD6	; 214
    3ea2:	74 e0       	ldi	r23, 0x04	; 4
    3ea4:	de d4       	rcall	.+2492   	; 0x4862 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    3ea6:	86 ed       	ldi	r24, 0xD6	; 214
    3ea8:	94 e0       	ldi	r25, 0x04	; 4
    3eaa:	d1 d4       	rcall	.+2466   	; 0x484e <strupr>
	if(crcXmodem < 0x10)
    3eac:	b0 e1       	ldi	r27, 0x10	; 16
    3eae:	eb 16       	cp	r14, r27
    3eb0:	f1 04       	cpc	r15, r1
    3eb2:	38 f4       	brcc	.+14     	; 0x3ec2 <main+0x257a>
	{
		tx_string[cnt+4] = crc[0];
    3eb4:	80 91 d6 04 	lds	r24, 0x04D6
    3eb8:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = '0';
    3eba:	80 e3       	ldi	r24, 0x30	; 48
    3ebc:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = '0';
    3ebe:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';
    3ec0:	8e ab       	std	Y+54, r24	; 0x36
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    3ec2:	c7 01       	movw	r24, r14
    3ec4:	40 97       	sbiw	r24, 0x10	; 16
    3ec6:	80 3f       	cpi	r24, 0xF0	; 240
    3ec8:	91 05       	cpc	r25, r1
    3eca:	48 f4       	brcc	.+18     	; 0x3ede <main+0x2596>
	{
		tx_string[cnt+4] = crc[1];
    3ecc:	e6 ed       	ldi	r30, 0xD6	; 214
    3ece:	f4 e0       	ldi	r31, 0x04	; 4
    3ed0:	81 81       	ldd	r24, Z+1	; 0x01
    3ed2:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = crc[0];
    3ed4:	80 81       	ld	r24, Z
    3ed6:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = '0';
    3ed8:	80 e3       	ldi	r24, 0x30	; 48
    3eda:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';		
    3edc:	8e ab       	std	Y+54, r24	; 0x36
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    3ede:	c7 01       	movw	r24, r14
    3ee0:	9a 95       	dec	r25
    3ee2:	81 15       	cp	r24, r1
    3ee4:	9f 40       	sbci	r25, 0x0F	; 15
    3ee6:	50 f4       	brcc	.+20     	; 0x3efc <main+0x25b4>
	{
		tx_string[cnt+4] = crc[2];
    3ee8:	e6 ed       	ldi	r30, 0xD6	; 214
    3eea:	f4 e0       	ldi	r31, 0x04	; 4
    3eec:	82 81       	ldd	r24, Z+2	; 0x02
    3eee:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = crc[1];
    3ef0:	81 81       	ldd	r24, Z+1	; 0x01
    3ef2:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = crc[0];
    3ef4:	80 81       	ld	r24, Z
    3ef6:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';		
    3ef8:	80 e3       	ldi	r24, 0x30	; 48
    3efa:	8e ab       	std	Y+54, r24	; 0x36
	}
	if(crcXmodem >= 0x1000)
    3efc:	e1 14       	cp	r14, r1
    3efe:	f0 e1       	ldi	r31, 0x10	; 16
    3f00:	ff 06       	cpc	r15, r31
    3f02:	50 f0       	brcs	.+20     	; 0x3f18 <main+0x25d0>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    3f04:	e6 ed       	ldi	r30, 0xD6	; 214
    3f06:	f4 e0       	ldi	r31, 0x04	; 4
    3f08:	80 81       	ld	r24, Z
    3f0a:	8e ab       	std	Y+54, r24	; 0x36
		tx_string[cnt+2] = crc[1];
    3f0c:	81 81       	ldd	r24, Z+1	; 0x01
    3f0e:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+3] = crc[2];
    3f10:	82 81       	ldd	r24, Z+2	; 0x02
    3f12:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+4] = crc[3];
    3f14:	83 81       	ldd	r24, Z+3	; 0x03
    3f16:	89 af       	std	Y+57, r24	; 0x39
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    3f18:	8d e0       	ldi	r24, 0x0D	; 13
    3f1a:	8a af       	std	Y+58, r24	; 0x3a
    3f1c:	9e 01       	movw	r18, r28
    3f1e:	25 5c       	subi	r18, 0xC5	; 197
    3f20:	3f 4f       	sbci	r19, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3f22:	ee ef       	ldi	r30, 0xFE	; 254
    3f24:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3f26:	0f 2e       	mov	r0, r31
    3f28:	f1 ec       	ldi	r31, 0xC1	; 193
    3f2a:	cf 2e       	mov	r12, r31
    3f2c:	d1 2c       	mov	r13, r1
    3f2e:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3f30:	70 e0       	ldi	r23, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    3f32:	d8 01       	movw	r26, r16
    3f34:	4d 91       	ld	r20, X+
    3f36:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    3f38:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    3f3a:	91 81       	ldd	r25, Z+1	; 0x01
    3f3c:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    3f3e:	98 13       	cpse	r25, r24
    3f40:	04 c0       	rjmp	.+8      	; 0x3f4a <main+0x2602>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    3f42:	d6 01       	movw	r26, r12
    3f44:	8c 91       	ld	r24, X
    3f46:	80 62       	ori	r24, 0x20	; 32
    3f48:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    3f4a:	50 81       	ld	r21, Z
    3f4c:	83 81       	ldd	r24, Z+3	; 0x03
    3f4e:	94 81       	ldd	r25, Z+4	; 0x04
    3f50:	85 0f       	add	r24, r21
    3f52:	91 1d       	adc	r25, r1
    3f54:	dc 01       	movw	r26, r24
    3f56:	4c 93       	st	X, r20
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    3f58:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    3f5a:	e8 2e       	mov	r14, r24
    3f5c:	f1 2c       	mov	r15, r1
    3f5e:	42 81       	ldd	r20, Z+2	; 0x02
    3f60:	50 e0       	ldi	r21, 0x00	; 0
    3f62:	41 50       	subi	r20, 0x01	; 1
    3f64:	51 09       	sbc	r21, r1
    3f66:	e4 16       	cp	r14, r20
    3f68:	f5 06       	cpc	r15, r21
    3f6a:	11 f0       	breq	.+4      	; 0x3f70 <main+0x2628>
    3f6c:	8f 5f       	subi	r24, 0xFF	; 255
    3f6e:	01 c0       	rjmp	.+2      	; 0x3f72 <main+0x262a>
    3f70:	87 2f       	mov	r24, r23
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    3f72:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    3f74:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    3f76:	02 17       	cp	r16, r18
    3f78:	13 07       	cpc	r17, r19
    3f7a:	d9 f6       	brne	.-74     	; 0x3f32 <main+0x25ea>
    3f7c:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <main+0x3bc>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    3f80:	6e e1       	ldi	r22, 0x1E	; 30
    3f82:	70 e0       	ldi	r23, 0x00	; 0
    3f84:	c5 01       	movw	r24, r10
    3f86:	58 d4       	rcall	.+2224   	; 0x4838 <strnlen>
    3f88:	05 97       	sbiw	r24, 0x05	; 5
    3f8a:	9c 01       	movw	r18, r24
    3f8c:	d1 01       	movw	r26, r2
    3f8e:	a1 01       	movw	r20, r2
    3f90:	4c 5e       	subi	r20, 0xEC	; 236
    3f92:	5f 4f       	sbci	r21, 0xFF	; 255
    3f94:	f1 01       	movw	r30, r2
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    3f96:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    3f98:	e4 17       	cp	r30, r20
    3f9a:	f5 07       	cpc	r31, r21
    3f9c:	e1 f7       	brne	.-8      	; 0x3f96 <main+0x264e>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    3f9e:	2b 30       	cpi	r18, 0x0B	; 11
    3fa0:	31 05       	cpc	r19, r1
    3fa2:	54 f0       	brlt	.+20     	; 0x3fb8 <main+0x2670>
    3fa4:	ea ee       	ldi	r30, 0xEA	; 234
    3fa6:	f4 e0       	ldi	r31, 0x04	; 4
    3fa8:	80 52       	subi	r24, 0x20	; 32
    3faa:	9b 4f       	sbci	r25, 0xFB	; 251
    3fac:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    3fae:	91 91       	ld	r25, Z+
    3fb0:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    3fb2:	e2 17       	cp	r30, r18
    3fb4:	f3 07       	cpc	r31, r19
    3fb6:	d9 f7       	brne	.-10     	; 0x3fae <main+0x2666>
		printStatus("");
		break;
		
		case 451:	// SetPgainCh3
		ParamParse(rx_string, param);
		ch3.Pgain = atof(param);
    3fb8:	c1 01       	movw	r24, r2
    3fba:	d9 d3       	rcall	.+1970   	; 0x476e <atof>
    3fbc:	60 93 60 01 	sts	0x0160, r22
    3fc0:	70 93 61 01 	sts	0x0161, r23
    3fc4:	80 93 62 01 	sts	0x0162, r24
    3fc8:	90 93 63 01 	sts	0x0163, r25
static inline void printStatus (char msg_string[])	// Send string on UART
{
	int cnt, i; 
	uint16_t crcXmodem;
	char tx_string[40];
	tx_string[0] = '!';
    3fcc:	81 e2       	ldi	r24, 0x21	; 33
    3fce:	8a ab       	std	Y+50, r24	; 0x32
	
	for(cnt = 1; cnt < 4; cnt ++)
	{
		tx_string[cnt] = rx_string[cnt];			// Add echo sequence number
    3fd0:	f5 01       	movw	r30, r10
    3fd2:	81 81       	ldd	r24, Z+1	; 0x01
    3fd4:	8b ab       	std	Y+51, r24	; 0x33
    3fd6:	82 81       	ldd	r24, Z+2	; 0x02
    3fd8:	8c ab       	std	Y+52, r24	; 0x34
    3fda:	83 81       	ldd	r24, Z+3	; 0x03
    3fdc:	8d ab       	std	Y+53, r24	; 0x35
	} 
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
    3fde:	1e aa       	std	Y+54, r1	; 0x36
    3fe0:	1f aa       	std	Y+55, r1	; 0x37
    3fe2:	18 ae       	std	Y+56, r1	; 0x38
    3fe4:	8e 01       	movw	r16, r28
    3fe6:	0e 5c       	subi	r16, 0xCE	; 206
    3fe8:	1f 4f       	sbci	r17, 0xFF	; 255
    3fea:	be 01       	movw	r22, r28
    3fec:	6a 5c       	subi	r22, 0xCA	; 202
    3fee:	7f 4f       	sbci	r23, 0xFF	; 255
    3ff0:	f8 01       	movw	r30, r16
    3ff2:	80 e0       	ldi	r24, 0x00	; 0
    3ff4:	90 e0       	ldi	r25, 0x00	; 0
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
    3ff6:	b8 e0       	ldi	r27, 0x08	; 8
    3ff8:	f1 2c       	mov	r15, r1
	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
    3ffa:	41 91       	ld	r20, Z+
		tmp = (int)((CRC >> 8) ^ int_c);
    3ffc:	29 2f       	mov	r18, r25
    3ffe:	33 27       	eor	r19, r19
    4000:	27 fd       	sbrc	r18, 7
    4002:	3a 95       	dec	r19
    4004:	24 27       	eor	r18, r20
		Remainder = (int)(tmp << 8);
    4006:	32 2f       	mov	r19, r18
    4008:	22 27       	eor	r18, r18
    400a:	4b 2f       	mov	r20, r27
    400c:	5f 2d       	mov	r21, r15
		for (j = 0; j < 8; j++)
		{

			if ((Remainder & 0x8000) != 0)
    400e:	33 23       	and	r19, r19
    4010:	3c f4       	brge	.+14     	; 0x4020 <main+0x26d8>
			{
				Remainder = (int)((Remainder << 1) ^ Polynominal);
    4012:	22 0f       	add	r18, r18
    4014:	33 1f       	adc	r19, r19
    4016:	a1 e2       	ldi	r26, 0x21	; 33
    4018:	2a 27       	eor	r18, r26
    401a:	a0 e1       	ldi	r26, 0x10	; 16
    401c:	3a 27       	eor	r19, r26
    401e:	02 c0       	rjmp	.+4      	; 0x4024 <main+0x26dc>
			}
			else
			{
				Remainder = (int)(Remainder << 1);
    4020:	22 0f       	add	r18, r18
    4022:	33 1f       	adc	r19, r19
    4024:	41 50       	subi	r20, 0x01	; 1
    4026:	51 09       	sbc	r21, r1
	for (i = 0; i < nByte; i++)
	{
		int_c = (int)(0x00ff & (int)c[index]);
		tmp = (int)((CRC >> 8) ^ int_c);
		Remainder = (int)(tmp << 8);
		for (j = 0; j < 8; j++)
    4028:	91 f7       	brne	.-28     	; 0x400e <main+0x26c6>
			else
			{
				Remainder = (int)(Remainder << 1);
			}
		}
		CRC = (int)((CRC << 8) ^ Remainder);
    402a:	98 2f       	mov	r25, r24
    402c:	88 27       	eor	r24, r24
    402e:	82 27       	eor	r24, r18
    4030:	93 27       	eor	r25, r19
	int InitValue = 0x0;

	int i, j, index = 0;
	int CRC = InitValue;
	int Remainder, tmp, int_c;
	for (i = 0; i < nByte; i++)
    4032:	e6 17       	cp	r30, r22
    4034:	f7 07       	cpc	r31, r23
    4036:	09 f7       	brne	.-62     	; 0x3ffa <main+0x26b2>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    4038:	7c 01       	movw	r14, r24
    403a:	40 e1       	ldi	r20, 0x10	; 16
    403c:	66 ed       	ldi	r22, 0xD6	; 214
    403e:	74 e0       	ldi	r23, 0x04	; 4
    4040:	10 d4       	rcall	.+2080   	; 0x4862 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    4042:	86 ed       	ldi	r24, 0xD6	; 214
    4044:	94 e0       	ldi	r25, 0x04	; 4
    4046:	03 d4       	rcall	.+2054   	; 0x484e <strupr>
	if(crcXmodem < 0x10)
    4048:	b0 e1       	ldi	r27, 0x10	; 16
    404a:	eb 16       	cp	r14, r27
    404c:	f1 04       	cpc	r15, r1
    404e:	38 f4       	brcc	.+14     	; 0x405e <main+0x2716>
	{
		tx_string[cnt+4] = crc[0];
    4050:	80 91 d6 04 	lds	r24, 0x04D6
    4054:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = '0';
    4056:	80 e3       	ldi	r24, 0x30	; 48
    4058:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = '0';
    405a:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';
    405c:	8e ab       	std	Y+54, r24	; 0x36
	}
	if(crcXmodem < 0x100 && crcXmodem >= 0x10)
    405e:	c7 01       	movw	r24, r14
    4060:	40 97       	sbiw	r24, 0x10	; 16
    4062:	80 3f       	cpi	r24, 0xF0	; 240
    4064:	91 05       	cpc	r25, r1
    4066:	48 f4       	brcc	.+18     	; 0x407a <main+0x2732>
	{
		tx_string[cnt+4] = crc[1];
    4068:	e6 ed       	ldi	r30, 0xD6	; 214
    406a:	f4 e0       	ldi	r31, 0x04	; 4
    406c:	81 81       	ldd	r24, Z+1	; 0x01
    406e:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = crc[0];
    4070:	80 81       	ld	r24, Z
    4072:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = '0';
    4074:	80 e3       	ldi	r24, 0x30	; 48
    4076:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';		
    4078:	8e ab       	std	Y+54, r24	; 0x36
	}	
	if(crcXmodem < 0x1000 && crcXmodem >= 0x0100)
    407a:	c7 01       	movw	r24, r14
    407c:	9a 95       	dec	r25
    407e:	81 15       	cp	r24, r1
    4080:	9f 40       	sbci	r25, 0x0F	; 15
    4082:	50 f4       	brcc	.+20     	; 0x4098 <main+0x2750>
	{
		tx_string[cnt+4] = crc[2];
    4084:	e6 ed       	ldi	r30, 0xD6	; 214
    4086:	f4 e0       	ldi	r31, 0x04	; 4
    4088:	82 81       	ldd	r24, Z+2	; 0x02
    408a:	89 af       	std	Y+57, r24	; 0x39
		tx_string[cnt+3] = crc[1];
    408c:	81 81       	ldd	r24, Z+1	; 0x01
    408e:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+2] = crc[0];
    4090:	80 81       	ld	r24, Z
    4092:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+1] = '0';		
    4094:	80 e3       	ldi	r24, 0x30	; 48
    4096:	8e ab       	std	Y+54, r24	; 0x36
	}
	if(crcXmodem >= 0x1000)
    4098:	e1 14       	cp	r14, r1
    409a:	f0 e1       	ldi	r31, 0x10	; 16
    409c:	ff 06       	cpc	r15, r31
    409e:	50 f0       	brcs	.+20     	; 0x40b4 <main+0x276c>
	{
		tx_string[cnt+1] = crc[0];					// Add crc	
    40a0:	e6 ed       	ldi	r30, 0xD6	; 214
    40a2:	f4 e0       	ldi	r31, 0x04	; 4
    40a4:	80 81       	ld	r24, Z
    40a6:	8e ab       	std	Y+54, r24	; 0x36
		tx_string[cnt+2] = crc[1];
    40a8:	81 81       	ldd	r24, Z+1	; 0x01
    40aa:	8f ab       	std	Y+55, r24	; 0x37
		tx_string[cnt+3] = crc[2];
    40ac:	82 81       	ldd	r24, Z+2	; 0x02
    40ae:	88 af       	std	Y+56, r24	; 0x38
		tx_string[cnt+4] = crc[3];
    40b0:	83 81       	ldd	r24, Z+3	; 0x03
    40b2:	89 af       	std	Y+57, r24	; 0x39
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
    40b4:	8d e0       	ldi	r24, 0x0D	; 13
    40b6:	8a af       	std	Y+58, r24	; 0x3a
    40b8:	9e 01       	movw	r18, r28
    40ba:	25 5c       	subi	r18, 0xC5	; 197
    40bc:	3f 4f       	sbci	r19, 0xFF	; 255
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    40be:	ee ef       	ldi	r30, 0xFE	; 254
    40c0:	f4 e0       	ldi	r31, 0x04	; 4
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) 
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    40c2:	0f 2e       	mov	r0, r31
    40c4:	f1 ec       	ldi	r31, 0xC1	; 193
    40c6:	cf 2e       	mov	r12, r31
    40c8:	d1 2c       	mov	r13, r1
    40ca:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    40cc:	70 e0       	ldi	r23, 0x00	; 0
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
	{
		uart_putchar(tx_string[i]);
    40ce:	d8 01       	movw	r26, r16
    40d0:	4d 91       	ld	r20, X+
    40d2:	8d 01       	movw	r16, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    40d4:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    40d6:	91 81       	ldd	r25, Z+1	; 0x01
    40d8:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) 
    40da:	98 13       	cpse	r25, r24
    40dc:	04 c0       	rjmp	.+8      	; 0x40e6 <main+0x279e>
	{
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    40de:	d6 01       	movw	r26, r12
    40e0:	8c 91       	ld	r24, X
    40e2:	80 62       	ori	r24, 0x20	; 32
    40e4:	8c 93       	st	X, r24
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    40e6:	50 81       	ld	r21, Z
    40e8:	83 81       	ldd	r24, Z+3	; 0x03
    40ea:	94 81       	ldd	r25, Z+4	; 0x04
    40ec:	85 0f       	add	r24, r21
    40ee:	91 1d       	adc	r25, r1
    40f0:	dc 01       	movw	r26, r24
    40f2:	4c 93       	st	X, r20
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    40f4:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    40f6:	e8 2e       	mov	r14, r24
    40f8:	f1 2c       	mov	r15, r1
    40fa:	42 81       	ldd	r20, Z+2	; 0x02
    40fc:	50 e0       	ldi	r21, 0x00	; 0
    40fe:	41 50       	subi	r20, 0x01	; 1
    4100:	51 09       	sbc	r21, r1
    4102:	e4 16       	cp	r14, r20
    4104:	f5 06       	cpc	r15, r21
    4106:	11 f0       	breq	.+4      	; 0x410c <main+0x27c4>
    4108:	8f 5f       	subi	r24, 0xFF	; 255
    410a:	01 c0       	rjmp	.+2      	; 0x410e <main+0x27c6>
    410c:	87 2f       	mov	r24, r23
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    410e:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    4110:	78 94       	sei
		tx_string[cnt+4] = crc[3];
	}
	
	tx_string[cnt+5] = 0x0D;						// End with <CR>
	
	for(i = 0; i < cnt+6; i++)						// Send message on UART
    4112:	02 17       	cp	r16, r18
    4114:	13 07       	cpc	r17, r19
    4116:	d9 f6       	brne	.-74     	; 0x40ce <main+0x2786>
    4118:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <main+0x3bc>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    411c:	6e e1       	ldi	r22, 0x1E	; 30
    411e:	70 e0       	ldi	r23, 0x00	; 0
    4120:	c5 01       	movw	r24, r10
    4122:	8a d3       	rcall	.+1812   	; 0x4838 <strnlen>
    4124:	05 97       	sbiw	r24, 0x05	; 5
    4126:	9c 01       	movw	r18, r24
    4128:	d1 01       	movw	r26, r2
    412a:	a1 01       	movw	r20, r2
    412c:	4c 5e       	subi	r20, 0xEC	; 236
    412e:	5f 4f       	sbci	r21, 0xFF	; 255
    4130:	f1 01       	movw	r30, r2
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    4132:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    4134:	e4 17       	cp	r30, r20
    4136:	f5 07       	cpc	r31, r21
    4138:	e1 f7       	brne	.-8      	; 0x4132 <main+0x27ea>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    413a:	2b 30       	cpi	r18, 0x0B	; 11
    413c:	31 05       	cpc	r19, r1
    413e:	54 f0       	brlt	.+20     	; 0x4154 <main+0x280c>
    4140:	ea ee       	ldi	r30, 0xEA	; 234
    4142:	f4 e0       	ldi	r31, 0x04	; 4
    4144:	80 52       	subi	r24, 0x20	; 32
    4146:	9b 4f       	sbci	r25, 0xFB	; 251
    4148:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    414a:	91 91       	ld	r25, Z+
    414c:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    414e:	e2 17       	cp	r30, r18
    4150:	f3 07       	cpc	r31, r19
    4152:	d9 f7       	brne	.-10     	; 0x414a <main+0x2802>
		printStatus("");
		break;
		
		case 452:	// SetIgainCh3
		ParamParse(rx_string, param);
		ch3.Igain = atof(param);
    4154:	c1 01       	movw	r24, r2
    4156:	0b d3       	rcall	.+1558   	; 0x476e <atof>
    4158:	60 93 64 01 	sts	0x0164, r22
    415c:	70 93 65 01 	sts	0x0165, r23
    4160:	80 93 66 01 	sts	0x0166, r24
    4164:	90 93 67 01 	sts	0x0167, r25
		printStatus("");
    4168:	87 e2       	ldi	r24, 0x27	; 39
    416a:	91 e0       	ldi	r25, 0x01	; 1
    416c:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    4170:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <main+0x3bc>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    4174:	6e e1       	ldi	r22, 0x1E	; 30
    4176:	70 e0       	ldi	r23, 0x00	; 0
    4178:	c5 01       	movw	r24, r10
    417a:	5e d3       	rcall	.+1724   	; 0x4838 <strnlen>
    417c:	05 97       	sbiw	r24, 0x05	; 5
    417e:	9c 01       	movw	r18, r24
    4180:	d1 01       	movw	r26, r2
    4182:	a1 01       	movw	r20, r2
    4184:	4c 5e       	subi	r20, 0xEC	; 236
    4186:	5f 4f       	sbci	r21, 0xFF	; 255
    4188:	f1 01       	movw	r30, r2
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    418a:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    418c:	e4 17       	cp	r30, r20
    418e:	f5 07       	cpc	r31, r21
    4190:	e1 f7       	brne	.-8      	; 0x418a <main+0x2842>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    4192:	2b 30       	cpi	r18, 0x0B	; 11
    4194:	31 05       	cpc	r19, r1
    4196:	54 f0       	brlt	.+20     	; 0x41ac <main+0x2864>
    4198:	ea ee       	ldi	r30, 0xEA	; 234
    419a:	f4 e0       	ldi	r31, 0x04	; 4
    419c:	80 52       	subi	r24, 0x20	; 32
    419e:	9b 4f       	sbci	r25, 0xFB	; 251
    41a0:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    41a2:	91 91       	ld	r25, Z+
    41a4:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    41a6:	e2 17       	cp	r30, r18
    41a8:	f3 07       	cpc	r31, r19
    41aa:	d9 f7       	brne	.-10     	; 0x41a2 <main+0x285a>
		printStatus("");
		break;
		
		case 453:	// Setch3.Dgain
		ParamParse(rx_string, param);
		ch3.Dgain = atof(param);
    41ac:	c1 01       	movw	r24, r2
    41ae:	df d2       	rcall	.+1470   	; 0x476e <atof>
    41b0:	60 93 68 01 	sts	0x0168, r22
    41b4:	70 93 69 01 	sts	0x0169, r23
    41b8:	80 93 6a 01 	sts	0x016A, r24
    41bc:	90 93 6b 01 	sts	0x016B, r25
		printStatus("");
    41c0:	87 e2       	ldi	r24, 0x27	; 39
    41c2:	91 e0       	ldi	r25, 0x01	; 1
    41c4:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    41c8:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <main+0x3bc>
		break;
		
		case 454:	// Set heater on/off ch3
		if(rx_string[10] == '1')
    41cc:	f5 01       	movw	r30, r10
    41ce:	82 85       	ldd	r24, Z+10	; 0x0a
    41d0:	81 33       	cpi	r24, 0x31	; 49
    41d2:	49 f4       	brne	.+18     	; 0x41e6 <main+0x289e>
		{
			ch3.heaterEnable = true;
    41d4:	81 e0       	ldi	r24, 0x01	; 1
    41d6:	80 93 a6 01 	sts	0x01A6, r24
			printStatus("ON");
    41da:	85 e3       	ldi	r24, 0x35	; 53
    41dc:	91 e0       	ldi	r25, 0x01	; 1
    41de:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    41e2:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <main+0x3bc>
		}
		else if(rx_string[10] == '0')
    41e6:	80 33       	cpi	r24, 0x30	; 48
    41e8:	11 f0       	breq	.+4      	; 0x41ee <main+0x28a6>
    41ea:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <main+0x3bc>
		{
			ch3.heaterEnable = false;
    41ee:	10 92 a6 01 	sts	0x01A6, r1
			printStatus("OFF");
    41f2:	88 e3       	ldi	r24, 0x38	; 56
    41f4:	91 e0       	ldi	r25, 0x01	; 1
    41f6:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    41fa:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <main+0x3bc>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    41fe:	6e e1       	ldi	r22, 0x1E	; 30
    4200:	70 e0       	ldi	r23, 0x00	; 0
    4202:	c5 01       	movw	r24, r10
    4204:	19 d3       	rcall	.+1586   	; 0x4838 <strnlen>
    4206:	05 97       	sbiw	r24, 0x05	; 5
    4208:	9c 01       	movw	r18, r24
    420a:	d1 01       	movw	r26, r2
    420c:	a1 01       	movw	r20, r2
    420e:	4c 5e       	subi	r20, 0xEC	; 236
    4210:	5f 4f       	sbci	r21, 0xFF	; 255
    4212:	f1 01       	movw	r30, r2
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    4214:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    4216:	e4 17       	cp	r30, r20
    4218:	f5 07       	cpc	r31, r21
    421a:	e1 f7       	brne	.-8      	; 0x4214 <main+0x28cc>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    421c:	2b 30       	cpi	r18, 0x0B	; 11
    421e:	31 05       	cpc	r19, r1
    4220:	54 f0       	brlt	.+20     	; 0x4236 <main+0x28ee>
    4222:	ea ee       	ldi	r30, 0xEA	; 234
    4224:	f4 e0       	ldi	r31, 0x04	; 4
    4226:	80 52       	subi	r24, 0x20	; 32
    4228:	9b 4f       	sbci	r25, 0xFB	; 251
    422a:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    422c:	91 91       	ld	r25, Z+
    422e:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    4230:	e2 17       	cp	r30, r18
    4232:	f3 07       	cpc	r31, r19
    4234:	d9 f7       	brne	.-10     	; 0x422c <main+0x28e4>
		}
		break;						 
		
		case 455:	// Set Temperature error window
		ParamParse(rx_string, param);
		ch3.tempErrorWin = atof(param);
    4236:	c1 01       	movw	r24, r2
    4238:	9a d2       	rcall	.+1332   	; 0x476e <atof>
    423a:	60 93 98 01 	sts	0x0198, r22
    423e:	70 93 99 01 	sts	0x0199, r23
    4242:	80 93 9a 01 	sts	0x019A, r24
    4246:	90 93 9b 01 	sts	0x019B, r25
		printStatus("");
    424a:	87 e2       	ldi	r24, 0x27	; 39
    424c:	91 e0       	ldi	r25, 0x01	; 1
    424e:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    4252:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <main+0x3bc>
	}
}

static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
    4256:	6e e1       	ldi	r22, 0x1E	; 30
    4258:	70 e0       	ldi	r23, 0x00	; 0
    425a:	c5 01       	movw	r24, r10
    425c:	ed d2       	rcall	.+1498   	; 0x4838 <strnlen>
    425e:	05 97       	sbiw	r24, 0x05	; 5
    4260:	9c 01       	movw	r18, r24
    4262:	d1 01       	movw	r26, r2
    4264:	a1 01       	movw	r20, r2
    4266:	4c 5e       	subi	r20, 0xEC	; 236
    4268:	5f 4f       	sbci	r21, 0xFF	; 255
    426a:	f1 01       	movw	r30, r2
	int idx = 0;

	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
    426c:	11 92       	st	Z+, r1
static inline void ParamParse(char *stringToParse, char *param)
{
	int s_len = strnlen(stringToParse, rx_size) - 5;
	int idx = 0;

	for(int i = 0; i < param_size; i++)
    426e:	e4 17       	cp	r30, r20
    4270:	f5 07       	cpc	r31, r21
    4272:	e1 f7       	brne	.-8      	; 0x426c <main+0x2924>
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    4274:	2b 30       	cpi	r18, 0x0B	; 11
    4276:	31 05       	cpc	r19, r1
    4278:	54 f0       	brlt	.+20     	; 0x428e <main+0x2946>
    427a:	ea ee       	ldi	r30, 0xEA	; 234
    427c:	f4 e0       	ldi	r31, 0x04	; 4
    427e:	80 52       	subi	r24, 0x20	; 32
    4280:	9b 4f       	sbci	r25, 0xFB	; 251
    4282:	9c 01       	movw	r18, r24
	{
		param[idx] = stringToParse[i];
    4284:	91 91       	ld	r25, Z+
    4286:	9d 93       	st	X+, r25
	for(int i = 0; i < param_size; i++)
	{
		param[i] = '\0';
	}
		
	for(int i = 10; i < s_len; i++)	// Position 10 in rx_string is parameter location start
    4288:	e2 17       	cp	r30, r18
    428a:	f3 07       	cpc	r31, r19
    428c:	d9 f7       	brne	.-10     	; 0x4284 <main+0x293c>
		printStatus("");
		break;

		case 456:	// Set Temperature Settle time
		ParamParse(rx_string, param);
		ch3.tempSettleTime = atoi(param);
    428e:	c1 01       	movw	r24, r2
    4290:	71 d2       	rcall	.+1250   	; 0x4774 <atoi>
    4292:	90 93 9f 01 	sts	0x019F, r25
    4296:	80 93 9e 01 	sts	0x019E, r24
		printStatus("");
    429a:	87 e2       	ldi	r24, 0x27	; 39
    429c:	91 e0       	ldi	r25, 0x01	; 1
    429e:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    42a2:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <main+0x3bc>
		break;		

		case 500: // Store param to EEPROM
		WriteParamToEEPROM();
    42a6:	0e 94 f7 01 	call	0x3ee	; 0x3ee <WriteParamToEEPROM>
		printStatus("");
    42aa:	87 e2       	ldi	r24, 0x27	; 39
    42ac:	91 e0       	ldi	r25, 0x01	; 1
    42ae:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    42b2:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <main+0x3bc>
		break;
		
		default:
		printStatus("VSerror");
    42b6:	8c e3       	ldi	r24, 0x3C	; 60
    42b8:	91 e0       	ldi	r25, 0x01	; 1
    42ba:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    42be:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <main+0x3bc>
						var = atol(requestID);
						SetParameter(atol(requestID));
					}
					else
					{
						printStatus("CRC error");
    42c2:	89 e1       	ldi	r24, 0x19	; 25
    42c4:	91 e0       	ldi	r25, 0x01	; 1
    42c6:	0e 94 31 03 	call	0x662	; 0x662 <printStatus>
    42ca:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <main+0x3bc>
    42ce:	40 e1       	ldi	r20, 0x10	; 16
    42d0:	66 ed       	ldi	r22, 0xD6	; 214
    42d2:	74 e0       	ldi	r23, 0x04	; 4
    42d4:	80 e0       	ldi	r24, 0x00	; 0
    42d6:	90 e0       	ldi	r25, 0x00	; 0
    42d8:	c4 d2       	rcall	.+1416   	; 0x4862 <__itoa_ncheck>
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    42da:	86 ed       	ldi	r24, 0xD6	; 214
    42dc:	94 e0       	ldi	r25, 0x04	; 4
    42de:	b7 d2       	rcall	.+1390   	; 0x484e <strupr>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    42e0:	c1 2c       	mov	r12, r1
    42e2:	d1 2c       	mov	r13, r1
    42e4:	0c 94 03 10 	jmp	0x2006	; 0x2006 <main+0x6be>
    42e8:	40 e1       	ldi	r20, 0x10	; 16
    42ea:	66 ed       	ldi	r22, 0xD6	; 214
    42ec:	74 e0       	ldi	r23, 0x04	; 4
    42ee:	80 e0       	ldi	r24, 0x00	; 0
    42f0:	90 e0       	ldi	r25, 0x00	; 0
    42f2:	b7 d2       	rcall	.+1390   	; 0x4862 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    42f4:	86 ed       	ldi	r24, 0xD6	; 214
    42f6:	94 e0       	ldi	r25, 0x04	; 4
    42f8:	aa d2       	rcall	.+1364   	; 0x484e <strupr>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    42fa:	c1 2c       	mov	r12, r1
    42fc:	d1 2c       	mov	r13, r1
    42fe:	0c 94 24 11 	jmp	0x2248	; 0x2248 <main+0x900>
    4302:	40 e1       	ldi	r20, 0x10	; 16
    4304:	66 ed       	ldi	r22, 0xD6	; 214
    4306:	74 e0       	ldi	r23, 0x04	; 4
    4308:	80 e0       	ldi	r24, 0x00	; 0
    430a:	90 e0       	ldi	r25, 0x00	; 0
    430c:	aa d2       	rcall	.+1364   	; 0x4862 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    430e:	86 ed       	ldi	r24, 0xD6	; 214
    4310:	94 e0       	ldi	r25, 0x04	; 4
    4312:	9d d2       	rcall	.+1338   	; 0x484e <strupr>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    4314:	c1 2c       	mov	r12, r1
    4316:	d1 2c       	mov	r13, r1
    4318:	0c 94 43 12 	jmp	0x2486	; 0x2486 <main+0xb3e>
    431c:	40 e1       	ldi	r20, 0x10	; 16
    431e:	66 ed       	ldi	r22, 0xD6	; 214
    4320:	74 e0       	ldi	r23, 0x04	; 4
    4322:	80 e0       	ldi	r24, 0x00	; 0
    4324:	90 e0       	ldi	r25, 0x00	; 0
    4326:	9d d2       	rcall	.+1338   	; 0x4862 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    4328:	86 ed       	ldi	r24, 0xD6	; 214
    432a:	94 e0       	ldi	r25, 0x04	; 4
    432c:	90 d2       	rcall	.+1312   	; 0x484e <strupr>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    432e:	c1 2c       	mov	r12, r1
    4330:	d1 2c       	mov	r13, r1
    4332:	0c 94 62 13 	jmp	0x26c4	; 0x26c4 <main+0xd7c>
    4336:	40 e1       	ldi	r20, 0x10	; 16
    4338:	66 ed       	ldi	r22, 0xD6	; 214
    433a:	74 e0       	ldi	r23, 0x04	; 4
    433c:	80 e0       	ldi	r24, 0x00	; 0
    433e:	90 e0       	ldi	r25, 0x00	; 0
    4340:	90 d2       	rcall	.+1312   	; 0x4862 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    4342:	86 ed       	ldi	r24, 0xD6	; 214
    4344:	94 e0       	ldi	r25, 0x04	; 4
    4346:	83 d2       	rcall	.+1286   	; 0x484e <strupr>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    4348:	c1 2c       	mov	r12, r1
    434a:	d1 2c       	mov	r13, r1
    434c:	0c 94 81 14 	jmp	0x2902	; 0x2902 <main+0xfba>
    4350:	40 e1       	ldi	r20, 0x10	; 16
    4352:	66 ed       	ldi	r22, 0xD6	; 214
    4354:	74 e0       	ldi	r23, 0x04	; 4
    4356:	80 e0       	ldi	r24, 0x00	; 0
    4358:	90 e0       	ldi	r25, 0x00	; 0
    435a:	83 d2       	rcall	.+1286   	; 0x4862 <__itoa_ncheck>
	itoa(crcXmodem, crc, 16);
	strupr(crc);									// Convert crc to upper case
    435c:	86 ed       	ldi	r24, 0xD6	; 214
    435e:	94 e0       	ldi	r25, 0x04	; 4
    4360:	76 d2       	rcall	.+1260   	; 0x484e <strupr>
	for(cnt = 0; cnt < strlen(msg_string)+3; cnt++)	// Add message
	{
		tx_string[cnt+4] = msg_string[cnt];
	}

	crcXmodem = GenCrc16(tx_string, cnt+1);
    4362:	c1 2c       	mov	r12, r1
    4364:	d1 2c       	mov	r13, r1
    4366:	0c 94 a1 15 	jmp	0x2b42	; 0x2b42 <main+0x11fa>

0000436a <__subsf3>:
    436a:	50 58       	subi	r21, 0x80	; 128

0000436c <__addsf3>:
    436c:	bb 27       	eor	r27, r27
    436e:	aa 27       	eor	r26, r26
    4370:	0e d0       	rcall	.+28     	; 0x438e <__addsf3x>
    4372:	0d c1       	rjmp	.+538    	; 0x458e <__fp_round>
    4374:	fe d0       	rcall	.+508    	; 0x4572 <__fp_pscA>
    4376:	30 f0       	brcs	.+12     	; 0x4384 <__addsf3+0x18>
    4378:	03 d1       	rcall	.+518    	; 0x4580 <__fp_pscB>
    437a:	20 f0       	brcs	.+8      	; 0x4384 <__addsf3+0x18>
    437c:	31 f4       	brne	.+12     	; 0x438a <__addsf3+0x1e>
    437e:	9f 3f       	cpi	r25, 0xFF	; 255
    4380:	11 f4       	brne	.+4      	; 0x4386 <__addsf3+0x1a>
    4382:	1e f4       	brtc	.+6      	; 0x438a <__addsf3+0x1e>
    4384:	f3 c0       	rjmp	.+486    	; 0x456c <__fp_nan>
    4386:	0e f4       	brtc	.+2      	; 0x438a <__addsf3+0x1e>
    4388:	e0 95       	com	r30
    438a:	e7 fb       	bst	r30, 7
    438c:	e9 c0       	rjmp	.+466    	; 0x4560 <__fp_inf>

0000438e <__addsf3x>:
    438e:	e9 2f       	mov	r30, r25
    4390:	0f d1       	rcall	.+542    	; 0x45b0 <__fp_split3>
    4392:	80 f3       	brcs	.-32     	; 0x4374 <__addsf3+0x8>
    4394:	ba 17       	cp	r27, r26
    4396:	62 07       	cpc	r22, r18
    4398:	73 07       	cpc	r23, r19
    439a:	84 07       	cpc	r24, r20
    439c:	95 07       	cpc	r25, r21
    439e:	18 f0       	brcs	.+6      	; 0x43a6 <__addsf3x+0x18>
    43a0:	71 f4       	brne	.+28     	; 0x43be <__addsf3x+0x30>
    43a2:	9e f5       	brtc	.+102    	; 0x440a <__addsf3x+0x7c>
    43a4:	27 c1       	rjmp	.+590    	; 0x45f4 <__fp_zero>
    43a6:	0e f4       	brtc	.+2      	; 0x43aa <__addsf3x+0x1c>
    43a8:	e0 95       	com	r30
    43aa:	0b 2e       	mov	r0, r27
    43ac:	ba 2f       	mov	r27, r26
    43ae:	a0 2d       	mov	r26, r0
    43b0:	0b 01       	movw	r0, r22
    43b2:	b9 01       	movw	r22, r18
    43b4:	90 01       	movw	r18, r0
    43b6:	0c 01       	movw	r0, r24
    43b8:	ca 01       	movw	r24, r20
    43ba:	a0 01       	movw	r20, r0
    43bc:	11 24       	eor	r1, r1
    43be:	ff 27       	eor	r31, r31
    43c0:	59 1b       	sub	r21, r25
    43c2:	99 f0       	breq	.+38     	; 0x43ea <__addsf3x+0x5c>
    43c4:	59 3f       	cpi	r21, 0xF9	; 249
    43c6:	50 f4       	brcc	.+20     	; 0x43dc <__addsf3x+0x4e>
    43c8:	50 3e       	cpi	r21, 0xE0	; 224
    43ca:	68 f1       	brcs	.+90     	; 0x4426 <__addsf3x+0x98>
    43cc:	1a 16       	cp	r1, r26
    43ce:	f0 40       	sbci	r31, 0x00	; 0
    43d0:	a2 2f       	mov	r26, r18
    43d2:	23 2f       	mov	r18, r19
    43d4:	34 2f       	mov	r19, r20
    43d6:	44 27       	eor	r20, r20
    43d8:	58 5f       	subi	r21, 0xF8	; 248
    43da:	f3 cf       	rjmp	.-26     	; 0x43c2 <__addsf3x+0x34>
    43dc:	46 95       	lsr	r20
    43de:	37 95       	ror	r19
    43e0:	27 95       	ror	r18
    43e2:	a7 95       	ror	r26
    43e4:	f0 40       	sbci	r31, 0x00	; 0
    43e6:	53 95       	inc	r21
    43e8:	c9 f7       	brne	.-14     	; 0x43dc <__addsf3x+0x4e>
    43ea:	7e f4       	brtc	.+30     	; 0x440a <__addsf3x+0x7c>
    43ec:	1f 16       	cp	r1, r31
    43ee:	ba 0b       	sbc	r27, r26
    43f0:	62 0b       	sbc	r22, r18
    43f2:	73 0b       	sbc	r23, r19
    43f4:	84 0b       	sbc	r24, r20
    43f6:	ba f0       	brmi	.+46     	; 0x4426 <__addsf3x+0x98>
    43f8:	91 50       	subi	r25, 0x01	; 1
    43fa:	a1 f0       	breq	.+40     	; 0x4424 <__addsf3x+0x96>
    43fc:	ff 0f       	add	r31, r31
    43fe:	bb 1f       	adc	r27, r27
    4400:	66 1f       	adc	r22, r22
    4402:	77 1f       	adc	r23, r23
    4404:	88 1f       	adc	r24, r24
    4406:	c2 f7       	brpl	.-16     	; 0x43f8 <__addsf3x+0x6a>
    4408:	0e c0       	rjmp	.+28     	; 0x4426 <__addsf3x+0x98>
    440a:	ba 0f       	add	r27, r26
    440c:	62 1f       	adc	r22, r18
    440e:	73 1f       	adc	r23, r19
    4410:	84 1f       	adc	r24, r20
    4412:	48 f4       	brcc	.+18     	; 0x4426 <__addsf3x+0x98>
    4414:	87 95       	ror	r24
    4416:	77 95       	ror	r23
    4418:	67 95       	ror	r22
    441a:	b7 95       	ror	r27
    441c:	f7 95       	ror	r31
    441e:	9e 3f       	cpi	r25, 0xFE	; 254
    4420:	08 f0       	brcs	.+2      	; 0x4424 <__addsf3x+0x96>
    4422:	b3 cf       	rjmp	.-154    	; 0x438a <__addsf3+0x1e>
    4424:	93 95       	inc	r25
    4426:	88 0f       	add	r24, r24
    4428:	08 f0       	brcs	.+2      	; 0x442c <__addsf3x+0x9e>
    442a:	99 27       	eor	r25, r25
    442c:	ee 0f       	add	r30, r30
    442e:	97 95       	ror	r25
    4430:	87 95       	ror	r24
    4432:	08 95       	ret

00004434 <__cmpsf2>:
    4434:	71 d0       	rcall	.+226    	; 0x4518 <__fp_cmp>
    4436:	08 f4       	brcc	.+2      	; 0x443a <__cmpsf2+0x6>
    4438:	81 e0       	ldi	r24, 0x01	; 1
    443a:	08 95       	ret

0000443c <__fixsfsi>:
    443c:	04 d0       	rcall	.+8      	; 0x4446 <__fixunssfsi>
    443e:	68 94       	set
    4440:	b1 11       	cpse	r27, r1
    4442:	d9 c0       	rjmp	.+434    	; 0x45f6 <__fp_szero>
    4444:	08 95       	ret

00004446 <__fixunssfsi>:
    4446:	bc d0       	rcall	.+376    	; 0x45c0 <__fp_splitA>
    4448:	88 f0       	brcs	.+34     	; 0x446c <__fixunssfsi+0x26>
    444a:	9f 57       	subi	r25, 0x7F	; 127
    444c:	90 f0       	brcs	.+36     	; 0x4472 <__fixunssfsi+0x2c>
    444e:	b9 2f       	mov	r27, r25
    4450:	99 27       	eor	r25, r25
    4452:	b7 51       	subi	r27, 0x17	; 23
    4454:	a0 f0       	brcs	.+40     	; 0x447e <__fixunssfsi+0x38>
    4456:	d1 f0       	breq	.+52     	; 0x448c <__fixunssfsi+0x46>
    4458:	66 0f       	add	r22, r22
    445a:	77 1f       	adc	r23, r23
    445c:	88 1f       	adc	r24, r24
    445e:	99 1f       	adc	r25, r25
    4460:	1a f0       	brmi	.+6      	; 0x4468 <__fixunssfsi+0x22>
    4462:	ba 95       	dec	r27
    4464:	c9 f7       	brne	.-14     	; 0x4458 <__fixunssfsi+0x12>
    4466:	12 c0       	rjmp	.+36     	; 0x448c <__fixunssfsi+0x46>
    4468:	b1 30       	cpi	r27, 0x01	; 1
    446a:	81 f0       	breq	.+32     	; 0x448c <__fixunssfsi+0x46>
    446c:	c3 d0       	rcall	.+390    	; 0x45f4 <__fp_zero>
    446e:	b1 e0       	ldi	r27, 0x01	; 1
    4470:	08 95       	ret
    4472:	c0 c0       	rjmp	.+384    	; 0x45f4 <__fp_zero>
    4474:	67 2f       	mov	r22, r23
    4476:	78 2f       	mov	r23, r24
    4478:	88 27       	eor	r24, r24
    447a:	b8 5f       	subi	r27, 0xF8	; 248
    447c:	39 f0       	breq	.+14     	; 0x448c <__fixunssfsi+0x46>
    447e:	b9 3f       	cpi	r27, 0xF9	; 249
    4480:	cc f3       	brlt	.-14     	; 0x4474 <__fixunssfsi+0x2e>
    4482:	86 95       	lsr	r24
    4484:	77 95       	ror	r23
    4486:	67 95       	ror	r22
    4488:	b3 95       	inc	r27
    448a:	d9 f7       	brne	.-10     	; 0x4482 <__fixunssfsi+0x3c>
    448c:	3e f4       	brtc	.+14     	; 0x449c <__fixunssfsi+0x56>
    448e:	90 95       	com	r25
    4490:	80 95       	com	r24
    4492:	70 95       	com	r23
    4494:	61 95       	neg	r22
    4496:	7f 4f       	sbci	r23, 0xFF	; 255
    4498:	8f 4f       	sbci	r24, 0xFF	; 255
    449a:	9f 4f       	sbci	r25, 0xFF	; 255
    449c:	08 95       	ret

0000449e <__floatunsisf>:
    449e:	e8 94       	clt
    44a0:	09 c0       	rjmp	.+18     	; 0x44b4 <__floatsisf+0x12>

000044a2 <__floatsisf>:
    44a2:	97 fb       	bst	r25, 7
    44a4:	3e f4       	brtc	.+14     	; 0x44b4 <__floatsisf+0x12>
    44a6:	90 95       	com	r25
    44a8:	80 95       	com	r24
    44aa:	70 95       	com	r23
    44ac:	61 95       	neg	r22
    44ae:	7f 4f       	sbci	r23, 0xFF	; 255
    44b0:	8f 4f       	sbci	r24, 0xFF	; 255
    44b2:	9f 4f       	sbci	r25, 0xFF	; 255
    44b4:	99 23       	and	r25, r25
    44b6:	a9 f0       	breq	.+42     	; 0x44e2 <__floatsisf+0x40>
    44b8:	f9 2f       	mov	r31, r25
    44ba:	96 e9       	ldi	r25, 0x96	; 150
    44bc:	bb 27       	eor	r27, r27
    44be:	93 95       	inc	r25
    44c0:	f6 95       	lsr	r31
    44c2:	87 95       	ror	r24
    44c4:	77 95       	ror	r23
    44c6:	67 95       	ror	r22
    44c8:	b7 95       	ror	r27
    44ca:	f1 11       	cpse	r31, r1
    44cc:	f8 cf       	rjmp	.-16     	; 0x44be <__floatsisf+0x1c>
    44ce:	fa f4       	brpl	.+62     	; 0x450e <__floatsisf+0x6c>
    44d0:	bb 0f       	add	r27, r27
    44d2:	11 f4       	brne	.+4      	; 0x44d8 <__floatsisf+0x36>
    44d4:	60 ff       	sbrs	r22, 0
    44d6:	1b c0       	rjmp	.+54     	; 0x450e <__floatsisf+0x6c>
    44d8:	6f 5f       	subi	r22, 0xFF	; 255
    44da:	7f 4f       	sbci	r23, 0xFF	; 255
    44dc:	8f 4f       	sbci	r24, 0xFF	; 255
    44de:	9f 4f       	sbci	r25, 0xFF	; 255
    44e0:	16 c0       	rjmp	.+44     	; 0x450e <__floatsisf+0x6c>
    44e2:	88 23       	and	r24, r24
    44e4:	11 f0       	breq	.+4      	; 0x44ea <__floatsisf+0x48>
    44e6:	96 e9       	ldi	r25, 0x96	; 150
    44e8:	11 c0       	rjmp	.+34     	; 0x450c <__floatsisf+0x6a>
    44ea:	77 23       	and	r23, r23
    44ec:	21 f0       	breq	.+8      	; 0x44f6 <__floatsisf+0x54>
    44ee:	9e e8       	ldi	r25, 0x8E	; 142
    44f0:	87 2f       	mov	r24, r23
    44f2:	76 2f       	mov	r23, r22
    44f4:	05 c0       	rjmp	.+10     	; 0x4500 <__floatsisf+0x5e>
    44f6:	66 23       	and	r22, r22
    44f8:	71 f0       	breq	.+28     	; 0x4516 <__floatsisf+0x74>
    44fa:	96 e8       	ldi	r25, 0x86	; 134
    44fc:	86 2f       	mov	r24, r22
    44fe:	70 e0       	ldi	r23, 0x00	; 0
    4500:	60 e0       	ldi	r22, 0x00	; 0
    4502:	2a f0       	brmi	.+10     	; 0x450e <__floatsisf+0x6c>
    4504:	9a 95       	dec	r25
    4506:	66 0f       	add	r22, r22
    4508:	77 1f       	adc	r23, r23
    450a:	88 1f       	adc	r24, r24
    450c:	da f7       	brpl	.-10     	; 0x4504 <__floatsisf+0x62>
    450e:	88 0f       	add	r24, r24
    4510:	96 95       	lsr	r25
    4512:	87 95       	ror	r24
    4514:	97 f9       	bld	r25, 7
    4516:	08 95       	ret

00004518 <__fp_cmp>:
    4518:	99 0f       	add	r25, r25
    451a:	00 08       	sbc	r0, r0
    451c:	55 0f       	add	r21, r21
    451e:	aa 0b       	sbc	r26, r26
    4520:	e0 e8       	ldi	r30, 0x80	; 128
    4522:	fe ef       	ldi	r31, 0xFE	; 254
    4524:	16 16       	cp	r1, r22
    4526:	17 06       	cpc	r1, r23
    4528:	e8 07       	cpc	r30, r24
    452a:	f9 07       	cpc	r31, r25
    452c:	c0 f0       	brcs	.+48     	; 0x455e <__fp_cmp+0x46>
    452e:	12 16       	cp	r1, r18
    4530:	13 06       	cpc	r1, r19
    4532:	e4 07       	cpc	r30, r20
    4534:	f5 07       	cpc	r31, r21
    4536:	98 f0       	brcs	.+38     	; 0x455e <__fp_cmp+0x46>
    4538:	62 1b       	sub	r22, r18
    453a:	73 0b       	sbc	r23, r19
    453c:	84 0b       	sbc	r24, r20
    453e:	95 0b       	sbc	r25, r21
    4540:	39 f4       	brne	.+14     	; 0x4550 <__fp_cmp+0x38>
    4542:	0a 26       	eor	r0, r26
    4544:	61 f0       	breq	.+24     	; 0x455e <__fp_cmp+0x46>
    4546:	23 2b       	or	r18, r19
    4548:	24 2b       	or	r18, r20
    454a:	25 2b       	or	r18, r21
    454c:	21 f4       	brne	.+8      	; 0x4556 <__fp_cmp+0x3e>
    454e:	08 95       	ret
    4550:	0a 26       	eor	r0, r26
    4552:	09 f4       	brne	.+2      	; 0x4556 <__fp_cmp+0x3e>
    4554:	a1 40       	sbci	r26, 0x01	; 1
    4556:	a6 95       	lsr	r26
    4558:	8f ef       	ldi	r24, 0xFF	; 255
    455a:	81 1d       	adc	r24, r1
    455c:	81 1d       	adc	r24, r1
    455e:	08 95       	ret

00004560 <__fp_inf>:
    4560:	97 f9       	bld	r25, 7
    4562:	9f 67       	ori	r25, 0x7F	; 127
    4564:	80 e8       	ldi	r24, 0x80	; 128
    4566:	70 e0       	ldi	r23, 0x00	; 0
    4568:	60 e0       	ldi	r22, 0x00	; 0
    456a:	08 95       	ret

0000456c <__fp_nan>:
    456c:	9f ef       	ldi	r25, 0xFF	; 255
    456e:	80 ec       	ldi	r24, 0xC0	; 192
    4570:	08 95       	ret

00004572 <__fp_pscA>:
    4572:	00 24       	eor	r0, r0
    4574:	0a 94       	dec	r0
    4576:	16 16       	cp	r1, r22
    4578:	17 06       	cpc	r1, r23
    457a:	18 06       	cpc	r1, r24
    457c:	09 06       	cpc	r0, r25
    457e:	08 95       	ret

00004580 <__fp_pscB>:
    4580:	00 24       	eor	r0, r0
    4582:	0a 94       	dec	r0
    4584:	12 16       	cp	r1, r18
    4586:	13 06       	cpc	r1, r19
    4588:	14 06       	cpc	r1, r20
    458a:	05 06       	cpc	r0, r21
    458c:	08 95       	ret

0000458e <__fp_round>:
    458e:	09 2e       	mov	r0, r25
    4590:	03 94       	inc	r0
    4592:	00 0c       	add	r0, r0
    4594:	11 f4       	brne	.+4      	; 0x459a <__fp_round+0xc>
    4596:	88 23       	and	r24, r24
    4598:	52 f0       	brmi	.+20     	; 0x45ae <__fp_round+0x20>
    459a:	bb 0f       	add	r27, r27
    459c:	40 f4       	brcc	.+16     	; 0x45ae <__fp_round+0x20>
    459e:	bf 2b       	or	r27, r31
    45a0:	11 f4       	brne	.+4      	; 0x45a6 <__fp_round+0x18>
    45a2:	60 ff       	sbrs	r22, 0
    45a4:	04 c0       	rjmp	.+8      	; 0x45ae <__fp_round+0x20>
    45a6:	6f 5f       	subi	r22, 0xFF	; 255
    45a8:	7f 4f       	sbci	r23, 0xFF	; 255
    45aa:	8f 4f       	sbci	r24, 0xFF	; 255
    45ac:	9f 4f       	sbci	r25, 0xFF	; 255
    45ae:	08 95       	ret

000045b0 <__fp_split3>:
    45b0:	57 fd       	sbrc	r21, 7
    45b2:	90 58       	subi	r25, 0x80	; 128
    45b4:	44 0f       	add	r20, r20
    45b6:	55 1f       	adc	r21, r21
    45b8:	59 f0       	breq	.+22     	; 0x45d0 <__fp_splitA+0x10>
    45ba:	5f 3f       	cpi	r21, 0xFF	; 255
    45bc:	71 f0       	breq	.+28     	; 0x45da <__fp_splitA+0x1a>
    45be:	47 95       	ror	r20

000045c0 <__fp_splitA>:
    45c0:	88 0f       	add	r24, r24
    45c2:	97 fb       	bst	r25, 7
    45c4:	99 1f       	adc	r25, r25
    45c6:	61 f0       	breq	.+24     	; 0x45e0 <__fp_splitA+0x20>
    45c8:	9f 3f       	cpi	r25, 0xFF	; 255
    45ca:	79 f0       	breq	.+30     	; 0x45ea <__fp_splitA+0x2a>
    45cc:	87 95       	ror	r24
    45ce:	08 95       	ret
    45d0:	12 16       	cp	r1, r18
    45d2:	13 06       	cpc	r1, r19
    45d4:	14 06       	cpc	r1, r20
    45d6:	55 1f       	adc	r21, r21
    45d8:	f2 cf       	rjmp	.-28     	; 0x45be <__fp_split3+0xe>
    45da:	46 95       	lsr	r20
    45dc:	f1 df       	rcall	.-30     	; 0x45c0 <__fp_splitA>
    45de:	08 c0       	rjmp	.+16     	; 0x45f0 <__fp_splitA+0x30>
    45e0:	16 16       	cp	r1, r22
    45e2:	17 06       	cpc	r1, r23
    45e4:	18 06       	cpc	r1, r24
    45e6:	99 1f       	adc	r25, r25
    45e8:	f1 cf       	rjmp	.-30     	; 0x45cc <__fp_splitA+0xc>
    45ea:	86 95       	lsr	r24
    45ec:	71 05       	cpc	r23, r1
    45ee:	61 05       	cpc	r22, r1
    45f0:	08 94       	sec
    45f2:	08 95       	ret

000045f4 <__fp_zero>:
    45f4:	e8 94       	clt

000045f6 <__fp_szero>:
    45f6:	bb 27       	eor	r27, r27
    45f8:	66 27       	eor	r22, r22
    45fa:	77 27       	eor	r23, r23
    45fc:	cb 01       	movw	r24, r22
    45fe:	97 f9       	bld	r25, 7
    4600:	08 95       	ret

00004602 <__gesf2>:
    4602:	8a df       	rcall	.-236    	; 0x4518 <__fp_cmp>
    4604:	08 f4       	brcc	.+2      	; 0x4608 <__gesf2+0x6>
    4606:	8f ef       	ldi	r24, 0xFF	; 255
    4608:	08 95       	ret

0000460a <__mulsf3>:
    460a:	0b d0       	rcall	.+22     	; 0x4622 <__mulsf3x>
    460c:	c0 cf       	rjmp	.-128    	; 0x458e <__fp_round>
    460e:	b1 df       	rcall	.-158    	; 0x4572 <__fp_pscA>
    4610:	28 f0       	brcs	.+10     	; 0x461c <__mulsf3+0x12>
    4612:	b6 df       	rcall	.-148    	; 0x4580 <__fp_pscB>
    4614:	18 f0       	brcs	.+6      	; 0x461c <__mulsf3+0x12>
    4616:	95 23       	and	r25, r21
    4618:	09 f0       	breq	.+2      	; 0x461c <__mulsf3+0x12>
    461a:	a2 cf       	rjmp	.-188    	; 0x4560 <__fp_inf>
    461c:	a7 cf       	rjmp	.-178    	; 0x456c <__fp_nan>
    461e:	11 24       	eor	r1, r1
    4620:	ea cf       	rjmp	.-44     	; 0x45f6 <__fp_szero>

00004622 <__mulsf3x>:
    4622:	c6 df       	rcall	.-116    	; 0x45b0 <__fp_split3>
    4624:	a0 f3       	brcs	.-24     	; 0x460e <__mulsf3+0x4>

00004626 <__mulsf3_pse>:
    4626:	95 9f       	mul	r25, r21
    4628:	d1 f3       	breq	.-12     	; 0x461e <__mulsf3+0x14>
    462a:	95 0f       	add	r25, r21
    462c:	50 e0       	ldi	r21, 0x00	; 0
    462e:	55 1f       	adc	r21, r21
    4630:	62 9f       	mul	r22, r18
    4632:	f0 01       	movw	r30, r0
    4634:	72 9f       	mul	r23, r18
    4636:	bb 27       	eor	r27, r27
    4638:	f0 0d       	add	r31, r0
    463a:	b1 1d       	adc	r27, r1
    463c:	63 9f       	mul	r22, r19
    463e:	aa 27       	eor	r26, r26
    4640:	f0 0d       	add	r31, r0
    4642:	b1 1d       	adc	r27, r1
    4644:	aa 1f       	adc	r26, r26
    4646:	64 9f       	mul	r22, r20
    4648:	66 27       	eor	r22, r22
    464a:	b0 0d       	add	r27, r0
    464c:	a1 1d       	adc	r26, r1
    464e:	66 1f       	adc	r22, r22
    4650:	82 9f       	mul	r24, r18
    4652:	22 27       	eor	r18, r18
    4654:	b0 0d       	add	r27, r0
    4656:	a1 1d       	adc	r26, r1
    4658:	62 1f       	adc	r22, r18
    465a:	73 9f       	mul	r23, r19
    465c:	b0 0d       	add	r27, r0
    465e:	a1 1d       	adc	r26, r1
    4660:	62 1f       	adc	r22, r18
    4662:	83 9f       	mul	r24, r19
    4664:	a0 0d       	add	r26, r0
    4666:	61 1d       	adc	r22, r1
    4668:	22 1f       	adc	r18, r18
    466a:	74 9f       	mul	r23, r20
    466c:	33 27       	eor	r19, r19
    466e:	a0 0d       	add	r26, r0
    4670:	61 1d       	adc	r22, r1
    4672:	23 1f       	adc	r18, r19
    4674:	84 9f       	mul	r24, r20
    4676:	60 0d       	add	r22, r0
    4678:	21 1d       	adc	r18, r1
    467a:	82 2f       	mov	r24, r18
    467c:	76 2f       	mov	r23, r22
    467e:	6a 2f       	mov	r22, r26
    4680:	11 24       	eor	r1, r1
    4682:	9f 57       	subi	r25, 0x7F	; 127
    4684:	50 40       	sbci	r21, 0x00	; 0
    4686:	8a f0       	brmi	.+34     	; 0x46aa <__mulsf3_pse+0x84>
    4688:	e1 f0       	breq	.+56     	; 0x46c2 <__mulsf3_pse+0x9c>
    468a:	88 23       	and	r24, r24
    468c:	4a f0       	brmi	.+18     	; 0x46a0 <__mulsf3_pse+0x7a>
    468e:	ee 0f       	add	r30, r30
    4690:	ff 1f       	adc	r31, r31
    4692:	bb 1f       	adc	r27, r27
    4694:	66 1f       	adc	r22, r22
    4696:	77 1f       	adc	r23, r23
    4698:	88 1f       	adc	r24, r24
    469a:	91 50       	subi	r25, 0x01	; 1
    469c:	50 40       	sbci	r21, 0x00	; 0
    469e:	a9 f7       	brne	.-22     	; 0x468a <__mulsf3_pse+0x64>
    46a0:	9e 3f       	cpi	r25, 0xFE	; 254
    46a2:	51 05       	cpc	r21, r1
    46a4:	70 f0       	brcs	.+28     	; 0x46c2 <__mulsf3_pse+0x9c>
    46a6:	5c cf       	rjmp	.-328    	; 0x4560 <__fp_inf>
    46a8:	a6 cf       	rjmp	.-180    	; 0x45f6 <__fp_szero>
    46aa:	5f 3f       	cpi	r21, 0xFF	; 255
    46ac:	ec f3       	brlt	.-6      	; 0x46a8 <__mulsf3_pse+0x82>
    46ae:	98 3e       	cpi	r25, 0xE8	; 232
    46b0:	dc f3       	brlt	.-10     	; 0x46a8 <__mulsf3_pse+0x82>
    46b2:	86 95       	lsr	r24
    46b4:	77 95       	ror	r23
    46b6:	67 95       	ror	r22
    46b8:	b7 95       	ror	r27
    46ba:	f7 95       	ror	r31
    46bc:	e7 95       	ror	r30
    46be:	9f 5f       	subi	r25, 0xFF	; 255
    46c0:	c1 f7       	brne	.-16     	; 0x46b2 <__mulsf3_pse+0x8c>
    46c2:	fe 2b       	or	r31, r30
    46c4:	88 0f       	add	r24, r24
    46c6:	91 1d       	adc	r25, r1
    46c8:	96 95       	lsr	r25
    46ca:	87 95       	ror	r24
    46cc:	97 f9       	bld	r25, 7
    46ce:	08 95       	ret

000046d0 <round>:
    46d0:	77 df       	rcall	.-274    	; 0x45c0 <__fp_splitA>
    46d2:	e0 f0       	brcs	.+56     	; 0x470c <round+0x3c>
    46d4:	9e 37       	cpi	r25, 0x7E	; 126
    46d6:	d8 f0       	brcs	.+54     	; 0x470e <round+0x3e>
    46d8:	96 39       	cpi	r25, 0x96	; 150
    46da:	b8 f4       	brcc	.+46     	; 0x470a <round+0x3a>
    46dc:	9e 38       	cpi	r25, 0x8E	; 142
    46de:	48 f4       	brcc	.+18     	; 0x46f2 <round+0x22>
    46e0:	67 2f       	mov	r22, r23
    46e2:	78 2f       	mov	r23, r24
    46e4:	88 27       	eor	r24, r24
    46e6:	98 5f       	subi	r25, 0xF8	; 248
    46e8:	f9 cf       	rjmp	.-14     	; 0x46dc <round+0xc>
    46ea:	86 95       	lsr	r24
    46ec:	77 95       	ror	r23
    46ee:	67 95       	ror	r22
    46f0:	93 95       	inc	r25
    46f2:	95 39       	cpi	r25, 0x95	; 149
    46f4:	d0 f3       	brcs	.-12     	; 0x46ea <round+0x1a>
    46f6:	b6 2f       	mov	r27, r22
    46f8:	b1 70       	andi	r27, 0x01	; 1
    46fa:	6b 0f       	add	r22, r27
    46fc:	71 1d       	adc	r23, r1
    46fe:	81 1d       	adc	r24, r1
    4700:	20 f4       	brcc	.+8      	; 0x470a <round+0x3a>
    4702:	87 95       	ror	r24
    4704:	77 95       	ror	r23
    4706:	67 95       	ror	r22
    4708:	93 95       	inc	r25
    470a:	02 c0       	rjmp	.+4      	; 0x4710 <__fp_mintl>
    470c:	1c c0       	rjmp	.+56     	; 0x4746 <__fp_mpack>
    470e:	73 cf       	rjmp	.-282    	; 0x45f6 <__fp_szero>

00004710 <__fp_mintl>:
    4710:	88 23       	and	r24, r24
    4712:	71 f4       	brne	.+28     	; 0x4730 <__fp_mintl+0x20>
    4714:	77 23       	and	r23, r23
    4716:	21 f0       	breq	.+8      	; 0x4720 <__fp_mintl+0x10>
    4718:	98 50       	subi	r25, 0x08	; 8
    471a:	87 2b       	or	r24, r23
    471c:	76 2f       	mov	r23, r22
    471e:	07 c0       	rjmp	.+14     	; 0x472e <__fp_mintl+0x1e>
    4720:	66 23       	and	r22, r22
    4722:	11 f4       	brne	.+4      	; 0x4728 <__fp_mintl+0x18>
    4724:	99 27       	eor	r25, r25
    4726:	0d c0       	rjmp	.+26     	; 0x4742 <__fp_mintl+0x32>
    4728:	90 51       	subi	r25, 0x10	; 16
    472a:	86 2b       	or	r24, r22
    472c:	70 e0       	ldi	r23, 0x00	; 0
    472e:	60 e0       	ldi	r22, 0x00	; 0
    4730:	2a f0       	brmi	.+10     	; 0x473c <__fp_mintl+0x2c>
    4732:	9a 95       	dec	r25
    4734:	66 0f       	add	r22, r22
    4736:	77 1f       	adc	r23, r23
    4738:	88 1f       	adc	r24, r24
    473a:	da f7       	brpl	.-10     	; 0x4732 <__fp_mintl+0x22>
    473c:	88 0f       	add	r24, r24
    473e:	96 95       	lsr	r25
    4740:	87 95       	ror	r24
    4742:	97 f9       	bld	r25, 7
    4744:	08 95       	ret

00004746 <__fp_mpack>:
    4746:	9f 3f       	cpi	r25, 0xFF	; 255
    4748:	31 f0       	breq	.+12     	; 0x4756 <__fp_mpack_finite+0xc>

0000474a <__fp_mpack_finite>:
    474a:	91 50       	subi	r25, 0x01	; 1
    474c:	20 f4       	brcc	.+8      	; 0x4756 <__fp_mpack_finite+0xc>
    474e:	87 95       	ror	r24
    4750:	77 95       	ror	r23
    4752:	67 95       	ror	r22
    4754:	b7 95       	ror	r27
    4756:	88 0f       	add	r24, r24
    4758:	91 1d       	adc	r25, r1
    475a:	96 95       	lsr	r25
    475c:	87 95       	ror	r24
    475e:	97 f9       	bld	r25, 7
    4760:	08 95       	ret

00004762 <__tablejump2__>:
    4762:	ee 0f       	add	r30, r30
    4764:	ff 1f       	adc	r31, r31
    4766:	05 90       	lpm	r0, Z+
    4768:	f4 91       	lpm	r31, Z
    476a:	e0 2d       	mov	r30, r0
    476c:	09 94       	ijmp

0000476e <atof>:
    476e:	66 27       	eor	r22, r22
    4770:	77 27       	eor	r23, r23
    4772:	b7 c0       	rjmp	.+366    	; 0x48e2 <strtod>

00004774 <atoi>:
    4774:	fc 01       	movw	r30, r24
    4776:	88 27       	eor	r24, r24
    4778:	99 27       	eor	r25, r25
    477a:	e8 94       	clt
    477c:	21 91       	ld	r18, Z+
    477e:	20 32       	cpi	r18, 0x20	; 32
    4780:	e9 f3       	breq	.-6      	; 0x477c <atoi+0x8>
    4782:	29 30       	cpi	r18, 0x09	; 9
    4784:	10 f0       	brcs	.+4      	; 0x478a <atoi+0x16>
    4786:	2e 30       	cpi	r18, 0x0E	; 14
    4788:	c8 f3       	brcs	.-14     	; 0x477c <atoi+0x8>
    478a:	2b 32       	cpi	r18, 0x2B	; 43
    478c:	39 f0       	breq	.+14     	; 0x479c <atoi+0x28>
    478e:	2d 32       	cpi	r18, 0x2D	; 45
    4790:	31 f4       	brne	.+12     	; 0x479e <atoi+0x2a>
    4792:	68 94       	set
    4794:	03 c0       	rjmp	.+6      	; 0x479c <atoi+0x28>
    4796:	84 d0       	rcall	.+264    	; 0x48a0 <__mulhi_const_10>
    4798:	82 0f       	add	r24, r18
    479a:	91 1d       	adc	r25, r1
    479c:	21 91       	ld	r18, Z+
    479e:	20 53       	subi	r18, 0x30	; 48
    47a0:	2a 30       	cpi	r18, 0x0A	; 10
    47a2:	c8 f3       	brcs	.-14     	; 0x4796 <atoi+0x22>
    47a4:	1e f4       	brtc	.+6      	; 0x47ac <atoi+0x38>
    47a6:	90 95       	com	r25
    47a8:	81 95       	neg	r24
    47aa:	9f 4f       	sbci	r25, 0xFF	; 255
    47ac:	08 95       	ret

000047ae <atol>:
    47ae:	1f 93       	push	r17
    47b0:	fc 01       	movw	r30, r24
    47b2:	99 27       	eor	r25, r25
    47b4:	88 27       	eor	r24, r24
    47b6:	bc 01       	movw	r22, r24
    47b8:	e8 94       	clt
    47ba:	11 91       	ld	r17, Z+
    47bc:	10 32       	cpi	r17, 0x20	; 32
    47be:	e9 f3       	breq	.-6      	; 0x47ba <atol+0xc>
    47c0:	19 30       	cpi	r17, 0x09	; 9
    47c2:	10 f0       	brcs	.+4      	; 0x47c8 <atol+0x1a>
    47c4:	1e 30       	cpi	r17, 0x0E	; 14
    47c6:	c8 f3       	brcs	.-14     	; 0x47ba <atol+0xc>
    47c8:	1b 32       	cpi	r17, 0x2B	; 43
    47ca:	49 f0       	breq	.+18     	; 0x47de <atol+0x30>
    47cc:	1d 32       	cpi	r17, 0x2D	; 45
    47ce:	41 f4       	brne	.+16     	; 0x47e0 <atol+0x32>
    47d0:	68 94       	set
    47d2:	05 c0       	rjmp	.+10     	; 0x47de <atol+0x30>
    47d4:	50 d0       	rcall	.+160    	; 0x4876 <__mulsi_const_10>
    47d6:	61 0f       	add	r22, r17
    47d8:	71 1d       	adc	r23, r1
    47da:	81 1d       	adc	r24, r1
    47dc:	91 1d       	adc	r25, r1
    47de:	11 91       	ld	r17, Z+
    47e0:	10 53       	subi	r17, 0x30	; 48
    47e2:	1a 30       	cpi	r17, 0x0A	; 10
    47e4:	b8 f3       	brcs	.-18     	; 0x47d4 <atol+0x26>
    47e6:	3e f4       	brtc	.+14     	; 0x47f6 <atol+0x48>
    47e8:	90 95       	com	r25
    47ea:	80 95       	com	r24
    47ec:	70 95       	com	r23
    47ee:	61 95       	neg	r22
    47f0:	7f 4f       	sbci	r23, 0xFF	; 255
    47f2:	8f 4f       	sbci	r24, 0xFF	; 255
    47f4:	9f 4f       	sbci	r25, 0xFF	; 255
    47f6:	1f 91       	pop	r17
    47f8:	08 95       	ret

000047fa <strcat>:
    47fa:	fb 01       	movw	r30, r22
    47fc:	dc 01       	movw	r26, r24
    47fe:	0d 90       	ld	r0, X+
    4800:	00 20       	and	r0, r0
    4802:	e9 f7       	brne	.-6      	; 0x47fe <strcat+0x4>
    4804:	11 97       	sbiw	r26, 0x01	; 1
    4806:	01 90       	ld	r0, Z+
    4808:	0d 92       	st	X+, r0
    480a:	00 20       	and	r0, r0
    480c:	e1 f7       	brne	.-8      	; 0x4806 <strcat+0xc>
    480e:	08 95       	ret

00004810 <strchr>:
    4810:	fc 01       	movw	r30, r24
    4812:	81 91       	ld	r24, Z+
    4814:	86 17       	cp	r24, r22
    4816:	21 f0       	breq	.+8      	; 0x4820 <strchr+0x10>
    4818:	88 23       	and	r24, r24
    481a:	d9 f7       	brne	.-10     	; 0x4812 <strchr+0x2>
    481c:	99 27       	eor	r25, r25
    481e:	08 95       	ret
    4820:	31 97       	sbiw	r30, 0x01	; 1
    4822:	cf 01       	movw	r24, r30
    4824:	08 95       	ret

00004826 <strcmp>:
    4826:	fb 01       	movw	r30, r22
    4828:	dc 01       	movw	r26, r24
    482a:	8d 91       	ld	r24, X+
    482c:	01 90       	ld	r0, Z+
    482e:	80 19       	sub	r24, r0
    4830:	01 10       	cpse	r0, r1
    4832:	d9 f3       	breq	.-10     	; 0x482a <strcmp+0x4>
    4834:	99 0b       	sbc	r25, r25
    4836:	08 95       	ret

00004838 <strnlen>:
    4838:	fc 01       	movw	r30, r24
    483a:	61 50       	subi	r22, 0x01	; 1
    483c:	70 40       	sbci	r23, 0x00	; 0
    483e:	01 90       	ld	r0, Z+
    4840:	01 10       	cpse	r0, r1
    4842:	d8 f7       	brcc	.-10     	; 0x483a <strnlen+0x2>
    4844:	80 95       	com	r24
    4846:	90 95       	com	r25
    4848:	8e 0f       	add	r24, r30
    484a:	9f 1f       	adc	r25, r31
    484c:	08 95       	ret

0000484e <strupr>:
    484e:	dc 01       	movw	r26, r24
    4850:	6c 91       	ld	r22, X
    4852:	61 56       	subi	r22, 0x61	; 97
    4854:	6a 31       	cpi	r22, 0x1A	; 26
    4856:	08 f0       	brcs	.+2      	; 0x485a <strupr+0xc>
    4858:	60 5e       	subi	r22, 0xE0	; 224
    485a:	6f 5b       	subi	r22, 0xBF	; 191
    485c:	6d 93       	st	X+, r22
    485e:	c1 f7       	brne	.-16     	; 0x4850 <strupr+0x2>
    4860:	08 95       	ret

00004862 <__itoa_ncheck>:
    4862:	bb 27       	eor	r27, r27
    4864:	4a 30       	cpi	r20, 0x0A	; 10
    4866:	31 f4       	brne	.+12     	; 0x4874 <__itoa_ncheck+0x12>
    4868:	99 23       	and	r25, r25
    486a:	22 f4       	brpl	.+8      	; 0x4874 <__itoa_ncheck+0x12>
    486c:	bd e2       	ldi	r27, 0x2D	; 45
    486e:	90 95       	com	r25
    4870:	81 95       	neg	r24
    4872:	9f 4f       	sbci	r25, 0xFF	; 255
    4874:	1e c0       	rjmp	.+60     	; 0x48b2 <__utoa_common>

00004876 <__mulsi_const_10>:
    4876:	59 2f       	mov	r21, r25
    4878:	48 2f       	mov	r20, r24
    487a:	37 2f       	mov	r19, r23
    487c:	26 2f       	mov	r18, r22
    487e:	66 0f       	add	r22, r22
    4880:	77 1f       	adc	r23, r23
    4882:	88 1f       	adc	r24, r24
    4884:	99 1f       	adc	r25, r25
    4886:	66 0f       	add	r22, r22
    4888:	77 1f       	adc	r23, r23
    488a:	88 1f       	adc	r24, r24
    488c:	99 1f       	adc	r25, r25
    488e:	62 0f       	add	r22, r18
    4890:	73 1f       	adc	r23, r19
    4892:	84 1f       	adc	r24, r20
    4894:	95 1f       	adc	r25, r21
    4896:	66 0f       	add	r22, r22
    4898:	77 1f       	adc	r23, r23
    489a:	88 1f       	adc	r24, r24
    489c:	99 1f       	adc	r25, r25
    489e:	08 95       	ret

000048a0 <__mulhi_const_10>:
    48a0:	7a e0       	ldi	r23, 0x0A	; 10
    48a2:	97 9f       	mul	r25, r23
    48a4:	90 2d       	mov	r25, r0
    48a6:	87 9f       	mul	r24, r23
    48a8:	80 2d       	mov	r24, r0
    48aa:	91 0d       	add	r25, r1
    48ac:	11 24       	eor	r1, r1
    48ae:	08 95       	ret

000048b0 <__utoa_ncheck>:
    48b0:	bb 27       	eor	r27, r27

000048b2 <__utoa_common>:
    48b2:	fb 01       	movw	r30, r22
    48b4:	55 27       	eor	r21, r21
    48b6:	aa 27       	eor	r26, r26
    48b8:	88 0f       	add	r24, r24
    48ba:	99 1f       	adc	r25, r25
    48bc:	aa 1f       	adc	r26, r26
    48be:	a4 17       	cp	r26, r20
    48c0:	10 f0       	brcs	.+4      	; 0x48c6 <__utoa_common+0x14>
    48c2:	a4 1b       	sub	r26, r20
    48c4:	83 95       	inc	r24
    48c6:	50 51       	subi	r21, 0x10	; 16
    48c8:	b9 f7       	brne	.-18     	; 0x48b8 <__utoa_common+0x6>
    48ca:	a0 5d       	subi	r26, 0xD0	; 208
    48cc:	aa 33       	cpi	r26, 0x3A	; 58
    48ce:	08 f0       	brcs	.+2      	; 0x48d2 <__utoa_common+0x20>
    48d0:	a9 5d       	subi	r26, 0xD9	; 217
    48d2:	a1 93       	st	Z+, r26
    48d4:	00 97       	sbiw	r24, 0x00	; 0
    48d6:	79 f7       	brne	.-34     	; 0x48b6 <__utoa_common+0x4>
    48d8:	b1 11       	cpse	r27, r1
    48da:	b1 93       	st	Z+, r27
    48dc:	11 92       	st	Z+, r1
    48de:	cb 01       	movw	r24, r22
    48e0:	72 c1       	rjmp	.+740    	; 0x4bc6 <strrev>

000048e2 <strtod>:
    48e2:	a0 e0       	ldi	r26, 0x00	; 0
    48e4:	b0 e0       	ldi	r27, 0x00	; 0
    48e6:	e6 e7       	ldi	r30, 0x76	; 118
    48e8:	f4 e2       	ldi	r31, 0x24	; 36
    48ea:	be c1       	rjmp	.+892    	; 0x4c68 <__prologue_saves__+0x8>
    48ec:	ec 01       	movw	r28, r24
    48ee:	7b 01       	movw	r14, r22
    48f0:	61 15       	cp	r22, r1
    48f2:	71 05       	cpc	r23, r1
    48f4:	19 f0       	breq	.+6      	; 0x48fc <strtod+0x1a>
    48f6:	db 01       	movw	r26, r22
    48f8:	8d 93       	st	X+, r24
    48fa:	9c 93       	st	X, r25
    48fc:	8e 01       	movw	r16, r28
    48fe:	0f 5f       	subi	r16, 0xFF	; 255
    4900:	1f 4f       	sbci	r17, 0xFF	; 255
    4902:	78 80       	ld	r7, Y
    4904:	87 2d       	mov	r24, r7
    4906:	90 e0       	ldi	r25, 0x00	; 0
    4908:	3e d1       	rcall	.+636    	; 0x4b86 <isspace>
    490a:	89 2b       	or	r24, r25
    490c:	11 f0       	breq	.+4      	; 0x4912 <strtod+0x30>
    490e:	e8 01       	movw	r28, r16
    4910:	f5 cf       	rjmp	.-22     	; 0x48fc <strtod+0x1a>
    4912:	bd e2       	ldi	r27, 0x2D	; 45
    4914:	7b 12       	cpse	r7, r27
    4916:	05 c0       	rjmp	.+10     	; 0x4922 <strtod+0x40>
    4918:	0f 5f       	subi	r16, 0xFF	; 255
    491a:	1f 4f       	sbci	r17, 0xFF	; 255
    491c:	79 80       	ldd	r7, Y+1	; 0x01
    491e:	c1 e0       	ldi	r28, 0x01	; 1
    4920:	08 c0       	rjmp	.+16     	; 0x4932 <strtod+0x50>
    4922:	eb e2       	ldi	r30, 0x2B	; 43
    4924:	7e 12       	cpse	r7, r30
    4926:	04 c0       	rjmp	.+8      	; 0x4930 <strtod+0x4e>
    4928:	8e 01       	movw	r16, r28
    492a:	0e 5f       	subi	r16, 0xFE	; 254
    492c:	1f 4f       	sbci	r17, 0xFF	; 255
    492e:	79 80       	ldd	r7, Y+1	; 0x01
    4930:	c0 e0       	ldi	r28, 0x00	; 0
    4932:	68 01       	movw	r12, r16
    4934:	f1 e0       	ldi	r31, 0x01	; 1
    4936:	cf 1a       	sub	r12, r31
    4938:	d1 08       	sbc	r13, r1
    493a:	43 e0       	ldi	r20, 0x03	; 3
    493c:	50 e0       	ldi	r21, 0x00	; 0
    493e:	6e ed       	ldi	r22, 0xDE	; 222
    4940:	72 e0       	ldi	r23, 0x02	; 2
    4942:	c6 01       	movw	r24, r12
    4944:	28 d1       	rcall	.+592    	; 0x4b96 <strncasecmp_P>
    4946:	89 2b       	or	r24, r25
    4948:	e9 f4       	brne	.+58     	; 0x4984 <strtod+0xa2>
    494a:	68 01       	movw	r12, r16
    494c:	22 e0       	ldi	r18, 0x02	; 2
    494e:	c2 0e       	add	r12, r18
    4950:	d1 1c       	adc	r13, r1
    4952:	45 e0       	ldi	r20, 0x05	; 5
    4954:	50 e0       	ldi	r21, 0x00	; 0
    4956:	69 ed       	ldi	r22, 0xD9	; 217
    4958:	72 e0       	ldi	r23, 0x02	; 2
    495a:	c6 01       	movw	r24, r12
    495c:	1c d1       	rcall	.+568    	; 0x4b96 <strncasecmp_P>
    495e:	89 2b       	or	r24, r25
    4960:	21 f4       	brne	.+8      	; 0x496a <strtod+0x88>
    4962:	68 01       	movw	r12, r16
    4964:	87 e0       	ldi	r24, 0x07	; 7
    4966:	c8 0e       	add	r12, r24
    4968:	d1 1c       	adc	r13, r1
    496a:	e1 14       	cp	r14, r1
    496c:	f1 04       	cpc	r15, r1
    496e:	19 f0       	breq	.+6      	; 0x4976 <strtod+0x94>
    4970:	d7 01       	movw	r26, r14
    4972:	cd 92       	st	X+, r12
    4974:	dc 92       	st	X, r13
    4976:	c1 11       	cpse	r28, r1
    4978:	f9 c0       	rjmp	.+498    	; 0x4b6c <strtod+0x28a>
    497a:	60 e0       	ldi	r22, 0x00	; 0
    497c:	70 e0       	ldi	r23, 0x00	; 0
    497e:	80 e8       	ldi	r24, 0x80	; 128
    4980:	9f e7       	ldi	r25, 0x7F	; 127
    4982:	fd c0       	rjmp	.+506    	; 0x4b7e <strtod+0x29c>
    4984:	43 e0       	ldi	r20, 0x03	; 3
    4986:	50 e0       	ldi	r21, 0x00	; 0
    4988:	66 ed       	ldi	r22, 0xD6	; 214
    498a:	72 e0       	ldi	r23, 0x02	; 2
    498c:	c6 01       	movw	r24, r12
    498e:	03 d1       	rcall	.+518    	; 0x4b96 <strncasecmp_P>
    4990:	89 2b       	or	r24, r25
    4992:	51 f4       	brne	.+20     	; 0x49a8 <strtod+0xc6>
    4994:	e1 14       	cp	r14, r1
    4996:	f1 04       	cpc	r15, r1
    4998:	09 f4       	brne	.+2      	; 0x499c <strtod+0xba>
    499a:	ed c0       	rjmp	.+474    	; 0x4b76 <strtod+0x294>
    499c:	0e 5f       	subi	r16, 0xFE	; 254
    499e:	1f 4f       	sbci	r17, 0xFF	; 255
    49a0:	f7 01       	movw	r30, r14
    49a2:	11 83       	std	Z+1, r17	; 0x01
    49a4:	00 83       	st	Z, r16
    49a6:	e7 c0       	rjmp	.+462    	; 0x4b76 <strtod+0x294>
    49a8:	68 01       	movw	r12, r16
    49aa:	60 e0       	ldi	r22, 0x00	; 0
    49ac:	70 e0       	ldi	r23, 0x00	; 0
    49ae:	cb 01       	movw	r24, r22
    49b0:	00 e0       	ldi	r16, 0x00	; 0
    49b2:	10 e0       	ldi	r17, 0x00	; 0
    49b4:	f6 01       	movw	r30, r12
    49b6:	d0 ed       	ldi	r29, 0xD0	; 208
    49b8:	d7 0d       	add	r29, r7
    49ba:	da 30       	cpi	r29, 0x0A	; 10
    49bc:	50 f5       	brcc	.+84     	; 0x4a12 <strtod+0x130>
    49be:	2c 2f       	mov	r18, r28
    49c0:	22 60       	ori	r18, 0x02	; 2
    49c2:	62 2e       	mov	r6, r18
    49c4:	2c 2f       	mov	r18, r28
    49c6:	28 70       	andi	r18, 0x08	; 8
    49c8:	c2 ff       	sbrs	r28, 2
    49ca:	05 c0       	rjmp	.+10     	; 0x49d6 <strtod+0xf4>
    49cc:	21 11       	cpse	r18, r1
    49ce:	27 c0       	rjmp	.+78     	; 0x4a1e <strtod+0x13c>
    49d0:	0f 5f       	subi	r16, 0xFF	; 255
    49d2:	1f 4f       	sbci	r17, 0xFF	; 255
    49d4:	24 c0       	rjmp	.+72     	; 0x4a1e <strtod+0x13c>
    49d6:	22 23       	and	r18, r18
    49d8:	11 f0       	breq	.+4      	; 0x49de <strtod+0xfc>
    49da:	01 50       	subi	r16, 0x01	; 1
    49dc:	11 09       	sbc	r17, r1
    49de:	a5 e0       	ldi	r26, 0x05	; 5
    49e0:	b0 e0       	ldi	r27, 0x00	; 0
    49e2:	9b 01       	movw	r18, r22
    49e4:	ac 01       	movw	r20, r24
    49e6:	32 d1       	rcall	.+612    	; 0x4c4c <__muluhisi3>
    49e8:	4b 01       	movw	r8, r22
    49ea:	5c 01       	movw	r10, r24
    49ec:	88 0c       	add	r8, r8
    49ee:	99 1c       	adc	r9, r9
    49f0:	aa 1c       	adc	r10, r10
    49f2:	bb 1c       	adc	r11, r11
    49f4:	c5 01       	movw	r24, r10
    49f6:	b4 01       	movw	r22, r8
    49f8:	6d 0f       	add	r22, r29
    49fa:	71 1d       	adc	r23, r1
    49fc:	81 1d       	adc	r24, r1
    49fe:	91 1d       	adc	r25, r1
    4a00:	68 39       	cpi	r22, 0x98	; 152
    4a02:	a9 e9       	ldi	r26, 0x99	; 153
    4a04:	7a 07       	cpc	r23, r26
    4a06:	8a 07       	cpc	r24, r26
    4a08:	a9 e1       	ldi	r26, 0x19	; 25
    4a0a:	9a 07       	cpc	r25, r26
    4a0c:	40 f0       	brcs	.+16     	; 0x4a1e <strtod+0x13c>
    4a0e:	c6 60       	ori	r28, 0x06	; 6
    4a10:	05 c0       	rjmp	.+10     	; 0x4a1c <strtod+0x13a>
    4a12:	de 3f       	cpi	r29, 0xFE	; 254
    4a14:	51 f4       	brne	.+20     	; 0x4a2a <strtod+0x148>
    4a16:	c3 fd       	sbrc	r28, 3
    4a18:	44 c0       	rjmp	.+136    	; 0x4aa2 <strtod+0x1c0>
    4a1a:	c8 60       	ori	r28, 0x08	; 8
    4a1c:	6c 2e       	mov	r6, r28
    4a1e:	bf ef       	ldi	r27, 0xFF	; 255
    4a20:	cb 1a       	sub	r12, r27
    4a22:	db 0a       	sbc	r13, r27
    4a24:	70 80       	ld	r7, Z
    4a26:	c6 2d       	mov	r28, r6
    4a28:	c5 cf       	rjmp	.-118    	; 0x49b4 <strtod+0xd2>
    4a2a:	2d 2f       	mov	r18, r29
    4a2c:	2f 7d       	andi	r18, 0xDF	; 223
    4a2e:	25 31       	cpi	r18, 0x15	; 21
    4a30:	c1 f5       	brne	.+112    	; 0x4aa2 <strtod+0x1c0>
    4a32:	40 81       	ld	r20, Z
    4a34:	4d 32       	cpi	r20, 0x2D	; 45
    4a36:	11 f4       	brne	.+4      	; 0x4a3c <strtod+0x15a>
    4a38:	c0 61       	ori	r28, 0x10	; 16
    4a3a:	06 c0       	rjmp	.+12     	; 0x4a48 <strtod+0x166>
    4a3c:	4b 32       	cpi	r20, 0x2B	; 43
    4a3e:	21 f0       	breq	.+8      	; 0x4a48 <strtod+0x166>
    4a40:	31 96       	adiw	r30, 0x01	; 1
    4a42:	21 e0       	ldi	r18, 0x01	; 1
    4a44:	30 e0       	ldi	r19, 0x00	; 0
    4a46:	06 c0       	rjmp	.+12     	; 0x4a54 <strtod+0x172>
    4a48:	32 96       	adiw	r30, 0x02	; 2
    4a4a:	d6 01       	movw	r26, r12
    4a4c:	11 96       	adiw	r26, 0x01	; 1
    4a4e:	4c 91       	ld	r20, X
    4a50:	22 e0       	ldi	r18, 0x02	; 2
    4a52:	30 e0       	ldi	r19, 0x00	; 0
    4a54:	a0 ed       	ldi	r26, 0xD0	; 208
    4a56:	a4 0f       	add	r26, r20
    4a58:	aa 30       	cpi	r26, 0x0A	; 10
    4a5a:	18 f0       	brcs	.+6      	; 0x4a62 <strtod+0x180>
    4a5c:	e2 1b       	sub	r30, r18
    4a5e:	f3 0b       	sbc	r31, r19
    4a60:	20 c0       	rjmp	.+64     	; 0x4aa2 <strtod+0x1c0>
    4a62:	40 e0       	ldi	r20, 0x00	; 0
    4a64:	50 e0       	ldi	r21, 0x00	; 0
    4a66:	40 38       	cpi	r20, 0x80	; 128
    4a68:	bc e0       	ldi	r27, 0x0C	; 12
    4a6a:	5b 07       	cpc	r21, r27
    4a6c:	5c f4       	brge	.+22     	; 0x4a84 <strtod+0x1a2>
    4a6e:	9a 01       	movw	r18, r20
    4a70:	22 0f       	add	r18, r18
    4a72:	33 1f       	adc	r19, r19
    4a74:	22 0f       	add	r18, r18
    4a76:	33 1f       	adc	r19, r19
    4a78:	42 0f       	add	r20, r18
    4a7a:	53 1f       	adc	r21, r19
    4a7c:	44 0f       	add	r20, r20
    4a7e:	55 1f       	adc	r21, r21
    4a80:	4a 0f       	add	r20, r26
    4a82:	51 1d       	adc	r21, r1
    4a84:	31 96       	adiw	r30, 0x01	; 1
    4a86:	df 01       	movw	r26, r30
    4a88:	11 97       	sbiw	r26, 0x01	; 1
    4a8a:	2c 91       	ld	r18, X
    4a8c:	a0 ed       	ldi	r26, 0xD0	; 208
    4a8e:	a2 0f       	add	r26, r18
    4a90:	aa 30       	cpi	r26, 0x0A	; 10
    4a92:	48 f3       	brcs	.-46     	; 0x4a66 <strtod+0x184>
    4a94:	c4 ff       	sbrs	r28, 4
    4a96:	03 c0       	rjmp	.+6      	; 0x4a9e <strtod+0x1bc>
    4a98:	51 95       	neg	r21
    4a9a:	41 95       	neg	r20
    4a9c:	51 09       	sbc	r21, r1
    4a9e:	04 0f       	add	r16, r20
    4aa0:	15 1f       	adc	r17, r21
    4aa2:	c1 ff       	sbrs	r28, 1
    4aa4:	07 c0       	rjmp	.+14     	; 0x4ab4 <strtod+0x1d2>
    4aa6:	e1 14       	cp	r14, r1
    4aa8:	f1 04       	cpc	r15, r1
    4aaa:	21 f0       	breq	.+8      	; 0x4ab4 <strtod+0x1d2>
    4aac:	31 97       	sbiw	r30, 0x01	; 1
    4aae:	d7 01       	movw	r26, r14
    4ab0:	ed 93       	st	X+, r30
    4ab2:	fc 93       	st	X, r31
    4ab4:	f4 dc       	rcall	.-1560   	; 0x449e <__floatunsisf>
    4ab6:	c3 70       	andi	r28, 0x03	; 3
    4ab8:	c3 30       	cpi	r28, 0x03	; 3
    4aba:	19 f0       	breq	.+6      	; 0x4ac2 <strtod+0x1e0>
    4abc:	6b 01       	movw	r12, r22
    4abe:	7c 01       	movw	r14, r24
    4ac0:	06 c0       	rjmp	.+12     	; 0x4ace <strtod+0x1ec>
    4ac2:	6b 01       	movw	r12, r22
    4ac4:	7c 01       	movw	r14, r24
    4ac6:	f7 fa       	bst	r15, 7
    4ac8:	f0 94       	com	r15
    4aca:	f7 f8       	bld	r15, 7
    4acc:	f0 94       	com	r15
    4ace:	20 e0       	ldi	r18, 0x00	; 0
    4ad0:	30 e0       	ldi	r19, 0x00	; 0
    4ad2:	a9 01       	movw	r20, r18
    4ad4:	c7 01       	movw	r24, r14
    4ad6:	b6 01       	movw	r22, r12
    4ad8:	ad dc       	rcall	.-1702   	; 0x4434 <__cmpsf2>
    4ada:	88 23       	and	r24, r24
    4adc:	09 f4       	brne	.+2      	; 0x4ae0 <strtod+0x1fe>
    4ade:	43 c0       	rjmp	.+134    	; 0x4b66 <strtod+0x284>
    4ae0:	17 ff       	sbrs	r17, 7
    4ae2:	06 c0       	rjmp	.+12     	; 0x4af0 <strtod+0x20e>
    4ae4:	11 95       	neg	r17
    4ae6:	01 95       	neg	r16
    4ae8:	11 09       	sbc	r17, r1
    4aea:	c5 ef       	ldi	r28, 0xF5	; 245
    4aec:	d2 e0       	ldi	r29, 0x02	; 2
    4aee:	02 c0       	rjmp	.+4      	; 0x4af4 <strtod+0x212>
    4af0:	cd e0       	ldi	r28, 0x0D	; 13
    4af2:	d3 e0       	ldi	r29, 0x03	; 3
    4af4:	5e 01       	movw	r10, r28
    4af6:	b8 e1       	ldi	r27, 0x18	; 24
    4af8:	ab 1a       	sub	r10, r27
    4afa:	b1 08       	sbc	r11, r1
    4afc:	46 01       	movw	r8, r12
    4afe:	be 2d       	mov	r27, r14
    4b00:	af 2d       	mov	r26, r15
    4b02:	90 e2       	ldi	r25, 0x20	; 32
    4b04:	e9 2e       	mov	r14, r25
    4b06:	f1 2c       	mov	r15, r1
    4b08:	0e 15       	cp	r16, r14
    4b0a:	1f 05       	cpc	r17, r15
    4b0c:	7c f0       	brlt	.+30     	; 0x4b2c <strtod+0x24a>
    4b0e:	fe 01       	movw	r30, r28
    4b10:	25 91       	lpm	r18, Z+
    4b12:	35 91       	lpm	r19, Z+
    4b14:	45 91       	lpm	r20, Z+
    4b16:	54 91       	lpm	r21, Z
    4b18:	b4 01       	movw	r22, r8
    4b1a:	8b 2f       	mov	r24, r27
    4b1c:	9a 2f       	mov	r25, r26
    4b1e:	75 dd       	rcall	.-1302   	; 0x460a <__mulsf3>
    4b20:	4b 01       	movw	r8, r22
    4b22:	b8 2f       	mov	r27, r24
    4b24:	a9 2f       	mov	r26, r25
    4b26:	0e 19       	sub	r16, r14
    4b28:	1f 09       	sbc	r17, r15
    4b2a:	ee cf       	rjmp	.-36     	; 0x4b08 <strtod+0x226>
    4b2c:	24 97       	sbiw	r28, 0x04	; 4
    4b2e:	f5 94       	asr	r15
    4b30:	e7 94       	ror	r14
    4b32:	ca 15       	cp	r28, r10
    4b34:	db 05       	cpc	r29, r11
    4b36:	41 f7       	brne	.-48     	; 0x4b08 <strtod+0x226>
    4b38:	64 01       	movw	r12, r8
    4b3a:	eb 2e       	mov	r14, r27
    4b3c:	fa 2e       	mov	r15, r26
    4b3e:	8e 2d       	mov	r24, r14
    4b40:	88 0f       	add	r24, r24
    4b42:	8f 2d       	mov	r24, r15
    4b44:	88 1f       	adc	r24, r24
    4b46:	8f 3f       	cpi	r24, 0xFF	; 255
    4b48:	41 f0       	breq	.+16     	; 0x4b5a <strtod+0x278>
    4b4a:	20 e0       	ldi	r18, 0x00	; 0
    4b4c:	30 e0       	ldi	r19, 0x00	; 0
    4b4e:	a9 01       	movw	r20, r18
    4b50:	c7 01       	movw	r24, r14
    4b52:	b6 01       	movw	r22, r12
    4b54:	6f dc       	rcall	.-1826   	; 0x4434 <__cmpsf2>
    4b56:	81 11       	cpse	r24, r1
    4b58:	06 c0       	rjmp	.+12     	; 0x4b66 <strtod+0x284>
    4b5a:	82 e2       	ldi	r24, 0x22	; 34
    4b5c:	90 e0       	ldi	r25, 0x00	; 0
    4b5e:	90 93 04 05 	sts	0x0504, r25
    4b62:	80 93 03 05 	sts	0x0503, r24
    4b66:	c7 01       	movw	r24, r14
    4b68:	b6 01       	movw	r22, r12
    4b6a:	09 c0       	rjmp	.+18     	; 0x4b7e <strtod+0x29c>
    4b6c:	60 e0       	ldi	r22, 0x00	; 0
    4b6e:	70 e0       	ldi	r23, 0x00	; 0
    4b70:	80 e8       	ldi	r24, 0x80	; 128
    4b72:	9f ef       	ldi	r25, 0xFF	; 255
    4b74:	04 c0       	rjmp	.+8      	; 0x4b7e <strtod+0x29c>
    4b76:	60 e0       	ldi	r22, 0x00	; 0
    4b78:	70 e0       	ldi	r23, 0x00	; 0
    4b7a:	80 ec       	ldi	r24, 0xC0	; 192
    4b7c:	9f e7       	ldi	r25, 0x7F	; 127
    4b7e:	cd b7       	in	r28, 0x3d	; 61
    4b80:	de b7       	in	r29, 0x3e	; 62
    4b82:	ee e0       	ldi	r30, 0x0E	; 14
    4b84:	8d c0       	rjmp	.+282    	; 0x4ca0 <__epilogue_restores__+0x8>

00004b86 <isspace>:
    4b86:	91 11       	cpse	r25, r1
    4b88:	2e c0       	rjmp	.+92     	; 0x4be6 <__ctype_isfalse>
    4b8a:	80 32       	cpi	r24, 0x20	; 32
    4b8c:	19 f0       	breq	.+6      	; 0x4b94 <isspace+0xe>
    4b8e:	89 50       	subi	r24, 0x09	; 9
    4b90:	85 50       	subi	r24, 0x05	; 5
    4b92:	d0 f7       	brcc	.-12     	; 0x4b88 <isspace+0x2>
    4b94:	08 95       	ret

00004b96 <strncasecmp_P>:
    4b96:	fb 01       	movw	r30, r22
    4b98:	dc 01       	movw	r26, r24
    4b9a:	41 50       	subi	r20, 0x01	; 1
    4b9c:	50 40       	sbci	r21, 0x00	; 0
    4b9e:	88 f0       	brcs	.+34     	; 0x4bc2 <strncasecmp_P+0x2c>
    4ba0:	8d 91       	ld	r24, X+
    4ba2:	81 34       	cpi	r24, 0x41	; 65
    4ba4:	1c f0       	brlt	.+6      	; 0x4bac <strncasecmp_P+0x16>
    4ba6:	8b 35       	cpi	r24, 0x5B	; 91
    4ba8:	0c f4       	brge	.+2      	; 0x4bac <strncasecmp_P+0x16>
    4baa:	80 5e       	subi	r24, 0xE0	; 224
    4bac:	65 91       	lpm	r22, Z+
    4bae:	61 34       	cpi	r22, 0x41	; 65
    4bb0:	1c f0       	brlt	.+6      	; 0x4bb8 <strncasecmp_P+0x22>
    4bb2:	6b 35       	cpi	r22, 0x5B	; 91
    4bb4:	0c f4       	brge	.+2      	; 0x4bb8 <strncasecmp_P+0x22>
    4bb6:	60 5e       	subi	r22, 0xE0	; 224
    4bb8:	86 1b       	sub	r24, r22
    4bba:	61 11       	cpse	r22, r1
    4bbc:	71 f3       	breq	.-36     	; 0x4b9a <strncasecmp_P+0x4>
    4bbe:	99 0b       	sbc	r25, r25
    4bc0:	08 95       	ret
    4bc2:	88 1b       	sub	r24, r24
    4bc4:	fc cf       	rjmp	.-8      	; 0x4bbe <strncasecmp_P+0x28>

00004bc6 <strrev>:
    4bc6:	dc 01       	movw	r26, r24
    4bc8:	fc 01       	movw	r30, r24
    4bca:	67 2f       	mov	r22, r23
    4bcc:	71 91       	ld	r23, Z+
    4bce:	77 23       	and	r23, r23
    4bd0:	e1 f7       	brne	.-8      	; 0x4bca <strrev+0x4>
    4bd2:	32 97       	sbiw	r30, 0x02	; 2
    4bd4:	04 c0       	rjmp	.+8      	; 0x4bde <strrev+0x18>
    4bd6:	7c 91       	ld	r23, X
    4bd8:	6d 93       	st	X+, r22
    4bda:	70 83       	st	Z, r23
    4bdc:	62 91       	ld	r22, -Z
    4bde:	ae 17       	cp	r26, r30
    4be0:	bf 07       	cpc	r27, r31
    4be2:	c8 f3       	brcs	.-14     	; 0x4bd6 <strrev+0x10>
    4be4:	08 95       	ret

00004be6 <__ctype_isfalse>:
    4be6:	99 27       	eor	r25, r25
    4be8:	88 27       	eor	r24, r24

00004bea <__ctype_istrue>:
    4bea:	08 95       	ret

00004bec <eeprom_read_dword>:
    4bec:	a6 e1       	ldi	r26, 0x16	; 22
    4bee:	b0 e0       	ldi	r27, 0x00	; 0
    4bf0:	44 e0       	ldi	r20, 0x04	; 4
    4bf2:	50 e0       	ldi	r21, 0x00	; 0
    4bf4:	0f c0       	rjmp	.+30     	; 0x4c14 <eeprom_read_blraw>

00004bf6 <eeprom_read_word>:
    4bf6:	a8 e1       	ldi	r26, 0x18	; 24
    4bf8:	b0 e0       	ldi	r27, 0x00	; 0
    4bfa:	42 e0       	ldi	r20, 0x02	; 2
    4bfc:	50 e0       	ldi	r21, 0x00	; 0
    4bfe:	0a c0       	rjmp	.+20     	; 0x4c14 <eeprom_read_blraw>

00004c00 <eeprom_write_dword>:
    4c00:	24 2f       	mov	r18, r20
    4c02:	17 d0       	rcall	.+46     	; 0x4c32 <eeprom_write_r18>
    4c04:	25 2f       	mov	r18, r21
    4c06:	15 d0       	rcall	.+42     	; 0x4c32 <eeprom_write_r18>
    4c08:	00 c0       	rjmp	.+0      	; 0x4c0a <eeprom_write_word>

00004c0a <eeprom_write_word>:
    4c0a:	12 d0       	rcall	.+36     	; 0x4c30 <eeprom_write_byte>
    4c0c:	27 2f       	mov	r18, r23
    4c0e:	11 c0       	rjmp	.+34     	; 0x4c32 <eeprom_write_r18>

00004c10 <eeprom_read_block>:
    4c10:	dc 01       	movw	r26, r24
    4c12:	cb 01       	movw	r24, r22

00004c14 <eeprom_read_blraw>:
    4c14:	fc 01       	movw	r30, r24
    4c16:	f9 99       	sbic	0x1f, 1	; 31
    4c18:	fe cf       	rjmp	.-4      	; 0x4c16 <eeprom_read_blraw+0x2>
    4c1a:	06 c0       	rjmp	.+12     	; 0x4c28 <eeprom_read_blraw+0x14>
    4c1c:	f2 bd       	out	0x22, r31	; 34
    4c1e:	e1 bd       	out	0x21, r30	; 33
    4c20:	f8 9a       	sbi	0x1f, 0	; 31
    4c22:	31 96       	adiw	r30, 0x01	; 1
    4c24:	00 b4       	in	r0, 0x20	; 32
    4c26:	0d 92       	st	X+, r0
    4c28:	41 50       	subi	r20, 0x01	; 1
    4c2a:	50 40       	sbci	r21, 0x00	; 0
    4c2c:	b8 f7       	brcc	.-18     	; 0x4c1c <eeprom_read_blraw+0x8>
    4c2e:	08 95       	ret

00004c30 <eeprom_write_byte>:
    4c30:	26 2f       	mov	r18, r22

00004c32 <eeprom_write_r18>:
    4c32:	f9 99       	sbic	0x1f, 1	; 31
    4c34:	fe cf       	rjmp	.-4      	; 0x4c32 <eeprom_write_r18>
    4c36:	1f ba       	out	0x1f, r1	; 31
    4c38:	92 bd       	out	0x22, r25	; 34
    4c3a:	81 bd       	out	0x21, r24	; 33
    4c3c:	20 bd       	out	0x20, r18	; 32
    4c3e:	0f b6       	in	r0, 0x3f	; 63
    4c40:	f8 94       	cli
    4c42:	fa 9a       	sbi	0x1f, 2	; 31
    4c44:	f9 9a       	sbi	0x1f, 1	; 31
    4c46:	0f be       	out	0x3f, r0	; 63
    4c48:	01 96       	adiw	r24, 0x01	; 1
    4c4a:	08 95       	ret

00004c4c <__muluhisi3>:
    4c4c:	40 d0       	rcall	.+128    	; 0x4cce <__umulhisi3>
    4c4e:	a5 9f       	mul	r26, r21
    4c50:	90 0d       	add	r25, r0
    4c52:	b4 9f       	mul	r27, r20
    4c54:	90 0d       	add	r25, r0
    4c56:	a4 9f       	mul	r26, r20
    4c58:	80 0d       	add	r24, r0
    4c5a:	91 1d       	adc	r25, r1
    4c5c:	11 24       	eor	r1, r1
    4c5e:	08 95       	ret

00004c60 <__prologue_saves__>:
    4c60:	2f 92       	push	r2
    4c62:	3f 92       	push	r3
    4c64:	4f 92       	push	r4
    4c66:	5f 92       	push	r5
    4c68:	6f 92       	push	r6
    4c6a:	7f 92       	push	r7
    4c6c:	8f 92       	push	r8
    4c6e:	9f 92       	push	r9
    4c70:	af 92       	push	r10
    4c72:	bf 92       	push	r11
    4c74:	cf 92       	push	r12
    4c76:	df 92       	push	r13
    4c78:	ef 92       	push	r14
    4c7a:	ff 92       	push	r15
    4c7c:	0f 93       	push	r16
    4c7e:	1f 93       	push	r17
    4c80:	cf 93       	push	r28
    4c82:	df 93       	push	r29
    4c84:	cd b7       	in	r28, 0x3d	; 61
    4c86:	de b7       	in	r29, 0x3e	; 62
    4c88:	ca 1b       	sub	r28, r26
    4c8a:	db 0b       	sbc	r29, r27
    4c8c:	0f b6       	in	r0, 0x3f	; 63
    4c8e:	f8 94       	cli
    4c90:	de bf       	out	0x3e, r29	; 62
    4c92:	0f be       	out	0x3f, r0	; 63
    4c94:	cd bf       	out	0x3d, r28	; 61
    4c96:	09 94       	ijmp

00004c98 <__epilogue_restores__>:
    4c98:	2a 88       	ldd	r2, Y+18	; 0x12
    4c9a:	39 88       	ldd	r3, Y+17	; 0x11
    4c9c:	48 88       	ldd	r4, Y+16	; 0x10
    4c9e:	5f 84       	ldd	r5, Y+15	; 0x0f
    4ca0:	6e 84       	ldd	r6, Y+14	; 0x0e
    4ca2:	7d 84       	ldd	r7, Y+13	; 0x0d
    4ca4:	8c 84       	ldd	r8, Y+12	; 0x0c
    4ca6:	9b 84       	ldd	r9, Y+11	; 0x0b
    4ca8:	aa 84       	ldd	r10, Y+10	; 0x0a
    4caa:	b9 84       	ldd	r11, Y+9	; 0x09
    4cac:	c8 84       	ldd	r12, Y+8	; 0x08
    4cae:	df 80       	ldd	r13, Y+7	; 0x07
    4cb0:	ee 80       	ldd	r14, Y+6	; 0x06
    4cb2:	fd 80       	ldd	r15, Y+5	; 0x05
    4cb4:	0c 81       	ldd	r16, Y+4	; 0x04
    4cb6:	1b 81       	ldd	r17, Y+3	; 0x03
    4cb8:	aa 81       	ldd	r26, Y+2	; 0x02
    4cba:	b9 81       	ldd	r27, Y+1	; 0x01
    4cbc:	ce 0f       	add	r28, r30
    4cbe:	d1 1d       	adc	r29, r1
    4cc0:	0f b6       	in	r0, 0x3f	; 63
    4cc2:	f8 94       	cli
    4cc4:	de bf       	out	0x3e, r29	; 62
    4cc6:	0f be       	out	0x3f, r0	; 63
    4cc8:	cd bf       	out	0x3d, r28	; 61
    4cca:	ed 01       	movw	r28, r26
    4ccc:	08 95       	ret

00004cce <__umulhisi3>:
    4cce:	a2 9f       	mul	r26, r18
    4cd0:	b0 01       	movw	r22, r0
    4cd2:	b3 9f       	mul	r27, r19
    4cd4:	c0 01       	movw	r24, r0
    4cd6:	a3 9f       	mul	r26, r19
    4cd8:	70 0d       	add	r23, r0
    4cda:	81 1d       	adc	r24, r1
    4cdc:	11 24       	eor	r1, r1
    4cde:	91 1d       	adc	r25, r1
    4ce0:	b2 9f       	mul	r27, r18
    4ce2:	70 0d       	add	r23, r0
    4ce4:	81 1d       	adc	r24, r1
    4ce6:	11 24       	eor	r1, r1
    4ce8:	91 1d       	adc	r25, r1
    4cea:	08 95       	ret

00004cec <_exit>:
    4cec:	f8 94       	cli

00004cee <__stop_program>:
    4cee:	ff cf       	rjmp	.-2      	; 0x4cee <__stop_program>
